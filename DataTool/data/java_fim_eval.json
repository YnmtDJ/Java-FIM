[
  {
    "prompt": "<｜fim▁begin｜>package org.jboss.da.listings.impl.dao;\n\nimport org.jboss.da.listings.api.dao.GADAO;\nimport org.jboss.da.listings.api.model.GA;\n\nimport javax.ejb.Stateless;\nimport javax.persistence.NoResultException;\nimport javax.persistence.TypedQuery;\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Root;\n\nimport java.util.List;\nimport java.util.Optional;\n\n@Stateless\npublic class GADAOImpl extends GenericDAOImpl<GA> implements GADAO {\n\n    public GADAOImpl() {\n        super(GA.class);\n    }\n\n    @Override\n    public Optional<GA> findGA(String groupId, String artifactId) {\n        try {\n            CriteriaBuilder cb = em.getCriteriaBuilder();\n            CriteriaQuery<GA> cq = cb.createQuery(type);\n            Root<GA> ga = cq.from(type);\n            cq.select(ga)\n                    .where(cb.and(cb.equal(ga.get(\"groupId\"), groupId), cb.equal(ga.get(\"artifactId\"), artifactId)));\n            TypedQuery<GA> q = em.createQuery(cq);\n            return Optional.of(q.getSingleResult());\n        } catch (NoResultException e) {\n            return Optional.empty();\n        }\n    }\n\n    @Override\n    public List<GA> findAll() {\n        CriteriaBuilder cb = em.getCriteriaBuilder();\n        CriteriaQuery<GA> cq = cb.createQuery(type);\n        Root<GA> ga = cq.from(type);\n        cq.select(ga);\n        TypedQuery<GA> q = em.createQuery(cq);\n        return q.getResultList();\n<｜fim▁hole｜>    public GA findOrCreate(String groupId, String artifactId) {\n        Optional<GA> oga;\n        if ((oga = findGA(groupId, artifactId)).isPresent()) {\n            return oga.get();\n        }\n        create(new GA(groupId, artifactId));\n        return findGA(groupId, artifactId).get();\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package lucee.commons.io.res.filter;\n\nimport lucee.commons.io.res.Resource;\nimport lucee.commons.lang.StringUtil;\n\npublic final class ExtensionResourceFilter implements ResourceFilter {\n\n    private String[] extensions;\n    private final boolean allowDir;\n    private final boolean ignoreCase;\n    // private int extLen;\n\n    public static final ExtensionResourceFilter EXTENSION_JAR_NO_DIR = new ExtensionResourceFilter(\".jar\", false);\n    public static final ExtensionResourceFilter EXTENSION_CLASS_DIR = new ExtensionResourceFilter(\".class\", true);\n\n    /**\n     * Konstruktor des Filters\n     * \n     * @param extension Endung die geprueft werden soll.\n     */\n    public ExtensionResourceFilter(String extension) {\n    this(new String[] { extension }, false, true);\n    }\n\n    /**\n     * Konstruktor des Filters\n     * \n     * @param extension Endung die geprueft werden soll.\n     */\n    public ExtensionResourceFilter(String extension, boolean allowDir) {\n    this(new String[] { extension }, allowDir, true);\n    }\n\n    public ExtensionResourceFilter(String[] extensions) {\n    this(extensions, false, true);\n    }\n\n    public ExtensionResourceFilter(String[] extensions, boolean allowDir) {\n    this(extensions, allowDir, true);\n    }\n\n    public ExtensionResourceFilter(String[] extensions, boolean allowDir, boolean ignoreCase) {\n    String[] tmp = new String[extensions.length];\n    for (int i = 0; i < extensions.length; i++) {\n        if (!StringUtil.startsWith(extensions[i], '.')) tmp[i] = \".\" + extensions[i];\n        else tmp[i] = extensions[i];\n    }\n    this.extensions = tmp;\n    this.allowDir = allowDir;\n    this.ignoreCase = ignoreCase;\n    }\n\n    public void addExtension(String extension) {\n    String[] tmp = new String[extensions.length + 1];\n    // add existing\n    for (int i = 0; i < extensions.length; i++) {\n        tmp[i] = extensions[i];\n    }\n    // add the new one\n    if (!StringUtil.startsWith(extension, '.')) tmp[extensions.length] = \".\" + extension;\n    else tmp[extensions.length] = extension;\n\n    this.extensions = tmp;\n    }\n\n    @Override\n    public boolean accept(Resource res) {\n    if (res.isDirectory()) return allowDir;\n    if (res.exists()) {\n<｜fim▁hole｜>        if (ignoreCase) {\n            if (StringUtil.endsWithIgnoreCase(name, extensions[i])) return true;\n        }\n        else {\n            if (name.endsWith(extensions[i])) return true;\n        }\n        }\n    }\n    return false;\n    }\n\n    public boolean accept(String name) {\n    for (int i = 0; i < extensions.length; i++) {\n        if (ignoreCase) {\n        if (StringUtil.endsWithIgnoreCase(name, extensions[i])) return true;\n        }\n        else {\n        if (name.endsWith(extensions[i])) return true;\n        }\n    }\n\n    return false;\n    }\n\n    /**\n     * @return Returns the extension.\n     */\n    public String[] getExtensions() {\n    return extensions;\n    }\n}<｜fim▁end｜>",
    "response": "        String name = res.getName();\n        for (int i = 0; i < extensions.length; i++) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.espertech.esper.event.bean;\n\nimport junit.framework.TestCase;\nimport net.sf.cglib.reflect.FastClass;\nimport net.sf.cglib.reflect.FastMethod;\nimport com.espertech.esper.support.bean.SupportBeanComplexProps;\nimport com.espertech.esper.support.event.SupportEventBeanFactory;\nimport com.espertech.esper.support.event.SupportEventAdapterService;\nimport com.espertech.esper.client.EventBean;\nimport com.espertech.esper.client.PropertyAccessException;\n\npublic class TestKeyedFastPropertyGetter extends TestCase\n{\n    private KeyedFastPropertyGetter getter;\n<｜fim▁hole｜>        bean = SupportBeanComplexProps.makeDefaultBean();\n        theEvent = SupportEventBeanFactory.createObject(bean);\n        FastClass fastClass = FastClass.create(Thread.currentThread().getContextClassLoader(), SupportBeanComplexProps.class);\n        FastMethod method = fastClass.getMethod(\"getIndexed\", new Class[] {int.class});\n        getter = new KeyedFastPropertyGetter(method, 1, SupportEventAdapterService.getService());\n    }\n\n    public void testGet()\n    {\n        assertEquals(bean.getIndexed(1), getter.get(theEvent));\n\n        try\n        {\n            getter.get(SupportEventBeanFactory.createObject(\"\"));\n            fail();\n        }\n        catch (PropertyAccessException ex)\n        {\n            // expected\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    private EventBean theEvent;\n    private SupportBeanComplexProps bean;\n\n    public void setUp() throws Exception\n    {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.uberfire.java.nio.fs.jgit.daemon.ssh;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.concurrent.ExecutorService;\n\nimport org.apache.sshd.common.channel.ChannelOutputStream;\nimport org.apache.sshd.common.session.Session;\nimport org.apache.sshd.server.Command;\nimport org.apache.sshd.server.Environment;\nimport org.apache.sshd.server.ExitCallback;\nimport org.apache.sshd.server.SessionAware;\nimport org.apache.sshd.server.session.ServerSession;\nimport org.eclipse.jgit.errors.RepositoryNotFoundException;\nimport org.eclipse.jgit.lib.Repository;\nimport org.eclipse.jgit.transport.ServiceMayNotContinueException;\nimport org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException;\nimport org.eclipse.jgit.transport.resolver.ServiceNotEnabledException;\nimport org.uberfire.commons.async.DescriptiveRunnable;\nimport org.uberfire.java.nio.fs.jgit.JGitFileSystem;\nimport org.uberfire.java.nio.fs.jgit.JGitFileSystemProvider;\nimport org.uberfire.java.nio.security.FileSystemAuthorizer;\nimport org.uberfire.java.nio.security.FileSystemUser;\n\npublic abstract class BaseGitCommand implements Command,\n                                                SessionAware,\n                                                Runnable {\n\n    public final static Session.AttributeKey<FileSystemUser> SUBJECT_KEY = new Session.AttributeKey<FileSystemUser>();\n\n    protected final String command;\n    protected final String repositoryName;\n    protected final FileSystemAuthorizer fileSystemAuthorizer;\n    protected final JGitFileSystemProvider.RepositoryResolverImpl<BaseGitCommand> repositoryResolver;\n    private final ExecutorService executorService;\n\n    private InputStream in;\n    private OutputStream out;\n    private OutputStream err;\n    private ExitCallback callback;\n    private FileSystemUser user;\n\n    public BaseGitCommand(final String command,\n                          final FileSystemAuthorizer fileSystemAuthorizer,\n                          final JGitFileSystemProvider.RepositoryResolverImpl<BaseGitCommand> repositoryResolver,\n                          final ExecutorService executorService) {\n        this.command = command;\n        this.fileSystemAuthorizer = fileSystemAuthorizer;\n        this.repositoryName = buildRepositoryName(command);\n        this.repositoryResolver = repositoryResolver;\n        this.executorService = executorService;\n    }\n\n    private String buildRepositoryName(String command) {\n        int start = getCommandName().length() + 2;\n        final String temp = command.substring(start);\n        return temp.substring(0,\n                              temp.indexOf(\"'\"));\n    }\n\n    protected abstract String getCommandName();\n\n    @Override\n    public void setInputStream(InputStream in) {\n        this.in = in;\n    }\n\n    @Override\n    public void setOutputStream(OutputStream out) {\n        this.out = out;\n        if (out instanceof ChannelOutputStream) {\n            ((ChannelOutputStream) out).setNoDelay(true);\n        }\n    }\n\n    @Override\n    public void setErrorStream(OutputStream err) {\n        this.err = err;\n        if (err instanceof ChannelOutputStream) {\n            ((ChannelOutputStream) err).setNoDelay(true);\n        }\n    }\n\n    @Override\n    public void setExitCallback(ExitCallback callback) {\n        this.callback = callback;\n    }\n\n    @Override\n    public void start(final Environment env) throws IOException {\n        executorService.execute(new DescriptiveRunnable() {\n            @Override\n            public String getDescription() {\n                return \"Git Command [\" + getClass().getName() + \"]\";\n            }\n\n            @Override\n            public void run() {\n                BaseGitCommand.this.run();\n            }\n        });\n<｜fim▁hole｜>            if (repository != null) {\n                final JGitFileSystem fileSystem = repositoryResolver.resolveFileSystem(repository);\n\n                if (fileSystemAuthorizer.authorize(fileSystem,\n                                                   user)) {\n                    execute(user,\n                            repository,\n                            in,\n                            out,\n                            err,\n                            fileSystem);\n                } else {\n                    err.write(\"Invalid credentials.\".getBytes());\n                }\n            } else {\n                err.write(\"Can't resolve repository name.\".getBytes());\n            }\n        } catch (final Throwable ignored) {\n        }\n        if (callback != null) {\n            callback.onExit(0);\n        }\n    }\n\n    private Repository openRepository(String name)\n            throws ServiceMayNotContinueException {\n        // Assume any attempt to use \\ was by a Windows client\n        // and correct to the more typical / used in Git URIs.\n        //\n        name = name.replace('\\\\',\n                            '/');\n\n        // git://thishost/path should always be name=\"/path\" here\n        //\n        if (!name.startsWith(\"/\")) {\n            return null;\n        }\n\n        try {\n            return repositoryResolver.open(this,\n                                           name.substring(1));\n        } catch (RepositoryNotFoundException e) {\n            // null signals it \"wasn't found\", which is all that is suitable\n            // for the remote client to know.\n            return null;\n        } catch (ServiceNotAuthorizedException e) {\n            // null signals it \"wasn't found\", which is all that is suitable\n            // for the remote client to know.\n            return null;\n        } catch (ServiceNotEnabledException e) {\n            // null signals it \"wasn't found\", which is all that is suitable\n            // for the remote client to know.\n            return null;\n        }\n    }\n\n    protected abstract void execute(final FileSystemUser user,\n                                    final Repository repository,\n                                    final InputStream in,\n                                    final OutputStream out,\n                                    final OutputStream err,\n                                    final JGitFileSystem fileSystem);\n\n    @Override\n    public void destroy() {\n    }\n\n    public FileSystemUser getUser() {\n        return user;\n    }\n\n    @Override\n    public void setSession(final ServerSession session) {\n        this.user = session.getAttribute(BaseGitCommand.SUBJECT_KEY);\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    @Override\n    public void run() {\n        try {\n            final Repository repository = openRepository(repositoryName);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package models;\n\nimport com.avaje.ebean.annotation.CreatedTimestamp;\nimport play.data.validation.Constraints;\nimport play.db.ebean.Model;\n\nimport javax.persistence.*;\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.List;\n\n@Entity\npublic class StarMap extends Model {\n    @Id\n    private long id;\n\n    @Column(name=\"created_date\")\n    @CreatedTimestamp\n    private Date createdDate;\n\n    private String s3imageUrl; // Stored S3 image url\n    private String submissionId; //Astrometry API subid\n    private String jobId; //Astrometry API jobid\n    private String jobStatus; //Success, Solving, or Failure.\n\n    @Lob\n    private String imageAnnotations; //Astrometry API image data\n\n    @ManyToOne\n    private UserInfo user;\n\n    @ManyToMany\n    private List<Star> stars;\n\n    @OneToMany(mappedBy=\"starMap\", cascade = CascadeType.ALL)\n    private List<Coordinate> coordinates;\n\n    /**\n     * The EBean ORM finder method for database queries on ID.\n     *\n     * @return The finder method for StarMaps.\n     */\n    public static Finder<Long, StarMap> find() {\n        return new Finder<Long, StarMap>(Long.class, StarMap.class);\n    }\n\n    /**\n     * Constructor to create new StarMap instance for a given user.\n     * @param user\n     */\n    public StarMap(UserInfo user) {\n        this.user = user;\n    }\n\n    /**\n     * Convenience constructor to be used for testing.\n     *\n     * @param s3imageUrl\n     * @param submissionId\n     * @param jobId\n     */\n    public StarMap(String s3imageUrl, String submissionId, String jobId, File image) {\n        this.s3imageUrl = s3imageUrl;\n        this.submissionId = submissionId;\n        this.jobId = jobId;\n    }\n\n    public void addStar(Star star) {\n\n        if (!this.stars.contains(star)) {\n            stars.add(star);\n        }\n\n    }\n\n    /**\n     * Converts File to byte array.\n     *\n     * @param file The file to convert.\n     * @return The byte array representation of the input file.\n     */\n    public byte[] fileToBytes(File file) throws IOException {\n        InputStream fis = new BufferedInputStream(new FileInputStream(file));\n\n        ByteArrayOutputStream byteOS = new ByteArrayOutputStream(); //Byte stream\n        OutputStream bufOS = new BufferedOutputStream(byteOS); //Buffer the above byte stream for efficiency.\n\n        byte[] buf = new byte[4096];\n        int bytesRead = -1;\n        while ((bytesRead = fis.read(buf)) != -1) { //Read data from input stream into buf. Returns # of bytes read.\n            bufOS.write(buf, 0, bytesRead); //Then write the buf data into output stream.\n        }\n\n        fis.close();\n        bufOS.close();\n\n        return byteOS.toByteArray();\n    }\n\n    public static StarMap getStarmap(Long id) {\n        return StarMap.find().where().eq(\"id\", id).findUnique();\n    }\n\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public String getSubmissionId() {\n        return submissionId;\n    }\n\n    public void setSubmissionId(String submissionId) {\n        this.submissionId = submissionId;\n    }\n\n    public String getJobId() {\n        return jobId;\n    }\n\n    public void setJobId(String jobId) {\n        this.jobId = jobId;\n    }\n\n    public Date getCreatedDate() {\n        return createdDate;\n    }\n\n    public void setCreatedDate(Date createdDate) {\n        this.createdDate = createdDate;\n    }\n\n    public String getS3imageUrl() {\n        return s3imageUrl;\n    }\n\n    public void setS3imageUrl(String s3imageUrl) {\n        this.s3imageUrl = s3imageUrl;\n    }\n\n    public String getImageAnnotations() {\n<｜fim▁hole｜>        this.imageAnnotations = imageAnnotations;\n    }\n\n    public String getJobStatus() {\n        return jobStatus;\n    }\n\n    public void setJobStatus(String jobStatus) {\n        this.jobStatus = jobStatus;\n    }\n\n    public UserInfo getUser() {\n        return user;\n    }\n\n    public void setUser(UserInfo user) {\n        this.user = user;\n    }\n\n    public List<Star> getStars() {\n        return stars;\n    }\n\n    public void setStars(List<Star> stars) {\n        this.stars = stars;\n    }\n\n    public List<Coordinate> getCoordinates() {\n        return coordinates;\n    }\n\n    public void setCoordinates(List<Coordinate> coordinates) {\n        this.coordinates = coordinates;\n    }\n}<｜fim▁end｜>",
    "response": "        return imageAnnotations;\n    }\n\n    public void setImageAnnotations(String imageAnnotations) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package cherry.foundation.generator.test;\n\nimport lombok.EqualsAndHashCode;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\n@Getter\n@Setter\n@EqualsAndHashCode(callSuper = true)\n@ToString(callSuper = true)\npublic class GroupForm extends GroupFormBase {\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "\n    private static final long serialVersionUID = 1L;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.hazelcast.splitbrainprotection.multimap;\n\nimport com.hazelcast.multimap.MultiMap;\nimport com.hazelcast.splitbrainprotection.AbstractSplitBrainProtectionTest;\nimport com.hazelcast.splitbrainprotection.SplitBrainProtectionException;\nimport com.hazelcast.splitbrainprotection.SplitBrainProtectionOn;\nimport com.hazelcast.test.HazelcastSerialParametersRunnerFactory;\nimport com.hazelcast.test.TestHazelcastInstanceFactory;\nimport com.hazelcast.test.annotation.ParallelJVMTest;\nimport com.hazelcast.test.annotation.QuickTest;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.junit.experimental.categories.Category;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameter;\nimport org.junit.runners.Parameterized.Parameters;\nimport org.junit.runners.Parameterized.UseParametersRunnerFactory;\n\nimport static com.hazelcast.test.HazelcastTestSupport.smallInstanceConfig;\nimport static java.util.Arrays.asList;\n\n@RunWith(Parameterized.class)\n@UseParametersRunnerFactory(HazelcastSerialParametersRunnerFactory.class)\n@Category({QuickTest.class, ParallelJVMTest.class})\npublic class MultiMapSplitBrainProtectionReadTest extends AbstractSplitBrainProtectionTest {\n\n    @Parameters(name = \"splitBrainProtectionType:{0}\")\n    public static Iterable<Object[]> parameters() {\n        return asList(new Object[][]{{SplitBrainProtectionOn.READ}, {SplitBrainProtectionOn.READ_WRITE}});\n    }\n\n    @Parameter\n    public static SplitBrainProtectionOn splitBrainProtectionOn;\n\n    @BeforeClass\n    public static void setUp() {\n        initTestEnvironment(smallInstanceConfig(), new TestHazelcastInstanceFactory());\n    }\n\n    @AfterClass\n    public static void tearDown() {\n        shutdownTestEnvironment();\n    }\n\n    @Test\n    public void valueCount_successful_whenSplitBrainProtectionSize_met() {\n        map(0).valueCount(\"foo\");\n    }\n\n    @Test(expected = SplitBrainProtectionException.class)\n    public void valueCount_failing_whenSplitBrainProtectionSize_notMet() {\n        map(3).valueCount(\"foo\");\n    }\n\n    @Test\n    public void get_successful_whenSplitBrainProtectionSize_met() {\n        map(0).get(\"foo\");\n    }\n\n    @Test(expected = SplitBrainProtectionException.class)\n    public void get_failing_whenSplitBrainProtectionSize_notMet() {\n        map(3).get(\"foo\");\n    }\n\n    @Test\n    public void containsKey_successful_whenSplitBrainProtectionSize_met() {\n        map(0).containsKey(\"foo\");\n    }\n\n    @Test(expected = SplitBrainProtectionException.class)\n    public void containsKey_failing_whenSplitBrainProtectionSize_notMet() {\n        map(3).containsKey(\"foo\");\n    }\n\n    @Test\n    public void containsEntry_successful_whenSplitBrainProtectionSize_met() {\n        map(0).containsEntry(\"foo\", \"bar\");\n    }\n\n    @Test(expected = SplitBrainProtectionException.class)\n    public void containsEntry_failing_whenSplitBrainProtectionSize_notMet() {\n        map(3).containsEntry(\"foo\", \"bar\");\n    }\n\n    @Test\n    public void containsValue_successful_whenSplitBrainProtectionSize_met() {\n        map(0).containsValue(\"foo\");\n    }\n\n    @Test(expected = SplitBrainProtectionException.class)\n    public void containsValue_failing_whenSplitBrainProtectionSize_notMet() {\n        map(3).containsValue(\"foo\");\n    }\n\n    @Test\n    public void keySet_successful_whenSplitBrainProtectionSize_met() {\n        map(0).keySet();\n    }\n\n    @Test(expected = SplitBrainProtectionException.class)\n    public void keySet_failing_whenSplitBrainProtectionSize_notMet() {\n        map(3).keySet();\n    }\n\n<｜fim▁hole｜>    public void localKeySet_successful_whenSplitBrainProtectionSize_met() {\n        try {\n            map(0).localKeySet();\n        } catch (UnsupportedOperationException ignored) {\n        }\n    }\n\n    @Test(expected = SplitBrainProtectionException.class)\n    public void localKeySet_successful_whenSplitBrainProtectionSize_notMet() {\n        try {\n            map(3).localKeySet();\n        } catch (UnsupportedOperationException ex) {\n            throw new SplitBrainProtectionException(\"work-around for client side tests\");\n        }\n    }\n\n    @Test\n    public void values_successful_whenSplitBrainProtectionSize_met() {\n        map(0).values();\n    }\n\n    @Test(expected = SplitBrainProtectionException.class)\n    public void values_failing_whenSplitBrainProtectionSize_notMet() {\n        map(3).values();\n    }\n\n    @Test\n    public void entrySet_successful_whenSplitBrainProtectionSize_met() {\n        map(0).entrySet();\n    }\n\n    @Test(expected = SplitBrainProtectionException.class)\n    public void entrySet_failing_whenSplitBrainProtectionSize_notMet() {\n        map(3).entrySet();\n    }\n\n    @Test\n    public void size_successful_whenSplitBrainProtectionSize_met() {\n        map(0).size();\n    }\n\n    @Test(expected = SplitBrainProtectionException.class)\n    public void size_failing_whenSplitBrainProtectionSize_notMet() {\n        map(3).size();\n    }\n\n    @Test\n    public void isLocked_successful_whenSplitBrainProtectionSize_met() {\n        map(0).isLocked(\"foo\");\n    }\n\n    @Test(expected = SplitBrainProtectionException.class)\n    public void isLocked_failing_whenSplitBrainProtectionSize_notMet() {\n        map(3).isLocked(\"foo\");\n    }\n\n    protected MultiMap map(int index) {\n        return multimap(index, splitBrainProtectionOn);\n    }\n}<｜fim▁end｜>",
    "response": "    @Test\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ru.org.linux.util.formatter;\n\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class ToLorCodeFormatterTest {\n  private static final String QUOTING1 = \"> 1\";\n  private static final String RESULT_QUOTING1 = \"[quote] 1[/quote]\";\n\n  private static final String QUOTING2 = \"> 1\\n2\";\n  private static final String RESULT_QUOTING2 = \"[quote] 1[br][/quote]2\";\n\n  private static final String QUOTING3 = \"> 1\\n2\\n\\n3\";\n  private static final String RESULT_QUOTING3 = \"[quote] 1[br][/quote]2\\n\\n3\";\n\n  private ToLorCodeTexFormatter toLorCodeTexFormatter = new ToLorCodeTexFormatter();\n  private ToLorCodeFormatter toLorCodeFormatter = new ToLorCodeFormatter();\n\n  @Test\n  public void testToLorCodeTexFormatter() {\n    assertEquals(RESULT_QUOTING1, toLorCodeTexFormatter.format(QUOTING1));\n    assertEquals(RESULT_QUOTING2, toLorCodeTexFormatter.format(QUOTING2));\n    assertEquals(RESULT_QUOTING3, toLorCodeTexFormatter.format(QUOTING3));\n\n    assertEquals(\"[quote]test[br][/quote]test\", toLorCodeTexFormatter.format(\">test\\n\\ntest\")); // 4\n    assertEquals(\"test\\n\\ntest\\ntest\", toLorCodeTexFormatter.format(\"test\\n\\ntest\\ntest\")); // 1\n    assertEquals(\"test\\n\\n[quote]test[/quote]\", toLorCodeTexFormatter.format(\"test\\n\\n>test\")); // 7\n    assertEquals(\"test &\", toLorCodeTexFormatter.format(\"test &\")); // 8\n    assertEquals(\"test[br]test\", toLorCodeFormatter.format(\"test\\r\\ntest\", true)); // 9\n    assertEquals(\"test[br]test\", toLorCodeFormatter.format(\"test\\ntest\", true)); // 10\n    assertEquals(\"[quote]test[br][/quote]test\", toLorCodeFormatter.format(\">test\\ntest\", true)); // 11\n    assertEquals(\"[quote]test[br]test[/quote]\", toLorCodeFormatter.format(\">test\\n>test\", true)); // 12\n  }\n\n  @Test\n  public void codeEscapeBasic() {\n    assertEquals(\"[[code]]\", ToLorCodeTexFormatter.escapeCode(\"[code]\"));\n    assertEquals(\" [[code]]\", ToLorCodeTexFormatter.escapeCode(\" [code]\"));\n    assertEquals(\"[[/code]]\", ToLorCodeTexFormatter.escapeCode(\"[/code]\"));\n    assertEquals(\" [[/code]]\", ToLorCodeTexFormatter.escapeCode(\" [/code]\"));\n    assertEquals(\"[[code]]\", ToLorCodeTexFormatter.escapeCode(\"[[code]]\"));\n    assertEquals(\" [[code]]\", ToLorCodeTexFormatter.escapeCode(\" [[code]]\"));\n    assertEquals(\" [[/code]]\", ToLorCodeTexFormatter.escapeCode(\" [[/code]]\"));\n\n    assertEquals(\"][[code]]\", ToLorCodeTexFormatter.escapeCode(\"][code]\"));\n    assertEquals(\"[[code]] [[code]]\", ToLorCodeTexFormatter.escapeCode(\"[code] [code]\"));\n    assertEquals(\"[[code]] [[/code]]\", ToLorCodeTexFormatter.escapeCode(\"[code] [/code]\"));\n\n    // TODO\n    //     assertEquals(\"[[code]][[code]]\", ToLorCodeTexFormatter.escapeCode(\"[code][code]\"));\n  }\n\n  @Test\n  public void codeEscape() {\n    assertEquals(\"[code][/code]\",\n        toLorCodeTexFormatter.format(\"[code][/code]\"));\n    assertEquals(\"[code=perl][/code]\",\n        toLorCodeTexFormatter.format(\"[code=perl][/code]\"));\n    assertEquals(\"[[code]] [[/code]]\",\n        toLorCodeFormatter.format(\"[code] [/code]\", true));\n    assertEquals(\"[[code=perl]] [[/code]]\",\n        toLorCodeFormatter.format(\"[code=perl] [/code]\", true));\n  }\n\n  @Test\n  public void codeAndQuoteTest() {\n    assertEquals(\n            \"[quote] test [br][/quote][code]\\n\" +\n            \"> test\\n\" +\n            \"[/code]\",\n            toLorCodeTexFormatter.format(\n                    \"> test \\n\\n\"+\n                    \"[code]\\n\"+\n                    \"> test\\n\"+\n                    \"[/code]\")\n    );\n\n    assertEquals(\n            \"[quote] test [br][/quote][code]\\n\" +\n            \"> test\\n\" +\n            \"[/code]\",\n            toLorCodeTexFormatter.format(\n                    \"> test \\n\"+\n                    \"[code]\\n\"+\n                    \"> test\\n\"+\n                    \"[/code]\")\n    );\n\n    assertEquals(\n            \"[quote] test [br] [[code]] [br] test [/quote]\",\n            toLorCodeTexFormatter.format(\n                    \"> test \\n\"+\n                    \"> [code] \\n\"+\n                    \"> test \\n\")\n    );\n\n    assertEquals(\n            \"[quote] test [[code]] [br] test[br] test [[/code]][/quote]\",\n            toLorCodeTexFormatter.format(\n                    \"> test [code] \\n\"+\n                    \"> test\\n\"+\n                    \"> test [/code]\\n\")\n    );\n\n    assertEquals(\n            \"[code]test[/code]\\n\" +\n            \"[quote] test[/quote]\",\n            toLorCodeTexFormatter.format(\n                    \"[code]test[/code]\\n\"+\n                    \"> test\\n\")\n    );\n\n    assertEquals(\n            \"[[code]] test\",\n<｜fim▁hole｜>\n    assertEquals(\n            \"[quote] [[code]] test[/quote]\",\n            toLorCodeTexFormatter.format(\n              \"> [[code]] test\"\n            )\n    );\n\n    assertEquals(\n            \"[[code]] test\\n\" +\n            \"[quote] test[/quote]\",\n            toLorCodeTexFormatter.format(\n              \"[[code]] test\\n\" +\n              \"> test\\n\"\n            )\n    );\n\n  }\n\n  @Test\n  public void againQuoteFormatter() {\n    assertEquals(\"[quote]one[br][quote]two[br][/quote]one[br][quote][quote]three[/quote][/quote][/quote]\",\n        toLorCodeFormatter.format(\">one\\n>>two\\n>one\\n>>>three\", true));\n    assertEquals(\"[quote]one[br][quote]two[br][/quote]one[br][quote][quote]three[/quote][/quote][/quote]\",\n        toLorCodeTexFormatter.format(\">one\\n>>two\\n>one\\n>>>three\"));\n  }\n}<｜fim▁end｜>",
    "response": "            toLorCodeTexFormatter.format(\n              \"[[code]] test\"\n            )\n    );\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package fr.lip6.move.pnml.hlpn.hlcorestructure;\n\nimport java.nio.channels.FileChannel;\n\nimport org.apache.axiom.om.OMElement;\nimport org.eclipse.emf.common.util.DiagnosticChain;\n\nimport fr.lip6.move.pnml.framework.utils.IdRefLinker;\nimport fr.lip6.move.pnml.framework.utils.exception.InnerBuildException;\nimport fr.lip6.move.pnml.framework.utils.exception.InvalidIDException;\nimport fr.lip6.move.pnml.framework.utils.exception.VoidRepositoryException;\nimport fr.lip6.move.pnml.hlpn.terms.Term;\n\npublic interface HLAnnotation extends HLCoreAnnotation {\n    /**\n     * Returns the value of the '<em><b>Structure</b></em>' containment reference.\n     * It is bidirectional and its opposite is '{@link fr.lip6.move.pnml.hlpn.terms.Term#getContainerHLAnnotation <em>Container HL Annotation</em>}'.\n     * <!-- begin-user-doc -->\n     * <p>\n     * If the meaning of the '<em>Structure</em>' containment reference isn't clear,\n     * there really should be more of a description here...\n     * </p>\n     * <!-- end-user-doc -->\n     * @return the value of the '<em>Structure</em>' containment reference.\n     * @see #setStructure(Term)\n     * @see fr.lip6.move.pnml.hlpn.hlcorestructure.HlcorestructurePackage#getHLAnnotation_Structure()\n     * @see fr.lip6.move.pnml.hlpn.terms.Term#getContainerHLAnnotation\n     * @model opposite=\"containerHLAnnotation\" containment=\"true\"\n     *        annotation=\"http://www.pnml.org/models/ToPNML tag='structure' kind='follow'\"\n     * @generated\n     */\n    Term getStructure();\n\n    /**\n     * Sets the value of the '{@link fr.lip6.move.pnml.hlpn.hlcorestructure.HLAnnotation#getStructure <em>Structure</em>}' containment reference.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @param value the new value of the '<em>Structure</em>' containment reference.\n     * @see #getStructure()\n     * @generated\n     */\n    void setStructure(Term value);\n\n    /**\n     * Returns the value of the '<em><b>Container Arc</b></em>' container reference.\n     * It is bidirectional and its opposite is '{@link fr.lip6.move.pnml.hlpn.hlcorestructure.Arc#getHlinscription <em>Hlinscription</em>}'.\n     * <!-- begin-user-doc -->\n     * <p>\n     * If the meaning of the '<em>Container Arc</em>' container reference isn't clear,\n     * there really should be more of a description here...\n     * </p>\n     * <!-- end-user-doc -->\n     * @return the value of the '<em>Container Arc</em>' container reference.\n     * @see #setContainerArc(Arc)\n     * @see fr.lip6.move.pnml.hlpn.hlcorestructure.HlcorestructurePackage#getHLAnnotation_ContainerArc()\n     * @see fr.lip6.move.pnml.hlpn.hlcorestructure.Arc#getHlinscription\n     * @model opposite=\"hlinscription\" transient=\"false\"\n     * @generated\n     */\n    Arc getContainerArc();\n\n    /**\n     * Sets the value of the '{@link fr.lip6.move.pnml.hlpn.hlcorestructure.HLAnnotation#getContainerArc <em>Container Arc</em>}' container reference.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @param value the new value of the '<em>Container Arc</em>' container reference.\n     * @see #getContainerArc()\n     * @generated\n     */\n<｜fim▁hole｜>     */\n    @Override\n    public String toPNML();\n\n    /**\n     * set values to conform PNML document\n     */\n    @Override\n    public void fromPNML(OMElement subRoot, IdRefLinker idr) throws InnerBuildException, InvalidIDException,\n            VoidRepositoryException;\n\n    /**\n     * Write the PNML xml tree of this object into file\n     */\n    @Override\n    public void toPNML(FileChannel fc);\n\n    @Override\n    public boolean validateOCL(DiagnosticChain diagnostics);\n} // HLAnnotation<｜fim▁end｜>",
    "response": "    void setContainerArc(Arc value);\n\n    /**\n     * Return the string containing the pnml output\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.keycloak.testsuite.adapter;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.not;\nimport static org.keycloak.testsuite.arquillian.DeploymentTargetModifier.APP_SERVER_CURRENT;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URI;\nimport java.net.URL;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\n<｜fim▁hole｜>import org.apache.commons.io.FileUtils;\nimport org.apache.commons.lang3.math.NumberUtils;\nimport org.jboss.arquillian.container.test.api.ContainerController;\nimport org.jboss.arquillian.container.test.api.Deployer;\nimport org.jboss.arquillian.graphene.page.Page;\nimport org.jboss.arquillian.test.api.ArquillianResource;\nimport org.junit.After;\nimport org.junit.Assume;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.keycloak.testsuite.arquillian.ContainerInfo;\nimport org.keycloak.testsuite.auth.page.login.LoginActions;\nimport org.keycloak.testsuite.util.ContainerAssume;\nimport org.keycloak.testsuite.util.ServerURLs;\n\npublic abstract class AbstractAdapterClusteredTest extends AbstractServletsAdapterTest {\n\n    protected static final String NODE_1_NAME = \"ha-node-1\";\n    protected static final String NODE_2_NAME = \"ha-node-2\";\n\n    // target containers will be replaced in runtime in DeploymentTargetModifier by real app-server\n    public static final String TARGET_CONTAINER_NODE_1 = APP_SERVER_CURRENT + NODE_1_NAME;\n    public static final String TARGET_CONTAINER_NODE_2 = APP_SERVER_CURRENT + NODE_2_NAME;\n\n    protected static final int PORT_OFFSET_NODE_REVPROXY = NumberUtils.toInt(System.getProperty(\"app.server.reverse-proxy.port.offset\"), -1);\n    protected static final int HTTP_PORT_NODE_REVPROXY = 8080 + PORT_OFFSET_NODE_REVPROXY;\n    protected static final int PORT_OFFSET_NODE_1 = NumberUtils.toInt(System.getProperty(\"app.server.1.port.offset\"), -1);\n    protected static final int HTTP_PORT_NODE_1 = 8080 + PORT_OFFSET_NODE_1;\n    protected static final int PORT_OFFSET_NODE_2 = NumberUtils.toInt(System.getProperty(\"app.server.2.port.offset\"), -1);\n    protected static final int HTTP_PORT_NODE_2 = 8080 + PORT_OFFSET_NODE_2;\n    protected static final URI NODE_1_URI = URI.create(\"http://\" + ServerURLs.APP_SERVER_HOST + \":\" + HTTP_PORT_NODE_1);\n    protected static final URI NODE_2_URI = URI.create(\"http://\" + ServerURLs.APP_SERVER_HOST + \":\" + HTTP_PORT_NODE_2);\n\n    protected LoadBalancingProxyClient loadBalancerToNodes;\n    protected Undertow reverseProxyToNodes;\n\n    @ArquillianResource\n    protected ContainerController controller;\n\n    @ArquillianResource\n    protected Deployer deployer;\n\n    @Page\n    LoginActions loginActionsPage;\n\n    @BeforeClass\n    public static void checkPropertiesSet() {\n        Assume.assumeThat(PORT_OFFSET_NODE_1, not(is(-1)));\n        Assume.assumeThat(PORT_OFFSET_NODE_2, not(is(-1)));\n        Assume.assumeThat(PORT_OFFSET_NODE_REVPROXY, not(is(-1)));\n        ContainerAssume.assumeNotAppServerSSL();\n    }\n\n    @Before\n    public void prepareReverseProxy() throws Exception {\n        loadBalancerToNodes = new LoadBalancingProxyClient().addHost(NODE_1_URI, NODE_1_NAME).setConnectionsPerThread(10);\n        int maxTime = 3600000; // 1 hour for proxy request timeout, so we can debug the backend keycloak servers\n        reverseProxyToNodes = Undertow.builder()\n          .addHttpListener(HTTP_PORT_NODE_REVPROXY, ServerURLs.APP_SERVER_HOST)\n          .setIoThreads(2)\n          .setHandler(new ProxyHandler(loadBalancerToNodes, maxTime, ResponseCodeHandler.HANDLE_404)).build();\n        reverseProxyToNodes.start();\n    }\n\n    @Before\n    public void startServers() throws Exception {\n        prepareServerDirectories();\n\n        for (ContainerInfo containerInfo : testContext.getAppServerBackendsInfo()) {\n            controller.start(containerInfo.getQualifier());\n        }\n        deploy();\n    }\n\n    protected abstract void deploy();\n\n    protected void prepareServerDirectories() throws Exception {\n        prepareServerDirectory(\"standalone-cluster\", \"standalone-\" + NODE_1_NAME);\n        prepareServerDirectory(\"standalone-cluster\", \"standalone-\" + NODE_2_NAME);\n    }\n\n    protected void prepareServerDirectory(String baseDir, String targetSubdirectory) throws IOException {\n        Path path = Paths.get(System.getProperty(\"app.server.home\"), targetSubdirectory);\n        File targetSubdirFile = path.toFile();\n        FileUtils.deleteDirectory(targetSubdirFile);\n        FileUtils.forceMkdir(targetSubdirFile);\n        //workaround for WFARQ-44\n        FileUtils.copyDirectory(Paths.get(System.getProperty(\"app.server.home\"), baseDir, \"deployments\").toFile(), new File(targetSubdirFile, \"deployments\"));\n        FileUtils.copyDirectory(Paths.get(System.getProperty(\"app.server.home\"), baseDir, \"configuration\").toFile(), new File(targetSubdirFile, \"configuration\"));\n    }\n\n    @After\n    public void stopReverseProxy() {\n        reverseProxyToNodes.stop();\n    }\n\n    @After\n    public void stopServers() {\n        undeploy();\n        for (ContainerInfo containerInfo : testContext.getAppServerBackendsInfo()) {\n            controller.stop(containerInfo.getQualifier());\n        }\n    }\n\n    protected abstract void undeploy();\n\n    protected void updateProxy(String hostToPointToName, URI hostToPointToUri, URI hostToRemove) {\n        loadBalancerToNodes.removeHost(hostToRemove);\n        loadBalancerToNodes.addHost(hostToPointToUri, hostToPointToName);\n        log.infov(\"Reverse proxy will direct requests to {0}\", hostToPointToUri);\n    }\n\n    protected String getProxiedUrl(URL url) {\n        try {\n            return new URL(url.getProtocol(), url.getHost(), HTTP_PORT_NODE_REVPROXY, url.getFile()).toString();\n        } catch (MalformedURLException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "import io.undertow.Undertow;\nimport io.undertow.server.handlers.ResponseCodeHandler;\nimport io.undertow.server.handlers.proxy.LoadBalancingProxyClient;\nimport io.undertow.server.handlers.proxy.ProxyHandler;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jabref.logic.cleanup;\n\n<｜fim▁hole｜>import org.jabref.model.cleanup.FieldFormatterCleanup;\nimport org.jabref.model.entry.BibEntry;\nimport org.jabref.model.entry.field.Field;\nimport org.jabref.model.entry.field.InternalField;\nimport org.jabref.model.entry.field.StandardField;\nimport org.jabref.model.entry.types.StandardEntryType;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class FieldFormatterCleanupTest {\n\n    private BibEntry entry;\n    private Map<Field, String> fieldMap;\n\n    @BeforeEach\n    public void setUp() {\n        fieldMap = new HashMap<>();\n        entry = new BibEntry();\n\n        entry.setType(StandardEntryType.Article);\n        fieldMap.put(StandardField.TITLE, \"JabRef\");\n        fieldMap.put(StandardField.BOOKTITLE, \"JabRefBook\");\n        fieldMap.put(StandardField.YEAR, \"twohundredsixteen\");\n        fieldMap.put(StandardField.MONTH, \"october\");\n        fieldMap.put(StandardField.ABSTRACT, \"JabRefAbstract\");\n        fieldMap.put(StandardField.DOI, \"jabrefdoi\");\n        fieldMap.put(StandardField.ISSN, \"jabrefissn\");\n        entry.setField(fieldMap);\n    }\n\n    @Test\n    public void testInternalAllField() throws Exception {\n        FieldFormatterCleanup cleanup = new FieldFormatterCleanup(InternalField.INTERNAL_ALL_FIELD, new UpperCaseFormatter());\n        cleanup.cleanup(entry);\n\n        assertEquals(fieldMap.get(StandardField.TITLE).toUpperCase(), entry.getField(StandardField.TITLE).get());\n        assertEquals(fieldMap.get(StandardField.BOOKTITLE).toUpperCase(), entry.getField(StandardField.BOOKTITLE).get());\n        assertEquals(fieldMap.get(StandardField.YEAR).toUpperCase(), entry.getField(StandardField.YEAR).get());\n        assertEquals(fieldMap.get(StandardField.MONTH).toUpperCase(), entry.getField(StandardField.MONTH).get());\n        assertEquals(fieldMap.get(StandardField.ABSTRACT).toUpperCase(), entry.getField(StandardField.ABSTRACT).get());\n        assertEquals(fieldMap.get(StandardField.DOI).toUpperCase(), entry.getField(StandardField.DOI).get());\n        assertEquals(fieldMap.get(StandardField.ISSN).toUpperCase(), entry.getField(StandardField.ISSN).get());\n    }\n\n    @Test\n    public void testInternalAllTextFieldsField() throws Exception {\n        FieldFormatterCleanup cleanup = new FieldFormatterCleanup(InternalField.INTERNAL_ALL_TEXT_FIELDS_FIELD, new UpperCaseFormatter());\n        cleanup.cleanup(entry);\n\n        assertEquals(fieldMap.get(StandardField.TITLE).toUpperCase(), entry.getField(StandardField.TITLE).get());\n        assertEquals(fieldMap.get(StandardField.BOOKTITLE).toUpperCase(), entry.getField(StandardField.BOOKTITLE).get());\n        assertEquals(fieldMap.get(StandardField.YEAR), entry.getField(StandardField.YEAR).get());\n        assertEquals(fieldMap.get(StandardField.MONTH), entry.getField(StandardField.MONTH).get());\n        assertEquals(fieldMap.get(StandardField.ABSTRACT).toUpperCase(), entry.getField(StandardField.ABSTRACT).get());\n        assertEquals(fieldMap.get(StandardField.DOI), entry.getField(StandardField.DOI).get());\n        assertEquals(fieldMap.get(StandardField.ISSN), entry.getField(StandardField.ISSN).get());\n    }\n\n    @Test\n    public void testCleanupAllFieldsIgnoresKeyField() throws Exception {\n        FieldFormatterCleanup cleanup = new FieldFormatterCleanup(InternalField.INTERNAL_ALL_FIELD, new UnicodeToLatexFormatter());\n        entry.setField(InternalField.KEY_FIELD, \"François-Marie Arouet\"); // Contains ç, not in Basic Latin\n        cleanup.cleanup(entry);\n\n        assertEquals(\"François-Marie Arouet\", entry.getField(InternalField.KEY_FIELD).get());\n    }\n\n    @Test\n    public void testCleanupAllTextFieldsIgnoresKeyField() throws Exception {\n        FieldFormatterCleanup cleanup = new FieldFormatterCleanup(InternalField.INTERNAL_ALL_TEXT_FIELDS_FIELD, new UnicodeToLatexFormatter());\n        entry.setField(InternalField.KEY_FIELD, \"François-Marie Arouet\"); // Contains ç, not in Basic Latin\n        cleanup.cleanup(entry);\n\n        assertEquals(\"François-Marie Arouet\", entry.getField(InternalField.KEY_FIELD).get());\n    }\n\n    @Test\n    public void testCleanupKeyFieldCleansUpKeyField() throws Exception {\n        FieldFormatterCleanup cleanup = new FieldFormatterCleanup(InternalField.KEY_FIELD, new UnicodeToLatexFormatter());\n        entry.setField(InternalField.KEY_FIELD, \"François-Marie Arouet\"); // Contains ç, not in Basic Latin\n        cleanup.cleanup(entry);\n\n        assertEquals(\"Fran{\\\\c{c}}ois-Marie Arouet\", entry.getField(InternalField.KEY_FIELD).get());\n    }\n}<｜fim▁end｜>",
    "response": "import java.util.HashMap;\nimport java.util.Map;\n\nimport org.jabref.logic.formatter.bibtexfields.UnicodeToLatexFormatter;\nimport org.jabref.logic.formatter.casechanger.UpperCaseFormatter;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.prestosql.operator.scalar;\n\nimport io.prestosql.spi.block.Block;\nimport io.prestosql.spi.function.OperatorDependency;\nimport io.prestosql.spi.function.ScalarOperator;\nimport io.prestosql.spi.function.SqlType;\nimport io.prestosql.spi.function.TypeParameter;\nimport io.prestosql.spi.type.StandardTypes;\nimport io.prestosql.spi.type.Type;\n\nimport java.lang.invoke.MethodHandle;\n\nimport static io.prestosql.spi.function.OperatorType.GREATER_THAN;\nimport static io.prestosql.spi.function.OperatorType.GREATER_THAN_OR_EQUAL;\nimport static io.prestosql.spi.type.ArrayType.ARRAY_NULL_ELEMENT_MSG;\nimport static io.prestosql.spi.type.TypeUtils.readNativeValue;\nimport static io.prestosql.type.TypeUtils.checkElementNotNull;\nimport static io.prestosql.util.Failures.internalError;\n\n@ScalarOperator(GREATER_THAN_OR_EQUAL)\npublic final class ArrayGreaterThanOrEqualOperator\n{\n    private ArrayGreaterThanOrEqualOperator() {}\n\n    @TypeParameter(\"T\")\n    @SqlType(StandardTypes.BOOLEAN)\n    public static boolean greaterThanOrEqual(\n            @OperatorDependency(operator = GREATER_THAN, argumentTypes = {\"T\", \"T\"}) MethodHandle greaterThanFunction,\n            @TypeParameter(\"T\") Type type,\n            @SqlType(\"array(T)\") Block leftArray,\n            @SqlType(\"array(T)\") Block rightArray)\n    {\n        int len = Math.min(leftArray.getPositionCount(), rightArray.getPositionCount());\n        int index = 0;\n        while (index < len) {\n            checkElementNotNull(leftArray.isNull(index), ARRAY_NULL_ELEMENT_MSG);\n            checkElementNotNull(rightArray.isNull(index), ARRAY_NULL_ELEMENT_MSG);\n            Object leftElement = readNativeValue(type, leftArray, index);\n            Object rightElement = readNativeValue(type, rightArray, index);\n            try {\n<｜fim▁hole｜>                    return false;\n                }\n            }\n            catch (Throwable t) {\n                throw internalError(t);\n            }\n            index++;\n        }\n\n        return leftArray.getPositionCount() >= rightArray.getPositionCount();\n    }\n}<｜fim▁end｜>",
    "response": "                if ((boolean) greaterThanFunction.invoke(leftElement, rightElement)) {\n                    return true;\n                }\n                if ((boolean) greaterThanFunction.invoke(rightElement, leftElement)) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.runelite.api;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\n\n@AllArgsConstructor\n@Getter\npublic enum VarClientInt\n{\n<｜fim▁hole｜>    /**\n     * 0 = no tooltip displayed\n     * 1 = tooltip displaying\n     */\n    TOOLTIP_VISIBLE(2),\n\n    /**\n     * Current message layer mode\n     * @see net.runelite.api.vars.InputType\n     */\n    INPUT_TYPE(5),\n\n    /**\n     * The game sets this to the same value as {@link #CAMERA_ZOOM_RESIZABLE_VIEWPORT}\n     */\n    CAMERA_ZOOM_FIXED_VIEWPORT(73),\n    CAMERA_ZOOM_RESIZABLE_VIEWPORT(74),\n\n    MEMBERSHIP_STATUS(103),\n\n    INVENTORY_TAB(171),\n\n    WORLD_MAP_SEARCH_FOCUSED(190);\n\n    private final int index;\n}<｜fim▁end｜>",
    "response": "    TOOLTIP_TIMEOUT(1),\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.undertow.server.handlers;\n\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.Set;\n\nimport io.undertow.server.HandlerWrapper;\nimport io.undertow.server.HttpHandler;\nimport io.undertow.server.HttpServerExchange;\nimport io.undertow.server.handlers.builder.HandlerBuilder;\nimport io.undertow.util.HeaderValues;\nimport io.undertow.util.Headers;\nimport io.undertow.util.Methods;\n\npublic class HttpTraceHandler implements HttpHandler {\n\n    private final HttpHandler handler;\n\n    public HttpTraceHandler(final HttpHandler handler) {\n        this.handler = handler;\n    }\n\n    @Override\n    public void handleRequest(final HttpServerExchange exchange) throws Exception {\n        if(exchange.getRequestMethod().equals(Methods.TRACE)) {\n            exchange.getResponseHeaders().put(Headers.CONTENT_TYPE, \"message/http\");\n            StringBuilder body = new StringBuilder(\"TRACE \");\n            body.append(exchange.getRequestURI());\n            if(!exchange.getQueryString().isEmpty()) {\n                body.append('?');\n                body.append(exchange.getQueryString());\n            }\n            body.append(' ');\n            body.append(exchange.getProtocol().toString());\n            body.append(\"\\r\\n\");\n            for(HeaderValues header : exchange.getRequestHeaders()) {\n                for(String value : header) {\n                    body.append(header.getHeaderName());\n                    body.append(\": \");\n                    body.append(value);\n                    body.append(\"\\r\\n\");\n                }\n            }\n            body.append(\"\\r\\n\");\n            exchange.getResponseSender().send(body.toString());\n<｜fim▁hole｜>\n    @Override\n    public String toString() {\n        return \"trace()\";\n    }\n\n    public static class Builder implements HandlerBuilder {\n\n        @Override\n        public String name() {\n            return \"trace\";\n        }\n\n        @Override\n        public Map<String, Class<?>> parameters() {\n            return Collections.emptyMap();\n        }\n\n        @Override\n        public Set<String> requiredParameters() {\n            return Collections.emptySet();\n        }\n\n        @Override\n        public String defaultParameter() {\n            return null;\n        }\n\n        @Override\n        public HandlerWrapper build(Map<String, Object> config) {\n            return new Wrapper();\n        }\n\n    }\n\n    private static class Wrapper implements HandlerWrapper {\n        @Override\n        public HttpHandler wrap(HttpHandler handler) {\n            return new HttpTraceHandler(handler);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        } else {\n            handler.handleRequest(exchange);\n        }\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.openmob.mobileimsdk.server.demo;\n\nimport net.openmob.mobileimsdk.server.event.ServerEventListener;\n\nimport org.apache.mina.core.session.IoSession;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ServerEventListenerImpl implements ServerEventListener\n{\n    private static Logger logger = LoggerFactory.getLogger(ServerEventListenerImpl.class);  \n\n    /**\n     * 用户身份验证回调方法定义.\n     * <p>\n     * 服务端的应用层可在本方法中实现用户登陆验证。\n     * <br>\n     * 注意：本回调在一种特殊情况下——即用户实际未退出登陆但再次发起来登陆包时，本回调是不会被调用的！\n     * <p>\n     * 根据MobileIMSDK的算法实现，本方法中用户验证通过（即方法返回值=0时）后\n     * ，将立即调用回调方法 {@link #onUserLoginAction_CallBack(int, String, IoSession)}。\n     * 否则会将验证结果（本方法返回值错误码通过客户端的 ChatBaseEvent.onLoginMessage(int dwUserId, int dwErrorCode)\n     * 方法进行回调）通知客户端）。\n     * \n     * @param userId 传递过来的准一id，保证唯一就可以通信，可能是登陆用户名、也可能是任意不重复的id等，具体意义由业务层决定\n     * @param token 用于身份鉴别和合法性检查的token，它可能是登陆密码，也可能是通过前置单点登陆接口拿到的token等，具体意义由业务层决定\n     * @param extra 额外信息字符串。本字段目前为保留字段，供上层应用自行放置需要的内容\n     * @param session 此客户端连接对应的MINA会话\n     * @return 0 表示登陆验证通过，否则可以返回用户自已定义的错误码，错误码值应为：>=1025的整数\n     */\n    @Override\n    public int onVerifyUserCallBack(String userId, String token, String extra, IoSession session)\n    {\n        logger.debug(\"【DEBUG_回调通知】正在调用回调方法：OnVerifyUserCallBack...(extra=\"+extra+\")\");\n        return 0;\n    }\n\n    /**\n     * 用户登录验证成功后的回调方法定义（可理解为上线通知回调）.\n     * <p>\n     * 服务端的应用层通常可在本方法中实现用户上线通知等。\n     * <br>\n<｜fim▁hole｜>     * @param session 成功登陆后建立的MINA会话\n     */\n    @Override\n    public void onUserLoginAction_CallBack(String userId, String extra, IoSession session)\n    {\n        logger.debug(\"【IM_回调通知OnUserLoginAction_CallBack】用户：\"+userId+\" 上线了！\");\n    }\n\n    /**\n     * 用户退出登录回调方法定义（可理解为下线通知回调）。\n     * <p>\n     * 服务端的应用层通常可在本方法中实现用户下线通知等。\n     * \n     * @param userId 下线的用户user_id\n     * @param obj\n     * @param session 此客户端连接对应的MINA会话\n     */\n    @Override\n    public void onUserLogoutAction_CallBack(String userId, Object obj, IoSession session)\n    {\n        logger.debug(\"【DEBUG_回调通知OnUserLogoutAction_CallBack】用户：\"+userId+\" 离线了！\");\n    }\n\n    /**\n     * 通用数据回调方法定义（客户端发给服务端的（即接收user_id=\"0\"））.\n     * <p>\n     * MobileIMSDK在收到客户端向user_id=0(即接收目标是服务器)的情况下通过\n     * 本方法的回调通知上层。上层通常可在本方法中实现如：添加好友请求等业务实现。\n     * \n     * @param userId 接收方的user_id（本方法接收的是发给服务端的消息，所以此参数的值肯定==0）\n     * @param from_user_id 发送方的user_id\n     * @param dataContent 数据内容（文本形式）\n     * @param session 此客户端连接对应的MINA会话\n     * @return true表示本方法已成功处理完成，否则表示未处理成功。此返回值目前框架中并没有特殊意义，仅作保留吧\n     */\n    @Override\n    public boolean onTransBuffer_CallBack(String userId, String from_user_id,\n            String dataContent, String fingerPrint, int typeu, IoSession session)\n    {\n        logger.debug(\"【DEBUG_回调通知】[typeu=\"+typeu+\"]收到了客户端\"+from_user_id+\"发给服务端的消息：str=\"+dataContent);\n        return true;\n    }\n\n    /**\n     * 通道数据回调函数定义（客户端发给客户端的（即接收方user_id不为“0”的情况））.\n     * <p>\n     * <b>注意：</b>本方法当且仅当在数据被服务端成功在线发送出去后被回调调用.\n     * <p>\n     * 上层通常可在本方法中实现用户聊天信息的收集，以便后期监控分析用户的行为等^_^。\n     * <p>\n     * 提示：如果开启消息QoS保证，因重传机制，本回调中的消息理论上有重复的可能，请以参数 #fingerPrint\n     * 作为消息的唯一标识ID进行去重处理。\n     * \n     * @param userId 接收方的user_id（本方法接收的是客户端发给客户端的，所以此参数的值肯定>0）\n     * @param from_user_id 发送方的user_id\n     * @param dataContent\n     */\n    @Override\n    public void onTransBuffer_C2C_CallBack(String userId, String from_user_id,\n            String dataContent, String fingerPrint, int typeu)\n    {\n        logger.debug(\"【DEBUG_回调通知】[typeu=\"+typeu+\"]收到了客户端\"+from_user_id+\"发给客户端\"+userId+\"的消息：str=\"+dataContent);\n    }\n\n    /**\n     * 通用数据实时发送失败后的回调函数定义（客户端发给客户端的（即接收方user_id不为“0”的情况））.\n     * <p>\n     * 注意：本方法当且仅当在数据被服务端<u>在线发送</u>失败后被回调调用.\n     * <p>\n     * <b>此方法存的意义何在？</b><br>\n     * 发生此种情况的场景可能是：对方确实不在线（那么此方法里就可以作为离线消息处理了）、\n     * 或者在发送时判断对方是在线的但服务端在发送时却没有成功（这种情况就可能是通信错误\n     * 或对方非正常通出但尚未到达会话超时时限）。<br><u>应用层在此方法里实现离线消息的处理即可！</u>\n     * \n     * @param userId 接收方的user_id（本方法接收的是客户端发给客户端的，所以此参数的值肯定>0），此id在本方法中不一定保证有意义\n     * @param from_user_id 发送方的user_id\n     * @param dataContent 消息内容\n     * @param fingerPrint 该消息对应的指纹（如果该消息有QoS保证机制的话），用于在QoS重要机制下服务端离线存储时防止重复存储哦\n     * @return true表示应用层已经处理了离线消息（如果该消息有QoS机制，则服务端将代为发送一条伪应答包\n     * （伪应答仅意味着不是接收方的实时应答，而只是存储到离线DB中，但在发送方看来也算是被对方收到，只是延\n     * 迟收到而已（离线消息嘛））），否则表示应用层没有处理（如果此消息有QoS机制，则发送方在QoS重传机制超时\n     * 后报出消息发送失败的提示）\n     * @see #onTransBuffer_C2C_CallBack(int, int, String)\n     */\n    @Override\n    public boolean onTransBuffer_C2C_RealTimeSendFaild_CallBack(String userId,\n            String from_user_id, String dataContent, String fingerPrint, int typeu)\n    {\n        logger.debug(\"【DEBUG_回调通知】[typeu=\"+typeu+\"]客户端\"+from_user_id+\"发给客户端\"+userId+\"的消息：str=\"+dataContent\n                +\"，因实时发送没有成功，需要上层应用作离线处理哦，否则此消息将被丢弃.\");\n        return false;\n    }\n}<｜fim▁end｜>",
    "response": "     * 注意：本回调在一种特殊情况下——即用户实际未退出登陆但再次发起来登陆包时，回调也是一定会被调用。\n     * \n     * @param userId 传递过来的准一id，保证唯一就可以通信，可能是登陆用户名、也可能是任意不重复的id等，具体意义由业务层决定\n     * @param extra 额外信息字符串。本字段目前为保留字段，供上层应用自行放置需要的内容。为了丰富应用层处理的手段，在本回调中也把此字段传进来了\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package module4.home2;\n\npublic class Fahrenheit {\n\n    protected double temperature;\n\n<｜fim▁hole｜>    }\n\n    public Fahrenheit(){\n\n    }\n\n    public void setTemperature(double temperature) {\n        this.temperature = temperature;\n    }\n\n    public double toCelsius(){\n        return (this.temperature - 32) / 1.8;\n    }\n\n    public double getTemperature() {\n        return this.temperature;\n    }\n}<｜fim▁end｜>",
    "response": "    public Fahrenheit(double temperature) {\n        this.temperature = temperature;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.smates.dbc2.vo;\n\npublic class Page {\n\n    private int startNum;\n    private int rows;\n\n    public Page(int page, int rows) {\n        this.startNum = (page - 1) * rows;\n        this.rows = rows;\n    }\n\n    public int getStartNum() {\n        return startNum;\n    }\n\n    public void setStartNum(int startNum) {\n        this.startNum = startNum;\n    }\n\n    public int getRows() {\n        return rows;\n    }\n\n    public void setRows(int rows) {\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "        this.rows = rows;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.tasktop.c2c.server.jenkins.configuration.service;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.Enumeration;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\nimport java.util.jar.JarOutputStream;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.io.IOUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Required;\n\nimport com.tasktop.c2c.server.configuration.service.ProjectServiceConfiguration;\nimport com.tasktop.c2c.server.configuration.service.ProjectServiceManagementServiceBean.Configurator;\n\npublic class JenkinsServiceConfigurator implements Configurator {\n\n    private static final Logger LOG = LoggerFactory.getLogger(JenkinsServiceConfigurator.class.getName());\n\n    private String webXmlFilename = \"WEB-INF/web.xml\";\n    private String tempDir = FileUtils.getTempDirectoryPath();\n    private String warTemplateFile;\n    private String targetJenkinsHomeBaseDir;\n    private String targetWebappsDir;\n    private String jenkinsPath;\n    private boolean perOrg = false;\n\n    @Override\n    public void configure(ProjectServiceConfiguration configuration) {\n\n        // Get a reference to our template WAR, and make sure it exists.\n        File jenkinsTemplateWar = new File(warTemplateFile);\n\n        if (!jenkinsTemplateWar.exists() || !jenkinsTemplateWar.isFile()) {\n            String message = \"The given Jenkins template WAR [\" + jenkinsTemplateWar\n                    + \"] either did not exist or was not a file!\";\n            LOG.error(message);\n            throw new IllegalStateException(message);\n        }\n\n        String pathProperty = perOrg ? configuration.getOrganizationIdentifier() : configuration.getProjectIdentifier();\n\n        String deployedUrl = configuration.getProperties().get(ProjectServiceConfiguration.PROFILE_BASE_URL)\n                + jenkinsPath + pathProperty + \"/jenkins/\";\n        deployedUrl.replace(\"//\", \"/\");\n        URL deployedJenkinsUrl;\n        try {\n            deployedJenkinsUrl = new URL(deployedUrl);\n        } catch (MalformedURLException e) {\n            throw new RuntimeException(e);\n        }\n        String webappName = deployedJenkinsUrl.getPath();\n        if (webappName.startsWith(\"/\")) {\n            webappName = webappName.substring(1);\n        }\n        if (webappName.endsWith(\"/\")) {\n            webappName = webappName.substring(0, webappName.length() - 1);\n        }\n        webappName = webappName.replace(\"/\", \"#\");\n        webappName = webappName + \".war\";\n\n        // Calculate our final filename.\n\n        String deployLocation = targetWebappsDir + webappName;\n\n        File jenkinsDeployFile = new File(deployLocation);\n\n        if (jenkinsDeployFile.exists()) {\n            String message = \"When trying to deploy new WARfile [\" + jenkinsDeployFile.getAbsolutePath()\n                    + \"] a file or directory with that name already existed! Continuing with provisioning.\";\n            LOG.info(message);\n            return;\n        }\n\n        try {\n            // Get a reference to our template war\n            JarFile jenkinsTemplateWarJar = new JarFile(jenkinsTemplateWar);\n\n            // Extract our web.xml from this war\n            JarEntry webXmlEntry = jenkinsTemplateWarJar.getJarEntry(webXmlFilename);\n            String webXmlContents = IOUtils.toString(jenkinsTemplateWarJar.getInputStream(webXmlEntry));\n\n            // Update the web.xml to contain the correct JENKINS_HOME value\n            String updatedXml = applyDirectoryToWebXml(webXmlContents, configuration);\n\n            File tempDirFile = new File(tempDir);\n            if (!tempDirFile.exists()) {\n                tempDirFile.mkdirs();\n            }\n\n            // Put the web.xml back into the war\n            File updatedJenkinsWar = File.createTempFile(\"jenkins\", \".war\", tempDirFile);\n\n            JarOutputStream jarOutStream = new JarOutputStream(new FileOutputStream(updatedJenkinsWar),\n                    jenkinsTemplateWarJar.getManifest());\n\n            // Loop through our existing zipfile and add in all of the entries to it except for our web.xml\n            JarEntry curEntry = null;\n            Enumeration<JarEntry> entries = jenkinsTemplateWarJar.entries();\n            while (entries.hasMoreElements()) {\n                curEntry = entries.nextElement();\n\n                // If this is the manifest, skip it.\n<｜fim▁hole｜>\n                if (curEntry.getName().equals(webXmlEntry.getName())) {\n                    JarEntry newEntry = new JarEntry(curEntry.getName());\n                    jarOutStream.putNextEntry(newEntry);\n\n                    // Substitute our edited entry content.\n                    IOUtils.write(updatedXml, jarOutStream);\n                } else {\n                    jarOutStream.putNextEntry(curEntry);\n                    IOUtils.copy(jenkinsTemplateWarJar.getInputStream(curEntry), jarOutStream);\n                }\n            }\n\n            // Clean up our resources.\n            jarOutStream.close();\n\n            // Move the war into its deployment location so that it can be picked up and deployed by the app server.\n            FileUtils.moveFile(updatedJenkinsWar, jenkinsDeployFile);\n        } catch (IOException ioe) {\n            // Log this exception and rethrow wrapped in a RuntimeException\n            LOG.error(ioe.getMessage());\n            throw new RuntimeException(ioe);\n        }\n    }\n\n    private String applyDirectoryToWebXml(String targetContents, ProjectServiceConfiguration configuration) {\n\n        // Do our string processing now.\n        String jenkinsHomeDir = targetJenkinsHomeBaseDir + \"/\"\n                + (perOrg ? configuration.getOrganizationIdentifier() : configuration.getProjectIdentifier());\n\n        return targetContents.replace(\"<env-entry-value></env-entry-value>\", \"<env-entry-value>\" + jenkinsHomeDir\n                + \"</env-entry-value>\");\n    }\n\n    public void setWebXmlFilename(String webXmlFilename) {\n        this.webXmlFilename = webXmlFilename;\n    }\n\n    public void setTempDir(String tempDir) {\n        this.tempDir = tempDir;\n    }\n\n    @Required\n    public void setTargetJenkinsHomeBaseDir(String targetJenkinsHomeBaseDir) {\n        this.targetJenkinsHomeBaseDir = targetJenkinsHomeBaseDir;\n    }\n\n    @Required\n    public void setWarTemplateFile(String warTemplateFile) {\n        this.warTemplateFile = warTemplateFile;\n    }\n\n    @Required\n    public void setTargetWebappsDir(String targetWebappsDir) {\n        this.targetWebappsDir = targetWebappsDir;\n    }\n\n    @Required\n    public void setJenkinsPath(String jenkinsPath) {\n        this.jenkinsPath = jenkinsPath;\n    }\n\n    public void setPerOrg(boolean perOrg) {\n        this.perOrg = perOrg;\n    }\n}<｜fim▁end｜>",
    "response": "                if (curEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                    continue;\n                }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.camel.itest.karaf;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.ops4j.pax.exam.junit.PaxExam;\n\n<｜fim▁hole｜>public class CamelMqttTest extends BaseKarafTest {\n\n    public static final String COMPONENT = extractName(CamelMqttTest.class);\n\n    @Test\n    public void test() throws Exception {\n        testComponent(COMPONENT);\n    }\n\n}<｜fim▁end｜>",
    "response": "@RunWith(PaxExam.class)\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.molgenis.script;\n\nimport com.google.common.collect.ImmutableList;\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\nimport org.molgenis.data.jobs.Job;\nimport org.molgenis.data.jobs.JobFactory;\nimport org.molgenis.data.jobs.model.ScheduledJobType;\nimport org.molgenis.data.jobs.model.ScheduledJobTypeFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Lazy;\n\nimport java.lang.reflect.Type;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static com.google.common.collect.ImmutableMap.of;\nimport static java.lang.String.format;\nimport static java.util.Objects.requireNonNull;\n\n@SuppressWarnings(\"SpringJavaAutowiringInspection\")\n@Configuration\npublic class ScheduledScriptConfig\n{\n<｜fim▁hole｜>    private final ScheduledJobTypeFactory scheduledJobTypeFactory;\n    private final ScriptJobExecutionMetadata scriptJobExecutionMetadata;\n    private final Gson gson;\n\n    @Autowired\n    public ScheduledScriptConfig(SavedScriptRunner savedScriptRunner, ScheduledJobTypeFactory scheduledJobTypeFactory,\n            ScriptJobExecutionMetadata scriptJobExecutionMetadata, Gson gson)\n    {\n        this.savedScriptRunner = requireNonNull(savedScriptRunner);\n        this.scheduledJobTypeFactory = requireNonNull(scheduledJobTypeFactory);\n        this.scriptJobExecutionMetadata = requireNonNull(scriptJobExecutionMetadata);\n        this.gson = gson;\n    }\n\n    /**\n     * The Script JobFactory bean.\n     */\n    @Bean\n    public JobFactory<ScriptJobExecution> scriptJobFactory()\n    {\n        return new JobFactory<ScriptJobExecution>()\n        {\n\n            @Override\n            public Job<ScriptResult> createJob(ScriptJobExecution scriptJobExecution)\n            {\n                final String name = scriptJobExecution.getName();\n                final String parameterString = scriptJobExecution.getParameters();\n                return progress ->\n                {\n                    Map<String, Object> params = new HashMap<>();\n                    params.putAll(gson.fromJson(parameterString, MAP_TOKEN));\n                    params.put(\"scriptJobExecutionId\", scriptJobExecution.getIdValue());\n                    ScriptResult scriptResult = savedScriptRunner.runScript(name, params);\n                    if (scriptResult.getOutputFile() != null)\n                    {\n                        scriptJobExecution.setResultUrl(format(\"/files/%s\", scriptResult.getOutputFile().getId()));\n                    }\n                    progress.status(format(\"Script output:%n%s\", scriptResult.getOutput()));\n                    return scriptResult;\n                };\n            }\n        };\n    }\n\n    @Lazy\n    @Bean\n    public ScheduledJobType scriptJobType()\n    {\n        ScheduledJobType result = scheduledJobTypeFactory.create(\"script\");\n        result.setLabel(\"Script\");\n        result.setDescription(\"This job executes a script created in the Scripts plugin.\");\n        result.setSchema(gson.toJson(of(\"title\", \"Script Job\", \"type\", \"object\", \"properties\",\n                of(\"name\", of(\"type\", \"string\"), \"parameters\", of(\"type\", \"string\")), \"required\",\n                ImmutableList.of(\"name\", \"parameters\"))));\n        result.setJobExecutionType(scriptJobExecutionMetadata);\n        return result;\n    }\n}<｜fim▁end｜>",
    "response": "    private static final Type MAP_TOKEN = new TypeToken<Map<String, Object>>()\n    {\n    }.getType();\n\n    private final SavedScriptRunner savedScriptRunner;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.flex.forks.batik.dom.svg;\n\nimport org.apache.flex.forks.batik.dom.AbstractDocument;\nimport org.apache.flex.forks.batik.util.DoublyIndexedTable;\nimport org.apache.flex.forks.batik.util.SVGTypes;\n\nimport org.w3c.dom.Node;\nimport org.w3c.dom.svg.SVGAnimatedNumber;\nimport org.w3c.dom.svg.SVGFEPointLightElement;\n\npublic class SVGOMFEPointLightElement\n    extends    SVGOMElement\n    implements SVGFEPointLightElement {\n\n    /**\n     * Table mapping XML attribute names to TraitInformation objects.\n     */\n    protected static DoublyIndexedTable xmlTraitInformation;\n    static {\n        DoublyIndexedTable t =\n            new DoublyIndexedTable(SVGOMElement.xmlTraitInformation);\n        t.put(null, SVG_X_ATTRIBUTE,\n                new TraitInformation(true, SVGTypes.TYPE_NUMBER));\n        t.put(null, SVG_Y_ATTRIBUTE,\n                new TraitInformation(true, SVGTypes.TYPE_NUMBER));\n        t.put(null, SVG_Z_ATTRIBUTE,\n                new TraitInformation(true, SVGTypes.TYPE_NUMBER));\n        xmlTraitInformation = t;\n    }\n\n    /**\n     * The 'x' attribute value.\n     */\n    protected SVGOMAnimatedNumber x;\n\n    /**\n     * The 'y' attribute value.\n     */\n    protected SVGOMAnimatedNumber y;\n\n    /**\n     * The 'z' attribute value.\n     */\n    protected SVGOMAnimatedNumber z;\n\n    /**\n     * Creates a new SVGOMFEPointLightElement object.\n     */\n    protected SVGOMFEPointLightElement() {\n    }\n\n    /**\n     * Creates a new SVGOMFEPointLightElement object.\n     * @param prefix The namespace prefix.\n     * @param owner The owner document.\n     */\n    public SVGOMFEPointLightElement(String prefix,\n                                    AbstractDocument owner) {\n        super(prefix, owner);\n        initializeLiveAttributes();\n    }\n\n    /**\n     * Initializes all live attributes for this element.\n     */\n    protected void initializeAllLiveAttributes() {\n        super.initializeAllLiveAttributes();\n        initializeLiveAttributes();\n    }\n<｜fim▁hole｜>        y = createLiveAnimatedNumber(null, SVG_Y_ATTRIBUTE, 0f);\n        z = createLiveAnimatedNumber(null, SVG_Z_ATTRIBUTE, 0f);\n    }\n\n    /**\n     * <b>DOM</b>: Implements {@link Node#getLocalName()}.\n     */\n    public String getLocalName() {\n        return SVG_FE_POINT_LIGHT_TAG;\n    }\n\n    /**\n     * <b>DOM</b>: Implements {@link SVGFEPointLightElement#getX()}.\n     */\n    public SVGAnimatedNumber getX() {\n        return x;\n    }\n\n    /**\n     * <b>DOM</b>: Implements {@link SVGFEPointLightElement#getY()}.\n     */\n    public SVGAnimatedNumber getY() {\n        return y;\n    }\n\n    /**\n     * <b>DOM</b>: Implements {@link SVGFEPointLightElement#getZ()}.\n     */\n    public SVGAnimatedNumber getZ() {\n        return z;\n    }\n\n    /**\n     * Returns a new uninitialized instance of this object's class.\n     */\n    protected Node newNode() {\n        return new SVGOMFEPointLightElement();\n    }\n\n    /**\n     * Returns the table of TraitInformation objects for this element.\n     */\n    protected DoublyIndexedTable getTraitInformationTable() {\n        return xmlTraitInformation;\n    }\n}<｜fim▁end｜>",
    "response": "\n    /**\n     * Initializes the live attribute values of this element.\n     */\n    private void initializeLiveAttributes() {\n        x = createLiveAnimatedNumber(null, SVG_X_ATTRIBUTE, 0f);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.qagwaai.starmalaccamax.client.core.mvp.handlers;\n\nimport com.google.gwt.user.client.Window;\nimport com.qagwaai.starmalaccamax.client.core.LoginWatcher;\nimport com.qagwaai.starmalaccamax.client.event.CurrentUserChangedEvent;\nimport com.qagwaai.starmalaccamax.client.event.EventBus;\nimport com.smartgwt.client.widgets.events.ClickEvent;\nimport com.smartgwt.client.widgets.events.ClickHandler;\n\npublic final class LogoutLinkClickHandlerImpl implements ClickHandler {\n\n    /**\n     * \n     */\n    private EventBus eventBus;\n\n    /**\n     * \n     * @param eventBus\n<｜fim▁hole｜>        this.eventBus = eventBus;\n    }\n\n    /**\n     * \n     * {@inheritDoc}\n     */\n    @Override\n    public void onClick(final ClickEvent event) {\n\n        if (LoginWatcher.getInstance().getLastEvent() != null) {\n            if (LoginWatcher.getInstance().getLastEvent().getCurrentUser() != null) {\n                Window.Location.assign(LoginWatcher.getInstance().getLastEvent().getLogoutUrl());\n                return;\n            } else {\n                CurrentUserChangedEvent.fire(eventBus, null, LoginWatcher.getInstance().getLastEvent().getLoginUrl(),\n                    \"\");\n                Window.Location.assign(LoginWatcher.getInstance().getLastEvent().getLoginUrl());\n                return;\n            }\n        }\n    }\n}<｜fim▁end｜>",
    "response": "     *            the bus to publish events on\n     */\n    public LogoutLinkClickHandlerImpl(final EventBus eventBus) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.hisp.dhis.webapi.controller.validation;\n\nimport org.hisp.dhis.schema.descriptors.ValidationRuleGroupSchemaDescriptor;\nimport org.hisp.dhis.validation.ValidationRuleGroup;\nimport org.hisp.dhis.webapi.controller.AbstractCrudController;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\n@RequestMapping( value = ValidationRuleGroupSchemaDescriptor.API_ENDPOINT )\n<｜fim▁hole｜>    extends AbstractCrudController<ValidationRuleGroup>\n{\n}<｜fim▁end｜>",
    "response": "public class ValidationRuleGroupController\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package au.com.breakpoint.hedron.core.concurrent.mock;\n\nimport au.com.breakpoint.hedron.core.concurrent.IProcessor;\nimport au.com.breakpoint.hedron.core.context.AssertException;\nimport au.com.breakpoint.hedron.core.context.OpResult;\nimport au.com.breakpoint.hedron.core.context.ThreadContext;\nimport au.com.breakpoint.hedron.core.log.Logging;\n\npublic class ProcessorMock implements IProcessor\n{\n    public ProcessorMock (final String suffix, final boolean createException, final long msec)\n<｜fim▁hole｜>    }\n\n    @Override\n    public void awaitShutdownComplete ()\n    {\n    }\n\n    @Override\n    public void processUntilShutdown ()\n    {\n        final long startMsec = System.currentTimeMillis ();\n\n        for (; !m_shutdownRequested;)\n        {\n            //System.out.printf (\"ProcessorMock%s [%s]%n\", m_suffix, i);\n\n            if (m_createException && (System.currentTimeMillis () - startMsec) > m_msecUntilException)\n            {\n                Logging.logInfo (\"ProcessorMock%s simulating exception after %smsec\", m_suffix, m_msecUntilException);\n                throw new AssertException (OpResult.Severity.Error, null, false);\n            }\n\n            sleep (m_msecUntilException);\n        }\n\n        Logging.logInfo (\"ProcessorMock%s finished\", m_suffix);\n    }\n\n    @Override\n    public void signalShutdown ()\n    {\n        m_shutdownRequested = true;\n    }\n\n    private void sleep (final long msec)\n    {\n        try\n        {\n            Thread.sleep (msec);\n        }\n        catch (final InterruptedException e)\n        {\n            // Propagate exception as unchecked fault up to the fault barrier.\n            ThreadContext.throwFault (e);\n        }\n    }\n\n    private final boolean m_createException;\n\n    private final long m_msecUntilException;\n\n    private volatile boolean m_shutdownRequested;\n\n    private final String m_suffix;\n}<｜fim▁end｜>",
    "response": "    {\n        m_createException = createException;\n        m_suffix = suffix;\n        m_msecUntilException = msec;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.example.tests;\n\nimport org.testng.annotations.Test;\n\npublic class GroupCreationTests extends TestBase  {\n  @Test\n  public void testNonEmptyGroupCreation() throws Exception {\n<｜fim▁hole｜>    GroupData group = new GroupData();\n    group.name=\"group name 1\";\n    group.header = \"header 1\";\n    group.footer = \"footer 1\";\n    fillGroupForm(group);\n    submitGroupCreation();\n    returnGroupsPage();\n  }\n\n  @Test\n  public void testEmptyGroupCreation() throws Exception {\n    openMainPage();\n    gotoGroupsPage();\n    initGroupCreation();\n    fillGroupForm(new GroupData(\"\", \"\", \"\"));\n    submitGroupCreation();\n    returnGroupsPage();\n  }\n}<｜fim▁end｜>",
    "response": "    openMainPage();\n    gotoGroupsPage();\n    initGroupCreation();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.badlogic.gdx.tools.flame;\n\nimport java.awt.GridBagConstraints;\nimport java.awt.Insets;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.JCheckBox;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\n\npublic class DrawPanel extends EditorPanel \n{\n    JCheckBox   drawXYZCheckBox,\n                drawXZPlaneBox, drawXYPlaneBox;\n\n    public DrawPanel (FlameMain editor, String name, String description) {\n        super(editor, name, description);\n        setValue(null);\n    }\n\n    @Override\n    protected void initializeComponents () {\n        super.initializeComponents();\n        JPanel contentPanel = getContentPanel();\n\n        //XYZ\n        contentPanel.add(new JLabel(\"XYZ:\"), new GridBagConstraints(0, 1, 1, 1, 0, 0, GridBagConstraints.EAST, GridBagConstraints.NONE,\n                new Insets(6, 0, 0, 0), 0, 0));\n        drawXYZCheckBox = new JCheckBox();\n        contentPanel.add(drawXYZCheckBox, new GridBagConstraints(1, 1, 1, 1, 0, 0, GridBagConstraints.WEST,\n                GridBagConstraints.NONE, new Insets(6, 6, 0, 0), 0, 0));\n\n        //XZ Plane\n        contentPanel.add(new JLabel(\"XZ Plane:\"), new GridBagConstraints(0, 2, 1, 1, 0, 0, GridBagConstraints.EAST, GridBagConstraints.NONE,\n                new Insets(6, 0, 0, 0), 0, 0));\n        drawXZPlaneBox = new JCheckBox();\n        contentPanel.add(drawXZPlaneBox, new GridBagConstraints(1, 2, 1, 1, 1, 0, GridBagConstraints.WEST,\n                GridBagConstraints.NONE, new Insets(6, 6, 0, 0), 0, 0));\n\n        //XY Plane\n        contentPanel.add(new JLabel(\"XY Plane:\"), new GridBagConstraints(0, 3, 1, 1, 0, 0, GridBagConstraints.EAST, GridBagConstraints.NONE,\n                new Insets(6, 0, 0, 0), 0, 0));\n        drawXYPlaneBox = new JCheckBox();\n        contentPanel.add(drawXYPlaneBox, new GridBagConstraints(1, 3, 1, 1, 1, 0, GridBagConstraints.WEST,\n<｜fim▁hole｜>                DrawPanel.this.editor.getRenderer().setDrawXYZ(drawXYZCheckBox.isSelected());\n            }\n        });\n        drawXYZCheckBox.setSelected(editor.getRenderer().IsDrawXYZ());\n\n        drawXZPlaneBox.addActionListener(new ActionListener() {\n            public void actionPerformed (ActionEvent event) {\n                DrawPanel.this.editor.getRenderer().setDrawXZPlane(drawXZPlaneBox.isSelected());\n            }\n        });\n        drawXZPlaneBox.setSelected(editor.getRenderer().IsDrawXZPlane());\n\n        drawXYPlaneBox.addActionListener(new ActionListener() {\n            public void actionPerformed (ActionEvent event) {\n                DrawPanel.this.editor.getRenderer().setDrawXYPlane(drawXYPlaneBox.isSelected());\n            }\n        });\n    }\n}<｜fim▁end｜>",
    "response": "                GridBagConstraints.NONE, new Insets(6, 6, 0, 0), 0, 0));\n\n        //Listeners\n        drawXYZCheckBox.addActionListener(new ActionListener() {\n            public void actionPerformed (ActionEvent event) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.wso2.siddhi.core.query.processor.handler.pattern;\n\nimport org.apache.log4j.Logger;\nimport org.wso2.siddhi.core.config.SiddhiContext;\nimport org.wso2.siddhi.core.event.StreamEvent;\nimport org.wso2.siddhi.core.snapshot.ThreadBarrier;\nimport org.wso2.siddhi.core.query.QueryPostProcessingElement;\nimport org.wso2.siddhi.core.util.collection.queue.scheduler.SchedulerElement;\nimport org.wso2.siddhi.core.query.processor.handler.HandlerProcessor;\nimport org.wso2.siddhi.core.query.MarkedElement;\nimport org.wso2.siddhi.core.util.LogHelper;\nimport org.wso2.siddhi.core.util.collection.queue.scheduler.SchedulerSiddhiQueue;\n\nimport java.util.List;\nimport java.util.concurrent.ThreadPoolExecutor;\n\npublic class PatternHandlerProcessor\n        implements HandlerProcessor, Runnable, MarkedElement,\n                   SchedulerElement {\n\n    static final Logger log = Logger.getLogger(PatternHandlerProcessor.class);\n\n    //  private List<BasicStream> inputStreamList;\n    private String streamId;\n    private ThreadPoolExecutor threadPoolExecutor;\n    private SchedulerSiddhiQueue<StreamEvent> inputQueue;\n    private List<PatternInnerHandlerProcessor> patternInnerHandlerProcessorList;\n    private int patternInnerHandlerProcessorListSize;\n    private SiddhiContext siddhiContext;\n    private final ThreadBarrier threadBarrier;\n    private String elementId;\n    private QueryPostProcessingElement next;\n\n    public PatternHandlerProcessor(String streamId,\n                                   List<PatternInnerHandlerProcessor> patternInnerHandlerProcessorList,\n                                   SiddhiContext siddhiContext) {\n        this.streamId = streamId;\n        this.patternInnerHandlerProcessorList = patternInnerHandlerProcessorList;\n        this.threadPoolExecutor = siddhiContext.getThreadPoolExecutor();\n        this.patternInnerHandlerProcessorListSize = patternInnerHandlerProcessorList.size();\n        this.siddhiContext = siddhiContext;\n        this.threadBarrier = siddhiContext.getThreadBarrier();\n\n        this.inputQueue = new SchedulerSiddhiQueue<StreamEvent>(this);\n\n    }\n\n    @Override\n    public void run() {\n        try {\n            int eventCounter = 0;\n            while (true) {\n                threadBarrier.pass();\n                StreamEvent streamEvent = inputQueue.poll();\n                if (streamEvent == null) {\n                    break;\n                } else if (siddhiContext.getEventBatchSize() > 0 && eventCounter > siddhiContext.getEventBatchSize()) {\n                    threadPoolExecutor.execute(this);\n                    break;\n<｜fim▁hole｜>                process(streamEvent);\n            }\n        } catch (Throwable t) {\n            log.error(t.getMessage(), t);\n        }\n    }\n\n    private void process(StreamEvent streamEvent) {\n        try {\n            //in reverse order to execute the later states first to overcome to dependencies of count states\n            for (int i = patternInnerHandlerProcessorListSize - 1; i >= 0; i--) {\n                patternInnerHandlerProcessorList.get(i).moveNextEventsToCurrentEvents();\n            }\n            for (int i = patternInnerHandlerProcessorListSize - 1; i >= 0; i--) {\n                patternInnerHandlerProcessorList.get(i).process(streamEvent);\n            }\n        } catch (Throwable e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void receive(StreamEvent streamEvent) {\n        LogHelper.logMethod(log, streamEvent);\n        if (siddhiContext.isAsyncProcessing() || siddhiContext.isDistributedProcessingEnabled()) {\n            if (log.isDebugEnabled()) {\n                LogHelper.debugLogMessage(log, streamEvent, \" added to inputQueue\");\n            }\n            inputQueue.put(streamEvent);\n        } else {\n            if (log.isDebugEnabled()) {\n                LogHelper.debugLogMessage(log, streamEvent, \" sent to process\");\n            }\n            process(streamEvent);\n        }\n\n    }\n\n    public String getStreamId() {\n        return streamId;\n    }\n\n    @Override\n    public void schedule() {\n        threadPoolExecutor.execute(this);\n    }\n\n    @Override\n    public void scheduleNow() {\n        threadPoolExecutor.execute(this);\n    }\n\n    @Override\n    public String getElementId() {\n        return elementId;\n    }\n\n    @Override\n    public void setElementId(String elementId) {\n        this.elementId = elementId;\n    }\n\n    public List<PatternInnerHandlerProcessor> getPatternInnerHandlerProcessorList() {\n        return patternInnerHandlerProcessorList;\n    }\n}<｜fim▁end｜>",
    "response": "                }\n                eventCounter++;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.navercorp.pinpoint.web.vo.stat.chart;\n\nimport com.navercorp.pinpoint.common.server.bo.stat.ResponseTimeBo;\nimport com.navercorp.pinpoint.web.mapper.stat.sampling.sampler.ResponseTimeSampler;\nimport com.navercorp.pinpoint.web.util.TimeWindow;\nimport com.navercorp.pinpoint.web.vo.Range;\nimport com.navercorp.pinpoint.web.vo.chart.Chart;\nimport com.navercorp.pinpoint.web.vo.chart.Point;\nimport com.navercorp.pinpoint.web.vo.stat.SampledResponseTime;\nimport org.apache.commons.lang3.RandomUtils;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class ResponseTimeChartGroupTest {\n\n    private static final int MIN_VALUE_OF_MAX_CONNECTION_SIZE = 20;\n    private static final int RANDOM_LIST_MAX_SIZE = 10;\n    private static final int RANDOM_AVG_MAX_SIZE = 300000;\n\n    private final ResponseTimeSampler sampler = new ResponseTimeSampler();\n\n    @Test\n    public void basicFunctionTest1() throws Exception {\n        long currentTimeMillis = System.currentTimeMillis();\n        TimeWindow timeWindow = new TimeWindow(new Range(currentTimeMillis - 300000, currentTimeMillis));\n\n        List<SampledResponseTime> sampledResponseTimeList = createSampledResponseTimeList(timeWindow);\n\n        ResponseTimeChartGroup responseTimeChartGroup = new ResponseTimeChartGroup(timeWindow, sampledResponseTimeList);\n\n        assertEquals(sampledResponseTimeList, responseTimeChartGroup);\n    }\n\n    private List<SampledResponseTime> createSampledResponseTimeList(TimeWindow timeWindow) {\n        List<SampledResponseTime> sampledResponseTimeList = new ArrayList<>();\n\n        int maxConnectionSize = ThreadLocalRandom.current().nextInt(MIN_VALUE_OF_MAX_CONNECTION_SIZE) + MIN_VALUE_OF_MAX_CONNECTION_SIZE;\n\n        long from = timeWindow.getWindowRange().getFrom();\n        long to = timeWindow.getWindowRange().getTo();\n\n        for (long i = from; i < to; i += timeWindow.getWindowSlotSize()) {\n            sampledResponseTimeList.add(createSampledResponseTime(i, maxConnectionSize));\n        }\n\n        return sampledResponseTimeList;\n    }\n\n    private SampledResponseTime createSampledResponseTime(long timestamp, int maxConnectionSize) {\n        int listSize = RandomUtils.nextInt(1, RANDOM_LIST_MAX_SIZE);\n\n        List<ResponseTimeBo> responseTimeBoList = new ArrayList<>(listSize);\n        for (int i = 0; i < listSize; i++) {\n            ResponseTimeBo responseTimeBo = new ResponseTimeBo();\n            responseTimeBo.setAvg(ThreadLocalRandom.current().nextLong(RANDOM_AVG_MAX_SIZE));\n            responseTimeBoList.add(responseTimeBo);\n        }\n\n        return sampler.sampleDataPoints(0, timestamp, responseTimeBoList, null);\n    }\n\n    private void assertEquals(List<SampledResponseTime> sampledResponseTimeList, ResponseTimeChartGroup responseTimeChartGroup) {\n        Map<AgentStatChartGroup.ChartType, Chart> charts = responseTimeChartGroup.getCharts();\n\n        Chart avgChart = charts.get(ResponseTimeChartGroup.ResponseTimeChartType.AVG);\n        List<Point> avgChartPointList = avgChart.getPoints();\n\n        for (int i = 0; i < sampledResponseTimeList.size(); i++) {\n            SampledResponseTime sampledResponseTime = sampledResponseTimeList.get(i);\n            Point<Long, Long> point = sampledResponseTime.getAvg();\n<｜fim▁hole｜>    }\n\n}<｜fim▁end｜>",
    "response": "\n            Assert.assertEquals(avgChartPointList.get(i), point);\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package me.ederign.template;\n\npublic class OnlineBanking extends Banking {\n\n    @Override\n    protected void preProcessing( Operation op ) {\n        //pre processing online logic\n    }\n<｜fim▁hole｜>    protected void postProcessing( Operation op ) {\n        //post processing online logic\n    }\n}<｜fim▁end｜>",
    "response": "\n    @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.litepal;\n\nimport android.content.Context;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.os.Handler;\nimport android.os.Looper;\nimport android.text.TextUtils;\n\nimport org.litepal.parser.LitePalAttr;\nimport org.litepal.parser.LitePalConfig;\nimport org.litepal.parser.LitePalParser;\nimport org.litepal.tablemanager.Connector;\nimport org.litepal.util.BaseUtility;\nimport org.litepal.util.Const;\nimport org.litepal.util.SharedUtil;\n\nimport java.io.File;\n\npublic class LitePal {\n\n    private static Handler handler = new Handler(Looper.getMainLooper());\n\n    /**\n     * Initialize to make LitePal ready to work. If you didn't configure LitePalApplication\n     * in the AndroidManifest.xml, make sure you call this method as soon as possible. In\n     * Application's onCreate() method will be fine.\n     *\n     * @param context\n     *      Application context.\n     */\n    public static void initialize(Context context) {\n        LitePalApplication.sContext = context;\n    }\n\n    /**\n     * Get a writable SQLiteDatabase.\n     *\n     * @return A writable SQLiteDatabase instance\n     */\n    public static SQLiteDatabase getDatabase() {\n        return Connector.getDatabase();\n    }\n\n    /**\n     * Get the main thread handler. You don't need this method. It's used by framework only.\n     * @return Main thread handler.\n     */\n    public static Handler getHandler() {\n        return handler;\n    }\n\n    /**\n     * Switch the using database to the one specified by parameter.\n     * @param litePalDB\n     *          The database to switch to.\n     */\n    public static void use(LitePalDB litePalDB) {\n        LitePalAttr litePalAttr = LitePalAttr.getInstance();\n        litePalAttr.setDbName(litePalDB.getDbName());\n        litePalAttr.setVersion(litePalDB.getVersion());\n        litePalAttr.setStorage(litePalDB.isExternalStorage() ? \"external\" : \"internal\");\n        litePalAttr.setClassNames(litePalDB.getClassNames());\n        // set the extra key name only when use database other than default or litepal.xml not exists\n        if (!isDefaultDatabase(litePalDB.getDbName())) {\n            litePalAttr.setExtraKeyName(litePalDB.getDbName());\n            litePalAttr.setCases(\"lower\");\n        }\n        Connector.clearLitePalOpenHelperInstance();\n    }\n\n    /**\n     * Switch the using database to default with configuration by litepal.xml.\n     */\n    public static void useDefault() {\n        LitePalAttr.clearInstance();\n        Connector.clearLitePalOpenHelperInstance();\n    }\n\n    /**\n     * Delete the specified database.\n     * @param dbName\n     *          Name of database to delete.\n     * @return True if delete success, false otherwise.\n     */\n    public static boolean deleteDatabase(String dbName) {\n        if (!TextUtils.isEmpty(dbName)) {\n            if (!dbName.endsWith(Const.Config.DB_NAME_SUFFIX)) {\n                dbName = dbName + Const.Config.DB_NAME_SUFFIX;\n            }\n            File dbFile = LitePalApplication.getContext().getDatabasePath(dbName);\n            if (dbFile.exists()) {\n                boolean result = dbFile.delete();\n                if (result) {\n<｜fim▁hole｜>                    Connector.clearLitePalOpenHelperInstance();\n                }\n                return result;\n            }\n            String path = LitePalApplication.getContext().getExternalFilesDir(\"\") + \"/databases/\";\n            dbFile = new File(path + dbName);\n            boolean result = dbFile.delete();\n            if (result) {\n                removeVersionInSharedPreferences(dbName);\n                Connector.clearLitePalOpenHelperInstance();\n            }\n            return result;\n        }\n        return false;\n    }\n\n    /**\n     * Remove the database version in SharedPreferences file.\n     * @param dbName\n     */\n    private static void removeVersionInSharedPreferences(String dbName) {\n        if (isDefaultDatabase(dbName)) {\n            SharedUtil.removeVersion(null);\n        } else {\n            SharedUtil.removeVersion(dbName);\n        }\n    }\n\n    /**\n     * Check the dbName is default database or not. If it's same as dbName in litepal.xml, then it is\n     * default database.\n     * @param dbName\n     *          Name of database to check.\n     * @return True if it's default database, false otherwise.\n     */\n    private static boolean isDefaultDatabase(String dbName) {\n        if (BaseUtility.isLitePalXMLExists()) {\n            if (!dbName.endsWith(Const.Config.DB_NAME_SUFFIX)) {\n                dbName = dbName + Const.Config.DB_NAME_SUFFIX;\n            }\n            LitePalConfig config = LitePalParser.parseLitePalConfiguration();\n            String defaultDbName = config.getDbName();\n            if (!defaultDbName.endsWith(Const.Config.DB_NAME_SUFFIX)) {\n                defaultDbName = defaultDbName + Const.Config.DB_NAME_SUFFIX;\n            }\n            return dbName.equalsIgnoreCase(defaultDbName);\n        }\n        return false;\n    }\n\n}<｜fim▁end｜>",
    "response": "                    removeVersionInSharedPreferences(dbName);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.github.easyadmin_tests;\n\nimport static org.junit.Assert.*;\n\n<｜fim▁hole｜>import java.util.ArrayList;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport com.github.easyadmin.action.RequestReceiver;\nimport com.github.easyadmin.util.AppDataManager;\nimport com.github.easyadmin.util.Directory;\nimport com.github.easyadmin.util.SequentialFileSender;\n\npublic class SequentialFileSenderTest {\n    private final String HOST_NAME = \"localhost\";\n    private final String FIRST_DIR_ROOT = \"root_dir1\";\n    private final String SECOND_DIR_ROOT = \"root_dir2\";\n    private final String THIRD_DIR_ROOT = \"root_dir3\";\n\n    RequestReceiver requestReceiver;\n\n    public SequentialFileSenderTest() throws IOException\n    {\n        requestReceiver = new RequestReceiver();\n    }\n\n    @Test\n    public void test() throws UnknownHostException, IOException {\n        if (!new File(FIRST_DIR_ROOT).mkdir()) {\n            fail();\n        }\n\n        if (!new File(SECOND_DIR_ROOT).mkdir()) {\n            fail();\n        }\n\n        if (!new File(THIRD_DIR_ROOT).mkdir()) {\n            fail();\n        }\n\n        FileManager.createDirectoryTree(FIRST_DIR_ROOT, 2);\n        FileManager.createDirectoryTree(SECOND_DIR_ROOT, 5);\n        FileManager.createDirectoryTree(THIRD_DIR_ROOT, 1);\n\n        ArrayList<File> files = new ArrayList<File>();\n        files.add(Paths.get(FIRST_DIR_ROOT).toAbsolutePath().toFile());\n        files.add(Paths.get(SECOND_DIR_ROOT).toAbsolutePath().toFile());\n        files.add(Paths.get(THIRD_DIR_ROOT).toAbsolutePath().toFile());\n\n        SequentialFileSender fileSender = new SequentialFileSender(files, HOST_NAME);\n        fileSender.waitUntilFinish();\n\n        String copyDirectoryPath = AppDataManager.createAppDataFolder();\n        ArrayList<File> copiedFiles = new ArrayList<File>();\n        copiedFiles.add(Paths.get(copyDirectoryPath, FIRST_DIR_ROOT).toFile());\n        copiedFiles.add(Paths.get(copyDirectoryPath, SECOND_DIR_ROOT).toFile());\n        copiedFiles.add(Paths.get(copyDirectoryPath, THIRD_DIR_ROOT).toFile());\n\n        for (int i = 0; i < 3; i++) {\n            try {\n                Directory srcDir = new Directory(files.get(i));\n                Directory copyDir = new Directory(copiedFiles.get(i));\n                Assert.assertTrue(FileManager.areCopies(srcDir, copyDir));\n            } catch (Exception e) {\n                e.printStackTrace();\n                fail();\n            }\n        }\n\n        for (int i = 0; i < 3; i++) {\n            Directory.deleteDirectory(files.get(i));\n            Directory.deleteDirectory(copiedFiles.get(i));\n        }\n    }\n}<｜fim▁end｜>",
    "response": "import java.io.File;\nimport java.io.IOException;\nimport java.net.UnknownHostException;\nimport java.nio.file.Paths;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.sis.internal.jaxb.metadata;\n\nimport javax.xml.bind.annotation.XmlElementRef;\nimport org.opengis.metadata.quality.Element;\nimport org.apache.sis.metadata.iso.quality.AbstractElement;\nimport org.apache.sis.internal.jaxb.gco.PropertyType;\n\npublic final class DQ_Element extends PropertyType<DQ_Element, Element> {\n    /**\n     * Empty constructor for JAXB only.\n<｜fim▁hole｜>    }\n\n    /**\n     * Returns the GeoAPI interface which is bound by this adapter.\n     * This method is indirectly invoked by the private constructor\n     * below, so it shall not depend on the state of this object.\n     *\n     * @return {@code Element.class}\n     */\n    @Override\n    protected Class<Element> getBoundType() {\n        return Element.class;\n    }\n\n    /**\n     * Constructor for the {@link #wrap} method only.\n     */\n    private DQ_Element(final Element metadata) {\n        super(metadata);\n    }\n\n    /**\n     * Invoked by {@link PropertyType} at marshalling time for wrapping the given metadata value\n     * in a {@code <gmd:DQ_Element>} XML element.\n     *\n     * @param  metadata The metadata element to marshall.\n     * @return A {@code PropertyType} wrapping the given the metadata element.\n     */\n    @Override\n    protected DQ_Element wrap(final Element metadata) {\n        return new DQ_Element(metadata);\n    }\n\n    /**\n     * Invoked by JAXB at marshalling time for getting the actual metadata to write\n     * inside the {@code <gmd:DQ_Element>} XML element.\n     * This is the value or a copy of the value given in argument to the {@code wrap} method.\n     *\n     * @return The metadata to be marshalled.\n     */\n    @XmlElementRef\n    public AbstractElement getElement() {\n        return AbstractElement.castOrCopy(metadata);\n    }\n\n    /**\n     * Invoked by JAXB at unmarshalling time for storing the result temporarily.\n     *\n     * @param metadata The unmarshalled metadata.\n     */\n    public void setElement(final AbstractElement metadata) {\n        this.metadata = metadata;\n    }\n}<｜fim▁end｜>",
    "response": "     */\n    public DQ_Element() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ILoveBigNumbers;\n\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.math.BigInteger;\n\npublic class Main {\n\n    public static void main(String[] args) {\n        BufferedReader input = new BufferedReader(new InputStreamReader(System.in));\n        StringBuilder out = new StringBuilder();\n\n        try{\n            String in;\n            while( (in = input.readLine()) != null){\n                    out.append(sum(fatorial(in).toCharArray()) + \"\\n\");\n                }   \n\n<｜fim▁hole｜>\n    private static int sum(char[] numbers) {\n        int sum = 0;\n        for (int i = 0; i < numbers.length; i++) {\n            sum += numbers[i] - 48;\n        }\n        return sum;\n    }\n\n    private static String fatorial(String numberS) {\n        BigInteger number = new BigInteger(\"1\");\n        int num = Integer.parseInt(numberS);\n        for (int i = 2; i <= num; i++) {\n            String aux = new Integer(i).toString();\n            number = number.multiply(new BigInteger(aux));\n        }\n        return number.toString();\n    }\n\n}<｜fim▁end｜>",
    "response": "        }catch(Exception e){\n\n        }\n        System.out.println(out.toString().trim());\n\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amazonaws.services.securityhub.model.transform;\n<｜fim▁hole｜>\nimport com.amazonaws.services.securityhub.model.*;\nimport com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;\nimport com.amazonaws.transform.*;\n\nimport static com.fasterxml.jackson.core.JsonToken.*;\n\n@Generated(\"com.amazonaws:aws-java-sdk-code-generator\")\npublic class UpdateFindingsResultJsonUnmarshaller implements Unmarshaller<UpdateFindingsResult, JsonUnmarshallerContext> {\n\n    public UpdateFindingsResult unmarshall(JsonUnmarshallerContext context) throws Exception {\n        UpdateFindingsResult updateFindingsResult = new UpdateFindingsResult();\n\n        return updateFindingsResult;\n    }\n\n    private static UpdateFindingsResultJsonUnmarshaller instance;\n\n    public static UpdateFindingsResultJsonUnmarshaller getInstance() {\n        if (instance == null)\n            instance = new UpdateFindingsResultJsonUnmarshaller();\n        return instance;\n    }\n}<｜fim▁end｜>",
    "response": "\nimport java.math.*;\n\nimport javax.annotation.Generated;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.manydesigns.portofino.pageactions.custom;\n\nimport com.manydesigns.elements.ElementsThreadLocals;\nimport com.manydesigns.elements.messages.SessionMessages;\nimport com.manydesigns.portofino.buttons.annotations.Button;\nimport com.manydesigns.portofino.pageactions.AbstractPageAction;\nimport com.manydesigns.portofino.pageactions.PageActionName;\nimport com.manydesigns.portofino.pageactions.annotations.ScriptTemplate;\nimport com.manydesigns.portofino.security.AccessLevel;\nimport com.manydesigns.portofino.security.RequiresPermissions;\nimport net.sourceforge.stripes.action.ErrorResolution;\nimport net.sourceforge.stripes.action.ForwardResolution;\nimport net.sourceforge.stripes.action.Resolution;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@RequiresPermissions(level = AccessLevel.VIEW)\n@PageActionName(\"Custom\")\n@ScriptTemplate(\"script_template.groovy\")\npublic class CustomAction extends AbstractPageAction {\n    public static final String copyright =\n            \"Copyright (c) 2005-2015, ManyDesigns srl\";\n\n    public static final Logger logger =\n            LoggerFactory.getLogger(CustomAction.class);\n\n    @Button(list = \"pageHeaderButtons\", titleKey = \"configure\", order = 1, icon = Button.ICON_WRENCH)\n    @RequiresPermissions(level = AccessLevel.DEVELOP)\n    public Resolution configure() {\n        prepareConfigurationForms();\n        return new ForwardResolution(\"/m/pageactions/pageactions/custom/configure.jsp\");\n    }\n\n    @Button(list = \"configuration\", key = \"update.configuration\", order = 1, type = Button.TYPE_PRIMARY)\n    @RequiresPermissions(level = AccessLevel.DEVELOP)\n    public Resolution updateConfiguration() {\n        prepareConfigurationForms();\n        readPageConfigurationFromRequest();\n        boolean valid = validatePageConfiguration();\n        if(valid) {\n            updatePageConfiguration();\n            SessionMessages.addInfoMessage(ElementsThreadLocals.getText(\"configuration.updated.successfully\"));\n        }\n        return cancel();\n    }\n<｜fim▁hole｜>        return null;\n    }\n}<｜fim▁end｜>",
    "response": "\n    public Resolution preparePage() {\n        if(!pageInstance.getParameters().isEmpty()) {\n            return new ErrorResolution(404);\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.synyx.urlaubsverwaltung.core.util;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.Properties;\n\npublic final class PropertiesUtil {\n\n<｜fim▁hole｜>    }\n\n    /**\n     * Load a properties file from the classpath. Thanks to: http://www.rgagnon.com/javadetails/java-0434.html\n     *\n     * @param  propsName\n     *\n     * @return  Properties\n     *\n     * @throws  Exception\n     */\n    public static Properties load(String propsName) throws IOException {\n\n        Properties props = new Properties();\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        URL url = cl.getResource(propsName);\n        props.load(url.openStream());\n\n        return props;\n    }\n}<｜fim▁end｜>",
    "response": "    private PropertiesUtil() {\n\n        // Hide constructor for util classes\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package jupiter.broadcasting.parser;\n\nimport java.util.Hashtable;\nimport java.util.Vector;\nimport org.xml.sax.*;\nimport org.xml.sax.helpers.DefaultHandler;\n\npublic class RssHandler extends DefaultHandler{\n    private Vector rssTitles;\n    private Vector rssLinks;\n    private String linkString;\n    private String titleString;\n    private int counter = 0;\n    private int maxRecords = 15;\n    private boolean isLink = false;\n    private boolean isTitle = false;\n    private boolean ifInsideItem = false;\n    private boolean enclosure = false;\n    /**\n     * Constructor\n     */\n    public RssHandler() {\n        linkString = \"link\";\n        titleString = \"title\";\n        rssTitles = new Vector();\n        rssLinks = new Vector();\n    }\n\n    /**\n     * Constructer that allows a little more control over parsing the feed\n     * @param title\n     * @param link\n     * @param numberOfRecords The max number of item to be parsed.\n     */\n    public RssHandler(String title,String link,int numberOfRecords) {\n        titleString = title;\n        linkString = link;\n        enclosure = link.equalsIgnoreCase(\"enclosure\");\n        rssTitles = new Vector();\n        rssLinks = new Vector();\n        maxRecords = numberOfRecords;\n    }\n\n    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {\n        if(ifInsideItem){\n            isLink = qName.equalsIgnoreCase(linkString) && !enclosure;\n            isTitle = qName.equalsIgnoreCase(titleString);\n            if(enclosure && qName.equalsIgnoreCase(\"enclosure\")){\n                rssLinks.addElement(attributes.getValue(\"url\"));\n            }\n        }else{\n            ifInsideItem = qName.equalsIgnoreCase(\"item\");\n        }\n        if(isTitle){\n            if(counter > maxRecords){\n                throw new SAXException(\"Parsing limit of \"+maxRecords+\" items reached\");\n            }\n            counter++;\n        }\n    }\n\n    public void endElement(String uri, String localName, String qName) throws SAXException {\n        super.endElement(uri, localName, qName);\n    }\n\n    public void characters(char ch[], int start, int length) throws SAXException {\n        if (isLink) {\n            rssLinks.addElement(new String(ch, start, length));\n            isLink = false;\n        }else if(isTitle){\n            rssTitles.addElement(new String(ch, start, length));\n            isTitle = false;\n<｜fim▁hole｜>            output.put(rssTitles.elementAt(i), rssLinks.elementAt(i));\n        }\n        return output;\n    }\n\n    public Vector getTitles(){\n        return rssTitles;\n    }\n}<｜fim▁end｜>",
    "response": "        }\n    }\n\n    public Hashtable getTable(){\n        Hashtable output = new Hashtable();\n        for(int i =0; i< rssTitles.size(); i++){\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package il.ac.bgu.cs.bp.bpjs.execution.jsproxy;\n\nimport il.ac.bgu.cs.bp.bpjs.internal.ScriptableUtils;\nimport java.util.*;\nimport java.util.function.BiFunction;\nimport java.util.stream.Collectors;\n\npublic class MapProxy<K,V> implements java.io.Serializable {\n\n    public static abstract class Modification<VV> implements java.io.Serializable {\n        public static final Modification DELETE = new Modification(){};\n    }\n\n    public static class PutValue<VV> extends Modification<VV> implements java.io.Serializable {\n        final VV value;\n\n        public PutValue(VV aValue) {\n            value = aValue;\n        }\n\n        public VV getValue() {\n            return value;\n        }\n\n        @Override\n        public int hashCode() {\n            int hash = 5;\n            hash = 23 * hash + ScriptableUtils.jsHashCode(this.value);\n            return hash;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (this == obj)  return true;\n            if (obj == null) return false;\n            if (getClass() != obj.getClass()) return false;\n            final PutValue other = (PutValue) obj;\n\n            return ScriptableUtils.jsEquals(this.value, other.value);\n        }        \n    }\n\n    /**\n     * The map we are proxying.\n     */\n    Map<K,V> seed;\n\n    private final Map<K,Modification<V>> modifications;\n\n    public MapProxy(Map<K, V> aSeed) {\n        seed = aSeed;\n        modifications = new HashMap<>();\n    }\n\n    public MapProxy(Map<K, V> aSeed, Map<K, Modification<V>> someModifications) {\n        seed = aSeed;\n        modifications = someModifications;\n    }\n\n    public void put(K key, V value ) {\n        modifications.put(key, new PutValue<>(value));\n    }\n\n    public void remove(K key) {\n        modifications.put(key, Modification.DELETE);\n    }\n\n    public Map<K, V> filter(BiFunction<K, V, Boolean> func) {\n        Map<K, V> result = modifications.entrySet().stream()\n            .filter(entry -> entry.getValue() != Modification.DELETE && func.apply(entry.getKey(), ((PutValue<V>) entry.getValue()).value))\n            .collect(Collectors.toMap(Map.Entry::getKey, entry -> ((PutValue<V>) entry.getValue()).value));\n        result.putAll(seed.entrySet().stream()\n            .filter(entry -> !modifications.containsKey(entry.getKey()) && func.apply(entry.getKey(), entry.getValue()))\n            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)));\n        return result;\n    }\n\n    public V get( K key ) {\n        if ( modifications.containsKey(key) ) {\n            Modification<V> m = modifications.get(key);\n            if ( m == Modification.DELETE ) {\n                return null;\n            } else {\n                return ((PutValue<V>)m).value;\n            }\n        } else {\n            return seed.get(key);\n        }\n    }\n\n    public boolean has( K key ) {\n        if ( modifications.containsKey(key) ) {\n            Modification<V> m = modifications.get(key);\n            return ( m != Modification.DELETE );\n        } else {\n            return seed.containsKey(key);\n        }\n    }\n\n    public Collection<V> values() {\n        return filter((k, v) -> true).values();\n    }\n\n    public Set<K> keys() {\n        Set<K> retVal = new HashSet<>(seed.keySet());\n<｜fim▁hole｜>                retVal.add(k);\n            }\n        });\n        return retVal;\n    }\n\n    public Set<Map.Entry<K, V>> entrySet() {\n        return filter((k, v) -> true).entrySet();\n    }\n\n    // size\n    public int size() { \n        return keys().size();\n    }\n\n    // get modifications\n    public Map<K, Modification<V>> getModifications() {\n        return modifications;\n    }\n\n    public void setSeed( Map<K, V> aNewSeed ) {\n        seed = aNewSeed;\n    }\n\n    // clear modifications?\n    public void reset() {\n        modifications.clear();\n    }\n\n    @Override\n    public int hashCode() {\n        int hash = 7;\n        hash = 23 * hash + ScriptableUtils.jsHashCode(this.modifications);\n        return hash;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) return true;\n        if (obj == null) return false;\n        if (getClass() != obj.getClass()) return false;\n\n        final MapProxy<?, ?> other = (MapProxy<?, ?>) obj;\n        if (!ScriptableUtils.jsMapEquals(this.seed, other.seed)) {\n            return false;\n        }\n        return ScriptableUtils.jsMapEquals(getModifications(), other.getModifications());\n    }\n\n}<｜fim▁end｜>",
    "response": "        modifications.forEach((k,v)->{\n            if ( v == Modification.DELETE ) {\n                retVal.remove(k);\n            } else {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.datasketches.tuple;\n\npublic interface SummarySetOperations<S extends Summary> {\n\n  /**\n   * This is called by the union operator when both sketches have the same hash value.\n   *\n<｜fim▁hole｜>   * return null summaries.\n   *\n   * @param a Summary from sketch A\n   * @param b Summary from sketch B\n   * @return union of Summary A and Summary B\n   */\n  public S union(S a, S b);\n\n  /**\n   * This is called by the intersection operator when both sketches have the same hash value.\n   *\n   * <p><b>Caution:</b> Do not modify the input Summary objects. Also do not return them directly,\n   * unless they are immutable (most Summary objects are not). For mutable Summary objects, it is\n   * important to create a new Summary object with the correct contents to be returned. Do not\n   * return null summaries.\n   *\n   * @param a Summary from sketch A\n   * @param b Summary from sketch B\n   * @return intersection of Summary A and Summary B\n   */\n  public S intersection(S a, S b);\n\n}<｜fim▁end｜>",
    "response": "   * <p><b>Caution:</b> Do not modify the input Summary objects. Also do not return them directly,\n   * unless they are immutable (most Summary objects are not). For mutable Summary objects, it is\n   * important to create a new Summary object with the correct contents to be returned. Do not\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ch.sdi.core.impl.data;\n\nimport java.util.Collection;\nimport java.util.Iterator;\nimport java.util.LinkedHashMap;\n\nimport ch.sdi.core.exc.SdiException;\n\npublic class Dataset extends LinkedHashMap<String, Object>\n{\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * Convertes the given collections into a Dataset\n     * <p>\n     * Both collections must not be <code>null</code> and have the same size\n<｜fim▁hole｜>     * @param aValues\n     * @return an initialized dataset\n     */\n    public static Dataset create( Collection<String> aKeys, Collection<Object> aValues )\n        throws SdiException\n    {\n        if ( aKeys == null )\n        {\n            throw new SdiException( \"Given keys is null!\",\n                                    SdiException.EXIT_CODE_PARSE_ERROR );\n        }\n\n        if ( aValues == null )\n        {\n            throw new SdiException( \"Given values is null!\",\n                                    SdiException.EXIT_CODE_PARSE_ERROR );\n        }\n\n        if ( aKeys.size() != aValues.size() )\n        {\n            throw new SdiException( \"Given collections are not the same in size. Keys: \" + aKeys.size()\n                                    + \"; Values: \" + aValues.size(),\n                                    SdiException.EXIT_CODE_PARSE_ERROR );\n        }\n\n        Dataset result = new Dataset();\n\n        Iterator<String> keys = aKeys.iterator();\n        Iterator<Object> values = aValues.iterator();\n\n        while ( keys.hasNext() )\n        {\n            result.put( keys.next(), values.next() );\n        }\n\n        return result;\n    }\n\n}<｜fim▁end｜>",
    "response": "     * <p>\n     * @param aKeys\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package es.upv.i3m.grycap.im.rest.client.parameters;\n\nimport es.upv.i3m.grycap.im.lang.ImMessages;\nimport es.upv.i3m.grycap.logger.ImJavaApiLogger;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Parameter implements RestParameter {\n\n  private final String name;\n  private final List<Object> values;\n\n  public Parameter(String name) {\n    this.name = name;\n    this.values = new ArrayList<>();\n  }\n\n  /**\n   * Create a REST parameter.\n   * \n   * @param name\n   *          : name of the parameter\n   * @param value\n   *          : value of the parameter\n   */\n  public Parameter(String name, Object value) {\n    this.name = name;\n    this.values = new ArrayList<>();\n    addValue(value);\n  }\n\n  /**\n   * Create a REST parameter.\n<｜fim▁hole｜>   *          : name of the parameter\n   * @param values\n   *          : list of values of the parameter\n   */\n  public Parameter(String name, List<?> values) {\n    this.name = name;\n    this.values = new ArrayList<>();\n    setParameterValues(values);\n  }\n\n  /**\n   * Adds a generic object to the parameters.\n   * \n   * @param value\n   *          : generic value to add\n   */\n  @Override\n  public void addValue(Object value) {\n    values.add(value);\n  }\n\n  @Override\n  public String getName() {\n    return name;\n  }\n\n  @Override\n  public Object[] getValues() {\n    return values.toArray();\n  }\n\n  private void setParameterValues(List<?> parameterValues) {\n    if (parameterValues != null && !parameterValues.isEmpty()) {\n      for (Object parameterValue : parameterValues) {\n        addValue(parameterValue);\n      }\n    } else {\n      ImJavaApiLogger.warning(this.getClass(),\n          ImMessages.WARNING_NULL_OR_EMPTY_PARAMETER_VALUES);\n    }\n  }\n}<｜fim▁end｜>",
    "response": "   * \n   * @param name\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jboss.pnc.common.monitor;\n\nimport org.jboss.pnc.common.util.ObjectWrapper;\nimport org.jboss.pnc.common.util.TimeUtils;\nimport org.jboss.util.collection.ConcurrentSet;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.annotation.PreDestroy;\nimport javax.enterprise.context.ApplicationScoped;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.ScheduledFuture;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.function.Consumer;\nimport java.util.function.Supplier;\n\n@ApplicationScoped\npublic class PullingMonitor {\n    private static final Logger log = LoggerFactory.getLogger(PullingMonitor.class);\n\n    /** Time how long to wait until all services are fully up and running (in seconds) */\n    private static final int DEFAULT_TIMEOUT = 300;\n    private static final String PULLING_MONITOR_TIMEOUT_KEY = \"pulling_monitor_timeout\";\n\n    /** Interval between two checks if the services are fully up and running (in second) */\n    private static final int DEFAULT_CHECK_INTERVAL = 1;\n    private static final String PULLING_MONITOR_CHECK_INTERVAL_KEY = \"pulling_monitor_check_interval\";\n\n    /** */\n    private static final TimeUnit DEFAULT_TIME_UNIT = TimeUnit.SECONDS;\n\n    private static final String PULLING_MONITOR_THREADPOOL_KEY = \"pulling_monitor_threadpool\";\n    private static final int DEFAULT_EXECUTOR_THREADPOOL_SIZE = 4;\n\n    private ScheduledExecutorService executorService;\n    private ScheduledExecutorService timeOutVerifierService;\n\n    private ConcurrentSet<RunningTask> runningTasks;\n\n    private int timeout;\n    private int checkInterval;\n\n<｜fim▁hole｜>                                                      \"check interval\");\n\n        int threadSize = getValueFromPropertyOrDefault(PULLING_MONITOR_THREADPOOL_KEY,\n                DEFAULT_EXECUTOR_THREADPOOL_SIZE,\n                \"thread size\");\n\n        runningTasks = new ConcurrentSet<>();\n        startTimeOutVerifierService();\n        executorService = Executors.newScheduledThreadPool(threadSize);\n    }\n\n    public void monitor(Runnable onMonitorComplete, Consumer<Exception> onMonitorError, Supplier<Boolean> condition) {\n        monitor(onMonitorComplete, onMonitorError, condition, checkInterval, timeout, DEFAULT_TIME_UNIT);\n    }\n\n    /**\n     * Periodically checks the condition and calls onMonitorComplete when it returns true.\n     * If timeout is reached onMonitorError is called.\n     *\n     * @param onMonitorComplete\n     * @param onMonitorError\n     * @param condition\n     * @param checkInterval\n     * @param timeout\n     * @param timeUnit Unit used for checkInterval and timeout\n     */\n    public void monitor(Runnable onMonitorComplete, Consumer<Exception> onMonitorError, Supplier<Boolean> condition, int checkInterval, int timeout, TimeUnit timeUnit) {\n\n        ObjectWrapper<RunningTask> runningTaskReference = new ObjectWrapper<>();\n        Runnable monitor = () -> {\n            RunningTask runningTask = runningTaskReference.get();\n\n            if (runningTask == null) {\n                /* There might be a situation where this runnable is called before runningTaskReference is set with the\n                 * running task since this runnable is scheduled to run before runningTaskReference is set. In that\n                 * case, we just skip this runnable and re-run on the next scheduled interval with the assumption that\n                 * runningTaskReference will be set before the next re-run\n                 */\n                log.debug(\"runningTask not set yet inside the 'monitor' runnable! Skipping!\");\n                return;\n            }\n            try {\n                // Check if given condition is satisfied\n                if (condition.get()) {\n                    runningTasks.remove(runningTask);\n                    runningTask.cancel();\n                    onMonitorComplete.run();\n                }\n            } catch (Exception e) {\n                log.error(\"Exception in monitor runnable\", e);\n                runningTasks.remove(runningTask);\n                runningTask.cancel();\n                onMonitorError.accept(e);\n            }\n        };\n        ScheduledFuture<?> future = executorService.scheduleWithFixedDelay(monitor, 0L, checkInterval, timeUnit);\n        Consumer<RunningTask> onTimeout = (runningTask) -> {\n            runningTasks.remove(runningTask);\n            onMonitorError.accept(new MonitorException(\"Service was not ready in: \" + timeout + \" \" + timeUnit.toString()));\n        };\n        RunningTask runningTask = new RunningTask(future, timeout, TimeUtils.chronoUnit(timeUnit), onTimeout);\n        runningTasks.add(runningTask);\n        runningTaskReference.set(runningTask);\n    }\n\n    public ScheduledFuture<?> timer(Runnable task, long delay, TimeUnit timeUnit) {\n        return executorService.schedule(task, delay, timeUnit);\n    }\n\n    private void startTimeOutVerifierService() {\n        Runnable terminateTimedOutTasks = () -> {\n            runningTasks.parallelStream()\n                    .forEach(runningTask -> runningTask.terminateIfTimedOut());\n        };\n        timeOutVerifierService = Executors.newScheduledThreadPool(1);\n        timeOutVerifierService.scheduleWithFixedDelay(terminateTimedOutTasks, 0L, 250, TimeUnit.MILLISECONDS);\n    }\n\n    @PreDestroy\n    public void destroy() {\n        executorService.shutdownNow();\n        timeOutVerifierService.shutdownNow();\n    }\n\n    /**\n     * If propertyName has no value (either specified in system property or environment property), then just return\n     * the default value. System property value has priority over environment property value.\n     *\n     * If value can't be parsed, just return the default value.\n     *\n     * @param propertyName property name to check the value\n     * @param defaultValue default value to use\n     * @param description description to print in case value can't be parsed as an integer\n     *\n     * @return value from property, or default value\n     */\n    private int getValueFromPropertyOrDefault(String propertyName, int defaultValue, String description) {\n\n        int value = defaultValue;\n\n        String valueEnv = System.getenv(propertyName);\n        String valueSys = System.getProperty(propertyName);\n\n        try {\n            if (valueSys != null) {\n                value = Integer.parseInt(valueSys);\n            } else if (valueEnv != null) {\n                value = Integer.parseInt(valueEnv);\n            }\n            log.info(\"Updated \" + description + \" for PullingMonitor to: \" + value);\n            return value;\n        } catch (NumberFormatException e) {\n            log.warn(\"Could not parse the '\" + propertyName +\n                    \"' system property. Using default value: \" + defaultValue);\n            return value;\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    public PullingMonitor() {\n\n        timeout = getValueFromPropertyOrDefault(PULLING_MONITOR_TIMEOUT_KEY, DEFAULT_TIMEOUT, \"timeout\");\n        checkInterval = getValueFromPropertyOrDefault(PULLING_MONITOR_CHECK_INTERVAL_KEY,\n                                                      DEFAULT_CHECK_INTERVAL,\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.voxelplugineering.voxelsniper.bukkit.world.material;\n\nimport com.voxelplugineering.voxelsniper.world.material.Material;\nimport com.voxelplugineering.voxelsniper.world.material.MaterialState;\n\npublic class BukkitMaterialState implements MaterialState\n{\n\n    private final byte state;\n    private final Material type;\n\n    /**\n     * Creates a new {@link BukkitMaterialState}.\n     * \n     * @param type The base material\n     * @param state The data value\n     */\n    public BukkitMaterialState(Material type, byte state)\n    {\n        this.type = type;\n        this.state = state;\n    }\n\n    @Override\n    public Material getType()\n    {\n        return this.type;\n    }\n\n    /**\n     * Gets the data value.\n     * \n     * @return The data value\n     */\n    public byte getState()\n    {\n        return this.state;\n    }\n\n    @Override\n    public boolean equals(Object o)\n    {\n        if (o == this)\n        {\n            return true;\n        }\n        if (!(o instanceof BukkitMaterialState))\n        {\n            return false;\n        }\n        BukkitMaterialState sms = (BukkitMaterialState) o;\n        return sms.state == this.state && this.type.equals(sms.type);\n    }\n\n    @Override\n    public int hashCode()\n<｜fim▁hole｜>    }\n\n}<｜fim▁end｜>",
    "response": "    {\n        int r = 1;\n        r = r * 31 + this.state;\n        r = r * 31 + this.type.hashCode();\n        return r;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.camunda.bpm.client.spring.annotation;\n\nimport org.camunda.bpm.client.ExternalTaskClient;\nimport org.camunda.bpm.client.backoff.BackoffStrategy;\nimport org.camunda.bpm.client.spring.impl.PostProcessorConfiguration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.core.annotation.AliasFor;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\nimport static java.lang.annotation.ElementType.TYPE;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\n@Documented\n@Target(TYPE)\n@Retention(RUNTIME)\n@Import(PostProcessorConfiguration.class)\npublic @interface EnableExternalTaskClient {\n\n  String STRING_NULL_VALUE = \"$null$\";\n  long LONG_NULL_VALUE = Long.MIN_VALUE;\n  int INT_NULL_VALUE = Integer.MIN_VALUE;\n\n  /**\n   * Base url of the Camunda Runtime Platform REST API. This information is mandatory.\n   * Alias of {@link #baseUrl()}.\n   *\n   * @return baseUrl of the Camunda Runtime Platform REST API\n   */\n  @AliasFor(\"baseUrl\")\n  String value() default STRING_NULL_VALUE;\n\n  /**\n   * Base url of the Camunda Runtime Platform REST API. This information is mandatory.\n   * Alias of {@link #value()}.\n   *\n   * @return baseUrl of the Camunda Runtime Platform REST API\n   */\n  @AliasFor(\"value\")\n  String baseUrl() default STRING_NULL_VALUE;\n\n  /**\n   * Specifies the maximum amount of tasks that can be fetched within one request.\n   * This information is optional. Default is 10.\n   *\n   * @return maxTasks which are supposed to be fetched within one request\n   */\n  int maxTasks() default INT_NULL_VALUE;\n\n  /**\n   * A custom worker id the Workflow Engine is aware of. This information is optional.\n   * Note: make sure to choose a unique worker id\n   * <p>\n   * If not given or null, a worker id is generated automatically which consists of the\n   * hostname as well as a random and unique 128 bit string (UUID).\n   *\n   * @return workerId the Workflow Engine is aware of\n   */\n  String workerId() default STRING_NULL_VALUE;\n\n  /**\n   * Specifies whether tasks should be fetched based on their priority or arbitrarily.\n<｜fim▁hole｜>  /**\n   * Asynchronous response (long polling) is enabled if a timeout is given.\n   * Specifies the maximum waiting time for the response of fetched and locked external tasks.\n   * The response is performed immediately, if external tasks are available in the moment of\n   * the request. This information is optional. Unless a timeout is given, fetch and lock\n   * responses are synchronous.\n   *\n   * @return asyncResponseTimeout of fetched and locked external tasks in milliseconds\n   */\n  long asyncResponseTimeout() default LONG_NULL_VALUE;\n\n  /**\n   * Disables immediate fetching for external tasks after bootstrapping the client.\n   * To start fetching {@link ExternalTaskClient#start()} must be called.\n   *\n   * @return disableAutoFetching when after bootstrapping the client\n   */\n  boolean disableAutoFetching() default false;\n\n  /**\n   * Disables the client-side backoff strategy. When set to {@code true},\n   * a {@link BackoffStrategy} bean is ignored.\n   * <p>\n   * NOTE: Please bear in mind that disabling the client-side backoff can lead to heavy\n   * load situations on engine side. To avoid this, please specify an appropriate\n   * {@link #asyncResponseTimeout()}.\n   *\n   * @return disableBackoffStrategy\n   */\n  boolean disableBackoffStrategy() default false;\n\n  /**\n   * @return lockDuration <ul>\n   * <li> in milliseconds to lock the external tasks\n   * <li> must be greater than zero\n   * <li> the default lock duration is 20 seconds (20,000 milliseconds)\n   * <li> is overridden by the lock duration configured on a topic subscription\n   * </ul>\n   */\n  long lockDuration() default LONG_NULL_VALUE;\n\n  /**\n   * Specifies the date format to de-/serialize date variables.\n   * The option defaults to <code>yyyy-MM-dd'T'HH:mm:ss.SSSZ</code>\n   *\n   * @return dateFormat date format to be used\n   */\n  String dateFormat() default STRING_NULL_VALUE;\n\n  /**\n   * Specifies the serialization format that is used to serialize objects when no specific\n   * format is requested. This option defaults to application/json.\n   *\n   * @return defaultSerializationFormat serialization format to be used\n   */\n  String defaultSerializationFormat() default STRING_NULL_VALUE;\n\n}<｜fim▁end｜>",
    "response": "   * This information is optional. Default is <code>true</code>.\n   *\n   * @return usePriority when fetching and locking tasks\n   */\n  boolean usePriority() default true;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.raizlabs.android.dbflow.processor.model.builder;\n\nimport com.raizlabs.android.dbflow.annotation.provider.ContentUri;\nimport com.raizlabs.android.dbflow.processor.definition.ColumnDefinition;\nimport com.raizlabs.android.dbflow.processor.definition.TableDefinition;\nimport com.raizlabs.android.dbflow.processor.model.ProcessorManager;\nimport com.raizlabs.android.dbflow.sql.QueryBuilder;\n\npublic class SqlQueryBuilder extends QueryBuilder<SqlQueryBuilder> {\n\n    public SqlQueryBuilder() {\n    }\n\n    public SqlQueryBuilder(Object object) {\n        super(object);\n    }\n\n    public SqlQueryBuilder appendSelect() {\n        return append(\"new Select(projection)\");\n    }\n\n<｜fim▁hole｜>    public SqlQueryBuilder appendDelete() {\n        return append(\"new Delete()\");\n    }\n\n    public SqlQueryBuilder appendGetDatabase(String databaseName) {\n        return append(String.format(\"FlowManager.getDatabase(\\\"%1s\\\").getWritableDatabase()\", databaseName));\n    }\n\n    public SqlQueryBuilder appendTable(String method, String databaseName, String tableName) {\n        return append(String.format(\"\\n.%1s(FlowManager.getTableClassForName(\\\"%1s\\\", \\\"%1s\\\"))\", method, databaseName, tableName));\n    }\n\n    public SqlQueryBuilder appendFromTable(String databaseName, String tableName) {\n        return appendTable(\"from\", databaseName, tableName);\n    }\n\n    public SqlQueryBuilder appendUpdateConflictAction() {\n        return append(\"\\n.conflictAction(adapter.getUpdateOnConflictAction())\");\n    }\n\n    public SqlQueryBuilder appendSet() {\n        return append(\"\\n.set().conditionValues(values)\");\n    }\n\n    public SqlQueryBuilder appendWhere() {\n        return append(\"\\n.where(selection, selectionArgs)\");\n    }\n\n    public SqlQueryBuilder appendPathSegments(ProcessorManager processorManager, String databaseName, String tableName, ContentUri.PathSegment[] pathSegments) {\n        TableDefinition tableDefinition = processorManager.getTableDefinition(databaseName, tableName);\n        if (tableDefinition == null) {\n            processorManager.logError(\"Could not find table definition for %1s from %1s\", tableName, databaseName);\n        } else {\n            for (ContentUri.PathSegment pathSegment : pathSegments) {\n                ColumnDefinition columnDefinition = tableDefinition.mColumnMap.get(pathSegment.column());\n                if (columnDefinition == null) {\n                    processorManager.logError(\"Column %1s not found for table %1s\", pathSegment.column(), tableDefinition.tableName);\n                } else {\n                    append(String.format(\"\\n.and(Condition.column%s(\\\"%1s\\\").is(\",\n                            (columnDefinition.hasTypeConverter && !columnDefinition.isBoolean)\n                                    ? \"Raw\" : \"\", pathSegment.column()));\n\n                    // primitive use value of\n                    if (columnDefinition.element.asType().getKind().isPrimitive()) {\n                        String name = columnDefinition.element.asType().toString();\n\n                        // handle char\n                        if (\"char\" .equals(name)) {\n                            name = \"character\";\n                        }\n                        name = name.substring(0, 1).toUpperCase() + name.substring(1);\n                        append(String.format(\"%1s.valueOf(uri.getPathSegments().get(%1d))\", name, pathSegment.segment()));\n                    } else {\n                        append(String.format(\"uri.getPathSegments().get(%1d)\", pathSegment.segment()));\n                    }\n                    append(\"))\");\n                }\n            }\n        }\n        return this;\n    }\n\n    public SqlQueryBuilder appendInsertWithOnConflict(String tableName) {\n        return append(String.format(\"\\n.insertWithOnConflict(\\\"%1s\\\", null, values, \" +\n                \"ConflictAction.getSQLiteDatabaseAlgorithmInt(adapter.getInsertOnConflictAction()))\", tableName));\n    }\n\n    public SqlQueryBuilder appendQuery() {\n        return append(\"\\n.query()\");\n    }\n\n    public SqlQueryBuilder appendCount() {\n        return append(\"\\n.count()\");\n    }\n\n}<｜fim▁end｜>",
    "response": "    public SqlQueryBuilder appendUpdate(String databaseName, String tableName) {\n        return append(String.format(\"new Update(FlowManager.getTableClassForName(\\\"%1s\\\", \\\"%1s\\\"))\",\n                databaseName, tableName));\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.eclipse.vorto.remoterepository.service.converter;\n\nimport org.eclipse.vorto.remoterepository.model.ModelContent;\nimport org.eclipse.vorto.remoterepository.model.ModelView;\n\npublic interface IModelConverterService {\n    /**\n     * Converts {@code modelContent} to {@link ModelView}\n     * @param modelContent\n     * @return\n     */\n    ModelView convert(ModelContent modelContent);\n\n    /**\n     * Returns the ModelView given the byte array of the model file\n     * @param modelContent\n     * @return\n     */\n    ModelView convertToModelView(byte[] modelFile);\n\n    /**\n     * Returns the ModelContent given the byte array of the model file\n     * @param modelContent\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "     * @return\n     */\n    ModelContent convertToModelContent(byte[] modelFile);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.python.ReL.WDB.database.wdb.metadata;\n\nimport org.python.ReL.WDB.parser.generated.wdb.parser.SimpleNode;\n\nimport java.util.ArrayList;\n\npublic class UpdateQuery extends Query {\n    public String className;\n    public SimpleNode expression;\n    public ArrayList<Assignment> assignmentList;\n\n    public UpdateQuery() {\n        super();\n        this.assignmentList = new ArrayList<Assignment>();\n    }\n\n    public UpdateQuery(String className)\n    {\n        super();\n        this.className = className;\n<｜fim▁hole｜>        super();\n        this.className = className;\n        this.assignmentList = assignmentList;\n    }\n\n    public SimpleNode getExpression() {\n        return expression;\n    }\n    /**\n     * @param expression The expression that qualifies the objects from the FROM class.\n     */\n    public void setExpression(SimpleNode expression) {\n        this.expression = expression;\n    }\n\n    public void addAssignment(Assignment assignment)\n    {\n        this.assignmentList.add(assignment);\n    }\n\n    public void removeAssignment(Assignment assignment)\n    {\n        this.assignmentList.remove(assignment);\n    }\n\n    public void removeAssignment(int index)\n    {\n        this.assignmentList.remove(index);\n    }\n\n    public int numberOfAssignments()\n    {\n        return assignmentList.size();\n    }\n\n    public Assignment getAssignment(int index)\n    {\n        return (Assignment)assignmentList.get(index);\n    }\n}<｜fim▁end｜>",
    "response": "        this.assignmentList = new ArrayList<Assignment>();\n    }\n\n    public UpdateQuery(String className, ArrayList<Assignment> assignmentList)\n    {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>\npublic class SubstringFunction implements ScalarFunction {\n\n    private static final long serialVersionUID = 1L;\n\n    public static SubstringFunction createSqlStyle() {\n        return new SubstringFunction(true, true);\n    }\n\n    public static SubstringFunction createJavaStyle() {\n        return new SubstringFunction(false, false);\n    }\n\n    private final boolean oneBased;\n    private final boolean secondParamIsCharCount;\n\n    /**\n     * Creates a {@link SubstringFunction}\n     * \n     * @param oneBased true if the character index parameters are 1 based, like most SQL SUBSTRING functions (instead of\n     *            0 based, like Java).\n     * @param secondParamIsCharCount true if the (optional) second parameter is a \"character count\", like most SQL\n     *            SUBSTRING functions (instead of end-index, like Java)\n     * \n     */\n    public SubstringFunction(boolean oneBased, boolean secondParamIsCharCount) {\n        this.oneBased = oneBased;\n        this.secondParamIsCharCount = secondParamIsCharCount;\n    }\n\n    @Override\n    public ColumnType getExpectedColumnType(ColumnType type) {\n        return ColumnType.STRING;\n    }\n\n    @Override\n    public String getFunctionName() {\n        if (!oneBased && !secondParamIsCharCount) {\n            return \"JAVA_SUBSTRING\";\n        }\n        return \"SUBSTRING\";\n    }\n\n    @Override\n    public Object evaluate(Row row, Object[] parameters, SelectItem operandItem) {\n        final String str = (String) FunctionType.TO_STRING.evaluate(row, null, operandItem);\n        if (str == null) {\n            return null;\n        }\n        final int numParameters = parameters == null ? 0 : parameters.length;\n        switch (numParameters) {\n        case 0:\n            return str;\n        case 1:\n            int begin = toInt(parameters[0]);\n            if (oneBased) {\n                begin--;\n            }\n            if (begin >= str.length()) {\n                return \"\";\n            }\n            return str.substring(begin);\n        default:\n            int from = toInt(parameters[0]);\n            if (oneBased) {\n                from--;\n            }\n            int to = toInt(parameters[1]);\n            if (secondParamIsCharCount) {\n                to = from + to;\n            } else if (oneBased) {\n                to--;\n            }\n\n            if (from >= str.length() || from > to) {\n                return \"\";\n            }\n            if (to >= str.length()) {\n                return str.substring(from);\n            }\n            return str.substring(from, to);\n        }\n    }\n\n    private int toInt(Object parameter) {\n        final Number number = NumberComparator.toNumber(parameter);\n        if (number == null) {\n            throw new IllegalArgumentException(\"Not a valid substring parameter: \" + parameter);\n        }\n        return Math.max(0, number.intValue());\n    }\n\n}<｜fim▁end｜>",
    "response": "package org.apache.metamodel.query;\n\nimport org.apache.metamodel.data.Row;\nimport org.apache.metamodel.schema.ColumnType;\nimport org.apache.metamodel.util.NumberComparator;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.simperium.client;\n\nimport com.simperium.util.JSONDiff;\nimport com.simperium.util.Logger;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TimerTask;\n\nimport static com.simperium.util.Uuid.uuid;\n\npublic class Change {\n\n    public static final String TAG=\"Simperium.Change\";\n\n    public interface OnRetryListener {\n        public void onRetry(Change change);\n    }\n\n    public interface OnAcknowledgedListener {\n        public void onAcknowledged(Change change);\n    }\n\n    public interface OnCompleteListener {\n        public void onComplete(Change change);\n    }\n\n    public static final String OPERATION_MODIFY   = \"M\";\n    public static final String OPERATION_REMOVE   = JSONDiff.OPERATION_REMOVE;\n    public static final String ID_KEY             = \"id\";\n    public static final String CHANGE_ID_KEY      = \"ccid\";\n    public static final String SOURCE_VERSION_KEY = \"sv\";\n    public static final String OPERATION_KEY      = \"o\";\n    public static final String OBJECT_DATA_KEY    = \"d\";\n\n    private String operation;\n    private String key, bucketName;\n<｜fim▁hole｜>    private JSONDiff jsondiff = new JSONDiff();\n    private boolean sendFullObject = false;\n    private TimerTask retryTimer;\n    private Integer retryCount = 0;\n\n    /**\n     * Constructs a change object from a map of values\n     */\n    public static Change buildChange(Syncable object, JSONObject properties)\n    throws JSONException {\n        return new Change(\n            properties.getString(OPERATION_KEY),\n            object.getBucketName(),\n            object.getSimperiumKey()\n        );\n    }\n\n    public static Change buildChange(String operation, String ccid, String bucketName, String key){\n        return new Change(operation, ccid, bucketName, key);\n    }\n\n    public Change(String operation, String bucketName, String key){\n        this(operation, uuid(), bucketName, key);\n    }\n\n    protected Change(String operation, String ccid, String bucketName, String key){\n        this.operation = operation;\n        this.ccid = ccid;\n        this.bucketName = bucketName;\n        this.key = key;\n\n        this.resetTimer();\n    }\n\n    public boolean isModifyOperation(){\n        return operation.equals(OPERATION_MODIFY);\n    }\n\n    public boolean isRemoveOperation() {\n        return operation.equals(OPERATION_REMOVE);\n    }\n\n    public boolean isPending(){\n        return pending;\n    }\n\n    public boolean isSent(){\n        return sent;\n    }\n\n    public boolean isComplete(){\n        return !pending;\n    }\n\n    public boolean isAcknowledged(){\n        return acknowledged;\n    }\n\n    protected void setAcknowledged(){\n        acknowledged = true;\n        resetTimer();\n        if (acknowledgedListener != null) {\n            acknowledgedListener.onAcknowledged(this);\n        }\n        if (compressed != null) {\n            compressed.setAcknowledged();\n        }\n    }\n\n    protected void setComplete(){\n        pending = false;\n        if (completeListener != null) {\n            completeListener.onComplete(this);\n        }\n        if (compressed != null) {\n            compressed.setComplete();\n        }\n    }\n\n    protected void setSent(){\n        sent = true;\n        if (compressed != null) {\n            compressed.setSent();\n        }\n    }\n\n    protected boolean keyMatches(Change otherChange){\n        return otherChange.getKey().equals(getKey());\n    }\n\n    public String getKey(){\n        return key;\n    }\n\n    public String getBucketName(){\n        return bucketName;\n    }\n\n    public String getChangeId(){\n        return this.ccid;\n    }\n\n    public String getOperation(){\n        return operation;\n    }\n\n    public void setSendFullObject(boolean sendFullObject) {\n        this.sendFullObject = sendFullObject;\n    }\n\n    public JSONObject toJSONObject(JSONObject target, Ghost ghost)\n    throws ChangeEmptyException, ChangeInvalidException {\n        try {\n            JSONObject json = new JSONObject();\n            json.put(ID_KEY, getKey());\n            json.put(CHANGE_ID_KEY, getChangeId());\n            json.put(JSONDiff.DIFF_OPERATION_KEY, getOperation());\n\n            if (!getOperation().equals(OPERATION_REMOVE) && ghost.getVersion() != null && ghost.getVersion() > 0) {\n                json.put(SOURCE_VERSION_KEY, ghost.getVersion());\n            }\n\n            JSONObject diff = getDiff(target, ghost);\n            boolean requiresDiff = requiresDiff();\n\n            if (requiresDiff && diff.length() == 0) {\n                throw new ChangeEmptyException(this);\n            }\n\n            if (requiresDiff) {\n                json.put(JSONDiff.DIFF_VALUE_KEY, diff.getJSONObject(JSONDiff.DIFF_VALUE_KEY));\n            }\n\n            if (sendFullObject) {\n                json.put(OBJECT_DATA_KEY, target);\n            }\n\n            return json;\n        } catch (JSONException e) {\n            throw new ChangeInvalidException(this, \"Could not build change JSON\", e);\n        }\n    }\n\n    protected Map<String,Object> toJSONSerializable(){\n        Map<String,Object> props = new HashMap<String,Object>(3);\n        // key, version, origin, target, ccid\n        props.put(OPERATION_KEY, operation);\n        props.put(ID_KEY, key);\n        props.put(CHANGE_ID_KEY, ccid);\n        return props;\n\n    }\n\n    public void setOnAcknowledgedListener(OnAcknowledgedListener listener){\n        acknowledgedListener = listener;\n    }\n\n    public void setOnCompleteListener(OnCompleteListener listener){\n\n    }\n\n    public Integer getRetryCount() {\n        return retryCount;\n    }\n\n    public void incrementRetryCount() {\n        retryCount++;\n    }\n\n    protected void setOnRetryListener(OnRetryListener listener){\n        retryListener = listener;\n    }\n\n    protected void resetTimer(){\n        if (retryTimer != null) {\n            retryTimer.cancel();\n        }\n\n        retryTimer = new TimerTask(){\n            @Override\n            public void run(){\n                Logger.log(\"Simperium.Channel\", String.format(\"Retry change: %s\", Change.this));\n                if (retryListener != null) {\n                    retryListener.onRetry(Change.this);\n                }\n            }\n        };\n    }\n\n    protected TimerTask getRetryTimer(){\n        return retryTimer;\n    }\n\n    public String toString(){\n        return String.format(\"Change %s %s %s\", getChangeId(), getKey(), operation);\n    }\n    /**\n     * The change message requires a diff value in the JSON payload\n     */\n    public boolean requiresDiff(){\n        return operation.equals(OPERATION_MODIFY);\n    }\n\n    public JSONObject getDiff(JSONObject target, Ghost ghost){\n        try {\n            return jsondiff.diff(ghost.getDiffableValue(), target);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    private String ccid;\n    private boolean pending = true, acknowledged = false, sent = false;\n    private OnRetryListener retryListener;\n    private OnCompleteListener completeListener;\n    private OnAcknowledgedListener acknowledgedListener;\n    private Change compressed;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.thecoffeine.storage;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class StorageApplication {\n\n    /**\n     * Entry point.\n     *\n<｜fim▁hole｜>    public static void main( String[] args ) {\n        SpringApplication.run( StorageApplication.class, args );\n    }\n}<｜fim▁end｜>",
    "response": "     * @param args    Command line arguments.\n     */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amazonaws.services.glacier.model;\n\nimport java.io.Serializable;\nimport javax.annotation.Generated;\n\n@Generated(\"com.amazonaws:aws-java-sdk-code-generator\")\npublic class UploadArchiveResult extends com.amazonaws.AmazonWebServiceResult<com.amazonaws.ResponseMetadata> implements Serializable, Cloneable {\n\n    /**\n     * <p>\n     * The relative URI path of the newly added archive resource.\n     * </p>\n     */\n    private String location;\n    /**\n     * <p>\n     * The checksum of the archive computed by Amazon S3 Glacier.\n     * </p>\n     */\n    private String checksum;\n    /**\n     * <p>\n     * The ID of the archive. This value is also included as part of the location.\n     * </p>\n     */\n    private String archiveId;\n\n    /**\n     * <p>\n     * The relative URI path of the newly added archive resource.\n     * </p>\n     * \n     * @param location\n     *        The relative URI path of the newly added archive resource.\n     */\n\n    public void setLocation(String location) {\n        this.location = location;\n    }\n\n    /**\n     * <p>\n     * The relative URI path of the newly added archive resource.\n     * </p>\n     * \n     * @return The relative URI path of the newly added archive resource.\n     */\n\n    public String getLocation() {\n        return this.location;\n    }\n\n    /**\n     * <p>\n     * The relative URI path of the newly added archive resource.\n     * </p>\n     * \n     * @param location\n     *        The relative URI path of the newly added archive resource.\n     * @return Returns a reference to this object so that method calls can be chained together.\n     */\n\n    public UploadArchiveResult withLocation(String location) {\n        setLocation(location);\n        return this;\n    }\n\n    /**\n     * <p>\n     * The checksum of the archive computed by Amazon S3 Glacier.\n     * </p>\n     * \n     * @param checksum\n     *        The checksum of the archive computed by Amazon S3 Glacier.\n     */\n\n    public void setChecksum(String checksum) {\n        this.checksum = checksum;\n    }\n\n    /**\n     * <p>\n     * The checksum of the archive computed by Amazon S3 Glacier.\n     * </p>\n     * \n     * @return The checksum of the archive computed by Amazon S3 Glacier.\n     */\n\n    public String getChecksum() {\n        return this.checksum;\n    }\n\n    /**\n     * <p>\n     * The checksum of the archive computed by Amazon S3 Glacier.\n     * </p>\n     * \n     * @param checksum\n     *        The checksum of the archive computed by Amazon S3 Glacier.\n     * @return Returns a reference to this object so that method calls can be chained together.\n     */\n\n    public UploadArchiveResult withChecksum(String checksum) {\n        setChecksum(checksum);\n        return this;\n    }\n\n    /**\n     * <p>\n     * The ID of the archive. This value is also included as part of the location.\n     * </p>\n     * \n     * @param archiveId\n     *        The ID of the archive. This value is also included as part of the location.\n     */\n\n    public void setArchiveId(String archiveId) {\n        this.archiveId = archiveId;\n    }\n\n    /**\n     * <p>\n     * The ID of the archive. This value is also included as part of the location.\n     * </p>\n     * \n     * @return The ID of the archive. This value is also included as part of the location.\n     */\n\n    public String getArchiveId() {\n        return this.archiveId;\n    }\n\n    /**\n     * <p>\n     * The ID of the archive. This value is also included as part of the location.\n     * </p>\n     * \n     * @param archiveId\n     *        The ID of the archive. This value is also included as part of the location.\n     * @return Returns a reference to this object so that method calls can be chained together.\n     */\n\n    public UploadArchiveResult withArchiveId(String archiveId) {\n        setArchiveId(archiveId);\n        return this;\n    }\n\n    /**\n     * Returns a string representation of this object. This is useful for testing and debugging. Sensitive data will be\n     * redacted from this string using a placeholder value.\n     *\n     * @return A string representation of this object.\n     *\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (getLocation() != null)\n<｜fim▁hole｜>        if (getArchiveId() != null)\n            sb.append(\"ArchiveId: \").append(getArchiveId());\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n\n        if (obj instanceof UploadArchiveResult == false)\n            return false;\n        UploadArchiveResult other = (UploadArchiveResult) obj;\n        if (other.getLocation() == null ^ this.getLocation() == null)\n            return false;\n        if (other.getLocation() != null && other.getLocation().equals(this.getLocation()) == false)\n            return false;\n        if (other.getChecksum() == null ^ this.getChecksum() == null)\n            return false;\n        if (other.getChecksum() != null && other.getChecksum().equals(this.getChecksum()) == false)\n            return false;\n        if (other.getArchiveId() == null ^ this.getArchiveId() == null)\n            return false;\n        if (other.getArchiveId() != null && other.getArchiveId().equals(this.getArchiveId()) == false)\n            return false;\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int hashCode = 1;\n\n        hashCode = prime * hashCode + ((getLocation() == null) ? 0 : getLocation().hashCode());\n        hashCode = prime * hashCode + ((getChecksum() == null) ? 0 : getChecksum().hashCode());\n        hashCode = prime * hashCode + ((getArchiveId() == null) ? 0 : getArchiveId().hashCode());\n        return hashCode;\n    }\n\n    @Override\n    public UploadArchiveResult clone() {\n        try {\n            return (UploadArchiveResult) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new IllegalStateException(\"Got a CloneNotSupportedException from Object.clone() \" + \"even though we're Cloneable!\", e);\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "            sb.append(\"Location: \").append(getLocation()).append(\",\");\n        if (getChecksum() != null)\n            sb.append(\"Checksum: \").append(getChecksum()).append(\",\");\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.podcopic.animationlib.androidsimplifiedanimation.Views;\n\nimport android.support.v7.app.AppCompatActivity;\nimport android.os.Bundle;\nimport android.view.View;\n\nimport com.podcopic.animationlib.androidsimplifiedanimation.R;\nimport com.podcopic.animationlib.library.AnimationType;\nimport com.podcopic.animationlib.library.StartSmartAnimation;\n\npublic class RotationOutView extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_rotation_out_view);\n    }\n\n    public void animationStart(View v){\n\n        if(v.getId() == (R.id.rotate_out)){\n            StartSmartAnimation.startAnimation(v, AnimationType.RotateOut, 1000, 0,true ,100);\n        }\n        else if(v.getId() == (R.id.rotate_out_down_left)){\n            StartSmartAnimation.startAnimation(v, AnimationType.RotateOutDownLeft, 1000,0,false,100);\n        }\n        else if(v.getId() == (R.id.rotate_out_down_right)){\n            StartSmartAnimation.startAnimation(v, AnimationType.RotateOutDownRight, 1000,0,false,100);\n        }\n        else if(v.getId() == (R.id.rotate_out_up_left)){\n<｜fim▁hole｜>        }\n        else if(v.getId() == (R.id.rotate_out_up_right)){\n            StartSmartAnimation.startAnimation(v, AnimationType.RotateOutUpRight, 1000,0,false,100);\n        }\n\n    }\n}<｜fim▁end｜>",
    "response": "            StartSmartAnimation.startAnimation(v, AnimationType.RotateOutUpLeft, 1000,0,false,100);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.lucene.index;\n\n<｜fim▁hole｜>import java.util.Map;\n\nimport org.apache.lucene.util.Bits;\n\nimport org.apache.lucene.index.DirectoryReader; // javadoc\nimport org.apache.lucene.index.FieldInfo.DocValuesType;\nimport org.apache.lucene.index.MultiDocValues.MultiSortedDocValues;\nimport org.apache.lucene.index.MultiDocValues.MultiSortedSetDocValues;\nimport org.apache.lucene.index.MultiDocValues.OrdinalMap;\nimport org.apache.lucene.index.MultiReader; // javadoc\n\npublic final class SlowCompositeReaderWrapper extends AtomicReader {\n\n  private final CompositeReader in;\n  private final Fields fields;\n  private final Bits liveDocs;\n\n  /** This method is sugar for getting an {@link AtomicReader} from\n   * an {@link IndexReader} of any kind. If the reader is already atomic,\n   * it is returned unchanged, otherwise wrapped by this class.\n   */\n  public static AtomicReader wrap(IndexReader reader) throws IOException {\n    if (reader instanceof CompositeReader) {\n      return new SlowCompositeReaderWrapper((CompositeReader) reader);\n    } else {\n      assert reader instanceof AtomicReader;\n      return (AtomicReader) reader;\n    }\n  }\n\n  /** Sole constructor, wrapping the provided {@link\n   *  CompositeReader}. */\n  public SlowCompositeReaderWrapper(CompositeReader reader) throws IOException {\n    super();\n    in = reader;\n    fields = MultiFields.getFields(in);\n    liveDocs = MultiFields.getLiveDocs(in);\n    in.registerParentReader(this);\n  }\n\n  @Override\n  public String toString() {\n    return \"SlowCompositeReaderWrapper(\" + in + \")\";\n  }\n\n  @Override\n  public Fields fields() {\n    ensureOpen();\n    return fields;\n  }\n\n  @Override\n  public NumericDocValues getNumericDocValues(String field) throws IOException {\n    ensureOpen();\n    return MultiDocValues.getNumericValues(in, field);\n  }\n\n  @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    ensureOpen();\n    return MultiDocValues.getBinaryValues(in, field);\n  }\n\n  @Override\n  public SortedDocValues getSortedDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedDocValues dv = MultiDocValues.getSortedValues(in, field);\n        if (dv instanceof MultiSortedDocValues) {\n          map = ((MultiSortedDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED) {\n      return null;\n    }\n    int size = in.leaves().size();\n    final SortedDocValues[] values = new SortedDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedDocValues v = context.reader().getSortedDocValues(field);\n      if (v == null) {\n        v = SortedDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedDocValues(values, starts, map);\n  }\n\n  @Override\n  public SortedSetDocValues getSortedSetDocValues(String field) throws IOException {\n    ensureOpen();\n    OrdinalMap map = null;\n    synchronized (cachedOrdMaps) {\n      map = cachedOrdMaps.get(field);\n      if (map == null) {\n        // uncached, or not a multi dv\n        SortedSetDocValues dv = MultiDocValues.getSortedSetValues(in, field);\n        if (dv instanceof MultiSortedSetDocValues) {\n          map = ((MultiSortedSetDocValues)dv).mapping;\n          if (map.owner == getCoreCacheKey()) {\n            cachedOrdMaps.put(field, map);\n          }\n        }\n        return dv;\n      }\n    }\n    // cached ordinal map\n    if (getFieldInfos().fieldInfo(field).getDocValuesType() != DocValuesType.SORTED_SET) {\n      return null;\n    }\n    assert map != null;\n    int size = in.leaves().size();\n    final SortedSetDocValues[] values = new SortedSetDocValues[size];\n    final int[] starts = new int[size+1];\n    for (int i = 0; i < size; i++) {\n      AtomicReaderContext context = in.leaves().get(i);\n      SortedSetDocValues v = context.reader().getSortedSetDocValues(field);\n      if (v == null) {\n        v = SortedSetDocValues.EMPTY;\n      }\n      values[i] = v;\n      starts[i] = context.docBase;\n    }\n    starts[size] = maxDoc();\n    return new MultiSortedSetDocValues(values, starts, map);\n  }\n\n  // TODO: this could really be a weak map somewhere else on the coreCacheKey,\n  // but do we really need to optimize slow-wrapper any more?\n  private final Map<String,OrdinalMap> cachedOrdMaps = new HashMap<String,OrdinalMap>();\n\n  @Override\n  public NumericDocValues getNormValues(String field) throws IOException {\n    ensureOpen();\n    return MultiDocValues.getNormValues(in, field);\n  }\n\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    ensureOpen();\n    return in.getTermVectors(docID);\n  }\n\n  @Override\n  public int numDocs() {\n    // Don't call ensureOpen() here (it could affect performance)\n    return in.numDocs();\n  }\n\n  @Override\n  public int maxDoc() {\n    // Don't call ensureOpen() here (it could affect performance)\n    return in.maxDoc();\n  }\n\n  @Override\n  public void document(int docID, StoredFieldVisitor visitor) throws IOException {\n    ensureOpen();\n    in.document(docID, visitor);\n  }\n\n  @Override\n  public Bits getLiveDocs() {\n    ensureOpen();\n    return liveDocs;\n  }\n\n  @Override\n  public FieldInfos getFieldInfos() {\n    ensureOpen();\n    return MultiFields.getMergedFieldInfos(in);\n  }\n\n  @Override\n  public Object getCoreCacheKey() {\n    return in.getCoreCacheKey();\n  }\n\n  @Override\n  public Object getCombinedCoreAndDeletesKey() {\n    return in.getCombinedCoreAndDeletesKey();\n  }\n\n  @Override\n  protected void doClose() throws IOException {\n    // TODO: as this is a wrapper, should we really close the delegate?\n    in.close();\n  }\n}<｜fim▁end｜>",
    "response": "import java.io.IOException;\nimport java.util.HashMap;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package sun.awt;\n\nclass NativeLibLoader {\n\n    /**\n     * This is copied from java.awt.Toolkit since we need the library\n     * loaded in sun.awt.image also:\n     *\n     * WARNING: This is a temporary workaround for a problem in the\n     * way the AWT loads native libraries. A number of classes in this\n     * package (sun.awt.image) have a native method, initIDs(),\n     * which initializes\n     * the JNI field and method ids used in the native portion of\n     * their implementation.\n     *\n     * Since the use and storage of these ids is done by the\n<｜fim▁hole｜>     * names of the libraries to load. A better way of doing this\n     * would be to provide a separate library which defines java.awt.*\n     * initIDs, and exports the relevant symbols out to the\n     * implementation libraries.\n     *\n     * For now, we know it's done by the implementation, and we assume\n     * that the name of the library is \"awt\".  -br.\n     */\n    static void loadLibraries() {\n        java.security.AccessController.doPrivileged(\n            new java.security.PrivilegedAction<Void>() {\n                public Void run() {\n                    System.loadLibrary(\"awt\");\n                    return null;\n                }\n            });\n    }\n}<｜fim▁end｜>",
    "response": "     * implementation libraries, the implementation of these method is\n     * provided by the particular AWT implementations\n     * (i.e. \"Toolkit\"s/Peer), such as Motif, Win32 or Tiny. The\n     * problem is that this means that the native libraries must be\n     * loaded by the java.* classes, which do not necessarily know the\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.eclipse.persistence.testing.tests.queries;\n\nimport java.util.*;\n\nimport org.eclipse.persistence.testing.framework.*;\nimport org.eclipse.persistence.queries.*;\n<｜fim▁hole｜>    public CursoredStreamDistinctTest() {\n        setDescription(\"Verify the size works correctly with distinct when single field is queried\");\n    }\n\n    public void setup() {\n        // Access does not like this distinct.\n        if (getSession().getPlatform().isAccess()) {\n            throw new TestWarningException(\"Access does not support distinct in counts.\");\n        }\n    }\n\n    public void test() {\n        ExpressionBuilder eb = new ExpressionBuilder();\n        ReportQuery q = new ReportQuery(org.eclipse.persistence.testing.models.employee.domain.Employee.class, eb);\n        q.addAttribute(\"Name\", eb.get(\"lastName\"));\n        q.useDistinct();\n        q.setSelectionCriteria(eb.get(\"salary\").greaterThan(1));\n        q.useCursoredStream();\n        CursoredStream cs = (CursoredStream)getSession().executeQuery(q);\n        try {\n            cs.read(1);\n            this.count = cs.size();\n        } finally {\n            cs.close();\n        }\n    }\n\n    public void verify() {\n        ExpressionBuilder eb = new ExpressionBuilder();\n        ReportQuery q = new ReportQuery(org.eclipse.persistence.testing.models.employee.domain.Employee.class, eb);\n        q.addAttribute(\"Name\", eb.get(\"lastName\"));\n        q.useDistinct();\n        q.setSelectionCriteria(eb.get(\"salary\").greaterThan(1));\n        if (this.count != ((Vector)getSession().executeQuery(q)).size()) {\n            throw new TestErrorException(\"Size is incorrect, when using distinct on a single field query\");\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "import org.eclipse.persistence.expressions.*;\n\npublic class CursoredStreamDistinctTest extends TestCase {\n    public int count;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package gov.nih.nci.cagrid.fqp.results.service;\n\nimport gov.nih.nci.cagrid.common.FaultHelper;\nimport gov.nih.nci.cagrid.fqp.results.service.globus.resource.FQPResultResource;\nimport gov.nih.nci.cagrid.fqp.results.stubs.types.ProcessingNotCompleteFault;\nimport gov.nih.nci.cagrid.fqp.stubs.types.FederatedQueryProcessingFault;\n\nimport java.rmi.RemoteException;\n\nimport org.globus.wsrf.ResourceContext;\n\npublic class FederatedQueryResultsImpl extends FederatedQueryResultsImplBase {\n\n    public FederatedQueryResultsImpl() throws RemoteException {\n        super();\n    }\n\n    public gov.nih.nci.cagrid.dcqlresult.DCQLQueryResultsCollection getResults() throws RemoteException, gov.nih.nci.cagrid.fqp.results.stubs.types.ProcessingNotCompleteFault, gov.nih.nci.cagrid.fqp.stubs.types.FederatedQueryProcessingFault, gov.nih.nci.cagrid.fqp.stubs.types.InternalErrorFault {\n        FQPResultResource resource = (FQPResultResource) ResourceContext.getResourceContext().getResource();\n        if (!resource.isComplete()) {\n            ProcessingNotCompleteFault fault = new ProcessingNotCompleteFault();\n            fault.setFaultString(\"The query processing is not yet complete; current status is: \"\n                + resource.getStatusMessage());\n            throw fault;\n        } else if (resource.getProcessingException() != null) {\n            FederatedQueryProcessingFault fault = new FederatedQueryProcessingFault();\n<｜fim▁hole｜>            throw helper.getFault();\n        }\n        return resource.getResults();\n    }\n\n    public boolean isProcessingComplete() throws RemoteException {\n        FQPResultResource resource = (FQPResultResource) ResourceContext.getResourceContext().getResource();\n        return resource.isComplete();\n    }\n\n}<｜fim▁end｜>",
    "response": "            fault.setFaultString(\"Problem executing query: \" + resource.getProcessingException());\n            FaultHelper helper = new FaultHelper(fault);\n            helper.addFaultCause(resource.getProcessingException());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.wso2.carbon.bpmn.rest.model.common;\n\nimport com.fasterxml.jackson.annotation.JsonTypeInfo;\nimport org.wso2.carbon.bpmn.rest.common.PaginateRequest;\nimport org.wso2.carbon.bpmn.rest.engine.variable.QueryVariable;\n\nimport javax.xml.bind.annotation.*;\nimport java.util.Date;\nimport java.util.List;\n\n@XmlRootElement(name = \"HistoricProcessInstanceQueryRequest\")\n@XmlAccessorType(XmlAccessType.FIELD)\npublic class HistoricProcessInstanceQueryRequest extends PaginateRequest {\n\n    private String processInstanceId;\n    @XmlElementWrapper(name = \"processInstanceIds\")\n    @XmlElement(name = \"QueryVariable\", type = QueryVariable.class)\n    private List<String> processInstanceIds;\n    private String processBusinessKey;\n    private String processDefinitionId;\n    private String processDefinitionKey;\n    private String superProcessInstanceId;\n    private Boolean excludeSubprocesses;\n    private Boolean finished;\n    private String involvedUser;\n    private Date finishedAfter;\n    private Date finishedBefore;\n    private Date startedAfter;\n    private Date startedBefore;\n    private String startedBy;\n    private Boolean includeProcessVariables;\n    @XmlElementWrapper(name = \"QueryVariables\")\n    @XmlElement(name = \"QueryVariable\", type = QueryVariable.class)\n    private List<QueryVariable> variables;\n    private String tenantId;\n    private String tenantIdLike;\n    private Boolean withoutTenantId;\n\n    public String getProcessInstanceId() {\n        return processInstanceId;\n    }\n\n    public void setProcessInstanceId(String processInstanceId) {\n        this.processInstanceId = processInstanceId;\n    }\n\n    public List<String> getProcessInstanceIds() {\n        return processInstanceIds;\n    }\n\n    public void setProcessInstanceIds(List<String> processInstanceIds) {\n        this.processInstanceIds = processInstanceIds;\n    }\n\n    public String getProcessBusinessKey() {\n        return processBusinessKey;\n    }\n\n    public void setProcessBusinessKey(String processBusinessKey) {\n        this.processBusinessKey = processBusinessKey;\n    }\n\n    public String getProcessDefinitionId() {\n        return processDefinitionId;\n    }\n\n    public void setProcessDefinitionId(String processDefinitionId) {\n        this.processDefinitionId = processDefinitionId;\n    }\n\n    public String getProcessDefinitionKey() {\n        return processDefinitionKey;\n    }\n\n    public void setProcessDefinitionKey(String processDefinitionKey) {\n        this.processDefinitionKey = processDefinitionKey;\n    }\n\n    public String getSuperProcessInstanceId() {\n        return superProcessInstanceId;\n    }\n\n    public void setSuperProcessInstanceId(String superProcessInstanceId) {\n        this.superProcessInstanceId = superProcessInstanceId;\n    }\n\n    public Boolean getExcludeSubprocesses() {\n        return excludeSubprocesses;\n    }\n\n    public void setExcludeSubprocesses(Boolean excludeSubprocesses) {\n        this.excludeSubprocesses = excludeSubprocesses;\n    }\n\n    public Boolean getFinished() {\n        return finished;\n    }\n\n    public void setFinished(Boolean finished) {\n        this.finished = finished;\n    }\n\n    public String getInvolvedUser() {\n        return involvedUser;\n    }\n\n    public void setInvolvedUser(String involvedUser) {\n        this.involvedUser = involvedUser;\n    }\n\n    public Date getFinishedAfter() {\n        return finishedAfter;\n    }\n\n    public void setFinishedAfter(Date finishedAfter) {\n        this.finishedAfter = finishedAfter;\n    }\n\n    public Date getFinishedBefore() {\n        return finishedBefore;\n    }\n\n    public void setFinishedBefore(Date finishedBefore) {\n        this.finishedBefore = finishedBefore;\n    }\n\n    public Date getStartedAfter() {\n        return startedAfter;\n    }\n\n    public void setStartedAfter(Date startedAfter) {\n        this.startedAfter = startedAfter;\n    }\n\n    public Date getStartedBefore() {\n        return startedBefore;\n    }\n\n    public void setStartedBefore(Date startedBefore) {\n        this.startedBefore = startedBefore;\n    }\n\n    public String getStartedBy() {\n        return startedBy;\n    }\n\n    public void setStartedBy(String startedBy) {\n        this.startedBy = startedBy;\n    }\n\n    public Boolean getIncludeProcessVariables() {\n        return includeProcessVariables;\n    }\n\n    public void setIncludeProcessVariables(Boolean includeProcessVariables) {\n        this.includeProcessVariables = includeProcessVariables;\n    }\n\n    @JsonTypeInfo(use= JsonTypeInfo.Id.CLASS, defaultImpl=QueryVariable.class)\n    public List<QueryVariable> getVariables() {\n        return variables;\n    }\n\n    public void setVariables(List<QueryVariable> variables) {\n        this.variables = variables;\n    }\n\n    public String getTenantId() {\n        return tenantId;\n    }\n\n    public void setTenantId(String tenantId) {\n        this.tenantId = tenantId;\n<｜fim▁hole｜>\n    public void setTenantIdLike(String tenantIdLike) {\n        this.tenantIdLike = tenantIdLike;\n    }\n\n    public Boolean getWithoutTenantId() {\n        return withoutTenantId;\n    }\n\n    public void setWithoutTenantId(Boolean withoutTenantId) {\n        this.withoutTenantId = withoutTenantId;\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    public String getTenantIdLike() {\n        return tenantIdLike;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.devtools.build.runfiles;\n\nimport static com.google.common.truth.Truth.assertThat;\nimport static org.junit.Assert.assertThrows;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n@RunWith(JUnit4.class)\npublic final class UtilTest {\n\n  @Test\n  public void testIsNullOrEmpty() {\n    assertThat(Util.isNullOrEmpty(null)).isTrue();\n    assertThat(Util.isNullOrEmpty(\"\")).isTrue();\n    assertThat(Util.isNullOrEmpty(\"\\0\")).isFalse();\n<｜fim▁hole｜>  public void testCheckArgument() {\n    Util.checkArgument(true, null, null);\n\n    IllegalArgumentException e =\n        assertThrows(IllegalArgumentException.class, () -> Util.checkArgument(false, null, null));\n    assertThat(e).hasMessageThat().isEqualTo(\"argument validation failed\");\n\n    e = assertThrows(IllegalArgumentException.class, () -> Util.checkArgument(false, \"foo-%s\", 42));\n    assertThat(e).hasMessageThat().isEqualTo(\"foo-42\");\n  }\n}<｜fim▁end｜>",
    "response": "    assertThat(Util.isNullOrEmpty(\"some text\")).isFalse();\n  }\n\n  @Test\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ims.core.vo.lookups;\n\nimport ims.framework.cn.data.TreeNode;\nimport java.util.ArrayList;\nimport ims.framework.utils.Image;\nimport ims.framework.utils.Color;\n\n<｜fim▁hole｜>    {\n        super();\n    }\n    public ProcedureIntent(int id)\n    {\n        super(id, \"\", true);\n    }\n    public ProcedureIntent(int id, String text, boolean active)\n    {\n        super(id, text, active, null, null, null);\n    }\n    public ProcedureIntent(int id, String text, boolean active, ProcedureIntent parent, Image image)\n    {\n        super(id, text, active, parent, image);\n    }\n    public ProcedureIntent(int id, String text, boolean active, ProcedureIntent parent, Image image, Color color)\n    {\n        super(id, text, active, parent, image, color);\n    }\n    public ProcedureIntent(int id, String text, boolean active, ProcedureIntent parent, Image image, Color color, int order)\n    {\n        super(id, text, active, parent, image, color, order);\n    }\n    public static ProcedureIntent buildLookup(ims.vo.LookupInstanceBean bean)\n    {\n        return new ProcedureIntent(bean.getId(), bean.getText(), bean.isActive());\n    }\n    public String toString()\n    {\n        if(getText() != null)\n            return getText();\n        return \"\";\n    }\n    public TreeNode getParentNode()\n    {\n        return (ProcedureIntent)super.getParentInstance();\n    }\n    public ProcedureIntent getParent()\n    {\n        return (ProcedureIntent)super.getParentInstance();\n    }\n    public void setParent(ProcedureIntent parent)\n    {\n        super.setParentInstance(parent);\n    }\n    public TreeNode[] getChildren()\n    {\n        ArrayList children = super.getChildInstances();\n        ProcedureIntent[] typedChildren = new ProcedureIntent[children.size()];\n        for (int i = 0; i < children.size(); i++)\n        {\n            typedChildren[i] = (ProcedureIntent)children.get(i);\n        }\n        return typedChildren;\n    }\n    public int addChild(TreeNode child)\n    {\n        if (child instanceof ProcedureIntent)\n        {\n            super.addChild((ProcedureIntent)child);\n        }\n        return super.getChildInstances().size();\n    }\n    public int removeChild(TreeNode child)\n    {\n        if (child instanceof ProcedureIntent)\n        {\n            super.removeChild((ProcedureIntent)child);\n        }\n        return super.getChildInstances().size();\n    }\n    public Image getExpandedImage()\n    {\n        return super.getImage();\n    }\n    public Image getCollapsedImage()\n    {\n        return super.getImage();\n    }\n    public static ims.framework.IItemCollection getNegativeInstancesAsIItemCollection()\n    {\n        ProcedureIntentCollection result = new ProcedureIntentCollection();\n        return result;\n    }\n    public static ProcedureIntent[] getNegativeInstances()\n    {\n        return new ProcedureIntent[] {};\n    }\n    public static String[] getNegativeInstanceNames()\n    {\n        return new String[] {};\n    }\n    public static ProcedureIntent getNegativeInstance(String name)\n    {\n        if(name == null)\n            return null;\n        // No negative instances found\n        return null;\n    }\n    public static ProcedureIntent getNegativeInstance(Integer id)\n    {\n        if(id == null)\n            return null;\n        // No negative instances found\n        return null;\n    }\n    public int getTypeId()\n    {\n        return TYPE_ID;\n    }\n    public static final int TYPE_ID = 1021046;\n}<｜fim▁end｜>",
    "response": "public class ProcedureIntent extends ims.vo.LookupInstVo implements TreeNode\n{\n    private static final long serialVersionUID = 1L;\n\n    public ProcedureIntent()\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package de.teamlapen.vampirism.client.render.entities;\n\nimport com.mojang.blaze3d.matrix.MatrixStack;\nimport de.teamlapen.vampirism.client.model.VillagerWithArmsModel;\nimport net.minecraft.client.renderer.entity.EntityRendererManager;\nimport net.minecraft.client.renderer.entity.MobRenderer;\nimport net.minecraft.client.renderer.entity.layers.HeadLayer;\nimport net.minecraft.client.renderer.entity.layers.HeldItemLayer;\nimport net.minecraft.client.renderer.entity.layers.VillagerLevelPendantLayer;\nimport net.minecraft.entity.merchant.villager.VillagerEntity;\nimport net.minecraft.resources.IReloadableResourceManager;\nimport net.minecraft.util.ResourceLocation;\nimport net.minecraftforge.api.distmarker.Dist;\nimport net.minecraftforge.api.distmarker.OnlyIn;\n\n@OnlyIn(Dist.CLIENT)\npublic class HunterVillagerRenderer extends MobRenderer<VillagerEntity, VillagerWithArmsModel<VillagerEntity>> {\n\n    private static final ResourceLocation texture = new ResourceLocation(\"textures/entity/villager/villager.png\");\n\n    public HunterVillagerRenderer(EntityRendererManager renderManagerIn, IReloadableResourceManager resourceManager) {\n        super(renderManagerIn, new VillagerWithArmsModel<>(0), 0.5f);\n        this.addLayer(new HeadLayer<>(this));\n        this.addLayer(new VillagerLevelPendantLayer<>(this, resourceManager, \"villager\"));\n        this.addLayer(new HeldItemLayer<>(this));\n    }\n\n    @Override\n    public ResourceLocation getTextureLocation(VillagerEntity villagerEntity) {\n        return texture;\n    }\n\n    /**\n     * Copied from VillagerRenderer\n     */\n<｜fim▁hole｜>        float s = 0.9375F;\n        if (entity.isBaby()) {\n            s = (float) ((double) s * 0.5D);\n            this.shadowRadius = 0.25F;\n        } else {\n            this.shadowRadius = 0.5F;\n        }\n\n        matrixStack.scale(s, s, s);\n    }\n}<｜fim▁end｜>",
    "response": "    @Override\n    protected void scale(VillagerEntity entity, MatrixStack matrixStack, float partialTickTime) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package info.jbcs.minecraft.vending.network.server;\n\nimport info.jbcs.minecraft.vending.Utils;\nimport info.jbcs.minecraft.vending.init.VendingItems;\nimport info.jbcs.minecraft.vending.network.AbstractMessage;\nimport info.jbcs.minecraft.vending.tileentity.TileEntityVendingMachine;\nimport net.minecraft.entity.player.EntityPlayer;\nimport net.minecraft.network.PacketBuffer;\nimport net.minecraft.tileentity.TileEntity;\nimport net.minecraft.util.math.BlockPos;\nimport net.minecraftforge.fml.common.network.ByteBufUtils;\nimport net.minecraftforge.fml.relauncher.Side;\n\nimport java.io.IOException;\n\npublic class MessageWrench extends AbstractMessage.AbstractServerMessage<MessageWrench> {\n    private int x, y, z;\n    private boolean infinite;\n    private String ownerName;\n\n    @SuppressWarnings(\"unused\")\n    public MessageWrench() {\n    }\n\n    public MessageWrench(TileEntity tileEntityVendingMachine, boolean infinite, String ownerName) {\n        TileEntityVendingMachine entity = (TileEntityVendingMachine) tileEntityVendingMachine;\n        BlockPos blockPos = entity.getPos();\n        x = blockPos.getX();\n        y = blockPos.getY();\n        z = blockPos.getZ();\n        this.infinite = infinite;\n        this.ownerName = ownerName;\n    }\n\n    @Override\n    protected void read(PacketBuffer buffer) throws IOException {\n        x = buffer.readInt();\n        y = buffer.readInt();\n<｜fim▁hole｜>        infinite = buffer.readBoolean();\n        ownerName = ByteBufUtils.readUTF8String(buffer);\n    }\n\n    @Override\n    protected void write(PacketBuffer buffer) throws IOException {\n        buffer.writeInt(x);\n        buffer.writeInt(y);\n        buffer.writeInt(z);\n        buffer.writeBoolean(infinite);\n        ByteBufUtils.writeUTF8String(buffer, ownerName);\n    }\n\n    @Override\n    public void process(EntityPlayer player, Side side) {\n        if (player.inventory.getCurrentItem().isEmpty() || player.inventory.getCurrentItem().getItem() != VendingItems.ITEM_WRENCH)\n            return;\n        TileEntity tileEntity = player.world.getTileEntity(new BlockPos(x, y, z));\n        if (!(tileEntity instanceof TileEntityVendingMachine))\n            return;\n        TileEntityVendingMachine entity = (TileEntityVendingMachine) tileEntity;\n        entity.setInfinite(infinite);\n        entity.setOwnerName(ownerName);\n        Utils.markBlockForUpdate(player.world, new BlockPos(x, y, z));\n    }\n}<｜fim▁end｜>",
    "response": "        z = buffer.readInt();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package nz.co.gregs.dbvolution.datatypes.spatial2D;\n\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.GeometryFactory;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport nz.co.gregs.dbvolution.DBDatabase;\nimport nz.co.gregs.dbvolution.datatypes.QueryableDatatype;\nimport com.vividsolutions.jts.geom.LineString;\nimport com.vividsolutions.jts.geom.Point;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport nz.co.gregs.dbvolution.exceptions.IncorrectGeometryReturnedForDatatype;\nimport nz.co.gregs.dbvolution.exceptions.ParsingSpatialValueException;\nimport nz.co.gregs.dbvolution.expressions.Line2DExpression;\nimport nz.co.gregs.dbvolution.expressions.MultiPoint2DExpression;\nimport nz.co.gregs.dbvolution.expressions.StringExpression;\nimport nz.co.gregs.dbvolution.results.Line2DResult;\nimport nz.co.gregs.dbvolution.results.MultiPoint2DResult;\n\npublic class DBLine2D extends QueryableDatatype implements Line2DResult {\n\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * Default constructor.\n     *\n     * Use this method to create the DBLine2D used in your DBRow subclass.\n     *\n     */\n    public DBLine2D() {\n    }\n\n    /**\n     * Create a DBLine2D with the value set to the {@link LineString} provided.\n     *\n     * <p>\n     * This is a convenient way to assign a constant value in an expression or\n     * DBRow subclass.\n     *\n     * @param lineString\n     */\n    public DBLine2D(LineString lineString) {\n        super(lineString);\n    }\n\n    /**\n     * Create a DBLine2D with the value set to the {@link MultiPoint2DResult multipoint value or expression} provided.\n     *\n     * <p>\n     * This is a convenient way to assign a constant value in an expression or\n     * DBRow subclass.\n     *\n     * @param multipoint either a {@link MultiPoint2DExpression} or a {@link DBMultiPoint2D}\n     */\n    public DBLine2D(MultiPoint2DResult multipoint) {\n        super(new MultiPoint2DExpression(multipoint).line2DResult());\n    }\n\n    /**\n     * Create a DBLine2D using the expression supplied.\n     *\n     * <p>\n     * Useful for defining expression columns in DBRow subclass that acquire their\n     * value from a transformation of data at query time.\n     *\n     * @param columnExpression\n     */\n    public DBLine2D(nz.co.gregs.dbvolution.expressions.Line2DExpression columnExpression) {\n        super(columnExpression);\n    }\n\n    /**\n     * Set the value of this DBLine2D to the value provided.\n     *\n     * <p>\n     * Use this method to define the value of a field/column before inserting the\n     * DBRow subclass into the database.\n     *\n     * @param line\n     */\n    public void setValue(LineString line) {\n        setLiteralValue(line);\n    }\n\n    /**\n     * Set the value of this DBLine2D to the value provided.\n     *\n     * <p>\n     * The series of points will combined into a line for you.\n     *\n     * <p>\n     * Use this method to define the value of a field/column before inserting the\n     * DBRow subclass into the database.\n     *\n     * @param points\n     */\n    public void setValue(Point... points) {\n        GeometryFactory geometryFactory = new GeometryFactory();\n        List<Coordinate> coords = new ArrayList<Coordinate>();\n        for (Point point : points) {\n            coords.add(point.getCoordinate());\n        }\n<｜fim▁hole｜>    }\n\n    /**\n     * Set the value of this DBLine2D to the value provided.\n     *\n     * <p>\n     * The series of coordinates will combined into a line for you.\n     *\n     * <p>\n     * Use this method to define the value of a field/column before inserting the\n     * DBRow subclass into the database.\n     *\n     * @param coords\n     */\n    public void setValue(Coordinate... coords) {\n        GeometryFactory geometryFactory = new GeometryFactory();\n        LineString line = geometryFactory.createLineString(coords);\n        setLiteralValue(line);\n    }\n\n    @Override\n    public LineString getValue() {\n        if (!isDefined() || isNull()) {\n            return null;\n        } else {\n            return (LineString) getLiteralValue();\n        }\n    }\n\n    /**\n     * Transform the value of the DBLine2D into a\n     * {@link LineString JTS LineString}\n     *\n     * <p style=\"color: #F90;\">Support DBvolution at\n     * <a href=\"http://patreon.com/dbvolution\" target=new>Patreon</a></p>\n     *\n     * @return the value of this object if defined and not NULL, NULL otherwise.\n     */\n    public LineString jtsLineStringValue() {\n        return getValue();\n    }\n\n    @Override\n    public String getSQLDatatype() {\n        return \" LINESTRING \";\n    }\n\n    @Override\n    protected String formatValueForSQLStatement(DBDatabase db) {\n        LineString lineString = getValue();\n        if (lineString == null) {\n            return db.getDefinition().getNull();\n        } else {\n            String str = db.getDefinition().transformLineStringIntoDatabaseLine2DFormat(lineString);\n            return str;\n        }\n    }\n\n    @Override\n    protected Object getFromResultSet(DBDatabase database, ResultSet resultSet, String fullColumnName) throws SQLException, IncorrectGeometryReturnedForDatatype {\n\n        LineString lineString = null;\n        String string = resultSet.getString(fullColumnName);\n        if (string == null) {\n            return null;\n        } else {\n            try {\n                lineString = database.getDefinition().transformDatabaseLine2DValueToJTSLineString(string);\n            } catch (com.vividsolutions.jts.io.ParseException ex) {\n                Logger.getLogger(DBPoint2D.class.getName()).log(Level.SEVERE, null, ex);\n                throw new ParsingSpatialValueException(fullColumnName, string,ex);\n            }\n            return lineString;\n        }\n    }\n\n    @Override\n    public boolean isAggregator() {\n        return false;\n    }\n\n    @Override\n    public boolean getIncludesNull() {\n        return false;\n    }\n\n    @Override\n    public StringExpression stringResult() {\n        return Line2DExpression.value(this).stringResult();\n    }\n\n}<｜fim▁end｜>",
    "response": "        LineString line = geometryFactory.createLineString(coords.toArray(new Coordinate[]{}));\n        setLiteralValue(line);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package lucee.runtime.search;\n\npublic class AddionalAttrs {\n\n    private static ThreadLocal addAttrs=new ThreadLocal();\n    private int contextBytes;\n    private String contextHighlightBegin;\n    private int contextPassages;\n    private String contextHighlightEnd;\n    private int startrow=1;\n    private int maxrows=-1;\n    private boolean hasRowHandling;\n\n    public AddionalAttrs(int contextBytes, int contextPassages,String contextHighlightBegin, String contextHighlightEnd) {\n        this.contextBytes=contextBytes;\n        this.contextPassages=contextPassages;\n        this.contextHighlightBegin=contextHighlightBegin;\n        this.contextHighlightEnd=contextHighlightEnd;\n    }\n<｜fim▁hole｜>        if(aa==null)aa=new AddionalAttrs(300,0,\"<b>\",\"</b>\");\n        return aa;\n    }\n    public static void setAddionalAttrs(AddionalAttrs aa){\n        addAttrs.set(aa);\n    }\n\n    public static void setAddionalAttrs(int contextBytes, int contextPassages, String contextHighlightBegin, String contextHighlightEnd) {\n        setAddionalAttrs(new AddionalAttrs(contextBytes,contextPassages,contextHighlightBegin,contextHighlightEnd));\n    }\n\n    public static void removeAddionalAttrs(){\n        addAttrs.set(null);\n    }\n\n    /**\n     * @return the contextBytes\n     */\n    public int getContextBytes() {\n        return contextBytes;\n    }\n\n    /**\n     * @return the contextHighlightBegin\n     */\n    public String getContextHighlightBegin() {\n        return contextHighlightBegin;\n    }\n\n    /**\n     * @return the contextPassages\n     */\n    public int getContextPassages() {\n        return contextPassages;\n    }\n\n    /**\n     * @return the contextHighlightEnd\n     */\n    public String getContextHighlightEnd() {\n        return contextHighlightEnd;\n    }\n\n    /**\n     * @return the startrow\n     */\n    public int getStartrow() {\n        return startrow;\n    }\n\n    /**\n     * @param startrow the startrow to set\n     */\n    public void setStartrow(int startrow) {\n        this.startrow = startrow;\n    }\n\n    /**\n     * @return the maxrows\n     */\n    public int getMaxrows() {\n        return maxrows;\n    }\n\n    /**\n     * @param maxrows the maxrows to set\n     */\n    public void setMaxrows(int maxrows) {\n        this.maxrows = maxrows;\n    }\n\n    public boolean hasRowHandling() {\n        return hasRowHandling;\n    }\n    public void setHasRowHandling(boolean hasRowHandling) {\n        this.hasRowHandling= hasRowHandling;\n    }\n}<｜fim▁end｜>",
    "response": "\n    public static AddionalAttrs getAddionlAttrs(){\n        AddionalAttrs aa = (AddionalAttrs) addAttrs.get();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.shardingsphere.encrypt.fixture;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.apache.commons.codec.digest.DigestUtils;\nimport org.apache.shardingsphere.encrypt.spi.context.EncryptContext;\nimport org.apache.shardingsphere.encrypt.spi.EncryptAlgorithm;\nimport org.apache.shardingsphere.infra.metadata.schema.ShardingSphereSchema;\nimport org.apache.shardingsphere.infra.rewrite.sql.token.generator.aware.SchemaMetaDataAware;\n\nimport java.util.Properties;\n\n@Getter\n@Setter\npublic final class CustomizedEncryptAlgorithm implements EncryptAlgorithm<Integer, Integer>, SchemaMetaDataAware {\n\n    private static final String TEST_KEY = \"TEST\";\n\n    private Properties props = new Properties();\n\n    private byte[] key = DigestUtils.sha256(TEST_KEY);\n\n    private ShardingSphereSchema schema;\n\n    @Override\n    public void init() {\n    }\n\n    @Override\n    public Integer encrypt(final Integer plainValue, final EncryptContext encryptContext) {\n        byte[] bytes = toBytes(plainValue);\n        for (int index = 0; index < 32; index++) {\n            bytes[index % 4] = (byte) (key[index] ^ bytes[index % 4]);\n        }\n        return toInt(bytes);\n    }\n\n    @Override\n    public Integer decrypt(final Integer cipherValue, final EncryptContext encryptContext) {\n        byte[] bytes = toBytes(cipherValue);\n        for (int index = 0; index < 32; index++) {\n            bytes[index % 4] = (byte) (key[index] ^ bytes[index % 4]);\n        }\n        return toInt(bytes);\n    }\n\n    @Override\n    public String getType() {\n        return \"CUSTOMIZED\";\n    }\n\n    private int toInt(final byte[] bytes) {\n        int result = 0;\n        for (int index = 0; index < 4; index++) {\n            result <<= 8;\n            result |= bytes[index] & 0xff;\n        }\n        return result;\n<｜fim▁hole｜>        result[1] = (byte) (intValue >>> 16);\n        result[2] = (byte) (intValue >>> 8);\n        result[3] = (byte) intValue;\n        return result;\n    }\n\n    @Override\n    public void setSchema(final ShardingSphereSchema schema) {\n        this.schema = schema;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    private byte[] toBytes(final int intValue) {\n        byte[] result = new byte[4];\n        result[0] = (byte) (intValue >>> 24);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.bc.jexp.impl;\n\nimport com.bc.jexp.EvalEnv;\nimport com.bc.jexp.Symbol;\nimport com.bc.jexp.Term;\n\npublic abstract class AbstractSymbol implements Symbol {\n\n    private final String name;\n    private final int retType;\n\n    protected AbstractSymbol(final String name, final int retType) {\n        this.name = name.intern();\n        this.retType = retType;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getRetType() {\n        return retType;\n    }\n\n    public abstract static class B extends AbstractSymbol {\n\n        protected B(final String name) {\n            super(name, Term.TYPE_B);\n        }\n<｜fim▁hole｜>        }\n\n        public double evalD(final EvalEnv env) {\n            return Term.toD(evalB(env));\n        }\n\n        public String evalS(final EvalEnv env) {\n            return Term.toS(evalB(env));\n        }\n    }\n\n    public abstract static class I extends AbstractSymbol {\n\n        protected I(final String name) {\n            super(name, Term.TYPE_I);\n        }\n\n        public boolean evalB(final EvalEnv env) {\n            return Term.toB(evalI(env));\n        }\n\n        public double evalD(final EvalEnv env) {\n            return evalI(env);\n        }\n\n        public String evalS(final EvalEnv env) {\n            return Term.toS(evalI(env));\n        }\n    }\n\n    public abstract static class D extends AbstractSymbol {\n\n        protected D(final String name) {\n            super(name, Term.TYPE_D);\n        }\n\n        public boolean evalB(final EvalEnv env) {\n            return Term.toB(evalD(env));\n        }\n\n        public int evalI(final EvalEnv env) {\n            return Term.toI(evalD(env));\n        }\n\n        public String evalS(final EvalEnv env) {\n            return Term.toS(evalD(env));\n        }\n    }\n}<｜fim▁end｜>",
    "response": "\n        public int evalI(final EvalEnv env) {\n            return Term.toI(evalB(env));\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.n52.sos.request;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.n52.sos.ogc.ows.OwsExceptionReport;\nimport org.n52.sos.ogc.sos.Sos2Constants;\nimport org.n52.sos.ogc.sos.SosProcedureDescription;\nimport org.n52.sos.response.UpdateSensorResponse;\nimport org.n52.sos.util.CollectionHelper;\nimport org.n52.sos.util.StringHelper;\n\npublic class UpdateSensorRequest extends AbstractServiceRequest<UpdateSensorResponse> {\n\n    private String procedureIdentifier;\n\n    private String procedureDescriptionFormat;\n\n    /** SOS SensorML description */\n    private List<SosProcedureDescription> procedureDescriptions;\n\n    /**\n     * default constructor\n     */\n    public UpdateSensorRequest() {\n        super();\n    }\n\n    @Override\n    public String getOperationName() {\n        return Sos2Constants.Operations.UpdateSensorDescription.name();\n    }\n\n    /**\n     * @return the procedureIdentifier\n     */\n    public String getProcedureIdentifier() {\n        return procedureIdentifier;\n    }\n\n    /**\n     * @param procedureIdentifier\n     *            the procedureIdentifier to set\n     */\n    public void setProcedureIdentifier(String procedureIdentifier) {\n        this.procedureIdentifier = procedureIdentifier;\n    }\n\n    public boolean isSetProcedureIdentifier() {\n        return StringHelper.isNotEmpty(getProcedureIdentifier());\n    }\n\n    public String getProcedureDescriptionFormat() {\n        return procedureDescriptionFormat;\n    }\n\n    public void setProcedureDescriptionFormat(String procedureDescriptionFormat) {\n        this.procedureDescriptionFormat = procedureDescriptionFormat;\n    }\n\n    public boolean isSetProcedureDescriptionFormat() {\n        return StringHelper.isNotEmpty(getProcedureDescriptionFormat());\n    }\n\n    public List<SosProcedureDescription> getProcedureDescriptions() {\n        return procedureDescriptions;\n    }\n\n    public void setProcedureDescriptions(List<SosProcedureDescription> procedureDescriptions) {\n        this.procedureDescriptions = procedureDescriptions;\n    }\n\n    public void addProcedureDescriptionString(SosProcedureDescription procedureDescription) {\n        if (procedureDescriptions == null) {\n            procedureDescriptions = new ArrayList<SosProcedureDescription>();\n        }\n        procedureDescriptions.add(procedureDescription);\n    }\n\n    public boolean isSetProcedureDescriptions() {\n        return CollectionHelper.isNotEmpty(getProcedureDescriptions());\n    }\n<｜fim▁hole｜>    }\n}<｜fim▁end｜>",
    "response": "\n    @Override\n    public UpdateSensorResponse getResponse() throws OwsExceptionReport {\n        return (UpdateSensorResponse) new UpdateSensorResponse().set(this);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.facebook.presto.cassandra;\n\nimport com.facebook.presto.spi.ErrorCode;\nimport com.facebook.presto.spi.ErrorCodeSupplier;\nimport com.facebook.presto.spi.ErrorType;\n\nimport static com.facebook.presto.spi.ErrorType.EXTERNAL;\n\npublic enum CassandraErrorCode\n        implements ErrorCodeSupplier\n{\n<｜fim▁hole｜>    CASSANDRA_VERSION_ERROR(1, EXTERNAL),\n    CASSANDRA_SSL_INITIALIZATION_FAILURE(2, EXTERNAL);\n\n    private final ErrorCode errorCode;\n\n    CassandraErrorCode(int code, ErrorType type)\n    {\n        errorCode = new ErrorCode(code + 0x0104_0000, name(), type);\n    }\n\n    @Override\n    public ErrorCode toErrorCode()\n    {\n        return errorCode;\n    }\n}<｜fim▁end｜>",
    "response": "    CASSANDRA_METADATA_ERROR(0, EXTERNAL),\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package generics.wildcard;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class WildCardTest {\n    public static void main(String[] args) {\n        List<Integer> lst = new ArrayList<Integer>();\n        lst.add(3);\n<｜fim▁hole｜>\n        m1(l, 34);\n\n    }\n\n    // Dependendo da declaração do List recebido, irá permitir a adição do item\n    // na lista\n    public static <T extends Object> void m1(List<T> l, T item) {\n        l.add(item);\n        for(Object i : l)\n            System.out.println(i);\n    }\n}<｜fim▁end｜>",
    "response": "        lst.add(32);\n        lst.add(-12);\n\n        List<? super Integer> l = new ArrayList<Integer>(lst);\n        l.add(3);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package eu.dzim.shared.model.config;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class Attributes {\n\n    private List<KeyValue> entries;\n\n    public Attributes() {\n        // sonar\n    }\n\n    public List<KeyValue> getEntries() {\n        if (entries == null) {\n            entries = new ArrayList<>();\n        }\n        return entries;\n    }\n\n    @JsonIgnore\n    public <T> KeyValue addEntry(String key, T value) {\n        final Class<?> clazz = value.getClass();\n        final String stringValue;\n        final KeyValueType type;\n        if (Boolean.class.isAssignableFrom(clazz)) {\n            stringValue = ((Boolean) value).toString();\n            type = KeyValueType.BOOLEAN;\n        } else if (Short.class.isAssignableFrom(clazz) || Integer.class.isAssignableFrom(clazz) || Long.class.isAssignableFrom(clazz)) {\n            stringValue = \"\" + ((Number) value).longValue();\n            type = KeyValueType.LONG;\n        } else if (Float.class.isAssignableFrom(clazz) || Double.class.isAssignableFrom(clazz)) {\n            stringValue = \"\" + ((Number) value).doubleValue();\n            type = KeyValueType.DOUBLE;\n        } else if (String.class.isAssignableFrom(clazz)) {\n            stringValue = (String) value;\n            type = KeyValueType.STRING;\n        } else {\n            stringValue = value.toString();\n            type = KeyValueType.STRING;\n        }\n        Optional<KeyValue> oldEntry = findKeyValue(key);\n        if (oldEntry.isPresent()) {\n            KeyValue kvOld = oldEntry.get();\n            kvOld.setValue(stringValue);\n            kvOld.setType(type);\n            return kvOld;\n        } else {\n            KeyValue kv = new KeyValue();\n            kv.setKey(key);\n            kv.setValue(stringValue);\n            kv.setType(type);\n            getEntries().add(kv);\n            return kv;\n        }\n    }\n\n    @JsonIgnore\n    public <T> Optional<T> findValue(String key) {\n        for (KeyValue kv : getEntries()) {\n            if (!kv.getKey().equalsIgnoreCase(key))\n                continue;\n            return Optional.of(kv.getGenericValue());\n        }\n        return Optional.empty();\n<｜fim▁hole｜>    public Optional<KeyValue> findKeyValue(String key) {\n        for (KeyValue kv : getEntries()) {\n            if (!kv.getKey().equalsIgnoreCase(key))\n                continue;\n            return Optional.of(kv);\n        }\n        return Optional.empty();\n    }\n\n    @JsonIgnore\n    public Optional<KeyValue> removeKeyValue(String key) {\n        Optional<KeyValue> kv = findKeyValue(key);\n        if (kv.isPresent()) {\n            getEntries().remove(kv.get());\n        }\n        return kv;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    @JsonIgnore\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.mgsx.game.core.ui.widgets;\n\nimport com.badlogic.gdx.scenes.scene2d.Actor;\nimport com.badlogic.gdx.scenes.scene2d.ui.Skin;\nimport com.badlogic.gdx.scenes.scene2d.ui.TextButton;\nimport com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;\n\n<｜fim▁hole｜>{\n\n    public ToggleButton(final String textOn, final String textOff, final boolean checked, Skin skin) {\n        super(checked ? textOn : textOff, skin, \"toggle\");\n        setChecked(checked);\n        addListener(new ChangeListener() {\n            @Override\n            public void changed(ChangeEvent event, Actor actor) {\n                setText(isChecked() ? textOn : textOff);\n            }\n        });\n    }\n\n}<｜fim▁end｜>",
    "response": "public class ToggleButton extends TextButton\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package adapter;\n\npublic class Client {\n\n    public static void main(String[] args) {\n        Vehicle car = new Car();\n\n<｜fim▁hole｜>        playWithVehicle(car);\n\n        playWithVehicle(bicycle);\n    }\n\n    private static void playWithVehicle(Vehicle vehicle) {\n\n        vehicle.accelerate();\n        vehicle.pushBreak();\n        vehicle.soundHorn();\n        System.out.println(\"\\n\");\n    }\n}<｜fim▁end｜>",
    "response": "        Vehicle bicycle = new BicycleAdapter(new Bicycle());\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package edu.gemini.spModel.gemini.plan.test;\n\nimport edu.gemini.spModel.core.SPBadIDException;\nimport edu.gemini.pot.sp.SPObservationID;\nimport edu.gemini.spModel.gemini.plan.NightlyRecord;\nimport edu.gemini.spModel.gemini.plan.WeatherInfo;\nimport edu.gemini.spModel.pio.ParamSet;\nimport edu.gemini.spModel.pio.xml.PioXmlFactory;\nimport junit.framework.Test;\nimport junit.framework.TestCase;\nimport junit.framework.TestSuite;\n\nimport java.util.Iterator;\nimport java.util.List;\n\npublic final class TestDefaultObservingLog extends TestCase {\n    private static final String[] _testObservations = new String[]{\"GN2004A-Q-1-1\", \"GN2004A-Q-2-1\",\n                                                                   \"GN2004A-Q-3-1\", \"GN2004A-Q-4-1\"};\n\n    private static final WeatherInfo[] _testWeatherInfo = {\n        new WeatherInfo(0, \"12 deg\", \"13 kph\", \"WNW\", \"30.06 in\", \"77%\", \"?\", \"15%\", \"some comment 1\"),\n        new WeatherInfo(1, \"11 deg\", \"12 kph\", \"WNW\", \"35.06 in\", \"73%\", \"?\", \"16%\", \"some other comment 2\"),\n        new WeatherInfo(2, \"10 deg\", \"10 kph\", \"WNW\", \"30.06 in\", \"70%\", \"?\", \"17%\", \"other comment 3\"),\n        new WeatherInfo(3, \"11 deg\", \"11 kph\", \"WNW\", \"31.06 in\", \"69%\", \"?\", \"18%\", \"other comment 4\"),\n    };\n\n    /**\n     * Test the initial state of the object\n     */\n    public void testInitState() {\n\n        NightlyRecord obsLog = new NightlyRecord();\n\n        List<SPObservationID> l = obsLog.getObservationList();\n        assertNotNull(l);\n        assertTrue(l.size() == 0);\n\n        List<WeatherInfo> w = obsLog.getWeatherLog();\n        assertNotNull(w);\n        assertTrue(w.size() == 0);\n    }\n\n    // private method to convert a <code>String</code> to an <code>SPObservationID</code> object.\n    private SPObservationID _getObsID(String observationID) {\n        assertNotNull(observationID);\n\n        SPObservationID id = null;\n        try {\n            id = new SPObservationID(observationID);\n        } catch (SPBadIDException ex) {\n            fail(\"_getObsID failed to cerate SPObservationID\");\n        }\n        assertNotNull(id);\n        return id;\n    }\n\n    // private method to populate the object with a set of test observations\n    private void _fillObservations(NightlyRecord obsLog) {\n        for (String testObservation : _testObservations) {\n            obsLog.addObservation(_getObsID(testObservation));\n        }\n    }\n\n    // private method to populate the object with a test weather log\n    private void _fillWeatherLog(NightlyRecord obsLog) {\n        for (WeatherInfo a_testWeatherInfo : _testWeatherInfo) {\n            obsLog.addWeatherInfo(a_testWeatherInfo);\n        }\n    }\n\n    // create an object to test with\n    private NightlyRecord _createDefaultObservingLog() {\n        NightlyRecord obsLog = new NightlyRecord();\n        _fillObservations(obsLog);\n        _fillWeatherLog(obsLog);\n        obsLog.setDayObservers(\"D1,D2,D3\");\n        obsLog.setNightObservers(\"N1, N2\");\n        obsLog.setSSA(\"S1, S2\");\n        obsLog.setDataProc(\"DP1\");\n        obsLog.setFilePrefix(\"/tmp/files\");\n        obsLog.setCCSoftwareVersion(\"1.0\");\n        obsLog.setDCSoftwareVersion(\"2.0\");\n        obsLog.setSoftwareVersionNote(\"some note\");\n        obsLog.setNightComment(\"some comment\");\n        return obsLog;\n    }\n\n    /**\n     * Test the addObservations method\n     */\n    public void testAddObservations() {\n        NightlyRecord obsLog = _createDefaultObservingLog();\n        assertEquals(_testObservations.length, obsLog.getObservationListSize());\n    }\n\n<｜fim▁hole｜>    }\n\n    /**\n     * Test the remove observations method\n     */\n    public void testRemoveObservations() {\n        NightlyRecord obsLog = _createDefaultObservingLog();\n\n        assertEquals(_testObservations.length, obsLog.getObservationListSize());\n\n        // remove 1 - second in test list\n        boolean success = false;\n        try {\n            success = obsLog.removeObservation(new SPObservationID(_testObservations[1]));\n        } catch (SPBadIDException ex) {\n            fail(\"_failed to remove an observations ID\");\n        }\n        assertTrue(success);\n\n        assertEquals(_testObservations.length - 1, obsLog.getObservationListSize());\n        List<SPObservationID> l = obsLog.getObservationList();\n        assertEquals(\"0\", _testObservations[0], l.get(0).stringValue());\n        assertEquals(\"1\", _testObservations[2], l.get(1).stringValue());\n        assertEquals(\"2\", _testObservations[3], l.get(2).stringValue());\n\n        // Remove 2 - third in test list\n        try {\n            success = obsLog.removeObservation(new SPObservationID(_testObservations[2]));\n        } catch (SPBadIDException ex) {\n            fail(\"_failed to remove an observations ID\");\n        }\n        assertTrue(success);\n\n        assertEquals(_testObservations.length - 2, obsLog.getObservationListSize());\n        l = obsLog.getObservationList();\n        assertEquals(_testObservations.length - 2, l.size());\n\n        assertEquals(\"3\", _testObservations[0], l.get(0).stringValue());\n        assertEquals(\"4\", _testObservations[3], l.get(1).stringValue());\n\n    }\n\n    /**\n     * Test the removing items from the  weather log\n     */\n    public void testRemoveFromWeatherLog() {\n        NightlyRecord obsLog = _createDefaultObservingLog();\n        assertEquals(_testWeatherInfo.length, obsLog.getWeatherLogSize());\n\n        // remove 1 - second in test list\n        boolean success = obsLog.removeWeatherlog(_testWeatherInfo[1]);\n        assertTrue(success);\n\n        assertEquals(_testWeatherInfo.length - 1, obsLog.getWeatherLog().size());\n        List<WeatherInfo> l = obsLog.getWeatherLog();\n        assertEquals(\"0\", _testWeatherInfo[0], l.get(0));\n        assertEquals(\"1\", _testWeatherInfo[2], l.get(1));\n        assertEquals(\"2\", _testWeatherInfo[3], l.get(2));\n    }\n\n    /**\n     * Test the getParamSet method\n     */\n    public void testParamSetOut() {\n        NightlyRecord obsLog = _createDefaultObservingLog();\n\n        PioXmlFactory fact = new PioXmlFactory();\n\n        ParamSet pset = obsLog.getParamSet(fact);\n        assertNotNull(pset);\n    }\n\n    /**\n     * Test the setParamSet method\n     */\n    public void testParamSetIn() {\n        NightlyRecord obsLog = _createDefaultObservingLog();\n\n        PioXmlFactory fact = new PioXmlFactory();\n        ParamSet pset = obsLog.getParamSet(fact);\n        assertNotNull(pset);\n\n        NightlyRecord obsLog2 = new NightlyRecord();\n        obsLog2.setParamSet(pset);\n\n        // Verify that it's setup correctly\n        assertEquals(_testObservations.length, obsLog2.getObservationListSize());\n        List<SPObservationID> l = obsLog2.getObservationList();\n        Iterator<SPObservationID> it = l.iterator();\n        int i = 0;\n        while (it.hasNext()) {\n            SPObservationID obsID = it.next();\n            assertEquals(_testObservations[i++], obsID.toString());\n        }\n\n        i = 0;\n        for (WeatherInfo weatherInfo : obsLog2.getWeatherLog()) {\n            assertEquals(_testWeatherInfo[i++], weatherInfo);\n        }\n\n        assertEquals(obsLog.getDayObservers(), obsLog2.getDayObservers());\n        assertEquals(obsLog.getNightObservers(), obsLog2.getNightObservers());\n        assertEquals(obsLog.getSSA(), obsLog2.getSSA());\n        assertEquals(obsLog.getDataProc(), obsLog2.getDataProc());\n        assertEquals(obsLog.getFilePrefix(), obsLog2.getFilePrefix());\n        assertEquals(obsLog.getCCSoftwareVersion(), obsLog2.getCCSoftwareVersion());\n        assertEquals(obsLog.getDCSoftwareVersion(), obsLog2.getDCSoftwareVersion());\n        assertEquals(obsLog.getSoftwareVersionNote(), obsLog2.getSoftwareVersionNote());\n        assertEquals(obsLog.getNightComment(), obsLog2.getNightComment());\n    }\n\n    public static Test suite() {\n        return new TestSuite(TestDefaultObservingLog.class);\n    }\n\n}<｜fim▁end｜>",
    "response": "    /**\n     * Test adding items to the weather log\n     */\n    public void testAddToWeatherLog() {\n        NightlyRecord obsLog = _createDefaultObservingLog();\n        assertEquals(_testWeatherInfo.length, obsLog.getWeatherLogSize());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>import org.apache.uima.collection.StatusCallbackListener;\nimport org.apache.uima.collection.metadata.CpeDescription;\nimport org.apache.uima.resource.ResourceInitializationException;\nimport org.apache.uima.util.InvalidXMLException;\nimport org.apache.uima.util.XMLInputSource;\n\nimport java.io.IOException;\nimport java.util.List;\n\npublic class CmdLineCpeRunner {\n\n   public static void main( String[] args ) {\n      if ( args.length == 0 || args[0].isEmpty() ) {\n         System.err.println( \"Please provide the path to a cpe.xml in the first argument.\\n\"\n                                   + \"If you do not have a cpe.xml you can create one with the cpe gui.\" );\n         System.exit( 1 );\n      }\n      XMLInputSource xmlInputSource = null;\n      try {\n         xmlInputSource = new XMLInputSource( args[0] );\n      } catch ( IOException ioE ) {\n         System.err.println( \"Couldn't open cpe xml \" + args[0] );\n         System.err.println( \"  \" + ioE.getLocalizedMessage() );\n         System.exit( 1 );\n      }\n      CpeDescription cpeDescription = null;\n      try {\n         cpeDescription = UIMAFramework.getXMLParser().parseCpeDescription( xmlInputSource );\n      } catch ( InvalidXMLException ixmlE ) {\n         System.err.println( \"Couldn't parse cpe xml \" + args[0] );\n         System.err.println( \"  \" + ixmlE.getLocalizedMessage() );\n         System.exit( 1 );\n      }\n      CollectionProcessingEngine collectionProcessingEngine = null;\n      try {\n         collectionProcessingEngine = UIMAFramework.produceCollectionProcessingEngine( cpeDescription );\n      } catch ( ResourceInitializationException riE ) {\n         System.err.println( \"Couldn't initialize processing engine.\" );\n         System.err.println( \"  \" + riE.getLocalizedMessage() );\n         System.exit( 1 );\n      }\n      collectionProcessingEngine.addStatusCallbackListener( new MyStatusCallbackListener() );\n\n      try {\n         collectionProcessingEngine.process();\n      } catch ( ResourceInitializationException riE ) {\n         System.err.println( \"Couldn't Run processing engine.\" );\n         System.err.println( \"  \" + riE.getLocalizedMessage() );\n         System.exit( 1 );\n      }\n   }\n\n   /**\n    * Callback Listener. Receives event notifications from CPE.\n    */\n   static private class MyStatusCallbackListener implements StatusCallbackListener {\n      /**\n       * Start time of CPE initialization\n       */\n      private long mStartTime = System.currentTimeMillis();\n\n      /**\n       * Start time of the processing\n       */\n      private long mInitCompleteTime;\n\n      int entityCount = 0;\n\n      long size = 0;\n\n      public void initializationComplete() {\n         System.out.println(\"CPM Initialization Complete\");\n         mInitCompleteTime = System.currentTimeMillis();\n      }\n\n      public void batchProcessComplete() {\n         System.out.print(\"Completed \" + entityCount + \" documents\");\n         if (size > 0) {\n            System.out.print(\"; \" + size + \" characters\");\n         }\n         System.out.println();\n         long elapsedTime = System.currentTimeMillis() - mStartTime;\n         System.out.println(\"Time Elapsed : \" + elapsedTime + \" ms \");\n      }\n\n      public void collectionProcessComplete() {\n         long time = System.currentTimeMillis();\n         System.out.print(\"Completed \" + entityCount + \" documents\");\n         if (size > 0) {\n            System.out.print(\"; \" + size + \" characters\");\n         }\n         System.out.println();\n         long initTime = mInitCompleteTime - mStartTime;\n         long processingTime = time - mInitCompleteTime;\n         long elapsedTime = initTime + processingTime;\n         System.out.println(\"Total Time Elapsed: \" + elapsedTime + \" ms \");\n         System.out.println(\"Initialization Time: \" + initTime + \" ms\");\n         System.out.println(\"Processing Time: \" + processingTime + \" ms\");\n\n         System.out.println(\"\\n\\n ------------------ PERFORMANCE REPORT ------------------\\n\");\n\n         // stop the JVM. Otherwise main thread will still be blocked waiting for\n         // user to press Enter.\n\n      }\n\n      public void paused() {\n         System.out.println(\"Paused\");\n      }\n\n      public void resumed() {\n         System.out.println(\"Resumed\");\n      }\n\n      public void aborted() {\n         System.out.println(\"Aborted\");\n         // stop the JVM. Otherwise main thread will still be blocked waiting for\n         // user to press Enter.\n         System.exit(1);\n      }\n\n      public void entityProcessComplete(CAS aCas, EntityProcessStatus aStatus) {\n         if (aStatus.isException()) {\n            List<Exception> exceptions = aStatus.getExceptions();\n            for (Exception exception : exceptions ) {\n               exception.printStackTrace();\n            }\n            return;\n         }\n         entityCount++;\n         String docText = aCas.getDocumentText();\n         if (docText != null) {\n            size += docText.length();\n         }\n      }\n   }\n\n}<｜fim▁end｜>",
    "response": "package org.apache.ctakes.core.cpe;\n\nimport org.apache.uima.UIMAFramework;\nimport org.apache.uima.cas.CAS;\nimport org.apache.uima.collection.CollectionProcessingEngine;\nimport org.apache.uima.collection.EntityProcessStatus;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.ctakes.typesystem.type.textsem;\n\nimport org.apache.uima.jcas.JCas;\nimport org.apache.uima.jcas.JCasRegistry;\nimport org.apache.uima.cas.impl.CASImpl;\nimport org.apache.uima.cas.impl.FSGenerator;\nimport org.apache.uima.cas.FeatureStructure;\nimport org.apache.uima.cas.impl.TypeImpl;\nimport org.apache.uima.cas.Type;\n\npublic class PersonTitleAnnotation_Type extends IdentifiedAnnotation_Type {\n  /** @generated \n   * @return the generator for this type\n   */\n  @Override\n  protected FSGenerator getFSGenerator() {return fsGenerator;}\n  /** @generated */\n  private final FSGenerator fsGenerator = \n    new FSGenerator() {\n      public FeatureStructure createFS(int addr, CASImpl cas) {\n             if (PersonTitleAnnotation_Type.this.useExistingInstance) {\n               // Return eq fs instance if already created\n             FeatureStructure fs = PersonTitleAnnotation_Type.this.jcas.getJfsFromCaddr(addr);\n             if (null == fs) {\n               fs = new PersonTitleAnnotation(addr, PersonTitleAnnotation_Type.this);\n               PersonTitleAnnotation_Type.this.jcas.putJfsFromCaddr(addr, fs);\n<｜fim▁hole｜>             }\n             return fs;\n        } else return new PersonTitleAnnotation(addr, PersonTitleAnnotation_Type.this);\n      }\n    };\n  /** @generated */\n  @SuppressWarnings (\"hiding\")\n  public final static int typeIndexID = PersonTitleAnnotation.typeIndexID;\n  /** @generated \n     @modifiable */\n  @SuppressWarnings (\"hiding\")\n  public final static boolean featOkTst = JCasRegistry.getFeatOkTst(\"org.apache.ctakes.typesystem.type.textsem.PersonTitleAnnotation\");\n\n  /** initialize variables to correspond with Cas Type and Features\n     * @generated\n     * @param jcas JCas\n     * @param casType Type \n     */\n  public PersonTitleAnnotation_Type(JCas jcas, Type casType) {\n    super(jcas, casType);\n    casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType, getFSGenerator());\n\n  }\n}<｜fim▁end｜>",
    "response": "               return fs;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.htm.events;\n\n<｜fim▁hole｜>\npublic abstract class WorkItemEvent implements IEvent {\n\n    private WorkItemView workItemView = null;\n\n    public WorkItemEvent(WorkItemView workItem) {\n        setWorkItemView(workItem);\n    }\n\n    public WorkItemView getWorkItemView() {\n        return workItemView;\n    }\n\n    public void setWorkItemView(WorkItemView workItemView) {\n        this.workItemView = workItemView;\n    }\n\n}<｜fim▁end｜>",
    "response": "import com.htm.query.views.WorkItemView;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package de.muspellheim.datenverteiler.datenkatalog.util;\n\nimport de.bsvrz.dav.daf.main.config.DataModel;\nimport de.bsvrz.dav.daf.main.config.SystemObject;\nimport de.bsvrz.dav.daf.main.config.SystemObjectType;\n\nimport java.util.List;\nimport java.util.Objects;\n\npublic class SingleObjektFabrik {\n\n    private SystemObjectType objektTyp;\n    private String objektPid;\n    private String aufrufparameter;\n    private DataModel model;\n\n    /**\n     * Initialisiert die Fabrik mit dem Datenmodell.\n     *\n     * @param model das Datenmodell.\n     */\n    public SingleObjektFabrik(final DataModel model) {\n        this.model = model;\n    }\n\n    /**\n     * Bestimmt ein Objekt zum angegebenen Typ. Entspricht {@code bestimmeObjekt(objekttypPid, \"\"; aufrufparameter}.\n     *\n     * @param objekttypPid    die PID des Typs des gesuchten Objekts.\n     * @param aufrufparameter der Aufrufparameter mit dem die PID des gesuchten Objekts der Applikation übergeben wird.\n     *                        Der Aufrufparameter wird für eine mögliche Fehlermeldung benötigt.\n     * @return das gefundene Objekt, nie {@code null}.\n     * @throws IllegalArgumentException der Objekttyp nicht existiert, kein Objekt zur Objekt-PID existiert oder Objekt\n     *                                  und Objekttyp nicht zueinander passen.\n     * @throws IllegalStateException    wenn keine ObjektPID angegeben ist und kein oder mehr als ein Objekt zum Typ\n     *                                  existiert.\n     */\n    public SystemObject bestimmeObjekt(final String objekttypPid,\n                                       @SuppressWarnings(\"hiding\") final String aufrufparameter) {\n        return bestimmeObjekt(objekttypPid, \"\", aufrufparameter);\n    }\n\n    /**\n     * Bestimmt ein Objekt zum angegebenen Typ.\n     *\n     * @param objekttypPid    die PID des Typs des gesuchten Objekts.\n     * @param objektPid       die PID des gesuchten Objekts oder ein leerer String, wenn es anhand des Typs gesucht\n     *                        werden soll.\n     * @param aufrufparameter der Aufrufparameter mit dem die PID des gesuchten Objekts der Applikation übergeben wird.\n     *                        Der Aufrufparameter wird für eine mögliche Fehlermeldung benötigt.\n     * @return das gefundene Objekt, nie {@code null}.\n     * @throws IllegalArgumentException der Objekttyp nicht existiert, kein Objekt zur Objekt-PID existiert oder Objekt\n     *                                  und Objekttyp nicht zueinander passen.\n     * @throws IllegalStateException    wenn keine ObjektPID angegeben ist und kein oder mehr als ein Objekt zum Typ\n     *                                  existiert.\n     */\n    public SystemObject bestimmeObjekt(final String objekttypPid, @SuppressWarnings(\"hiding\") final String objektPid,\n                                       @SuppressWarnings(\"hiding\") final String aufrufparameter) {\n        setObjektTyp(objekttypPid);\n        setObjektPid(objektPid);\n        setAufrufparameter(aufrufparameter);\n\n        SystemObject result;\n        if (objektPid.isEmpty()) {\n            final List<SystemObject> objekte = objektTyp.getElements();\n            validiereGenauEinObjektGefunden(objekte);\n            result = objekte.get(0);\n        } else {\n            result = model.getObject(objektPid);\n        }\n        validiereObjekt(result);\n        return result;\n    }\n\n    private void setObjektTyp(final String objekttypPid) {\n        Objects.requireNonNull(objekttypPid, \"objekttypPid\");\n        objektTyp = model.getType(objekttypPid);\n        if (objektTyp == null)\n            throw new IllegalArgumentException(\n                    \"Der Typ mit der PID \" + objekttypPid + \" ist nicht in der Konfiguration versorgt.\");\n    }\n\n    private void setObjektPid(final String objektPid) {\n        Objects.requireNonNull(objektPid, \"objektPid\");\n        this.objektPid = objektPid;\n    }\n<｜fim▁hole｜>    private void validiereGenauEinObjektGefunden(final List<SystemObject> objekte) {\n        if (objekte.isEmpty())\n            throw new IllegalStateException(\"Es ist kein(e) \" + objektTyp + \" in der Konfiguration versorgt.\");\n        if (objekte.size() > 1)\n            throw new IllegalStateException(\"Es ist mehr als ein(e) \" + objektTyp\n                    + \" in der Konfiguration versorgt. Geben Sie das zu verwendete Objekt mit dem Arufrufparameter \"\n                    + aufrufparameter + \" an.\");\n    }\n\n    private void validiereObjekt(final SystemObject objekt) {\n        if (objekt == null)\n            throw new IllegalArgumentException(\"Es existiert kein(e) \" + objektTyp + \" zur PID \" + objektPid + \".\");\n        else if (!objekt.isOfType(objektTyp))\n            throw new IllegalArgumentException(\n                    \"Das Objekt mit der PID \" + objektPid + \" ist kein(e) \" + objektTyp + \".\");\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    private void setAufrufparameter(final String aufrufparameter) {\n        Objects.requireNonNull(aufrufparameter, \"aufrufparameter\");\n        this.aufrufparameter = aufrufparameter;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.n52.sos.binding.rest.resources.capabilities;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport net.opengis.sos.x20.CapabilitiesDocument;\nimport net.opengis.sos.x20.CapabilitiesType;\nimport net.opengis.sos.x20.ObservationOfferingDocument;\n<｜fim▁hole｜>import org.apache.xmlbeans.XmlCursor;\nimport org.apache.xmlbeans.XmlException;\nimport org.apache.xmlbeans.XmlObject;\nimport org.n52.sos.binding.rest.requests.RequestHandler;\nimport org.n52.sos.binding.rest.requests.RestRequest;\nimport org.n52.sos.binding.rest.requests.RestResponse;\nimport org.n52.sos.ogc.ows.OwsExceptionReport;\n\npublic class CapabilitiesRequestHandler extends RequestHandler {\n\n    @Override\n    public RestResponse handleRequest(RestRequest request) throws OwsExceptionReport, XmlException, IOException\n    {\n        if (request instanceof CapabilitiesRequest) {\n            List<String> offeringIdentifiers = null;\n            CapabilitiesType xb_sosCapabilities = null;\n\n            // 0 submit GetCapabilities DeleteObservationRequest\n            XmlObject xb_getCapabilitiesResponse = executeSosRequest(((CapabilitiesRequest) request).getGetCapabilitiesRequest());\n\n            // 1 get offerings\n            if (xb_getCapabilitiesResponse instanceof CapabilitiesDocument) {\n                CapabilitiesDocument xb_capaCapabilitiesDocument = (CapabilitiesDocument) xb_getCapabilitiesResponse;\n                xb_sosCapabilities = xb_capaCapabilitiesDocument.getCapabilities();\n\n                if(xb_sosCapabilities.isSetContents()) {\n\n                    // 1.1 save offering identifier\n                    Offering[] xb_offerings = xb_sosCapabilities.getContents().getContents().getOfferingArray();\n                    offeringIdentifiers = new ArrayList<String>(xb_offerings.length);\n                    for (Offering xb_offering : xb_offerings) {\n                        ObservationOfferingType xb_observationOffering = ObservationOfferingDocument.Factory.parse(xb_offering.newInputStream()).getObservationOffering();\n                        if (xb_observationOffering.isSetIdentifier()) {\n                            offeringIdentifiers.add(xb_observationOffering.getIdentifier());\n                        }\n                    }\n                    // 2 remove offerings from capabilities\n                    XmlCursor c = xb_sosCapabilities.newCursor();\n                    c.toLastChild();\n                    c.removeXml();\n                    c.dispose();\n                }\n            }\n\n            // 3 create result\n            return new CapabilitiesGetResponse(offeringIdentifiers,xb_sosCapabilities);\n\n        }\n        throw logRequestTypeNotSupportedByThisHandlerAndCreateException(request,this.getClass().getName());\n    }\n}<｜fim▁end｜>",
    "response": "import net.opengis.sos.x20.ObservationOfferingType;\nimport net.opengis.swes.x20.AbstractContentsType.Offering;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package global.namespace.neuron.di.guice.scala.sample;\n<｜fim▁hole｜>import global.namespace.neuron.di.java.Neuron;\n\nimport java.lang.annotation.*;\n\n@Neuron(cachingStrategy = CachingStrategy.THREAD_SAFE)\n@Inherited\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface ThreadSafeCachingNeuron {\n}<｜fim▁end｜>",
    "response": "\nimport global.namespace.neuron.di.java.CachingStrategy;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.ccthanking.business.sgenter.service.impl;\n\nimport net.sf.json.JSONArray;\nimport net.sf.json.JSONObject;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.stereotype.Service;\n\nimport com.ccthanking.business.sgenter.dao.SgECreditCommendRewardDao;\nimport com.ccthanking.business.sgenter.service.SgECreditCommendRewardService;\nimport com.ccthanking.business.sgenter.vo.SgECreditCommendRewardVO;\nimport com.ccthanking.common.BusinessUtil;\nimport com.ccthanking.framework.common.User;\nimport com.ccthanking.framework.handle.ActionContext;\nimport com.ccthanking.framework.service.impl.Base1ServiceImpl;\nimport com.copj.modules.utils.exception.DaoException;\nimport com.copj.modules.utils.exception.SystemException;\n\n@Service\npublic class SgECreditCommendRewardServiceImpl extends Base1ServiceImpl<SgECreditCommendRewardVO, String> implements SgECreditCommendRewardService {\n\n    private static Logger logger = LoggerFactory.getLogger(SgECreditCommendRewardServiceImpl.class);\n\n    // 业务类型\n\n    private SgECreditCommendRewardDao sgECreditCommendRewardDao;\n\n    // @Override\n    public String queryCondition(String json) throws Exception {\n\n        User user = ActionContext.getCurrentUserInThread();\n\n        String domresult = \"\";\n        try {\n\n            domresult = sgECreditCommendRewardDao.queryCondition(json, null, null);\n\n        }catch (DaoException e) {\n            logger.error(\"企业荣誉{}\", e.getMessage());\n            SystemException.handleMessageException(\"企业荣誉查询失败,请联系相关人员处理\");\n        } finally {\n        }\n        return domresult;\n\n    }\n\n    public String insert(String json) throws Exception {\n\n        User user = ActionContext.getCurrentUserInThread();\n\n        String resultVO = null;\n        SgECreditCommendRewardVO vo = new SgECreditCommendRewardVO();\n\n        try {\n            JSONArray list = vo.doInitJson(json);\n            vo.setValueFromJson((JSONObject) list.get(0));\n\n            BusinessUtil.setInsertCommonFields(vo, user);\n\n            // 插入\n<｜fim▁hole｜>            SystemException.handleMessageException(\"企业荣誉新增失败,请联系相关人员处理\");\n        } finally {\n        }\n        return resultVO;\n\n    }\n\n    public String update(String json) throws Exception {\n\n        User user = ActionContext.getCurrentUserInThread();\n\n        String resultVO = null;\n        SgECreditCommendRewardVO vo = new SgECreditCommendRewardVO();\n\n        try {\n            JSONArray list = vo.doInitJson(json);\n            vo.setValueFromJson((JSONObject) list.get(0));\n\n            BusinessUtil.setUpdateCommonFields(vo, user);\n\n            // 修改\n            sgECreditCommendRewardDao.update(vo);\n            resultVO = vo.getRowJson();\n\n        } catch (DaoException e) {\n            logger.error(\"企业荣誉{}\", e.getMessage());\n            SystemException.handleMessageException(\"企业荣誉修改失败,请联系相关人员处理\");\n        } finally {\n        }\n        return resultVO;\n\n    }\n\n    public String delete(String json) throws Exception {\n\n        User user = ActionContext.getCurrentUserInThread();\n\n        String resultVo = null;\n        SgECreditCommendRewardVO vo = new SgECreditCommendRewardVO();\n        try {\n            JSONArray list = vo.doInitJson(json);\n            JSONObject jsonObj = (JSONObject) list.get(0);\n\n            vo.setValueFromJson(jsonObj);\n\n            resultVo = vo.getRowJson();\n\n        } catch (DaoException e) {\n            logger.error(\"企业荣誉{}\", e.getMessage());\n            SystemException.handleMessageException(\"企业荣誉删除失败,请联系相关人员处理\");\n        } finally {\n        }\n        return resultVo;\n\n    }\n\n    @Autowired\n    @Qualifier(\"sgECreditCommendRewardDaoImpl\")\n    public void setSgECreditCommendRewardDao(SgECreditCommendRewardDao sgECreditCommendRewardDao) {\n        this.sgECreditCommendRewardDao = sgECreditCommendRewardDao;\n    }\n\n    public String queryJxList(String uid) throws Exception {\n        return sgECreditCommendRewardDao.queryJxList(uid);\n    }\n\n}<｜fim▁end｜>",
    "response": "            sgECreditCommendRewardDao.save(vo);\n            resultVO = vo.getRowJson();\n\n        } catch (DaoException e) {\n            logger.error(\"企业荣誉{}\", e.getMessage());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.ibm.ipg.game;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\n\nimport com.ibm.ipg.game.entity.Death;\nimport com.ibm.ipg.game.entity.Entity;\nimport com.ibm.ipg.game.entity.Entity.Direction;\nimport com.ibm.ipg.game.entity.Goal;\nimport com.ibm.ipg.game.entity.Player;\nimport com.ibm.ipg.game.entity.Subtractor;\n\npublic class Grid {\n\n    private static final int RESET_TRY_CAP = 50;\n    private Entity[][] grid;\n    private Player player;\n\n    public Grid(int width, int height) {\n        grid = new Entity[height][width];\n        player = new Player();\n        reset(player);\n    }\n\n    public void addEntity(Entity entity) {\n        reset(entity);\n    }\n\n    public int movePlayer(Direction direction) {\n        int x = player.getX();\n        int y = player.getY();\n\n        switch (direction) {\n        case LEFT:\n            if (x > 0) x--;         \n            break;\n\n        case UP:\n            if (y > 0) y--; \n            break;\n\n        case RIGHT:\n            if (x + 1 < grid[0].length) x++;\n            break;\n\n        case DOWN:\n            if (y + 1 < grid.length) y++;\n            break;\n\n        default:\n            break;\n        }\n\n<｜fim▁hole｜>                flag = Game.FLAG_MOVE_GOAL;\n            }\n            else if (stepedOn instanceof Death) {\n                flag = Game.FLAG_MOVE_DEATH;\n            }\n            else if (stepedOn instanceof Subtractor) {\n                flag = Game.FLAG_MOVE_SUBTRACTOR;\n            }\n\n            if (!(stepedOn instanceof Player)) {\n                resetAllButPlayer();\n            }\n        }\n\n        replaceEntity(player, x, y);\n        return flag;\n    }\n\n    private void resetAllButPlayer(){\n        List<Entity> replaced = new ArrayList<Entity>();\n        for (int i = 0; i < grid.length; i++) {\n            for (int j = 0; j < grid[i].length; j++) {\n                Entity entity = grid[i][j];\n                if (entity != null && !replaced.contains(entity)) {\n                    reset(entity);\n                    replaced.add(entity);\n\n                }\n            }\n        }\n    }\n\n    private void reset(Entity entity){\n        Random random = new Random();\n        int tries = 0;\n        int x, y;\n        do {\n            x = random.nextInt(grid[0].length);\n            y = random.nextInt(grid.length);\n            tries++;\n        } while (grid[y][x] != null && tries < RESET_TRY_CAP); // Max tries to prevent infinite loop\n        replaceEntity(entity, x, y);\n\n    }\n\n    private void replaceEntity(Entity entity, int x, int y){\n        if (entity != null)\n            grid[entity.getY()][entity.getX()] = null;\n\n        entity.setX(x).setY(y);\n        grid[y][x] = entity;\n    }\n}<｜fim▁end｜>",
    "response": "        Entity stepedOn = grid[y][x];\n        int flag = Game.FLAG_MOVE_DEFAULT;\n        if (stepedOn != null) {\n            if (stepedOn instanceof Goal) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package simple.impl;\n\nimport org.eclipse.emf.ecore.EClass;\nimport org.eclipse.emf.ecore.EObject;\nimport org.eclipse.emf.ecore.EPackage;\n\nimport org.eclipse.emf.ecore.impl.EFactoryImpl;\n\nimport org.eclipse.emf.ecore.plugin.EcorePlugin;\n\nimport simple.*;\n\npublic class SimpleFactoryImpl extends EFactoryImpl implements SimpleFactory {\n    /**\n     * Creates the default factory implementation.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    public static SimpleFactory init() {\n        try {\n            SimpleFactory theSimpleFactory = (SimpleFactory)EPackage.Registry.INSTANCE.getEFactory(SimplePackage.eNS_URI);\n            if (theSimpleFactory != null) {\n                return theSimpleFactory;\n            }\n        }\n        catch (Exception exception) {\n            EcorePlugin.INSTANCE.log(exception);\n        }\n        return new SimpleFactoryImpl();\n    }\n\n    /**\n     * Creates an instance of the factory.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    public SimpleFactoryImpl() {\n        super();\n    }\n\n    /**\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    @Override\n    public EObject create(EClass eClass) {\n        switch (eClass.getClassifierID()) {\n            case SimplePackage.A: return createA();\n            default:\n                throw new IllegalArgumentException(\"The class '\" + eClass.getName() + \"' is not a valid classifier\");\n        }\n    }\n\n    /**\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    public A createA() {\n        AImpl a = new AImpl();\n        return a;\n    }\n\n    /**\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    public SimplePackage getSimplePackage() {\n        return (SimplePackage)getEPackage();\n    }\n\n<｜fim▁hole｜>     * @deprecated\n     * @generated\n     */\n    @Deprecated\n    public static SimplePackage getPackage() {\n        return SimplePackage.eINSTANCE;\n    }\n\n} //SimpleFactoryImpl<｜fim▁end｜>",
    "response": "    /**\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.cloudfoundry.operations.advanced;\n<｜fim▁hole｜>import org.junit.Test;\nimport reactor.core.publisher.Mono;\nimport reactor.test.StepVerifier;\n\nimport java.time.Duration;\n\nimport static org.mockito.Mockito.when;\n\npublic final class DefaultAdvancedTest extends AbstractOperationsTest {\n\n    private final DefaultAdvanced advanced = new DefaultAdvanced(Mono.just(this.uaaClient));\n\n    @Test\n    public void sshCode() {\n        requestAuthorizeByAuthorizationCodeGrantApi(this.uaaClient);\n\n        this.advanced\n            .sshCode()\n            .as(StepVerifier::create)\n            .expectNext(\"test-code\")\n            .expectComplete()\n            .verify(Duration.ofSeconds(5));\n    }\n\n    private static void requestAuthorizeByAuthorizationCodeGrantApi(UaaClient uaaClient) {\n        when(uaaClient.authorizations()\n            .authorizationCodeGrantApi(AuthorizeByAuthorizationCodeGrantApiRequest.builder()\n                .clientId(\"ssh-proxy\")\n                .build()))\n            .thenReturn(Mono.just(\"test-code\"));\n    }\n\n}<｜fim▁end｜>",
    "response": "\nimport org.cloudfoundry.operations.AbstractOperationsTest;\nimport org.cloudfoundry.uaa.UaaClient;\nimport org.cloudfoundry.uaa.authorizations.AuthorizeByAuthorizationCodeGrantApiRequest;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.sourceforge.plantuml.anim;\n\nimport java.awt.geom.Dimension2D;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\nimport net.sourceforge.plantuml.ugraphic.MinMax;\n\npublic class Animation {\n\n    private final List<AffineTransformation> all;\n\n    private Animation(List<AffineTransformation> all) {\n        if (all.size() == 0) {\n            throw new IllegalArgumentException();\n        }\n        this.all = all;\n    }\n\n    public static Animation singleton(AffineTransformation affineTransformation) {\n        if (affineTransformation == null) {\n            return null;\n        }\n        return new Animation(Collections.singletonList(affineTransformation));\n    }\n\n    public static Animation create(List<String> descriptions) {\n        final List<AffineTransformation> all = new ArrayList<AffineTransformation>();\n        for (String s : descriptions) {\n            final AffineTransformation tmp = AffineTransformation.create(s);\n            if (tmp != null) {\n                all.add(tmp);\n            }\n        }\n        return new Animation(all);\n    }\n\n    public Collection<AffineTransformation> getAll() {\n        return Collections.unmodifiableCollection(all);\n    }\n\n<｜fim▁hole｜>            affineTransform.setDimension(dim);\n        }\n\n    }\n\n    public AffineTransformation getFirst() {\n        return all.get(0);\n    }\n\n    public MinMax getMinMax(Dimension2D dim) {\n        MinMax result = MinMax.getEmpty(false);\n        for (AffineTransformation affineTransform : all) {\n            final MinMax m = affineTransform.getMinMax(dim);\n            result = result.addMinMax(m);\n        }\n        return result;\n    }\n\n}<｜fim▁end｜>",
    "response": "    public void setDimension(Dimension2D dim) {\n        for (AffineTransformation affineTransform : all) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package uk.ac.ox.it.ords.api.database.services;\n\nimport java.util.ServiceLoader;\n\nimport uk.ac.ox.it.ords.api.database.services.impl.DatabaseAuditServiceImpl;\n\npublic interface DatabaseAuditService {\n\n    /**\n     * Create audit message that the user is not authorised to perform a specific action\n     * @param request the action that is not authorised\n     */\n    public abstract void createNotAuthRecord(String request);\n\n    public abstract void createNotAuthRecord(String request, int logicalDatabaseId);\n\n    public abstract void createDataInsertRecord(int databaseId);\n\n    public abstract void createDataChangeRecord(int databaseId);\n\n    public abstract void createDataDeleteRecord(int databaseId);\n\n    public abstract void createDataQueryRecord(int databaseId);\n\n    public abstract void createDatasetCreateRecord(int databaseId, int datasetId);\n\n    public abstract void createDatasetDeleteRecord(int databaseId, int datasetId);\n\n    public abstract void createImportRecord(int databaseId);\n\n    public abstract void createExportRecord(int databaseId);\n\n    /**\n     * Factory for obtaining implementations\n     */\n    public static class Factory {\n        private static DatabaseAuditService provider;\n        public static DatabaseAuditService getInstance() {\n            //\n            // Use the service loader to load an implementation if one is available\n            // Place a file called uk.ac.ox.oucs.ords.utilities.csv in src/main/resources/META-INF/services\n            // containing the classname to load as the CsvService implementation. \n            // By default we load the Hibernate implementation.\n            //\n            if (provider == null){\n                ServiceLoader<DatabaseAuditService> ldr = ServiceLoader.load(DatabaseAuditService.class);\n                for (DatabaseAuditService service : ldr) {\n                    // We are only expecting one\n                    provider = service;\n                }\n            }\n<｜fim▁hole｜>            // If no service provider is found, use the default\n            //\n            if (provider == null){\n                provider = new DatabaseAuditServiceImpl();\n            }\n\n            return provider;\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "            //\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.camel.component.file.remote;\n\nimport org.apache.camel.builder.RouteBuilder;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class FtpConsumerIncludeExtTest extends FtpServerTestSupport {\n\n    private String getFtpUrl() {\n        return \"ftp://admin@localhost:{{ftp.server.port}}/includename?password=admin\" + \"&includeExt=txt,dat\";\n    }\n\n    @Override\n    @BeforeEach\n    public void setUp() throws Exception {\n        super.setUp();\n        prepareFtpServer();\n    }\n\n    @Test\n    public void testIncludeExt() throws Exception {\n        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Report 1\", \"Bye World\");\n\n        mock.assertIsSatisfied();\n    }\n\n    private void prepareFtpServer() throws Exception {\n        // prepares the FTP Server by creating files on the server that we want\n        // to unit\n        // test that we can pool and store as a local file\n        sendFile(getFtpUrl(), \"Hello World\", \"hello.xml\");\n        sendFile(getFtpUrl(), \"Report 1\", \"report1.txt\");\n        sendFile(getFtpUrl(), \"Bye World\", \"secret.DAT\");\n        sendFile(getFtpUrl(), \"Report 2\", \"report2.xml\");\n    }\n<｜fim▁hole｜>                from(getFtpUrl()).to(\"mock:result\");\n            }\n        };\n    }\n}<｜fim▁end｜>",
    "response": "\n    @Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() throws Exception {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jfree.chart.labels;\n\nimport org.jfree.data.category.CategoryDataset;\n\npublic interface CategoryItemLabelGenerator {\n\n    /**\n     * Generates a label for the specified row.\n     *\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     * @param row  the row index (zero-based).\n     *\n     * @return The label.\n     */\n    public String generateRowLabel(CategoryDataset dataset, int row);\n\n    /**\n     * Generates a label for the specified row.\n     *\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     * @param column  the column index (zero-based).\n     *\n     * @return The label.\n     */\n    public String generateColumnLabel(CategoryDataset dataset, int column);\n\n    /**\n     * Generates a label for the specified item. The label is typically a\n     * formatted version of the data value, but any text can be used.\n     *\n     * @param dataset  the dataset (<code>null</code> not permitted).\n     * @param row  the row index (zero-based).\n<｜fim▁hole｜>     * @return The label (possibly <code>null</code>).\n     */\n    public String generateLabel(CategoryDataset dataset, int row, int column);\n\n}<｜fim▁end｜>",
    "response": "     * @param column  the column index (zero-based).\n     *\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.cordovastudio.editors.designer.palette;\n\nimport org.cordovastudio.editors.designer.model.MetaModel;\nimport com.intellij.openapi.util.IconLoader;\nimport org.cordovastudio.utils.ImageUtils;\nimport org.jdom.Element;\nimport org.jetbrains.annotations.Nullable;\n<｜fim▁hole｜>public class DefaultPaletteItem implements PaletteItem {\n  private final String myTitle;\n  protected final String myIconPath;\n  protected Icon myIcon;\n  private final String myTooltip;\n  private final String myVersion;\n  private boolean myEnabled = true;\n  private final String myDeprecatedVersion;\n  private final String myDeprecatedHint;\n\n  protected MetaModel myMetaModel;\n\n  public DefaultPaletteItem(Element palette) {\n    this(palette.getAttributeValue(\"title\"),\n         palette.getAttributeValue(\"icon\"),\n         palette.getAttributeValue(\"tooltip\"),\n         palette.getAttributeValue(\"version\"),\n         palette.getAttributeValue(\"deprecated\"),\n         palette.getAttributeValue(\"deprecatedHint\"));\n  }\n\n  public DefaultPaletteItem(String title,\n                            String iconPath,\n                            String tooltip,\n                            String version,\n                            String deprecatedVersion,\n                            String deprecatedHint) {\n    myTitle = title;\n    myIconPath = iconPath;\n    myTooltip = tooltip;\n    myVersion = version;\n    myDeprecatedVersion = deprecatedVersion;\n    myDeprecatedHint = deprecatedHint;\n  }\n\n  @Override\n  public String getTitle() {\n    return myTitle;\n  }\n\n  @Override\n  public Icon getIcon() {\n    if (myIcon == null) {\n      myIcon = ImageUtils.getReflectiveIcon(myIconPath);\n    }\n    return myIcon;\n  }\n\n  @Override\n  public String getTooltip() {\n    return myTooltip;\n  }\n\n  @Override\n  public String getVersion() {\n    return myVersion;\n  }\n\n  @Override\n  public boolean isEnabled() {\n    return myEnabled;\n  }\n\n  public void setEnabled(boolean enabled) {\n    myEnabled = enabled;\n  }\n\n  @Nullable\n  @Override\n  public String getDeprecatedIn() {\n    return myDeprecatedVersion;\n  }\n\n  @Nullable\n  @Override\n  public String getDeprecatedHint() {\n    return myDeprecatedHint;\n  }\n\n  @Override\n  public String getCreation() {\n    return myMetaModel.getCreation();\n  }\n\n  @Override\n  public MetaModel getMetaModel() {\n    return myMetaModel;\n  }\n\n  @Override\n  public void setMetaModel(MetaModel metaModel) {\n    myMetaModel = metaModel;\n  }\n}<｜fim▁end｜>",
    "response": "\nimport javax.swing.*;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.romainpiel.lib.utils;\n\nimport android.content.Context;\n<｜fim▁hole｜>\npublic class DateUtils extends android.text.format.DateUtils {\n\n    public static String formatTime(Context context, Date date) {\n        return android.text.format.DateUtils.formatDateTime(context, date.getTime(),\n                android.text.format.DateUtils.FORMAT_SHOW_TIME\n                        | android.text.format.DateUtils.FORMAT_NO_NOON\n                        | android.text.format.DateUtils.FORMAT_NO_MIDNIGHT\n        );\n    }\n}<｜fim▁end｜>",
    "response": "\nimport java.util.Date;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.mgz.afp.modca;\n\nimport com.mgz.afp.base.IRepeatingGroup;\nimport com.mgz.afp.base.RepeatingGroupWithTriplets;\nimport com.mgz.afp.base.StructuredFieldBaseRepeatingGroups;\nimport com.mgz.afp.exceptions.AFPParserException;\nimport com.mgz.afp.parser.AFPParserConfiguration;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\npublic class MIO_MapImageObject extends StructuredFieldBaseRepeatingGroups {\n\n  @Override\n  public void decodeAFP(byte[] sfData, int offset, int length, AFPParserConfiguration config) throws AFPParserException {\n    MIO_RepeatingGroup rg = new MIO_RepeatingGroup();\n    rg.decodeAFP(sfData, offset, length, config);\n    addRepeatingGroup(rg);\n  }\n\n  @Override\n<｜fim▁hole｜>    }\n    super.writeFullStructuredField(os, baos.toByteArray());\n  }\n\n  public static class MIO_RepeatingGroup extends RepeatingGroupWithTriplets {\n  }\n\n}<｜fim▁end｜>",
    "response": "  public void writeAFP(OutputStream os, AFPParserConfiguration config) throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    for (IRepeatingGroup rg : this.getRepeatingGroups()) {\n      rg.writeAFP(baos, config);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package me.ederign.template;\n\npublic class OnlineBanking extends Banking {\n\n    @Override\n    protected void preProcessing( Operation op ) {\n        //pre processing online logic\n    }\n\n    @Override\n<｜fim▁hole｜>    }\n}<｜fim▁end｜>",
    "response": "    protected void postProcessing( Operation op ) {\n        //post processing online logic\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.yz.util;\n\nimport java.text.ParseException;\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport com.yz.video.ConvertVideo;\n\npublic class TestMain {\n\n    /**\n     * @param args\n     */\n    private static String infoExtractionMsg;\n\n    public static void main(String[] args) throws ParseException {\n\n        String videoPath = \"D:/importentDCHCFile/media/20170222121459372.avi\";\n\n        String targetPath = \"D:/importentDCHCFile/media/20170222121500258.mp4\";\n\n        ConvertVideo cv = new ConvertVideo(videoPath, targetPath);\n        cv.process();\n\n    }\n\n    // 处理ids,operationType 1:增加 -1 删除\n    public static String handleIDs(String objIDs, String opIDs,\n            int operationType) {\n\n        String newIDs = \"\";\n\n        Set<String> objIDSet = handleSet(objIDs);\n\n        Set<String> opIDSet = handleSet(opIDs);\n\n        if (operationType == 1) {\n            objIDSet.addAll(opIDSet);\n        } else if (operationType == -1) {\n            objIDSet.removeAll(opIDSet);\n        }\n\n        for (String id : objIDSet) {\n            if(!id.equals(\"\"))\n            {\n                newIDs = newIDs + id + \",\";\n            }\n        }\n        return newIDs;\n    }\n\n    public static Set<String> handleSet(String ids) {\n\n        Set<String> idSet = new HashSet<String>();\n\n        ids = ids.replace(\" \", \"\");\n\n        if (ids.contains(\",\")) {\n\n            String[] arrayIDs = ids.split(\",\");\n            for (int i = 0; i < arrayIDs.length; i++) {\n                if (!arrayIDs[i].equals(\"\")) {\n                    idSet.add(arrayIDs[i]);\n                }\n            }\n\n        } else {\n            idSet.add(ids);\n        }\n        return idSet;\n\n    }\n\n    private static boolean isContainID(String ids, String id) {\n\n        String[] idString = ids.split(\",\");\n\n        List<String> list = Arrays.asList(idString);\n\n        return list.contains(id);\n\n    }\n\n    private static void handleInfoExtractionMsg(String infoExtraction) {\n<｜fim▁hole｜>                infoExtractionMsg = infoExtractionMsg + infoExtractions[i]\n                        + \"','\";\n            }\n            infoExtractionMsg = (infoExtractionMsg.substring(0,\n                    infoExtractionMsg.length() - 2) + \"}\").trim();\n        } else {\n            infoExtractionMsg = \"{}\";\n        }\n\n    }\n\n}<｜fim▁end｜>",
    "response": "        // TODO Auto-generated method stub\n        if (infoExtraction != null && infoExtraction.length() > 0\n                && infoExtraction.contains(\",\")) {\n            String[] infoExtractions = infoExtraction.split(\",\");\n            infoExtractionMsg = \"{'\";\n            for (int i = 0; i < infoExtractions.length; i++) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.zeppelin.integration;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.zeppelin.conf.ZeppelinConfiguration;\nimport org.apache.zeppelin.interpreter.integration.DownloadUtils;\nimport org.apache.zeppelin.notebook.Note;\nimport org.apache.zeppelin.notebook.Notebook;\nimport org.apache.zeppelin.notebook.Paragraph;\nimport org.apache.zeppelin.rest.AbstractTestRestApi;\nimport org.apache.zeppelin.scheduler.Job;\nimport org.apache.zeppelin.user.AuthenticationInfo;\nimport org.apache.zeppelin.utils.TestUtils;\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\npublic abstract class ZeppelinFlinkClusterTest extends AbstractTestRestApi {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(ZeppelinFlinkClusterTest.class);\n  private String flinkVersion;\n  private String flinkHome;\n\n  public ZeppelinFlinkClusterTest(String flinkVersion) throws Exception {\n    this.flinkVersion = flinkVersion;\n    LOGGER.info(\"Testing FlinkVersion: \" + flinkVersion);\n    this.flinkHome = DownloadUtils.downloadFlink(flinkVersion, \"2.11\");\n  }\n\n  @BeforeClass\n  public static void setUp() throws Exception {\n    System.setProperty(ZeppelinConfiguration.ConfVars.ZEPPELIN_HELIUM_REGISTRY.getVarName(),\n            \"helium\");\n    AbstractTestRestApi.startUp(ZeppelinFlinkClusterTest.class.getSimpleName());\n  }\n\n  @AfterClass\n  public static void destroy() throws Exception {\n    AbstractTestRestApi.shutDown();\n  }\n\n  //@Test\n  public void testResumeFromCheckpoint() throws Exception {\n\n    Note note = null;\n    try {\n      // create new note\n      note = TestUtils.getInstance(Notebook.class).createNote(\"note1\", AuthenticationInfo.ANONYMOUS);\n\n      // run p0 for %flink.conf\n      String checkpointPath = Files.createTempDirectory(\"checkpoint\").toAbsolutePath().toString();\n      Paragraph p0 = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);\n      StringBuilder builder = new StringBuilder(\"%flink.conf\\n\");\n      builder.append(\"FLINK_HOME \" + flinkHome + \"\\n\");\n      builder.append(\"flink.execution.mode local\\n\");\n      builder.append(\"state.checkpoints.dir file://\" + checkpointPath + \"\\n\");\n      builder.append(\"execution.checkpointing.externalized-checkpoint-retention RETAIN_ON_CANCELLATION\");\n      p0.setText(builder.toString());\n<｜fim▁hole｜>      note.run(p1.getId(), true);\n      assertEquals(Job.Status.FINISHED, p0.getStatus());\n\n      // run p2 for flink streaming sql\n      Paragraph p2 = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);\n      p2.setText(\"%flink.ssql(type=single, template=<h1>Total: {0}</h1>, resumeFromLatestCheckpoint=true)\\n\" +\n              \"select count(1) from log;\");\n      note.run(p2.getId(), false);\n      p2.waitUntilRunning();\n\n      Thread.sleep(30 * 1000);\n      TestUtils.getInstance(Notebook.class).getInterpreterSettingManager()\n              .getInterpreterSettingByName(\"flink\").close();\n      assertTrue(p2.getConfig().toString(), p2.getConfig().get(\"latest_checkpoint_path\").toString().contains(checkpointPath));\n\n      // run it again\n      note.run(p0.getId(), true);\n      note.run(p1.getId(), true);\n      note.run(p2.getId(), false);\n      p2.waitUntilFinished();\n      assertEquals(p2.getReturn().toString(), Job.Status.FINISHED, p2.getStatus());\n\n    } catch (Exception e) {\n      e.printStackTrace();\n      throw e;\n    } finally {\n      if (null != note) {\n        TestUtils.getInstance(Notebook.class).removeNote(note, AuthenticationInfo.ANONYMOUS);\n      }\n    }\n  }\n\n  //@Test\n  public void testResumeFromInvalidCheckpoint() throws Exception {\n\n    Note note = null;\n    try {\n      // create new note\n      note = TestUtils.getInstance(Notebook.class).createNote(\"note2\", AuthenticationInfo.ANONYMOUS);\n\n      // run p0 for %flink.conf\n      String checkpointPath = Files.createTempDirectory(\"checkpoint\").toAbsolutePath().toString();\n      Paragraph p0 = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);\n      StringBuilder builder = new StringBuilder(\"%flink.conf\\n\");\n      builder.append(\"FLINK_HOME \" + flinkHome + \"\\n\");\n      builder.append(\"flink.execution.mode local\\n\");\n      builder.append(\"state.checkpoints.dir file://\" + checkpointPath + \"\\n\");\n      builder.append(\"execution.checkpointing.externalized-checkpoint-retention RETAIN_ON_CANCELLATION\");\n      p0.setText(builder.toString());\n      note.run(p0.getId(), true);\n      assertEquals(Job.Status.FINISHED, p0.getStatus());\n\n      // run p1 for creating flink table via scala\n      Paragraph p1 = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);\n      p1.setText(\"%flink \" + getInitStreamScript(500));\n      note.run(p1.getId(), true);\n      assertEquals(Job.Status.FINISHED, p0.getStatus());\n\n      // run p2 for flink streaming sql\n      Paragraph p2 = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);\n      p2.setText(\"%flink.ssql(type=single, template=<h1>Total: {0}</h1>, resumeFromLatestCheckpoint=true)\\n\" +\n              \"select count(1) from log;\");\n      p2.getConfig().put(\"latest_checkpoint_path\", \"file:///invalid_checkpoint\");\n      note.run(p2.getId(), false);\n      p2.waitUntilFinished();\n      assertEquals(p2.getReturn().toString(), Job.Status.ERROR, p2.getStatus());\n      assertTrue(p2.getReturn().toString(), p2.getReturn().toString().contains(\"Cannot find checkpoint\"));\n\n      p2.setText(\"%flink.ssql(type=single, template=<h1>Total: {0}</h1>, resumeFromLatestCheckpoint=false)\\n\" +\n              \"select count(1) from log;\");\n      note.run(p2.getId(), false);\n      p2.waitUntilFinished();\n      assertEquals(p2.getReturn().toString(), Job.Status.FINISHED, p2.getStatus());\n    } catch (Exception e) {\n      e.printStackTrace();\n      throw e;\n    } finally {\n      if (null != note) {\n        TestUtils.getInstance(Notebook.class).removeNote(note, AuthenticationInfo.ANONYMOUS);\n      }\n    }\n  }\n\n  public static String getInitStreamScript(int sleep_interval) throws IOException {\n    return IOUtils.toString(FlinkIntegrationTest.class.getResource(\"/init_stream.scala\"), StandardCharsets.UTF_8)\n            .replace(\"{{sleep_interval}}\", sleep_interval + \"\");\n  }\n}<｜fim▁end｜>",
    "response": "      note.run(p0.getId(), true);\n      assertEquals(Job.Status.FINISHED, p0.getStatus());\n\n      // run p1 for creating flink table via scala\n      Paragraph p1 = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);\n      p1.setText(\"%flink \" + getInitStreamScript(2000));\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jump.parser;\n\nimport java.util.*;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\n<｜fim▁hole｜>    @Getter\n    @Setter\n    private String fieldName;\n\n    @Getter\n    @Setter\n    private String fnName;\n\n    @Getter\n    @Setter\n    private ArrayList<String> params;\n\n    public FieldConfig(String fieldName, String fnName, ArrayList<String> params) {\n        this.fieldName = fieldName;\n        this.fnName = fnName;\n        this.params = params;\n    }\n\n    public FieldConfig() {\n        params = new ArrayList<String>();\n    }\n\n    public String toString() {\n        return fieldName + \" \" + fnName + \" \" + params.toString();\n    }\n}<｜fim▁end｜>",
    "response": "public class FieldConfig {\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.redhat.ceylon.eclipse.code.editor;\n\nimport org.eclipse.jface.text.source.projection.ProjectionViewer;\nimport org.eclipse.ui.IPartListener2;\nimport org.eclipse.ui.IWorkbenchPage;\nimport org.eclipse.ui.IWorkbenchPartReference;\nimport org.eclipse.ui.IWorkbenchPartSite;\n\nfinal class ToggleFoldingRunner implements IPartListener2 {\n    /**\n     * \n     */\n    private final CeylonEditor editor;\n\n    /**\n     * @param ceylonEditor\n     */\n    ToggleFoldingRunner(CeylonEditor ceylonEditor) {\n        editor = ceylonEditor;\n    }\n    /**\n     * The workbench page we registered the part listener with, or\n     * <code>null</code>.\n     */\n    private IWorkbenchPage fPage;\n\n    /**\n     * Does the actual toggling of projection.\n<｜fim▁hole｜>            }\n        }\n    }\n\n    /**\n     * Makes sure that the editor's folding state is correct the next time\n     * it becomes visible. If it already is visible, it toggles the folding\n     * state. If not, it either registers a part listener to toggle folding\n     * when the editor becomes visible, or cancels an already registered\n     * runner.\n     */\n    public void runWhenNextVisible() {\n        // if there is one already: toggling twice is the identity\n        if (editor.fFoldingRunner != null) {\n            editor.fFoldingRunner.cancel();\n            return;\n        }\n        IWorkbenchPartSite site= editor.getSite();\n        if (site != null) {\n            IWorkbenchPage page= site.getPage();\n            if (!page.isPartVisible(editor)) {\n                // if we're not visible - defer until visible\n                fPage= page;\n                editor.fFoldingRunner= this;\n                page.addPartListener(this);\n                return;\n            }\n        }\n        // we're visible - run now\n        toggleFolding();\n    }\n\n    /**\n     * Remove the listener and clear the field.\n     */\n    private void cancel() {\n        if (fPage != null) {\n            fPage.removePartListener(this);\n            fPage= null;\n        }\n        if (editor.fFoldingRunner == this)\n            editor.fFoldingRunner= null;\n    }\n\n    /*\n     * @see org.eclipse.ui.IPartListener2#partVisible(org.eclipse.ui.IWorkbenchPartReference)\n     */\n    public void partVisible(IWorkbenchPartReference partRef) {\n        if (editor.equals(partRef.getPart(false))) {\n            cancel();\n            toggleFolding();\n        }\n    }\n\n    /*\n     * @see org.eclipse.ui.IPartListener2#partClosed(org.eclipse.ui.IWorkbenchPartReference)\n     */\n    public void partClosed(IWorkbenchPartReference partRef) {\n        if (editor.equals(partRef.getPart(false))) {\n            cancel();\n        }\n    }\n\n    public void partActivated(IWorkbenchPartReference partRef) {}\n    public void partBroughtToTop(IWorkbenchPartReference partRef) {}\n    public void partDeactivated(IWorkbenchPartReference partRef) {}\n    public void partOpened(IWorkbenchPartReference partRef) {}\n    public void partHidden(IWorkbenchPartReference partRef) {}\n    public void partInputChanged(IWorkbenchPartReference partRef) {}\n}<｜fim▁end｜>",
    "response": "     */\n    private void toggleFolding() {\n        ProjectionViewer pv= editor.getCeylonSourceViewer();\n        if (pv.isProjectionMode() != editor.isFoldingEnabled()) {\n            if (pv.canDoOperation(ProjectionViewer.TOGGLE)) {\n                pv.doOperation(ProjectionViewer.TOGGLE);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>import java.util.Map;\n\npublic class PlatformFilter extends StackFilter {\n\n   /**\n    * Constructor for the <code>PlatformFilter</code> object. This\n    * adds a filter which can be used to resolve environment \n    * variables followed by one that can be used to resolve system\n    * properties and finally one to resolve user specified values.\n    */\n   public PlatformFilter() {\n      this(null);\n   }\n\n   /**\n    * Constructor for the <code>PlatformFilter</code> object. This\n    * adds a filter which can be used to resolve environment \n    * variables followed by one that can be used to resolve system\n    * properties and finally one to resolve user specified values.\n    * \n    * @param map this is a map contain the user mappings\n    */\n   public PlatformFilter(Map map) {\n      this.push(new EnvironmentFilter());\n      this.push(new SystemFilter());\n      this.push(new MapFilter(map));      \n   }        \n}<｜fim▁end｜>",
    "response": "package org.simpleframework.xml.filter;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.toparchy.molecule.permission.controller;\n\nimport java.io.Serializable;\nimport java.util.Set;\n\nimport javax.annotation.PostConstruct;\nimport javax.enterprise.inject.Model;\nimport javax.enterprise.inject.Produces;\nimport javax.faces.view.ViewScoped;\nimport javax.inject.Inject;\nimport javax.inject.Named;\n\nimport org.primefaces.context.RequestContext;\nimport org.primefaces.event.SelectEvent;\nimport org.primefaces.event.UnselectEvent;\n\nimport com.toparchy.molecule.permission.model.entity.ApplicationResource;\nimport com.toparchy.molecule.permission.model.entity.ApplicationRole;\nimport com.toparchy.molecule.permission.service.RoleResourceRegistration;\n\n@Model\n@ViewScoped\npublic class ApplicationRoleController implements Serializable {\n\n    private static final long serialVersionUID = -7279682200727128738L;\n    @Inject\n    private RoleResourceRegistration roleResourceRegistration;\n    private boolean disabled = true;\n    @Produces\n<｜fim▁hole｜>    private ApplicationRole selectApplicationRole;\n    @Produces\n    @Named\n    private Set<ApplicationResource> currentApplicationResources;\n    @Produces\n    @Named\n    private ApplicationRole newApplicationRole;\n\n    @PostConstruct\n    public void initNewApplicationRole() {\n        newApplicationRole = new ApplicationRole();\n    }\n\n    public ApplicationRole getSelectApplicationRole() {\n        return selectApplicationRole;\n    }\n\n    public void setSelectApplicationRole(ApplicationRole selectApplicationRole) {\n        this.selectApplicationRole = selectApplicationRole;\n    }\n\n    public Set<ApplicationResource> getCurrentApplicationResources() {\n        return currentApplicationResources;\n    }\n\n    public void setCurrentApplicationResources(Set<ApplicationResource> currentApplicationResources) {\n        this.currentApplicationResources = currentApplicationResources;\n    }\n\n    public void onRowSelect(SelectEvent event) {\n        selectApplicationRole = (ApplicationRole) event.getObject();\n        currentApplicationResources = selectApplicationRole.getApplicationResources();\n        if (selectApplicationRole != null)\n            disabled = false;\n    }\n\n    public boolean isDisabled() {\n        return disabled;\n    }\n\n    public void setDisabled(boolean disabled) {\n        this.disabled = disabled;\n    }\n\n    public void onRowUnselect(UnselectEvent event) {\n    }\n\n    public void chooseResource() {\n        RequestContext.getCurrentInstance().openDialog(\"selectApplicationResource\");\n    }\n\n    public ApplicationRole getNewApplicationRole() {\n        return newApplicationRole;\n    }\n\n    public void setNewApplicationRole(ApplicationRole newApplicationRole) {\n        this.newApplicationRole = newApplicationRole;\n    }\n\n    public void onResourceChosen(SelectEvent event) {\n        ApplicationResource resource = (ApplicationResource) event.getObject();\n        roleResourceRegistration.add(selectApplicationRole, resource);\n        selectApplicationRole.addApplicationResource(resource);\n    }\n\n    public void removeResourceFromRole(ApplicationResource applicationResource) {\n        roleResourceRegistration.remove(selectApplicationRole, applicationResource);\n        selectApplicationRole.removeApplicationResource(applicationResource);\n    }\n\n    public void createApplicationRole() {\n        roleResourceRegistration.createRole(newApplicationRole);\n        initNewApplicationRole();\n    }\n\n    public void deleteRole() {\n        roleResourceRegistration.deleteRole(selectApplicationRole);\n        currentApplicationResources = null;\n    }\n}<｜fim▁end｜>",
    "response": "    @Named\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.consol.citrus.vertx.config.annotation;\n\nimport com.consol.citrus.annotations.CitrusEndpointConfig;\n\n<｜fim▁hole｜>@Retention(RetentionPolicy.RUNTIME)\n@Target({ ElementType.FIELD })\n@CitrusEndpointConfig(qualifier = \"endpoint.parser.vertx.sync\")\npublic @interface VertxSyncEndpointConfig {\n\n    /**\n     * Host.\n     * @return\n     */\n    String host() default \"localhost\";\n\n    /**\n     * Server port.\n     * @return\n     */\n    int port() default -1;\n\n    /**\n     * Address.\n     * @return\n     */\n    String address() default \"\";\n\n    /**\n     * Publish subscribe domain.\n     * @return\n     */\n    boolean pubSubDomain() default false;\n\n    /**\n     * Vertx factory.\n     * @return\n     */\n    String vertxFactory() default  \"vertxInstanceFactory\";\n\n    /**\n     * Message converter.\n     * @return\n     */\n    String messageConverter() default  \"\";\n\n    /**\n     * Message correlator.\n     * @return\n     */\n    String correlator() default \"\";\n\n    /**\n     * Polling interval.\n     * @return\n     */\n    int pollingInterval() default 500;\n\n    /**\n     * Timeout.\n     * @return\n     */\n    long timeout() default 5000L;\n\n    /**\n     * Test actor.\n     * @return\n     */\n    String actor() default \"\";\n}<｜fim▁end｜>",
    "response": "import java.lang.annotation.*;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.winterblade.minecraft.harmony.entities.callbacks;\n\nimport io.netty.buffer.ByteBuf;\nimport net.minecraft.entity.Entity;\nimport net.minecraft.entity.EntityLivingBase;\nimport net.minecraft.entity.passive.EntityVillager;\nimport net.minecraft.entity.player.EntityPlayerMP;\nimport net.minecraft.server.MinecraftServer;\nimport net.minecraft.tileentity.CommandBlockBaseLogic;\nimport net.minecraft.util.math.BlockPos;\nimport net.minecraft.util.math.Vec3d;\nimport net.minecraft.world.World;\nimport net.minecraftforge.fml.common.FMLCommonHandler;\nimport org.winterblade.minecraft.harmony.api.entities.EntityCallback;\nimport org.winterblade.minecraft.harmony.api.utility.CallbackMetadata;\nimport org.winterblade.minecraft.harmony.common.utility.LogHelper;\n\nimport javax.annotation.Nullable;\n\n@EntityCallback(name = \"runPlayerCommand\")\npublic class CommandCallback extends BaseEntityCallback {\n    private String[] command;\n    private String name;\n\n    @Override\n    public void applyTo(Entity target, CallbackMetadata data) {\n        if(target.getEntityWorld().isRemote) return;\n        if(!EntityLivingBase.class.isAssignableFrom(target.getClass())) {\n            LogHelper.info(\"Not running command '{}' on target as target is not a living entity ({})\", command, target.getClass().getName());\n            return;\n        }\n\n        if(name != null) name = name.replaceAll(\"@p\", target.getDisplayName().getUnformattedText());\n\n        CommandCallbackSender sender = new CommandCallbackSender((EntityLivingBase) target, name);\n\n        for (String s : command) {\n            String specificCommand = s.replaceAll(\"@p\", target.getName());\n\n            // Method train of doom...\n            int result = FMLCommonHandler.instance()\n                    .getMinecraftServerInstance()\n                    .getCommandManager()\n                    .executeCommand(\n                            sender, specificCommand\n                    );\n\n            // TODO: \"onError\" callback.\n            LogHelper.info(\"Ran '{}' from '{}'.  Result code: {}\", specificCommand, target.getName(), result);\n        }\n    }\n\n    /**\n     * Wrapping implementation of the command sender.\n     */\n    private static class CommandCallbackSender extends CommandBlockBaseLogic\n    {\n        private final String sender;\n        private final EntityLivingBase wrappedEntity;\n\n        CommandCallbackSender(EntityLivingBase wrappedEntity, @Nullable String name) {\n            this.wrappedEntity = wrappedEntity;\n\n            sender = name;\n        }\n\n        @Override\n        public void updateCommand() {\n\n        }\n\n        /**\n         * Currently this returns 0 for the traditional command block, and 1 for the minecart command block\n         */\n        @Override\n        public int getCommandBlockType() {\n            return 0;\n        }\n\n        /**\n         * Fills in information about the command block for the packet. X/Y/Z for the minecart version, and entityId for the\n         * traditional version\n         *\n         * @param buf\n         */\n        @Override\n        public void fillInInfo(ByteBuf buf) {}\n\n        /**\n         * Get the position in the world. <b>{@code null} is not allowed!</b> If you are not an entity in the world, return\n         * the coordinates 0, 0, 0\n         */\n        @Override\n        public BlockPos getPosition() {\n            return wrappedEntity.getPosition();\n        }\n\n        /**\n         * Get the position vector. <b>{@code null} is not allowed!</b> If you are not an entity in the world, return 0.0D,\n         * 0.0D, 0.0D\n         */\n        @Override\n        public Vec3d getPositionVector() {\n            return wrappedEntity.getPositionVector();\n        }\n\n        /**\n         * Get the world, if available. <b>{@code null} is not allowed!</b> If you are not an entity in the world, return\n         * the overworld\n         */\n        @Override\n        public World getEntityWorld() {\n            return wrappedEntity.getEntityWorld();\n        }\n\n<｜fim▁hole｜>        @Nullable\n        @Override\n        public Entity getCommandSenderEntity() {\n            return null;\n        }\n\n        /**\n         * Get the Minecraft server instance\n         */\n        @Nullable\n        @Override\n        public MinecraftServer getServer() {\n            return FMLCommonHandler.instance().getMinecraftServerInstance();\n        }\n\n        /**\n         * Get the name of this object. For players this returns their username\n         */\n        @Override\n        public String getName() {\n            return sender != null ? sender : super.getName();\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        /**\n         * Returns the entity associated with the command sender. MAY BE NULL!\n         */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package jlg.jade.asterix.cat150;\n\nimport jlg.jade.asterix.AsterixItemLength;\nimport jlg.jade.asterix.FixedLengthAsterixData;\n\npublic class Cat150Item090 extends FixedLengthAsterixData {\n    private String destinationAerodrome;\n<｜fim▁hole｜>        return AsterixItemLength.FOUR_BYTES.getValue();\n    }\n\n    @Override\n    protected void decodeFromByteArray(byte[] input, int offset) {\n        this.destinationAerodrome = new String(input, offset, this.sizeInBytes).replace(\" \", \"\");\n        appendItemDebugMsg(\"Destination Aerodrome\", this.destinationAerodrome);\n    }\n\n    @Override\n    protected String setDisplayName() {\n        return \"Cat150Item090 - Destination Aerodrome\";\n    }\n\n    public String getDestinationAerodrome() {\n        return destinationAerodrome;\n    }\n}<｜fim▁end｜>",
    "response": "\n    @Override\n    protected int setSizeInBytes() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package nl.idgis.publisher.database.messages;\n\nimport com.mysema.query.types.Order;\n\npublic abstract class ListQuery extends Query {\n\n    private static final long serialVersionUID = 486819214732070272L;\n\n    protected final Order order;\n<｜fim▁hole｜>        this.offset = offset;\n        this.limit = limit;\n        this.order = order;\n    }\n\n    public Long getOffset() {\n        return offset;\n    }\n\n    public Long getLimit() {\n        return limit;\n    }\n\n    public Order getOrder() {\n        return order;\n    }\n}<｜fim▁end｜>",
    "response": "    protected final Long offset, limit; \n\n    public ListQuery(Order order, Long offset, Long limit) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package cn.loltime.zone;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.json.JSONArray;\n\nimport com.example.loginsuijidemo.R;\n\nimport cn.loltime.zone.model.SeekModel;\nimport cn.loltime.zone.model.UserMessageModel;\nimport cn.loltime.zone.utils.HttpUtils;\n\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.os.Handler;\n\n<｜fim▁hole｜>\n    protected Handler getJSONHandlerUserMessage = new Handler(){\n        public void handleMessage(android.os.Message msg){      \n            String jsonString = (String) msg.obj;\n            try {\n                    JSONArray dataJson = new JSONArray(jsonString);                 \n                    for(int i = 0; i< dataJson.length(); ++i){\n                        String userid = dataJson.getJSONObject(i).getString(\"userid\");\n                        String password = dataJson.getJSONObject(i).getString(\"password\");\n                        UserMessageModel userMessageModel = new UserMessageModel(userid,password);\n                        mUserMessageModelList.add(userMessageModel);                        \n                    }                               \n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        };\n    };\n\n    private String[] titles = new String[]\n            { \"pic1\", \"pic2\", \"pic3\", \"pic4\", \"pic5\", \"pic6\", \"pic7\", \"pic8\", \"pic9\"};\n\n    private int[] images = new int[]{\n            R.drawable.pic1,R.drawable.pic2,R.drawable.pic3,\n            R.drawable.pic4,R.drawable.pic5,R.drawable.pic6,\n            R.drawable.pic7,R.drawable.pic8,R.drawable.pic9\n    };\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n            super.onCreate(savedInstanceState);     \n            for(int i = 0; i<images.length;i++)\n            {\n                SeekModel questionModel = new SeekModel(titles[i],images[i]);\n                mSeekModelGridViewList.add(questionModel);\n            }\n            HttpUtils.getJSON(GET_JSON_URL_INDEX,getJSONHandlerUserMessage);    \n    }\n}<｜fim▁end｜>",
    "response": "public class BaseActivity extends Activity {\n\n    public static final String GET_JSON_URL_INDEX = \"http://10.0.2.2/LoginDemo/index.php\";\n    protected  List<UserMessageModel> mUserMessageModelList = new ArrayList<UserMessageModel>();\n    protected  List<SeekModel> mSeekModelGridViewList = new ArrayList<SeekModel>();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.cyborgJenn.terraDimensions.world.generators.trees;\n\nimport java.util.Random;\n\nimport net.minecraft.world.World;\nimport net.minecraft.world.gen.feature.WorldGenAbstractTree;\nimport net.minecraft.world.gen.feature.WorldGenerator;\n\npublic class WorldGenDeathTrees extends WorldGenAbstractTree{\n\n    public WorldGenDeathTrees(boolean par1)\n    {\n<｜fim▁hole｜>    }\n    @Override\n    public boolean generate(World world, Random random, int i, int j, int k) {\n        // TODO Auto-generated method stub\n        return false;\n    }\n\n}<｜fim▁end｜>",
    "response": "        super(par1);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.nikr.eve.jeveasset.io.shared;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\nimport java.util.concurrent.TimeUnit;\nimport net.nikr.eve.jeveasset.gui.dialogs.update.UpdateTask;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ThreadWoker {\n\n    private static final int MAIN_THREADS = 100;\n    private static final int SUB_THREADS = 100;\n    private static final ExecutorService RETURN_THREAD_POOL = Executors.newFixedThreadPool(SUB_THREADS);\n\n    private static final Logger LOG = LoggerFactory.getLogger(ThreadWoker.class);\n\n    public static void start(UpdateTask updateTask, Collection<? extends Runnable> updaters) {\n        start(updateTask, updaters, true);\n    }\n\n    public static void start(UpdateTask updateTask, Collection<? extends Runnable> updaters, int start, int end) {\n        start(updateTask, updaters, true, start, end);\n    }\n\n    public static void start(UpdateTask updateTask, Collection<? extends Runnable> updaters, boolean updateProgress) {\n        start(updateTask, updaters, updateProgress, 0, 100);\n    }\n\n    public static void start(UpdateTask updateTask, Collection<? extends Runnable> updaters, boolean updateProgress, int start, int end) {\n        ExecutorService threadPool = Executors.newFixedThreadPool(MAIN_THREADS);\n        try {\n            LOG.info(\"Starting \" + updaters.size() + \" main threads\");\n            List<Future<?>> futures = new ArrayList<Future<?>>();\n            for (Runnable runnable : updaters) {\n                futures.add(threadPool.submit(runnable));\n<｜fim▁hole｜>                        threadPool.shutdownNow();\n                    } else if (updateProgress) {\n                        int progress = 0;\n                        for (Future<?> future : futures) {\n                            if (future.isDone()) {\n                                progress++;\n                            }\n                        }\n                        updateTask.setTaskProgress(updaters.size(), progress, start, end);\n                    }\n                }\n            }\n            //Get errors (if any)\n            for (Future<?> future : futures) {\n                future.get();\n            }\n        } catch (InterruptedException ex) {\n            //No problem\n        } catch (ExecutionException ex) {\n            throwExecutionException(ex);\n        }\n    }\n\n    public static <K> List<Future<K>> startReturn(UpdateTask updateTask, Collection<? extends Callable<K>> updaters) throws InterruptedException {\n        return startReturn(updateTask, updaters, false);\n    }\n\n    public static <K> List<Future<K>> startReturn(UpdateTask updateTask, Collection<? extends Callable<K>> updaters, boolean updateProgress) throws InterruptedException {\n        return startReturn(updateTask, updaters, updateProgress, 0, 100);\n    }\n\n    public static <K> List<Future<K>> startReturn(UpdateTask updateTask, Collection<? extends Callable<K>> updaters, boolean updateProgress, int start, int end) throws InterruptedException {\n        if (updateTask != null && updateTask.isCancelled()) {\n            throw new TaskCancelledException();\n        }\n        LOG.info(\"Starting \" + updaters.size() + \" sub threads\");\n        List<Future<K>> futures = new ArrayList<Future<K>>();\n        for (Callable<K> callable : updaters) {\n            futures.add(RETURN_THREAD_POOL.submit(callable));\n        }\n        int done = 0;\n        while (done < futures.size()) {\n            done = 0;\n            for (Future<?> future : futures) {\n                if (future.isDone()) {\n                    done++;\n                }\n            }\n            if (updateTask != null) {\n                if (updateTask.isCancelled()) { //If task is cancelled\n                    for (Future<?> future : futures) { //cancel all threads\n                        future.cancel(true);\n                    }\n                    throw new TaskCancelledException(); //Stop parent Task\n                } else if (updateProgress) {\n                    updateTask.setTaskProgress(updaters.size(), done, start, end);\n                }\n            }\n            Thread.sleep(500);\n        }\n        return futures;\n    }\n\n    public static class TaskCancelledException extends RuntimeException {\n\n    }\n\n    private static <E extends Exception> void throwExecutionException(ExecutionException ex) throws E {\n        throwExecutionException(null, ex);\n    }\n\n    public static <E extends Exception> void throwExecutionException(Class<E> clazz, ExecutionException ex) throws E {\n        Throwable cause = ex.getCause();\n        if (clazz != null && cause.getClass().equals(clazz) ) {\n            throw clazz.cast(cause);\n        } else if (cause instanceof Error) {\n            throw (Error) cause;\n        } else if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n        } else {\n            throw new RuntimeException(cause);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "            }\n            threadPool.shutdown();\n            while (!threadPool.awaitTermination(500, TimeUnit.MICROSECONDS)) {\n                if (updateTask != null) {\n                    if (updateTask.isCancelled()) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.springframework.security.oauth2.client.endpoint;\n\nimport org.junit.jupiter.api.Test;\n\nimport org.springframework.security.oauth2.client.registration.ClientRegistration;\nimport org.springframework.security.oauth2.client.registration.TestClientRegistrations;\nimport org.springframework.security.oauth2.core.AuthorizationGrantType;\nimport org.springframework.security.oauth2.jwt.Jwt;\nimport org.springframework.security.oauth2.jwt.TestJwts;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;\n\npublic class JwtBearerGrantRequestTests {\n<｜fim▁hole｜>            .authorizationGrantType(AuthorizationGrantType.JWT_BEARER).build();\n\n    private final Jwt jwtAssertion = TestJwts.jwt().build();\n\n    @Test\n    public void constructorWhenClientRegistrationIsNullThenThrowIllegalArgumentException() {\n        assertThatIllegalArgumentException().isThrownBy(() -> new JwtBearerGrantRequest(null, this.jwtAssertion))\n                .withMessage(\"clientRegistration cannot be null\");\n    }\n\n    @Test\n    public void constructorWhenJwtIsNullThenThrowIllegalArgumentException() {\n        assertThatIllegalArgumentException().isThrownBy(() -> new JwtBearerGrantRequest(this.clientRegistration, null))\n                .withMessage(\"jwt cannot be null\");\n    }\n\n    @Test\n    public void constructorWhenClientRegistrationInvalidGrantTypeThenThrowIllegalArgumentException() {\n        ClientRegistration registration = TestClientRegistrations.clientCredentials().build();\n        assertThatIllegalArgumentException()\n                .isThrownBy(() -> new JwtBearerGrantRequest(registration, this.jwtAssertion))\n                .withMessage(\"clientRegistration.authorizationGrantType must be AuthorizationGrantType.JWT_BEARER\");\n    }\n\n    @Test\n    public void constructorWhenValidParametersProvidedThenCreated() {\n        JwtBearerGrantRequest jwtBearerGrantRequest = new JwtBearerGrantRequest(this.clientRegistration,\n                this.jwtAssertion);\n        assertThat(jwtBearerGrantRequest.getGrantType()).isEqualTo(AuthorizationGrantType.JWT_BEARER);\n        assertThat(jwtBearerGrantRequest.getClientRegistration()).isSameAs(this.clientRegistration);\n        assertThat(jwtBearerGrantRequest.getJwt()).isSameAs(this.jwtAssertion);\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    private final ClientRegistration clientRegistration = TestClientRegistrations.clientRegistration()\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package gov.nih.nci.cadsr.freestylesearch.util;\n\nimport gov.nih.nci.cadsr.domain.AdministeredComponent;\n\npublic class SearchResultsWithAC\n{\n    /**\n     * Constructor\n     * \n     * @param obj_ the result object \n     * @param ac_ the caCORE API Administered Component\n     *\n     */\n    public SearchResultsWithAC(SearchResultObject obj_, AdministeredComponent ac_)\n    {\n        _obj = obj_;\n        _ac = ac_;\n    }\n\n    /**\n     * Get the SearchResultObject element.\n     * \n     * @return a SearchResultObject (never null)\n     */\n    public SearchResultObject getResultObject()\n    {\n<｜fim▁hole｜>     * \n     * @return an AdministeredComponent or null if an error occurred retrieving the record details through the caCORE API\n     */\n    public AdministeredComponent getAdministeredComponent()\n    {\n        return _ac;\n    }\n\n    private SearchResultObject _obj;\n    private AdministeredComponent _ac;\n}<｜fim▁end｜>",
    "response": "        return _obj;\n    }\n\n    /**\n     * Get the AdministeredComponent element.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.devopsjavaspring.config;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.support.ReloadableResourceBundleMessageSource;\n\n@Configuration\npublic class I18nConfig {\n\n<｜fim▁hole｜>        ReloadableResourceBundleMessageSource resourceBundleMessageSource = new ReloadableResourceBundleMessageSource();\n        resourceBundleMessageSource.setBasename(\"classpath:i18n/messages\");\n        // Checks for new messages every 30 minutes\n        resourceBundleMessageSource.setCacheSeconds(1800);\n        return resourceBundleMessageSource;\n    }\n}<｜fim▁end｜>",
    "response": "    @Bean\n    public ReloadableResourceBundleMessageSource messageSource(){\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.springframework.boot.autoconfigure.mobile;\n\nimport org.thymeleaf.spring4.view.ThymeleafViewResolver;\n\nimport org.springframework.boot.autoconfigure.AutoConfigureAfter;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\nimport org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration;\nimport org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration;\nimport org.springframework.boot.autoconfigure.mustache.web.MustacheViewResolver;\nimport org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration;\nimport org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.mobile.device.view.LiteDeviceDelegatingViewResolver;\nimport org.springframework.web.servlet.view.InternalResourceViewResolver;\nimport org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\nimport org.springframework.web.servlet.view.groovy.GroovyMarkupViewResolver;\n\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass(LiteDeviceDelegatingViewResolver.class)\n@ConditionalOnProperty(prefix = \"spring.mobile.devicedelegatingviewresolver\", name = \"enabled\", havingValue = \"true\")\n@EnableConfigurationProperties(DeviceDelegatingViewResolverProperties.class)\n@AutoConfigureAfter({ WebMvcAutoConfiguration.class, FreeMarkerAutoConfiguration.class,\n        GroovyTemplateAutoConfiguration.class, MustacheAutoConfiguration.class,\n        ThymeleafAutoConfiguration.class })\npublic class DeviceDelegatingViewResolverAutoConfiguration {\n\n    @Configuration\n    protected static class LiteDeviceDelegatingViewResolverFactoryConfiguration {\n\n        @Bean\n        public DeviceDelegatingViewResolverFactory deviceDelegatingViewResolverFactory(\n                DeviceDelegatingViewResolverProperties properties) {\n            return new DeviceDelegatingViewResolverFactory(properties);\n        }\n\n    }\n\n    @Configuration\n    @ConditionalOnClass(FreeMarkerViewResolver.class)\n    protected static class DeviceDelegatingFreeMarkerViewResolverConfiguration {\n\n        @Bean\n        @ConditionalOnBean(FreeMarkerViewResolver.class)\n        public LiteDeviceDelegatingViewResolver deviceDelegatingFreeMarkerViewResolver(\n                DeviceDelegatingViewResolverFactory factory,\n                FreeMarkerViewResolver viewResolver) {\n            return factory.createViewResolver(viewResolver);\n        }\n\n    }\n\n    @Configuration\n    @ConditionalOnClass(GroovyMarkupViewResolver.class)\n    protected static class DeviceDelegatingGroovyMarkupViewResolverConfiguration {\n\n        @Bean\n        @ConditionalOnBean(GroovyMarkupViewResolver.class)\n        public LiteDeviceDelegatingViewResolver deviceDelegatingGroovyMarkupViewResolver(\n                DeviceDelegatingViewResolverFactory factory,\n                GroovyMarkupViewResolver viewResolver) {\n            return factory.createViewResolver(viewResolver);\n        }\n\n    }\n\n    @Configuration\n    @ConditionalOnClass(InternalResourceViewResolver.class)\n    protected static class DeviceDelegatingJspViewResolverConfiguration {\n\n        @Bean\n        @ConditionalOnBean(InternalResourceViewResolver.class)\n        public LiteDeviceDelegatingViewResolver deviceDelegatingJspViewResolver(\n                DeviceDelegatingViewResolverFactory factory,\n                InternalResourceViewResolver viewResolver) {\n            return factory.createViewResolver(viewResolver);\n        }\n\n    }\n\n    @Configuration\n    @ConditionalOnClass(MustacheViewResolver.class)\n    protected static class DeviceDelegatingMustacheViewResolverConfiguration {\n\n        @Bean\n        @ConditionalOnBean(MustacheViewResolver.class)\n<｜fim▁hole｜>\n    }\n\n    @Configuration\n    @ConditionalOnClass(ThymeleafViewResolver.class)\n    protected static class DeviceDelegatingThymeleafViewResolverConfiguration {\n\n        @Bean\n        @ConditionalOnBean(ThymeleafViewResolver.class)\n        public LiteDeviceDelegatingViewResolver deviceDelegatingThymeleafViewResolver(\n                DeviceDelegatingViewResolverFactory factory,\n                ThymeleafViewResolver viewResolver) {\n            return factory.createViewResolver(viewResolver);\n        }\n\n    }\n\n}<｜fim▁end｜>",
    "response": "        public LiteDeviceDelegatingViewResolver deviceDelegatingMustacheViewResolver(\n                DeviceDelegatingViewResolverFactory factory,\n                MustacheViewResolver viewResolver) {\n            return factory.createViewResolver(viewResolver);\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.spotify.heroic.consumer.kafka;\n\nimport com.spotify.heroic.consumer.ConsumerSchema;\nimport com.spotify.heroic.consumer.ConsumerSchemaValidationException;\nimport com.spotify.heroic.statistics.ConsumerReporter;\nimport eu.toolchain.async.AsyncFramework;\nimport eu.toolchain.async.AsyncFuture;\nimport eu.toolchain.async.ResolvableFuture;\nimport kafka.consumer.KafkaStream;\nimport kafka.message.MessageAndMetadata;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.LongAdder;\n\n@Slf4j\npublic final class ConsumerThread extends Thread {\n    private static final long INITIAL_SLEEP = 5;\n    private static final long MAX_SLEEP = 40;\n\n    private final AsyncFramework async;\n<｜fim▁hole｜>    private final LongAdder consumed;\n    // use a latch as a signal so that we can block on it instead of Thread#sleep (or similar) which\n    // would be a pain to\n    // interrupt.\n    private final CountDownLatch stopSignal = new CountDownLatch(1);\n\n    protected final ResolvableFuture<Void> stopFuture;\n\n    private volatile AtomicReference<CountDownLatch> paused = new AtomicReference<>();\n\n    public ConsumerThread(\n        final AsyncFramework async, final String name, final ConsumerReporter reporter,\n        final KafkaStream<byte[], byte[]> stream, final ConsumerSchema.Consumer schema,\n        final AtomicInteger active, final AtomicLong errors, final LongAdder consumed\n    ) {\n        super(String.format(\"%s: %s\", ConsumerThread.class.getCanonicalName(), name));\n\n        this.async = async;\n        this.name = name;\n        this.reporter = reporter;\n        this.stream = stream;\n        this.schema = schema;\n        this.active = active;\n        this.errors = errors;\n        this.consumed = consumed;\n\n        this.stopFuture = async.future();\n    }\n\n    @Override\n    public void run() {\n        log.info(\"{}: Starting thread\", name);\n\n        active.incrementAndGet();\n\n        try {\n            guardedRun();\n        } catch (final Throwable e) {\n            log.error(\"{}: Error in thread\", name, e);\n            active.decrementAndGet();\n            stopFuture.fail(e);\n            return;\n        }\n\n        log.info(\"{}: Stopping thread\", name);\n        active.decrementAndGet();\n        stopFuture.resolve(null);\n        return;\n    }\n\n    public AsyncFuture<Void> pauseConsumption() {\n        final CountDownLatch old = this.paused.getAndSet(new CountDownLatch(1));\n\n        if (old != null) {\n            old.countDown();\n        }\n\n        return async.resolved();\n    }\n\n    public AsyncFuture<Void> resumeConsumption() {\n        final CountDownLatch old = this.paused.getAndSet(null);\n\n        if (old != null) {\n            old.countDown();\n        }\n\n        return async.resolved();\n    }\n\n    public boolean isPaused() {\n        return this.paused.get() != null;\n    }\n\n    public AsyncFuture<Void> shutdown() {\n        stopSignal.countDown();\n\n        final CountDownLatch old = this.paused.getAndSet(null);\n\n        if (old != null) {\n            old.countDown();\n        }\n\n        return stopFuture;\n    }\n\n    private void guardedRun() throws Exception {\n        for (final MessageAndMetadata<byte[], byte[]> m : stream) {\n            parkPaused();\n\n            if (stopSignal.getCount() == 0) {\n                break;\n            }\n\n            final byte[] body = m.message();\n            retryUntilSuccessful(body);\n        }\n    }\n\n    private void parkPaused() throws InterruptedException {\n        CountDownLatch p = paused.get();\n\n        if (p == null) {\n            return;\n        }\n\n        log.info(\"Pausing\");\n\n        /* block on stop signal while paused, re-check since multiple calls to {#link #pause()}\n         * might swap it */\n        while (p != null && stopSignal.getCount() > 0) {\n            p.await();\n            p = paused.get();\n        }\n\n        log.info(\"Resuming\");\n    }\n\n    private void retryUntilSuccessful(final byte[] body) throws InterruptedException {\n        long sleep = INITIAL_SLEEP;\n\n        while (stopSignal.getCount() > 0) {\n            final boolean retry = consumeOne(body);\n\n            if (retry) {\n                handleRetry(sleep);\n                sleep = Math.min(sleep * 2, MAX_SLEEP);\n                continue;\n            }\n\n            break;\n        }\n    }\n\n    private boolean consumeOne(final byte[] body) {\n        try {\n            schema.consume(body);\n            reporter.reportMessageSize(body.length);\n            consumed.increment();\n            return false;\n        } catch (final ConsumerSchemaValidationException e) {\n            /* these messages should be ignored */\n            reporter.reportConsumerSchemaError();\n            return false;\n        } catch (final Exception e) {\n            errors.incrementAndGet();\n            log.error(\"{}: Failed to consume\", name, e);\n            reporter.reportMessageError();\n            return true;\n        }\n    }\n\n    private void handleRetry(long sleep) throws InterruptedException {\n        log.info(\"{}: Retrying in {} second(s)\", name, sleep);\n\n        /* decrementing the number of active active consumers indicates an error to the consumer\n         * module. This makes sure that the status of the service is set to as 'failing'. */\n        active.decrementAndGet();\n        stopSignal.await(sleep, TimeUnit.SECONDS);\n        active.incrementAndGet();\n    }\n}<｜fim▁end｜>",
    "response": "    private final String name;\n    private final ConsumerReporter reporter;\n    private final KafkaStream<byte[], byte[]> stream;\n    private final ConsumerSchema.Consumer schema;\n    private final AtomicInteger active;\n    private final AtomicLong errors;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>\n}\n\nclass Bar1 {\n\n  void m(Bar b) {\n    Bar3 r = b::foo;\n  }\n}\n\ninterface Bar3 {\n  void m(int i, Bar1 v);\n}<｜fim▁end｜>",
    "response": "class Bar {\n  void f<caret>oo(int i, Bar1 b1) {\n  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.druid.tests.coordinator.duty;\n\nimport com.google.inject.Inject;\nimport org.apache.druid.data.input.MaxSizeSplitHintSpec;\nimport org.apache.druid.indexer.partitions.DynamicPartitionsSpec;\nimport org.apache.druid.indexer.partitions.PartitionsSpec;\nimport org.apache.druid.java.util.common.granularity.Granularities;\nimport org.apache.druid.java.util.common.logger.Logger;\nimport org.apache.druid.server.coordinator.CoordinatorCompactionConfig;\nimport org.apache.druid.server.coordinator.DataSourceCompactionConfig;\nimport org.apache.druid.server.coordinator.UserCompactionTaskGranularityConfig;\nimport org.apache.druid.server.coordinator.UserCompactionTaskIOConfig;\nimport org.apache.druid.server.coordinator.UserCompactionTaskQueryTuningConfig;\nimport org.apache.druid.testing.IntegrationTestingConfig;\nimport org.apache.druid.testing.clients.CompactionResourceTestClient;\nimport org.apache.druid.testing.guice.DruidTestModuleFactory;\nimport org.apache.druid.tests.TestNGGroup;\nimport org.apache.druid.tests.indexer.AbstractIndexerTest;\nimport org.joda.time.Period;\nimport org.testng.Assert;\nimport org.testng.annotations.Guice;\nimport org.testng.annotations.Test;\n\n@Test(groups = {TestNGGroup.UPGRADE})\n@Guice(moduleFactory = DruidTestModuleFactory.class)\npublic class ITAutoCompactionUpgradeTest extends AbstractIndexerTest\n{\n  private static final Logger LOG = new Logger(ITAutoCompactionUpgradeTest.class);\n  private static final String UPGRADE_DATASOURCE_NAME = \"upgradeTest\";\n\n  @Inject\n  protected CompactionResourceTestClient compactionResource;\n\n  @Inject\n  private IntegrationTestingConfig config;\n\n  @Test\n  public void testUpgradeAutoCompactionConfigurationWhenConfigurationFromOlderVersionAlreadyExist() throws Exception\n  {\n    // Verify that compaction config already exist. This config was inserted manually into the database using SQL script.\n    // This auto compaction configuration payload is from Druid 0.21.0\n    CoordinatorCompactionConfig coordinatorCompactionConfig = compactionResource.getCoordinatorCompactionConfigs();\n    DataSourceCompactionConfig foundDataSourceCompactionConfig = null;\n    for (DataSourceCompactionConfig dataSourceCompactionConfig : coordinatorCompactionConfig.getCompactionConfigs()) {\n      if (dataSourceCompactionConfig.getDataSource().equals(UPGRADE_DATASOURCE_NAME)) {\n        foundDataSourceCompactionConfig = dataSourceCompactionConfig;\n      }\n    }\n    Assert.assertNotNull(foundDataSourceCompactionConfig);\n\n    // Now submit a new auto compaction configuration\n    PartitionsSpec newPartitionsSpec = new DynamicPartitionsSpec(4000, null);\n    Period newSkipOffset = Period.seconds(0);\n\n    DataSourceCompactionConfig compactionConfig = new DataSourceCompactionConfig(\n        UPGRADE_DATASOURCE_NAME,\n        null,\n        null,\n        null,\n        newSkipOffset,\n        new UserCompactionTaskQueryTuningConfig(\n            null,\n            null,\n            null,\n            new MaxSizeSplitHintSpec(null, 1),\n            newPartitionsSpec,\n            null,\n            null,\n            null,\n            null,\n            null,\n<｜fim▁hole｜>            null,\n            1\n        ),\n        new UserCompactionTaskGranularityConfig(Granularities.YEAR, null, null),\n        null,\n        null,\n        new UserCompactionTaskIOConfig(true),\n        null\n    );\n    compactionResource.submitCompactionConfig(compactionConfig);\n\n    // Wait for compaction config to persist\n    Thread.sleep(2000);\n\n    // Verify that compaction was successfully updated\n    coordinatorCompactionConfig = compactionResource.getCoordinatorCompactionConfigs();\n    foundDataSourceCompactionConfig = null;\n    for (DataSourceCompactionConfig dataSourceCompactionConfig : coordinatorCompactionConfig.getCompactionConfigs()) {\n      if (dataSourceCompactionConfig.getDataSource().equals(UPGRADE_DATASOURCE_NAME)) {\n        foundDataSourceCompactionConfig = dataSourceCompactionConfig;\n      }\n    }\n    Assert.assertNotNull(foundDataSourceCompactionConfig);\n    Assert.assertNotNull(foundDataSourceCompactionConfig.getTuningConfig());\n    Assert.assertEquals(foundDataSourceCompactionConfig.getTuningConfig().getPartitionsSpec(), newPartitionsSpec);\n    Assert.assertEquals(foundDataSourceCompactionConfig.getSkipOffsetFromLatest(), newSkipOffset);\n  }\n}<｜fim▁end｜>",
    "response": "            1,\n            null,\n            null,\n            null,\n            null,\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.haulmont.cuba.core.global.filter;\n\nimport com.haulmont.chile.core.datatypes.impl.EnumClass;\nimport com.haulmont.cuba.core.entity.*;\n\nimport java.util.Arrays;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\nimport static java.lang.String.format;\n\npublic class SecurityJpqlGenerator extends AbstractJpqlGenerator {\n    @Override\n    protected String generateClauseText(Clause condition) {\n        ParameterInfo parameterInfo = condition.getParameters().iterator().next();\n<｜fim▁hole｜>        Op operator = condition.getOperator();\n        String jpqlOperator = operator.forJpql();\n        String parameterInfoValue = parameterInfo.getValue();\n\n        String valueToString = valueToString(javaClass, parameterInfoValue, operator);\n\n        if (condition.getType() == ConditionType.RUNTIME_PROPERTY) {\n            return condition.getContent().replace(\":\" + parameterInfo.getName(), valueToString);\n        } else if (operator.isUnary()) {\n            return format(\"{E}.%s %s\", condition.getName(), jpqlOperator);\n        } else if (Entity.class.isAssignableFrom(javaClass)) {\n            return String.format(\"{E}.%s.id %s %s\", condition.getName(), jpqlOperator, valueToString);\n        } else {\n            return String.format(\"{E}.%s %s %s\", condition.getName(), jpqlOperator, valueToString);\n        }\n    }\n\n    protected String valueToString(Class javaClass, String value, Op operator) {\n        if (value == null) {\n            return \"null\";\n        } else if (operator == Op.IN || operator == Op.NOT_IN) {\n            // IN operator has its own logic, because we have to convert string with default values to the right form\n            if (value.startsWith(\"[\") || value.startsWith(\"(\")) {\n                value = value.replaceAll(\"[\\\\[\\\\]()]\", \"\");\n            }\n\n            String[] splittedValues = value.split(\",\");\n            String convertedValue = Arrays.stream(splittedValues)\n                    .map(String::trim)\n                    .map(v -> valueToString(javaClass, v, Op.EQUAL))\n                    .collect(Collectors.joining(\", \", \"(\", \")\"));\n           return convertedValue;\n        } else  if (Number.class.isAssignableFrom(javaClass)\n                || Boolean.class.isAssignableFrom(javaClass)) {\n            return value;\n        } else if (EnumClass.class.isAssignableFrom(javaClass)) {\n            //noinspection unchecked\n            Enum enumValue = Enum.valueOf(javaClass, value);\n            Object enumId = ((EnumClass) enumValue).getId();\n            return (enumId instanceof Number) ? enumId.toString() : \"'\" + enumId + \"'\";\n        } else if (Entity.class.isAssignableFrom(javaClass)) {\n            if (BaseIntegerIdEntity.class.isAssignableFrom(javaClass)\n                    || BaseLongIdEntity.class.isAssignableFrom(javaClass)\n                    || BaseDbGeneratedIdEntity.class.isAssignableFrom(javaClass)) {\n                return value;\n            } else {\n                return \"'\" + value + \"'\";\n            }\n        } else {\n            if (operator == Op.CONTAINS || operator == Op.DOES_NOT_CONTAIN) {\n                return \"'%\" + value + \"%'\";\n            } else if (operator == Op.STARTS_WITH) {\n                return \"'\" + value + \"%'\";\n            } else if (operator == Op.ENDS_WITH) {\n                return \"'%\" + value + \"'\";\n            }\n            return \"'\" + value + \"'\";\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        Class javaClass = parameterInfo.getJavaClass();\n        if (javaClass == null) {\n            throw new UnsupportedOperationException();\n        }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.luckymoneyhelper.services;\n\nimport android.accessibilityservice.AccessibilityService;\nimport android.annotation.SuppressLint;\nimport android.app.Notification;\nimport android.app.PendingIntent;\nimport android.content.SharedPreferences;\nimport android.util.Log;\nimport android.view.accessibility.AccessibilityEvent;\nimport android.view.accessibility.AccessibilityNodeInfo;\n\nimport com.luckymoneyhelper.constants.Const;\n\nimport java.util.List;\n\npublic class LuckyMoneyDealService extends AccessibilityService {\n    private final String TAG = getClass().getSimpleName();\n\n    @Override\n    public void onAccessibilityEvent(AccessibilityEvent event) {\n        int eventType = event.getEventType();\n        switch (eventType) {\n            case AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED://监听通知栏信息\n                List<CharSequence> texts = event.getText();\n                if (!texts.isEmpty()) {\n                    for (CharSequence text : texts) {\n                        String content = text.toString();\n\n                        if (content.contains(Const.TYPE_NOTIFICATION_STATE_TIP)) {\n                            //模拟打开通知栏消息\n                            if (event.getParcelableData() != null && event.getParcelableData() instanceof Notification) {\n                                Notification notification = (Notification) event.getParcelableData();\n                                PendingIntent pendingIntent = notification.contentIntent;\n                                try {\n                                    pendingIntent.send();\n                                } catch (PendingIntent.CanceledException e) {\n                                    e.printStackTrace();\n                                }\n                            }\n                        }\n                    }\n                }\n                break;\n            case AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED://监听是否进入微信红包信息界面\n                String className = event.getClassName().toString();\n                if (className.equals(\"com.tencent.mm.ui.LauncherUI\")) {\n                    //开始抢红包\n                    robPacket();\n                    //如果开启了超级模式就抢到后拆红包\n                    if (getSharedPreferences(Const.CONFIG, MODE_PRIVATE).getBoolean(Const.IS_SUPER_MODEL, false)) {\n                        openPacket();\n                    }\n                } else if (className.equals(\"com.tencent.mm.plugin.luckymoney.ui.LuckyMoneyReceiveUI\")) {\n                    //开始打开红包\n                    openPacket();\n                }\n                break;\n        }\n    }\n\n    /**\n     * 抢红包\n     */\n    @SuppressLint(\"NewApi\")\n    private void robPacket() {\n        AccessibilityNodeInfo rootNode = getRootInActiveWindow();\n        recycle(rootNode);\n    }\n\n    /**\n     * 打开红包\n     */\n    @SuppressLint(\"NewApi\")\n    private void openPacket() {\n        AccessibilityNodeInfo nodeInfo = getRootInActiveWindow();\n        if (nodeInfo != null) {\n            List<AccessibilityNodeInfo> list = nodeInfo.findAccessibilityNodeInfosByText(\"抢红包\");\n            for (AccessibilityNodeInfo n : list) {\n                n.performAction(AccessibilityNodeInfo.ACTION_CLICK);\n            }\n        }\n    }\n\n<｜fim▁hole｜>     */\n    @SuppressLint(\"NewApi\")\n    public void recycle(AccessibilityNodeInfo info) {\n        if (info.getChildCount() == 0) {\n            if (info.getText() != null) {\n                if (Const.TYPE_VIEW_RECEIVE.equals(info.getText().toString())) {\n\n                    info.performAction(AccessibilityNodeInfo.ACTION_CLICK);\n                    AccessibilityNodeInfo parent = info.getParent();\n                    while (parent != null) {\n\n                        if (parent.isClickable()) {\n                            parent.performAction(AccessibilityNodeInfo.ACTION_CLICK);\n                            break;\n                        }\n                        parent = parent.getParent();\n                    }\n\n                }\n            }\n\n        } else {\n            for (int i = 0; i < info.getChildCount(); i++) {\n                if (info.getChild(i) != null) {\n                    recycle(info.getChild(i));\n                }\n            }\n        }\n    }\n\n    @Override\n    public void onInterrupt() {\n\n    }\n}<｜fim▁end｜>",
    "response": "    /**\n     * 打印一个节点的结构\n     *\n     * @param info\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package pro.friendlyted.mvnsh.plugin.mojo;\n\nimport java.io.File;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport org.apache.maven.plugin.AbstractMojo;\nimport org.apache.maven.plugin.MojoExecutionException;\nimport org.apache.maven.plugin.MojoFailureException;\nimport org.apache.maven.plugins.annotations.Component;\nimport org.apache.maven.plugins.annotations.Parameter;\nimport org.codehaus.plexus.util.DirectoryScanner;\nimport org.eclipse.aether.RepositorySystem;\nimport org.eclipse.aether.RepositorySystemSession;\nimport pro.friendlyted.mvnsh.core.api.FilesProvider;\nimport pro.friendlyted.mvnsh.core.api.MsException;\nimport pro.friendlyted.mvnsh.core.api.MsUpload;\n\npublic abstract class AbstractUploadMojo extends AbstractMojo {\n\n    @Component\n    private RepositorySystem repoSystem;\n\n    @Parameter(defaultValue = \"${repositorySystemSession}\", readonly = true)\n    private RepositorySystemSession repoSession;\n\n    @Parameter\n    private List<DirectoryScanner> scriptsList;\n\n    @Parameter(defaultValue = \"${project.artifactId}\")\n    private String artifactId;\n\n    @Parameter(defaultValue = \"${project.groupId}\")\n    private String groupId;\n\n    @Parameter(defaultValue = \"${project.version}\")\n    private String version;\n\n    @Override\n    public void execute() throws MojoExecutionException, MojoFailureException {\n        try {\n            if (scriptsList == null) {\n                throw new MojoExecutionException(\"Scripts directory must be defined\");\n            }\n\n            final MsUpload upload = createUploadProcessor();\n            setupUploadProcessor(upload);\n            upload.upload();\n        } catch (MsException ex) {\n            ex.printStackTrace();\n            throw new MojoExecutionException(\"\", ex);\n        }\n    }\n\n    protected abstract MsUpload createUploadProcessor();\n\n    protected void setupUploadProcessor(final MsUpload upload) {\n        upload.setGroupId(groupId);\n        upload.setArtifactId(artifactId);\n        upload.setVersion(version);\n        upload.setRepoSession(repoSession);\n        upload.setRepoSystem(repoSystem);\n        upload.setScriptsList(\n                scriptsList.stream()\n                        .peek(i -> i.scan())\n                        .map(i -> new FilesProvider() {\n                    @Override\n                    public File getBasedir() {\n                        return i.getBasedir();\n<｜fim▁hole｜>\n                    @Override\n                    public String[] getIncludedFiles() {\n                        return i.getIncludedFiles();\n                    }\n                })\n                        .collect(Collectors.toList())\n        );\n    }\n\n}<｜fim▁end｜>",
    "response": "                    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.Serializable;\n\npublic class PoisonPill implements Serializable {\n    Integer corruptTheCallStream = null;\n\n    PoisonPill(Integer corruptTheCallStream) {\n        this.corruptTheCallStream = corruptTheCallStream;\n    }\n\n    private void readObject(ObjectInputStream in)\n        throws IOException\n    {\n        if (CheckUnmarshalOnStopThread.typeToThrow !=\n            CheckUnmarshalOnStopThread.RUNTIME_PILL) {\n<｜fim▁hole｜>\n            throw new RuntimeException(\"Wrote a test object \" +\n                                       \"whos readObject method \" +\n                                       \"always throws a RuntimeException\");\n\n        }\n    }\n}<｜fim▁end｜>",
    "response": "\n            throw new Error(\"Wrote a test object whos readObject \" +\n                            \"method always throws an Error\");\n\n        } else {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package util;\n\nimport java.util.Iterator;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\npublic class Json {\n    /**\n     * 前台\n     * 输入String类型的json数据串，返回干净的数据并在每行结尾添加<br />\n     * @param str String类型的json数据串\n     * @return\n<｜fim▁hole｜>        str = str.replaceAll(\"\\\\{\", \"\");\n        str = str.replaceAll(\"\\\\}\", \"\");\n        str = str.replaceAll(\"\\\\\\\"\", \"\");\n        str = str.replaceAll(\"&;\", \"<br />\");\n        str = str.replaceAll(\"\\\\;\", \"<br />\");\n        strjson = str.replaceAll(\"&:\", \":\");\n        return strjson;\n    }\n    /**\n     * 后台\n     * 第一次的str最好是 String str = \"\";\n     * 整合成json格式的字符串\n     * @param str 整合成json格式的字符串\n     * @param key 关键字\n     * @param value 值\n     * @return\n     * @throws JSONException\n     */\n    public String put(String str,String key,String value) throws JSONException{\n        StringBuffer bf = new StringBuffer(str);\n        if(str.equals(\"\")){\n\n        }else{\n            bf.append(\"&;\");\n        }\n        bf.append(key + \"&:\" + value);\n        return bf.toString();\n    }\n}<｜fim▁end｜>",
    "response": "     * @throws JSONException\n     */\n    public String get(String str) throws JSONException{\n\n        String strjson = \"\";\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package generator.db;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ResultsData\n{\n    List lstData;\n    int status;\n\n    public ResultsData()\n    {    \n        lstData = new ArrayList();\n        status  = 0;\n    }\n\n    public ResultsData(List<?> lstData, int status)\n    {    \n        this.lstData = lstData;\n        this.status  = status;\n    }\n\n    public ResultsData(int status)\n    {    \n        this.status  = status;\n    }\n\n    public Object get(int idx)\n    {\n        return lstData.get(idx);\n    }    \n\n    public void add(Object obj)\n    {\n        lstData.add(obj);\n    }    \n\n<｜fim▁hole｜>\n    public int size()\n    {\n        return lstData.size();\n    }\n\n    public void setStatus(int status)\n    {\n        this.status = status;\n    }    \n\n    public List getData()\n    {\n        return lstData;\n    }\n\n    public void setData(List<?> lstData)\n    {\n        this.lstData = lstData;\n    }\n}<｜fim▁end｜>",
    "response": "    public int getStatus()\n    {\n        return status;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package es.devcircus.hibernate_examples.patterns_dao_mapping.model.employee.dao.impl;\n\nimport es.devcircus.hibernate_examples.patterns_dao_mapping.model.employee.dao.IEmployeeDao;\nimport es.devcircus.hibernate_examples.patterns_dao_mapping.model.employee.vo.Employee;\nimport es.devcircus.hibernate_examples.patterns_dao_mapping.util.DefaultDao;\nimport es.devcircus.hibernate_examples.patterns_dao_mapping.util.HibernateUtil;\nimport es.devcircus.hibernate_examples.patterns_dao_mapping.util.exceptions.DaoException;\nimport es.devcircus.hibernate_examples.patterns_dao_mapping.util.exceptions.ElementAlreadyExistException;\nimport es.devcircus.hibernate_examples.patterns_dao_mapping.util.exceptions.ElementNonExistException;\nimport java.util.List;\nimport org.hibernate.Session;\nimport org.hibernate.SessionFactory;\n\npublic class DefaultEmployeeDao extends DefaultDao implements IEmployeeDao {\n\n    /**\n     * Método que nos permite recuperar la lista de empleados desde la base de\n     * datos.\n     *\n     * @return Lista de objetos empleados que contiene los datos de todos los\n     * empleados almacenados en la base de datos.\n     * @throws DaoException\n     */\n    @Override\n    public List<Employee> list()\n            throws DaoException {\n        SessionFactory sf = HibernateUtil.getSessionFactory();\n        Session session = sf.openSession();\n        // Recuperamos la lista de empleados\n        List<Employee> employees = session.createQuery(\"from Employee\").list();\n        session.close();\n        return employees;\n    }\n\n    /**\n     * Método que nos permite recuperar los datos de un empleado determinado\n     * especificando su identificador.\n     *\n     * @param id Identificador del empleado del cual deseamos recupear la\n     * información almacenada en la base de datos.\n     * @return Objeto empleado que contiene los datos del empleado\n     * correspondientes al identificador proporcionado.\n     * @throws DaoException\n     */\n    @Override\n    public Employee read(Long id)\n            throws DaoException {\n        SessionFactory sf = HibernateUtil.getSessionFactory();\n        Session session = sf.openSession();\n        // Recuperamos la instancia de empleado que coincide con el id que hemos\n        // pasado como parámetro en la función.\n        Employee employee = (Employee) session.get(Employee.class, id);\n        session.close();\n        return employee;\n    }\n\n    /**\n     * Método que nos permite almacenar un nuevo objeto empleado en la base de\n     * datos.\n     *\n     * @param employee Objeto empleado que deseamos almacenar en la base de\n     * datos.\n     * @return Objeto que contiene la información del objeto que hemos\n     * almacenado en la base de datos. En este caso, a mayores de los datos\n     * indicados, este objeto contiene el identificador del emepleado.\n     * @throws DaoException\n     * @throws ElementAlreadyExistException\n     */\n    @Override\n    public Employee save(Employee employee)\n            throws DaoException, ElementAlreadyExistException {\n        SessionFactory sf = HibernateUtil.getSessionFactory();\n        Session session = sf.openSession();\n        // Iniciamos el contecto de transacción.\n        session.beginTransaction();\n        // Creamos un nuevo elemento dentro de la base de datos.\n        Long id = (Long) session.save(employee);\n        // La función save nos retorna el id del nuevo elemento.\n        employee.setId(id);\n        // Finalizamos el contexto de transacción.\n        session.getTransaction().commit();\n        session.close();\n        return employee;\n    }\n\n    /**\n     * Método que nos permite modificar los datos de un empleado que ya exista\n     * en la base de datos.\n     *\n     * @param employee Objeto empleado en el que hemos almacenado la información\n     * del empleado modificada.\n     * @return el mismo objeto empleado que hemos actualizado en la base de\n<｜fim▁hole｜>     */\n    @Override\n    public Employee update(Employee employee)\n            throws DaoException, ElementNonExistException {\n        SessionFactory sf = HibernateUtil.getSessionFactory();\n        Session session = sf.openSession();\n        // Iniciamos el contexto de transacción.\n        session.beginTransaction();\n        // Actualizamos los datos del objeto en la base de datos.\n        session.merge(employee);\n        // Finalizamos el contexto de transacción.\n        session.getTransaction().commit();\n        session.close();\n        return employee;\n\n    }\n\n    /**\n     * Método que nos permite eliminar un empleado de la base de datos.\n     *\n     * @param employee Objeto empleado que queremos eliminar de la base de\n     * datos.\n     * @throws DaoException\n     * @throws ElementNonExistException\n     */\n    @Override\n    public void delete(Employee employee)\n            throws DaoException, ElementNonExistException {\n        SessionFactory sf = HibernateUtil.getSessionFactory();\n        Session session = sf.openSession();\n        // Iniciamos el contexto de transacción.\n        session.beginTransaction();\n        // Eliminamos el objeto de la base de datos.\n        session.delete(employee);\n        // Finalizamos el contexto de transacción.\n        session.getTransaction().commit();\n        session.close();\n    }\n\n}<｜fim▁end｜>",
    "response": "     * datos.\n     * @throws DaoException\n     * @throws ElementNonExistException\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ru.lightstar.clinic.servlet.drug;\n\nimport org.junit.Test;\nimport ru.lightstar.clinic.servlet.ServletTest;\n\nimport javax.servlet.ServletException;\n\n<｜fim▁hole｜>public class DrugServletTest extends ServletTest {\n\n    /**\n     * Test initializing servlet.\n     */\n    @Test\n    public void whenDoPostThenResult() throws ServletException {\n        final DrugServlet drugServlet = spy(new DrugServlet(){});\n        doReturn(this.context).when(drugServlet).getServletContext();\n\n        drugServlet.init();\n\n        verify(this.context, atLeastOnce()).getAttribute(\"clinicService\");\n        verify(this.context, atLeastOnce()).getAttribute(\"roleService\");\n        verify(this.context, atLeastOnce()).getAttribute(\"drugService\");\n        assertThat(drugServlet.drugService, is(this.drugService));\n    }\n}<｜fim▁end｜>",
    "response": "import static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package tuwien.auto.calimero.serial;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@SuppressWarnings(\"checkstyle:finalparameters\")\nclass SerialComAdapter extends LibraryAdapter\n{\n    // ctrl identifiers\n    static final int BAUDRATE = 1;\n    static final int PARITY = 2;\n    static final int DATABITS = 3;\n    static final int STOPBITS = 4;\n    static final int FLOWCTRL = 5;\n\n    // flow control modes\n    static final int FLOWCTRL_NONE = 0;\n    static final int FLOWCTRL_CTSRTS = 1;\n\n    // according DCB #defines in winbase.h\n    static final int PARITY_NONE = 0;\n    static final int PARITY_ODD = 1;\n    static final int PARITY_EVEN = 2;\n    static final int PARITY_MARK = 3;\n\n    static final int ONE_STOPBIT = 1;\n    static final int TWO_STOPBITS = 2;\n\n    static final int AVAILABLE_INPUT_STATUS = 2;\n    private static final int ERROR_STATUS = 1;\n    private static final int LINE_STATUS = 3;\n\n    // according EV #defines in winbase.h\n    // CTS, DSR, RLSD and RING are voltage level change events\n\n    // Any Character received\n    private static final int EVENT_RXCHAR = 0x0001;\n    // Received certain character\n    private static final int EVENT_RXFLAG = 0x0002;\n    // Transmit Queue Empty\n    private static final int EVENT_TXEMPTY = 0x0004;\n    // CTS changed state\n    private static final int EVENT_CTS = 0x0008;\n    // DSR changed state\n    private static final int EVENT_DSR = 0x0010;\n    // RLSD changed state\n    private static final int EVENT_RLSD = 0x0020;\n    // BREAK received\n    private static final int EVENT_BREAK = 0x0040;\n    // Line status error occurred\n    private static final int EVENT_ERR = 0x0080;\n    // Ring signal detected\n    private static final int EVENT_RING = 0x0100;\n\n    // error flags\n    // #define CE_RXOVER 0x0001 // Receive Queue overflow\n    // #define CE_OVERRUN 0x0002 // Receive Overrun Error\n    // #define CE_RXPARITY 0x0004 // Receive Parity Error\n    // #define CE_FRAME 0x0008 // Receive Framing error\n    // #define CE_BREAK 0x0010 // Break Detected\n    // #define CE_TXFULL 0x0100 // TX Queue is full\n    // #define CE_MODE 0x8000 // Requested mode unsupported\n\n    private static final boolean loaded;\n    private static final int INVALID_HANDLE = -1;\n\n    private long fd = INVALID_HANDLE;\n\n    static final class Timeouts\n    {\n        final int readInterval;\n        final int readTotalMultiplier;\n        final int readTotalConstant;\n        final int writeTotalMultiplier;\n        final int writeTotalConstant;\n\n        Timeouts(final int readInterval, final int readTotalMultiplier,\n            final int readTotalConstant, final int writeTotalMultiplier,\n            final int writeTotalConstant)\n        {\n            this.readInterval = readInterval;\n            this.readTotalMultiplier = readTotalMultiplier;\n            this.readTotalConstant = readTotalConstant;\n            this.writeTotalMultiplier = writeTotalMultiplier;\n            this.writeTotalConstant = writeTotalConstant;\n        }\n\n        @Override\n        public String toString()\n        {\n            return \"read \" + readInterval + \" read total \" + readTotalMultiplier + \" constant \"\n                    + readTotalConstant + \" write total \" + writeTotalMultiplier\n                    + \" write constant \" + writeTotalConstant;\n        }\n    }\n\n    static {\n        boolean b = false;\n        try {\n            LoggerFactory.getLogger(\"calimero.serial\").trace(\"check Java library path {}\", System.getProperty(\"java.library.path\"));\n            System.loadLibrary(\"serialcom\");\n            b = true;\n        }\n        catch (SecurityException | UnsatisfiedLinkError e) {\n            LoggerFactory.getLogger(\"calimero.serial\").info(e.getMessage());\n        }\n        loaded = b;\n    }\n\n    SerialComAdapter(final Logger logger, final String portId) throws IOException\n    {\n        super(logger);\n        if (portId == null)\n            throw new NullPointerException(\"no port id\");\n        if (!loaded)\n            throw new IOException(\"no serial I/O communication support\");\n        open(portId);\n    }\n\n    /**\n     * Returns whether the platform dependent serial communication library is available or not.\n     *\n     * @return <code>true</code> if library was loaded and is available, <code>false</code> if SerialComAdapter\n     *         functionality can not be used\n     */\n    static boolean isAvailable()\n    {\n        return loaded;\n    }\n\n    static native boolean portExists(String portId);\n\n    native int writeBytes(byte[] b, int off, int len) throws IOException;\n\n    native int write(int b) throws IOException;\n\n    native int readBytes(byte[] b, int off, int len) throws IOException;\n\n    // return of -1 indicates timeout\n    native int read() throws IOException;\n\n    native void setTimeouts(Timeouts times) throws IOException;\n\n    native Timeouts getTimeouts() throws IOException;\n\n    @Override\n    public final void setBaudRate(final int baudrate)\n    {\n        try {\n            setControl(BAUDRATE, baudrate);\n        }\n        catch (final IOException e) {\n            logger.error(\"set baudrate failed\", e);\n        }\n    }\n\n    @Override\n    public final int getBaudRate()\n    {\n        try {\n            return getControl(BAUDRATE);\n        }\n        catch (final IOException e) {\n            logger.error(\"get baudrate failed\", e);\n        }\n        return 0;\n<｜fim▁hole｜>    {\n        try {\n            return setControl(PARITY, parity);\n        }\n        catch (final IOException e) {\n            logger.error(\"set parity failed\", e);\n        }\n        return 0;\n    }\n\n    // returns 0 if getting parity failed\n    final int getParity()\n    {\n        try {\n            return getControl(PARITY);\n        }\n        catch (final IOException e) {\n            logger.error(\"get parity failed\", e);\n        }\n        return 0;\n    }\n\n    // clear communication error and get device status\n    native int getStatus(int type);\n\n    native int setControl(int control, int newValue) throws IOException;\n\n    native int getControl(int control) throws IOException;\n\n    @Override\n    public InputStream getInputStream()\n    {\n        if (fd == INVALID_HANDLE)\n            // throw new IOException();\n            return null;\n        return new PortInputStream(this);\n    }\n\n    @Override\n    public OutputStream getOutputStream()\n    {\n        if (fd == INVALID_HANDLE)\n            // throw new IOException();\n            return null;\n        return new PortOutputStream(this);\n    }\n\n    // any open input/output stream accessing this port becomes unusable\n    @Override\n    public final void close()\n    {\n        try {\n            if (fd != INVALID_HANDLE)\n                close0();\n        }\n        catch (final IOException e) {\n            logger.error(\"closing serial port\", e);\n        }\n        fd = INVALID_HANDLE;\n    }\n\n    private native void setEvents(int eventMask, boolean enable) throws IOException;\n\n    private native int waitEvent() throws IOException;\n\n    private native void open(String portId) throws IOException;\n\n    private native void close0() throws IOException;\n}<｜fim▁end｜>",
    "response": "    }\n\n    // will only set a supported parity, check result with getParity()\n    // return previous parity mode\n    final int setParity(final int parity)\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.musgame.bis.Chapter03.trident.topology;\n\nimport com.musgame.bis.Chapter03.trident.operator.*;\nimport com.musgame.bis.Chapter03.trident.spout.DiagnosisEventSpout;\nimport com.musgame.bis.Chapter03.trident.state.OutbreakTrendFactory;\n<｜fim▁hole｜>import org.apache.storm.generated.StormTopology;\nimport org.apache.storm.trident.Stream;\nimport org.apache.storm.trident.TridentTopology;\nimport org.apache.storm.trident.operation.builtin.Count;\nimport org.apache.storm.tuple.Fields;\n\npublic class OutbreakDetectionTopology {\n\n    public static StormTopology buildTopology() {\n        TridentTopology topology = new TridentTopology();\n        DiagnosisEventSpout spout = new DiagnosisEventSpout();\n        Stream inputStream = topology.newStream(\"event\", spout);\n\n        // Filter for critical events 过滤关键事件\n        inputStream.each(new Fields(\"event\"), new DiseaseFilter())\n\n                // Locate the closest city 找到最近的城市\n                .each(new Fields(\"event\"), new CityAssignment(), new Fields(\"city\"))\n\n                // Derive the hour segment 导出小时段\n                .each(new Fields(\"event\", \"city\"), new HourAssignment(),\n                        new Fields(\"hour\", \"cityDiseaseHour\"))\n\n                // Group occurrences in same city and hour 在同一城市按小时发生分组\n                .groupBy(new Fields(\"cityDiseaseHour\"))\n\n                // Count occurrences and persist the results 计算发现次数并持久保存结果\n                .persistentAggregate(new OutbreakTrendFactory(), new Count(), new Fields(\"count\"))\n                .newValuesStream()\n\n                // Detect an outbreak 检测发病\n                .each(new Fields(\"cityDiseaseHour\", \"count\"),\n                        new OutbreakDetector(),\n                        new Fields(\"alert\"))\n\n                // Dispatch the alert 发出警报\n                .each(new Fields(\"alert\"), new DispatchAlert(), new Fields());\n        return topology.build();\n    }\n\n    public static void main(String[] args) throws Exception {\n        Config conf = new Config();\n        LocalCluster cluster = new LocalCluster();\n        cluster.submitTopology(\"cdc\", conf, buildTopology());\n        Thread.sleep(200000);\n        cluster.shutdown();\n    }\n}<｜fim▁end｜>",
    "response": "import org.apache.storm.Config;\nimport org.apache.storm.LocalCluster;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.github.ayltai.newspaper.config;\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport javax.annotation.Nonnull;\nimport javax.inject.Singleton;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.preference.PreferenceManager;\n\nimport androidx.annotation.NonNull;\nimport androidx.collection.ArraySet;\n\nimport com.github.ayltai.newspaper.Constants;\nimport com.github.ayltai.newspaper.data.model.Category;\nimport com.github.ayltai.newspaper.data.model.Source;\n\n@Singleton\npublic final class PreferenceUserConfigs implements UserConfigs {\n    //region Constants\n\n    private static final String KEY_CONNECT_TIMEOUT = \"CONNECT_TIMEOUT\";\n    private static final String KEY_READ_TIMEOUT    = \"READ_TIMEOUT\";\n    private static final String KEY_WRITE_TIMEOUT   = \"WRITE_TIMEOUT\";\n    private static final String KEY_THEME           = \"THEME\";\n    private static final String KEY_STYLE           = \"STYLE\";\n    private static final String KEY_SOURCE_NAMES    = \"SOURCE_NAMES\";\n    private static final String KEY_CATEGORY_NAMES  = \"CATEGORY_NAMES\";\n\n    private static final int DEFAULT_CONNECT_TIMEOUT = 10;\n    private static final int DEFAULT_READ_TIMEOUT    = 30;\n    private static final int DEFAULT_WRITE_TIMEOUT   = 30;\n\n    //endregion\n\n    private static PreferenceUserConfigs instance;\n\n    @Nonnull\n    @NonNull\n    private final SharedPreferences preferences;\n\n    static void init(@Nonnull @NonNull @lombok.NonNull final Context context) {\n        if (PreferenceUserConfigs.instance == null) PreferenceUserConfigs.instance = new PreferenceUserConfigs(context);\n    }\n\n    @Nonnull\n    @NonNull\n    static UserConfigs getInstance() {\n        if (PreferenceUserConfigs.instance == null) throw new NullPointerException(\"Did you forget to call init()?\");\n\n        return PreferenceUserConfigs.instance;\n    }\n\n    private PreferenceUserConfigs(@Nonnull @NonNull @lombok.NonNull final Context context) {\n        this.preferences = PreferenceManager.getDefaultSharedPreferences(context);\n    }\n\n    @Override\n    public int getConnectTimeout() {\n        return this.preferences.getInt(PreferenceUserConfigs.KEY_CONNECT_TIMEOUT, PreferenceUserConfigs.DEFAULT_CONNECT_TIMEOUT);\n    }\n\n    @Override\n    public int getReadTimeout() {\n        return this.preferences.getInt(PreferenceUserConfigs.KEY_READ_TIMEOUT, PreferenceUserConfigs.DEFAULT_READ_TIMEOUT);\n    }\n\n    @Override\n    public int getWriteTimeout() {\n        return this.preferences.getInt(PreferenceUserConfigs.KEY_WRITE_TIMEOUT, PreferenceUserConfigs.DEFAULT_WRITE_TIMEOUT);\n    }\n\n    @Constants.Theme\n    @Override\n    public int getTheme() {\n        return this.preferences.getInt(PreferenceUserConfigs.KEY_THEME, Constants.THEME_LIGHT);\n    }\n\n    @Override\n    public void setTheme(final int theme) {\n        this.preferences\n            .edit()\n            .putInt(PreferenceUserConfigs.KEY_THEME, theme)\n            .commit();\n    }\n\n    @Constants.Style\n    @Override\n    public int getStyle() {\n        return this.preferences.getInt(PreferenceUserConfigs.KEY_STYLE, Constants.STYLE_COMFORTABLE);\n    }\n\n    @Override\n    public void setStyle(final int style) {\n        this.preferences\n            .edit()\n            .putInt(PreferenceUserConfigs.KEY_STYLE, style)\n            .commit();\n    }\n\n    @Nonnull\n    @NonNull\n    @Override\n    public List<String> getSourceNames() {\n        return new ArrayList<>(this.preferences.getStringSet(PreferenceUserConfigs.KEY_SOURCE_NAMES, new ArraySet<>(Source.DEFAULT_SOURCES)));\n    }\n\n    @Override\n    public void setSourceNames(@NonNull @Nonnull final List<String> sourceNames) {\n        this.preferences\n            .edit()\n            .putStringSet(PreferenceUserConfigs.KEY_SOURCE_NAMES, new HashSet<>(sourceNames))\n            .commit();\n    }\n<｜fim▁hole｜>    public List<String> getCategoryNames() {\n        return new ArrayList<>(this.preferences.getStringSet(PreferenceUserConfigs.KEY_CATEGORY_NAMES, new ArraySet<>(Category.DEFAULT_CATEGORIES)));\n    }\n\n    @Override\n    public void setCategoryNames(@NonNull @Nonnull final List<String> categoryNames) {\n        this.preferences\n            .edit()\n            .putStringSet(PreferenceUserConfigs.KEY_CATEGORY_NAMES, new HashSet<>(categoryNames))\n            .commit();\n    }\n}<｜fim▁end｜>",
    "response": "\n    @Nonnull\n    @NonNull\n    @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package wint.lang.convert.converts;\n\n<｜fim▁hole｜>\npublic class SmartTimestampConvert extends AbstractConvert<Timestamp> {\n\n    private SmartDateConvert smartDateConvert = new SmartDateConvert();\n\n    public Timestamp convertTo(Object input, Timestamp defaultValue) {\n        Date date = smartDateConvert.convertTo(input, defaultValue);\n        if (date == null) {\n            return defaultValue;\n        }\n        return new Timestamp(date.getTime());\n    }\n\n    public Timestamp getDefaultValue() {\n        return null;\n    }\n\n}<｜fim▁end｜>",
    "response": "import java.sql.Timestamp;\nimport java.util.Date;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package cz.zcu.kiv.jop.context;\n\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Queue;\n\nimport cz.zcu.kiv.jop.bean.Bean;\n\npublic class PopulatingQueueImpl implements PopulatingQueue {\n\n  /** Implementation of queue used for populating queue. */\n  private final Queue<Bean> queue = new LinkedList<Bean>();\n\n  /**\n   * {@inheritDoc}\n   */\n  public boolean enqueue(Bean dependency) {\n    // invalid dependencies\n    if (dependency == null || dependency.getInstance() == null) {\n<｜fim▁hole｜>    return queue.offer(dependency);\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  public Bean dequeue() {\n    return queue.poll();\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  public Bean front() {\n    return queue.peek();\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  public int size() {\n    return queue.size();\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  public boolean isEmpty() {\n    return queue.isEmpty();\n  }\n\n  /**\n   * {@inheritDoc}\n   */\n  public List<Bean> values() {\n    return new ArrayList<Bean>(queue);\n  }\n}<｜fim▁end｜>",
    "response": "      return false;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.intellij.psi;\n\nimport javax.annotation.Nullable;\n\npublic interface PsiForStatement extends PsiConditionalLoopStatement {\n  /**\n   * Returns the initialization part of the statement.\n   *\n   * @return the initialization part, or null if the statement is incomplete.\n   */\n  @Nullable\n  PsiStatement getInitialization();\n\n  /**\n   * Returns the condition part of the statement.\n   *\n   * @return the condition part, or null if the statement is incomplete.\n   */\n  @javax.annotation.Nullable\n  PsiExpression getCondition();\n\n  /**\n   * Returns the update part of the statement.\n   *\n<｜fim▁hole｜>   * Returns the opening parenthesis enclosing the statement header.\n   *\n   * @return the opening parenthesis, or null if the statement is incomplete.\n   */\n  @javax.annotation.Nullable\n  PsiJavaToken getLParenth();\n\n  /**\n   * Returns the closing parenthesis enclosing the statement header.\n   *\n   * @return the closing parenthesis, or null if the statement is incomplete.\n   */\n  @javax.annotation.Nullable\n  PsiJavaToken getRParenth();\n}<｜fim▁end｜>",
    "response": "   * @return the update part, or null if the statement is incomplete.\n   */\n  @javax.annotation.Nullable\n  PsiStatement getUpdate();\n\n  /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.camunda.bpm.engine.management;\n\nimport java.util.Date;\nimport java.util.List;\n\npublic interface MetricsQuery {\n\n  /**\n   * @see constants in {@link Metrics} for a list of names which can be used here.\n   *\n   * @param name The name of the metrics to query for\n   */\n  MetricsQuery name(String name);\n\n  /**\n   * Restrict to data collected by the reported with the given identifier\n   */\n  MetricsQuery reporter(String reporter);\n\n  /**\n   * Restrict to data collected after the given date (inclusive)\n   */\n  MetricsQuery startDate(Date startTime);\n\n  /**\n   * Restrict to data collected before the given date (exclusive)\n   */\n  MetricsQuery endDate(Date endTime);\n\n  /**\n   * Sets the offset of the returned results.\n   *\n   * @param offset indicates after which row the result begins\n   * @return the adjusted MetricsQuery\n   */\n  MetricsQuery offset(int offset);\n\n  /**\n   * Sets the limit row count of the result.\n   * Can't be set larger than 200, since it is the maximum row count which should be returned.\n   *\n   * @param maxResults the new row limit of the result\n   * @return the adjusted MetricsQuery\n   */\n  MetricsQuery limit(int maxResults);\n\n  /**\n   * Returns the metrics summed up and aggregated on a time interval.\n   * Default interval is 900 (15 minutes). The list size has a maximum of 200\n   * the maximum can be decreased with the MetricsQuery#limit method. Paging\n   * is enabled with the help of the offset.\n   *\n   * @return the aggregated metrics\n   */\n  List<MetricIntervalValue> interval();\n\n  /**\n   * Returns the metrics summed up and aggregated on a time interval.\n   * The size of the interval is given via parameter.\n<｜fim▁hole｜>   * @param interval The time interval on which the metrics should be aggregated.\n   *                  The time unit is seconds.\n   * @return the aggregated metrics\n   */\n  List<MetricIntervalValue> interval(long interval);\n\n  /**\n   * @return the aggregated sum\n   */\n  long sum();\n\n}<｜fim▁end｜>",
    "response": "   * The time unit is seconds! The list size has a maximum of 200\n   * the maximum can be decreased with the MetricsQuery#limit method. Paging\n   * is enabled with the help of the offset.\n   *\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.gemstone.gemfire.cache.client.internal;\n\n<｜fim▁hole｜>\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class PrimaryAckOp {\n  /**\n   * Send the primary server acknowledgement on the events this client\n   * has received and processed from it\n   * using connections from the given pool\n   * to communicate with the server.\n   * @param connection \n   * @param pool the pool to use to communicate with the server.\n   * @param events list of events to acknowledge\n   */\n  public static void execute(Connection connection, ExecutablePool pool,\n                             List events)\n  {\n    AbstractOp op = new PrimaryAckOpImpl(events);\n    pool.executeOn(connection, op);\n  }\n\n  private PrimaryAckOp() {\n    // no instances allowed\n  }\n\n  private static class PrimaryAckOpImpl extends AbstractOp {\n    /**\n     * @throws com.gemstone.gemfire.SerializationException if serialization fails\n     */\n    public PrimaryAckOpImpl(List events) {\n      super(MessageType.PERIODIC_ACK, events.size());\n      for (Iterator i = events.iterator(); i.hasNext();) {\n        getMessage().addObjPart(i.next());\n      }\n    }\n\n    @Override\n    protected void processSecureBytes(Connection cnx, Message message)\n        throws Exception {\n    }\n\n    @Override\n    protected boolean needsUserId() {\n      return false;\n    }\n\n    @Override\n    protected void sendMessage(Connection cnx) throws Exception {\n      getMessage().setEarlyAck((byte)(getMessage().getEarlyAckByte() & Message.MESSAGE_HAS_SECURE_PART));\n      getMessage().send(false);\n    }\n\n    @Override\n    protected Object processResponse(Message msg) throws Exception {\n      processAck(msg, \"primaryAck\");\n      return null;\n    }\n    @Override\n    protected boolean isErrorResponse(int msgType) {\n      return false;\n    }\n    @Override\n    protected long startAttempt(ConnectionStats stats) {\n      return stats.startPrimaryAck();\n    }\n    @Override\n    protected void endSendAttempt(ConnectionStats stats, long start) {\n      stats.endPrimaryAckSend(start, hasFailed());\n    }\n    @Override\n    protected void endAttempt(ConnectionStats stats, long start) {\n      stats.endPrimaryAck(start, hasTimedOut(), hasFailed());\n    }\n  }\n}<｜fim▁end｜>",
    "response": "import com.gemstone.gemfire.internal.cache.tier.MessageType;\nimport com.gemstone.gemfire.internal.cache.tier.sockets.Message;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package liquibase.command.core;\n\nimport liquibase.command.*;\nimport liquibase.configuration.ConfigurationValueObfuscator;\nimport liquibase.exception.CommandExecutionException;\n\npublic class UpdateCountSqlCommandStep extends AbstractCliWrapperCommandStep {\n\n    public static final String[] COMMAND_NAME = {\"updateCountSql\"};\n\n    public static final CommandArgumentDefinition<String> CHANGELOG_FILE_ARG;\n    public static final CommandArgumentDefinition<String> URL_ARG;\n    public static final CommandArgumentDefinition<String> DEFAULT_SCHEMA_NAME_ARG;\n    public static final CommandArgumentDefinition<String> DEFAULT_CATALOG_NAME_ARG;\n    public static final CommandArgumentDefinition<String> USERNAME_ARG;\n    public static final CommandArgumentDefinition<String> PASSWORD_ARG;\n    public static final CommandArgumentDefinition<String> LABELS_ARG;\n    public static final CommandArgumentDefinition<String> CONTEXTS_ARG;\n    public static final CommandArgumentDefinition<Integer> COUNT_ARG;\n    public static final CommandArgumentDefinition<String> CHANGE_EXEC_LISTENER_CLASS_ARG;\n    public static final CommandArgumentDefinition<String> CHANGE_EXEC_LISTENER_PROPERTIES_FILE_ARG;\n    public static final CommandArgumentDefinition<String> DRIVER_ARG;\n    public static final CommandArgumentDefinition<String> DRIVER_PROPERTIES_FILE_ARG;\n\n    static {\n        CommandBuilder builder = new CommandBuilder(COMMAND_NAME);\n        URL_ARG = builder.argument(CommonArgumentNames.URL, String.class).required()\n                .description(\"The JDBC database connection URL\").build();\n        DEFAULT_SCHEMA_NAME_ARG = builder.argument(\"defaultSchemaName\", String.class)\n                .description(\"The default schema name to use for the database connection\").build();\n        DEFAULT_CATALOG_NAME_ARG = builder.argument(\"defaultCatalogName\", String.class)\n                .description(\"The default catalog name to use for the database connection\").build();\n        DRIVER_ARG = builder.argument(\"driver\", String.class)\n                .description(\"The JDBC driver class\").build();\n        DRIVER_PROPERTIES_FILE_ARG = builder.argument(\"driverPropertiesFile\", String.class)\n                .description(\"The JDBC driver properties file\").build();\n        USERNAME_ARG = builder.argument(CommonArgumentNames.USERNAME, String.class)\n                .description(\"Username to use to connect to the database\").build();\n        PASSWORD_ARG = builder.argument(CommonArgumentNames.PASSWORD, String.class)\n                .description(\"Password to use to connect to the database\")\n                .setValueObfuscator(ConfigurationValueObfuscator.STANDARD)\n                .build();\n        CHANGELOG_FILE_ARG = builder.argument(CommonArgumentNames.CHANGELOG_FILE, String.class).required()\n                .description(\"The root changelog\").build();\n        LABELS_ARG = builder.argument(\"labels\", String.class)\n                .description(\"Changeset labels to match\").build();\n        CONTEXTS_ARG = builder.argument(\"contexts\", String.class)\n                .description(\"Changeset contexts to match\").build();\n        COUNT_ARG = builder.argument(\"count\", Integer.class).required()\n            .description(\"The number of changes to generate SQL for\").build();\n        CHANGE_EXEC_LISTENER_CLASS_ARG = builder.argument(\"changeExecListenerClass\", String.class)\n            .description(\"Fully-qualified class which specifies a ChangeExecListener\").build();\n        CHANGE_EXEC_LISTENER_PROPERTIES_FILE_ARG = builder.argument(\"changeExecListenerPropertiesFile\", String.class)\n            .description(\"Path to a properties file for the ChangeExecListenerClass\").build();\n    }\n\n    @Override\n    public String[][] defineCommandNames() {\n        return new String[][] { COMMAND_NAME };\n    }\n<｜fim▁hole｜>    }\n\n    @Override\n    public void adjustCommandDefinition(CommandDefinition commandDefinition) {\n        commandDefinition.setShortDescription(\"Generate the SQL to deploy the specified number of changes\");\n    }\n}<｜fim▁end｜>",
    "response": "\n    @Override\n    protected String[] collectArguments(CommandScope commandScope) throws CommandExecutionException {\n        return collectArguments(commandScope, null, \"count\");\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ru.spbau.mit;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\npublic final class Collections {\n    private Collections() {\n    }\n\n    public static <A, R> Collection<R> map(Function1<? super A, ? extends R> func,\n                                           Collection<? extends A> inpCol) {\n        Collection<R> mappedCol = new ArrayList<>();\n        for (A obj : inpCol) {\n            mappedCol.add(func.apply(obj));\n        }\n        return mappedCol;\n    }\n\n    public static <T> Collection<T> filter(Predicate<? super T> pred, Collection<? extends T> inpCol) {\n        Collection<T> filteredCol = new ArrayList<>();\n        for (T obj : inpCol) {\n            if (pred.apply(obj)) {\n                filteredCol.add(obj);\n            }\n        }\n        return filteredCol;\n    }\n\n    public static <T> Collection<T> takeWhile(Predicate<? super T> pred, Collection<? extends T> inpCol) {\n        Collection<T> prefix = new ArrayList<>();\n        for (T obj : inpCol) {\n            if (!pred.apply(obj)) {\n                break;\n            }\n            prefix.add(obj);\n        }\n        return prefix;\n    }\n\n    public static <T> Collection<T> takeUnless(Predicate<? super T> pred, Collection<? extends T> inpCol) {\n        return takeWhile(pred.not(), inpCol);\n    }\n\n    public static <T, R> R foldr(Function2<? super T, ? super R, ? extends R> func,\n                                 R init, Collection<? extends T> inpCol) {\n        List<T> values = new ArrayList<>();\n        values.addAll(inpCol);\n        java.util.Collections.reverse(values);\n        for (T obj : values) {\n            init = func.apply(obj, init);\n        }\n        return init;\n<｜fim▁hole｜>                                 R init, Collection<? extends T> inpCol) {\n        for (T obj : inpCol) {\n            init = func.apply(init, obj);\n        }\n        return init;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    public static <T, R> R foldl(Function2<? super R, ? super T, ? extends R> func,\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.lamsfoundation.lams.util;\n\nimport java.util.HashMap;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.BeanFactory;\nimport org.springframework.beans.factory.BeanFactoryAware;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.support.ResourceBundleMessageSource;\n\npublic class LoadedMessageSourceService implements ILoadedMessageSourceService, BeanFactoryAware {\n\n    private static final String LOADED_MESSAGE_SOURCE_BEAN = \"loadedMessageSource\";\n    private HashMap<String, MessageSource> messageServices = new HashMap<String, MessageSource>();\n    private BeanFactory beanFactory = null;\n\n    /*\n     * (non-Javadoc)\n     * \n     * @see org.lamsfoundation.lams.authoring.service.ILoadMessageService#getMessageService(java.lang.String)\n     */\n    @Override\n    public MessageSource getMessageService(String messageFilename) {\n    if (messageFilename != null) {\n        MessageSource ms = messageServices.get(messageFilename);\n        if (ms == null) {\n        ResourceBundleMessageSource rbms = (ResourceBundleMessageSource) beanFactory\n            .getBean(LOADED_MESSAGE_SOURCE_BEAN);\n        rbms.setBasename(messageFilename);\n        messageServices.put(messageFilename, rbms);\n        ms = rbms;\n        }\n        return ms;\n    } else {\n        return null;\n    }\n    }\n\n    /* **** Method for BeanFactoryAware interface *****************/\n    @Override\n    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n    this.beanFactory = beanFactory;\n<｜fim▁hole｜>\n}<｜fim▁end｜>",
    "response": "    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.imagej;\n\nimport java.util.Map;\n\nimport net.imglib2.display.ColorTable;\nimport net.imglib2.img.Img;\n\npublic interface ImageMetadata {\n\n    /** Gets the number of valid bits (if applicable to this {@link Img}). */\n    int getValidBits();\n\n<｜fim▁hole｜>    double getChannelMinimum(int c);\n\n    /** Sets the minimum actual pixel value for the given channel. */\n    void setChannelMinimum(int c, double min);\n\n    /** Gets the maximum actual pixel value for the given channel. */\n    double getChannelMaximum(int c);\n\n    /** Sets the maximum actual pixel value for the given channel. */\n    void setChannelMaximum(int c, double max);\n\n    /** Gets the number of channels intended to be displayed together. */\n    int getCompositeChannelCount();\n\n    /** Sets the number of channels intended to be displayed together. */\n    void setCompositeChannelCount(int count);\n\n    /** Gets the color table at the given position. */\n    ColorTable getColorTable(int no);\n\n    /**\n     * Sets the color table at the given position.\n     * \n     * @param colorTable The color table to store.\n     * @param no The position of the color table, typically (but not necessarily)\n     *          a 1D dimensional planar index rasterized from an N-dimensional\n     *          planar position array.\n     */\n    void setColorTable(ColorTable colorTable, int no);\n\n    /** Sets the number of available color tables to the given value. */\n    void initializeColorTables(final int count);\n\n    /**\n     * Gets the number of available {@link ColorTable}s. For {@link Img}s, this\n     * number typically matches the total number of planes.\n     */\n    int getColorTableCount();\n\n    /** Gets a table of key/value pairs associated with the image. */\n    Map<String, Object> getProperties();\n\n}<｜fim▁end｜>",
    "response": "    /** Sets the number of valid bits. */\n    void setValidBits(int bits);\n\n    /** Gets the minimum actual pixel value for the given channel. */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>import com.facebook.buck.model.BuildTarget;\nimport com.facebook.buck.rules.Description;\nimport com.facebook.buck.rules.SourcePath;\nimport com.facebook.buck.rules.coercer.FrameworkPath;\nimport com.facebook.buck.rules.coercer.PatternMatchedCollection;\nimport com.facebook.buck.rules.coercer.SourceList;\nimport com.facebook.buck.rules.coercer.SourceWithFlags;\nimport com.google.common.base.Optional;\nimport com.google.common.collect.ImmutableList;\nimport com.google.common.collect.ImmutableSortedMap;\nimport com.google.common.collect.ImmutableSortedSet;\n\npublic class AbstractCxxSourceBuilder<T extends CxxConstructorArg> extends AbstractCxxBuilder<T> {\n\n  public AbstractCxxSourceBuilder(\n      Description<T> description,\n      BuildTarget target) {\n    super(description, target);\n  }\n\n  public AbstractCxxSourceBuilder<T> setSrcs(ImmutableSortedSet<SourceWithFlags> srcs)  {\n    arg.srcs = Optional.of(srcs);\n    return this;\n  }\n\n  public AbstractCxxSourceBuilder<T> setHeaders(ImmutableSortedSet<SourcePath> headers)  {\n    arg.headers = Optional.of(SourceList.ofUnnamedSources(headers));\n    return this;\n  }\n\n  public AbstractCxxSourceBuilder<T> setHeaders(ImmutableSortedMap<String, SourcePath> headers)  {\n    arg.headers = Optional.of(SourceList.ofNamedSources(headers));\n    return this;\n  }\n\n  public AbstractCxxSourceBuilder<T> setHeaders(SourceList headers)  {\n    arg.headers = Optional.of(headers);\n    return this;\n  }\n\n  public AbstractCxxSourceBuilder<T> setCompilerFlags(ImmutableList<String> compilerFlags) {\n    arg.compilerFlags = Optional.of(compilerFlags);\n    return this;\n  }\n\n  public AbstractCxxSourceBuilder<T> setPreprocessorFlags(ImmutableList<String> preprocessorFlags) {\n    arg.preprocessorFlags = Optional.of(preprocessorFlags);\n    return this;\n  }\n\n  public AbstractCxxSourceBuilder<T> setLinkerFlags(ImmutableList<String> linkerFlags) {\n    arg.linkerFlags = Optional.of(linkerFlags);\n    return this;\n  }\n\n  public AbstractCxxSourceBuilder<T> setPlatformLinkerFlags(\n      PatternMatchedCollection<ImmutableList<String>> platformLinkerFlags) {\n    arg.platformLinkerFlags = Optional.of(platformLinkerFlags);\n    return this;\n  }\n\n  public AbstractCxxSourceBuilder<T> setFrameworks(ImmutableSortedSet<FrameworkPath> frameworks) {\n    arg.frameworks = Optional.of(frameworks);\n    return this;\n  }\n\n  public AbstractCxxSourceBuilder<T> setDeps(ImmutableSortedSet<BuildTarget> deps) {\n    arg.deps = Optional.of(deps);\n    return this;\n  }\n\n  public AbstractCxxSourceBuilder<T> setHeaderNamespace(String namespace) {\n    arg.headerNamespace = Optional.of(namespace);\n    return this;\n  }\n\n}<｜fim▁end｜>",
    "response": "package com.facebook.buck.cxx;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.sap.cloud.lm.sl.cf.web.util;\n\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\n\nimport com.sap.cloud.lm.sl.cf.core.util.UserInfo;\n<｜fim▁hole｜>    public static UserInfo getUserInfo() {\n        Authentication authentication = SecurityContextHolder.getContext()\n            .getAuthentication();\n        return authentication == null ? null : (UserInfo) authentication.getPrincipal();\n    }\n\n}<｜fim▁end｜>",
    "response": "\npublic class SecurityContextUtil {\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.jjinterna.pbxevents.asterisk.queue.internal;\n\n<｜fim▁hole｜>\n    public String value() {\n        return name();\n    }\n\n    public static QueueLogType fromValue(String v) {\n        return valueOf(v);\n    }\n\n}<｜fim▁end｜>",
    "response": "public enum QueueLogType {\n\n    ABANDON, ADDMEMBER, COMPLETEAGENT, COMPLETECALLER, CONFIGRELOAD, CONNECT, DID, ENTERQUEUE, EXITWITHTIMEOUT, HEARTBEAT, HOTDESK, PAUSE, PAUSEALL, PAUSEREASON, QUEUESTART, REMOVEMEMBER, RINGNOANSWER, UNPAUSE, UNPAUSEALL;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.plotsquared.bukkit.util;\n\nimport static com.intellectualcrafters.plot.util.ReflectionUtils.getRefClass;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\n\nimport org.bukkit.Chunk;\n\nimport com.intellectualcrafters.plot.PS;\nimport com.intellectualcrafters.plot.object.ChunkLoc;\nimport com.intellectualcrafters.plot.object.Location;\nimport com.intellectualcrafters.plot.object.Plot;\nimport com.intellectualcrafters.plot.object.PlotPlayer;\nimport com.intellectualcrafters.plot.util.ReflectionUtils.RefClass;\nimport com.intellectualcrafters.plot.util.ReflectionUtils.RefConstructor;\nimport com.intellectualcrafters.plot.util.ReflectionUtils.RefField;\nimport com.intellectualcrafters.plot.util.ReflectionUtils.RefMethod;\nimport com.intellectualcrafters.plot.util.TaskManager;\nimport com.intellectualcrafters.plot.util.UUIDHandler;\nimport com.plotsquared.bukkit.object.BukkitPlayer;\n\nimport org.bukkit.World;\nimport org.bukkit.entity.Player;\nimport org.bukkit.Bukkit;\n\npublic class SendChunk {\n\n    private final RefClass classEntityPlayer = getRefClass(\"{nms}.EntityPlayer\");\n    private final RefClass classMapChunk = getRefClass(\"{nms}.PacketPlayOutMapChunk\");\n    private final RefClass classPacket = getRefClass(\"{nms}.Packet\");\n    private final RefClass classConnection = getRefClass(\"{nms}.PlayerConnection\");\n    private final RefClass classChunk = getRefClass(\"{nms}.Chunk\");\n    private final RefClass classCraftPlayer = getRefClass(\"{cb}.entity.CraftPlayer\");\n    private RefMethod methodGetHandlePlayer;\n    private RefConstructor MapChunk;\n    private RefField connection;\n    private RefMethod send;\n\n    /**\n     * Constructor\n     *\n     * @throws NoSuchMethodException\n     */\n    public SendChunk() throws NoSuchMethodException {\n        methodGetHandlePlayer = classCraftPlayer.getMethod(\"getHandle\");\n        MapChunk = classMapChunk.getConstructor(classChunk.getRealClass(), boolean.class, int.class);\n        connection = classEntityPlayer.getField(\"playerConnection\");\n        send = classConnection.getMethod(\"sendPacket\", classPacket.getRealClass());\n    }\n\n    public void sendChunk(final Collection<Chunk> input) {\n        HashSet<Chunk> chunks = new HashSet<Chunk>(input);\n        HashMap<String, ArrayList<Chunk>> map = new HashMap<>();\n        int view = Bukkit.getServer().getViewDistance();\n        for (Chunk chunk : chunks) {\n            String world = chunk.getWorld().getName();\n            ArrayList<Chunk> list = map.get(world);\n            if (list == null) {\n                list = new ArrayList<>();\n                map.put(world, list);\n            }\n            list.add(chunk);\n        }\n        for (PlotPlayer pp : UUIDHandler.getPlayers().values() ) {\n            Plot plot = pp.getCurrentPlot();\n            Location loc = null;\n            String world;\n            if (plot != null) {\n                world = plot.world;\n            }\n            else {\n                loc = pp.getLocation();\n                world = loc.getWorld();\n            }\n            ArrayList<Chunk> list = map.get(world);\n            if (list == null) {\n                continue;\n            }\n            if (loc == null) {\n                loc = pp.getLocation();\n            }\n            int cx = loc.getX() >> 4;\n            int cz = loc.getZ() >> 4;\n            Player player = ((BukkitPlayer) pp).player;\n            Object entity = methodGetHandlePlayer.of(player).call();\n\n            for (Chunk chunk : list) {\n                int dx = Math.abs(cx - chunk.getX());\n                int dz = Math.abs(cz - chunk.getZ());\n                if (dx > view || dz > view) {\n                    continue;\n                }\n                chunks.remove(chunk);\n\n                Object packet = MapChunk.create(chunk, true, 0);\n                Object con = connection.of(entity).get();\n                send.of(con).call(packet);\n                packet = MapChunk.create(chunk, true, 65565);\n                send.of(con).call(packet);\n\n            }\n        }\n        for (final Chunk chunk : chunks) {\n            TaskManager.runTask(new Runnable() {\n                @Override\n                public void run() {\n                    try {\n                        chunk.unload(true, true);\n                    }\n<｜fim▁hole｜>                        PS.debug(\"$4Could not save chunk: \" + worldname + \";\" + chunk.getX() + \";\" + chunk.getZ());\n                        PS.debug(\"$3 - $4File may be open in another process (e.g. MCEdit)\");\n                        PS.debug(\"$3 - $4\" + worldname + \"/level.dat or \" + worldname + \"level_old.dat may be corrupt (try repairing or removing these)\");\n                    }\n                }\n            });\n        }\n\n    }\n\n    public void sendChunk(final String worldname, final List<ChunkLoc> locs) {\n        final World myworld = Bukkit.getWorld(worldname);\n        final ArrayList<Chunk> chunks = new ArrayList<>();\n        for (final ChunkLoc loc : locs) {\n            chunks.add(myworld.getChunkAt(loc.x, loc.z));\n        }\n        sendChunk(chunks);\n    }\n}<｜fim▁end｜>",
    "response": "                    catch (Exception e) {\n                        String worldname = chunk.getWorld().getName();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ryey.easer.skills.operation.http_request;\n\nimport android.content.Context;\nimport android.os.AsyncTask;\n\nimport androidx.annotation.NonNull;\n\nimport java.io.DataOutputStream;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\nimport ryey.easer.skills.operation.OperationLoader;\n\npublic class HttpRequestLoader extends OperationLoader<HttpRequestOperationData> {\n    public HttpRequestLoader(Context context) {\n        super(context);\n    }\n\n    @Override\n    public void _load(@NonNull HttpRequestOperationData data, @NonNull OnResultCallback callback) {\n        HttpTask task = new HttpTask(callback);\n        task.execute(data);\n    }\n\n    private static class HttpTask extends AsyncTask<HttpRequestOperationData, Void, Boolean> {\n\n        private final OnResultCallback callback;\n\n        HttpTask(OnResultCallback callback) {\n            this.callback = callback;\n        }\n\n        @Override\n        protected Boolean doInBackground(HttpRequestOperationData... httpRequestOperationData) {\n            final HttpRequestOperationData data = httpRequestOperationData[0];\n\n            HttpURLConnection urlConnection = null;\n\n            try {\n                final URL url = new URL(data.url.raw);\n<｜fim▁hole｜>                final String[] headerLines = data.requestHeader.raw.split(\"\\r?\\n\");\n                for (String headerLine : headerLines) {\n                    if (headerLine.contains(\":\")) {\n                        final String[] parts = headerLine.split(\":\", 2);\n                        urlConnection.addRequestProperty(parts[0].trim(), parts[1].trim());\n                    }\n                }\n\n                switch (data.requestMethod) {\n                    case GET:\n                        break;\n\n                    case POST:\n                        // set header for POST request\n                        urlConnection.setDoOutput(true);\n                        urlConnection.addRequestProperty(\"Content-Type\", data.contentType.raw);\n                        urlConnection.setFixedLengthStreamingMode(data.postData.raw.length());\n\n                        // send POST data\n                        try (final DataOutputStream out = new DataOutputStream(urlConnection.getOutputStream())) {\n                            out.writeBytes(data.postData.raw);\n                            out.flush();\n                        }\n                        break;\n                }\n\n                // read response\n                try (final InputStream inputStream = urlConnection.getInputStream()) {\n                    //noinspection StatementWithEmptyBody\n                    while (inputStream.read() != -1);\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n                return false;\n            } finally {\n                if (urlConnection != null) {\n                    urlConnection.disconnect();\n                }\n            }\n\n            return true;\n        }\n\n        @Override\n        protected void onPostExecute(Boolean result) {\n            callback.onResult(result);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "                urlConnection = (HttpURLConnection) url.openConnection();\n                urlConnection.setRequestMethod(data.requestMethod.name());\n\n                // set request header\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.github.visgeek.utils.collections.test.testcase.ienumerable.ienumerable;\n\n<｜fim▁hole｜>\nimport com.github.visgeek.utils.collections.Enumerable;\nimport com.github.visgeek.utils.collections.IEnumerable;\nimport com.github.visgeek.utils.functions.Action0;\nimport com.github.visgeek.utils.functions.Predicate;\nimport com.github.visgeek.utils.testing.Assert2;\n\npublic class Last02 {\n    @Test\n    public void arg1IsNull() {\n        IEnumerable<Integer> source = Enumerable.empty(Integer.class);\n        Action0 action = () -> source.last(null);\n        Assert2.assertNullPointerExceptionThrown(\"predicate\", action);\n    }\n\n    @Test\n    public void sourceIsEmpty() {\n        IEnumerable<Integer> source = Enumerable.empty(Integer.class);\n        Predicate<Integer> predicate = n -> n % 2 == 0;\n\n        Action0 action = () -> source.last(predicate);\n        Assert2.assertExceptionThrown(UnsupportedOperationException.class, action);\n    }\n\n    @Test\n    public void notFound() {\n        IEnumerable<Integer> source = Enumerable.empty(Integer.class);\n        Predicate<Integer> predicate = n -> n % 2 == 0;\n\n        Action0 action = () -> source.last(predicate);\n        Assert2.assertExceptionThrown(UnsupportedOperationException.class, action);\n    }\n\n    @Test\n    public void found() {\n        IEnumerable<Integer> source = () -> Enumerable.of(1, 2, 3, 4).iterator();\n        Predicate<Integer> predicate = n -> n % 2 == 0;\n        int expected = 4;\n\n        int actual = source.last(predicate);\n        Assert.assertEquals(expected, actual);\n    }\n}<｜fim▁end｜>",
    "response": "import org.junit.Assert;\nimport org.junit.Test;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.projecttango.experiments.javamotiontracking;\n\npublic class Position {\n    private final double x, y, z;\n\n    public Position(double x, double y, double z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n<｜fim▁hole｜>        return y;\n    }\n\n    public double getX() {\n        return x;\n    }\n\n    public double getZ() {\n        return z;\n    }\n\n    public Vector vectorTo(Position pos) {\n        return new Vector(pos.x - x, pos.y - y, pos.z - z);\n    }\n\n    public double distanceTo(Position pos) {\n        return vectorTo(pos).getMagnitude();\n    }\n\n    public Position move(Vector velocity) {\n        return new Position(x + velocity.getDx(), y + velocity.getDy(), z + velocity.getDz());\n    }\n\n    @Override\n    public String toString() {\n        return \"[\" + x + \",\" + y + \",\" + z + \"]\";\n    }\n}<｜fim▁end｜>",
    "response": "    public double getY() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package android.support.v4.view;\n\n<｜fim▁hole｜>import android.content.Context;\n\nclass ScaleGestureDetectorCompatKitKat {\n\n    private ScaleGestureDetectorCompatKitKat() {\n    }\n\n    public static void setQuickScaleEnabled(Object scaleGestureDetector, boolean enabled) {\n        ((ScaleGestureDetector) scaleGestureDetector).setQuickScaleEnabled(enabled);\n    }\n\n    public static boolean isQuickScaleEnabled(Object scaleGestureDetector) {\n        return ((ScaleGestureDetector) scaleGestureDetector).isQuickScaleEnabled();\n    }\n}<｜fim▁end｜>",
    "response": "import android.view.ScaleGestureDetector;\nimport android.view.MotionEvent;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.swingeasy.table.renderer;\n\nimport java.awt.Component;\nimport java.net.URI;\n\nimport javax.swing.JTable;\n\npublic class URITableCellRenderer extends ETableCellRenderer<URI> {\n<｜fim▁hole｜>    }\n\n    /**\n     * @see org.swingeasy.table.renderer.ETableCellRenderer#render(javax.swing.JTable, java.lang.Object, boolean, boolean, int, int)\n     */\n    @Override\n    public Component render(JTable table, URI value, boolean isSelected, boolean hasFocus, int row, int column) {\n        String valueHtml = \"<html><a href='\" + value + \"'>\" + value + \"</a></html>\";\n        return super_getTableCellRendererComponent(table, valueHtml, isSelected, hasFocus, row, column);\n    }\n}<｜fim▁end｜>",
    "response": "    private static final long serialVersionUID = 5347735590867783815L;\n\n    public URITableCellRenderer() {\n        super();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.clevercloud.xpath.pattern;\n\nimport com.clevercloud.xml.XmlUtil;\nimport com.clevercloud.xpath.Env;\nimport com.clevercloud.xpath.ExprEnvironment;\nimport com.clevercloud.xpath.XPathException;\nimport org.w3c.dom.Node;\n\npublic class FromDescendants extends Axis {\n   private boolean _self;\n\n   public FromDescendants(AbstractPattern parent, boolean self) {\n      super(parent);\n\n      _self = self;\n\n      if (parent == null)\n         throw new RuntimeException();\n   }\n\n   /**\n    * Matches the current node if it can find a parent node matching the\n    * parent pattern.\n    *\n    * @param node the node to test\n    * @param env  the variable environment\n    * @return true if it matches.\n    */\n   public boolean match(Node node, ExprEnvironment env)\n      throws XPathException {\n      if (node == null)\n         return false;\n\n      if (!_self)\n         node = node.getParentNode();\n\n      for (; node != null; node = node.getParentNode()) {\n         if (_parent.match(node, env))\n            return true;\n      }\n\n      return false;\n   }\n\n   /**\n    * Counts matching nodes between the axis-context and the node\n    *\n    * @param node    the starting node\n    * @param env     the xpath environment\n    * @param pattern the axis match pattern\n    * @return the index of the position\n    */\n   public int position(Node node, Env env, AbstractPattern pattern)\n      throws XPathException {\n      int index = env.getPositionIndex();\n\n      int pos = 0;\n\n      Node parentNode = node;\n      Node ptr = node;\n\n      for (; index >= 0; index--) {\n         for (; parentNode != null; parentNode = parentNode.getParentNode()) {\n            if (_parent.match(parentNode, env))\n               break;\n         }\n\n         for (; ptr != null; ptr = XmlUtil.getPrevious(ptr)) {\n            if (ptr == parentNode && !_self)\n               break;\n\n            if (pattern.match(ptr, env))\n               pos++;\n\n            if (ptr == parentNode)\n               break;\n         }\n\n         if (index > 0 && parentNode != null) {\n            parentNode = parentNode.getParentNode();\n            if (_self)\n               ptr = XmlUtil.getPrevious(ptr);\n         } else\n            break;\n      }\n\n      if (parentNode != null)\n         parentNode = parentNode.getParentNode();\n\n      for (; parentNode != null; parentNode = parentNode.getParentNode()) {\n         if (_parent.match(parentNode, env)) {\n            env.setMorePositions(true);\n            break;\n         }\n      }\n\n      return pos;\n   }\n\n   /**\n    * Counts the descendant nodes matching the pattern.\n    *\n    * @param node    the starting node\n    * @param env     the xpath environment\n    * @param pattern the axis match pattern\n    * @return the count of nodes\n    */\n   public int count(Node node, Env env, AbstractPattern pattern)\n      throws XPathException {\n      int index = env.getPositionIndex();\n\n      Node axis;\n      if (_self)\n         axis = getAxisContext(node, env);\n      else\n         axis = getAxisContext(node.getParentNode(), env);\n\n      for (; index > 0; index--)\n         axis = getAxisContext(axis.getParentNode(), env);\n\n      if (getAxisContext(axis.getParentNode(), env) != null)\n         env.setMorePositions(true);\n\n      int count = 0;\n      for (Node ptr = axis;\n           ptr != null;\n           ptr = XmlUtil.getNext(ptr)) {\n         if (pattern.match(ptr, env))\n            count++;\n      }\n\n      return count;\n   }\n\n   /**\n    * The axis context is any ancestor matching the parent pattern.\n    */\n<｜fim▁hole｜>      throws XPathException {\n      for (; node != null; node = node.getParentNode()) {\n         if (_parent.match(node, env))\n            return node;\n      }\n\n      return node;\n   }\n\n   /**\n    * Returns true if the pattern is strictly ascending.\n    */\n   public boolean isStrictlyAscending() {\n      if (_parent == null)\n         return true;\n      else\n         return _parent.isSingleLevel();\n   }\n\n   /**\n    * Returns the first node in the selection order.\n    *\n    * @param node the current node\n    * @return the first node\n    */\n   public Node firstNode(Node node, ExprEnvironment env) {\n      if (_self)\n         return node;\n      else\n         return node.getFirstChild();\n   }\n\n   /**\n    * Returns the next node in the selection order.\n    *\n    * @param node the current node\n    * @param ndoe the last node\n    * @return the next node\n    */\n   public Node nextNode(Node node, Node lastNode) {\n      Node next = XmlUtil.getNext(node);\n\n      return next == lastNode ? null : next;\n   }\n\n   /**\n    * Returns the last node in the selection order.\n    *\n    * @param node the current node\n    * @return the last node\n    */\n   public Node lastNode(Node node) {\n      Node last = node;\n\n      for (;\n           last != null && last.getNextSibling() == null;\n           last = last.getParentNode()) {\n      }\n\n      return last != null ? last.getNextSibling() : null;\n   }\n\n   public String toString() {\n      if (_self)\n         return getPrefix() + \"descendant-or-self::\";\n      else\n         return getPrefix() + \"descendant::\";\n   }\n}<｜fim▁end｜>",
    "response": "   private Node getAxisContext(Node node, ExprEnvironment env)\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.uda.preciosjustos;\n\nimport org.junit.Before;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n<｜fim▁hole｜>@WebAppConfiguration\n@ActiveProfiles(\"test\")\n@ContextConfiguration(classes = { AppConfig.class, WebAppConfig.class })\npublic abstract class IntegrationTestBase {\n\n    @Autowired\n    private WebApplicationContext wac;\n\n    protected MockMvc mvc;\n\n    @Before\n    public void setup() {\n        this.mvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n    }\n\n}<｜fim▁end｜>",
    "response": "import org.uda.preciosjustos.configuration.AppConfig;\nimport org.uda.preciosjustos.configuration.WebAppConfig;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.camel.component.cxf.spring;\n\nimport java.util.List;\n\nimport org.apache.camel.component.cxf.jaxrs.BeanIdAware;\nimport org.apache.cxf.BusFactory;\nimport org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor;\nimport org.apache.cxf.bus.spring.SpringBusFactory;\nimport org.apache.cxf.feature.LoggingFeature;\nimport org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\nimport org.apache.cxf.version.Version;\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\n\npublic class SpringJAXRSClientFactoryBean extends JAXRSClientFactoryBean\n    implements ApplicationContextAware, BeanIdAware {\n    private String beanId;\n    private int loggingSizeLimit;\n    private LoggingFeature loggingFeature;\n\n    public SpringJAXRSClientFactoryBean() {\n    }\n\n    public boolean isLoggingFeatureEnabled() {\n        return loggingFeature != null;\n    }\n\n    public void setLoggingFeatureEnabled(boolean loggingFeatureEnabled) {\n        if (loggingFeature != null) {\n            getFeatures().remove(loggingFeature);\n            loggingFeature = null;\n        }\n        if (loggingFeatureEnabled) {\n            if (getLoggingSizeLimit() > 0) {\n                loggingFeature = new LoggingFeature(getLoggingSizeLimit());\n            } else {\n                loggingFeature = new LoggingFeature();\n            }\n            getFeatures().add(loggingFeature);\n        }\n\n    }\n\n    public int getLoggingSizeLimit() {\n        return loggingSizeLimit;\n    }\n<｜fim▁hole｜>            if (loggingSizeLimit > 0) {\n                loggingFeature = new LoggingFeature(loggingSizeLimit);\n            } else {\n                loggingFeature = new LoggingFeature();\n            }\n            getFeatures().add(loggingFeature);\n        }\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    public void setApplicationContext(ApplicationContext ctx) throws BeansException {\n        if (bus == null) {\n            if (Version.getCurrentVersion().startsWith(\"2.3\")) {\n                // Don't relate on the DefaultBus\n                BusFactory factory = new SpringBusFactory(ctx);\n                bus = factory.createBus();    \n                BusWiringBeanFactoryPostProcessor.updateBusReferencesInContext(bus, ctx);\n                setBus(bus);\n            } else {\n                setBus(BusWiringBeanFactoryPostProcessor.addDefaultBus(ctx));\n            }\n        }\n    }\n\n    public String getBeanId() {            \n        return beanId;\n    }\n\n    public void setBeanId(String id) {            \n        beanId = id;            \n    }\n\n    // add this mothod for testing\n    List<String> getSchemaLocations() {\n        return schemaLocations;\n    }\n}<｜fim▁end｜>",
    "response": "\n    public void setLoggingSizeLimit(int loggingSizeLimit) {\n        this.loggingSizeLimit = loggingSizeLimit;\n        if (loggingFeature != null) {\n            getFeatures().remove(loggingFeature);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.pentaho.reporting.engine.classic.extensions.modules.sparklines.elementfactory;\n\nimport java.awt.Color;\n\nimport org.pentaho.reporting.engine.classic.core.AttributeNames;\nimport org.pentaho.reporting.engine.classic.core.Element;\nimport org.pentaho.reporting.engine.classic.core.elementfactory.AbstractContentElementFactory;\nimport org.pentaho.reporting.engine.classic.core.function.FormulaExpression;\nimport org.pentaho.reporting.engine.classic.core.style.ElementStyleSheet;\nimport org.pentaho.reporting.engine.classic.extensions.modules.sparklines.PieSparklineType;\nimport org.pentaho.reporting.engine.classic.extensions.modules.sparklines.SparklineAttributeNames;\nimport org.pentaho.reporting.engine.classic.extensions.modules.sparklines.SparklineStyleKeys;\n\npublic class PieSparklineElementFactory extends AbstractContentElementFactory {\n  private Object content;\n  private String fieldname;\n  private String formula;\n  private Object nullValue;\n\n  private Color highColor;\n  private Color lowColor;\n  private Color mediumColor;\n  private Double highSlice;\n  private Double mediumSlice;\n  private Double lowSlice;\n  private Integer startAngle;\n  private Boolean counterClockwise;\n\n  public PieSparklineElementFactory() {\n  }\n\n  public Object getContent() {\n    return content;\n  }\n\n  public void setContent( final Object content ) {\n    this.content = content;\n  }\n\n  public Object getNullValue() {\n    return nullValue;\n  }\n\n  public void setNullValue( final Object nullValue ) {\n    this.nullValue = nullValue;\n  }\n\n  public String getFormula() {\n    return formula;\n  }\n\n  public void setFormula( final String formula ) {\n    this.formula = formula;\n  }\n\n  public Color getHighColor() {\n    return highColor;\n  }\n\n  public void setHighColor( final Color highColor ) {\n    this.highColor = highColor;\n  }\n\n  public Color getLowColor() {\n    return lowColor;\n  }\n\n  public void setLowColor( final Color lowColor ) {\n    this.lowColor = lowColor;\n  }\n\n  public Color getMediumColor() {\n    return mediumColor;\n  }\n\n  public void setMediumColor( Color mediumColor ) {\n    this.mediumColor = mediumColor;\n  }\n\n  public Integer getStartAngle() {\n    return startAngle;\n  }\n\n  public void setStartAngle( final Integer startAngle ) {\n    this.startAngle = startAngle;\n  }\n\n  public Double getHighSlice() {\n    return highSlice;\n  }\n\n  public void setHighSlice( Double highSlice ) {\n    this.highSlice = highSlice;\n  }\n\n  public Double getMediumSlice() {\n    return mediumSlice;\n  }\n\n  public void setMediumSlice( Double mediumSlice ) {\n    this.mediumSlice = mediumSlice;\n  }\n\n  public Double getLowSlice() {\n    return lowSlice;\n  }\n\n  public void setLowSlice( Double lowSlice ) {\n    this.lowSlice = lowSlice;\n  }\n\n  public Boolean getCounterClockwise() {\n    return counterClockwise;\n  }\n\n  public void setCounterClockwise( Boolean counterClockwise ) {\n    this.counterClockwise = counterClockwise;\n  }\n\n  public String getFieldname() {\n    return fieldname;\n  }\n\n  public void setFieldname( final String fieldname ) {\n    this.fieldname = fieldname;\n  }\n\n  /**\n   * Applies the style definition to the elements stylesheet.\n   *\n   * @param style\n   *          the element stylesheet which should receive the style definition.\n   */\n  protected void applyStyle( final ElementStyleSheet style ) {\n    super.applyStyle( style );\n    if ( highColor != null ) {\n      style.setStyleProperty( SparklineStyleKeys.HIGH_COLOR, getHighColor() );\n    }\n    if ( lowColor != null ) {\n      style.setStyleProperty( SparklineStyleKeys.LOW_COLOR, getLowColor() );\n    }\n    if ( mediumColor != null ) {\n      style.setStyleProperty( SparklineStyleKeys.MEDIUM_COLOR, getMediumColor() );\n    }\n  }\n\n  /**\n   * Creates a new instance of the element. Override this method to return a concrete subclass of the element.\n   *\n   * @return the newly generated instance of the element.\n   */\n  public Element createElement() {\n    final Element element = new Element();\n    applyElementName( element );\n    applyStyle( element.getStyle() );\n\n    element.setElementType( new PieSparklineType() );\n    if ( getContent() != null ) {\n      element.setAttribute( AttributeNames.Core.NAMESPACE, AttributeNames.Core.VALUE, getContent() );\n    }\n    if ( getFieldname() != null ) {\n      element.setAttribute( AttributeNames.Core.NAMESPACE, AttributeNames.Core.FIELD, getFieldname() );\n    }\n    if ( getFormula() != null ) {\n      final FormulaExpression formulaExpression = new FormulaExpression();\n      formulaExpression.setFormula( getFormula() );\n      element.setAttributeExpression( AttributeNames.Core.NAMESPACE, AttributeNames.Core.VALUE, formulaExpression );\n    }\n<｜fim▁hole｜>      element.setAttribute( SparklineAttributeNames.NAMESPACE, SparklineAttributeNames.LOW_SLICE, lowSlice );\n    }\n    if ( mediumSlice != null ) {\n      element.setAttribute( SparklineAttributeNames.NAMESPACE, SparklineAttributeNames.MEDIUM_SLICE, mediumSlice );\n    }\n    if ( highSlice != null ) {\n      element.setAttribute( SparklineAttributeNames.NAMESPACE, SparklineAttributeNames.HIGH_SLICE, highSlice );\n    }\n    if ( counterClockwise != null ) {\n      element.setAttribute( SparklineAttributeNames.NAMESPACE, SparklineAttributeNames.COUNTER_CLOCKWISE,\n          counterClockwise );\n    }\n\n    return element;\n  }\n}<｜fim▁end｜>",
    "response": "    if ( startAngle != null ) {\n      element.setAttribute( SparklineAttributeNames.NAMESPACE, SparklineAttributeNames.START_ANGLE, startAngle );\n    }\n    if ( lowSlice != null ) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.tracee.binding.httpcomponents;\n\n<｜fim▁hole｜>import io.tracee.TraceeBackend;\nimport io.tracee.TraceeConstants;\nimport io.tracee.configuration.TraceeFilterConfiguration;\nimport io.tracee.configuration.TraceeFilterConfiguration.Profile;\nimport io.tracee.transport.HttpHeaderTransport;\nimport org.apache.hc.core5.http.HttpRequest;\nimport org.apache.hc.core5.http.HttpRequestInterceptor;\nimport org.apache.hc.core5.http.protocol.HttpContext;\n\nimport java.util.Map;\n\nimport static io.tracee.configuration.TraceeFilterConfiguration.Channel.OutgoingRequest;\n\npublic class TraceeHttpRequestInterceptor implements HttpRequestInterceptor {\n\n    private final TraceeBackend backend;\n    private final HttpHeaderTransport transportSerialization;\n    private final String profile;\n\n    public TraceeHttpRequestInterceptor() {\n        this(Profile.DEFAULT);\n    }\n\n    public TraceeHttpRequestInterceptor(String profile) {\n        this(Tracee.getBackend(), profile);\n    }\n\n    TraceeHttpRequestInterceptor(TraceeBackend backend, String profile) {\n        this.backend = backend;\n        this.transportSerialization = new HttpHeaderTransport();\n        this.profile = profile;\n    }\n\n    @Override\n    public final void process(final HttpRequest httpRequest, final HttpContext httpContext) {\n        final TraceeFilterConfiguration filterConfiguration = backend.getConfiguration(profile);\n        if (!backend.isEmpty() && filterConfiguration.shouldProcessContext(OutgoingRequest)) {\n            final Map<String, String> filteredParams = filterConfiguration.filterDeniedParams(backend.copyToMap(), OutgoingRequest);\n            httpRequest.setHeader(TraceeConstants.TPIC_HEADER, transportSerialization.render(filteredParams));\n        }\n    }\n}<｜fim▁end｜>",
    "response": "import io.tracee.Tracee;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.alfresco.bm.test.prop;\n\nimport java.util.Properties;\nimport java.util.Set;\nimport java.util.regex.Pattern;\nimport java.util.regex.PatternSyntaxException;\n\npublic class StringTestProperty extends TestProperty\n{\n    public static final String PROP_MIN = \"min\";\n    public static final String PROP_MAX = \"max\";\n    public static final String PROP_HTML5 = \"html5\";\n    public static final String PROP_REGEX = \"regex\";\n    public static final String PROP_MASK = \"mask\";\n    public static final String DEFAULT_VALUE = \"\";\n    public static final int DEFAULT_MIN = 0;\n    public static final int DEFAULT_MAX = 128;\n    public static final String DEFAULT_REGEX = \".*\";\n    public static final boolean DEFAULT_MASK = false;\n\n    public static Set<String> getValueNames()\n    {\n        Set<String> valueNames = TestProperty.getValueNames();\n        valueNames.add(PROP_MIN);\n        valueNames.add(PROP_MAX);\n        valueNames.add(PROP_REGEX);\n        valueNames.add(PROP_MASK);\n        return valueNames;\n    }\n\n    private int min;\n    private int max;\n    private String regex;\n    private boolean mask;\n    @SuppressWarnings(\"unused\")\n    private Pattern pattern;\n\n    /**\n     * Build a 'string' property using the given values.\n     */\n    public StringTestProperty(String name, Properties properties)\n    {\n        super(name, properties);                    // Extracts common values\n\n        // Extract minLength\n        try\n        {\n            this.min = Integer.parseInt(properties.getProperty(PROP_MIN, \"\" + DEFAULT_MIN));\n            if (this.min < 0)\n            {\n                throw new NumberFormatException(\"Minimum String length cannot be negative.\");\n            }\n        }\n        catch (NumberFormatException e)\n        {\n            this.min = DEFAULT_MIN;\n            addError(name, PROP_MIN, properties.getProperty(PROP_MIN));\n        }\n        // Extract maxLength\n        try\n        {\n            this.max = Integer.parseInt(properties.getProperty(PROP_MAX, \"\" + DEFAULT_MAX));\n        }\n        catch (NumberFormatException e)\n        {\n            this.max = DEFAULT_MAX;\n            addError(name, PROP_MAX, properties.getProperty(PROP_MAX));\n        }\n        // Extract regex\n        try\n        {\n            regex = properties.getProperty(PROP_REGEX, DEFAULT_REGEX);\n            pattern = Pattern.compile(regex);\n        }\n<｜fim▁hole｜>        {\n            this.regex = DEFAULT_REGEX;\n            this.pattern = Pattern.compile(regex);\n            addError(name, PROP_REGEX, properties.getProperty(PROP_REGEX));\n        }\n        // Extract mask\n        mask = Boolean.parseBoolean(properties.getProperty(PROP_MASK));\n    }\n\n   /**\n     * @return          Returns {@link TestPropertyType#STRING} always\n     */\n    @Override\n    public TestPropertyType getType()\n    {\n        return TestPropertyType.STRING;\n    }\n\n    @Override\n    protected void addProperties(Properties properties)\n    {\n        properties.setProperty(PROP_MIN, \"\" + this.min);\n        properties.setProperty(PROP_MAX, \"\" + this.max);\n        properties.setProperty(PROP_REGEX, this.regex);\n        properties.setProperty(PROP_MASK, \"\" + this.mask);\n    }\n\n    public int getMin()\n    {\n        return min;\n    }\n\n    public int getMax()\n    {\n        return max;\n    }\n\n    public String getRegex()\n    {\n        return regex;\n    }\n\n    public boolean isMask()\n    {\n        return mask;\n    }\n}<｜fim▁end｜>",
    "response": "        catch (PatternSyntaxException e)\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.hibernate.ogm.utils;\n\nimport java.io.File;\n\n<｜fim▁hole｜>public class FileHelper {\n\n    private static final Log logger = LoggerFactory.make( MethodHandles.lookup() );\n\n    /**\n     * Attempts to delete a file. If the file is a directory delete recursively all content.\n     *\n     * @param file the file or directory to be deleted\n     * @return {@code false} if it wasn't possible to delete all content which is a common problem on Windows systems.\n     */\n    public static boolean delete(File file) {\n        if ( file == null ) {\n            throw new IllegalArgumentException();\n        }\n        boolean allok = true;\n        if ( file.isDirectory() ) {\n            for ( File subFile : file.listFiles() ) {\n                boolean deleted = delete( subFile );\n                allok = allok && deleted;\n            }\n        }\n        if ( allok && file.exists() ) {\n            if ( !file.delete() ) {\n                logger.warnf( \"File not deleted: %1\", file );\n                return false;\n            }\n        }\n        return allok;\n    }\n\n}<｜fim▁end｜>",
    "response": "import org.hibernate.ogm.util.impl.Log;\nimport org.hibernate.ogm.util.impl.LoggerFactory;\nimport java.lang.invoke.MethodHandles;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package httputility.tsg.com.tsgapicontroller.beans;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\n\nimport org.codehaus.jackson.annotate.JsonIgnoreProperties;\n\nimport httputility.tsg.com.tsgapicontroller.storage.APIContract;\nimport httputility.tsg.com.tsgapicontroller.storage.APIDBManager;\n\n@JsonIgnoreProperties(ignoreUnknown = true)\npublic final class Project {\n\n<｜fim▁hole｜>    private String version_no;\n    private API actions[];\n\n    public int get_id() {\n        return _id;\n    }\n\n    public void set_id(int _id) {\n        this._id = _id;\n    }\n\n    public String getProject_id() {\n        return project_id;\n    }\n\n    public void setProject_id(String project_id) {\n        this.project_id = project_id;\n    }\n\n    public long getUpdated_at() {\n        return updated_at;\n    }\n\n    public void setUpdated_at(long updated_at) {\n        this.updated_at = updated_at;\n    }\n\n    public String getProject_name() {\n        return project_name;\n    }\n\n    public void setProject_name(String project_name) {\n        this.project_name = project_name;\n    }\n\n    public String getVersion_no() {\n        return version_no;\n    }\n\n    public void setVersion_no(String version_no) {\n        this.version_no = version_no;\n    }\n\n    public API[] getActions() {\n        return actions;\n    }\n\n    public void setActions(API[] actions) {\n        this.actions = actions;\n    }\n\n    public void insertIntoDB(Context mContext, long updated_at) {\n\n        ContentValues cv = new ContentValues();\n        cv.put(APIContract.ApiInfoTable.PROJECT_ID, getProject_id());\n        cv.put(APIContract.ApiInfoTable.PROJECT_NAME, getProject_name());\n        cv.put(APIContract.ApiInfoTable.UPDATED_AT, getUpdated_at());\n        cv.put(APIContract.ApiInfoTable.VERSION_NO, getVersion_no());\n        APIDBManager.getInstance(mContext).insert(APIDBManager.KEY_API_INFO, cv);\n\n        for (int i = 0; null != getActions() && i < getActions().length; i++) {\n            getActions()[i].insertIntoDB(mContext);\n        }\n    }\n\n    public static Project getFromDB(Context context) {\n        Project project = new Project();\n        Cursor curAPIInfo = APIDBManager.getInstance(context).query(APIDBManager.KEY_API_INFO, null, null, null, null);\n        if (curAPIInfo != null && curAPIInfo.moveToFirst()) {\n            project.set_id(curAPIInfo.getInt(curAPIInfo.getColumnIndex(APIContract.ApiInfoTable._ID)));\n            project.setProject_id(curAPIInfo.getString(curAPIInfo.getColumnIndex(APIContract.ApiInfoTable.PROJECT_ID)));\n            project.setProject_name(curAPIInfo.getString(curAPIInfo.getColumnIndex(APIContract.ApiInfoTable.PROJECT_NAME)));\n            project.setUpdated_at(curAPIInfo.getInt(curAPIInfo.getColumnIndex(APIContract.ApiInfoTable.UPDATED_AT)));\n            project.setVersion_no(curAPIInfo.getString(curAPIInfo.getColumnIndex(APIContract.ApiInfoTable.VERSION_NO)));\n        }\n        closeCursor(curAPIInfo);\n        return project;\n    }\n\n    public static String getVersionName(Context context) {\n        String versionNo = null;\n        Cursor cursor = APIDBManager.getInstance(context).query(APIDBManager.KEY_API_INFO, new String[]{APIContract.ApiInfoTable.VERSION_NO}, null, null, null);\n        if (cursor != null && cursor.moveToFirst()) {\n            versionNo = cursor.getString(cursor.getColumnIndex(APIContract.ApiInfoTable.VERSION_NO));\n\n        }\n        closeCursor(cursor);\n        return versionNo;\n    }\n\n    private static void closeCursor(Cursor cursor) {\n        if (cursor != null && !cursor.isClosed()) {\n            cursor.close();\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "    private int _id;\n    private String project_id;\n    private long updated_at;\n    private String project_name;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ca.nrc.cadc.tap;\n\nimport ca.nrc.cadc.tap.schema.ColumnDesc;\nimport ca.nrc.cadc.tap.schema.SchemaDesc;\nimport ca.nrc.cadc.tap.schema.TableDesc;\nimport ca.nrc.cadc.tap.schema.TapDataType;\nimport ca.nrc.cadc.uws.ParameterUtil;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport org.apache.log4j.Logger;\n\npublic abstract class PqlQuery extends AbstractTapQuery\n{\n    protected static Logger log = Logger.getLogger(PqlQuery.class);\n\n    /*\n     * Request parameters from the TapSchema and their values.\n     */\n    protected Map<TableDesc, String[]> tapSchemaParameters;\n\n    /**\n     * Default no-arg constructor.\n     */\n    public PqlQuery() { }\n\n    /**\n     * @return the SQL query to execute\n     */\n    public abstract String getSQL();\n\n    /**\n     * @return the metadata for columns in the result set\n     */\n    public abstract List<TapSelectItem> getSelectList();\n\n    /**\n     * Given the List of request Parameters, builds a Map of TableDesc to\n     * String array. If a request parameter name matches a TapSchema\n     * [schema.]table.column name, create a new TableDesc and adds it to\n     * the Map with the associated request parameter value.\n     *\n     * It is expected that setParameterList(ListParameter params) and\n     * setTapSchema(TapSchema ts) will be invoked before calling this method.\n     * \n     */\n    protected void setTapSchemaParameters()\n    {        \n        if (job == null)\n            throw new IllegalStateException(\"BUG: job cannot be null\");\n\n        if (tapSchema == null)\n            throw new IllegalStateException(\"BUG: TapSchema cannot be null\");\n\n        // Check for request parameters that match tap_schema names.\n        List<SchemaDesc> schemaDescs = tapSchema.getSchemaDescs();\n        for (SchemaDesc schemaDesc : schemaDescs)\n        {\n            // Skip the tap_schema schema.\n            if (schemaDesc.getSchemaName() != null && schemaDesc.getSchemaName().equals(\"tap_schema\"))\n                continue;\n\n            // Skip schemas with no tables.\n<｜fim▁hole｜>            {\n                // Skip empty tables.\n                if (tableDesc.getColumnDescs() == null || tableDesc.getColumnDescs().isEmpty())\n                    continue;\n\n                // For each table get the list of columns.\n                for (ColumnDesc columnDesc : tableDesc.getColumnDescs())\n                {\n                    // Skip empty columns, necessary?\n                    if (columnDesc.getColumnName() == null || columnDesc.getColumnName().isEmpty())\n                        continue;\n\n                    // Build the fully qualified name for this column.\n                    StringBuilder sb = new StringBuilder();\n                    if (schemaDesc.getSchemaName() != null && !schemaDesc.getSchemaName().isEmpty())\n                    {\n                        sb.append(schemaDesc.getSchemaName());\n                        sb.append(\".\");\n                    }\n                    sb.append(tableDesc.getTableName());\n                    sb.append(\".\");\n                    sb.append(columnDesc.getColumnName());\n                    String fqn = sb.toString();\n\n                    // Check if the paramList contains the fully qualified column name.\n                    List<String> values = ParameterUtil.findParameterValues(fqn, job.getParameterList());\n                    if (values == null)\n                        continue;\n\n                    // Create a new TableDesc and add with the values to the tableParameters.\n                    TableDesc newTableDesc = new TableDesc(tableDesc.getSchemaName(),\n                                                           tableDesc.getTableName());\n                    ColumnDesc newColumnDesc = new ColumnDesc(columnDesc.getTableName(), \n                            columnDesc.getColumnName(), columnDesc.getDatatype());\n                    newTableDesc.getColumnDescs().add(newColumnDesc);\n                    if (tapSchemaParameters == null)\n                        tapSchemaParameters = new HashMap<TableDesc, String[]>();\n                    tapSchemaParameters.put(newTableDesc, values.toArray(new String[0]));\n                    log.debug(\"parameter \" + fqn + \" = \" + values.toString());\n                }\n            }\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "            if (schemaDesc.getTableDescs() == null || schemaDesc.getTableDescs().isEmpty())\n                continue;\n\n            // For each schema get the list of tables.\n            for (TableDesc tableDesc : schemaDesc.getTableDescs())\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.enrico.launcher3;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.Menu;\n\nimport com.enrico.launcher3.allapps.AllAppsSearchBarController;\n\nimport java.io.FileDescriptor;\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\n\ninterface LauncherCallbacks {\n\n    /*\n     * Activity life-cycle methods. These methods are triggered after\n     * the code in the corresponding Launcher method is executed.\n     */\n    void preOnCreate();\n    void onCreate(Bundle savedInstanceState);\n    void preOnResume();\n    void onResume();\n    void onStart();\n    void onStop();\n    void onPause();\n    void onDestroy();\n    void onSaveInstanceState(Bundle outState);\n    void onPostCreate(Bundle savedInstanceState);\n    void onNewIntent(Intent intent);\n    void onActivityResult(int requestCode, int resultCode, Intent data);\n    void onRequestPermissionsResult(int requestCode, String[] permissions,\n            int[] grantResults);\n    void onWindowFocusChanged(boolean hasFocus);\n    void onAttachedToWindow();\n    void onDetachedFromWindow();\n    boolean onPrepareOptionsMenu(Menu menu);\n    void dump(String prefix, FileDescriptor fd, PrintWriter w, String[] args);\n    void onHomeIntent();\n    boolean handleBackPressed();\n    void onTrimMemory(int level);\n<｜fim▁hole｜>    void finishBindingItems(final boolean upgradePath);\n    void bindAllApplications(ArrayList<AppInfo> apps);\n    void onInteractionBegin();\n    void onInteractionEnd();\n\n    @Deprecated\n    void onWorkspaceLockedChanged();\n\n    /**\n     * Starts a search with {@param initialQuery}. Return false if search was not started.\n     */\n    boolean startSearch(\n            String initialQuery, boolean selectInitialQuery, Bundle appSearchData);\n    boolean hasCustomContentToLeft();\n    void populateCustomContentContainer();\n\n    /*\n     * Extensions points for adding / replacing some other aspects of the Launcher experience.\n     */\n    boolean shouldMoveToDefaultScreenOnHomeIntent();\n    AllAppsSearchBarController getAllAppsSearchBarController();\n\n    /**\n     * Sets the callbacks to allow reacting the actions of search overlays of the launcher.\n     *\n     * @param callbacks A set of callbacks to the Launcher, is actually a LauncherSearchCallback,\n     *                  but for implementation purposes is passed around as an object.\n     */\n    void setLauncherSearchCallback(Object callbacks);\n\n    boolean shouldShowDiscoveryBounce();\n}<｜fim▁end｜>",
    "response": "\n    /*\n     * Extension points for providing custom behavior on certain user interactions.\n     */\n    void onLauncherProviderChange();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.xxl.mq.client.consumer.registry;\n\nimport com.xxl.mq.client.consumer.annotation.MqConsumer;\nimport com.xxl.mq.client.consumer.thread.ConsumerThread;\nimport com.xxl.registry.client.model.XxlRegistryDataParamVO;\nimport com.xxl.rpc.registry.impl.XxlRegistryServiceRegistry;\n\nimport java.util.*;\n\npublic class ConsumerRegistryHelper {\n\n<｜fim▁hole｜>        this.serviceRegistry = serviceRegistry;\n    }\n\n    // ---------------------- util ----------------------\n    private static final String SpaceMark = \"_consumer_\";\n\n    private static String makeRegistryKey(String topic){\n        String registryKey = SpaceMark.concat(topic);                       // _consumer_{topic01}\n        return registryKey;\n    }\n    private static String makeRegistryValPrefix(String group){\n        String registryValPrefix = group.concat(SpaceMark);                 // {group01}_consumer_***\n        return registryValPrefix;\n    }\n    private static String makeRegistryVal(String group, String consumerUuid){\n        String registryValPrefix = makeRegistryValPrefix(group);\n        String registryVal = registryValPrefix.concat(consumerUuid);        // {group01}_consumer_{uuid}\n        return registryVal;\n    }\n    private static String parseGroupFromRegistryVal(String registryVal){\n        String[] onlineConsumerItemArr = registryVal.split(SpaceMark);\n        if (onlineConsumerItemArr!=null && onlineConsumerItemArr.length>1) {\n            String group = onlineConsumerItemArr[0];\n            return group;\n        }\n        return null;\n    }\n\n    // ---------------------- api ----------------------\n\n    /**\n     * consumer registry\n     *\n     * @param consumerThreadList\n     */\n    public void registerConsumer(List<ConsumerThread> consumerThreadList) {\n\n        List<XxlRegistryDataParamVO> registryParamList = new ArrayList<>();\n        Set<String> registryParamKeyList = new HashSet<>();\n\n        for (ConsumerThread consumerThread: consumerThreadList) {\n            String registryKey = makeRegistryKey(consumerThread.getMqConsumer().topic());\n            String registryVal = makeRegistryVal(consumerThread.getMqConsumer().group(), consumerThread.getUuid());\n\n            registryParamList.add(new XxlRegistryDataParamVO(registryKey, registryVal));\n            registryParamKeyList.add(registryKey);\n        }\n\n        // registry mult consumer\n        serviceRegistry.getXxlRegistryClient().registry(registryParamList);\n\n        // discovery mult consumer\n        serviceRegistry.getXxlRegistryClient().discovery(registryParamKeyList);\n    }\n\n    /**\n     * consumer registry remove\n     */\n    public void removeConsumer(List<ConsumerThread> consumerThreadList){\n        List<XxlRegistryDataParamVO> registryParamList = new ArrayList<>();\n        for (ConsumerThread consumerThread: consumerThreadList) {\n            String registryKey = makeRegistryKey(consumerThread.getMqConsumer().topic());\n            String registryVal = makeRegistryVal(consumerThread.getMqConsumer().group(), consumerThread.getUuid());\n            registryParamList.add(new XxlRegistryDataParamVO(registryKey, registryVal));\n        }\n\n        serviceRegistry.getXxlRegistryClient().remove(registryParamList);\n    }\n\n    /**\n     * isActice\n     *\n     * @param consumerThread\n     * @return\n     */\n    public ActiveInfo isActice(ConsumerThread consumerThread){\n        // init data\n        String registryKey = makeRegistryKey(consumerThread.getMqConsumer().topic());\n        String registryValPrefix = makeRegistryValPrefix(consumerThread.getMqConsumer().group());\n        String registryVal = makeRegistryVal(consumerThread.getMqConsumer().group(), consumerThread.getUuid());\n\n        // load all consumer\n        TreeSet<String> onlineConsumerSet = serviceRegistry.discovery(registryKey);\n        if (onlineConsumerSet==null || onlineConsumerSet.size()==0) {\n            return null;\n        }\n\n        // filter by group\n        TreeSet<String> onlineConsumerSet_group = new TreeSet<String>();\n        for (String onlineConsumerItem : onlineConsumerSet) {\n            if (onlineConsumerItem.startsWith(registryValPrefix)) {\n                onlineConsumerSet_group.add(onlineConsumerItem);\n            }\n        }\n        if (onlineConsumerSet_group==null || onlineConsumerSet_group.size()==0) {\n            return null;\n        }\n\n        // rank\n        int rank = -1;\n        for (String onlineConsumerItem : onlineConsumerSet_group) {\n            rank++;\n            if (onlineConsumerItem.equals(registryVal)) {\n                break;\n            }\n        }\n        if (rank == -1) {\n            return null;\n        }\n\n        return new ActiveInfo(rank, onlineConsumerSet_group.size(), onlineConsumerSet_group.toString());\n    }\n\n    /**\n     * get total group list\n     */\n    public Set<String> getTotalGroupList(String topic){\n        // init data\n        String registryKey = makeRegistryKey(topic);\n\n        // load all consumer, find all groups\n        Set<String> groupSet = new HashSet<>();\n        TreeSet<String> onlineConsumerRegistryValList = serviceRegistry.discovery(registryKey);\n\n        if (onlineConsumerRegistryValList!=null && onlineConsumerRegistryValList.size()>0) {\n            for (String onlineConsumerRegistryValItem : onlineConsumerRegistryValList) {\n                String groupItem = parseGroupFromRegistryVal(onlineConsumerRegistryValItem);\n                if (groupItem!=null && groupItem.length()>1) {\n                    groupSet.add(groupItem);\n                }\n            }\n        }\n\n        if (!groupSet.contains(MqConsumer.DEFAULT_GROUP)) {\n            groupSet.add(MqConsumer.DEFAULT_GROUP);\n        }\n        return groupSet;\n    }\n\n    public static class ActiveInfo{\n        // consumer rank\n        public int rank;\n        // alive num\n        public int total;\n        // registry rank info\n        public String registryRankInfo;\n\n        public ActiveInfo(int rank, int total, String registryRankInfo) {\n            this.rank = rank;\n            this.total = total;\n            this.registryRankInfo = registryRankInfo;\n        }\n\n        @Override\n        public String toString() {\n            return \"ActiveInfo{\" +\n                    \"rank=\" + rank +\n                    \", total=\" + total +\n                    \", registryRankInfo='\" + registryRankInfo + '\\'' +\n                    '}';\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "    private XxlRegistryServiceRegistry serviceRegistry;\n    public ConsumerRegistryHelper(XxlRegistryServiceRegistry serviceRegistry) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.assertj.core.internal.strings;\n<｜fim▁hole｜>import static org.assertj.core.error.ShouldBeEmpty.shouldBeEmpty;\nimport static org.assertj.core.test.TestData.someInfo;\nimport static org.assertj.core.util.FailureMessages.actualIsNull;\n\nimport org.assertj.core.api.AssertionInfo;\nimport org.assertj.core.internal.Strings;\nimport org.assertj.core.internal.StringsBaseTest;\nimport org.junit.jupiter.api.Test;\n\npublic class Strings_assertEmpty_Test extends StringsBaseTest {\n\n  @Test\n  public void should_fail_if_actual_is_null() {\n    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> strings.assertEmpty(someInfo(), null))\n                                                   .withMessage(actualIsNull());\n  }\n\n  @Test\n  public void should_fail_if_actual_is_not_empty() {\n    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> strings.assertEmpty(someInfo(), \"Yoda\"))\n                                                   .withMessage(shouldBeEmpty(\"Yoda\").create());\n  }\n\n  @Test\n  public void should_pass_if_actual_is_empty() {\n    strings.assertEmpty(someInfo(), \"\");\n  }\n\n  @Test\n  public void should_fail_if_actual_is_null_whatever_custom_comparison_strategy_is() {\n    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> stringsWithCaseInsensitiveComparisonStrategy.assertEmpty(someInfo(), null))\n                                                   .withMessage(actualIsNull());\n  }\n\n  @Test\n  public void should_fail_if_actual_is_not_empty_whatever_custom_comparison_strategy_is() {\n    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -> stringsWithCaseInsensitiveComparisonStrategy.assertEmpty(someInfo(), \"Yoda\"))\n                                                   .withMessage(shouldBeEmpty(\"Yoda\").create());\n  }\n\n  @Test\n  public void should_pass_if_actual_is_empty_whatever_custom_comparison_strategy_is() {\n    stringsWithCaseInsensitiveComparisonStrategy.assertEmpty(someInfo(), \"\");\n  }\n}<｜fim▁end｜>",
    "response": "\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.basho.riak.presto.models;\n\nimport com.facebook.presto.spi.HostAddress;\nimport com.facebook.presto.spi.Node;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\nimport java.net.URI;\n\npublic class PairwiseNode implements Node {\n\n    public final String localNode;\n    public final String host;\n    public final int port;\n\n    public PairwiseNode(@JsonProperty(\"localNode\") String localNode,\n                        @JsonProperty(\"host\") String host,\n                        @JsonProperty(\"port\") int port) {\n<｜fim▁hole｜>    @JsonIgnore\n    @Override\n    public HostAddress getHostAndPort() {\n        return HostAddress.fromParts(host, port);\n    }\n\n    @JsonProperty\n    public String getHost() {\n        return host;\n    }\n\n    @JsonProperty\n    public int getPort() {\n        return port;\n    }\n\n    @JsonProperty\n    public String getLocalNode() {\n        return localNode;\n    }\n\n    @JsonIgnore\n    @Override\n    public URI getHttpUri() {\n        return URI.create(\"http://\" + host + \":\" + port);\n    }\n\n    @JsonIgnore\n    @Override\n    public String getNodeIdentifier() {\n        return null;\n    }\n}<｜fim▁end｜>",
    "response": "        this.host = host;\n        this.port = port;\n        this.localNode = localNode;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.drools.common;\n\nimport org.drools.reteoo.LeftTuple;\nimport org.drools.rule.EntryPoint;\nimport org.drools.rule.Rule;\nimport org.drools.spi.Activation;\nimport org.drools.spi.PropagationContext;\nimport org.drools.util.ObjectHashMap;\n\nimport java.io.ObjectInput;\nimport java.io.ObjectOutput;\nimport java.io.IOException;\n\npublic class PropagationContextImpl\n    implements\n    PropagationContext {\n\n    private static final long  serialVersionUID = 8400185220119865618L;\n\n    private int                type;\n\n    private Rule               rule;\n\n    private LeftTuple          leftTuple;\n\n    private InternalFactHandle factHandle;\n\n    private long               propagationNumber;\n\n    public int                 activeActivations;\n\n    public int                 dormantActivations;\n\n    public ObjectHashMap       retracted;\n\n    private EntryPoint         entryPoint;\n\n    public PropagationContextImpl() {\n\n    }\n\n    public PropagationContextImpl(final long number,\n                                  final int type,\n                                  final Rule rule,\n                                  final LeftTuple leftTuple,\n                                  final InternalFactHandle factHandle) {\n        this.type = type;\n        this.rule = rule;\n        this.leftTuple = leftTuple;\n        this.factHandle = factHandle;\n        this.propagationNumber = number;\n        this.activeActivations = 0;\n        this.dormantActivations = 0;\n        this.entryPoint = EntryPoint.DEFAULT;\n    }\n\n    public PropagationContextImpl(final long number,\n                                  final int type,\n                                  final Rule rule,\n                                  final LeftTuple leftTuple,\n                                  final InternalFactHandle factHandle,\n                                  final int activeActivations,\n                                  final int dormantActivations,\n                                  final EntryPoint entryPoint) {\n        this.type = type;\n        this.rule = rule;\n        this.leftTuple = leftTuple;\n        this.factHandle = factHandle;\n        this.propagationNumber = number;\n        this.activeActivations = activeActivations;\n        this.dormantActivations = dormantActivations;\n        this.entryPoint = entryPoint;\n    }\n\n    public void readExternal(ObjectInput in) throws IOException,\n                                            ClassNotFoundException {\n        this.type = in.readInt();\n        this.activeActivations = in.readInt();\n        this.dormantActivations = in.readInt();\n        this.propagationNumber = in.readLong();\n        this.rule = (Rule) in.readObject();\n        this.leftTuple = (LeftTuple) in.readObject();\n        this.retracted = (ObjectHashMap) in.readObject();\n        this.entryPoint = (EntryPoint) in.readObject();\n    }\n\n    public void writeExternal(ObjectOutput out) throws IOException {\n        out.writeInt( this.type );\n        out.writeInt( this.activeActivations );\n        out.writeInt( this.dormantActivations );\n        out.writeLong( this.propagationNumber );\n        out.writeObject( this.rule );\n        out.writeObject( this.leftTuple );\n        out.writeObject( this.retracted );\n        out.writeObject( this.entryPoint );\n    }\n\n    public long getPropagationNumber() {\n        return this.propagationNumber;\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.drools.reteoo.PropagationContext#getRuleOrigin()\n     */\n    public Rule getRuleOrigin() {\n        return this.rule;\n    }\n\n    public LeftTuple getLeftTupleOrigin() {\n        return this.leftTuple;\n    }\n\n    public InternalFactHandle getFactHandleOrigin() {\n        return this.factHandle;\n    }\n\n    /*\n     * (non-Javadoc)\n     *\n     * @see org.drools.reteoo.PropagationContext#getType()\n     */\n    public int getType() {\n        return this.type;\n    }\n\n    public int getActiveActivations() {\n        return this.activeActivations;\n<｜fim▁hole｜>    }\n\n    public void addRetractedTuple(final Rule rule,\n                                  final Activation activation) {\n        if ( this.retracted == null ) {\n            this.retracted = new ObjectHashMap();\n        }\n\n        LeftTuple tuple = (LeftTuple) activation.getTuple();\n\n        ObjectHashMap tuples = (ObjectHashMap) this.retracted.get( rule );\n        if ( tuples == null ) {\n            tuples = new ObjectHashMap();\n            this.retracted.put( rule,\n                                tuples );\n        }\n        tuples.put( tuple,\n                    activation );\n    }\n\n    public Activation removeRetractedTuple(final Rule rule,\n                                           final LeftTuple tuple) {\n        if ( this.retracted == null ) {\n            return null;\n        }\n\n        final ObjectHashMap tuples = (ObjectHashMap) this.retracted.get( rule );\n        if ( tuples != null ) {\n            return (Activation) tuples.remove( tuple );\n        } else {\n            return null;\n        }\n    }\n\n    public void clearRetractedTuples() {\n        this.retracted = null;\n    }\n\n    public void releaseResources() {\n        this.leftTuple = null;\n        this.retracted = null;\n        this.rule = null;\n    }\n\n    /**\n     * @return the entryPoint\n     */\n    public EntryPoint getEntryPoint() {\n        return entryPoint;\n    }\n\n    /**\n     * @param entryPoint the entryPoint to set\n     */\n    public void setEntryPoint(EntryPoint entryPoint) {\n        this.entryPoint = entryPoint;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    public int getDormantActivations() {\n        return this.dormantActivations;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package dk.brics.jwig.util;\n\nimport java.util.Random;\n\n<｜fim▁hole｜>\n    private static Random rnd = new Random(); // Random is not perfect, but e.g. SecureRandom/randomUUID are probably too slow\n\n    private RandomString() {}\n\n    /**\n     * Returns a random printable string.\n     */\n    public static String get(int length) {\n        StringBuilder b = new StringBuilder();\n        for (int i = 0; i < length; i++)\n            b.append((char)(rnd.nextInt(10) + '0'));\n        return b.toString();\n    }\n}<｜fim▁end｜>",
    "response": "public class RandomString {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.beaconhillcott.moodlerest;\n\n<｜fim▁hole｜>    MoodleRestModAssignException() {}\n\n    MoodleRestModAssignException(String msg) {\n        super(msg);\n    }\n\n    @Override\n    public String getMessage() {\n        return super.getMessage();\n    }\n}<｜fim▁end｜>",
    "response": "public class MoodleRestModAssignException extends MoodleRestException {\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package krasa.svn.backend.domain;\n\nimport krasa.svn.backend.service.conventions.TMSvnConventionsStrategy;\n\nimport org.junit.Before;\n\npublic class ConventionsDependentStrategyTest {\n\n    protected TMSvnConventionsStrategy TMSvnConventionsStrategy;\n\n<｜fim▁hole｜>        TMSvnConventionsStrategy = new TMSvnConventionsStrategy();\n    }\n}<｜fim▁end｜>",
    "response": "    @Before\n    public void setUp() throws Exception {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.pescuma.buildhealth.cli.commands.add.staticanalysis;\n\n<｜fim▁hole｜>\nimport org.pescuma.buildhealth.cli.BaseBuildHealthFilesCliCommand;\nimport org.pescuma.buildhealth.extractor.staticanalysis.ResharperInspectCodeExtractor;\n\n@Command(name = \"resharper-inspectcode\", description = \"Add code duplication information from ReSharper InspectCode output file\")\npublic class ResharperInspectCodeExtractorCommand extends BaseBuildHealthFilesCliCommand {\n\n    @Override\n    public void execute() {\n        buildHealth.extract(new ResharperInspectCodeExtractor(getFiles()));\n    }\n\n}<｜fim▁end｜>",
    "response": "import io.airlift.airline.Command;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package crf.eval;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Vector;\n\npublic class CRFNEREvaluater {\n    private int resultTotalNum = 0;\n    private int goldTotalNum = 0;\n    private int correctTotalNum = 0;\n\n    public void evalFile(String filename, int resultColNum, int goldColNum, String type)\n    {\n        try {\n            BufferedReader freader = new BufferedReader(new FileReader(filename));\n            String line;\n            Vector<String> sentenceVector = new Vector<String>();\n            while((line=freader.readLine()) != null)\n            {\n                if(line.length()>0)\n                {\n                    sentenceVector.add(line);\n                }else if(!sentenceVector.isEmpty())\n                {\n                    String[] resultSeq = getColoumSeq(sentenceVector, resultColNum);\n                    String[] goldSeq = getColoumSeq(sentenceVector, goldColNum);\n                    addSeqPair(resultSeq, goldSeq, type);\n                    sentenceVector.clear();\n                }\n            }\n            freader.close();\n        } catch (FileNotFoundException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n    }\n<｜fim▁hole｜>        double recall = (double)correctTotalNum / (double)goldTotalNum;\n        if (Double.isNaN(precision)) precision = 0.0;\n        if (Double.isNaN(recall)) recall = 0.0;\n        double fscore = 2 * precision * recall / (precision + recall);\n        if (Double.isNaN(fscore)) fscore = 0.0;\n\n        System.out.println(\"Correct Entity Number:\"+correctTotalNum);\n        System.out.println(\"Result Entity Number:\"+resultTotalNum);\n        System.out.println(\"GoldStandard Entity Number:\"+goldTotalNum);\n        System.out.println(\"Precision:\"+precision);\n        System.out.println(\"Recall:\"+recall);\n        System.out.println(\"F score:\"+fscore);\n\n    }\n\n    public void clear()\n    {\n        resultTotalNum = 0;\n        goldTotalNum = 0;\n        correctTotalNum = 0;\n    }\n    private String[] getColoumSeq(Vector<String> sentenceVector, int num)\n    {\n        int size = sentenceVector.size();\n        String[] seq = new String[size];\n        for(int i=0; i<size; i++)\n        {\n            String[] parts = sentenceVector.elementAt(i).split(\"\\\\s+\");\n            seq[i] = parts[num];\n        }\n        return seq;\n    }\n\n    private void addSeqPair(String[] resultSeq, String[] goldSeq, String type)\n    {\n        Vector<EvalEntity> resultEntityVector = getEntitiesFromBIOSeq(resultSeq);\n        Vector<EvalEntity> goldEntityVector = getEntitiesFromBIOSeq(goldSeq);\n\n        int resultNum = 0;\n        int goldNum = 0;\n        int correctNum = 0;\n\n        for(EvalEntity resultEntity : resultEntityVector)\n        {\n            if(type.equals(\"ALL\") || resultEntity.getType().equals(type))\n            {\n                resultNum++;\n                for(EvalEntity goldEntity : goldEntityVector)\n                {\n                    if(resultEntity.equals(goldEntity))\n                    {\n                        correctNum++;\n                    }\n                }\n            }\n        }\n        for(EvalEntity goldEntity : goldEntityVector)\n        {\n            if(type.equals(\"ALL\") || goldEntity.getType().equals(type))\n            {\n                goldNum++;\n            }\n        }\n\n        resultTotalNum += resultNum;\n        goldTotalNum += goldNum;\n        correctTotalNum += correctNum;\n    }\n\n    private Vector<EvalEntity> getEntitiesFromBIOSeq(String[] seq)\n    {\n        Vector<EvalEntity> entityVector = new Vector<EvalEntity>();\n\n        int beginPos = 0;\n        int endPos = 0;\n        String currentType = null;\n        boolean inEntity = false;\n        for(int i=0; i<seq.length; i++)\n        {\n            if(seq[i].startsWith(\"B\"))\n            {\n                beginPos = i;\n                int pos = seq[i].indexOf('-');\n                currentType = seq[i].substring(pos+1);\n                inEntity = true;\n            }else if(!seq[i].equals(\"I-\"+currentType) && inEntity)\n            {\n                endPos = i-1;\n                EvalEntity entity = new EvalEntity(beginPos,endPos,currentType);\n                entityVector.add(entity);\n                inEntity = false;\n            }\n        }\n        if(inEntity)\n        {\n            endPos = seq.length-1;\n            EvalEntity entity = new EvalEntity(beginPos,endPos,currentType);\n            entityVector.add(entity);\n            inEntity = false;\n        }\n\n        return entityVector;\n    }\n}<｜fim▁end｜>",
    "response": "\n    public void PrintEvalResult()\n    {\n        double precision = (double)correctTotalNum / (double)resultTotalNum;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package gjb.experimental;\n\nimport com.qualcomm.robotcore.eventloop.opmode.Disabled;\nimport com.qualcomm.robotcore.eventloop.opmode.OpMode;\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\n\nimport gjb.interfaces.LoggingInterface;\nimport gjb.interfaces.RuntimeSupportInterface;\nimport gjb.utils.AndroidRuntimeSupport;\n\n@TeleOp(name=\"DOpMode_miraidk\", group=\"Pushbot\")\n@Disabled\n\npublic class DOpMode_miraidk extends OpMode{\n    final String THIS_COMPONENT = \"DOM_driveOnlyPushBot\";\n    private final RuntimeSupportInterface rt = new AndroidRuntimeSupport(this);\n\n    // These are initialized during\n    private  SubSysmiraidk drive;\n    private ITask_miraidk driveTask;\n    private LoggingInterface log;\n\n    /*************** START OF OPMODE INTERFACE METHODS **********************/\n\n    @Override\n    public void init() {\n        log = rt.startLogging(DOpMode_miraidk.class.toString());\n        log.pri1(LoggingInterface.INIT_START, THIS_COMPONENT);\n\n        //configure the motors\n        SubSysmiraidk.Config driveConfig = new SubSysmiraidk.Config();\n        driveConfig.leftMotorName(\"left_drive\");\n        driveConfig.rightMotorName(\"right_drive\");\n        driveConfig.fleftMotorName(\"fleft_drive\");\n        driveConfig.frightMotorName(\"fright_drive\");\n\n        drive = new SubSysmiraidk(rt, driveConfig);\n        driveTask = new ITask_miraidk(rt, drive);\n\n<｜fim▁hole｜>    }\n\n    @Override\n    public void init_loop() {\n        driveTask.init_loop();\n    }\n\n    @Override\n    public void start() {\n        driveTask.start();\n    }\n\n    @Override\n    public void loop() {\n        driveTask.loop();\n    }\n\n    @Override\n    public void stop() {\n        driveTask.stop();\n        rt.stopLogging();\n    }\n\n    /*************** END OF OPMODE INTERFACE METHODS ************************/\n}<｜fim▁end｜>",
    "response": "        // Initialize the subsystem and associated task\n        drive.init();\n        driveTask.init();\n\n        log.pri1(LoggingInterface.INIT_END, THIS_COMPONENT);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.oracle.truffle.r.engine.interop;\n\nimport com.oracle.truffle.api.interop.CanResolve;\nimport com.oracle.truffle.api.interop.MessageResolution;\nimport com.oracle.truffle.api.interop.Resolve;\nimport com.oracle.truffle.api.interop.TruffleObject;\nimport com.oracle.truffle.api.nodes.Node;\nimport com.oracle.truffle.r.runtime.context.RContext;\n\n@MessageResolution(receiverType = RContext.class)\npublic class RContextMR {\n\n    @Resolve(message = \"KEY_INFO\")\n    public abstract static class RContextKeyInfoNode extends Node {\n        protected Object access(@SuppressWarnings(\"unused\") TruffleObject receiver, @SuppressWarnings(\"unused\") Object identifier) {\n            return 0;\n        }\n    }\n\n    @CanResolve\n    public abstract static class IsRContext extends Node {\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "\n        protected static boolean test(TruffleObject receiver) {\n            return receiver instanceof RContext;\n        }\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package sun.security.krb5;\n\nimport java.io.IOException;\nimport java.util.Collection;\nimport java.util.Hashtable;\nimport java.util.Vector;\n\npublic class SCDynamicStoreConfig {\n    private static native void installNotificationCallback();\n    private static native Hashtable<String, Object> getKerberosConfig();\n    private static boolean DEBUG = sun.security.krb5.internal.Krb5.DEBUG;\n\n    static {\n        boolean isMac = java.security.AccessController.doPrivileged(\n            new java.security.PrivilegedAction<Boolean>() {\n                public Boolean run() {\n                    String osname = System.getProperty(\"os.name\");\n                    if (osname.contains(\"OS X\")) {\n                        System.loadLibrary(\"osx\");\n                        return true;\n                    }\n                    return false;\n                }\n            });\n        if (isMac) installNotificationCallback();\n    }\n\n    private static Vector<String> unwrapHost(\n            Collection<Hashtable<String, String>> c) {\n        Vector<String> vector = new Vector<String>();\n        for (Hashtable<String, String> m : c) {\n            vector.add(m.get(\"host\"));\n        }\n        return vector;\n    }\n\n    /**\n     * convertRealmConfigs: Maps the Object graph that we get from JNI to the\n     * object graph that Config expects. Also the items inside the kdc array\n     * are wrapped inside Hashtables\n<｜fim▁hole｜>        Hashtable<String, Object> realmsTable = new Hashtable<String, Object>();\n\n        for (String realm : configs.keySet()) {\n            // get the kdc\n            Hashtable<String, Collection<?>> map =\n                    (Hashtable<String, Collection<?>>) configs.get(realm);\n            Hashtable<String, Vector<String>> realmMap =\n                    new Hashtable<String, Vector<String>>();\n\n            // put the kdc into the realmMap\n            Collection<Hashtable<String, String>> kdc =\n                    (Collection<Hashtable<String, String>>) map.get(\"kdc\");\n            if (kdc != null) realmMap.put(\"kdc\", unwrapHost(kdc));\n\n            // put the admin server into the realmMap\n            Collection<Hashtable<String, String>> kadmin =\n                    (Collection<Hashtable<String, String>>) map.get(\"kadmin\");\n            if (kadmin != null) realmMap.put(\"admin_server\", unwrapHost(kadmin));\n\n            // add the full entry to the realmTable\n            realmsTable.put(realm, realmMap);\n        }\n\n        return realmsTable;\n    }\n\n    /**\n     * Calls down to JNI to get the raw Kerberos Config and maps the object\n     * graph to the one that Kerberos Config in Java expects\n     *\n     * @return\n     * @throws IOException\n     */\n    public static Hashtable<String, Object> getConfig() throws IOException {\n        Hashtable<String, Object> stanzaTable = getKerberosConfig();\n        if (stanzaTable == null) {\n            throw new IOException(\n                    \"Could not load configuration from SCDynamicStore\");\n        }\n        if (DEBUG) System.out.println(\"Raw map from JNI: \" + stanzaTable);\n        return convertNativeConfig(stanzaTable);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private static Hashtable<String, Object> convertNativeConfig(\n            Hashtable<String, Object> stanzaTable) {\n        // convert SCDynamicStore realm structure to Java realm structure\n        Hashtable<String, ?> realms =\n                (Hashtable<String, ?>) stanzaTable.get(\"realms\");\n        if (realms != null) {\n            stanzaTable.remove(\"realms\");\n            Hashtable<String, Object> realmsTable = convertRealmConfigs(realms);\n            stanzaTable.put(\"realms\", realmsTable);\n        }\n        WrapAllStringInVector(stanzaTable);\n        if (DEBUG) System.out.println(\"stanzaTable : \" + stanzaTable);\n        return stanzaTable;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private static void WrapAllStringInVector(\n            Hashtable<String, Object> stanzaTable) {\n        for (String s: stanzaTable.keySet()) {\n            Object v = stanzaTable.get(s);\n            if (v instanceof Hashtable) {\n                WrapAllStringInVector((Hashtable<String,Object>)v);\n            } else if (v instanceof String) {\n                Vector<String> vec = new Vector<>();\n                vec.add((String)v);\n                stanzaTable.put(s, vec);\n            }\n        }\n    }\n}<｜fim▁end｜>",
    "response": "     */\n    @SuppressWarnings(\"unchecked\")\n    private static Hashtable<String, Object>\n            convertRealmConfigs(Hashtable<String, ?> configs) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ims.eas.vo.lookups;\n\nimport ims.framework.cn.data.TreeNode;\nimport java.util.ArrayList;\nimport ims.framework.utils.Image;\nimport ims.framework.utils.Color;\n\npublic class IVContrast extends ims.vo.LookupInstVo implements TreeNode\n{\n    private static final long serialVersionUID = 1L;\n\n    public IVContrast()\n    {\n        super();\n    }\n    public IVContrast(int id)\n    {\n        super(id, \"\", true);\n    }\n    public IVContrast(int id, String text, boolean active)\n    {\n        super(id, text, active, null, null, null);\n    }\n    public IVContrast(int id, String text, boolean active, IVContrast parent, Image image)\n    {\n        super(id, text, active, parent, image);\n    }\n    public IVContrast(int id, String text, boolean active, IVContrast parent, Image image, Color color)\n    {\n        super(id, text, active, parent, image, color);\n    }\n    public IVContrast(int id, String text, boolean active, IVContrast parent, Image image, Color color, int order)\n    {\n        super(id, text, active, parent, image, color, order);\n    }\n    public static IVContrast buildLookup(ims.vo.LookupInstanceBean bean)\n    {\n        return new IVContrast(bean.getId(), bean.getText(), bean.isActive());\n    }\n    public String toString()\n    {\n        if(getText() != null)\n            return getText();\n        return \"\";\n    }\n    public TreeNode getParentNode()\n    {\n        return (IVContrast)super.getParentInstance();\n    }\n    public IVContrast getParent()\n    {\n        return (IVContrast)super.getParentInstance();\n    }\n    public void setParent(IVContrast parent)\n    {\n<｜fim▁hole｜>    }\n    public TreeNode[] getChildren()\n    {\n        ArrayList children = super.getChildInstances();\n        IVContrast[] typedChildren = new IVContrast[children.size()];\n        for (int i = 0; i < children.size(); i++)\n        {\n            typedChildren[i] = (IVContrast)children.get(i);\n        }\n        return typedChildren;\n    }\n    public int addChild(TreeNode child)\n    {\n        if (child instanceof IVContrast)\n        {\n            super.addChild((IVContrast)child);\n        }\n        return super.getChildInstances().size();\n    }\n    public int removeChild(TreeNode child)\n    {\n        if (child instanceof IVContrast)\n        {\n            super.removeChild((IVContrast)child);\n        }\n        return super.getChildInstances().size();\n    }\n    public Image getExpandedImage()\n    {\n        return super.getImage();\n    }\n    public Image getCollapsedImage()\n    {\n        return super.getImage();\n    }\n    public static ims.framework.IItemCollection getNegativeInstancesAsIItemCollection()\n    {\n        IVContrastCollection result = new IVContrastCollection();\n        return result;\n    }\n    public static IVContrast[] getNegativeInstances()\n    {\n        return new IVContrast[] {};\n    }\n    public static String[] getNegativeInstanceNames()\n    {\n        return new String[] {};\n    }\n    public static IVContrast getNegativeInstance(String name)\n    {\n        if(name == null)\n            return null;\n        // No negative instances found\n        return null;\n    }\n    public static IVContrast getNegativeInstance(Integer id)\n    {\n        if(id == null)\n            return null;\n        // No negative instances found\n        return null;\n    }\n    public int getTypeId()\n    {\n        return TYPE_ID;\n    }\n    public static final int TYPE_ID = 1451005;\n}<｜fim▁end｜>",
    "response": "        super.setParentInstance(parent);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.antkar.syn.internal.binder.lookup;\n\nimport org.antkar.syn.binder.SynBinderException;\nimport org.antkar.syn.internal.binder.BoundObject;\n\nfinal class LookupOwnerExpression extends LookupComplexTermExpression {\n\n    LookupOwnerExpression(Class<?> clsOfValue, LookupTermExpression baseExpression) {\n        super(clsOfValue, baseExpression);\n    }\n\n    @Override\n    Object eval(LookupEnv env) throws SynBinderException {\n        LookupTermExpression baseExpression = getBaseExpression();\n        Object eval = baseExpression.eval(env);\n\n        Object result;\n        if (eval == null || eval == UNDEFINED) {\n            result = UNDEFINED;\n        } else {\n            BoundObject bEval = (BoundObject) eval;\n            result = bEval.getOwner();\n        }\n<｜fim▁hole｜>    @Override\n    String toSourceString() {\n        LookupTermExpression baseExpression = getBaseExpression();\n        String baseSourceString = baseExpression.toSourceString();\n        String string = baseSourceString + \".owner\";\n        return string;\n    }\n\n}<｜fim▁end｜>",
    "response": "\n        return result;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package br.com.objectos.jabuticava.boleto;\n\n<｜fim▁hole｜>    return Banco.ITAU;\n  }\n\n  @Override\n  public Carteira getCarteira() {\n    return Carteira.COBRANCA_SIMPLES_COM_REGISTRO;\n  }\n\n  @Override\n  public String getAgencia() {\n    return \"5252\";\n  }\n\n  @Override\n  public String getNumero() {\n    return \"1234-5\";\n  }\n\n}<｜fim▁end｜>",
    "response": "class ContaBancariaFalso extends ContaBancaria {\n\n  @Override\n  public Banco getBanco() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package nl.strohalm.cyclos.controls.members;\n\nimport nl.strohalm.cyclos.controls.elements.RemoveElementForm;\n\npublic class RemoveMemberForm extends RemoveElementForm {\n    private static final long serialVersionUID = -5685043060964974792L;\n\n    public long getMemberId() {\n        return getElementId();\n<｜fim▁hole｜>\n    public void setMemberId(final long memberId) {\n        setElementId(memberId);\n    }\n}<｜fim▁end｜>",
    "response": "    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.wallpaper.tim.phoneinsidewallpaper.Widget;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.graphics.RectF;\nimport android.util.TypedValue;\n\nimport com.wallpaper.tim.phoneinsidewallpaper.Set.Setting;\n\npublic class WidgetTool {\n\n    //筆劃粗細 （單位是Pixel）\n    private int stroke_w;\n\n    //小工具的高度 （單位是Pixel）\n    private int widgetH;\n\n    //小圓形的高度 （單位是Pixel）\n    private float smaller_stroke_w;\n\n    //一個空心圓要被切成幾段。預設值是十段\n    private int SPLIT = 10;\n\n    //用來繪製的畫布物件\n    private Canvas canvas;\n    private Bitmap bmp;\n\n    //外層大圓範圍 與 內層小圓範圍\n    private RectF percentRectF ,splitRectF;\n\n    //主要畫筆 與 繪製指針區域的畫筆\n    private Paint paint ,selectPaint;\n\n    //360-(間隔數量*間隔角度)\n    private float totalUnitDegree;\n\n    //單一餅皮的所需角度\n    private float unitDegree;\n\n    public WidgetTool(Context context,String color, int w_InDP){\n        init(context, color, w_InDP);\n    }\n\n    public WidgetTool(Context context,String color, int w_InDP, int split){\n        SPLIT = split;\n        init(context, color, w_InDP);\n    }\n\n    private void init(Context context,String color, int w_InDP){\n        stroke_w = TypedValue.COMPLEX_UNIT_DIP * 10;\n        smaller_stroke_w = (float) (stroke_w * (0.7));\n        widgetH = TypedValue.COMPLEX_UNIT_DIP * w_InDP;\n\n        initCanvas();\n        String fadeColor = Setting.getFadeColor(color);\n        initPercent(color, fadeColor);\n        initSplit(color, fadeColor);\n    }\n\n    private void initCanvas(){\n        bmp = Bitmap.createBitmap(widgetH, widgetH, Bitmap.Config.ARGB_4444);\n        canvas = new Canvas(bmp);\n\n        percentRectF = new RectF(stroke_w, stroke_w, canvas.getWidth() - stroke_w, canvas.getHeight() - stroke_w);\n        int margin = (int)(stroke_w * 2.5);\n        splitRectF = new RectF(margin, margin, canvas.getWidth() - margin, canvas.getHeight() - margin);\n    }\n\n    private void initSplit(String selectColor, String fadeColor) {\n        paint = new Paint();\n        paint.setAntiAlias(true);\n        paint.setColor(Color.parseColor(fadeColor));\n        paint.setStrokeWidth(smaller_stroke_w);\n        paint.setStyle(Paint.Style.STROKE);\n\n        selectPaint = new Paint();\n        selectPaint.setAntiAlias(true);\n<｜fim▁hole｜>        float SEPARATE_DEGREE = 3;\n        totalUnitDegree = ((float) (360)) / SPLIT;\n        if(totalUnitDegree <= SEPARATE_DEGREE){\n            SEPARATE_DEGREE = totalUnitDegree / 2;\n        }\n\n        unitDegree = totalUnitDegree - SEPARATE_DEGREE;\n    }\n\n    private void drawSplitCanvas(int select){\n        for (int i = 0 ; i < SPLIT ;i++){\n            canvas.drawArc(splitRectF,//弧形範圍長寬與位置座標\n                    totalUnitDegree*i - 90,//該餅皮起始角度，90是誤差調整\n                    unitDegree,//餅皮結束角度\n                    false,//空心圓形\n                    i < select ? selectPaint : paint);//繪製顏色\n        }\n    }\n\n    private Paint percentMainPaint, percentFadePaint;\n\n    private void initPercent(String color, String fadeColor){\n        percentMainPaint = new Paint();\n        percentMainPaint.setAntiAlias(true);\n        percentMainPaint.setColor(Color.parseColor(color));\n        percentMainPaint.setStrokeWidth(stroke_w);\n        percentMainPaint.setStyle(Paint.Style.STROKE);\n\n        percentFadePaint = new Paint();\n        percentFadePaint.setAntiAlias(true);\n        percentFadePaint.setColor(Color.parseColor(fadeColor));\n        percentFadePaint.setStrokeWidth(stroke_w);\n        percentFadePaint.setStyle(Paint.Style.STROKE);\n\n    }\n\n    public Bitmap draw(int select, float percent){\n        drawSplitCanvas(select);\n        drawPercentCanvas(percent);\n        canvas.save();\n        return bmp;\n    }\n\n    private void drawPercentCanvas(float percent){\n        float radius = (percentRectF.width() / 2);\n        canvas.drawCircle(radius + stroke_w ,radius + stroke_w , radius  , percentFadePaint);\n        canvas.drawArc(percentRectF, -90 , (360*percent) ,false, percentMainPaint );\n    }\n}<｜fim▁end｜>",
    "response": "        selectPaint.setColor(Color.parseColor(selectColor));\n        selectPaint.setStrokeWidth(smaller_stroke_w);\n        selectPaint.setStyle(Paint.Style.STROKE);\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.cassandra.utils;\n\nimport java.io.*;\nimport java.text.DecimalFormat;\nimport java.util.*;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor;\nimport org.apache.cassandra.concurrent.ThreadFactoryImpl;\nimport org.apache.cassandra.config.DatabaseDescriptor;\nimport org.apache.log4j.Logger;\n\npublic class FileUtils\n{\n    private static Logger logger_ = Logger.getLogger(FileUtils.class);\n    private static final DecimalFormat df_ = new DecimalFormat(\"#.##\");\n    private static final double kb_ = 1024d;\n    private static final double mb_ = 1024*1024d;\n    private static final double gb_ = 1024*1024*1024d;\n    private static final double tb_ = 1024*1024*1024*1024d;\n\n    private static ExecutorService deleter_ = new DebuggableThreadPoolExecutor(\"FILEUTILS-DELETE-POOL\");\n\n    public static void shutdown()\n    {\n        deleter_.shutdownNow();\n    }\n\n    public static void deleteWithConfirm(File file) throws IOException\n    {\n        assert file.exists() : \"attempted to delete non-existing file \" + file.getName();\n        if (!file.delete())\n        {\n            throw new IOException(\"Failed to delete \" + file.getName());\n        }\n    }\n\n    public static class Deleter implements Runnable\n    {\n        File file_ = null;\n\n        public Deleter(File f)\n        {\n            file_ = f;\n        }\n\n        public void run()\n        {\n            if(file_ == null)\n                return;\n            logger_.info(\"*** Deleting \" + file_.getName() + \" ***\");\n            if(!file_.delete())\n            {\n                logger_.warn(\"Warning : Unable to delete file \" + file_.getAbsolutePath());\n            }\n        }\n    }\n\n    public static class FileComparator implements Comparator<File>\n    {\n        public int compare(File f, File f2)\n        {\n            return (int)(f.lastModified() - f2.lastModified());\n        }\n    }\n\n    public static void createDirectory(String directory) throws IOException\n    {\n        File file = new File(directory);\n        if (!file.exists())\n        {\n            if (!file.mkdirs())\n            {\n                throw new IOException(\"unable to mkdirs \" + directory);\n            }\n        }\n    }\n\n    public static void createFile(String directory) throws IOException\n    {\n        File file = new File(directory);\n        if ( !file.exists() )\n            file.createNewFile();\n    }\n\n    public static boolean isExists(String filename) throws IOException\n    {\n        File file = new File(filename);\n        return file.exists();\n    }\n\n    public static boolean delete(String file)\n    {\n        File f = new File(file);\n        return f.delete();\n    }\n\n    public static void deleteAsync(String file) throws IOException\n    {\n        File f = new File(file);\n        Runnable deleter = new Deleter(f);\n        deleter_.submit(deleter);\n    }\n\n    public static boolean delete(List<String> files) throws IOException\n    {\n        boolean bVal = true;\n        for ( int i = 0; i < files.size(); ++i )\n        {\n            String file = files.get(i);\n            bVal = delete(file);\n            if (bVal)\n            {\n                if (logger_.isDebugEnabled())\n                  logger_.debug(\"Deleted file \" + file);\n                files.remove(i);\n            }\n        }\n        return bVal;\n    }\n\n    public static void delete(File[] files) throws IOException\n    {\n        for ( File file : files )\n        {\n            file.delete();\n        }\n    }\n\n    public static String stringifyFileSize(double value)\n    {\n        double d = 0d;\n        if ( value >= tb_ )\n        {\n            d = value / tb_;\n            String val = df_.format(d);\n            return val + \" TB\";\n        }\n        else if ( value >= gb_ )\n        {\n            d = value / gb_;\n            String val = df_.format(d);\n            return val + \" GB\";\n        }\n        else if ( value >= mb_ )\n        {\n            d = value / mb_;\n            String val = df_.format(d);\n            return val + \" MB\";\n        }\n        else if ( value >= kb_ )\n<｜fim▁hole｜>        {       \n            String val = df_.format(value);\n            return val + \" bytes.\";\n        }        \n    }\n\n    public static double stringToFileSize(String value)\n    {        \n        String[] peices = value.split(\" \");\n        double d = Double.valueOf(peices[0]);\n        if ( peices[1].equals(\"TB\") )\n        {\n            d *= tb_;\n        }\n        else if ( peices[1].equals(\"GB\") )\n        {\n            d *= gb_;\n        }\n        else if ( peices[1].equals(\"MB\") )\n        {\n            d *= mb_;\n        }\n        else if ( peices[1].equals(\"KB\") )\n        {\n            d *= kb_;\n        }\n        else\n        {\n            d *= 1;\n        }\n        return d;\n    }\n\n    /**\n     * calculate the total space used by a file or directory\n     * \n     * @param path the path\n     * @return total space used.\n     */\n    public static long getUsedDiskSpaceForPath(String path)\n    {\n        File file = new File(path);\n\n        if (file.isFile()) \n        {\n            return file.length();\n        }\n\n        long diskSpace = 0;\n        for (File childFile: file.listFiles())\n        {\n            diskSpace += getUsedDiskSpaceForPath(childFile.getPath());\n        }\n        return diskSpace;\n    }\n\n    public static long getUsedDiskSpace()\n    {\n        long diskSpace = 0L;\n        String[] directories = DatabaseDescriptor.getAllDataFileLocations();        \n        for ( String directory : directories )\n        {\n            diskSpace += getUsedDiskSpaceForPath(directory);\n        }\n\n        String value = df_.format(diskSpace);\n        return Long.parseLong(value);\n    }    \n\n    /**\n     * Deletes all files and subdirectories under \"dir\".\n     * @param dir Directory to be deleted\n     * @return boolean Returns \"true\" if all deletions were successful.\n     *                 If a deletion fails, the method stops attempting to\n     *                 delete and returns \"false\".\n     */\n    public static boolean deleteDir(File dir) {\n\n        if (dir.isDirectory()) {\n            String[] children = dir.list();\n            for (int i=0; i<children.length; i++) {\n                boolean success = deleteDir(new File(dir, children[i]));\n                if (!success) {\n                    return false;\n                }\n            }\n        }\n\n        // The directory is now empty so now it can be smoked\n        return dir.delete();\n    }\n\n    /**\n     * Create a hard link for a given file.\n     * \n     * @param sourceFile      The name of the source file.\n     * @param destinationFile The name of the destination file.\n     * \n     * @throws IOException if an error has occurred while creating the link.\n     */\n    public static void createHardLink(File sourceFile, File destinationFile) throws IOException\n    {\n        String osname = System.getProperty(\"os.name\");\n        ProcessBuilder pb;\n        if (osname.startsWith(\"Windows\"))\n        {\n            float osversion = Float.parseFloat(System.getProperty(\"os.version\"));\n            if (osversion >= 6.0f)\n            {\n                pb = new ProcessBuilder(\"cmd\", \"/c\", \"mklink\", \"/H\", destinationFile.getAbsolutePath(), sourceFile.getAbsolutePath());\n            }\n            else\n            {\n                pb = new ProcessBuilder(\"fsutil\", \"hardlink\", \"create\", destinationFile.getAbsolutePath(), sourceFile.getAbsolutePath());\n            }\n        }\n        else\n        {\n            pb = new ProcessBuilder(\"ln\", sourceFile.getAbsolutePath(), destinationFile.getAbsolutePath());\n            pb.redirectErrorStream(true);\n        }\n        Process p = pb.start();\n        try\n        {\n            p.waitFor();\n        }\n        catch (InterruptedException e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        {\n            d = value / kb_;\n            String val = df_.format(d);\n            return val + \" KB\";\n        }\n        else\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.ansj.test;\n\nimport org.ansj.library.UserLibrary;\n<｜fim▁hole｜>import org.ansj.splitWord.ToAnalysis;\n\nimport java.io.IOException;\n\nimport static org.ansj.AnsjContext.CONTEXT;\n\npublic class IndexAnalysisTest {\n    public static void main(String[] args) throws IOException {\n\n        final UserLibrary userLibrary = CONTEXT().getUserLibrary();\n        userLibrary.insertWord(\"蛇药片\", \"n\", 1000);\n\n        System.out.println(IndexAnalysis.parse(\"季德胜蛇药片10片*6板 清热\"));\n\n        System.out.println(ToAnalysis.parse(\"季德胜蛇药片\"));\n\n    }\n}<｜fim▁end｜>",
    "response": "import org.ansj.splitWord.IndexAnalysis;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.taobao.api.request;\n\nimport com.taobao.api.internal.util.RequestCheckUtils;\nimport java.util.Map;\n\nimport com.taobao.api.TaobaoRequest;\nimport com.taobao.api.internal.util.TaobaoHashMap;\nimport com.taobao.api.response.ItemcatsIncrementGetResponse;\nimport com.taobao.api.ApiRuleException;\n\npublic class ItemcatsIncrementGetRequest implements TaobaoRequest<ItemcatsIncrementGetResponse> {\n\n    private TaobaoHashMap udfParams; // add user-defined text parameters\n    private Long timestamp;\n\n    /** \n    * 一级类目ID列表，用半角逗号(,)分隔，例如:\"16,19562\"，一次最多可以获取10个类目的增量数据。\n     */\n    private String cids;\n\n    /** \n    * 要获取最近哪一天的增量类目数据，可选值为：1~7。默认值为1，表示获取昨天发生变更的类目数据。\n     */\n    private Long days;\n\n    /** \n    * 获取类目的类型：1代表集市、2代表天猫\n     */\n    private Long type;\n\n    public void setCids(String cids) {\n        this.cids = cids;\n    }\n    public String getCids() {\n        return this.cids;\n    }\n\n    public void setDays(Long days) {\n        this.days = days;\n    }\n    public Long getDays() {\n        return this.days;\n    }\n\n    public void setType(Long type) {\n        this.type = type;\n    }\n    public Long getType() {\n        return this.type;\n    }\n    private Map<String,String> headerMap=new TaobaoHashMap();\n\n    public Long getTimestamp() {\n        return this.timestamp;\n    }\n\n    public void setTimestamp(Long timestamp) {\n        this.timestamp = timestamp;\n    }\n\n    public String getApiMethodName() {\n        return \"taobao.itemcats.increment.get\";\n    }\n\n    public Map<String, String> getTextParams() {        \n        TaobaoHashMap txtParams = new TaobaoHashMap();\n        txtParams.put(\"cids\", this.cids);\n        txtParams.put(\"days\", this.days);\n        txtParams.put(\"type\", this.type);\n        if(this.udfParams != null) {\n            txtParams.putAll(this.udfParams);\n        }\n        return txtParams;\n    }\n\n<｜fim▁hole｜>        this.udfParams.put(key, value);\n    }\n\n    public Class<ItemcatsIncrementGetResponse> getResponseClass() {\n        return ItemcatsIncrementGetResponse.class;\n    }\n\n    public void check() throws ApiRuleException {\n\n        RequestCheckUtils.checkNotEmpty(cids,\"cids\");\n        RequestCheckUtils.checkMaxListSize(cids,1000,\"cids\");\n        RequestCheckUtils.checkMaxValue(days,7L,\"days\");\n        RequestCheckUtils.checkMinValue(days,1L,\"days\");\n        RequestCheckUtils.checkMaxValue(type,2L,\"type\");\n        RequestCheckUtils.checkMinValue(type,1L,\"type\");\n    }\n\n    public Map<String,String> getHeaderMap() {\n        return headerMap;\n    }\n}<｜fim▁end｜>",
    "response": "    public void putOtherTextParam(String key, String value) {\n        if(this.udfParams == null) {\n            this.udfParams = new TaobaoHashMap();\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package remotecontrol2;\n\nimport javax.swing.*;\n\nimport java.awt.*;             \nimport java.awt.event.*;       \nimport java.sql.Timestamp;\n\npublic class ServerTextArea extends JPanel{\n\n    private String newline = \"\\n\";   \n    protected JScrollPane areaScrollPane=null;\n    protected JTextArea displayInfo = new JTextArea();\n    private JScrollPane paneScrollPane=null;\n    JFrame frame = new JFrame(\"TextSamplerDemo\");\n\n<｜fim▁hole｜>\n    JTextField ip=new JTextField(\"AZ-PC\");\n    JTextField port=new JTextField(\"4000\",7);\n    public ServerTextArea(Client multi) {\n        super();\n        this.multi=multi;\n        setLayout(new BorderLayout());\n        //Create a text area.\n\n        //Create a text pane.\n        displayInfo.setFont(new Font(\"Serif\", Font.ITALIC, 16));\n        displayInfo.setLineWrap(true);\n        displayInfo.setWrapStyleWord(true);\n        areaScrollPane = new JScrollPane(displayInfo);\n        areaScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n        areaScrollPane.setPreferredSize(new Dimension(150, 150));\n\n        add(areaScrollPane,BorderLayout.NORTH);        \n\n        toSend.setFont(new Font(\"Serif\", Font.ITALIC, 16));\n        toSend.setLineWrap(true);\n        toSend.setWrapStyleWord(true);\n        paneScrollPane = new JScrollPane(toSend);\n        paneScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n        paneScrollPane.setPreferredSize(new Dimension(150, 155));\n        paneScrollPane.setMinimumSize(new Dimension(10, 10));\n\n        add(paneScrollPane,BorderLayout.SOUTH);  \n\n        JButton send=new JButton(\"send\");\n        send.addActionListener(new ActionListener(){\n            public void actionPerformed(ActionEvent arg0) {\n                send(toSend.getText(),Integer.parseInt(port.getText()),ip.getText().trim());\n            }});\n        add(send);\n        add(ip,BorderLayout.WEST);\n        add(port,BorderLayout.EAST);\n        create(multi);\n    }    \n\n    protected void send(String text,int port,String host) {\n        displayInfo.append(\"send at time:\"+new Timestamp(new java.util.Date().getTime())+\"\\n\");\n        displayInfo.append(text+\" \"+port+\" \"+ host);\n        multi.sentToSpecificSocker(text, port, host);\n        toSend.setText(\"\");\n    }\n\n    public String getToSendText(){\n        return toSend.getText();\n    }\n\n    public String viewMessages(){\n        return displayInfo.getText();\n    }\n\n    public void create(Client mu) {\n        JFrame.setDefaultLookAndFeelDecorated(true);\n\n        //Create and set up the window.\n\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        //Create and set up the content pane.\n        ///    JComponent newContentPane = this;\n        ///   newContentPane.setOpaque(true); //content panes must be opaque\n        ///  frame.setContentPane(newContentPane);\n        frame.add(this,BorderLayout.NORTH);\n        //frame.add(new p(),BorderLayout.SOUTH);\n        //Display the window.\n        frame.pack();\n        frame.setVisible(true);\n        frame.setTitle(\"Server\");\n        //p a=new p();\n\n         JFrame fr=new JFrame(\"action\");\n            fr.add(new p());\n            fr.setSize(500,500);\n            fr.setBackground(Color.green);\n            fr.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            fr.setVisible(true);\n    }\n\n    public void write(String s){\n        displayInfo.append(s);\n    }\n\n    public static void main(String[]args) {\n        /* JFrame.setDefaultLookAndFeelDecorated(true);\n\n        //Create and set up the window.\n        MultiThreadServer mu=null;\n        JFrame frame=new JFrame();\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        //Create and set up the content pane.\n        JComponent newContentPane = new ServerTextArea(mu);\n        newContentPane.setOpaque(true); //content panes must be opaque\n        frame.setContentPane(newContentPane);\n\n        //Display the window.\n        frame.pack();\n        frame.setVisible(true);*/\n        Client s=null;\n        ServerTextArea a=new ServerTextArea(s);\n    }\n    private class p extends JPanel implements KeyListener,MouseListener,MouseMotionListener,MouseWheelListener{\n        public void keyPressed(KeyEvent arg0) {\n            frame.setTitle(\"keyPressed\");\n            multi.sendToAll(arg0.getKeyCode()+\",press\");\n        }\n\n        public void keyReleased(KeyEvent arg0) {\n            frame.setTitle(\"keyReleased\");\n            multi.sendToAll(arg0.getKeyCode()+\",reles\");\n        }\n\n        public void keyTyped(KeyEvent arg0) {\n            frame.setTitle(\"keyTyped\");\n            multi.sendToAll(arg0.getKeyCode()+\",typed\");\n        }\n\n        public void mouseClicked(MouseEvent arg0) {\n            frame.setTitle(\"mouseclicked\");\n            multi.sendToAll(arg0.getXOnScreen()+\",\"+arg0.getYOnScreen()+\",clicked\"+arg0.getButton());\n        }\n\n        public void mouseEntered(MouseEvent arg0) {}\n        public void mouseExited(MouseEvent arg0) {}\n\n        public void mousePressed(MouseEvent arg0) {\n            frame.setTitle(\"mousePressed\");\n            multi.sendToAll(arg0.getXOnScreen()+\",\"+arg0.getYOnScreen()+\",pressed\"+arg0.getButton());\n            requestFocus();\n        }\n\n        public void mouseReleased(MouseEvent arg0) {\n            frame.setTitle(\"mouseReleased\");\n            multi.sendToAll(arg0.getXOnScreen()+\",\"+arg0.getYOnScreen()+\",relesed\"+arg0.getButton());\n        }\n        public p() {\n            super();\n            setLayout(new BorderLayout());\n            addMouseListener(this);\n            addMouseMotionListener(this);\n            addMouseWheelListener(this);\n            addKeyListener(this);\n            //setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n            setVisible(true);\n            //  setTitle(\"controll\");\n        }\n        public void mouseWheelMoved(MouseWheelEvent e) {\n            frame.setTitle(\"mouseWheelMoved\");\n            multi.sendToAll(e.getClickCount()+\",\"+e.getButton()+\",whemmed\"+e.getButton());\n        }\n        public void mouseDragged(MouseEvent arg0) {\n            frame.setTitle(\"mouseDragged\");\n            multi.sendToAll(arg0.getXOnScreen()+\",\"+arg0.getYOnScreen()+\",dragged\"+arg0.getButton());\n        }\n        public void mouseMoved(MouseEvent arg0) {\n            frame.setTitle(\"mouseMoved\");\n            multi.sendToAll(arg0.getXOnScreen()+\",\"+arg0.getYOnScreen()+\",moveded\"+arg0.getButton());\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    private JTextArea toSend = new JTextArea();\n\n    private Client multi=null;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.w3bshark.android_showcase;\n\npublic class Application {\n    int appId;\n    String name;\n    String description;\n    int photoId;\n\n    Application(int appId, String name, String description, int photoId) {\n<｜fim▁hole｜>        this.name = name;\n        this.description = description;\n        this.photoId = photoId;\n    }\n}<｜fim▁end｜>",
    "response": "        this.appId = appId;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.seabears.game.guis.fonts.creator;\n\npublic class Character {\n  private final int id;\n  private final double xTextureCoord;\n  private final double yTextureCoord;\n  private final double xMaxTextureCoord;\n  private final double yMaxTextureCoord;\n  private final double xOffset;\n  private final double yOffset;\n  private final double sizeX;\n  private final double sizeY;\n  private final double xAdvance;\n\n  /**\n   * @param id - the ASCII value of the character.\n   * @param xTextureCoord - the x texture coordinate for the top left corner of the character in the\n   *        texture atlas.\n   * @param yTextureCoord - the y texture coordinate for the top left corner of the character in the\n   *        texture atlas.\n   * @param xTexSize - the width of the character in the texture atlas.\n   * @param yTexSize - the height of the character in the texture atlas.\n<｜fim▁hole｜>   * @param sizeX - the width of the character's quad in screen space.\n   * @param sizeY - the height of the character's quad in screen space.\n   * @param xAdvance - how far in pixels the cursor should advance after adding this character.\n   */\n  protected Character(int id, double xTextureCoord, double yTextureCoord, double xTexSize,\n      double yTexSize, double xOffset, double yOffset, double sizeX, double sizeY,\n      double xAdvance) {\n    this.id = id;\n    this.xTextureCoord = xTextureCoord;\n    this.yTextureCoord = yTextureCoord;\n    this.xOffset = xOffset;\n    this.yOffset = yOffset;\n    this.sizeX = sizeX;\n    this.sizeY = sizeY;\n    this.xMaxTextureCoord = xTexSize + xTextureCoord;\n    this.yMaxTextureCoord = yTexSize + yTextureCoord;\n    this.xAdvance = xAdvance;\n  }\n\n  protected int getId() {\n    return id;\n  }\n\n  protected double getxTextureCoord() {\n    return xTextureCoord;\n  }\n\n  protected double getyTextureCoord() {\n    return yTextureCoord;\n  }\n\n  protected double getXMaxTextureCoord() {\n    return xMaxTextureCoord;\n  }\n\n  protected double getYMaxTextureCoord() {\n    return yMaxTextureCoord;\n  }\n\n  protected double getxOffset() {\n    return xOffset;\n  }\n\n  protected double getyOffset() {\n    return yOffset;\n  }\n\n  protected double getSizeX() {\n    return sizeX;\n  }\n\n  protected double getSizeY() {\n    return sizeY;\n  }\n\n  protected double getxAdvance() {\n    return xAdvance;\n  }\n\n}<｜fim▁end｜>",
    "response": "   * @param xOffset - the x distance from the curser to the left edge of the character's quad.\n   * @param yOffset - the y distance from the curser to the top edge of the character's quad.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jcrom.converter;\n\nimport java.net.URL;\nimport java.util.HashMap;\n<｜fim▁hole｜>\n    /**\n     * Convert map of URL to map of strings representation of this URL\n     */\n    @Override\n    public Map<String, String> convertToJcrProperty(Map<String, URL> urlMap) {\n        Map<String, String> map = new HashMap<String, String>();\n        for (Map.Entry<String, URL> entry : urlMap.entrySet()) {\n            map.put(entry.getKey(), urlConverter.convertToJcrProperty(entry.getValue()));\n        }\n        return map;\n    }\n\n    /**\n     * Convert map of String representing an URL to a map of URL\n     */\n    @Override\n    public Map<String, URL> convertToEntityAttribute(Map<String, String> urlStringMap) {\n        Map<String, URL> map = new HashMap<String, URL>();\n        for (Map.Entry<String, String> entry : urlStringMap.entrySet()) {\n            map.put(entry.getKey(), urlConverter.convertToEntityAttribute(entry.getValue()));\n        }\n        return map;\n    }\n\n}<｜fim▁end｜>",
    "response": "import java.util.Map;\n\npublic class URLMapConverter implements Converter<Map<String, URL>, Map<String, String>> {\n\n    private final URLConverter urlConverter = new URLConverter();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package de.zabuza.treeflood.exploration.localstorage;\n\nimport java.util.Collection;\nimport java.util.LinkedList;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic final class ThrowAwayThreadRobotPulseManager implements IRobotPulseManager {\n\n    /**\n     * The robots to manage.\n     */\n    private Collection<Robot> mRobots;\n\n    /**\n     * Creates a new throw-away robot pulse manager with initially no robots.\n     * Use {@link #setRobots(Collection)} to set the robots to manage.\n     */\n    public ThrowAwayThreadRobotPulseManager() {\n        this.mRobots = null;\n    }\n\n    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * de.zabuza.treeflood.exploration.localstorage.IRobotPulseManager#pulse()\n     */\n    @Override\n    public boolean pulse() {\n        final ExecutorService executor = Executors.newFixedThreadPool(this.mRobots.size());\n        final LinkedList<RobotPulse> pulses = new LinkedList<>();\n\n        for (final Robot robot : this.mRobots) {\n            final RobotPulse pulse = new RobotPulse(robot);\n            pulses.add(pulse);\n            executor.execute(pulse);\n        }\n\n        executor.shutdown();\n        // Wait until all threads have finished\n        while (!executor.isTerminated()) {\n            try {\n<｜fim▁hole｜>        // Fetch the result of the pulse\n        for (final RobotPulse pulse : pulses) {\n            if (!pulse.hasRobotStopped()) {\n                // Found a robot that has not stopped yet\n                return false;\n            }\n        }\n        // All robots have stopped\n        return true;\n    }\n\n    /*\n     * (non-Javadoc)\n     * \n     * @see\n     * de.zabuza.treeflood.exploration.localstorage.IRobotPulseManager#setRobots\n     * (java.util.Collection)\n     */\n    @Override\n    public void setRobots(final Collection<Robot> robots) {\n        if (this.mRobots == null) {\n            this.mRobots = robots;\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "                Thread.sleep(5);\n            } catch (final InterruptedException e) {\n                // Just ignore the interrupt and continue\n            }\n        }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.openhab.binding.http.internal.config;\n\nimport java.math.BigDecimal;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.eclipse.jdt.annotation.NonNullByDefault;\nimport org.eclipse.jdt.annotation.Nullable;\nimport org.openhab.binding.http.internal.converter.ColorItemConverter;\nimport org.openhab.core.library.types.IncreaseDecreaseType;\nimport org.openhab.core.library.types.NextPreviousType;\nimport org.openhab.core.library.types.OnOffType;\nimport org.openhab.core.library.types.OpenClosedType;\nimport org.openhab.core.library.types.PlayPauseType;\nimport org.openhab.core.library.types.RewindFastforwardType;\nimport org.openhab.core.library.types.StopMoveType;\nimport org.openhab.core.library.types.UpDownType;\nimport org.openhab.core.types.Command;\nimport org.openhab.core.types.State;\n\n@NonNullByDefault\npublic class HttpChannelConfig {\n    private final Map<String, State> stringStateMap = new HashMap<>();\n    private final Map<Command, @Nullable String> commandStringMap = new HashMap<>();\n    private boolean initialized = false;\n\n    public @Nullable String stateExtension;\n    public @Nullable String commandExtension;\n    public @Nullable String stateTransformation;\n    public @Nullable String commandTransformation;\n\n    public HttpChannelMode mode = HttpChannelMode.READWRITE;\n\n    // number\n    public @Nullable String unit;\n\n    // switch, dimmer, color\n    public @Nullable String onValue;\n    public @Nullable String offValue;\n\n    // dimmer, color\n    public BigDecimal step = BigDecimal.ONE;\n    public @Nullable String increaseValue;\n    public @Nullable String decreaseValue;\n\n    // color\n    public ColorItemConverter.ColorMode colorMode = ColorItemConverter.ColorMode.RGB;\n\n    // contact\n    public @Nullable String openValue;\n    public @Nullable String closedValue;\n\n    // rollershutter\n    public @Nullable String upValue;\n    public @Nullable String downValue;\n    public @Nullable String stopValue;\n    public @Nullable String moveValue;\n\n    // player\n    public @Nullable String playValue;\n    public @Nullable String pauseValue;\n    public @Nullable String nextValue;\n    public @Nullable String previousValue;\n    public @Nullable String rewindValue;\n    public @Nullable String fastforwardValue;\n\n    /**\n     * maps a command to a user-defined string\n     *\n<｜fim▁hole｜>     */\n    public @Nullable String commandToFixedValue(Command command) {\n        if (!initialized) {\n            createMaps();\n        }\n\n        return commandStringMap.get(command);\n    }\n\n    /**\n     * maps a user-defined string to a state\n     *\n     * @param string the string to map\n     * @return the state or null if no mapping found\n     */\n    public @Nullable State fixedValueToState(String string) {\n        if (!initialized) {\n            createMaps();\n        }\n\n        return stringStateMap.get(string);\n    }\n\n    private void createMaps() {\n        addToMaps(this.onValue, OnOffType.ON);\n        addToMaps(this.offValue, OnOffType.OFF);\n        addToMaps(this.openValue, OpenClosedType.OPEN);\n        addToMaps(this.closedValue, OpenClosedType.CLOSED);\n        addToMaps(this.upValue, UpDownType.UP);\n        addToMaps(this.downValue, UpDownType.DOWN);\n\n        commandStringMap.put(IncreaseDecreaseType.INCREASE, increaseValue);\n        commandStringMap.put(IncreaseDecreaseType.DECREASE, decreaseValue);\n        commandStringMap.put(StopMoveType.STOP, stopValue);\n        commandStringMap.put(StopMoveType.MOVE, moveValue);\n        commandStringMap.put(PlayPauseType.PLAY, playValue);\n        commandStringMap.put(PlayPauseType.PAUSE, pauseValue);\n        commandStringMap.put(NextPreviousType.NEXT, nextValue);\n        commandStringMap.put(NextPreviousType.PREVIOUS, previousValue);\n        commandStringMap.put(RewindFastforwardType.REWIND, rewindValue);\n        commandStringMap.put(RewindFastforwardType.FASTFORWARD, fastforwardValue);\n\n        initialized = true;\n    }\n\n    private void addToMaps(@Nullable String value, State state) {\n        if (value != null) {\n            commandStringMap.put((Command) state, value);\n            stringStateMap.put(value, state);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "     * @param command the command to map\n     * @return a string or null if no mapping found\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.prom.by.views;\n\nimport org.androidannotations.annotations.EViewGroup;\nimport org.androidannotations.annotations.ViewById;\n\nimport android.content.Context;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\nimport com.android.volley.toolbox.ImageLoader;\nimport com.android.volley.toolbox.NetworkImageView;\nimport com.prom.by.R;\nimport com.prom.by.SingleOrderActivity_;\nimport com.prom.by.model.Item;\n\n@EViewGroup(R.layout.view_item)\npublic class ItemView extends LinearLayout{\n\n    @ViewById(R.id.item_photo)\n    NetworkImageView photo;\n\n    @ViewById(R.id.item_name)\n    TextView itemName;\n\n    @ViewById(R.id.item_cost)\n    TextView itemCost;\n\n    @ViewById(R.id.item_price)\n    TextView itemPrice;\n\n    Context context;\n\n    public ItemView(Context context) {\n        super(context);\n        this.context = context;\n    }\n\n    public void bind (Item item) {\n        ImageLoader mImageLoader = new ImageLoader(((SingleOrderActivity_) context).rQueue, ((SingleOrderActivity_) context).cache);\n        photo.setImageUrl(item.getImage(), mImageLoader);\n\n        itemName.setText(item.getName());\n<｜fim▁hole｜>    }\n\n}<｜fim▁end｜>",
    "response": "        itemPrice.setText(item.getPrice() + \" | \" + item.getQuantity() + \" шт.\");\n        itemCost.setText(String.valueOf((item.getPrice()==null?0.d:item.getPrice()) * Double.parseDouble(item.getQuantity()))); //FIXME: wow, such quantity, so string \n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.camel.component.consul.endpoint;\n\nimport org.apache.camel.AsyncCallback;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.spi.InvokeOnHeaderStrategy;\nimport org.apache.camel.component.consul.endpoint.ConsulCatalogProducer;\n\n@SuppressWarnings(\"unchecked\")\n<｜fim▁hole｜>        org.apache.camel.component.consul.endpoint.ConsulCatalogProducer target = (org.apache.camel.component.consul.endpoint.ConsulCatalogProducer) obj;\n        switch (key) {\n        case \"deregister\":\n        case \"DEREGISTER\": target.deregister(exchange.getMessage()); return null;\n        case \"get_node\":\n        case \"GET_NODE\": target.getNode(exchange.getMessage()); return null;\n        case \"get_service\":\n        case \"GET_SERVICE\": target.getService(exchange.getMessage()); return null;\n        case \"list_datacenters\":\n        case \"LIST_DATACENTERS\": target.listDatacenters(exchange.getMessage()); return null;\n        case \"list_nodes\":\n        case \"LIST_NODES\": target.listNodes(exchange.getMessage()); return null;\n        case \"list_services\":\n        case \"LIST_SERVICES\": target.listServices(exchange.getMessage()); return null;\n        case \"register\":\n        case \"REGISTER\": target.register(exchange.getMessage()); return null;\n        default: return null;\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "public class ConsulCatalogProducerInvokeOnHeaderFactory implements InvokeOnHeaderStrategy {\n\n    @Override\n    public Object invoke(Object obj, String key, Exchange exchange, AsyncCallback callback) throws Exception {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.hadoop.mapred;\n\nimport java.io.IOException;\nimport java.io.OutputStream; \nimport java.io.FilterOutputStream;\n\nimport org.apache.hadoop.util.DataChecksum;\n\nclass IFileOutputStream extends FilterOutputStream {\n  /**\n   * The output stream to be checksummed. \n   */\n  private final DataChecksum sum;\n  private byte[] barray;\n  private boolean closed = false;\n  private boolean finished = false;\n\n  /**\n   * Create a checksum output stream that writes\n   * the bytes to the given stream.\n   * @param out\n   */\n  public IFileOutputStream(OutputStream out) {\n    super(out);\n    sum = DataChecksum.newDataChecksum(DataChecksum.CHECKSUM_CRC32,\n        Integer.MAX_VALUE);\n    barray = new byte[sum.getChecksumSize()];\n  }\n\n  @Override\n  public void close() throws IOException {\n    if (closed) {\n      return;\n    }\n    closed = true;\n    finish();\n    out.close();\n  }\n\n  /**\n   * Finishes writing data to the output stream, by writing\n   * the checksum bytes to the end. The underlying stream is not closed.\n   * @throws IOException\n<｜fim▁hole｜>    sum.writeValue(barray, 0, false);\n    out.write (barray, 0, sum.getChecksumSize());\n    out.flush();\n  }\n\n  /**\n   * Write bytes to the stream.\n   */\n  @Override\n  public void write(byte[] b, int off, int len) throws IOException {\n    sum.update(b, off,len);\n    out.write(b,off,len);\n  }\n\n  @Override\n  public void write(int b) throws IOException {\n    barray[0] = (byte) (b & 0xFF);\n    write(barray,0,1);\n  }\n\n}<｜fim▁end｜>",
    "response": "   */\n  public void finish() throws IOException {\n    if (finished) {\n      return;\n    }\n    finished = true;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package kr.debop4j.data;\n\nimport kr.debop4j.data.hibernate.repository.IHibernateDao;\nimport kr.debop4j.data.hibernate.unitofwork.UnitOfWorks;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.scheduling.annotation.EnableAsync;\n<｜fim▁hole｜>\n@Configuration\n@EnableTransactionManagement\n@EnableAsync\n@ComponentScan( basePackageClasses = { UnitOfWorks.class, IHibernateDao.class } )\n@Import( { kr.debop4j.data.DatabaseConfig.class } )\npublic class AppConfig {\n\n    // 추가해야 할 것\n}<｜fim▁end｜>",
    "response": "import org.springframework.transaction.annotation.EnableTransactionManagement;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package no.philipp.soccerdata;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.design.widget.AppBarLayout;\nimport android.support.design.widget.TabLayout;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v4.app.FragmentPagerAdapter;\nimport android.support.v4.view.ViewPager;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.View;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport butterknife.BindView;\nimport butterknife.ButterKnife;\nimport no.philipp.footballdata.api.FootballData;\nimport no.philipp.footballdata.models.Team;\nimport no.philipp.soccerdata.svg.SvgLoader;\nimport retrofit2.Call;\nimport retrofit2.Callback;\nimport retrofit2.Response;\n\npublic class TeamActivity extends AppCompatActivity\n        implements AppBarLayout.OnOffsetChangedListener {\n\n    private static final int PERCENTAGE_TO_ANIMATE_LOGO = 20;\n    private static final String KEY_TEAM_ID = \"teamId\";\n    private static final int DEFAULT_TEAM_ID = 57;\n\n    private int mTeamId = DEFAULT_TEAM_ID;\n\n    private FootballData mFootballData;\n    private SvgLoader mSvgLoader;\n\n    private boolean mIsLogoShown = true;\n    private int mMaxScrollSize;\n    private Team team;\n\n    @BindView(R.id.tam_tabs)\n    TabLayout tabLayout;\n    @BindView(R.id.team_viewpager)\n    ViewPager viewPager;\n    @BindView(R.id.team_appbar)\n    AppBarLayout appbarLayout;\n    @BindView(R.id.team_toolbar)\n    Toolbar toolbar;\n    @BindView(R.id.team_logo)\n    ImageView mLogo;\n    @BindView(R.id.team_title)\n    TextView mTitle;\n    @BindView(R.id.team_subtitle)\n    TextView mSubTitle;\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_team);\n        ButterKnife.bind(this);\n\n        toolbar.setNavigationOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                onBackPressed();\n            }\n        });\n        appbarLayout.addOnOffsetChangedListener(this);\n        mMaxScrollSize = appbarLayout.getTotalScrollRange();\n        viewPager.setAdapter(new TabsAdapter(getSupportFragmentManager()));\n        tabLayout.setupWithViewPager(viewPager);\n\n        mFootballData = FootballData.getInstance();\n        mSvgLoader = new SvgLoader(this);\n        mTeamId = getIntent().getIntExtra(KEY_TEAM_ID, DEFAULT_TEAM_ID);\n        loadData();\n    }\n\n    public void loadData() {\n        mFootballData.team(mTeamId).enqueue(new Callback<Team>() {\n            @Override\n            public void onResponse(Call<Team> call, Response<Team> response) {\n                team = response.body();\n                showData();\n            }\n\n            @Override\n            public void onFailure(Call<Team> call, Throwable t) {\n                Toast.makeText(TeamActivity.this, t.getLocalizedMessage(), Toast.LENGTH_SHORT).show();\n            }\n        });\n    }\n\n    public void showData() {\n        mSvgLoader.load(team.getCrestUrl().toString(), mLogo, R.drawable.pl_logo);\n        mTitle.setText(team.getName());\n        mSubTitle.setText(team.getSquadMarketValue());\n    }\n\n    public static void start(Context c, int teamId) {\n        Intent intent = new Intent(c, TeamActivity.class);\n        intent.putExtra(KEY_TEAM_ID, teamId);\n        c.startActivity(intent);\n    }\n\n    @Override\n    public void onOffsetChanged(AppBarLayout appBarLayout, int i) {\n        if (mMaxScrollSize == 0)\n            mMaxScrollSize = appBarLayout.getTotalScrollRange();\n\n        int percentage = (Math.abs(i)) * 100 / mMaxScrollSize;\n\n        if (percentage >= PERCENTAGE_TO_ANIMATE_LOGO && mIsLogoShown) {\n            mIsLogoShown = false;\n            mLogo.animate().scaleY(0).scaleX(0).setDuration(200).start();\n        }\n\n        if (percentage <= PERCENTAGE_TO_ANIMATE_LOGO && !mIsLogoShown) {\n            mIsLogoShown = true;\n\n            mLogo.animate()\n                    .scaleY(1).scaleX(1)\n                    .start();\n        }\n    }\n\n    class TabsAdapter extends FragmentPagerAdapter {\n        public TabsAdapter(FragmentManager fm) {\n            super(fm);\n        }\n\n        @Override\n        public int getCount() {\n            return 3;\n        }\n\n        @Override\n        public Fragment getItem(int i) {\n            switch (i) {\n                case 0:\n                    return FixturesFragment.newInstance(FixturesFragment.Mode.TEAM, mTeamId);\n                case 1:\n                    return LeagueTableFragment.newInstance(CompetitionActivity.LEAGUE_ID);\n                case 2:\n                    return SquadFragment.newInstance(mTeamId);\n            }\n            return null;\n        }\n\n        @Override\n        public CharSequence getPageTitle(int position) {\n            switch (position) {\n                case 0:\n                    return \"Fixtures\";\n                case 1:\n                    return \"Standings\";\n                case 2:\n                    return \"Squad\";\n            }\n            return \"\";\n<｜fim▁hole｜>\n}<｜fim▁end｜>",
    "response": "        }\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.dna.mqtt.moquette.proto.messages;\n\npublic class ConnectMessage extends AbstractMessage {\n    String m_protocolName;\n    byte m_procotolVersion;\n\n    //Connection flags\n    boolean m_cleanSession;\n    boolean m_willFlag;\n    byte m_willQos;\n    boolean m_willRetain;\n    boolean m_passwordFlag;\n    boolean m_userFlag;\n    int m_keepAlive;\n\n    //Variable part\n    String m_username;\n    String m_password;\n    String m_clientID;\n    String m_willtopic;\n    String m_willMessage;\n\n    public ConnectMessage() {\n        m_messageType = AbstractMessage.CONNECT;\n    }\n\n    public boolean isCleanSession() {\n        return m_cleanSession;\n    }\n\n    public void setCleanSession(boolean cleanSession) {\n        this.m_cleanSession = cleanSession;\n    }\n\n    public int getKeepAlive() {\n        return m_keepAlive;\n    }\n\n    public void setKeepAlive(int keepAlive) {\n        this.m_keepAlive = keepAlive;\n    }\n\n    public boolean isPasswordFlag() {\n        return m_passwordFlag;\n    }\n\n    public void setPasswordFlag(boolean passwordFlag) {\n        this.m_passwordFlag = passwordFlag;\n    }\n\n    public byte getProcotolVersion() {\n        return m_procotolVersion;\n    }\n\n    public void setProcotolVersion(byte procotolVersion) {\n        this.m_procotolVersion = procotolVersion;\n    }\n<｜fim▁hole｜>    }\n\n    public void setProtocolName(String protocolName) {\n        this.m_protocolName = protocolName;\n    }\n\n    public boolean isUserFlag() {\n        return m_userFlag;\n    }\n\n    public void setUserFlag(boolean userFlag) {\n        this.m_userFlag = userFlag;\n    }\n\n    public boolean isWillFlag() {\n        return m_willFlag;\n    }\n\n    public void setWillFlag(boolean willFlag) {\n        this.m_willFlag = willFlag;\n    }\n\n    public byte getWillQos() {\n        return m_willQos;\n    }\n\n    public void setWillQos(byte willQos) {\n        this.m_willQos = willQos;\n    }\n\n    public boolean isWillRetain() {\n        return m_willRetain;\n    }\n\n    public void setWillRetain(boolean willRetain) {\n        this.m_willRetain = willRetain;\n    }\n\n    public String getPassword() {\n        return m_password;\n    }\n\n    public void setPassword(String password) {\n        this.m_password = password;\n    }\n\n    public String getUsername() {\n        return m_username;\n    }\n\n    public void setUsername(String username) {\n        this.m_username = username;\n    }\n\n    public String getClientID() {\n        return m_clientID;\n    }\n\n    public void setClientID(String clientID) {\n        this.m_clientID = clientID;\n    }\n\n    public String getWillTopic() {\n        return m_willtopic;\n    }\n\n    public void setWillTopic(String topic) {\n        this.m_willtopic = topic;\n    }\n\n    public String getWillMessage() {\n        return m_willMessage;\n    }\n\n    public void setWillMessage(String willMessage) {\n        this.m_willMessage = willMessage;\n    }\n\n    @Override\n    public String toString() {\n        String base = String.format(\"Connect [clientID: %s, prot: %s, ver: %02X, clean: %b]\", m_clientID,\n                m_protocolName, m_procotolVersion, m_cleanSession);\n        if (m_willFlag) {\n            base += String.format(\" Will [QoS: %d, retain: %b]\", m_willQos, m_willRetain);\n        }\n        return base;\n    }\n}<｜fim▁end｜>",
    "response": "\n    public String getProtocolName() {\n        return m_protocolName;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package edu.neu.rrc.wifisigstrdiag.ui;\n\nimport android.app.*;\nimport android.content.pm.*;\nimport android.os.*;\nimport android.view.*;\nimport android.widget.*;\n\nimport butterknife.*;\nimport edu.neu.rrc.wifisigstrdiag.*;\n\npublic class AboutFragment extends Fragment {\n\n    @InjectView(R.id.version) TextView mVersion;\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        return inflater.inflate(R.layout.fragment_about, container, false);\n<｜fim▁hole｜>        super.onViewCreated(view, savedInstanceState);\n        ButterKnife.inject(this, getActivity());\n\n        String version = \"???\";\n        try {\n            version = getActivity().getPackageManager().getPackageInfo(getActivity().getPackageName(), 0).versionName;\n        } catch (PackageManager.NameNotFoundException e) {\n            e.printStackTrace();\n        }\n        mVersion.setText(getString(R.string.version, version));\n    }\n\n    @Override\n    public void onDestroyView() {\n        super.onDestroyView();\n        ButterKnife.reset(this);\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    @Override\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>public class MemMapsWithThread {\n  public static void main (String[] args) {\n\n<｜fim▁hole｜>        t.start();\n    }\n\n    final byte[]data = new byte[40];\n    if (winIPC.createFileMapping(data) == 0)\n      System.out.println(\"File mapping successfully created\");\n    else\n      System.out.println(\"File mapping failed\");\n\n  } // main\n\n  private static class MemMapThread implements Runnable {\n    WindowsIPC winIPC = new WindowsIPC();\n\n    public void run() {\n      long time = System.nanoTime();\n      byte[] x = winIPC.openFileMapping();\n      long timeTaken = System.nanoTime() - time;\n      for (int i = 0; i < x.length; i++) System.out.println(\"Message in Java \" + x[i]);\n      System.out.println(\"Time to send message: \"+ timeTaken + \"ns\");\n    }\n  }\n} // class<｜fim▁end｜>",
    "response": "    WindowsIPC winIPC = new WindowsIPC();\n\n    for (int i = 0; i < 100; i++) {\n        Thread t = new Thread(new MemMapThread());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.craftercms.studio.test.cases.apitestcases;\n\nimport org.craftercms.studio.test.api.objects.SecurityAPI;\nimport org.craftercms.studio.test.api.objects.UserManagementAPI;\nimport org.craftercms.studio.test.utils.APIConnectionManager;\nimport org.craftercms.studio.test.utils.JsonTester;\nimport org.testng.annotations.AfterGroups;\nimport org.testng.annotations.BeforeTest;\nimport org.testng.annotations.Test;\n\npublic class GetUsersAPITest {\n\n    private SecurityAPI securityAPI;\n    private UserManagementAPI userManagementAPI;\n\n    public GetUsersAPITest() {\n<｜fim▁hole｜>                apiConnectionManager.getPort());\n        securityAPI = new SecurityAPI(api,apiConnectionManager);\n        userManagementAPI = new UserManagementAPI(api,apiConnectionManager);\n    }\n\n    @BeforeTest\n    public void beforeTest() {\n        securityAPI.logInIntoStudioUsingAPICall();\n        userManagementAPI.testCreateUser();\n    }\n\n    @Test(priority=1,groups={\"getUsers\"})\n    public void testGetUsers() {\n        userManagementAPI.testGetUsers();\n    }\n\n    @AfterGroups(groups={\"getUsers\"})\n    public void afterTest() {\n        userManagementAPI.testDeleteUser();\n        securityAPI.logOutFromStudioUsingAPICall();\n    }\n\n    @Test(dependsOnGroups={\"getUsers\"})\n    public void testGetUsersUnauthorized(){\n        userManagementAPI.testGetUsersUnauthorized();\n    }\n\n}<｜fim▁end｜>",
    "response": "        APIConnectionManager apiConnectionManager = new APIConnectionManager();\n        JsonTester api = new JsonTester(apiConnectionManager.getProtocol(), apiConnectionManager.getHost(),\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.nerdiex.dictionary.lib;\n\nimport com.android.volley.Cache;\nimport com.android.volley.Network;\nimport com.android.volley.RequestQueue;\nimport com.android.volley.toolbox.BasicNetwork;\nimport com.android.volley.toolbox.DiskBasedCache;\nimport com.android.volley.toolbox.HurlStack;\nimport com.android.volley.toolbox.ImageLoader;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.Bitmap.Config;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.graphics.PorterDuff.Mode;\nimport android.graphics.PorterDuffXfermode;\nimport android.graphics.Rect;\nimport android.graphics.RectF;\nimport android.util.LruCache;\n\npublic class VolleySingleton {\n    private static VolleySingleton mInstance = null;\n    private RequestQueue mRequestQueue;\n    private ImageLoader mImageLoader;\n    Context context;\n\n    public VolleySingleton(Context context){\n        this.context = context;\n        mRequestQueue = getRequestQueue();\n        mImageLoader = new ImageLoader(mRequestQueue, new ImageLoader.ImageCache() {\n            private final LruCache<String, Bitmap> mCache = new LruCache<String, Bitmap>(10);\n            @Override\n            public void putBitmap(String url, Bitmap bitmap) {\n                mCache.put(url, bitmap);\n\n            }\n            @Override\n<｜fim▁hole｜>        });\n    }\n    public Bitmap getRoundedCornerBitmap(Bitmap bitmap, int pixels) {\n        Bitmap output = Bitmap.createBitmap(bitmap.getWidth(), bitmap\n                .getHeight(), Config.ARGB_8888);\n        Canvas canvas = new Canvas(output);\n\n        final int color = 0xff424242;\n        final Paint paint = new Paint();\n        final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());\n        final RectF rectF = new RectF(rect);\n        final float roundPx = pixels;\n\n        paint.setAntiAlias(true);\n        canvas.drawARGB(0, 0, 0, 0);\n        paint.setColor(color);\n        canvas.drawRoundRect(rectF, roundPx, roundPx, paint);\n\n        paint.setXfermode(new PorterDuffXfermode(Mode.SRC_IN));\n        canvas.drawBitmap(bitmap, rect, rect, paint);\n\n        return output;\n    }\n    public static synchronized VolleySingleton getInstance(Context context){\n        if(mInstance == null){\n            mInstance = new VolleySingleton(context);\n        }\n        return mInstance;\n    }\n\n    public RequestQueue getRequestQueue(){\n         if (mRequestQueue == null) {\n             Cache cache = new DiskBasedCache(context.getCacheDir(), 10 * 1024 * 1024);\n             Network network = new BasicNetwork(new HurlStack());\n             mRequestQueue = new RequestQueue(cache, network);\n             // Don't forget to start the volley request queue\n             mRequestQueue.start();\n         }\n         return mRequestQueue;\n    }\n\n    public ImageLoader getImageLoader(){\n        return this.mImageLoader;\n    }\n\n}<｜fim▁end｜>",
    "response": "            public Bitmap getBitmap(String url) {\n                Bitmap bitmap = mCache.get(url);\n\n                return bitmap;\n            }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package hello.health;\n\nimport hello.FeignRemoteHello;\nimport hello.In;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.actuate.health.AbstractHealthIndicator;\nimport org.springframework.boot.actuate.health.Health.Builder;\nimport org.springframework.stereotype.Component;\n\nimport javax.inject.Inject;\n\n@Component\npublic class RemoteHello\n        extends AbstractHealthIndicator {\n    private final String service;\n    private final FeignRemoteHello feign;\n\n    @Inject\n    public RemoteHello(\n            @Value(\"${spring.application.name}\") final String service,\n            final FeignRemoteHello feign) {\n        this.service = service;\n        this.feign = feign;\n    }\n\n<｜fim▁hole｜>                    withDetail(\"endpoint\", \"http://remote-hello/greet\");\n        } catch (final Exception e) {\n            builder.outOfService().\n                    withDetail(\"endpoint\", \"http://remote-hello/greet\").\n                    withDetail(\"exception\", e.getMessage());\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    @Override\n    protected void doHealthCheck(final Builder builder)\n            throws Exception {\n        try {\n            feign.greet(In.builder().name(service).build());\n            builder.up().\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.llb.souyou.db;\n\nimport android.content.ContentValues;\nimport android.content.Context;\nimport android.database.Cursor;\nimport android.database.sqlite.SQLiteDatabase;\nimport android.database.sqlite.SQLiteDatabase.CursorFactory;\nimport android.database.sqlite.SQLiteOpenHelper;\nimport android.provider.BaseColumns;\n\npublic class DBHelper extends SQLiteOpenHelper {\n\n    private static final String DB_NAME = \"souyou\";\n    private static final int DB_VERSION = 1;\n\n    public  SQLiteDatabase db;\n\n    public DBHelper(Context context) {\n        super(context, DB_NAME, null, DB_VERSION);\n    }\n    /**\n     * 构造函数，用来打开或者新建数据库\n     * @param context\n     * @param name 数据库名字\n<｜fim▁hole｜>     * @param version int 数据库版本\n     */\n    public DBHelper(Context context, String name, CursorFactory factory,\n            int version) {\n        super(context, name, factory, version);\n    }\n\n    @Override\n    public void onCreate(SQLiteDatabase db) {\n        this.db = db;\n        //分类表的缓存category(id,cate_id,parent_id,title,imageurl,desc,time)\n        db.execSQL(\"create table if not exists  category (id integer primary key autoincrement,\" +\n                \"cate_id integer,parent_id integer,title text,imageurl text, desc text,time integer)\");\n        //下载状态表 download(id,app_id,imageurl,title,rate,app_down,size,status,progress);\n        //下载状态status:-1=未有下载操作   0=failed 1=success但未安装  2=paused 3=loading\n        db.execSQL(\"create table if not exists download(\" +\n                \"app_id integer primary key,imageurl text,title text,rate real,app_down integer,\" +\n                \"size integer,status integer,progress integer)\");\n    }\n\n    @Override\n    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {\n        // TODO Auto-generated method stub\n        if (oldVersion == newVersion) {\n            return;\n        }\n    }\n\n    public void insert(String Table_Name, ContentValues values) {\n        if (db == null)\n            db = getWritableDatabase();\n        db.insert(Table_Name, null, values);\n\n    }\n    /**\n     * \n     * @param Table_Name\n     * @param id\n     * @return 影响行数\n     */\n    public int delete(String Table_Name, int id) {\n        if (db == null)\n            db = getWritableDatabase();\n        return db.delete(Table_Name, BaseColumns._ID + \"=?\",\n                new String[] { String.valueOf(id) });\n    }\n    /**\n     * @param Table_Name\n     * @param values\n     * @param WhereClause\n     * @param whereArgs\n     * @return 影响行数\n     */\n    public int update(String Table_Name, ContentValues values,\n            String WhereClause, String[] whereArgs) {\n        if (db == null) {\n            db = getWritableDatabase();\n        }\n        return db.update(Table_Name, values, WhereClause, whereArgs);\n    }\n    public void replace(String table,ContentValues values){\n        if(db==null){\n            db=getWritableDatabase();\n        }\n        db.replace(table, null, values);\n    }\n\n    public Cursor query(String Table_Name, String[] columns, String whereStr,\n            String[] whereArgs) {\n        if (db == null) {\n            db = getReadableDatabase();\n        }\n        return db.query(Table_Name, columns, whereStr, whereArgs, null, null,\n                null);\n    }\n\n    public Cursor rawQuery(String sql, String[] args) {\n        if (db == null) {\n            db = getReadableDatabase();\n        }\n        return db.rawQuery(sql, args);\n    }\n\n    public void ExecSQL(String sql) {\n        if (db == null) {\n            db = getWritableDatabase();\n        }\n        db.execSQL(sql);\n    }\n\n    public void closeDb() {\n        if (db != null) {\n            db.close();\n            db = null;\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "     * @param factory CursorFactory\n"
  },
  {
    "prompt": "<｜fim▁begin｜>#set( $symbol_pound = '#' )\n#set( $symbol_dollar = '$' )\n<｜fim▁hole｜>package ${package}.core;\n\nimport playn.core.Image;\nimport playn.core.Platform;\nimport playn.scene.ImageLayer;\nimport playn.scene.SceneGame;\n\npublic class ${JavaGameClassName} extends SceneGame {\n\n  public ${JavaGameClassName} (Platform plat) {\n    super(plat, 33); // update our \"simulation\" 33ms (30 times per second)\n\n    // create and add background image layer\n    Image bgImage = plat.assets().getImage(\"images/bg.png\");\n    ImageLayer bgLayer = new ImageLayer(bgImage);\n    // scale the background to fill the screen\n    bgLayer.setSize(plat.graphics().viewSize);\n    rootLayer.add(bgLayer);\n  }\n}<｜fim▁end｜>",
    "response": "#set( $symbol_escape = '\\' )\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.locationtech.geowave.format.landsat8;\n\nimport static org.junit.Assert.assertTrue;\nimport java.io.File;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.locationtech.geowave.core.cli.parser.ManualOperationParams;\nimport it.geosolutions.jaiext.JAIExt;\n\npublic class DownloadRunnerTest {\n  @Test\n  @Ignore\n  public void testExecute() throws Exception {\n    JAIExt.initJAIEXT();\n\n    final Landsat8BasicCommandLineOptions analyzeOptions = new Landsat8BasicCommandLineOptions();\n    analyzeOptions.setWorkspaceDir(Tests.WORKSPACE_DIR);\n    analyzeOptions.setUseCachedScenes(true);\n    analyzeOptions.setNBestScenes(1);\n    analyzeOptions.setCqlFilter(\n        \"BBOX(shape,-76.6,42.34,-76.4,42.54) and band='BQA' and sizeMB < 1\");\n\n    final Landsat8DownloadCommandLineOptions downloadOptions =\n        new Landsat8DownloadCommandLineOptions();\n<｜fim▁hole｜>    assertTrue(\"images directory exists\", new File(Tests.WORKSPACE_DIR + \"/images\").isDirectory());\n    assertTrue(\"scenes directory exists\", new File(Tests.WORKSPACE_DIR + \"/scenes\").isDirectory());\n    assertTrue(\n        WRS2GeometryStore.WRS2_SHAPE_DIRECTORY + \" directory exists\",\n        new File(Tests.WORKSPACE_DIR + \"/\" + WRS2GeometryStore.WRS2_SHAPE_DIRECTORY).isDirectory());\n  }\n}<｜fim▁end｜>",
    "response": "    downloadOptions.setOverwriteIfExists(false);\n\n    new DownloadRunner(analyzeOptions, downloadOptions).runInternal(new ManualOperationParams());\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.oracle.truffle.api.frame;\n\nimport java.util.*;\n\nimport com.oracle.truffle.api.*;\nimport com.oracle.truffle.api.impl.*;\n\npublic final class FrameDescriptor implements Cloneable {\n<｜fim▁hole｜>    private Assumption version;\n\n    public FrameDescriptor() {\n        this(DefaultFrameTypeConversion.getInstance());\n    }\n\n    public FrameDescriptor(FrameTypeConversion typeConversion) {\n        this.typeConversion = typeConversion;\n        slots = new ArrayList<>();\n        identifierToSlotMap = new HashMap<>();\n        version = createVersion();\n    }\n\n    public FrameSlot addFrameSlot(Object identifier) {\n        return addFrameSlot(identifier, FrameSlotKind.Illegal);\n    }\n\n    public FrameSlot addFrameSlot(Object identifier, FrameSlotKind kind) {\n        assert !identifierToSlotMap.containsKey(identifier);\n        FrameSlotImpl slot = new FrameSlotImpl(this, identifier, slots.size(), kind);\n        slots.add(slot);\n        identifierToSlotMap.put(identifier, slot);\n        updateVersion();\n        return slot;\n    }\n\n    public FrameSlot findFrameSlot(Object identifier) {\n        return identifierToSlotMap.get(identifier);\n    }\n\n    public FrameSlot findOrAddFrameSlot(Object identifier) {\n        FrameSlot result = findFrameSlot(identifier);\n        if (result != null) {\n            return result;\n        }\n        return addFrameSlot(identifier);\n    }\n\n    public FrameSlot findOrAddFrameSlot(Object identifier, FrameSlotKind kind) {\n        FrameSlot result = findFrameSlot(identifier);\n        if (result != null) {\n            return result;\n        }\n        return addFrameSlot(identifier, kind);\n    }\n\n    public int getSize() {\n        return slots.size();\n    }\n\n    public List<? extends FrameSlot> getSlots() {\n        return Collections.unmodifiableList(slots);\n    }\n\n    /**\n     * (db) to retrieve the list of all the identifiers associated with this frame descriptor.\n     * \n     * @return the list of all the identifiers in this frame descriptor\n     */\n    public Set<Object> getIdentifiers() {\n        return Collections.unmodifiableSet(identifierToSlotMap.keySet());\n    }\n\n    public FrameDescriptor copy() {\n        FrameDescriptor clonedFrameDescriptor = new FrameDescriptor(this.typeConversion);\n        for (int i = 0; i < this.getSlots().size(); i++) {\n            Object identifier = this.getSlots().get(i).getIdentifier();\n            clonedFrameDescriptor.addFrameSlot(identifier);\n        }\n        return clonedFrameDescriptor;\n    }\n\n    public FrameDescriptor shallowCopy() {\n        FrameDescriptor clonedFrameDescriptor = new FrameDescriptor(this.typeConversion);\n        clonedFrameDescriptor.slots.addAll(slots);\n        clonedFrameDescriptor.identifierToSlotMap.putAll(identifierToSlotMap);\n        return clonedFrameDescriptor;\n    }\n\n    void updateVersion() {\n        version.invalidate();\n        version = createVersion();\n    }\n\n    public Assumption getVersion() {\n        return version;\n    }\n\n    private static Assumption createVersion() {\n        return Truffle.getRuntime().createAssumption(\"frame version\");\n    }\n\n    public FrameTypeConversion getTypeConversion() {\n        return typeConversion;\n    }\n}<｜fim▁end｜>",
    "response": "\n    private final FrameTypeConversion typeConversion;\n    private final ArrayList<FrameSlotImpl> slots;\n    private final HashMap<Object, FrameSlotImpl> identifierToSlotMap;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.jackrabbit.oak.plugins.index.elasticsearch.facets;\n\nimport org.apache.jackrabbit.oak.plugins.index.elasticsearch.query.ElasticsearchSearcher;\nimport org.apache.jackrabbit.oak.plugins.index.elasticsearch.query.ElasticsearchSearcherModel;\nimport org.apache.jackrabbit.oak.plugins.index.elasticsearch.util.ElasticsearchAggregationBuilderUtil;\nimport org.apache.jackrabbit.oak.plugins.index.elasticsearch.util.ElasticsearchConstants;\nimport org.apache.jackrabbit.oak.plugins.index.search.spi.query.FulltextIndex;\nimport org.apache.jackrabbit.oak.spi.query.Filter;\nimport org.apache.jackrabbit.oak.spi.query.QueryIndex;\nimport org.elasticsearch.action.search.SearchResponse;\n<｜fim▁hole｜>import org.elasticsearch.search.SearchHit;\nimport org.elasticsearch.search.aggregations.Aggregation;\nimport org.elasticsearch.search.aggregations.bucket.terms.Terms;\nimport org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.PriorityQueue;\n\npublic class SecureElasticSearchFacets extends InsecureElasticSearchFacets {\n\n    public SecureElasticSearchFacets(ElasticsearchSearcher searcher, QueryBuilder query,\n                                     QueryIndex.IndexPlan plan) {\n        super(searcher, query, plan, null);\n    }\n\n    /*\n    We are not using elasticSearch's aggregation as we have to fetch each document to validate access rights\n    for docs.\n     */\n    @Override\n    public Map<String, List<FulltextIndex.Facet>> getElasticSearchFacets(int numberOfFacets) throws IOException {\n        Map<String, Map<String, Long>> secureFacetCount = new HashMap<>();\n        Filter filter = getPlan().getFilter();\n        boolean doFetch = true;\n        for (int from = 0; doFetch; from += ElasticsearchConstants.ELASTICSEARCH_QUERY_BATCH_SIZE) {\n            ElasticsearchSearcherModel elasticsearchSearcherModel = new ElasticsearchSearcherModel.ElasticsearchSearcherModelBuilder()\n                    .withQuery(getQuery())\n                    .withBatchSize(ElasticsearchConstants.ELASTICSEARCH_QUERY_BATCH_SIZE)\n                    .withFrom(from)\n                    .build();\n            SearchResponse docs = getSearcher().search(elasticsearchSearcherModel);\n            SearchHit[] searchHits = docs.getHits().getHits();\n            long totalResults = docs.getHits().getTotalHits().value;\n            if (totalResults <= from + ElasticsearchConstants.ELASTICSEARCH_QUERY_BATCH_SIZE || searchHits.length == 0) {\n                doFetch = false;\n            }\n\n            List<String> accessibleDocs = ElasticFacetHelper.getAccessibleDocIds(searchHits, filter);\n            if (accessibleDocs.isEmpty()) continue;\n            QueryBuilder queryWithAccessibleDocIds = QueryBuilders.termsQuery(\"_id\", accessibleDocs);\n            Map<String, Aggregation> accessibleDocsAggregation = getAggregationForDocIds(queryWithAccessibleDocIds, accessibleDocs.size());\n            collateAggregations(secureFacetCount, accessibleDocsAggregation);\n        }\n\n        Map<String, List<FulltextIndex.Facet>> facetResult = new HashMap<>();\n        for (String facet : secureFacetCount.keySet()) {\n            PriorityQueue<ElasticSearchFacet> pq = new PriorityQueue<>(numberOfFacets, (o1, o2) -> o2.getCount().compareTo(o1.getCount()));\n            Map<String, Long> facetLabelMap = secureFacetCount.get(facet);\n            for (String label : facetLabelMap.keySet()) {\n                pq.add(new ElasticSearchFacet(label, facetLabelMap.get(label)));\n            }\n            List<FulltextIndex.Facet> fc = new LinkedList<>();\n            pq.forEach(elasticSearchFacet -> fc.add(elasticSearchFacet.convertToFacet()));\n            facetResult.put(facet, fc);\n        }\n        return facetResult;\n    }\n\n    private void collateAggregations(Map<String, Map<String, Long>> secureFacetCount, Map<String, Aggregation> docs) {\n        for (String facet : docs.keySet()) {\n            Terms terms = (Terms) docs.get(facet);\n            List<? extends Terms.Bucket> buckets = terms.getBuckets();\n            for (Terms.Bucket bucket : buckets) {\n                String label = bucket.getKeyAsString();\n                Long count = bucket.getDocCount();\n                collateFacetData(secureFacetCount, facet, label, count);\n            }\n        }\n    }\n\n    private void collateFacetData(Map<String, Map<String, Long>> globalData, String facet, String label, Long count) {\n        if (globalData.get(facet) == null) {\n            Map<String, Long> labelValueMap = new HashMap<>();\n            labelValueMap.put(label, count);\n            globalData.put(facet, labelValueMap);\n        } else {\n            if (globalData.get(facet).get(label) == null) {\n                globalData.get(facet).put(label, count);\n            } else {\n                Long existingCount = globalData.get(facet).get(label);\n                globalData.get(facet).put(label, existingCount + count);\n            }\n        }\n    }\n\n    private Map<String, Aggregation> getAggregationForDocIds(QueryBuilder queryWithAccessibleDocIds, int facetCount) throws IOException {\n        List<TermsAggregationBuilder> aggregationBuilders = ElasticsearchAggregationBuilderUtil.getAggregators(getPlan(), facetCount);\n        ElasticsearchSearcherModel idBasedelasticsearchSearcherModelWithAggregation = new ElasticsearchSearcherModel.ElasticsearchSearcherModelBuilder()\n                .withQuery(queryWithAccessibleDocIds)\n                .withAggregation(aggregationBuilders)\n                .build();\n\n        SearchResponse facetDocs = getSearcher().search(idBasedelasticsearchSearcherModelWithAggregation);\n        Map<String, Aggregation> aggregationMap = facetDocs.getAggregations().asMap();\n        return aggregationMap;\n    }\n}<｜fim▁end｜>",
    "response": "import org.elasticsearch.index.query.QueryBuilder;\nimport org.elasticsearch.index.query.QueryBuilders;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.diffplug.gradle.spotless;\n\nimport groovy.lang.Closure;\nimport org.gradle.api.Project;\nimport org.gradle.testfixtures.ProjectBuilder;\nimport org.junit.Assert;\nimport org.junit.Rule;\nimport org.junit.rules.TemporaryFolder;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.StandardCharsets;\nimport java.nio.file.Files;\nimport java.util.Collections;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class ResourceTest {\n    @Rule\n    public TemporaryFolder folder = new TemporaryFolder();\n\n    /** Creates a FormatTask based on the given consumer. */\n    public static FormatTask createTask(final SimpleConsumer<FormatExtension> test) throws Exception {\n        Project project = ProjectBuilder.builder().build();\n        SpotlessPlugin plugin = project.getPlugins().apply(SpotlessPlugin.class);\n\n        final AtomicReference<FormatExtension> ref = new AtomicReference<>();\n        plugin.getExtension().format(\"underTest\", new Closure<FormatExtension>(plugin) {\n            @Override\n            public FormatExtension call() {\n                FormatExtension extension = (FormatExtension) getDelegate();\n                ref.set(extension);\n                test.accept(extension);\n                return extension;\n            }\n        });\n\n        boolean check = false;\n        return plugin.createTask(\"underTest\", ref.get(), check);\n    }\n\n    /** Returns the contents of the given file from the src/test/resources directory. */\n    protected String getTestResource(String filename) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        InputStream inputStream = getClass().getResourceAsStream(\"/\" + filename);\n        byte[] buffer = new byte[1024];\n        int length;\n        while ((length = inputStream.read(buffer)) != -1) {\n            baos.write(buffer, 0, length);\n        }\n        return new String(baos.toByteArray(), StandardCharsets.UTF_8);\n    }\n\n    /** Returns a File (in a temporary folder) which has the contents of the given file from the src/test/resources directory. */\n    protected File createTestFile(String filename) throws IOException {\n        File file = folder.newFile(filename);\n        Files.write(file.toPath(), getTestResource(filename).getBytes(StandardCharsets.UTF_8));\n        return file;\n<｜fim▁hole｜>        File file = folder.newFile(filename);\n        Files.write(file.toPath(), content.getBytes(StandardCharsets.UTF_8));\n        return file;\n    }\n\n    /** Asserts that the given resource from the src/test/resources directory has the same content as the given file. */\n    protected void assertFileContent(String expectedContent, File actual) throws IOException {\n        // This line thing is necessary for the tests to pass when Windows git screws up the line-endings\n        String actualContent = new String(Files.readAllBytes(actual.toPath()), StandardCharsets.UTF_8);\n        Assert.assertEquals(expectedContent, actualContent);\n    }\n\n    /** Reads the given resource from \"before\", applies the step, and makes sure the result is \"after\". */\n    protected void assertStep(FormattingOperation step, String unformattedPath, String expectedPath) throws Throwable {\n        String unformatted = getTestResource(unformattedPath).replace(\"\\r\", \"\"); // unix-ified input\n        String formatted = step.apply(unformatted);\n        // no windows newlines\n        Assert.assertEquals(-1, formatted.indexOf('\\r'));\n\n        // unix-ify the test resource output in case git screwed it up\n        String expected = getTestResource(expectedPath).replace(\"\\r\", \"\"); // unix-ified output\n        Assert.assertEquals(expected, formatted);\n    }\n\n    /** Tests that the formatExtension causes the given change. */\n    protected void assertTask(final SimpleConsumer<FormatExtension> test, final String before, final String afterExpected) throws Exception {\n        // create the task\n        FormatTask task = createTask(test);\n        // force unix line endings, since we're passing in raw strings\n        task.lineEndings = LineEnding.UNIX;\n        // create the test file\n        File testFile = folder.newFile();\n        Files.write(testFile.toPath(), before.getBytes(StandardCharsets.UTF_8));\n        // set the task to use this test file\n        task.target = Collections.singleton(testFile);\n        // run the task\n        task.format();\n        // check what the task did\n        String afterActual = new String(Files.readAllBytes(testFile.toPath()), StandardCharsets.UTF_8);\n        Assert.assertEquals(afterExpected, afterActual);\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    /** Returns a File (in a temporary folder) which has the given contents. */\n    protected File createTestFile(String filename, String content) throws IOException {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package me.mrCookieSlime.Slimefun.Objects.SlimefunItem.items;\n\nimport java.util.UUID;\n\nimport org.bukkit.Bukkit;\nimport org.bukkit.Material;\nimport org.bukkit.entity.Arrow;\nimport org.bukkit.entity.Bat;\nimport org.bukkit.entity.Entity;\nimport org.bukkit.entity.EntityType;\n<｜fim▁hole｜>import me.mrCookieSlime.Slimefun.SlimefunPlugin;\nimport me.mrCookieSlime.Slimefun.Lists.RecipeType;\nimport me.mrCookieSlime.Slimefun.Objects.Category;\nimport me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\nimport me.mrCookieSlime.Slimefun.Objects.handlers.ItemInteractionHandler;\nimport me.mrCookieSlime.Slimefun.api.Slimefun;\nimport me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\nimport me.mrCookieSlime.Slimefun.utils.Utilities;\n\npublic class GrapplingHook extends SimpleSlimefunItem<ItemInteractionHandler> {\n\n    private long despawnTicks;\n\n    public GrapplingHook(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, String[] keys, Object[] values) {\n        super(category, item, recipeType, recipe, keys, values);\n    }\n\n    @Override\n    public ItemInteractionHandler getItemHandler() {\n        Utilities utilities = SlimefunPlugin.getUtilities();\n\n        return (e, p, item) -> {\n            if (isItem(item)) {\n                UUID uuid = p.getUniqueId();\n\n                if (e.getClickedBlock() == null && !utilities.jumpState.containsKey(uuid)) {\n                    e.setCancelled(true);\n\n                    if (p.getInventory().getItemInOffHand().getType() == Material.BOW) {\n                        // Cancel, to fix dupe #740\n                        return false;\n                    }\n                    utilities.jumpState.put(uuid, p.getInventory().getItemInMainHand().getType() != Material.SHEARS);\n\n                    if (item.getType() == Material.LEAD) {\n                        item.setAmount(item.getAmount() - 1);\n                    }\n\n                    Vector direction = p.getEyeLocation().getDirection().multiply(2.0);\n                    Arrow arrow = p.getWorld().spawn(p.getEyeLocation().add(direction.getX(), direction.getY(), direction.getZ()), Arrow.class);\n                    arrow.setShooter(p);\n                    arrow.setVelocity(direction);\n\n                    Bat b = (Bat) p.getWorld().spawnEntity(p.getLocation(), EntityType.BAT);\n                    b.setCanPickupItems(false);\n                    b.setAI(false);\n                    b.addPotionEffect(new PotionEffect(PotionEffectType.INVISIBILITY, 100000, 100000));\n                    b.setLeashHolder(arrow);\n\n                    utilities.damage.add(uuid);\n                    utilities.remove.put(uuid, new Entity[]{b, arrow});\n\n                    // To fix issue #253\n                    Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunPlugin.instance, () -> {\n                        if (utilities.jumpState.containsKey(uuid)) {\n                            utilities.arrows.remove(uuid);\n\n                            for (Entity n : utilities.remove.get(uuid)) {\n                                if (n.isValid()) n.remove();\n                            }\n\n                            Bukkit.getScheduler().scheduleSyncDelayedTask(SlimefunPlugin.instance, () -> {\n                                utilities.damage.remove(uuid);\n                                utilities.jumpState.remove(uuid);\n                                utilities.remove.remove(uuid);\n                            }, 20L);\n                        }\n                    }, despawnTicks);\n                }\n                return true;\n            }\n            else return false;\n        };\n    }\n\n    @Override\n    public void postRegister() {\n        despawnTicks = (int) Slimefun.getItemValue(getID(), \"despawn-seconds\") * 20L;\n    }\n}<｜fim▁end｜>",
    "response": "import org.bukkit.inventory.ItemStack;\nimport org.bukkit.potion.PotionEffect;\nimport org.bukkit.potion.PotionEffectType;\nimport org.bukkit.util.Vector;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.companyname.springapp.web;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.servlet.ServletException;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport com.companyname.springapp.account.Account;\nimport com.companyname.springapp.bank.Bank;\nimport com.companyname.springapp.client.Client;\nimport com.companyname.springapp.domain.Card;\nimport com.companyname.springapp.domain.CreditCard;\nimport com.companyname.springapp.exceptions.IncorrectLimitException;\nimport com.companyname.springapp.fees.FeeStrategy;\nimport com.companyname.springapp.fees.LinearFee;\nimport com.companyname.springapp.repository.InMemoryCardDao;\nimport com.companyname.springapp.repository.JPACardDao;\nimport com.companyname.springapp.service.ModifyPin;\nimport com.companyname.springapp.service.SimpleCardManager;\n\npublic class CardControllerTests {\n\n    CreditCard testCard;\n    private Bank bank;\n    private String accountNumber = \"00000000001111111111\";\n    private SimpleCardManager cardManager;\n    private List<Card> cards;\n\n    @Before\n    public void setUp() throws Exception {\n        cards = new ArrayList<Card>();\n        this.bank = new Bank(\"1234\");\n        Client client = new Client(\"71451559N\", 27);\n        Account account = new Account(accountNumber);\n        FeeStrategy commissionEmission = new LinearFee(0, 25);\n        FeeStrategy commissionMaintenance = new LinearFee(0, 0);\n        FeeStrategy commissionRenovate = new LinearFee(0, 0);\n        testCard = new CreditCard(\"1234 0112 3456 7890\", client, account, 400.0, 1000.0, 400.0, 1000.0, commissionEmission.getFee(0), commissionMaintenance.getFee(0), commissionRenovate.getFee(0));\n        cards.add(testCard);\n    }\n\n    @Test\n    public void testhandleRequestViewOk() throws Exception{     \n        CardController controller = new CardController();\n        controller.setCard(testCard);\n        SimpleCardManager scm = new SimpleCardManager();\n        scm.setCardDao(new InMemoryCardDao(cards));\n        controller.setCardManager(scm);\n        //controller.setProductManager(new SimpleProductManager());\n        ModelAndView modelAndView = controller.handleRequest(null, null);\n<｜fim▁hole｜>        assertNotNull(modelAndView.getModel());\n\n        Map<String, Object> modelMap = (Map<String, Object>) modelAndView.getModel().get(\"card\");\n        String cardValue = modelMap.get(\"cardNumber\").toString();\n        assertNotNull(cardValue);\n    }\n\n    @Test (expected = NullPointerException.class)\n    public void testhandleRequestViewFailNull() throws Exception{\n        testCard = null;\n        CardController controller = new CardController();\n        controller.setCard(testCard);\n        ModelAndView modelAndView = controller.handleRequest(null, null);\n    }\n\n    @Test\n    public void testGetCard() {\n        CardController controller = new CardController();\n        controller.setCard(testCard);\n\n        assertEquals(\"1234 0112 3456 7890\", controller.getCard().getCardId());\n    }\n\n    @Test\n    public void testSetCard() throws IncorrectLimitException {\n        testCard.setBuyLimitDiary(500.00);\n        CardController controller = new CardController();\n        controller.setCard(testCard);\n        assertEquals(500.00, controller.getCard().getBuyLimitDiary(),0.0001);\n\n    }\n\n}<｜fim▁end｜>",
    "response": "        assertEquals(\"hello\", modelAndView.getViewName());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.opennms.netmgt.config;\n\npublic class WebRoleContext {\n    private static WebRoleManagerImpl s_manager = null;\n\n    /**\n     * <p>init</p>\n     *\n     * @throws java.lang.Exception if any.\n     */\n    public static void init() throws Exception {\n        GroupFactory.init();\n        UserFactory.init();\n    }\n\n    private static WebRoleManagerImpl getManager() {\n        if (s_manager == null) {\n            s_manager = new WebRoleManagerImpl(GroupFactory.getInstance(), UserFactory.getInstance());\n        }\n<｜fim▁hole｜>    /**\n     * <p>getWebRoleManager</p>\n     *\n     * @return a {@link org.opennms.netmgt.config.WebRoleManager} object.\n     */\n    public static WebRoleManager getWebRoleManager() {\n        return getManager();\n    }\n\n    /**\n     * <p>getWebUserManager</p>\n     *\n     * @return a {@link org.opennms.netmgt.config.WebUserManager} object.\n     */\n    public static WebUserManager getWebUserManager() {\n        return getManager();\n    }\n\n    /**\n     * <p>getWebGroupManager</p>\n     *\n     * @return a {@link org.opennms.netmgt.config.WebGroupManager} object.\n     */\n    public static WebGroupManager getWebGroupManager() {\n        return getManager();\n    }\n\n}<｜fim▁end｜>",
    "response": "\n        return s_manager;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.esri.geoevent.solutions.transport.mlobi;\n\nimport junit.framework.Test;\nimport junit.framework.TestCase;\n<｜fim▁hole｜>     * Create the test case\n     *\n     * @param testName name of the test case\n     */\n    public AppTest( String testName )\n    {\n        super( testName );\n    }\n\n    /**\n     * @return the suite of tests being tested\n     */\n    public static Test suite()\n    {\n        return new TestSuite( AppTest.class );\n    }\n\n    /**\n     * Rigourous Test :-)\n     */\n    public void testApp()\n    {\n        assertTrue( true );\n    }\n}<｜fim▁end｜>",
    "response": "import junit.framework.TestSuite;\n\npublic class AppTest \n    extends TestCase\n{\n    /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.rapidminer.operator.learner.tree;\n\nimport java.util.List;\n\nimport com.rapidminer.example.Example;\nimport com.rapidminer.example.ExampleSet;\nimport com.rapidminer.example.set.ExampleSetUtilities;\nimport com.rapidminer.operator.Model;\nimport com.rapidminer.operator.OperatorException;\nimport com.rapidminer.operator.learner.SimplePredictionModel;\nimport com.rapidminer.operator.learner.meta.ConfidenceVoteModel;\nimport com.rapidminer.operator.learner.meta.MetaModel;\nimport com.rapidminer.operator.learner.meta.SimpleVoteModel;\nimport io.transwarp.midas.adaptor.model.tree.IRandomForestModel;\n\npublic class ConfigurableRandomForestModel extends SimplePredictionModel implements MetaModel,IRandomForestModel {\n\n    public enum VotingStrategy {\n        MAJORITY_VOTE(\"majority vote\"), CONFIDENCE_VOTE(\"confidence vote\");\n\n        private final String value;\n\n        private VotingStrategy(String value) {\n            this.value = value;\n        }\n\n        @Override\n<｜fim▁hole｜>        }\n    }\n\n    private static final long serialVersionUID = 1L;\n\n    /** The wrapped voting meta model. */\n    private final SimplePredictionModel model;\n\n    public ConfigurableRandomForestModel(ExampleSet exampleSet, List<? extends TreeModel> models, VotingStrategy strategy) {\n        super(exampleSet, ExampleSetUtilities.SetsCompareOption.EQUAL,\n                ExampleSetUtilities.TypesCompareOption.ALLOW_SAME_PARENTS);\n        switch (strategy) {\n            case MAJORITY_VOTE:\n                model = new SimpleVoteModel(exampleSet, models);\n                break;\n            default:\n                model = new ConfidenceVoteModel(exampleSet, models);\n        }\n    }\n\n    @Override\n    public List<? extends Model> getModels() {\n        return ((MetaModel) model).getModels();\n    }\n\n    @Override\n    public List<String> getModelNames() {\n        return ((MetaModel) model).getModelNames();\n    }\n\n    @Override\n    public String getName() {\n        return \"Tree Models\";\n    }\n\n    @Override\n    public double predict(Example example) throws OperatorException {\n        return model.predict(example);\n    }\n\n    @Override\n    public String toString() {\n        return model.toString();\n    }\n\n}<｜fim▁end｜>",
    "response": "        public String toString() {\n            return value;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.nohope.cassandra.mapservice.ctypes.custom;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeZone;\nimport org.joda.time.ReadableInstant;\nimport org.nohope.cassandra.mapservice.ctypes.AbstractConverter;\nimport org.nohope.cassandra.mapservice.ctypes.CoreConverter;\n\npublic class UTCDateTimeType extends AbstractConverter<String, DateTime> {\n    public static final UTCDateTimeType INSTANCE = new UTCDateTimeType();\n\n<｜fim▁hole｜>    @Override\n    public String asCassandraValue(final DateTime value) {\n        final ReadableInstant utcDateTime = new DateTime(value, DateTimeZone.UTC);\n        return utcDateTime.toString();\n    }\n\n    @Override\n    public DateTime asJavaValue(final String value) {\n        return DateTime.parse(value);\n    }\n}<｜fim▁end｜>",
    "response": "    private UTCDateTimeType() {\n        super(DateTime.class, CoreConverter.TEXT);\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.hadoop.mapred.lib;\n\nimport java.io.UnsupportedEncodingException;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.StringTokenizer;\n\nimport org.apache.hadoop.util.UTF8ByteArrayUtils;\n\nclass KeyFieldHelper {\n\n  protected static class KeyDescription {\n    int beginFieldIdx = 1;\n    int beginChar = 1;\n    int endFieldIdx = 0;\n    int endChar = 0;\n    boolean numeric;\n    boolean reverse;\n  }\n\n  private List<KeyDescription> allKeySpecs = new ArrayList<KeyDescription>();\n  private byte[] keyFieldSeparator;\n  private boolean keySpecSeen = false;\n\n  public void setKeyFieldSeparator(String keyFieldSeparator) {\n    try {\n      this.keyFieldSeparator =\n        keyFieldSeparator.getBytes(\"UTF-8\");\n    } catch (UnsupportedEncodingException e) {\n      throw new RuntimeException(\"The current system does not \" +\n          \"support UTF-8 encoding!\", e);\n    }    \n  }\n\n  /** Required for backcompatibility with num.key.fields.for.partition in\n   * {@link KeyFieldBasedPartitioner} */\n  public void setKeyFieldSpec(int start, int end) {\n    if (end >= start) {\n      KeyDescription k = new KeyDescription();\n      k.beginFieldIdx = start;\n      k.endFieldIdx = end;\n      keySpecSeen = true;\n      allKeySpecs.add(k);\n    }\n  }\n\n  public List<KeyDescription> keySpecs() {\n    return allKeySpecs;\n  }\n\n  public int[] getWordLengths(byte []b, int start, int end) {\n    //Given a string like \"hello how are you\", it returns an array\n    //like [4 5, 3, 3, 3], where the first element is the number of\n    //fields\n    if (!keySpecSeen) {\n      //if there were no key specs, then the whole key is one word\n      return new int[] {1};\n    }\n    int[] lengths = new int[10];\n    int currLenLengths = lengths.length;\n    int idx = 1;\n    int pos;\n    while ((pos = UTF8ByteArrayUtils.findBytes(b, start, end, \n        keyFieldSeparator)) != -1) {\n      if (++idx == currLenLengths) {\n        int[] temp = lengths;\n        lengths = new int[(currLenLengths = currLenLengths*2)];\n        System.arraycopy(temp, 0, lengths, 0, temp.length);\n      }\n      lengths[idx - 1] = pos - start;\n      start = pos + 1;\n    }\n\n    if (start != end) {\n      lengths[idx] = end - start;\n    }\n    lengths[0] = idx; //number of words is the first element\n    return lengths;\n  }\n  public int getStartOffset(byte[]b, int start, int end, \n      int []lengthIndices, KeyDescription k) {\n    //if -k2.5,2 is the keyspec, the startChar is lengthIndices[1] + 5\n    //note that the [0]'th element is the number of fields in the key\n    if (lengthIndices[0] >= k.beginFieldIdx) {\n      int position = 0;\n      for (int i = 1; i < k.beginFieldIdx; i++) {\n        position += lengthIndices[i] + keyFieldSeparator.length; \n      }\n      if (position + k.beginChar <= (end - start)) {\n        return start + position + k.beginChar - 1; \n      }\n    }\n    return -1;\n  }\n  public int getEndOffset(byte[]b, int start, int end, \n      int []lengthIndices, KeyDescription k) {\n    //if -k2,2.8 is the keyspec, the endChar is lengthIndices[1] + 8\n    //note that the [0]'th element is the number of fields in the key\n    if (k.endFieldIdx == 0) {\n      //there is no end field specified for this keyspec. So the remaining\n      //part of the key is considered in its entirety.\n      return end; \n    }\n    if (lengthIndices[0] >= k.endFieldIdx) {\n      int position = 0;\n      int i;\n      for (i = 1; i < k.endFieldIdx; i++) {\n        position += lengthIndices[i] + keyFieldSeparator.length;\n      }\n      if (k.endChar == 0) { \n        position += lengthIndices[i];\n<｜fim▁hole｜>      }\n      return end;\n    }\n    return end;\n  }\n  public void parseOption(String option) {\n    if (option == null || option.equals(\"\")) {\n      //we will have only default comparison\n      return;\n    }\n    StringTokenizer args = new StringTokenizer(option);\n    KeyDescription global = new KeyDescription();\n    while (args.hasMoreTokens()) {\n      String arg = args.nextToken();\n      if (arg.equals(\"-n\")) {  \n        global.numeric = true;\n      }\n      if (arg.equals(\"-r\")) {\n        global.reverse = true;\n      }\n      if (arg.equals(\"-nr\")) {\n        global.numeric = true;\n        global.reverse = true;\n      }\n      if (arg.startsWith(\"-k\")) {\n        KeyDescription k = parseKey(arg, args);\n        if (k != null) {\n          allKeySpecs.add(k);\n          keySpecSeen = true;\n        }\n      }\n    }\n    for (KeyDescription key : allKeySpecs) {\n      if (!(key.reverse | key.numeric)) {\n        key.reverse = global.reverse;\n        key.numeric = global.numeric;\n      }\n    }\n    if (allKeySpecs.size() == 0) {\n      allKeySpecs.add(global);\n    }\n  }\n\n  private KeyDescription parseKey(String arg, StringTokenizer args) {\n    //we allow for -k<arg> and -k <arg>\n    String keyArgs = null;\n    if (arg.length() == 2) {\n      if (args.hasMoreTokens()) {\n        keyArgs = args.nextToken();\n      }\n    } else {\n      keyArgs = arg.substring(2);\n    }\n    if (keyArgs == null || keyArgs.length() == 0) {\n      return null;\n    }\n    StringTokenizer st = new StringTokenizer(keyArgs,\"nr.,\",true);\n\n    KeyDescription key = new KeyDescription();\n\n    String token;\n    //the key is of the form 1[.3][nr][,1.5][nr]\n    if (st.hasMoreTokens()) {\n      token = st.nextToken();\n      //the first token must be a number\n      key.beginFieldIdx = Integer.parseInt(token);\n    }\n    if (st.hasMoreTokens()) {\n      token = st.nextToken();\n      if (token.equals(\".\")) {\n        token = st.nextToken();\n        key.beginChar = Integer.parseInt(token);\n        if (st.hasMoreTokens()) {\n          token = st.nextToken();\n        } else {\n          return key;\n        }\n      } \n      do {\n        if (token.equals(\"n\")) {\n          key.numeric = true;\n        }\n        else if (token.equals(\"r\")) {\n          key.reverse = true;\n        }\n        else break;\n        if (st.hasMoreTokens()) {\n          token = st.nextToken();\n        } else {\n          return key;\n        }\n      } while (true);\n      if (token.equals(\",\")) {\n        token = st.nextToken();\n        //the first token must be a number\n        key.endFieldIdx = Integer.parseInt(token);\n        if (st.hasMoreTokens()) {\n          token = st.nextToken();\n          if (token.equals(\".\")) {\n            token = st.nextToken();\n            key.endChar = Integer.parseInt(token);\n            if (st.hasMoreTokens()) {\n              token = st.nextToken();\n            } else {\n              return key;\n            }\n          }\n          do {\n            if (token.equals(\"n\")) {\n              key.numeric = true;\n            }\n            else if (token.equals(\"r\")) {\n              key.reverse = true;\n            }\n            else { \n              throw new IllegalArgumentException(\"Invalid -k argument. \" +\n               \"Must be of the form -k pos1,[pos2], where pos is of the form \" +\n               \"f[.c]nr\");\n            }\n            if (st.hasMoreTokens()) {\n              token = st.nextToken();\n            } else {\n              break;\n            }\n          } while (true);\n        }\n        return key;\n      }\n      throw new IllegalArgumentException(\"Invalid -k argument. \" +\n          \"Must be of the form -k pos1,[pos2], where pos is of the form \" +\n          \"f[.c]nr\");\n    }\n    return key;\n  }\n  private void printKey(KeyDescription key) {\n    System.out.println(\"key.beginFieldIdx: \" + key.beginFieldIdx);\n    System.out.println(\"key.beginChar: \" + key.beginChar);\n    System.out.println(\"key.endFieldIdx: \" + key.endFieldIdx);\n    System.out.println(\"key.endChar: \" + key.endChar);\n    System.out.println(\"key.numeric: \" + key.numeric);\n    System.out.println(\"key.reverse: \" + key.reverse);\n    System.out.println(\"parseKey over\");\n  }  \n}<｜fim▁end｜>",
    "response": "      }\n      if (position + k.endChar <= (end - start)) {\n        return start + position + k.endChar - 1;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.ignite.internal.visor.cache;\n\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.concurrent.TimeUnit;\nimport javax.cache.expiry.CreatedExpiryPolicy;\nimport javax.cache.expiry.Duration;\nimport javax.cache.expiry.ExpiryPolicy;\nimport org.apache.ignite.IgniteCache;\nimport org.apache.ignite.cache.CachePeekMode;\nimport org.apache.ignite.internal.processors.task.GridInternal;\nimport org.apache.ignite.internal.processors.task.GridVisorManagementTask;\nimport org.apache.ignite.internal.util.typedef.internal.S;\nimport org.apache.ignite.internal.util.typedef.internal.U;\nimport org.apache.ignite.internal.visor.VisorJob;\nimport org.apache.ignite.internal.visor.VisorOneNodeTask;\n\n@GridInternal\n@GridVisorManagementTask\npublic class VisorCacheLoadTask extends\n    VisorOneNodeTask<VisorCacheLoadTaskArg, Map<String, Integer>> {\n    /** */\n    private static final long serialVersionUID = 0L;\n\n    /** {@inheritDoc} */\n    @Override protected VisorCachesLoadJob job(VisorCacheLoadTaskArg arg) {\n        return new VisorCachesLoadJob(arg, debug);\n    }\n\n    /** Job that load caches. */\n    private static class VisorCachesLoadJob extends\n        VisorJob<VisorCacheLoadTaskArg, Map<String, Integer>> {\n        /** */\n        private static final long serialVersionUID = 0L;\n\n        /**\n         * @param arg Cache names, ttl and loader arguments.\n         * @param debug Debug flag.\n         */\n        private VisorCachesLoadJob(VisorCacheLoadTaskArg arg, boolean debug) {\n            super(arg, debug);\n        }\n\n        /** {@inheritDoc} */\n        @Override protected Map<String, Integer> run(VisorCacheLoadTaskArg arg) {\n            Set<String> cacheNames = arg.getCacheNames();\n            long ttl = arg.getTtl();\n            Object[] ldrArgs = arg.getLoaderArguments();\n\n            assert cacheNames != null && !cacheNames.isEmpty();\n\n            Map<String, Integer> res = U.newHashMap(cacheNames.size());\n\n            ExpiryPolicy plc = null;\n\n            for (String cacheName : cacheNames) {\n<｜fim▁hole｜>\n                if (ttl > 0) {\n                    if (plc == null)\n                        plc = new CreatedExpiryPolicy(new Duration(TimeUnit.MILLISECONDS, ttl));\n\n                    cache = cache.withExpiryPolicy(plc);\n                }\n\n                cache.loadCache(null, ldrArgs);\n\n                res.put(cacheName, cache.size(CachePeekMode.PRIMARY));\n            }\n\n            return res;\n        }\n\n        /** {@inheritDoc} */\n        @Override public String toString() {\n            return S.toString(VisorCachesLoadJob.class, this);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "                IgniteCache cache = ignite.cache(cacheName);\n\n                if (cache == null)\n                    throw new IllegalStateException(\"Failed to find cache for name: \" + cacheName);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ch.elexis.core.services;\n\nimport ch.elexis.core.model.IBillable;\nimport ch.elexis.core.model.IEncounter;\n<｜fim▁hole｜>     * Adjust the {@link IBillable} before it is attempted to be billed. The adjusted\n     * {@link IBillable}, possibly a different object than billable, is returned. If no adjustment\n     * is performed, the same object is returned.\n     * \n     * @param verrechenbar\n     * @return the adjusted {@link IVerrechenbar}\n     */\n    public IBillable adjust(IBillable billable, IEncounter encounter);\n}<｜fim▁end｜>",
    "response": "\npublic interface IBillableAdjuster {\n    /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ca.cs.ualberta.localpost.controller;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\n\n<｜fim▁hole｜>    /**\n     * Sorts comment array by Radish \n     * @author Team01\n     *\n     */\npublic class SortGreatestComments implements SortComments {\n\n    @Override\n    public ArrayList<CommentModel> sortComments(ArrayList<CommentModel> comments) {\n        Collections.sort(comments, new Comparator<CommentModel>() {\n            @SuppressLint(\"NewApi\")\n            @Override\n            public int compare(CommentModel  comment1, CommentModel  comment2)\n            {\n\n                return  Integer.compare(comment2.getRadish(), comment1.getRadish());\n            }\n        });\n        return comments;\n    }\n\n}<｜fim▁end｜>",
    "response": "import android.annotation.SuppressLint;\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.mathblotter.parser.terms;\n\nimport java.util.List;\n\npublic interface TermVisitor {\n\n<｜fim▁hole｜>    public Term visit(PolynomialTerm term, List<Term> children);\n    public Term visit(ProductTerm term, List<Term> children);\n    public Term visit(SubExpressionTerm term, List<Term> children);\n    public Term visit(SumTerm term, List<Term> children);\n    public Term visit(VariableTerm term, List<Term> children);\n}<｜fim▁end｜>",
    "response": "    public Term visit(Term term, List<Term> children);\n    public Term visit(ExponentTerm term, List<Term> children);\n    public Term visit(NumberTerm term, List<Term> children);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package clustercode.api.event.messages;\n\nimport lombok.*;\n\n@EqualsAndHashCode\n@ToString\n@Builder\n@AllArgsConstructor\npublic class StartupCompletedEvent {\n\n    @Getter\n    @NonNull\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "    private String mainVersion;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.github.xxbeanxx.webservice.jaxb;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlRootElement;\nimport javax.xml.bind.annotation.XmlType;\n\n@XmlAccessorType(XmlAccessType.FIELD)\n<｜fim▁hole｜>@XmlRootElement(name = \"TestRequest\")\npublic class TestRequest {\n\n    @XmlElement(name = \"Request\", required = true)\n    protected String request;\n\n    /**\n     * Gets the value of the request property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n    public String getRequest() {\n        return request;\n    }\n\n    /**\n     * Sets the value of the request property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n    public void setRequest(String value) {\n        this.request = value;\n    }\n\n}<｜fim▁end｜>",
    "response": "@XmlType(name = \"\", propOrder = {\n    \"request\"\n})\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\nimport javax.inject.Qualifier;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.RetentionPolicy;\n\n@Qualifier\n@Target({ ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER })\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Credit {\n}<｜fim▁end｜>",
    "response": "package org.jboss.as.quickstarts.payment.qualifiers;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.elasticsearch.search.aggregations.metrics;\n\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.SortedNumericDocValuesField;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.RandomIndexWriter;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.MatchAllDocsQuery;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.util.NumericUtils;\n<｜fim▁hole｜>import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStats;\nimport org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStatsAggregationBuilder;\nimport org.elasticsearch.search.aggregations.metrics.stats.extended.InternalExtendedStats;\n\nimport java.io.IOException;\nimport java.util.function.Consumer;\n\npublic class ExtendedStatsAggregatorTests extends AggregatorTestCase {\n    private static final double TOLERANCE = 1e-5;\n\n    public void testEmpty() throws IOException {\n        MappedFieldType ft =\n            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG);\n        ft.setName(\"field\");\n        testCase(ft, iw -> {},\n            stats -> {\n                assertEquals(0d, stats.getCount(), 0);\n                assertEquals(0d, stats.getSum(), 0);\n                assertEquals(Float.NaN, stats.getAvg(), 0);\n                assertEquals(Double.POSITIVE_INFINITY, stats.getMin(), 0);\n                assertEquals(Double.NEGATIVE_INFINITY, stats.getMax(), 0);\n                assertEquals(Double.NaN, stats.getVariance(), 0);\n                assertEquals(Double.NaN, stats.getStdDeviation(), 0);\n                assertEquals(0d, stats.getSumOfSquares(), 0);\n            }\n        );\n    }\n\n    public void testRandomDoubles() throws IOException {\n        MappedFieldType ft =\n            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.DOUBLE);\n        ft.setName(\"field\");\n        final ExtendedSimpleStatsAggregator expected = new ExtendedSimpleStatsAggregator();\n        testCase(ft,\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        double value = randomDoubleBetween(-100d, 100d, true);\n                        long valueAsLong = NumericUtils.doubleToSortableLong(value);\n                        doc.add(new SortedNumericDocValuesField(\"field\", valueAsLong));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertEquals(expected.sumOfSqrs, stats.getSumOfSquares(), TOLERANCE);\n                assertEquals(expected.stdDev(), stats.getStdDeviation(), TOLERANCE);\n                assertEquals(expected.variance(), stats.getVariance(), TOLERANCE);\n                assertEquals(expected.stdDevBound(ExtendedStats.Bounds.LOWER, stats.getSigma()),\n                    stats.getStdDeviationBound(ExtendedStats.Bounds.LOWER), TOLERANCE);\n                assertEquals(expected.stdDevBound(ExtendedStats.Bounds.UPPER, stats.getSigma()),\n                    stats.getStdDeviationBound(ExtendedStats.Bounds.UPPER), TOLERANCE);\n            }\n        );\n    }\n\n    public void testRandomLongs() throws IOException {\n        MappedFieldType ft =\n            new NumberFieldMapper.NumberFieldType(NumberFieldMapper.NumberType.LONG);\n        ft.setName(\"field\");\n        final ExtendedSimpleStatsAggregator expected = new ExtendedSimpleStatsAggregator();\n        testCase(ft,\n            iw -> {\n                int numDocs = randomIntBetween(10, 50);\n                for (int i = 0; i < numDocs; i++) {\n                    Document doc = new Document();\n                    int numValues = randomIntBetween(1, 5);\n                    for (int j = 0; j < numValues; j++) {\n                        long value = randomIntBetween(-100, 100);\n                        doc.add(new SortedNumericDocValuesField(\"field\", value));\n                        expected.add(value);\n                    }\n                    iw.addDocument(doc);\n                }\n            },\n            stats -> {\n                assertEquals(expected.count, stats.getCount(), 0);\n                assertEquals(expected.sum, stats.getSum(), TOLERANCE);\n                assertEquals(expected.min, stats.getMin(), 0);\n                assertEquals(expected.max, stats.getMax(), 0);\n                assertEquals(expected.sum / expected.count, stats.getAvg(), TOLERANCE);\n                assertEquals(expected.sumOfSqrs, stats.getSumOfSquares(), TOLERANCE);\n                assertEquals(expected.stdDev(), stats.getStdDeviation(), TOLERANCE);\n                assertEquals(expected.variance(), stats.getVariance(), TOLERANCE);\n                assertEquals(expected.stdDevBound(ExtendedStats.Bounds.LOWER, stats.getSigma()),\n                    stats.getStdDeviationBound(ExtendedStats.Bounds.LOWER), TOLERANCE);\n                assertEquals(expected.stdDevBound(ExtendedStats.Bounds.UPPER, stats.getSigma()),\n                    stats.getStdDeviationBound(ExtendedStats.Bounds.UPPER), TOLERANCE);\n            }\n        );\n    }\n\n    public void testCase(MappedFieldType ft,\n                         CheckedConsumer<RandomIndexWriter, IOException> buildIndex,\n                         Consumer<InternalExtendedStats> verify) throws IOException {\n        try (Directory directory = newDirectory();\n             RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {\n            buildIndex.accept(indexWriter);\n            try (IndexReader reader = indexWriter.getReader()) {\n                IndexSearcher searcher = new IndexSearcher(reader);\n                ExtendedStatsAggregationBuilder aggBuilder = new ExtendedStatsAggregationBuilder(\"my_agg\")\n                    .field(\"field\")\n                    .sigma(randomDoubleBetween(0, 10, true));\n                InternalExtendedStats stats = search(searcher, new MatchAllDocsQuery(), aggBuilder, ft);\n                verify.accept(stats);\n            }\n        }\n    }\n\n    static class ExtendedSimpleStatsAggregator extends StatsAggregatorTests.SimpleStatsAggregator {\n        double sumOfSqrs = 0;\n\n        void add(double value) {\n            super.add(value);\n            sumOfSqrs += (value * value);\n        }\n\n        double stdDev() {\n            return Math.sqrt(variance());\n        }\n\n        double stdDevBound(ExtendedStats.Bounds bounds, double sigma) {\n            if (bounds == ExtendedStats.Bounds.UPPER) {\n                return (sum / count) + (Math.sqrt(variance()) * sigma);\n            } else {\n                return (sum / count) - (Math.sqrt(variance()) * sigma);\n            }\n        }\n\n        double variance() {\n            return (sumOfSqrs - ((sum * sum) / count)) / count;\n        }\n    }\n}<｜fim▁end｜>",
    "response": "import org.elasticsearch.common.CheckedConsumer;\nimport org.elasticsearch.index.mapper.MappedFieldType;\nimport org.elasticsearch.index.mapper.NumberFieldMapper;\nimport org.elasticsearch.search.aggregations.AggregatorTestCase;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.percero.amqp.handlers;\n\nimport java.util.List;\n\nimport org.springframework.stereotype.Component;\n\nimport com.percero.agents.sync.vo.BaseDataObject;\nimport com.percero.agents.sync.vo.FindByExampleRequest;\nimport com.percero.agents.sync.vo.FindByExampleResponse;\nimport com.percero.agents.sync.vo.SyncRequest;\nimport com.percero.agents.sync.vo.SyncResponse;\n\n@Component\npublic class FindByExampleHandler extends SyncMessageHandler {\n\n    public static final String FIND_BY_EXAMPLE = \"findByExample\";\n\n    public FindByExampleHandler() {\n        routingKey = FIND_BY_EXAMPLE;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public SyncResponse handleMessage(SyncRequest request, String replyTo) throws Exception {\n        FindByExampleResponse response = new FindByExampleResponse();\n        FindByExampleRequest findByExampleRequest = (FindByExampleRequest) request;\n        Object result = syncAgentService.findByExample(findByExampleRequest.getTheObject(), null, findByExampleRequest.getClientId());\n        response = new FindByExampleResponse();\n        ((FindByExampleResponse)response).setResult((List<BaseDataObject>)result);\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "\n        return response;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package eu.verdelhan.bitraac.indicators;\n\nimport eu.verdelhan.bitraac.data.Period;\nimport java.math.BigDecimal;\nimport org.apache.commons.lang3.Validate;\n\npublic class TrueRange implements Indicator<Double> {\n\n    private Period previousPeriod;\n    private Period currentPeriod;\n\n    /**\n     * @param period the period for which we want the true range\n     */\n    public TrueRange(Period period) {\n        this(null, period);\n    }\n\n    /**\n     * @param previousPeriod the previous period\n     * @param currentPeriod the current period for which we want the true range\n     */\n    public TrueRange(Period previousPeriod, Period currentPeriod) {\n        Validate.notNull(currentPeriod, \"Current period can't be null\");\n        this.previousPeriod = previousPeriod;\n        this.currentPeriod = currentPeriod;\n    }\n\n    /**\n     * @return the true range for the current period\n     */\n    @Override\n    public Double execute() {\n        //  Current extrema prices\n        BigDecimal currentHighPrice = currentPeriod.getHigh().getPrice().getAmount();\n        BigDecimal currentLowPrice = currentPeriod.getLow().getPrice().getAmount();\n\n        double trueRange;\n        if (previousPeriod == null) {\n            // No previous period\n            trueRange = currentHighPrice.subtract(currentLowPrice).doubleValue();\n        } else {\n            // Using the previous close price\n            BigDecimal previousClosePrice = previousPeriod.getLast().getPrice().getAmount();\n            BigDecimal trueRangeMethod1 = currentHighPrice.subtract(currentLowPrice);\n            BigDecimal trueRangeMethod2 = currentHighPrice.subtract(previousClosePrice).abs();\n<｜fim▁hole｜>            trueRange = trueRangeMethod1.max(trueRangeMethod2).max(trueRangeMethod3).doubleValue();\n        }\n        return trueRange;\n    }\n}<｜fim▁end｜>",
    "response": "            BigDecimal trueRangeMethod3 = currentLowPrice.subtract(previousClosePrice).abs();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ims.RefMan.forms.linkreportnotetotemplate;\n\nimport java.io.Serializable;\n\npublic final class AccessLogic extends BaseAccessLogic implements Serializable\n{\n    private static final long serialVersionUID = 1L;\n\n    public boolean isAccessible()\n    {\n        if(!super.isAccessible())\n            return false;\n\n        // TODO: Add your conditions here.\n        return true;\n    }\n    public boolean isReadOnly()\n    {\n<｜fim▁hole｜>\n        // TODO: Add your conditions here.\n        return false;\n    }\n}<｜fim▁end｜>",
    "response": "        if(super.isReadOnly())\n            return true;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.rstudio.studio.client.workbench.exportplot;\n\nimport com.google.gwt.aria.client.Roles;\nimport org.rstudio.core.client.files.FileSystemContext;\nimport org.rstudio.core.client.files.FileSystemItem;\nimport org.rstudio.core.client.widget.CanFocus;\nimport org.rstudio.core.client.widget.FormLabel;\nimport org.rstudio.core.client.widget.LayoutGrid;\nimport org.rstudio.core.client.widget.ProgressIndicator;\nimport org.rstudio.core.client.widget.ProgressOperationWithInput;\nimport org.rstudio.core.client.widget.ThemedButton;\nimport org.rstudio.studio.client.RStudioGinjector;\nimport org.rstudio.studio.client.common.FileDialogs;\nimport org.rstudio.studio.client.workbench.exportplot.model.SavePlotAsImageContext;\nimport org.rstudio.studio.client.workbench.exportplot.model.SavePlotAsImageFormat;\n\nimport com.google.gwt.core.client.JsArray;\nimport com.google.gwt.dom.client.Style.Unit;\nimport com.google.gwt.event.dom.client.ClickEvent;\nimport com.google.gwt.event.dom.client.ClickHandler;\nimport com.google.gwt.user.client.ui.Composite;\nimport com.google.gwt.user.client.ui.ListBox;\nimport com.google.gwt.user.client.ui.TextBox;\n\npublic class SavePlotAsImageTargetEditor extends Composite implements CanFocus\n{\n   public SavePlotAsImageTargetEditor(String defaultFormat,\n                                 SavePlotAsImageContext context)\n   {\n      context_ = context;\n\n      ExportPlotResources.Styles styles = ExportPlotResources.INSTANCE.styles();\n\n      LayoutGrid grid = new LayoutGrid(3, 2);\n      grid.setCellPadding(0);\n\n      imageFormatListBox_ = new ListBox();\n      FormLabel imageFormatLabel = new FormLabel(\"Image format:\", imageFormatListBox_);\n      imageFormatLabel.setStylePrimaryName(styles.exportTargetLabel());\n\n      grid.setWidget(0, 0, imageFormatLabel);\n      JsArray<SavePlotAsImageFormat> formats = context.getFormats();\n      int selectedIndex = 0;\n      for (int i=0; i<formats.length(); i++)\n      {\n         SavePlotAsImageFormat format = formats.get(i);\n         if (format.getExtension() == defaultFormat)\n            selectedIndex = i;\n         imageFormatListBox_.addItem(format.getName(), format.getExtension());\n      }\n      imageFormatListBox_.setSelectedIndex(selectedIndex);\n      imageFormatListBox_.setStylePrimaryName(styles.imageFormatListBox());\n<｜fim▁hole｜>      directoryButton.getElement().getStyle().setMarginLeft(-2, Unit.PX);\n      grid.setWidget(1, 0, directoryButton);\n      directoryButton.addClickHandler(new ClickHandler() {\n         @Override\n         public void onClick(ClickEvent event)\n         {\n            fileDialogs_.chooseFolder(\n               \"Choose Directory\",\n               fileSystemContext_,\n               FileSystemItem.createDir(directoryTextBox_.getText().trim()),\n               new ProgressOperationWithInput<FileSystemItem>() {\n\n                 public void execute(FileSystemItem input,\n                                     ProgressIndicator indicator)\n                 {\n                    if (input == null)\n                       return;\n\n                    indicator.onCompleted();\n\n                    // update default\n                    ExportPlotUtils.setDefaultSaveDirectory(input);\n\n                    // set display\n                    setDirectory(input);  \n                 }          \n               });\n         }\n      });\n\n      directoryTextBox_ = new TextBox();\n      directoryTextBox_.setReadOnly(true);\n      Roles.getTextboxRole().setAriaLabelProperty(directoryTextBox_.getElement(), \"Selected Directory\");\n\n      setDirectory(context_.getDirectory());\n      directoryTextBox_.setStylePrimaryName(styles.directoryTextBox());\n      grid.setWidget(1, 1, directoryTextBox_);\n\n      fileNameTextBox_ = new TextBox();\n      fileNameTextBox_.setText(context.getUniqueFileStem());\n      fileNameTextBox_.setStylePrimaryName(styles.fileNameTextBox());\n      FormLabel fileNameLabel = new FormLabel(\"File name:\", fileNameTextBox_);\n      fileNameLabel.setStylePrimaryName(styles.fileNameLabel());\n      grid.setWidget(2, 0, fileNameLabel);\n      grid.setWidget(2, 1, fileNameTextBox_);\n\n      initWidget(grid);\n   }\n\n   public void focus()\n   {\n      fileNameTextBox_.setFocus(true);\n      fileNameTextBox_.selectAll();\n   }\n\n   public String getFormat()\n   {\n      return imageFormatListBox_.getValue(\n                                 imageFormatListBox_.getSelectedIndex());\n   }\n\n   public FileSystemItem getTargetPath()\n   {\n      // first determine format extension\n      String ext = \".\" + imageFormatListBox_.getValue(\n                                       imageFormatListBox_.getSelectedIndex());\n\n      return ExportPlotUtils.composeTargetPath(ext, fileNameTextBox_, directory_);  \n   }\n\n   public FileSystemItem getTargetDirectory()\n   {\n      return directory_;\n   }\n\n   private void setDirectory(FileSystemItem directory)\n   {\n      // set directory\n      directory_ = directory;\n\n      // set label\n      String dirLabel = ExportPlotUtils.shortDirectoryName(directory, 250);\n      directoryTextBox_.setText(dirLabel);\n   }\n\n   private ListBox imageFormatListBox_;\n   private TextBox fileNameTextBox_;\n   private FileSystemItem directory_;\n   private TextBox directoryTextBox_;\n\n   private final SavePlotAsImageContext context_;\n\n   private final FileSystemContext fileSystemContext_ =\n      RStudioGinjector.INSTANCE.getRemoteFileSystemContext();\n\n   private final FileDialogs fileDialogs_ = \n      RStudioGinjector.INSTANCE.getFileDialogs();\n}<｜fim▁end｜>",
    "response": "      grid.setWidget(0, 1, imageFormatListBox_);\n\n      ThemedButton directoryButton = new ThemedButton(\"Directory...\");\n      directoryButton.setStylePrimaryName(styles.directoryButton());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.graalvm.compiler.jtt.bytecode;\n\nimport org.junit.Test;\n\nimport org.graalvm.compiler.jtt.JTTTest;\n\npublic class BC_ifgt extends JTTTest {\n\n    public static int test(int a) {\n        int n = 0;\n        if (a > 0) {\n            n += 1;\n        } else {\n            n -= 1;\n        }\n        if (a <= 0) {\n            n -= 1;\n        } else {\n            n += 1;\n        }\n        return n;\n<｜fim▁hole｜>    @Test\n    public void run0() throws Throwable {\n        runTest(\"test\", 0);\n    }\n\n    @Test\n    public void run1() throws Throwable {\n        runTest(\"test\", 1);\n    }\n\n    @Test\n    public void run2() throws Throwable {\n        runTest(\"test\", -1);\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jpc.emulator.execution.opcodes.vm;\n\n<｜fim▁hole｜>import static org.jpc.emulator.processor.Processor.*;\n\npublic class jl_Jb extends Executable\n{\n    final int jmp;\n    final int blockLength;\n    final int instructionLength;\n\n    public jl_Jb(int blockStart, int eip, int prefices, PeekableInputStream input)\n    {\n        super(blockStart, eip);\n        jmp = Modrm.Jb(input);\n        instructionLength = (int)input.getAddress()-eip;\n        blockLength = eip-blockStart+instructionLength;\n    }\n\n    public Branch execute(Processor cpu)\n    {\n        if (cpu.sf() != cpu.of())\n            {\n            int target = (cpu.eip + jmp + blockLength) & 0xffff;\n            cpu.cs.checkAddress(target);\n            cpu.eip = target;\n            return Branch.T1;\n        }\n        else\n        {\n            cpu.eip += blockLength;\n            return Branch.T2;\n        }\n    }\n\n    public boolean isBranch()\n    {\n        return true;\n    }\n\n    public String toString()\n    {\n        return this.getClass().getName();\n    }\n}<｜fim▁end｜>",
    "response": "import org.jpc.emulator.execution.*;\nimport org.jpc.emulator.execution.decoder.*;\nimport org.jpc.emulator.processor.*;\nimport org.jpc.emulator.processor.fpu64.*;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.paypal.selion.android.sample;\n\nimport org.testng.Assert;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\n\nimport com.paypal.selion.annotations.MobileTest;\nimport com.paypal.selion.platform.mobile.android.UiButton;\nimport com.paypal.selion.platform.mobile.android.UiObject;\nimport com.paypal.selion.platform.mobile.android.UiTextView;\nimport com.paypal.selion.platform.utilities.WebDriverWaitUtils;\n\npublic class AppiumAndroidCheckBoxSeekBarTest {\n\n    private static final String pageObjectsAppPath = \"src/test/resources/apps/PageObjectsDemoApp.apk\";\n    private static final String deviceName = \"android:19\";\n<｜fim▁hole｜>    private final String textViewLocator = \"com.paypal.selion.pageobjectsdemoapp:id/seekBar_textview\";\n    // Check box\n    private final String checkBoxAndroidLocator = \"com.paypal.selion.pageobjectsdemoapp:id/android_checkbox\";\n    private final String checkBoxiOSLocator = \"com.paypal.selion.pageobjectsdemoapp:id/ios_checkbox\";\n    private final String valueTextViewLocator = \"com.paypal.selion.pageobjectsdemoapp:id/checkbox_textview\";\n\n    private UiButton menuButton = null;\n    private UiObject seekBar = null;\n    private UiTextView seekBarTextView = null;\n    private UiTextView checkBoxTextView = null;\n    private UiObject iosCheckBox = null;\n    private UiObject androidCheckBox = null;\n\n    @BeforeClass\n    public void initElements() {\n        menuButton = new UiButton(actionButtonLocator);\n        seekBar = new UiObject(seekBarLocator);\n        seekBarTextView = new UiTextView(textViewLocator);\n        iosCheckBox = new UiObject(checkBoxiOSLocator);\n        androidCheckBox = new UiObject(checkBoxAndroidLocator);\n        checkBoxTextView = new UiTextView(valueTextViewLocator);\n    }\n\n    @Test\n    @MobileTest(appPath = pageObjectsAppPath, device = deviceName)\n    public void testCheckBox() throws InterruptedException {\n        WebDriverWaitUtils.waitUntilElementIsVisible(actionButtonLocator);\n        menuButton.click(longPressButtonLocator);\n        WebDriverWaitUtils.waitUntilElementIsVisible(longPressButtonLocator);\n        menuButton.click(androidCheckBox);\n        androidCheckBox.click();\n        Assert.assertEquals(checkBoxTextView.getText(), \"Android\");\n        iosCheckBox.click();\n        Assert.assertEquals(checkBoxTextView.getText(), \"iOS\");\n        iosCheckBox.click();\n    }\n\n    @Test\n    @MobileTest(appPath = pageObjectsAppPath, device = deviceName)\n    public void testSeekBar() throws InterruptedException {\n        WebDriverWaitUtils.waitUntilElementIsVisible(actionButtonLocator);\n        menuButton.click();\n        WebDriverWaitUtils.waitUntilElementIsVisible(longPressButtonLocator);\n        menuButton.click(seekBar);\n        seekBar.swipeRight();\n        Assert.assertEquals(seekBarTextView.getText(), \"Value: 100\", \"Seek Bar swipe right value does not match\");\n        seekBar = new UiObject(seekBarLocator);\n        seekBar.swipeLeft();\n        Assert.assertEquals(seekBarTextView.getText(), \"Value: 0\", \"Seek Bar swipe right value does not match\");\n    }\n\n}<｜fim▁end｜>",
    "response": "    private final String actionButtonLocator = \"com.paypal.selion.pageobjectsdemoapp:id/action_button\";\n    private final String seekBarLocator = \"com.paypal.selion.pageobjectsdemoapp:id/seekBar\";\n    private final String longPressButtonLocator = \"com.paypal.selion.pageobjectsdemoapp:id/long_press_button\";\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.onosproject.p4runtime.ctl;\n\nimport com.google.common.testing.EqualsTester;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.onlab.util.ImmutableByteSequence;\nimport org.onosproject.net.DeviceId;\nimport org.onosproject.net.pi.runtime.PiControlMetadata;\nimport org.onosproject.net.pi.model.PiControlMetadataId;\nimport org.onosproject.net.pi.runtime.PiPacketOperation;\n\nimport static org.onlab.util.ImmutableByteSequence.copyFrom;\nimport static org.onlab.util.ImmutableByteSequence.fit;\nimport static org.onosproject.net.pi.model.PiPacketOperationType.PACKET_OUT;\nimport static org.onosproject.net.pi.model.PiPacketOperationType.PACKET_IN;\n\npublic class DefaultPacketInTest {\n\n    private static final int DEFAULT_ORIGINAL_VALUE = 255;\n    private static final int DEFAULT_BIT_WIDTH = 9;\n\n    private final DeviceId deviceId = DeviceId.deviceId(\"dummy:1\");\n    private final DeviceId sameDeviceId = DeviceId.deviceId(\"dummy:1\");\n    private final DeviceId deviceId2 = DeviceId.deviceId(\"dummy:2\");\n    private final DeviceId nullDeviceId = null;\n\n    private PiPacketOperation packetOperation;\n    private PiPacketOperation packetOperation2;\n    private PiPacketOperation nullPacketOperation = null;\n\n    private DefaultPacketIn packetIn;\n    private DefaultPacketIn sameAsPacketIn;\n    private DefaultPacketIn packetIn2;\n    private DefaultPacketIn packetIn3;\n\n    /**\n     * Setup method for packetOperation and packetOperation2.\n     * @throws ImmutableByteSequence.ByteSequenceTrimException if byte sequence cannot be trimmed\n     */\n    @Before\n    public void setup() throws ImmutableByteSequence.ByteSequenceTrimException {\n\n        packetOperation = PiPacketOperation.builder()\n                .forDevice(deviceId)\n                .withData(ImmutableByteSequence.ofOnes(512))\n                .withType(PACKET_OUT)\n                .withMetadata(PiControlMetadata.builder()\n                                      .withId(PiControlMetadataId.of(\"egress_port\"))\n                                      .withValue(fit(copyFrom(DEFAULT_ORIGINAL_VALUE), DEFAULT_BIT_WIDTH))\n                                      .build())\n                .build();\n\n        packetOperation2 = PiPacketOperation.builder()\n                .forDevice(deviceId2)\n                .withData(ImmutableByteSequence.ofOnes(512))\n                .withType(PACKET_IN)\n                .withMetadata(PiControlMetadata.builder()\n                                      .withId(PiControlMetadataId.of(\"ingress_port\"))\n                                      .withValue(fit(copyFrom(DEFAULT_ORIGINAL_VALUE), DEFAULT_BIT_WIDTH))\n                                      .build())\n                .build();\n\n        packetIn = new DefaultPacketIn(deviceId, packetOperation);\n        sameAsPacketIn = new DefaultPacketIn(sameDeviceId, packetOperation);\n        packetIn2 = new DefaultPacketIn(deviceId2, packetOperation);\n        packetIn3 = new DefaultPacketIn(deviceId, packetOperation2);\n    }\n\n    /**\n     * tearDown method for packetOperation and packetOperation2.\n     */\n    @After\n    public void tearDown() {\n        packetOperation = null;\n        packetOperation2 = null;\n\n        packetIn = null;\n        sameAsPacketIn = null;\n        packetIn2 = null;\n        packetIn3 = null;\n    }\n\n    /**\n     * Tests constructor with null object as a DeviceId parameter.\n     */\n    @Test(expected = NullPointerException.class)\n    public void testConstructorWithNullDeviceId() {\n\n        new DefaultPacketIn(nullDeviceId, packetOperation);\n    }\n\n    /**\n     * Tests constructor with null object as PacketOperation parameter.\n     */\n    @Test(expected = NullPointerException.class)\n    public void testConstructorWithNullPacketOperation() {\n\n        new DefaultPacketIn(deviceId, nullPacketOperation);\n    }\n\n    /**\n     * Test for deviceId method.\n     */\n    @Test\n    public void deviceId() {\n        new EqualsTester()\n                .addEqualityGroup(deviceId, packetIn.deviceId(), sameAsPacketIn.deviceId())\n                .addEqualityGroup(packetIn2)\n                .testEquals();\n    }\n\n    /**\n     * Test for packetOperation method.\n     */\n    @Test\n    public void packetOperation() {\n        new EqualsTester()\n                .addEqualityGroup(packetOperation, packetIn.packetOperation())\n                .addEqualityGroup(packetIn3.packetOperation())\n                .testEquals();\n    }\n\n    /**\n     * Checks the operation of equals(), hashCode() and toString() methods.\n     */\n    @Test\n    public void testEquals() {\n        new EqualsTester()\n                .addEqualityGroup(packetIn, sameAsPacketIn)\n                .addEqualityGroup(packetIn2)\n                .addEqualityGroup(packetIn3)\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "                .testEquals();\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package in.co.tworoads.hiring.location.restaurant;\n\nimport java.util.Map;\n\nimport in.co.tworoads.hiring.location.restaurant.menu.MenuItemInterface;\n\npublic interface RestaurantInterface {\n\n    public Integer getID();\n\n<｜fim▁hole｜>    public MenuItemInterface getMenuItem(String item);\n\n    public void add(MenuItemInterface menuItem);\n\n    public void processOrder(String menuItem, Integer qty);\n\n}<｜fim▁end｜>",
    "response": "    public String getName();\n\n    public Map<String,MenuItemInterface> getMenu();\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.sis.internal.feature;\n\nimport java.util.Set;\nimport java.util.Objects;\nimport org.opengis.geometry.Boundary;\nimport org.opengis.geometry.DirectPosition;\nimport org.opengis.geometry.Envelope;\nimport org.opengis.geometry.Geometry;\nimport org.opengis.geometry.Precision;\nimport org.opengis.geometry.TransfiniteSet;\nimport org.opengis.geometry.complex.Complex;\nimport org.opengis.referencing.crs.CoordinateReferenceSystem;\nimport org.opengis.referencing.operation.MathTransform;\n<｜fim▁hole｜>    public final Object geometry;\n\n    /**\n     * Geometry bounding box, together with its coordinate reference system.\n     */\n    private final Envelope envelope;\n\n    /**\n     * Creates a new geometry object.\n     *\n     * @param  geometry  the JTS or ESRI geometric object.\n     * @param  envelope  geometry bounding box, together with its coordinate reference system.\n     */\n    public GeometryWrapper(final Object geometry, final Envelope envelope) {\n        this.geometry = geometry;\n        this.envelope = envelope;\n    }\n\n    /**\n     * Returns the geometry CRS, which is taken from the envelope CRS.\n     *\n     * @return the geometry CRS.\n     */\n    @Override\n    public CoordinateReferenceSystem getCoordinateReferenceSystem() {\n        return envelope.getCoordinateReferenceSystem();\n    }\n\n    /**\n     * Returns the envelope specified at construction time.\n     */\n    @Override public Envelope getEnvelope() {\n        return envelope;\n    }\n\n    @Override public Precision      getPrecision()                            {throw new UnsupportedOperationException();}\n    @Override public Geometry       getMbRegion()                             {throw new UnsupportedOperationException();}\n    @Override public DirectPosition getRepresentativePoint()                  {throw new UnsupportedOperationException();}\n    @Override public Boundary       getBoundary()                             {throw new UnsupportedOperationException();}\n    @Override public Complex        getClosure()                              {throw new UnsupportedOperationException();}\n    @Override public boolean        isSimple()                                {throw new UnsupportedOperationException();}\n    @Override public boolean        isCycle()                                 {throw new UnsupportedOperationException();}\n    @Override public double         distance(Geometry geometry)               {throw new UnsupportedOperationException();}\n    @Override public int            getDimension(DirectPosition point)        {throw new UnsupportedOperationException();}\n    @Override public int            getCoordinateDimension()                  {throw new UnsupportedOperationException();}\n    @Override public Set<Complex>   getMaximalComplex()                       {throw new UnsupportedOperationException();}\n    @Override public DirectPosition getCentroid()                             {throw new UnsupportedOperationException();}\n    @Override public Geometry       getConvexHull()                           {throw new UnsupportedOperationException();}\n    @Override public Geometry       getBuffer(double distance)                {throw new UnsupportedOperationException();}\n    @Override public boolean        isMutable()                               {throw new UnsupportedOperationException();}\n    @Override public Geometry       toImmutable()                             {throw new UnsupportedOperationException();}\n    @Override public Geometry       clone() throws CloneNotSupportedException {throw new CloneNotSupportedException();}\n    @Override public boolean        contains(TransfiniteSet pointSet)         {throw new UnsupportedOperationException();}\n    @Override public boolean        contains(DirectPosition point)            {throw new UnsupportedOperationException();}\n    @Override public boolean        intersects(TransfiniteSet pointSet)       {throw new UnsupportedOperationException();}\n    @Override public boolean        equals(TransfiniteSet pointSet)           {throw new UnsupportedOperationException();}\n    @Override public TransfiniteSet union(TransfiniteSet pointSet)            {throw new UnsupportedOperationException();}\n    @Override public TransfiniteSet intersection(TransfiniteSet pointSet)     {throw new UnsupportedOperationException();}\n    @Override public TransfiniteSet difference(TransfiniteSet pointSet)       {throw new UnsupportedOperationException();}\n    @Override public TransfiniteSet symmetricDifference(TransfiniteSet ps)    {throw new UnsupportedOperationException();}\n    @Override public Geometry       transform(CoordinateReferenceSystem crs)  {throw new UnsupportedOperationException();}\n    @Override public Geometry       transform(CoordinateReferenceSystem crs, MathTransform tr) {throw new UnsupportedOperationException();}\n\n    @Override\n    public boolean equals(final Object obj) {\n        return (obj instanceof GeometryWrapper) && Objects.equals(((GeometryWrapper) obj).geometry, geometry);\n    }\n\n    @Override\n    public int hashCode() {\n        return ~Objects.hashCode(geometry);\n    }\n\n    @Override\n    public String toString() {\n        return String.valueOf(geometry);\n    }\n}<｜fim▁end｜>",
    "response": "\npublic final class GeometryWrapper implements Geometry {\n    /**\n     * The JTS or ESRI geometric object.\n     */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.mixare.plugin.arenasplash;\n\nimport org.mixare.plugin.arenasplash.service.ArenaSplashService;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.content.pm.ActivityInfo;\nimport android.os.Bundle;\n<｜fim▁hole｜>import android.view.Window;\nimport android.view.WindowManager;\n\npublic class ArenaSplashActivity extends Activity {\n\n    public final String resultType = \"Splashscreen\";\n    private static final int SPLASHTIME = 2000; //2 seconds\n    protected Handler exitHandler = null;\n    protected Runnable exitRunnable = null;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);\n        setContentView(R.layout.main);\n        // Runnable exiting the splash screen and launching the menu\n        exitRunnable = new Runnable() {\n            public void run() {\n                exitSplash();\n            }\n        };\n        // Run the exitRunnable in in _splashTime ms\n        exitHandler = new Handler();\n        exitHandler.postDelayed(exitRunnable, SPLASHTIME);\n    }\n\n    private void exitSplash() { \n        Intent intent = new Intent();\n        intent.putExtra(\"resultType\", resultType);\n        setResult(ArenaSplashService.ACTIVITY_REQUEST_CODE, intent);\n        finish();\n    }\n\n}<｜fim▁end｜>",
    "response": "import android.os.Handler;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.ccnx.ccn.test.profiles.context;\n\nimport java.io.File;\nimport java.util.ArrayList;\n\nimport junit.framework.Assert;\n\nimport org.ccnx.ccn.CCNHandle;\nimport org.ccnx.ccn.config.SystemConfiguration;\nimport org.ccnx.ccn.config.UserConfiguration;\nimport org.ccnx.ccn.impl.support.Log;\nimport org.ccnx.ccn.profiles.context.ServiceDiscoveryProfile;\nimport org.ccnx.ccn.protocol.ContentObject;\nimport org.ccnx.ccn.test.CCNTestBase;\nimport org.ccnx.ccn.utils.CreateUserData;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\npublic class ServiceKeyDiscoveryTestRepo {\n\n    public static final String PUBLISHED_SERVICE = \"PuffyPoodles\";\n    public static final String OTHER_PUBLISHED_SERVICE = \"FluffyKittens\";\n    public static final String NOT_A_SERVICE = \"NotAService\";\n\n    static CreateUserData serviceProviders = null;\n    public static final String USER_DIRECTORY = \"TestUsers\";\n    public static final String [] SERVICE_PROVIDERS = new String[]{\n        \"PoodleServer\", \"KittenServer\", \"Repository\", \"Server\"};\n\n    public static final int TEST_TIMEOUT = SystemConfiguration.MEDIUM_TIMEOUT;\n\n    public static String _testDir = \"./\";\n\n    @BeforeClass\n    public static void setUpBeforeClass() throws Exception {\n        if (null != System.getProperty(CCNTestBase.TEST_DIR))\n            _testDir = System.getProperty(CCNTestBase.TEST_DIR);\n        UserConfiguration.setPublishKeys(false);\n        serviceProviders = new CreateUserData(new File(_testDir + USER_DIRECTORY), SERVICE_PROVIDERS, SERVICE_PROVIDERS.length,\n                UserConfiguration.keystorePassword().toCharArray(), true);\n    }\n\n    @Test\n    public void testGetLocalServiceKeys() throws Exception {\n        Log.info(Log.FAC_TEST, \"Starting testGetLocalServiceKeys\");\n\n        CCNHandle server1Handle = serviceProviders.getHandleForUser(SERVICE_PROVIDERS[0]);\n        CCNHandle server2Handle = serviceProviders.getHandleForUser(SERVICE_PROVIDERS[1]);\n        CCNHandle server3Handle = serviceProviders.getHandleForUser(SERVICE_PROVIDERS[2]);\n        CCNHandle readerHandle = CCNHandle.getHandle(); // use default\n\n        ServiceDiscoveryProfile.publishLocalServiceKey(PUBLISHED_SERVICE, null, server1Handle.keyManager());\n\n        ArrayList<ContentObject> results = ServiceDiscoveryProfile.getLocalServiceKeys(PUBLISHED_SERVICE, \n                TEST_TIMEOUT, readerHandle);\n\n        printResults(results);\n        Assert.assertEquals(1, results.size());\n\n        // Expect to get nothing back.\n        results = ServiceDiscoveryProfile.getLocalServiceKeys(NOT_A_SERVICE, \n                TEST_TIMEOUT, readerHandle);\n\n        Assert.assertEquals(0, results.size());\n        System.out.println(\"Got no results for a nonexistent service.\");\n\n        ServiceDiscoveryProfile.publishLocalServiceKey(OTHER_PUBLISHED_SERVICE, null, server1Handle.keyManager());\n        results = ServiceDiscoveryProfile.getLocalServiceKeys(OTHER_PUBLISHED_SERVICE, \n                TEST_TIMEOUT, readerHandle);\n\n        printResults(results);\n        Assert.assertEquals(1, results.size());     \n\n        ServiceDiscoveryProfile.publishLocalServiceKey(PUBLISHED_SERVICE, null, server2Handle.keyManager());\n        ServiceDiscoveryProfile.publishLocalServiceKey(PUBLISHED_SERVICE, null, server3Handle.keyManager());\n\n        results = ServiceDiscoveryProfile.getLocalServiceKeys(PUBLISHED_SERVICE, \n                TEST_TIMEOUT, readerHandle);\n\n        printResults(results);\n        Assert.assertEquals(3, results.size());\n\n        Log.info(Log.FAC_TEST, \"Completed testGetLocalServiceKeys\");\n    }\n\n    @Test\n    public void testGetRepoKeys() throws Exception {\n        Log.info(Log.FAC_TEST, \"Starting testGetRepoKeys\");\n\n        CCNHandle readerHandle = CCNHandle.getHandle(); // use default\n\n        System.out.println(\"Retrieving \" + ServiceDiscoveryProfile.REPOSITORY_SERVICE_NAME + \" keys.\");\n        // we required the repo to be running merely so we can get its keys\n        ArrayList<ContentObject> results = \n            ServiceDiscoveryProfile.getLocalServiceKeys(ServiceDiscoveryProfile.REPOSITORY_SERVICE_NAME, \n                    TEST_TIMEOUT, readerHandle);\n        printResults(results);\n        Assert.assertEquals(1, results.size());     \n<｜fim▁hole｜>        Log.info(Log.FAC_TEST, \"Starting testGetCcndKeys\");\n\n        CCNHandle readerHandle = CCNHandle.getHandle(); // use default\n\n        System.out.println(\"Retrieving \" + ServiceDiscoveryProfile.CCND_SERVICE_NAME + \" keys.\");\n        ArrayList<ContentObject> results = \n            ServiceDiscoveryProfile.getLocalServiceKeys(ServiceDiscoveryProfile.CCND_SERVICE_NAME, \n                    TEST_TIMEOUT, readerHandle);\n\n        printResults(results);\n        Assert.assertEquals(1, results.size());\n\n        Log.info(Log.FAC_TEST, \"Completed testGetCcndKeys\");\n\n    }\n\n    public void printResults(ArrayList<ContentObject> results) {\n        if (null == results) \n            return;\n        if (0 == results.size()) {\n            System.out.println(\"No results found.\");\n            return;\n        }\n        System.out.println(\"Found \" + results.size() + \n                ((results.size() == 1) ? \" key\" : \" keys\") + \" for a local service of name \" + \n                ServiceDiscoveryProfile.getLocalServiceName(results.get(0).name()));\n        for (ContentObject result : results) {\n            System.out.println(\"Result: \" + result.name());\n        }\n    }\n}<｜fim▁end｜>",
    "response": "\n        Log.info(Log.FAC_TEST, \"Completed testGetRepoKeys\");\n    }\n\n    @Test\n    public void testGetCcndKeys() throws Exception {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.zyclonite.nassh.util;\n\nimport net.zyclonite.nassh.model.AuthSession;\nimport org.apache.logging.log4j.LogManager;\n<｜fim▁hole｜>import java.util.Map;\nimport java.util.Map.Entry;\nimport java.util.UUID;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class AuthSessionManager {\n\n    private static final Logger logger = LogManager.getLogger();\n    private final static Map<UUID, AuthSession> STORE = new ConcurrentHashMap<>();\n    private static long lastcheck = (new Date()).getTime();\n\n    public static AuthSession createSession(final int ttl) {\n        checkExpiration();\n        final AuthSession session = new AuthSession(ttl);\n        STORE.put(session.getId(), session);\n        return session;\n    }\n\n    public static AuthSession getSession(final UUID id) {\n        checkExpiration();\n        if ((id != null) && (STORE.containsKey(id))) {\n            final AuthSession session = STORE.get(id);\n            session.refresh();\n            return session;\n        } else {\n            return null;\n        }\n    }\n\n    public static void removeSession(final UUID id) {\n        STORE.remove(id);\n    }\n\n    private static void checkExpiration() {\n        final long now = (new Date()).getTime();\n        logger.debug(() -> now + \" \" + lastcheck);\n        if (lastcheck + (10 * 1000) > now) {\n            return;\n        }\n        for (final Entry<UUID, AuthSession> set : STORE.entrySet()) {\n            if (set.getValue().isValid(now)) {\n                final UUID key = set.getKey();\n                logger.debug(() -> \"Removed session \" + key);\n                removeSession(key);\n            }\n        }\n        lastcheck = now;\n    }\n}<｜fim▁end｜>",
    "response": "import org.apache.logging.log4j.Logger;\n\nimport java.util.Date;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.arjuna.dbplugins.tests.webservices.json;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Properties;\nimport static org.junit.Assert.*;\n\npublic class JSONWebServiceProperties\n{\n    public JSONWebServiceProperties(String jsonWebServicePropertiesFilename)\n    {\n        _jsonWebServiceProperties = new Properties();\n\n        try\n        {\n            FileReader jsonWebServiceFileReader = new FileReader(jsonWebServicePropertiesFilename);\n            _jsonWebServiceProperties.load(jsonWebServiceFileReader);\n            jsonWebServiceFileReader.close();\n            _loaded = true;\n        }\n        catch (IOException ioException)\n        {\n            _jsonWebServiceProperties = null;\n            _loaded = false;\n        }\n    }\n\n    public boolean isLoaded()\n    {\n        return _loaded;\n    }\n\n    public String getServiceURL()\n    {\n        if (_jsonWebServiceProperties != null)\n        {\n            String serviceURL = _jsonWebServiceProperties.getProperty(\"serviceurl\");\n\n            if (serviceURL != null)\n                return serviceURL;\n            else\n            {\n                fail(\"Failed to obtain \\\"serviceurl\\\" property\");\n                return null;\n            }\n        }\n        else\n        {\n            fail(\"Failed to obtain \\\"serviceurl\\\" property, no property file\");\n            return null;\n        }\n    }\n\n    public String getScheduleDelay()\n    {\n        if (_jsonWebServiceProperties != null)\n        {\n            String scheduleDelay = _jsonWebServiceProperties.getProperty(\"scheduledelay\");\n\n            if (scheduleDelay != null)\n                return scheduleDelay;\n<｜fim▁hole｜>        }\n        else\n        {\n            fail(\"Failed to obtain \\\"scheduledelay\\\" property, no property file\");\n            return null;\n        }\n    }\n\n    public String getSchedulePeriod()\n    {\n        if (_jsonWebServiceProperties != null)\n        {\n            String schedulePeriod = _jsonWebServiceProperties.getProperty(\"scheduleperiod\");\n\n            if (schedulePeriod != null)\n                return schedulePeriod;\n            else\n            {\n                fail(\"Failed to obtain \\\"scheduleperiod\\\" property\");\n                return null;\n            }\n        }\n        else\n        {\n            fail(\"Failed to obtain \\\"scheduleperiod\\\" property, no property file\");\n            return null;\n        }\n    }\n\n    public String getUserName()\n    {\n        if (_jsonWebServiceProperties != null)\n        {\n            String userName = _jsonWebServiceProperties.getProperty(\"username\");\n\n            if (userName != null)\n                return userName;\n            else\n            {\n                fail(\"Failed to obtain \\\"username\\\" property\");\n                return null;\n            }\n        }\n        else\n        {\n            fail(\"Failed to obtain \\\"username\\\" property, no property file\");\n            return null;\n        }\n    }\n\n    public String getPassword()\n    {\n        if (_jsonWebServiceProperties != null)\n        {\n            String password = _jsonWebServiceProperties.getProperty(\"password\");\n\n            if (password != null)\n                return password;\n            else\n            {\n                fail(\"Failed to obtain \\\"password\\\" property\");\n                return null;\n            }\n        }\n        else\n        {\n            fail(\"Failed to obtain \\\"password\\\" property, no property file\");\n            return null;\n        }\n    }\n\n    private boolean    _loaded;\n    private Properties _jsonWebServiceProperties = new Properties();\n}<｜fim▁end｜>",
    "response": "            else\n            {\n                fail(\"Failed to obtain \\\"scheduledelay\\\" property\");\n                return null;\n            }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package cn.jpush.tool;\n\nimport cn.jpush.main.AlarmClient;\nimport org.apache.log4j.Logger;\n\nimport java.io.UnsupportedEncodingException;\n\npublic class Alarm {\n    private static final Logger LOG = Logger.getLogger(Alarm.class);\n    /*\n     * codes for kind of alert\n     */\n    public static final int FAIL_MR = 41;\n    public static final int FAIL_CMD = 42;\n    public static final int MISSING_INPUT = 43;\n<｜fim▁hole｜>        AlarmClient client = new AlarmClient();\n        try {\n            client.sendAlarm(code, desc);\n            LOG.info(\"send alarm: code=\" + code + \",desc=\" + desc);\n        } catch (UnsupportedEncodingException e) {\n            LOG.error(\"UnsupportedEncodingException: \" + e.getMessage());\n        }\n    }\n}<｜fim▁end｜>",
    "response": "\n    public static void alarm(int code, String desc) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.gs.obevo.api.appdata;\n\nimport java.sql.Timestamp;\n\n<｜fim▁hole｜>import org.eclipse.collections.api.set.ImmutableSet;\nimport org.eclipse.collections.impl.factory.Sets;\n\npublic class DeployExecutionImpl implements DeployExecution {\n    private long id;\n    private DeployExecutionStatus status;\n    private final String schema;\n    private final Timestamp deployTime;\n    private final String executorId;\n    private final String toolVersion;\n    private final boolean init;\n    private final boolean rollback;\n    private final String requesterId;\n    private final String productVersion;\n    private final String reason;\n    private final ImmutableSet<? extends DeployExecutionAttribute> attributes;\n\n    public DeployExecutionImpl(String requesterId, String deployExecutorId, String schema, String toolVersion, Timestamp deployTime, boolean init, boolean rollback, String productVersion, String reason, ImmutableSet<? extends DeployExecutionAttribute> attributes) {\n        this.requesterId = requesterId;\n        this.executorId = deployExecutorId;\n        this.schema = schema;\n        this.toolVersion = toolVersion;\n        this.deployTime = deployTime;\n        this.init = init;\n        this.rollback = rollback;\n        this.productVersion = productVersion;\n        this.reason = reason;\n        this.attributes = attributes != null ? attributes : Sets.immutable.<DeployExecutionAttribute>empty();\n    }\n\n    @Override\n    public long getId() {\n        if (id == 0) {\n            throw new IllegalStateException(\"cannot get id without setting it first\");\n        }\n        return id;\n    }\n\n    public void setId(long id) {\n        if (this.id != 0) {\n            throw new IllegalStateException(\"id has already been set [value=\" + this.id + \"], cannot set it again\");\n        }\n        this.id = id;\n    }\n\n    @Override\n    public DeployExecutionStatus getStatus() {\n        return Validate.notNull(status, \"cannot get status field without setting it first\");\n    }\n\n    @Override\n    public void setStatus(DeployExecutionStatus status) {\n        this.status = status;\n    }\n\n    @Override\n    public Timestamp getDeployTime() {\n        return deployTime;\n    }\n\n    @Override\n    public String getExecutorId() {\n        return executorId;\n    }\n\n    @Override\n    public String getSchema() {\n        return schema;\n    }\n\n    @Override\n    public String getToolVersion() {\n        return toolVersion;\n    }\n\n    @Override\n    public boolean isInit() {\n        return init;\n    }\n\n    @Override\n    public boolean isRollback() {\n        return rollback;\n    }\n\n    @Override\n    public String getRequesterId() {\n        return requesterId;\n    }\n\n    @Override\n    public String getReason() {\n        return reason;\n    }\n\n    @Override\n    public String getProductVersion() {\n        return productVersion;\n    }\n\n    @Override\n    public ImmutableSet<DeployExecutionAttribute> getAttributes() {\n        return (ImmutableSet<DeployExecutionAttribute>) attributes;\n    }\n}<｜fim▁end｜>",
    "response": "import org.apache.commons.lang3.Validate;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.neuroph.core.transfer;\n\nimport java.io.Serializable;\nimport java.util.Properties;\n\nimport org.neuroph.util.TransferFunctionType;\n\npublic class Sgn extends TransferFunction implements Serializable {\n\n    /**\n     * The class fingerprint that is set to indicate serialization\n     * compatibility with a previous version of the class.\n     */ \n    private static final long serialVersionUID = 1L;\n\n    /**\n     *  y = 1, x > 0  \n     *  y = -1, x <= 0\n<｜fim▁hole｜>\n    public double getOutput(double net) {\n        if (net > 0)\n            return 1;\n        else\n            return -1;\n    }\n\n    /**\n     * Returns the properties of this function\n     * @return properties of this function\n     */ \n    public Properties getProperties() {\n        Properties properties = new java.util.Properties();\n        properties.setProperty(\"transferFunction\", TransferFunctionType.SGN.toString());\n        return properties;\n    }\n\n}<｜fim▁end｜>",
    "response": "     */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.panda_lang.panda.utilities.commons;\n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nclass ObjectUtilsTest {\n\n    private static final Object OBJECT = new Object();\n\n<｜fim▁hole｜>    }\n\n    @Test\n    public void testAreNull() {\n        Assertions.assertFalse(ObjectUtils.areNull());\n        Assertions.assertFalse(ObjectUtils.areNull(OBJECT, OBJECT, OBJECT));\n        Assertions.assertFalse(ObjectUtils.areNull(OBJECT, null, OBJECT));\n\n        Assertions.assertTrue(ObjectUtils.areNull(null, null, null));\n    }\n\n    @Test\n    public void testEqualsOneOf() {\n        Assertions.assertTrue(ObjectUtils.equalsOneOf(\"value\", OBJECT, \"value\", OBJECT));\n        Assertions.assertFalse(ObjectUtils.equalsOneOf(\"value\", OBJECT, OBJECT, OBJECT));\n    }\n\n}<｜fim▁end｜>",
    "response": "    @Test\n    @SuppressWarnings(\"ConstantConditions\")\n    public void testIsNotNull() {\n        Assertions.assertTrue(ObjectUtils.isNotNull(OBJECT));\n        Assertions.assertFalse(ObjectUtils.isNotNull(null));\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.rapidminer.gui.tools;\n\npublic enum IconSize {\n<｜fim▁hole｜>\n    private int size;\n\n    private IconSize(int size) {\n        this.size = size;\n    }\n\n    public int getSize() {\n        return size;\n    }\n}<｜fim▁end｜>",
    "response": "\n    SMALL(16), LARGE(24);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.renjin.gnur.api;\n\n@SuppressWarnings(\"unused\")\npublic final class Startup {\n\n  private Startup() { }\n\n  // void R_CleanUp (SA_TYPE, int, int)\n\n  public static void R_StartUp() {\n    throw new UnimplementedGnuApiMethod(\"R_StartUp\");\n<｜fim▁hole｜>\n  // FILE* R_OpenInitFile (void)\n\n  // FILE* R_OpenSysInitFile (void)\n\n  // FILE* R_OpenSiteFile (void)\n}<｜fim▁end｜>",
    "response": "  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.commons.math.linear;\n\npublic interface CholeskyDecomposition {\n    /**\n     * Returns the matrix L of the decomposition.\n     * <p>L is an lower-triangular matrix</p>\n     * @return the L matrix\n     */\n    RealMatrix getL();\n\n    /**\n     * Returns the transpose of the matrix L of the decomposition.\n     * <p>L<sup>T</sup> is an upper-triangular matrix</p>\n     * @return the transpose of the matrix L of the decomposition\n     */\n    RealMatrix getLT();\n\n    /**\n     * Return the determinant of the matrix\n     * @return determinant of the matrix\n     */\n<｜fim▁hole｜>     * @return a solver\n     */\n    DecompositionSolver getSolver();\n}<｜fim▁end｜>",
    "response": "    double getDeterminant();\n\n    /**\n     * Get a solver for finding the A &times; X = B solution in least square sense.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.owasp.benchmark.testcode;\n\nimport java.io.IOException;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/BenchmarkTest09081\")\npublic class BenchmarkTest09081 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n        String param = \"\";\n        java.util.Enumeration<String> headerNames = request.getHeaderNames();\n        if (headerNames.hasMoreElements()) {\n            param = headerNames.nextElement(); // just grab first element\n        }\n<｜fim▁hole｜>            xp.compile(bar);\n        } catch (javax.xml.xpath.XPathExpressionException e) {\n            // OK to swallow\n            System.out.println(\"XPath expression exception caught and swallowed: \" + e.getMessage());\n        }\n    }  // end doPost\n\n    private class Test {\n\n        public String doSomething(String param) throws ServletException, IOException {\n\n        StringBuilder sbxyz24464 = new StringBuilder(param);\n        String bar = sbxyz24464.append(\"_SafeStuff\").toString();\n\n            return bar;\n        }\n    } // end innerclass Test\n\n} // end DataflowThruInnerClass<｜fim▁end｜>",
    "response": "\n        String bar = new Test().doSomething(param);\n\n        javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n        javax.xml.xpath.XPath xp = xpf.newXPath();\n        try {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.kchine.r.server.http.local;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport java.net.URL;\nimport java.net.URLClassLoader;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic class LocalClassServlet extends HttpServlet {\n\n    ClassLoader cl = this.getClass().getClassLoader();\n\n    public static int BUFFER_SIZE = 1024 * 64;\n\n    public void init() throws ServletException {\n        super.init();\n    }\n\n    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        doAny(req, resp);\n    }\n\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        doAny(req, resp);\n    }\n\n    protected void doAny(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n\n        String url = req.getRequestURL().toString();\n        String resource = url.substring(url.indexOf(\"/classes\") + \"/classes\".length());\n\n        if (resource.equals(\"\")) {\n            resp.sendError(HttpServletResponse.SC_NOT_FOUND);\n        }\n        if (resource.endsWith(\".class\")) {\n            String className = resource.substring(1, resource.indexOf(\".class\")).replace('/', '.');\n            Class<?> c = null;\n            try {\n                c = cl.loadClass(className);\n            } catch (Exception e) {\n                resp.sendError(HttpServletResponse.SC_NOT_FOUND);\n                return;\n            }\n\n            resp.setContentType(\"application/java\");\n\n            InputStream is = cl.getResourceAsStream(resource.substring(1));\n            resp.setContentType(\"text/plain\");\n            byte data[] = new byte[BUFFER_SIZE];\n            int count = 0;\n            while ((count = is.read(data, 0, BUFFER_SIZE)) != -1) {\n                resp.getOutputStream().write(data, 0, count);\n                resp.getOutputStream().flush();\n            }\n            resp.getOutputStream().close();\n\n        } else {\n            InputStream is = cl.getResourceAsStream(resource.substring(1));\n            if (is == null) {\n<｜fim▁hole｜>                byte data[] = new byte[BUFFER_SIZE];\n                int count = 0;\n                while ((count = is.read(data, 0, BUFFER_SIZE)) != -1) {\n                    resp.getOutputStream().write(data, 0, count);\n                    resp.getOutputStream().flush();\n                }\n                resp.getOutputStream().close();\n            }\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        ClassLoader cl = new URLClassLoader(new URL[] { new URL(\"http://www.biocep.net/bbb/bin/\") }, null);\n        System.out.println(cl.getResource(\"org/kchine/r/server/http/local/LocalClassServlet.class\"));\n    }\n}<｜fim▁end｜>",
    "response": "                resp.sendError(HttpServletResponse.SC_NOT_FOUND);\n            } else {\n                resp.setContentType(\"text/plain\");\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.kafka.streams.state.internals;\n\nimport org.apache.kafka.streams.processor.ProcessorContext;\nimport org.apache.kafka.streams.processor.internals.ProcessorContextUtils;\nimport org.apache.kafka.streams.state.internals.metrics.RocksDBMetricsRecorder;\n\nclass KeyValueSegments extends AbstractSegments<KeyValueSegment> {\n\n    private final RocksDBMetricsRecorder metricsRecorder;\n<｜fim▁hole｜>                     final long retentionPeriod,\n                     final long segmentInterval) {\n        super(name, retentionPeriod, segmentInterval);\n        metricsRecorder = new RocksDBMetricsRecorder(metricsScope, name);\n    }\n\n    @Override\n    public KeyValueSegment getOrCreateSegment(final long segmentId,\n                                              final ProcessorContext context) {\n        if (segments.containsKey(segmentId)) {\n            return segments.get(segmentId);\n        } else {\n            final KeyValueSegment newSegment =\n                new KeyValueSegment(segmentName(segmentId), name, segmentId, metricsRecorder);\n\n            if (segments.put(segmentId, newSegment) != null) {\n                throw new IllegalStateException(\"KeyValueSegment already exists. Possible concurrent access.\");\n            }\n\n            newSegment.openDB(context.appConfigs(), context.stateDir());\n            return newSegment;\n        }\n    }\n\n    @Override\n    public void openExisting(final ProcessorContext context, final long streamTime) {\n        metricsRecorder.init(ProcessorContextUtils.getMetricsImpl(context), context.taskId());\n        super.openExisting(context, streamTime);\n    }\n}<｜fim▁end｜>",
    "response": "\n    KeyValueSegments(final String name,\n                     final String metricsScope,\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.api.ads.admanager.axis.v202105;\n\npublic class CustomTargetingServiceLocator extends org.apache.axis.client.Service implements com.google.api.ads.admanager.axis.v202105.CustomTargetingService {\n\n    public CustomTargetingServiceLocator() {\n    }\n\n    public CustomTargetingServiceLocator(org.apache.axis.EngineConfiguration config) {\n        super(config);\n    }\n\n    public CustomTargetingServiceLocator(java.lang.String wsdlLoc, javax.xml.namespace.QName sName) throws javax.xml.rpc.ServiceException {\n        super(wsdlLoc, sName);\n    }\n\n    // Use to get a proxy class for CustomTargetingServiceInterfacePort\n    private java.lang.String CustomTargetingServiceInterfacePort_address = \"https://ads.google.com/apis/ads/publisher/v202105/CustomTargetingService\";\n\n    public java.lang.String getCustomTargetingServiceInterfacePortAddress() {\n        return CustomTargetingServiceInterfacePort_address;\n    }\n\n    // The WSDD service name defaults to the port name.\n    private java.lang.String CustomTargetingServiceInterfacePortWSDDServiceName = \"CustomTargetingServiceInterfacePort\";\n\n    public java.lang.String getCustomTargetingServiceInterfacePortWSDDServiceName() {\n        return CustomTargetingServiceInterfacePortWSDDServiceName;\n    }\n\n    public void setCustomTargetingServiceInterfacePortWSDDServiceName(java.lang.String name) {\n        CustomTargetingServiceInterfacePortWSDDServiceName = name;\n    }\n\n    public com.google.api.ads.admanager.axis.v202105.CustomTargetingServiceInterface getCustomTargetingServiceInterfacePort() throws javax.xml.rpc.ServiceException {\n       java.net.URL endpoint;\n        try {\n            endpoint = new java.net.URL(CustomTargetingServiceInterfacePort_address);\n        }\n        catch (java.net.MalformedURLException e) {\n            throw new javax.xml.rpc.ServiceException(e);\n        }\n        return getCustomTargetingServiceInterfacePort(endpoint);\n    }\n\n    public com.google.api.ads.admanager.axis.v202105.CustomTargetingServiceInterface getCustomTargetingServiceInterfacePort(java.net.URL portAddress) throws javax.xml.rpc.ServiceException {\n        try {\n            com.google.api.ads.admanager.axis.v202105.CustomTargetingServiceSoapBindingStub _stub = new com.google.api.ads.admanager.axis.v202105.CustomTargetingServiceSoapBindingStub(portAddress, this);\n            _stub.setPortName(getCustomTargetingServiceInterfacePortWSDDServiceName());\n            return _stub;\n        }\n        catch (org.apache.axis.AxisFault e) {\n            return null;\n        }\n    }\n\n    public void setCustomTargetingServiceInterfacePortEndpointAddress(java.lang.String address) {\n        CustomTargetingServiceInterfacePort_address = address;\n    }\n\n    /**\n     * For the given interface, get the stub implementation.\n     * If this service has no port for the given interface,\n     * then ServiceException is thrown.\n     */\n    public java.rmi.Remote getPort(Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException {\n        try {\n            if (com.google.api.ads.admanager.axis.v202105.CustomTargetingServiceInterface.class.isAssignableFrom(serviceEndpointInterface)) {\n                com.google.api.ads.admanager.axis.v202105.CustomTargetingServiceSoapBindingStub _stub = new com.google.api.ads.admanager.axis.v202105.CustomTargetingServiceSoapBindingStub(new java.net.URL(CustomTargetingServiceInterfacePort_address), this);\n                _stub.setPortName(getCustomTargetingServiceInterfacePortWSDDServiceName());\n                return _stub;\n            }\n        }\n        catch (java.lang.Throwable t) {\n            throw new javax.xml.rpc.ServiceException(t);\n        }\n        throw new javax.xml.rpc.ServiceException(\"There is no stub implementation for the interface:  \" + (serviceEndpointInterface == null ? \"null\" : serviceEndpointInterface.getName()));\n    }\n\n    /**\n     * For the given interface, get the stub implementation.\n     * If this service has no port for the given interface,\n     * then ServiceException is thrown.\n     */\n    public java.rmi.Remote getPort(javax.xml.namespace.QName portName, Class serviceEndpointInterface) throws javax.xml.rpc.ServiceException {\n        if (portName == null) {\n            return getPort(serviceEndpointInterface);\n        }\n        java.lang.String inputPortName = portName.getLocalPart();\n        if (\"CustomTargetingServiceInterfacePort\".equals(inputPortName)) {\n            return getCustomTargetingServiceInterfacePort();\n        }\n        else  {\n            java.rmi.Remote _stub = getPort(serviceEndpointInterface);\n            ((org.apache.axis.client.Stub) _stub).setPortName(portName);\n            return _stub;\n        }\n    }\n\n    public javax.xml.namespace.QName getServiceName() {\n        return new javax.xml.namespace.QName(\"https://www.google.com/apis/ads/publisher/v202105\", \"CustomTargetingService\");\n    }\n\n    private java.util.HashSet ports = null;\n\n    public java.util.Iterator getPorts() {\n        if (ports == null) {\n            ports = new java.util.HashSet();\n            ports.add(new javax.xml.namespace.QName(\"https://www.google.com/apis/ads/publisher/v202105\", \"CustomTargetingServiceInterfacePort\"));\n        }\n        return ports.iterator();\n    }\n\n    /**\n    * Set the endpoint address for the specified port name.\n    */\n    public void setEndpointAddress(java.lang.String portName, java.lang.String address) throws javax.xml.rpc.ServiceException {\n\nif (\"CustomTargetingServiceInterfacePort\".equals(portName)) {\n            setCustomTargetingServiceInterfacePortEndpointAddress(address);\n        }\n        else \n{ // Unknown Port Name\n            throw new javax.xml.rpc.ServiceException(\" Cannot set Endpoint Address for Unknown Port\" + portName);\n        }\n    }\n\n    /**\n<｜fim▁hole｜>        setEndpointAddress(portName.getLocalPart(), address);\n    }\n\n}<｜fim▁end｜>",
    "response": "    * Set the endpoint address for the specified port name.\n    */\n    public void setEndpointAddress(javax.xml.namespace.QName portName, java.lang.String address) throws javax.xml.rpc.ServiceException {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.sun.jini.test.spec.security.proxytrust.util;\n\nimport java.util.logging.Level;\n\npublic class Interface21Impl implements TestInterface2, TestInterface1 {\n\n    /**\n     * Method from TestInterface1 interfaces. Does nothing.\n     */\n    public void test() {}\n\n    /**\n     * Method from TestInterface1 interfaces. Does nothing.\n     *\n     * @return -1\n     */\n    public int test1(int i) {\n<｜fim▁hole｜>    /**\n     * Method from TestInterface1 interfaces. Does nothing.\n     */\n    public void exTest() throws FakeException {}\n}<｜fim▁end｜>",
    "response": "        return -1;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.sonar.server.computation.component;\n\nimport com.google.common.base.Function;\nimport com.google.common.base.Predicate;\nimport com.google.common.collect.ImmutableMap;\nimport com.google.common.collect.Maps;\nimport java.util.List;\nimport java.util.Map;\nimport javax.annotation.Nonnull;\nimport javax.annotation.Nullable;\nimport org.sonar.api.utils.log.Loggers;\nimport org.sonar.core.util.logs.Profiler;\n\nimport static com.google.common.collect.FluentIterable.from;\nimport static com.google.common.collect.Iterables.concat;\nimport static java.util.Objects.requireNonNull;\n\npublic class VisitorsCrawler implements ComponentCrawler {\n\n  private final Map<ComponentVisitor, VisitorDuration> visitorCumulativeDurations;\n  private final List<VisitorWrapper> preOrderVisitorWrappers;\n  private final List<VisitorWrapper> postOrderVisitorWrappers;\n\n  public VisitorsCrawler(Iterable<ComponentVisitor> visitors) {\n    List<VisitorWrapper> visitorWrappers = from(visitors).transform(ToVisitorWrapper.INSTANCE).toList();\n    this.preOrderVisitorWrappers = from(visitorWrappers).filter(MathPreOrderVisitor.INSTANCE).toList();\n    this.postOrderVisitorWrappers = from(visitorWrappers).filter(MatchPostOrderVisitor.INSTANCE).toList();\n    this.visitorCumulativeDurations = from(visitors).toMap(VisitorWrapperToInitialDuration.INSTANCE);\n  }\n\n  public Map<ComponentVisitor, Long> getCumulativeDurations() {\n    return ImmutableMap.copyOf(\n      Maps.transformValues(this.visitorCumulativeDurations, VisitorDurationToDuration.INSTANCE)\n      );\n  }\n\n  @Override\n  public void visit(final Component component) {\n    MatchVisitorMaxDepth visitorMaxDepth = MatchVisitorMaxDepth.forComponent(component);\n    List<VisitorWrapper> preOrderVisitorWrappersToExecute = from(preOrderVisitorWrappers).filter(visitorMaxDepth).toList();\n    List<VisitorWrapper> postOrderVisitorWrappersToExecute = from(postOrderVisitorWrappers).filter(visitorMaxDepth).toList();\n    if (preOrderVisitorWrappersToExecute.isEmpty() && postOrderVisitorWrappersToExecute.isEmpty()) {\n      return;\n    }\n\n    for (VisitorWrapper visitorWrapper : concat(preOrderVisitorWrappers, postOrderVisitorWrappers)) {\n      visitorWrapper.beforeComponent(component);\n    }\n\n    for (VisitorWrapper visitorWrapper : preOrderVisitorWrappersToExecute) {\n      visitNode(component, visitorWrapper);\n    }\n\n    visitChildren(component);\n\n    for (VisitorWrapper visitorWrapper : postOrderVisitorWrappersToExecute) {\n      visitNode(component, visitorWrapper);\n    }\n\n    for (VisitorWrapper visitorWrapper : concat(preOrderVisitorWrappersToExecute, postOrderVisitorWrappersToExecute)) {\n      visitorWrapper.afterComponent(component);\n    }\n  }\n\n  private void visitChildren(Component component) {\n    for (Component child : component.getChildren()) {\n      visit(child);\n    }\n  }\n\n  private void visitNode(Component component, VisitorWrapper visitor) {\n    Profiler profiler = Profiler.create(Loggers.get(visitor.getWrappedVisitor().getClass()))\n      .startTrace(\"Visiting component {}\", component.getKey());\n    visitor.visitAny(component);\n    switch (component.getType()) {\n      case PROJECT:\n        visitor.visitProject(component);\n        break;\n      case MODULE:\n        visitor.visitModule(component);\n        break;\n      case DIRECTORY:\n        visitor.visitDirectory(component);\n        break;\n      case FILE:\n        visitor.visitFile(component);\n        break;\n      case VIEW:\n        visitor.visitView(component);\n        break;\n      case SUBVIEW:\n        visitor.visitSubView(component);\n        break;\n      case PROJECT_VIEW:\n        visitor.visitProjectView(component);\n        break;\n      default:\n        throw new IllegalStateException(String.format(\"Unknown type %s\", component.getType().name()));\n    }\n    long duration = profiler.stopTrace();\n    incrementDuration(visitor, duration);\n  }\n\n  private void incrementDuration(VisitorWrapper visitorWrapper, long duration) {\n    visitorCumulativeDurations.get(visitorWrapper.getWrappedVisitor()).increment(duration);\n  }\n\n  private enum ToVisitorWrapper implements Function<ComponentVisitor, VisitorWrapper> {\n    INSTANCE;\n\n    @Override\n    public VisitorWrapper apply(@Nonnull ComponentVisitor componentVisitor) {\n      if (componentVisitor instanceof TypeAwareVisitor) {\n        return new TypeAwareVisitorWrapper((TypeAwareVisitor) componentVisitor);\n      } else if (componentVisitor instanceof PathAwareVisitor) {\n        return new PathAwareVisitorWrapper((PathAwareVisitor) componentVisitor);\n      } else {\n        throw new IllegalArgumentException(\"Only TypeAwareVisitor and PathAwareVisitor can be used\");\n      }\n    }\n<｜fim▁hole｜>\n  private static class MatchVisitorMaxDepth implements Predicate<VisitorWrapper> {\n    private static final Map<Component.Type, MatchVisitorMaxDepth> INSTANCES = buildInstances();\n\n    private static Map<Component.Type, MatchVisitorMaxDepth> buildInstances() {\n      ImmutableMap.Builder<Component.Type, MatchVisitorMaxDepth> builder = ImmutableMap.builder();\n      for (Component.Type type : Component.Type.values()) {\n        builder.put(type, new MatchVisitorMaxDepth(type));\n      }\n      return builder.build();\n    }\n\n    private final Component.Type type;\n\n    private MatchVisitorMaxDepth(Component.Type type) {\n      this.type = requireNonNull(type);\n    }\n\n    public static MatchVisitorMaxDepth forComponent(Component component) {\n      return INSTANCES.get(component.getType());\n    }\n\n    @Override\n    public boolean apply(@Nonnull VisitorWrapper visitorWrapper) {\n      CrawlerDepthLimit maxDepth = visitorWrapper.getMaxDepth();\n      return maxDepth.isSameAs(type) || maxDepth.isDeeperThan(type);\n    }\n  }\n\n  private enum MathPreOrderVisitor implements Predicate<VisitorWrapper> {\n    INSTANCE;\n\n    @Override\n    public boolean apply(@Nonnull VisitorWrapper visitorWrapper) {\n      return visitorWrapper.getOrder() == ComponentVisitor.Order.PRE_ORDER;\n    }\n  }\n\n  private enum MatchPostOrderVisitor implements Predicate<VisitorWrapper> {\n    INSTANCE;\n\n    @Override\n    public boolean apply(@Nonnull VisitorWrapper visitorWrapper) {\n      return visitorWrapper.getOrder() == ComponentVisitor.Order.POST_ORDER;\n    }\n  }\n\n  private static final class VisitorDuration {\n    private long duration = 0;\n\n    public void increment(long duration) {\n      this.duration += duration;\n    }\n\n    public long getDuration() {\n      return duration;\n    }\n  }\n\n  private enum VisitorWrapperToInitialDuration implements Function<ComponentVisitor, VisitorDuration> {\n    INSTANCE;\n\n    @Override\n    @Nonnull\n    public VisitorDuration apply(@Nonnull ComponentVisitor visitorWrapper) {\n      return new VisitorDuration();\n    }\n  }\n\n  private enum VisitorDurationToDuration implements Function<VisitorDuration, Long> {\n    INSTANCE;\n\n    @Nullable\n    @Override\n    public Long apply(VisitorDuration input) {\n      return input.getDuration();\n    }\n  }\n}<｜fim▁end｜>",
    "response": "  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.asqatasun.webapp.entity.option;\n\nimport org.asqatasun.sdk.entity.Entity;\n\npublic interface OptionElement extends Entity {\n\n    /**\n     *\n     * @return\n<｜fim▁hole｜>    /**\n     *\n     * @param option\n     */\n    void setOption(Option option);\n\n    /**\n     *\n     * @return\n     *      the Option value\n     */\n    String getValue();\n\n    /**\n     *\n     * @param optionValue\n     */\n    void setValue(String optionValue);\n\n}<｜fim▁end｜>",
    "response": "     *      the option code\n     */\n    Option getOption();\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.ugcleague.ops.service.discord;\n\nimport com.ugcleague.ops.service.DiscordService;\nimport com.ugcleague.ops.service.discord.util.DiscordSubscriber;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport sx.blah.discord.util.audio.AudioPlayer;\n\nimport javax.annotation.PostConstruct;\n<｜fim▁hole｜>import java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\nimport java.util.concurrent.CompletableFuture;\n\n@Service\npublic class AudioStreamService implements DiscordSubscriber {\n\n    private static final Logger log = LoggerFactory.getLogger(AudioStreamService.class);\n\n    private final DiscordService discordService;\n\n    @Autowired\n    public AudioStreamService(DiscordService discordService) {\n        this.discordService = discordService;\n    }\n\n    @PostConstruct\n    private void configure() {\n        discordService.subscribe(this);\n    }\n\n    public boolean queueFromYouTube(AudioPlayer audioPlayer, String id) {\n        String name = System.getProperty(\"os.name\").contains(\"Windows\") ? \"youtube-dl.exe\" : \"youtube-dl\";\n        ProcessBuilder builder = new ProcessBuilder(name, \"-q\", \"-f\", \"worstaudio\",\n            \"--exec\", \"ffmpeg -hide_banner -nostats -loglevel panic -y -i {} -vn -q:a 5 -f mp3 pipe:1\", \"-o\",\n            \"%(id)s\", \"--\", id);\n        try {\n            Process process = builder.start();\n            try {\n                CompletableFuture.runAsync(() -> logStream(process.getErrorStream()));\n                AudioPlayer.Track track = audioPlayer.queue(AudioSystem.getAudioInputStream(process.getInputStream()));\n                track.getMetadata().put(\"url\", id);\n                return true;\n            } catch (UnsupportedAudioFileException e) {\n                log.warn(\"Could not queue audio\", e);\n                process.destroyForcibly();\n            }\n        } catch (IOException e) {\n            log.warn(\"Could not start process\", e);\n        }\n        return false;\n    }\n\n    private BufferedReader newProcessReader(InputStream stream) {\n        return new BufferedReader(new InputStreamReader(stream, Charset.forName(\"UTF-8\")));\n    }\n\n    private void logStream(InputStream stream) {\n        try (BufferedReader input = newProcessReader(stream)) {\n            String line;\n            while ((line = input.readLine()) != null) {\n                log.info(\"[yt-dl] \" + line);\n            }\n        } catch (IOException e) {\n            log.warn(\"Could not read from stream\", e);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "import javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.UnsupportedAudioFileException;\nimport java.io.BufferedReader;\nimport java.io.IOException;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package trks.recipedoc.generate.finishers;\n\nimport trks.recipedoc.generate.structs.IdDamagePair;\nimport trks.recipedoc.generate.structs.ItemStruct;\nimport trks.recipedoc.generate.structs.RecipeItemStruct;\nimport trks.recipedoc.generate.structs.RecipeStruct;\n\nimport java.util.*;\n\npublic class ItemCostCalculator\n{\n    public HashMap<IdDamagePair, ItemStruct> itemsMap = new HashMap<IdDamagePair, ItemStruct>();\n    protected final ArrayList<RecipeStruct> recipes;\n    protected final ArrayList<ItemStruct> items;\n\n    protected HashMap<IdDamagePair, ItemCostOptionList> itemCostsMap = new HashMap<IdDamagePair, ItemCostOptionList>();\n\n    public ItemCostCalculator(ArrayList<ItemStruct> items, ArrayList<RecipeStruct> recipeStructs)\n    {\n        this.items = items;\n        this.recipes = recipeStructs;\n        mapItemsByIds();\n        calculate();\n\n        for (ItemStruct item : this.items)\n        {\n            ItemCostOptionList itemCostOptionList = itemCostsMap.get(item);\n            if (itemCostOptionList != null)\n            {\n                for (ItemCostOption itemCostOption : itemCostOptionList.itemCostOptionList)\n                {\n                    if (!itemCostOption.areAllItemsBase)\n                    {\n                        continue;\n                    }\n                    HashMap<IdDamagePair, Float> cost = new HashMap<IdDamagePair, Float>();\n                    for (IdDamagePair idDamagePair : itemCostOption.items.keySet())\n                    {\n                        cost.put(idDamagePair, itemCostOption.items.get(idDamagePair).amount / itemCostOption.resultAmount);\n                    }\n                    item.rawCosts.add(cost);\n                }\n            }\n        }\n\n    }\n\n    protected void calculate()\n    {\n        HashMap<IdDamagePair, ArrayList<RecipeStruct>> idDamagePairArrayListHashMap = _calculateRecipesMap();\n        for (IdDamagePair idDamagePair : idDamagePairArrayListHashMap.keySet())\n        {\n            ItemCostOptionList itemCostOptionList = new ItemCostOptionList(idDamagePairArrayListHashMap.get(idDamagePair), this.itemsMap);\n            if (itemCostOptionList.itemCostOptionList.size() > 0)\n            {\n                itemCostsMap.put(idDamagePair, itemCostOptionList);\n            }\n        }\n\n        List<ItemStruct> sortedItems = (List<ItemStruct>) items.clone();\n        Collections.sort(sortedItems, new Comparator<ItemStruct>()\n        {\n            @Override\n            public int compare(ItemStruct o1, ItemStruct o2)\n            {\n                return ((Float) o1.craftingComplexity).compareTo(o2.craftingComplexity);\n            }\n        });\n        for (IdDamagePair resultId : sortedItems)\n        {\n            ItemCostOptionList costList = itemCostsMap.get(resultId);\n            if (costList == null)\n            {\n                continue;\n            }\n            System.out.println(\"Calculating raw cost for \" + itemsMap.get(resultId).name + \"...\");\n            boolean somethingChangedInCurrentLoopIteration = true;\n            while (somethingChangedInCurrentLoopIteration)\n            {\n                somethingChangedInCurrentLoopIteration = false;\n                for (IdDamagePair ingredientId : costList.getNonBaseItemsFromAllPaths())\n                {\n                    System.out.println(\"\\tSubstituting \" + itemsMap.get(ingredientId).name + \"...\");\n                    ItemCostOptionList ingredientCostOptionsList = itemCostsMap.get(ingredientId);\n                    if (ingredientCostOptionsList == null)\n                    {\n                        continue;\n                    }\n                    boolean anyChange = costList.substituteItemWithCosts(resultId, ingredientCostOptionsList, ingredientId);\n                    somethingChangedInCurrentLoopIteration = somethingChangedInCurrentLoopIteration || anyChange;\n                    if (anyChange && costList.itemCostOptionList.size() > 20)\n                    {\n                        somethingChangedInCurrentLoopIteration = false;\n                        System.err.println(\"\\t\\tbreaking - \" + costList.itemCostOptionList.size() + \" options!\");\n                        break;\n                    }\n                    System.out.println(\"\\t\\t\" + costList.itemCostOptionList.size());\n                }\n            }\n            costList.removeUnfinished();\n            if (costList.itemCostOptionList.size() > 1)\n            {\n                System.out.println(\"\\tFinished options: \" + costList.itemCostOptionList.size());\n            }\n        }\n    }\n\n    protected HashMap<IdDamagePair, ArrayList<RecipeStruct>> _calculateRecipesMap()\n    {\n        HashMap<IdDamagePair, ArrayList<RecipeStruct>> recipeMap = new HashMap<IdDamagePair, ArrayList<RecipeStruct>>();\n        for (RecipeStruct recipe : this.recipes)\n        {\n            if (!recipe.useInRawCostCalculation)\n            {\n                continue;\n            }\n            for (RecipeItemStruct item : recipe.items)\n            {\n                if (item.elementType == RecipeItemStruct.RecipeElementType.result)\n                {\n                    IdDamagePair idDamagePair = item.itemIds.get(0);\n                    if (itemsMap.get(idDamagePair) != null && !itemsMap.get(idDamagePair).isBaseItem)\n                    {\n                        if (recipe.hasIngredient(idDamagePair))\n                        {\n                            System.out.println(\"circular recipe for \" + idDamagePair.itemId + \":\" + idDamagePair.damageId);\n                        }\n                        else\n                        {\n                            if (!recipeMap.containsKey(idDamagePair))\n                            {\n                                recipeMap.put(idDamagePair, new ArrayList<RecipeStruct>());\n                            }\n                            recipeMap.get(idDamagePair).add(recipe);\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        return recipeMap;\n    }\n\n    public void _printNonCraftableNonBaseItems()\n    {\n        HashMap<IdDamagePair, ArrayList<RecipeStruct>> recipeMap = _calculateRecipesMap();\n        for (ItemStruct item : items)\n        {\n            IdDamagePair idObject = new IdDamagePair(item.itemId, item.damageId);\n            if (!recipeMap.containsKey(idObject) && !item.isBaseItem && item.showOnList)\n            {\n                System.out.println(\"Not found: \" + item.name);\n            }\n        }\n    }\n\n    public void _printNotCraftedItems()\n    {\n        for (IdDamagePair idDamagePair : itemCostsMap.keySet())\n        {\n            ItemCostOptionList itemCostOptionList = itemCostsMap.get(idDamagePair);\n            if (!itemCostOptionList.hasAnyFinishedPath())\n            {\n                ItemStruct itemStruct = itemsMap.get(idDamagePair);\n<｜fim▁hole｜>\n    }\n\n    public void mapItemsByIds()\n    {\n        for (ItemStruct item : this.items)\n        {\n            itemsMap.put(new IdDamagePair(item.itemId, item.damageId), item);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "                System.out.println(itemStruct.name + \" (\" + itemStruct.itemId + \":\" + itemStruct.damageId + \")\");\n            }\n\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.hadoop.hbase.client;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport org.apache.hadoop.hbase.DoNotRetryIOException;\nimport org.apache.hadoop.hbase.RegionTooBusyException;\nimport org.apache.yetus.audience.InterfaceAudience;\nimport org.apache.hadoop.hbase.util.Bytes;\n\n@SuppressWarnings(\"serial\")\n@InterfaceAudience.Public\npublic class RetriesExhaustedWithDetailsException\nextends RetriesExhaustedException {\n  List<Throwable> exceptions;\n  List<Row> actions;\n  List<String> hostnameAndPort;\n\n<｜fim▁hole｜>  }\n\n  public RetriesExhaustedWithDetailsException(final String msg, final IOException e) {\n    super(msg, e);\n  }\n\n  public RetriesExhaustedWithDetailsException(List<Throwable> exceptions,\n                                              List<Row> actions,\n                                              List<String> hostnameAndPort) {\n    super(\"Failed \" + exceptions.size() + \" action\" +\n        pluralize(exceptions) + \": \" +\n        getDesc(exceptions, actions, hostnameAndPort));\n\n    this.exceptions = exceptions;\n    this.actions = actions;\n    this.hostnameAndPort = hostnameAndPort;\n  }\n\n  public List<Throwable> getCauses() {\n    return exceptions;\n  }\n\n  public int getNumExceptions() {\n    return exceptions.size();\n  }\n\n  public Throwable getCause(int i) {\n    return exceptions.get(i);\n  }\n\n  public Row getRow(int i) {\n    return actions.get(i);\n  }\n\n  public String getHostnamePort(final int i) {\n    return this.hostnameAndPort.get(i);\n  }\n\n  public boolean mayHaveClusterIssues() {\n    boolean res = false;\n\n    // If all of the exceptions are DNRIOE not exception\n    for (Throwable t : exceptions) {\n      if (!(t instanceof DoNotRetryIOException)) {\n        res = true;\n      }\n    }\n    return res;\n  }\n\n  public static String pluralize(Collection<?> c) {\n    return pluralize(c.size());\n  }\n\n  public static String pluralize(int c) {\n    return c > 1 ? \"s\" : \"\";\n  }\n\n  public static String getDesc(List<Throwable> exceptions,\n                               List<? extends Row> actions,\n                               List<String> hostnamePort) {\n    String s = getDesc(classifyExs(exceptions));\n    StringBuilder addrs = new StringBuilder(s);\n    addrs.append(\"servers with issues: \");\n    Set<String> uniqAddr = new HashSet<>(hostnamePort);\n\n    for (String addr : uniqAddr) {\n      addrs.append(addr).append(\", \");\n    }\n    return uniqAddr.isEmpty() ? addrs.toString() : addrs.substring(0, addrs.length() - 2);\n  }\n\n  public String getExhaustiveDescription() {\n    StringWriter errorWriter = new StringWriter();\n    PrintWriter pw = new PrintWriter(errorWriter);\n    for (int i = 0; i < this.exceptions.size(); ++i) {\n      Throwable t = this.exceptions.get(i);\n      Row action = this.actions.get(i);\n      String server = this.hostnameAndPort.get(i);\n      pw.append(\"exception\");\n      if (this.exceptions.size() > 1) {\n        pw.append(\" #\" + i);\n      }\n      pw.append(\" from \" + server + \" for \"\n        + ((action == null) ? \"unknown key\" : Bytes.toStringBinary(action.getRow())));\n      if (t != null) {\n        pw.println();\n        t.printStackTrace(pw);\n      }\n    }\n    pw.flush();\n    return errorWriter.toString();\n  }\n\n  public static Map<String, Integer> classifyExs(List<Throwable> ths) {\n    Map<String, Integer> cls = new HashMap<>();\n    for (Throwable t : ths) {\n      if (t == null) continue;\n      String name = \"\";\n      if (t instanceof DoNotRetryIOException ||\n          t instanceof RegionTooBusyException) {\n        // If RegionTooBusyException, print message since it has Region name in it.\n        // RegionTooBusyException message was edited to remove variance. Has regionname, server,\n        // and why the exception; no longer has duration it waited on lock nor current memsize.\n        name = t.getMessage();\n      } else {\n        name = t.getClass().getSimpleName();\n      }\n      Integer i = cls.get(name);\n      if (i == null) {\n        i = 0;\n      }\n      i += 1;\n      cls.put(name, i);\n    }\n    return cls;\n  }\n\n  public static String getDesc(Map<String,Integer> classificaton) {\n    StringBuilder classificatons =new StringBuilder(11);\n    for (Map.Entry<String, Integer> e : classificaton.entrySet()) {\n      classificatons.append(e.getKey());\n      classificatons.append(\": \");\n      classificatons.append(e.getValue());\n      classificatons.append(\" time\");\n      classificatons.append(pluralize(e.getValue()));\n      classificatons.append(\", \");\n    }\n    return classificatons.toString();\n  }\n}<｜fim▁end｜>",
    "response": "  public RetriesExhaustedWithDetailsException(final String msg) {\n    super(msg);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.outermedia.solrfusion.configuration;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\n<｜fim▁hole｜>import lombok.ToString;\n\nimport org.outermedia.solrfusion.response.ResponseParserIfc;\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"responseParser\", namespace = \"http://solrfusion.outermedia.org/configuration/\")\n@Getter\n@Setter\n@ToString(callSuper = true)\npublic class ResponseParserFactory extends\n    ConfiguredFactory<ResponseParserIfc, ResponseParserFactory>\n{}<｜fim▁end｜>",
    "response": "import javax.xml.bind.annotation.XmlType;\n\nimport lombok.Getter;\nimport lombok.Setter;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.beangle.ems.rule.engine;\n\nimport org.beangle.ems.rule.Context;\nimport org.beangle.ems.rule.RuleBase;\n\npublic interface PatternMatcher {\n<｜fim▁hole｜>   * 根据规则集，判断哪些属于这次的执行范围\n   *\n   * @param base\n   * @param context\n   */\n  Agenda buildAgenda(RuleBase base, Context context);\n}<｜fim▁end｜>",
    "response": "\n  /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.zeprs.unittest.persistence;\n\nimport org.zeprs.unittest.ZeprsTest;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.List;\n\npublic class DistrictTest extends ZeprsTest {\n\n    private String listName = \"Districts\";\n    private String name = \"District\";\n    private String className = \"org.cidrz.webapp.dynasite.valueobject.District\";\n    private String dao = \"org.cidrz.webapp.dynasite.dao.DistrictDAO\";\n    private Class[] argClazz = new Class[]{Long.class};\n    private Object[] args = new Object[]{new Long(\"1\")};\n\n    public void testOne() {\n\n        Class clazz = null;\n        try {\n            clazz = Class.forName(className);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        Object object = null;\n        try {\n            object = clazz.newInstance();\n        } catch (InstantiationException e) {\n            e.printStackTrace();\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n        }\n\n        Class daoClazz = null;\n        try {\n            daoClazz = Class.forName(dao);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        Method m = null;\n        try {\n            m = daoClazz.getDeclaredMethod(\"getOne\", argClazz);\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        }\n\n        try {\n            //object = FlowDAO.getOne(id);\n            object = m.invoke(object, args);\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n            fail(\"Failed to get \" + name);\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n            fail(\"Failed to get \" + name);\n        }\n        assertNotNull(name + \" was null\", object);\n    }\n\n    public void testList() {\n\n        Class daoClazz = null;\n        try {\n            daoClazz = Class.forName(dao);\n<｜fim▁hole｜>        }\n\n        List list = null;\n        Method m = null;\n        try {\n            m = daoClazz.getDeclaredMethod(\"getAll\", new Class[]{});\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        }\n        try {\n            list = (List) m.invoke(null, new Object[]{});\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n            fail(\"Failed to get list of \" + listName);\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n            fail(\"Failed to get list of \" + listName);\n        }\n        assertNotNull(listName + \" list was null\", list);\n    }\n\n    public void testListOrder() {\n\n        Class daoClazz = null;\n        try {\n            daoClazz = Class.forName(dao);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        List list = null;\n        Method m = null;\n        try {\n            m = daoClazz.getDeclaredMethod(\"getAll\", new Class[]{String.class});\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        }\n        try {\n            list = (List) m.invoke(list, new Object[]{new String(\"districtName\")});\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n            fail(\"Failed to get list of \" + listName);\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n            fail(\"Failed to get list of \" + listName);\n        }\n        assertNotNull(listName + \" list was null\", list);\n    }\n\n}<｜fim▁end｜>",
    "response": "        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.xandrev.jdorg.organizers.service;\n\nimport com.xandrev.jdorg.configuration.Configuration;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.log4j.LogManager;\nimport org.apache.log4j.Logger;\n\nimport com.xandrev.jdorg.i18n.TextLocalizerManager;\nimport com.xandrev.jdorg.organizers.Organizer;\nimport java.util.Collections;\n\npublic class OrganizerManager {\n\n    private static OrganizerManager instance;\n    private List<Organizer> organizerList;\n    private Logger logger;\n\n    private static final String ORGANIZER_SEPARATOR = \",\";\n    private static final String PACKAGE_NAME = \"com.xandrev.jdorg.organizers.impl.\";\n    private static final Object LOCK = new Object();\n\n    public static OrganizerManager getInstance(String configurationList) {\n        synchronized (LOCK) {\n            if (instance == null) {\n                instance = new OrganizerManager(configurationList);\n            }\n        }\n        return instance;\n    }\n\n    protected OrganizerManager(String configurationList) {\n        TextLocalizerManager i18n = TextLocalizerManager.getInstance(null);\n        logger = LogManager.getLogger(OrganizerManager.class);\n        organizerList = new ArrayList<Organizer>();\n<｜fim▁hole｜>            for (String str : listString) {\n                logger.debug(i18n.getLocalizerText(\"organizermanager.process.item\") + str);\n                Organizer organizerTarget = generateOrganizer(str);\n                if (organizerTarget != null) {\n                    logger.debug(i18n.getLocalizerText(\"organizermanager.item.added\") + str);\n                    organizerList.add(organizerTarget);\n                }\n            }\n        }\n\n        Collections.sort(organizerList);\n        for(Organizer org: organizerList){\n            logger.debug(\"Organizer: \"+org.getRootFolder() + \" Priority: \"+ org.getPriority());\n        }\n\n        logger.debug(i18n.getLocalizerText(\"organizermanager.finish\"));\n\n    }\n\n    private Organizer generateOrganizer(String str) {\n        if (str != null) {\n            String normalClass = PACKAGE_NAME + str;\n            try {\n                Object classObject = Class.forName(normalClass).newInstance();\n                if (classObject instanceof Organizer) {\n                    return (Organizer) classObject;\n                }\n\n            } catch (Exception ex) {\n                logger.error(ex);\n            }\n        }\n        return null;\n    }\n\n    public List<Organizer> getOrganizerList() {\n        return organizerList;\n    }\n}<｜fim▁end｜>",
    "response": "        logger.debug(i18n.getLocalizerText(\"init.organizermanager\"));\n        if (configurationList != null) {\n            logger.debug(i18n.getLocalizerText(\"organizermanager.read.list\") + configurationList);\n            String[] listString = configurationList.split(ORGANIZER_SEPARATOR);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.thorpora.ezdashing.config;\n\nimport com.thorpora.ezdashing.AppStartupListener;\nimport com.thorpora.ezdashing.utils.spring.error.ErrorLogger;\nimport feign.FeignException;\nimport feign.RetryableException;\nimport org.slf4j.event.Level;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.net.ConnectException;\n\n@Configuration\npublic class AppConfig {\n\n    static {\n        com.jayway.jsonpath.Configuration.setDefaults(new JsonPathConfig());\n    }\n\n    @Bean\n    public AppStartupListener startupListener() {\n        return new AppStartupListener();\n<｜fim▁hole｜>        errorLogger.mapRootCause(Level.ERROR, RetryableException.class);\n        errorLogger.mapRootCause(Level.ERROR, FeignException.class);\n        return errorLogger;\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    @Bean\n    public ErrorLogger errorLogger() {\n        ErrorLogger errorLogger = new ErrorLogger();\n        errorLogger.mapRootCause(Level.ERROR, ConnectException.class);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.lushprojects.circuitjs1.client;\n\n    class LogicOutputElm extends CircuitElm {\n    final int FLAG_TERNARY = 1;\n<｜fim▁hole｜>        threshold = 2.5;\n    }\n    public LogicOutputElm(int xa, int ya, int xb, int yb, int f,\n                  StringTokenizer st) {\n        super(xa, ya, xb, yb, f);\n        try {\n        threshold = new Double(st.nextToken()).doubleValue();\n        } catch (Exception e) {\n        threshold = 2.5;\n        }\n    }\n    String dump() {\n        return super.dump() + \" \" + threshold;\n    }\n    int getDumpType() { return 'M'; }\n    int getPostCount() { return 1; }\n    boolean isTernary() { return (flags & FLAG_TERNARY) != 0; }\n    boolean isNumeric() { return (flags & (FLAG_TERNARY|FLAG_NUMERIC)) != 0; }\n    boolean needsPullDown() { return (flags & FLAG_PULLDOWN) != 0; }\n    void setPoints() {\n        super.setPoints();\n        lead1 = interpPoint(point1, point2, 1-12/dn);\n    }\n    void draw(Graphics g) {\n        Font oldf=g.getFont();\n        Font f = new Font(\"SansSerif\", Font.BOLD, 20);\n        g.setFont(f);\n        //g.setColor(needsHighlight() ? selectColor : lightGrayColor);\n        g.setColor(lightGrayColor);\n        String s = (volts[0] < threshold) ? \"L\" : \"H\";\n        if (isTernary()) {\n        if (volts[0] > 3.75)\n            s = \"2\";\n        else if (volts[0] > 1.25)\n            s = \"1\";\n        else\n            s = \"0\";\n        } else if (isNumeric())\n        s = (volts[0] < threshold) ? \"0\" : \"1\";\n        value = s;\n        setBbox(point1, lead1, 0);\n        drawCenteredText(g, s, x2, y2, true);\n        setVoltageColor(g, volts[0]);\n        drawThickLine(g, point1, lead1);\n        drawPosts(g);\n        g.setFont(oldf);\n    }\n    void stamp() {\n        if (needsPullDown())\n        sim.stampResistor(nodes[0], 0, 1e6);\n    }\n    double getVoltageDiff() { return volts[0]; }\n    void getInfo(String arr[]) {\n        arr[0] = \"logic output\";\n        arr[1] = (volts[0] < threshold) ? \"low\" : \"high\";\n        if (isNumeric())\n        arr[1] = value;\n        arr[2] = \"V = \" + getVoltageText(volts[0]);\n    }\n    public EditInfo getEditInfo(int n) {\n        if (n == 0)\n        return new EditInfo(\"Threshold\", threshold, 10, -10);\n        if (n == 1) {\n        EditInfo ei = new EditInfo(\"\", 0, -1, -1);\n        ei.checkbox = new Checkbox(\"Current Required\", needsPullDown());\n        return ei;\n        }\n        if (n == 2) {\n        EditInfo ei = new EditInfo(\"\", 0, 0, 0);\n        ei.checkbox = new Checkbox(\"Numeric\", isNumeric());\n        return ei;\n        }\n        if (n == 3) {\n        EditInfo ei = new EditInfo(\"\", 0, 0, 0);\n        ei.checkbox = new Checkbox(\"Ternary\", isTernary());\n        return ei;\n        }       \n        return null;\n    }\n    public void setEditValue(int n, EditInfo ei) {\n        if (n == 0)\n        threshold = ei.value;\n        if (n == 1) {\n        if (ei.checkbox.getState())\n            flags = FLAG_PULLDOWN;\n        else\n            flags &= ~FLAG_PULLDOWN;\n        }\n        if (n == 2) {\n        if (ei.checkbox.getState())\n            flags |= FLAG_NUMERIC;\n        else\n            flags &= ~FLAG_NUMERIC;\n        }\n        if (n == 3) {\n        if (ei.checkbox.getState())\n            flags |= FLAG_TERNARY;\n        else\n            flags &= ~FLAG_TERNARY;\n        }\n    }\n    int getShortcut() { return 'o'; }\n\n    }<｜fim▁end｜>",
    "response": "    final int FLAG_NUMERIC = 2;\n    final int FLAG_PULLDOWN = 4;\n    double threshold;\n    String value;\n    public LogicOutputElm(int xx, int yy) {\n        super(xx, yy);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.flair.blurb.data;\n\nimport java.util.HashMap;\n\npublic class Apps {\n\n    HashMap<String, String> apps;\n\n<｜fim▁hole｜>        apps = new HashMap<>();\n    }\n\n    synchronized public void changeCateory(String pkgname, String category) {\n        apps.put(pkgname, category);\n    }\n\n    synchronized public String getCategory(String pkgname) {\n        return apps.get(pkgname);\n    }\n}<｜fim▁end｜>",
    "response": "    public Apps() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.cassandra.utils;\n\nimport java.io.*;\nimport java.text.DecimalFormat;\nimport java.util.*;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor;\nimport org.apache.cassandra.concurrent.ThreadFactoryImpl;\nimport org.apache.cassandra.config.DatabaseDescriptor;\nimport org.apache.log4j.Logger;\n\npublic class FileUtils\n{\n    private static Logger logger_ = Logger.getLogger(FileUtils.class);\n    private static final DecimalFormat df_ = new DecimalFormat(\"#.##\");\n    private static final double kb_ = 1024d;\n    private static final double mb_ = 1024*1024d;\n    private static final double gb_ = 1024*1024*1024d;\n    private static final double tb_ = 1024*1024*1024*1024d;\n\n    private static ExecutorService deleter_ = new DebuggableThreadPoolExecutor(\"FILEUTILS-DELETE-POOL\");\n\n    public static void shutdown()\n    {\n        deleter_.shutdownNow();\n    }\n\n    public static void deleteWithConfirm(File file) throws IOException\n    {\n        assert file.exists() : \"attempted to delete non-existing file \" + file.getName();\n        if (!file.delete())\n        {\n            throw new IOException(\"Failed to delete \" + file.getName());\n        }\n    }\n\n    public static class Deleter implements Runnable\n    {\n        File file_ = null;\n\n        public Deleter(File f)\n        {\n            file_ = f;\n        }\n\n        public void run()\n        {\n            if(file_ == null)\n                return;\n            logger_.info(\"*** Deleting \" + file_.getName() + \" ***\");\n            if(!file_.delete())\n            {\n                logger_.warn(\"Warning : Unable to delete file \" + file_.getAbsolutePath());\n            }\n        }\n    }\n\n    public static class FileComparator implements Comparator<File>\n    {\n        public int compare(File f, File f2)\n        {\n            return (int)(f.lastModified() - f2.lastModified());\n        }\n    }\n\n    public static void createDirectory(String directory) throws IOException\n    {\n        File file = new File(directory);\n        if (!file.exists())\n        {\n            if (!file.mkdirs())\n            {\n                throw new IOException(\"unable to mkdirs \" + directory);\n            }\n        }\n    }\n\n    public static void createFile(String directory) throws IOException\n    {\n        File file = new File(directory);\n        if ( !file.exists() )\n            file.createNewFile();\n    }\n\n    public static boolean isExists(String filename) throws IOException\n    {\n        File file = new File(filename);\n        return file.exists();\n    }\n\n    public static boolean delete(String file)\n    {\n        File f = new File(file);\n        return f.delete();\n    }\n\n    public static void deleteAsync(String file) throws IOException\n    {\n        File f = new File(file);\n        Runnable deleter = new Deleter(f);\n        deleter_.submit(deleter);\n    }\n\n    public static boolean delete(List<String> files) throws IOException\n    {\n        boolean bVal = true;\n        for ( int i = 0; i < files.size(); ++i )\n        {\n            String file = files.get(i);\n            bVal = delete(file);\n            if (bVal)\n            {\n                if (logger_.isDebugEnabled())\n                  logger_.debug(\"Deleted file \" + file);\n                files.remove(i);\n            }\n        }\n        return bVal;\n    }\n\n    public static void delete(File[] files) throws IOException\n    {\n        for ( File file : files )\n        {\n            file.delete();\n        }\n    }\n\n    public static String stringifyFileSize(double value)\n    {\n        double d = 0d;\n        if ( value >= tb_ )\n        {\n            d = value / tb_;\n            String val = df_.format(d);\n            return val + \" TB\";\n        }\n        else if ( value >= gb_ )\n        {\n            d = value / gb_;\n            String val = df_.format(d);\n            return val + \" GB\";\n        }\n        else if ( value >= mb_ )\n        {\n            d = value / mb_;\n            String val = df_.format(d);\n            return val + \" MB\";\n        }\n        else if ( value >= kb_ )\n        {\n            d = value / kb_;\n            String val = df_.format(d);\n            return val + \" KB\";\n        }\n        else\n        {       \n            String val = df_.format(value);\n            return val + \" bytes.\";\n        }        \n    }\n\n    public static double stringToFileSize(String value)\n    {        \n        String[] peices = value.split(\" \");\n        double d = Double.valueOf(peices[0]);\n        if ( peices[1].equals(\"TB\") )\n        {\n            d *= tb_;\n        }\n        else if ( peices[1].equals(\"GB\") )\n        {\n            d *= gb_;\n        }\n        else if ( peices[1].equals(\"MB\") )\n        {\n            d *= mb_;\n        }\n        else if ( peices[1].equals(\"KB\") )\n        {\n            d *= kb_;\n        }\n        else\n        {\n            d *= 1;\n        }\n        return d;\n    }\n\n    /**\n     * calculate the total space used by a file or directory\n     * \n     * @param path the path\n     * @return total space used.\n     */\n    public static long getUsedDiskSpaceForPath(String path)\n    {\n        File file = new File(path);\n\n        if (file.isFile()) \n        {\n            return file.length();\n        }\n\n        long diskSpace = 0;\n        for (File childFile: file.listFiles())\n        {\n            diskSpace += getUsedDiskSpaceForPath(childFile.getPath());\n        }\n        return diskSpace;\n    }\n\n    public static long getUsedDiskSpace()\n    {\n        long diskSpace = 0L;\n        String[] directories = DatabaseDescriptor.getAllDataFileLocations();        \n        for ( String directory : directories )\n        {\n            diskSpace += getUsedDiskSpaceForPath(directory);\n        }\n\n        String value = df_.format(diskSpace);\n        return Long.parseLong(value);\n    }    \n\n<｜fim▁hole｜>     *                 delete and returns \"false\".\n     */\n    public static boolean deleteDir(File dir) {\n\n        if (dir.isDirectory()) {\n            String[] children = dir.list();\n            for (int i=0; i<children.length; i++) {\n                boolean success = deleteDir(new File(dir, children[i]));\n                if (!success) {\n                    return false;\n                }\n            }\n        }\n\n        // The directory is now empty so now it can be smoked\n        return dir.delete();\n    }\n\n    /**\n     * Create a hard link for a given file.\n     * \n     * @param sourceFile      The name of the source file.\n     * @param destinationFile The name of the destination file.\n     * \n     * @throws IOException if an error has occurred while creating the link.\n     */\n    public static void createHardLink(File sourceFile, File destinationFile) throws IOException\n    {\n        String osname = System.getProperty(\"os.name\");\n        ProcessBuilder pb;\n        if (osname.startsWith(\"Windows\"))\n        {\n            float osversion = Float.parseFloat(System.getProperty(\"os.version\"));\n            if (osversion >= 6.0f)\n            {\n                pb = new ProcessBuilder(\"cmd\", \"/c\", \"mklink\", \"/H\", destinationFile.getAbsolutePath(), sourceFile.getAbsolutePath());\n            }\n            else\n            {\n                pb = new ProcessBuilder(\"fsutil\", \"hardlink\", \"create\", destinationFile.getAbsolutePath(), sourceFile.getAbsolutePath());\n            }\n        }\n        else\n        {\n            pb = new ProcessBuilder(\"ln\", sourceFile.getAbsolutePath(), destinationFile.getAbsolutePath());\n            pb.redirectErrorStream(true);\n        }\n        Process p = pb.start();\n        try\n        {\n            p.waitFor();\n        }\n        catch (InterruptedException e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    /**\n     * Deletes all files and subdirectories under \"dir\".\n     * @param dir Directory to be deleted\n     * @return boolean Returns \"true\" if all deletions were successful.\n     *                 If a deletion fails, the method stops attempting to\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package synergynet.table.apps.realgravity;\n\nimport java.awt.Color;\nimport java.awt.Graphics2D;\nimport java.awt.Point;\nimport java.awt.RenderingHints;\nimport java.awt.geom.Point2D.Float;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.jme.scene.Spatial;\nimport com.jmex.awt.swingui.ImageGraphics;\n\nimport synergynet.contentsystem.ContentSystem;\nimport synergynet.table.gfx.FullScreenCanvas;\nimport synergyspace.jme.gfx.twod.DrawableSpatialImage;\n\npublic class UniverseSimulator extends FullScreenCanvas implements DrawableSpatialImage {\n    private static final long serialVersionUID = -1398525147529274059L;\n    public static final double timeCompressionSeconds = 13600; // seconds per second\n    public static final double metersPerPixel = 5e5;\n\n    protected double elapsedTime;\n    private double prevTime;\n    private Universe u;\n\n    protected Map<Long,FormingEntity> formingEntities = new HashMap<Long,FormingEntity>();\n    private ImageGraphics gfx;    \n\n    public UniverseSimulator(Universe u, String name, float width, float height, int imageWidth, int imageHeight, ContentSystem cs) {\n        super(name, cs);\n        this.u = u;\n        gfx = getGraphics();\n    }\n\n    private void renderFormingEntities(Graphics2D g2d) {\n        synchronized(formingEntities) {\n            for(FormingEntity fe : formingEntities.values()) {\n                fe.render(g2d);\n            }\n        }\n    }\n\n    private void updateTimeDelta() {\n        double currentTime = System.currentTimeMillis();\n        if (prevTime == 0) prevTime = currentTime - 1;\n        elapsedTime = ((currentTime - prevTime) / 1000) * timeCompressionSeconds;\n        prevTime = currentTime;     \n    }\n\n    private void addNewEntity(Float pos, Point.Double vel) {\n        MassEntity me = new MassEntity(\"\" + System.nanoTime(), MassEntity.EARTH.getMass(), MassEntity.EARTH.getRadius());\n        me.getPos().x = pos.x * metersPerPixel;\n        me.getPos().y = pos.y * metersPerPixel;\n        me.getVel().x = vel.x;\n        me.getVel().y = vel.y;\n        u.add(me);\n    }\n\n    public void cursorDragged(long id, int x, int y) {\n        FormingEntity fe;\n        synchronized(formingEntities) {\n            fe = formingEntities.get(id);\n        }\n        if(fe != null) {\n            Point pos = new Point(x,y);\n            fe.dragx = pos.x;\n            fe.dragy = pos.y;\n        }\n\n    }\n\n    public void cursorPressed(long cursorID, int x, int y) {\n        FormingEntity fe = new FormingEntity();\n        fe.id = cursorID;\n        Point pos = new Point(x,y);\n        fe.posx = pos.x;\n        fe.posy = pos.y;\n        fe.dragx = pos.x;\n        fe.dragy = pos.y;\n        synchronized(formingEntities) {\n            formingEntities.put(fe.id, fe);\n        }       \n    }\n\n    public void cursorReleased(long cursorID, int x, int y) {       \n        FormingEntity fe;\n        synchronized(formingEntities) {\n            fe = formingEntities.get(cursorID);\n<｜fim▁hole｜>            Point.Double vel = new Point.Double();\n            vel.x = -(fe.dragx - fe.posx) * metersPerPixel / timeCompressionSeconds;\n            vel.y = -(fe.dragy - fe.posy) * metersPerPixel / timeCompressionSeconds;\n            addNewEntity(new Float(fe.dragx - pixelWidth/2, fe.dragy - pixelHeight/2), vel);\n            synchronized(formingEntities) {\n                formingEntities.remove(fe.id);\n            }\n        }\n    }\n\n    public void draw() {\n        gfx.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n        gfx.setColor(Color.DARK_GRAY);\n        gfx.fillRect(0, 0,pixelWidth, pixelHeight);\n\n        gfx.setColor(Color.LIGHT_GRAY);\n        gfx.drawString(u.getEntityCount()+\"\", 20, 20);\n\n        updateTimeDelta();      \n        u.cullFarAway(metersPerPixel * pixelWidth);\n        u.updateMotion(elapsedTime);\n        u.render(gfx, pixelWidth, pixelHeight, metersPerPixel);     \n        renderFormingEntities(gfx);     \n    }\n\n    public Spatial getSpatial() {\n        return this;\n    }\n\n    @Override\n    public void cursorClicked(long cursorID, int x, int y) {}\n}<｜fim▁end｜>",
    "response": "        }\n        if(fe != null) {            \n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.intellij.codeInsight.editorActions;\n\nimport com.intellij.ide.DataManager;\n<｜fim▁hole｜>import com.intellij.openapi.editor.actionSystem.EditorActionHandler;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.util.Ref;\nimport com.intellij.openapi.util.TextRange;\nimport com.intellij.psi.*;\nimport com.intellij.util.Processor;\n\npublic class UnSelectWordHandler extends EditorActionHandler {\n  private final EditorActionHandler myOriginalHandler;\n\n  public UnSelectWordHandler(EditorActionHandler originalHandler) {\n    myOriginalHandler = originalHandler;\n  }\n\n  @Override\n  public void execute(Editor editor, DataContext dataContext) {\n    Project project = PlatformDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(editor.getComponent()));\n    Document document = editor.getDocument();\n    final PsiFile file = PsiDocumentManager.getInstance(project).getPsiFile(document);\n\n    if (file == null) {\n      if (myOriginalHandler != null) {\n        myOriginalHandler.execute(editor, dataContext);\n      }\n      return;\n    }\n\n    PsiDocumentManager.getInstance(project).commitAllDocuments();\n    doAction(editor, file);\n  }\n\n  private static void doAction(Editor editor, PsiFile file) {\n    if (file instanceof PsiCompiledFile) {\n      file = ((PsiCompiledFile)file).getDecompiledPsiFile();\n      if (file == null) return;\n    }\n\n    if (!editor.getSelectionModel().hasSelection()) {\n      return;\n    }\n\n    CharSequence text = editor.getDocument().getCharsSequence();\n\n    int cursorOffset = editor.getCaretModel().getOffset();\n\n    if (cursorOffset > 0 && cursorOffset < text.length() &&\n       !Character.isJavaIdentifierPart(text.charAt(cursorOffset)) &&\n       Character.isJavaIdentifierPart(text.charAt(cursorOffset - 1))) {\n      cursorOffset--;\n    }\n\n    PsiElement element = file.findElementAt(cursorOffset);\n\n    if (element instanceof PsiWhiteSpace && cursorOffset > 0) {\n      PsiElement anotherElement = file.findElementAt(cursorOffset - 1);\n\n      if (!(anotherElement instanceof PsiWhiteSpace)) {\n        element = anotherElement;\n      }\n    }\n\n    if (element instanceof PsiWhiteSpace) {\n      PsiElement nextSibling = element.getNextSibling();\n      if (nextSibling == null) {\n        element = element.getParent();\n        if (element == null || element instanceof PsiFile) {\n          return;\n        }\n        nextSibling = element.getNextSibling();\n        if (nextSibling == null) {\n          return;\n        }\n      }\n      element = nextSibling;\n      cursorOffset = element.getTextRange().getStartOffset();\n    }\n\n    final TextRange selectionRange = new TextRange(editor.getSelectionModel().getSelectionStart(), editor.getSelectionModel().getSelectionEnd());\n\n    final Ref<TextRange> maximumRange = new Ref<TextRange>();\n\n    final int finalCursorOffset = cursorOffset;\n    SelectWordUtil.processRanges(element, text, cursorOffset, editor, new Processor<TextRange>() {\n      @Override\n      public boolean process(TextRange range) {\n        if (selectionRange.contains(range) && !range.equals(selectionRange) && (range.contains(finalCursorOffset) || finalCursorOffset == range.getEndOffset())) {\n          if (maximumRange.get() == null || range.contains(maximumRange.get())) {\n            maximumRange.set(range);\n          }\n        }\n\n        return false;\n      }\n    });\n\n    TextRange range = maximumRange.get();\n\n    if (range == null) {\n      editor.getSelectionModel().setSelection(cursorOffset, cursorOffset);\n    }\n    else {\n      editor.getSelectionModel().setSelection(range.getStartOffset(), range.getEndOffset());\n    }\n  }\n}<｜fim▁end｜>",
    "response": "import com.intellij.openapi.actionSystem.DataContext;\nimport com.intellij.openapi.actionSystem.PlatformDataKeys;\nimport com.intellij.openapi.editor.Document;\nimport com.intellij.openapi.editor.Editor;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.luxvacuos.voxel.client.ui.windows;\n\nimport static net.luxvacuos.lightengine.universal.core.subsystems.CoreSubsystem.LANG;\n\nimport net.luxvacuos.lightengine.client.core.subsystems.GraphicalSubsystem;\nimport net.luxvacuos.lightengine.client.rendering.nanovg.WindowMessage;\nimport net.luxvacuos.lightengine.client.rendering.nanovg.themes.Theme;\nimport net.luxvacuos.lightengine.client.ui.Alignment;\nimport net.luxvacuos.lightengine.client.ui.Button;\nimport net.luxvacuos.lightengine.client.ui.ComponentWindow;\nimport net.luxvacuos.lightengine.client.ui.ModalWindow;\nimport net.luxvacuos.lightengine.universal.core.TaskManager;\nimport net.luxvacuos.lightengine.universal.core.states.StateMachine;\n\npublic class MainWindow extends ComponentWindow {\n\n    public MainWindow(int x, int y, int w, int h) {\n        super(x, y, w, h, LANG.getRegistryItem(\"voxel.mainwindow.name\"));\n    }\n\n    @Override\n    public void initApp() {\n        super.setBackgroundColor(0.4f, 0.4f, 0.4f, 1f);\n\n        Button playButton = new Button(0, 120, 200, 40, LANG.getRegistryItem(\"voxel.mainwindow.btnplay\"));\n        Button playMPButton = new Button(0, 60, 200, 40, LANG.getRegistryItem(\"voxel.mainwindow.btnmp\"));\n        Button optionsButton = new Button(0, 0, 200, 40, LANG.getRegistryItem(\"voxel.mainwindow.btnoptions\"));\n        Button aboutButton = new Button(0, -60, 200, 40, LANG.getRegistryItem(\"voxel.mainwindow.btnabout\"));\n        Button exitButton = new Button(0, -120, 200, 40, LANG.getRegistryItem(\"voxel.mainwindow.btnexit\"));\n\n        playButton.setPreicon(Theme.ICON_BLACK_RIGHT_POINTING_TRIANGLE);\n        playMPButton.setPreicon(Theme.ICON_BLACK_RIGHT_POINTING_TRIANGLE);\n        optionsButton.setPreicon(Theme.ICON_GEAR);\n        aboutButton.setPreicon(Theme.ICON_INFORMATION_SOURCE);\n        exitButton.setPreicon(Theme.ICON_LOGIN);\n\n        playButton.setAlignment(Alignment.CENTER);\n        playButton.setWindowAlignment(Alignment.CENTER);\n        playMPButton.setAlignment(Alignment.CENTER);\n        playMPButton.setWindowAlignment(Alignment.CENTER);\n        optionsButton.setAlignment(Alignment.CENTER);\n        optionsButton.setWindowAlignment(Alignment.CENTER);\n        aboutButton.setAlignment(Alignment.CENTER);\n        aboutButton.setWindowAlignment(Alignment.CENTER);\n        exitButton.setAlignment(Alignment.CENTER);\n        exitButton.setWindowAlignment(Alignment.CENTER);\n\n        playButton.setOnButtonPress(() -> {\n            GraphicalSubsystem.getWindowManager().addWindow(new WorldWindow(w / 2 - 420 + x, y - 40, 840, 600));\n<｜fim▁hole｜>\n        optionsButton.setOnButtonPress(() -> {\n            GraphicalSubsystem.getWindowManager().addWindow(new OptionsWindow());\n        });\n\n        aboutButton.setOnButtonPress(() -> {\n            GraphicalSubsystem.getWindowManager().addWindow(new AboutWindow(w / 2 - 420 + x, y - 40, 840, 600));\n        });\n\n        exitButton.setOnButtonPress(() -> {\n            super.closeWindow();\n        });\n\n        super.addComponent(playButton);\n        super.addComponent(playMPButton);\n        super.addComponent(optionsButton);\n        super.addComponent(aboutButton);\n        super.addComponent(exitButton);\n\n        super.setWindowClose(WindowClose.DO_NOTHING);\n        super.initApp();\n    }\n\n    @Override\n    public void processWindowMessage(int message, Object param) {\n        switch (message) {\n        case WindowMessage.WM_CLOSE:\n            WindowClose wc = (WindowClose) param;\n            switch (wc) {\n            case DISPOSE:\n                break;\n            case DO_NOTHING:\n                ModalWindow window = new ModalWindow(340, 200, \"\", \"Exit Demo\");\n                GraphicalSubsystem.getWindowManager().addWindow(window);\n                TaskManager.tm.addTaskMainThread(() -> {\n                    window.setOnAccept(() -> {\n                        new Thread(() -> {\n                            while (GraphicalSubsystem.getWindowManager().getTotalWindows() > 0)\n                                try {\n                                    Thread.sleep(400);\n                                } catch (InterruptedException e) {\n                                    e.printStackTrace();\n                                }\n                            TaskManager.tm.addTaskMainThread(() -> StateMachine.dispose());\n                        }).start();\n                        super.setWindowClose(WindowClose.DISPOSE);\n                        GraphicalSubsystem.getWindowManager().closeAllWindows();\n                    });\n                });\n                break;\n            }\n            break;\n        }\n        super.processWindowMessage(message, param);\n    }\n\n}<｜fim▁end｜>",
    "response": "        });\n\n        playMPButton.setOnButtonPress(() -> {\n            GraphicalSubsystem.getWindowManager().addWindow(new MultiplayerMenu(w / 2 - 250 + x, y - 100, 500, 400));\n        });\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.oss.track_brand;\n\nimport java.io.*;\nimport java.net.URL;\n\nimport org.apache.http.client.ClientProtocolException;\nimport org.json.*;\n\nimport android.util.Log;\nimport java.net.*;\n\npublic class JSONParser {\n\n    static JSONObject jObj = null;\n    static String json = \"\";\n<｜fim▁hole｜>    public JSONObject getJSONFromUrl(String url) {\n\n        // Making HTTP request\n        try {\n            // defaultHttpClient\n            URL brand = new URL(url);\n            URLConnection brandname = brand.openConnection();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(brandname.getInputStream(), \"UTF-8\"));\n            StringBuilder sb = new StringBuilder();\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                sb.append(line + \"\\n\");\n            }\n            json = sb.toString();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        } catch (ClientProtocolException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        catch (Exception e) {\n            Log.e(\"Buffer Error\", \"Error converting result \" + e.toString());\n        }\n\n        // try parse the string to a JSON object\n        try {\n            jObj = new JSONObject(json);\n        } catch (JSONException e) {\n            Log.e(\"JSON Parser\", \"Error parsing data \" + e.toString());\n        }\n         return jObj;\n    }\n}<｜fim▁end｜>",
    "response": "\n    // constructor\n    public JSONParser() {}\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.geronimo.testsuite.ds.web;\n\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.naming.Context;\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.sql.DataSource;\n\n@WebServlet(\"/defaultjndiservlet\")\npublic class DefaultJndiServlet extends HttpServlet {\n   private static final long serialVersionUID = 1L;\n\n    /**\n     * @see javax.servlet.http.HttpServlet#doGet(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)\n     */\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        performTask(request, response);\n    }\n\n    /**\n     * @see javax.servlet.http.HttpServlet#doPost(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response)\n     */\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        performTask(request, response);\n    }\n\n    protected void performTask(HttpServletRequest request, HttpServletResponse response){\n        try {\n            PrintWriter pw = response.getWriter();\n            try {\n                Context ctx = new InitialContext();\n                ctx.createSubcontext(\"foo\");\n                ctx.bind(\"foo/bar\", \"value\");\n                String value = (String) ctx.lookup(\"foo/bar\");\n                if (\"value\".equals(value)) {\n                    pw.println(\"Value bound and retrieved from jndi default context\");\n                } else{\n                    pw.println(\"Value not bound or not retrieved from jndi default context\");\n<｜fim▁hole｜>            } catch (NamingException e) {\n                e.printStackTrace(pw);\n            }\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "                }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.siu.android.volleyball.toolbox;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Bitmap.Config;\nimport android.graphics.BitmapFactory;\n\nimport com.android.volley.DefaultRetryPolicy;\nimport com.android.volley.NetworkResponse;\nimport com.android.volley.ParseError;\n<｜fim▁hole｜>import com.siu.android.volleyball.response.SingleResponseListener;\n\npublic class BallImageRequest extends NetworkRequest<Bitmap> {\n    /**\n     * Socket timeout in milliseconds for image requests\n     */\n    private static final int IMAGE_TIMEOUT_MS = 1000;\n\n    /**\n     * Default number of retries for image requests\n     */\n    private static final int IMAGE_MAX_RETRIES = 2;\n\n    /**\n     * Default backoff multiplier for image requests\n     */\n    private static final float IMAGE_BACKOFF_MULT = 2f;\n\n    private final Config mDecodeConfig;\n    private final int mMaxWidth;\n    private final int mMaxHeight;\n\n    /**\n     * Decoding lock so that we don't decode more than one image at a time (to avoid OOM's)\n     */\n    private static final Object sDecodeLock = new Object();\n\n    /**\n     * Creates a new image request, decoding to a maximum specified width and\n     * height. If both width and height are zero, the image will be decoded to\n     * its natural size. If one of the two is nonzero, that dimension will be\n     * clamped and the other one will be set to preserve the image's aspect\n     * ratio. If both width and height are nonzero, the image will be decoded to\n     * be fit in the rectangle of dimensions width x height while keeping its\n     * aspect ratio.\n     *\n     * @param url           URL of the image\n     * @param listener      Listener to receive the decoded bitmap\n     * @param maxWidth      Maximum width to decode this bitmap to, or zero for none\n     * @param maxHeight     Maximum height to decode this bitmap to, or zero for\n     *                      none\n     * @param decodeConfig  Format to decode the bitmap to\n     * @param errorListener Error listener, or null to ignore errors\n     */\n    public BallImageRequest(String url, SingleResponseListener<Bitmap> listener, int maxWidth, int maxHeight,\n                            Config decodeConfig, Response.ErrorListener errorListener) {\n        super(Method.GET, url, listener, errorListener);\n        setRetryPolicy(\n                new DefaultRetryPolicy(IMAGE_TIMEOUT_MS, IMAGE_MAX_RETRIES, IMAGE_BACKOFF_MULT));\n        mDecodeConfig = decodeConfig;\n        mMaxWidth = maxWidth;\n        mMaxHeight = maxHeight;\n    }\n\n    @Override\n    public Priority getPriority() {\n        return Priority.LOW;\n    }\n\n    /**\n     * Scales one side of a rectangle to fit aspect ratio.\n     *\n     * @param maxPrimary      Maximum size of the primary dimension (i.e. width for\n     *                        max width), or zero to maintain aspect ratio with secondary\n     *                        dimension\n     * @param maxSecondary    Maximum size of the secondary dimension, or zero to\n     *                        maintain aspect ratio with primary dimension\n     * @param actualPrimary   Actual size of the primary dimension\n     * @param actualSecondary Actual size of the secondary dimension\n     */\n    private static int getResizedDimension(int maxPrimary, int maxSecondary, int actualPrimary,\n                                           int actualSecondary) {\n        // If no dominant value at all, just return the actual.\n        if (maxPrimary == 0 && maxSecondary == 0) {\n            return actualPrimary;\n        }\n\n        // If primary is unspecified, scale primary to match secondary's scaling ratio.\n        if (maxPrimary == 0) {\n            double ratio = (double) maxSecondary / (double) actualSecondary;\n            return (int) (actualPrimary * ratio);\n        }\n\n        if (maxSecondary == 0) {\n            return maxPrimary;\n        }\n\n        double ratio = (double) actualSecondary / (double) actualPrimary;\n        int resized = maxPrimary;\n        if (resized * ratio > maxSecondary) {\n            resized = (int) (maxSecondary / ratio);\n        }\n        return resized;\n    }\n\n    /**\n     * The real guts of parseNetworkResponse. Broken out for readability.\n     */\n    private BallResponse<Bitmap> doParse(NetworkResponse response) {\n        byte[] data = response.data;\n        BitmapFactory.Options decodeOptions = new BitmapFactory.Options();\n        Bitmap bitmap = null;\n        if (mMaxWidth == 0 && mMaxHeight == 0) {\n            decodeOptions.inPreferredConfig = mDecodeConfig;\n            bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, decodeOptions);\n        } else {\n            // If we have to resize this image, first get the natural bounds.\n            decodeOptions.inJustDecodeBounds = true;\n            BitmapFactory.decodeByteArray(data, 0, data.length, decodeOptions);\n            int actualWidth = decodeOptions.outWidth;\n            int actualHeight = decodeOptions.outHeight;\n\n            // Then compute the dimensions we would ideally like to decode to.\n            int desiredWidth = getResizedDimension(mMaxWidth, mMaxHeight,\n                    actualWidth, actualHeight);\n            int desiredHeight = getResizedDimension(mMaxHeight, mMaxWidth,\n                    actualHeight, actualWidth);\n\n            // Decode to the nearest power of two scaling factor.\n            decodeOptions.inJustDecodeBounds = false;\n            // TODO(ficus): Do we need this or is it okay since API 8 doesn't support it?\n            // decodeOptions.inPreferQualityOverSpeed = PREFER_QUALITY_OVER_SPEED;\n            decodeOptions.inSampleSize =\n                    findBestSampleSize(actualWidth, actualHeight, desiredWidth, desiredHeight);\n            Bitmap tempBitmap =\n                    BitmapFactory.decodeByteArray(data, 0, data.length, decodeOptions);\n\n            // If necessary, scale down to the maximal acceptable size.\n            if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth ||\n                    tempBitmap.getHeight() > desiredHeight)) {\n                bitmap = Bitmap.createScaledBitmap(tempBitmap,\n                        desiredWidth, desiredHeight, true);\n                tempBitmap.recycle();\n            } else {\n                bitmap = tempBitmap;\n            }\n        }\n\n        if (bitmap == null) {\n            return BallResponse.error(new ParseError(response));\n        } else {\n            return BallResponse.success(bitmap, HttpHeaderParser.parseCacheHeaders(response));\n        }\n    }\n\n    @Override\n    protected BallResponse<Bitmap> parseBallNetworkResponse(NetworkResponse response) {\n        // Serialize all decode on a global lock to reduce concurrent heap usage.\n        synchronized (sDecodeLock) {\n            try {\n                return doParse(response);\n            } catch (OutOfMemoryError e) {\n                VolleyLog.e(\"Caught OOM for %d byte image, url=%s\", response.data.length, getUrl());\n                return BallResponse.error(new ParseError(e));\n            }\n        }\n    }\n\n    /**\n     * Returns the largest power-of-two divisor for use in downscaling a bitmap\n     * that will not result in the scaling past the desired dimensions.\n     *\n     * @param actualWidth   Actual width of the bitmap\n     * @param actualHeight  Actual height of the bitmap\n     * @param desiredWidth  Desired width of the bitmap\n     * @param desiredHeight Desired height of the bitmap\n     */\n    // Visible for testing.\n    static int findBestSampleSize(\n            int actualWidth, int actualHeight, int desiredWidth, int desiredHeight) {\n        double wr = (double) actualWidth / desiredWidth;\n        double hr = (double) actualHeight / desiredHeight;\n        double ratio = Math.min(wr, hr);\n        float n = 1.0f;\n        while ((n * 2) <= ratio) {\n            n *= 2;\n        }\n\n        return (int) n;\n    }\n}<｜fim▁end｜>",
    "response": "import com.android.volley.Response;\nimport com.android.volley.VolleyLog;\nimport com.android.volley.toolbox.HttpHeaderParser;\nimport com.siu.android.volleyball.BallResponse;\nimport com.siu.android.volleyball.request.NetworkRequest;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.azure.resourcemanager.edgeorder.generated;\n\nimport com.azure.core.util.Context;\n\npublic final class ResourceProviderGetByResourceGroupSamples {\n    /*\n     * x-ms-original-file: specification/edgeorder/resource-manager/Microsoft.EdgeOrder/stable/2021-12-01/examples/GetAddressByName.json\n<｜fim▁hole｜>     *\n     * @param manager Entry point to EdgeOrderManager.\n     */\n    public static void getAddressByName(com.azure.resourcemanager.edgeorder.EdgeOrderManager manager) {\n        manager.resourceProviders().getByResourceGroupWithResponse(\"TestRG\", \"TestMSAddressName\", Context.NONE);\n    }\n}<｜fim▁end｜>",
    "response": "     */\n    /**\n     * Sample code: GetAddressByName.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.elasticsearch.search.aggregations.bucket.terms;\n\nimport java.io.IOException;\nimport java.nio.CharBuffer;\n\nimport org.apache.lucene.util.BytesRef;\nimport org.elasticsearch.common.xcontent.ObjectParser;\nimport org.elasticsearch.common.xcontent.XContentBuilder;\nimport org.elasticsearch.common.xcontent.XContentParser;\n\npublic class ParsedStringRareTerms extends ParsedRareTerms {\n    @Override\n    public String getType() {\n        return StringRareTerms.NAME;\n    }\n\n    private static final ObjectParser<ParsedStringRareTerms, Void> PARSER =\n        new ObjectParser<>(ParsedStringRareTerms.class.getSimpleName(), true, ParsedStringRareTerms::new);\n\n    static {\n        declareParsedTermsFields(PARSER, ParsedBucket::fromXContent);\n    }\n\n    public static ParsedStringRareTerms fromXContent(XContentParser parser, String name) throws IOException {\n        ParsedStringRareTerms aggregation = PARSER.parse(parser, null);\n        aggregation.setName(name);\n        return aggregation;\n    }\n<｜fim▁hole｜>        @Override\n        public Object getKey() {\n            return getKeyAsString();\n        }\n\n        @Override\n        public String getKeyAsString() {\n            String keyAsString = super.getKeyAsString();\n            if (keyAsString != null) {\n                return keyAsString;\n            }\n            if (key != null) {\n                return key.utf8ToString();\n            }\n            return null;\n        }\n\n        public Number getKeyAsNumber() {\n            if (key != null) {\n                return Double.parseDouble(key.utf8ToString());\n            }\n            return null;\n        }\n\n        @Override\n        protected XContentBuilder keyToXContent(XContentBuilder builder) throws IOException {\n            return builder.field(CommonFields.KEY.getPreferredName(), getKey());\n        }\n\n        static ParsedStringRareTerms.ParsedBucket fromXContent(XContentParser parser) throws IOException {\n            return parseRareTermsBucketXContent(parser, ParsedStringRareTerms.ParsedBucket::new, (p, bucket) -> {\n                CharBuffer cb = p.charBufferOrNull();\n                if (cb == null) {\n                    bucket.key = null;\n                } else {\n                    bucket.key = new BytesRef(cb);\n                }\n            });\n        }\n    }\n}<｜fim▁end｜>",
    "response": "\n    public static class ParsedBucket extends ParsedRareTerms.ParsedBucket {\n\n        private BytesRef key;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.model;\n\nimport java.io.Serializable;\n\npublic class ServiceOrder implements Serializable {\n    private String orderId;\n    private String productName;\n    private  String prodoctPrice;\n    private String buyersId;\n    private int status;\n    private String productId;\n    private String createTime;\n    private String backTime;\n\n    public String getBackTime() {\n        return backTime;\n    }\n\n    public void setBackTime(String backTime) {\n        this.backTime = backTime;\n    }\n\n    public String getProductId() {\n        return productId;\n    }\n\n    public void setProductId(String productId) {\n        this.productId = productId;\n    }\n\n    public String getCreateTime() {\n        return createTime;\n    }\n\n    public void setCreateTime(String createTime) {\n        this.createTime = createTime;\n    }\n<｜fim▁hole｜>        return status;\n    }\n\n    public void setStatus(int status) {\n        this.status = status;\n    }\n\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public void setOrderId(String orderId) {\n        this.orderId = orderId;\n    }\n\n    public String getProductName() {\n        return productName;\n    }\n\n    public void setProductName(String productName) {\n        this.productName = productName;\n    }\n\n    public String getProdoctPrice() {\n        return prodoctPrice;\n    }\n\n    public void setProdoctPrice(String prodoctPrice) {\n        this.prodoctPrice = prodoctPrice;\n    }\n\n    public String getBuyersId() {\n        return buyersId;\n    }\n\n    public void setBuyersId(String buyersId) {\n        this.buyersId = buyersId;\n    }\n}<｜fim▁end｜>",
    "response": "\n    public int getStatus() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package beast.evolution.substitutionmodel;\n\nimport beast.core.CalculationNode;\nimport beast.core.Description;\nimport beast.core.Input;\nimport beast.core.Input.Validate;\nimport beast.evolution.datatype.DataType;\nimport beast.evolution.tree.Node;\n\n@Description(\"Specifies substitution model from which a transition probability matrix for a given \" +\n        \"distance can be obtained.\")\npublic interface SubstitutionModel {\n\n    /**\n     * get the complete transition probability matrix for the given distance\n     * determined as (startTime-endTime)*rate\n     *\n     * @param node       tree node for which to calculate the probabilities\n     * @param startTime\n     * @param endTime   we assume start time is larger than end time\n     * @param rate      rate, includes gamma rates and branch rates\n     * @param matrix     an array to store the matrix which represents the transition probability\n     *                   matrix in the form of an array. So, matrix must be of size n*n where n is number of states.\n     */\n    void getTransitionProbabilities(Node node, double startTime, double endTime, double rate, double[] matrix);\n\n    /**\n     * @param node In most cases, the rate matrix is independent of the tree, but if it changes\n     *             throughout a tree, the node can provide this information.\n     * @return instantaneous rate matrix Q, where Q is flattened into an array\n     *         This is a square matrix, where rows add to zero, or null when no rate\n     *         matrix is available.\n     */\n    double[] getRateMatrix(Node node);\n\n    /**\n     * return frequencies for root distribution *\n     */\n    double[] getFrequencies();\n\n    public int getStateCount();\n\n    /**\n     * This function returns the Eigen decomposition of the instantaneous rate matrix if available.\n     * Such Eigen decomposition may not be available because the substitution model changes over time,\n     * for example, when one HKY model applies for some time t less than threshold time T while a GTR\n     * model applies when t >= T.\n     *\n     * @param node In most cases, the rate matrix, and thus the Eigen decomposition, is independent of the tree,\n     *             but if it changes throughout a tree, the node can provide this information.\n     * @return the EigenDecomposition, null if not available\n     */\n    EigenDecomposition getEigenDecomposition(Node node);\n\n    /**\n     * @return whether substitution model can return complex diagonalizations\n     *         If so, for example, a treelikelihood needs to be able to deal with this.\n     */\n    boolean canReturnComplexDiagonalization();\n\n    /**\n     * return true if this substitution model is suitable for the data type\n     */\n    boolean canHandleDataType(DataType dataType);\n\n    /**\n     * basic implementation of a SubstitutionModel bringing together relevant super class*\n     */\n    @Description(value = \"Base implementation of a substitution model.\", isInheritable = false)\n    public abstract class Base extends CalculationNode implements SubstitutionModel {\n        final public Input<Frequencies> frequenciesInput =\n                new Input<>(\"frequencies\", \"substitution model equilibrium state frequencies\", Validate.REQUIRED);\n\n        /**\n         * shadows frequencies, or can be set by subst model *\n         */\n        protected Frequencies frequencies;\n\n        /**\n         * number of states *\n         */\n        protected int nrOfStates;\n\n        @Override\n        public void initAndValidate() {\n            frequencies = frequenciesInput.get();\n        }\n\n        @Override\n        public double[] getFrequencies() {\n            return frequencies.getFreqs();\n        }\n\n        @Override\n        public int getStateCount() {\n            return nrOfStates;\n        }\n<｜fim▁hole｜>        public boolean canReturnComplexDiagonalization() {\n            return false;\n        }\n\n        @Override\n        public double[] getRateMatrix(Node node) {\n            return null;\n        }\n\n    } // class Base\n\n    /**\n     * basic implementation of a SubstitutionModel bringing together relevant super class*\n     */\n    @Description(value = \"Base implementation of a nucleotide substitution model.\", isInheritable = false)\n    public abstract class NucleotideBase extends Base {\n\n        public double freqA, freqC, freqG, freqT,\n        // A+G\n        freqR,\n        // C+T\n        freqY;\n\n        @Override\n        public int getStateCount() {\n            assert nrOfStates == 4;\n            return nrOfStates;\n        }\n\n        protected void calculateFreqRY() {\n            double[] freqs = frequencies.getFreqs();\n            freqA = freqs[0];\n            freqC = freqs[1];\n            freqG = freqs[2];\n            freqT = freqs[3];\n            freqR = freqA + freqG;\n            freqY = freqC + freqT;\n        }\n\n    } // class NucleotideBase\n\n} // class SubstitutionModel<｜fim▁end｜>",
    "response": "\n        @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.tropicraft.world.biomes;\n\nimport java.util.Random;\n\nimport net.minecraft.world.World;\nimport net.tropicraft.world.worldgen.WorldGenCoffeePlant;\nimport net.tropicraft.world.worldgen.WorldGenForestAltarRuin;\nimport net.tropicraft.world.worldgen.WorldGenHomeTree;\nimport net.tropicraft.world.worldgen.WorldGenTCUndergrowth;\nimport net.tropicraft.world.worldgen.WorldGenTallTree;\nimport net.tropicraft.world.worldgen.WorldGenTualang;\nimport net.tropicraft.world.worldgen.WorldGenUpTree;\n\npublic class BiomeGenRainforest extends BiomeGenTropicraft {\n\n    private static final int COFFEE_PLANT_AMOUNT = 2;\n    private static final int ALTAR_CHANCE = 70;\n    private static final int TALL_TREE_CHANCE = 2;\n    private static final int UP_TREE_CHANCE = 2;\n    private static final int UNDERGROWTH_AMOUNT = 15;\n    private static final int SMALL_TUALANG_AMOUNT = 4;\n    private static final int LARGE_TUALANG_AMOUNT = 2;\n    private static final int HOME_TREE_RARITY = 80;\n\n    public BiomeGenRainforest(int biomeID) {\n        super(biomeID);\n    }\n\n    @Override\n    public void decorate(World world, Random rand, int x, int z) {\n<｜fim▁hole｜>        if(rand.nextInt(HOME_TREE_RARITY) == 0)\n        {\n            int cx = x/* * 16*/;\n        //  System.out.println(\"Trying!!!\");\n            int cz = z/* * 16*/;\n            int xx = rand.nextInt(16) + cx + 8;\n            int zz= rand.nextInt(16) + cz + 8;\n            new WorldGenHomeTree(world, rand).generate(xx, 0, zz);\n        }\n\n        if(rand.nextInt(ALTAR_CHANCE) == 0) {\n            new WorldGenForestAltarRuin(world, rand).generate(randCoord(rand, x, 16), 0, randCoord(rand, x, 16));\n        }\n\n        if(rand.nextInt(TALL_TREE_CHANCE) == 0) {\n            int i = randCoord(rand, x, 16);\n            int k = randCoord(rand, z, 16);\n            new WorldGenTallTree(world, rand).generate(i, getTerrainHeightAt(world, i, k), k);\n        }\n\n        if(rand.nextInt(UP_TREE_CHANCE) == 0) {\n            int i = randCoord(rand, x, 16);\n            int k = randCoord(rand, z, 16);\n            new WorldGenUpTree(world, rand).generate(i, getTerrainHeightAt(world, i, k), k);            \n        }\n\n        for(int a = 0; a < SMALL_TUALANG_AMOUNT; a++) {\n            int i = randCoord(rand, x, 16);\n            int k = randCoord(rand, z, 16);\n            new WorldGenTualang(world, rand, 16, 9).generate(i, getTerrainHeightAt(world, i, k), k);\n        }\n\n        for(int a = 0; a < LARGE_TUALANG_AMOUNT; a++) {\n            int i = randCoord(rand, x, 16);\n            int k = randCoord(rand, z, 16);\n            new WorldGenTualang(world, rand, 25, 11).generate(i, getTerrainHeightAt(world, i, k), k);\n        }\n\n        for(int a = 0; a < UNDERGROWTH_AMOUNT; a++) {\n            int i = randCoord(rand, x, 16);\n            int k = randCoord(rand, z, 16);\n            new WorldGenTCUndergrowth(world, rand).generate(i, getTerrainHeightAt(world, i, k), k);\n        }\n\n        for(int a = 0; a < COFFEE_PLANT_AMOUNT; a++) {\n            int i = randCoord(rand, x, 16);\n            int k = randCoord(rand, z, 16);\n            new WorldGenCoffeePlant(world, rand).generate(i, getTerrainHeightAt(world, i, k), k);\n        }\n\n        super.decorate(world, rand, x, z);\n    }\n\n}<｜fim▁end｜>",
    "response": "\n        if (DISABLEDECORATION) {\n            System.out.println(\"decoration disabled via BiomeGenTropics.DISABLEDECORATION, \" + this);\n            return;\n        }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.camel.component.git.consumer;\n\nimport java.io.File;\nimport java.io.IOException;\n\nimport org.apache.camel.Processor;\nimport org.apache.camel.component.git.GitEndpoint;\nimport org.apache.camel.impl.ScheduledPollConsumer;\nimport org.eclipse.jgit.api.Git;\nimport org.eclipse.jgit.lib.Repository;\nimport org.eclipse.jgit.storage.file.FileRepositoryBuilder;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic abstract class AbstractGitConsumer extends ScheduledPollConsumer {\n\n    private static final Logger LOG = LoggerFactory.getLogger(AbstractGitConsumer.class);\n\n    private final GitEndpoint endpoint;\n\n    private Repository repo;\n\n    private Git git;\n\n    public AbstractGitConsumer(GitEndpoint endpoint, Processor processor) {\n        super(endpoint, processor);\n        this.endpoint = endpoint;\n    }\n\n    @Override\n    protected void doStart() throws Exception {\n        super.doStart();\n        this.repo = getLocalRepository();\n        this.git = new Git(repo);\n    }\n\n    @Override\n    protected void doStop() throws Exception {\n        super.doStop();\n        repo.close();\n        git.close();\n    }\n\n<｜fim▁hole｜>        FileRepositoryBuilder builder = new FileRepositoryBuilder();\n        Repository repo = null;\n        try {\n            repo = builder.setGitDir(new File(endpoint.getLocalPath(), \".git\")).readEnvironment() // scan environment GIT_* variables\n                    .findGitDir() // scan up the file system tree\n                    .build();\n        } catch (IOException e) {\n            LOG.error(\"There was an error, cannot open {} repository\", endpoint.getLocalPath());\n            throw e;\n        }\n        return repo;\n    }\n\n    protected Repository getRepository() {\n        return repo;\n    }\n\n    protected Git getGit() {\n        return git;\n    }\n\n    protected abstract int poll() throws Exception;\n}<｜fim▁end｜>",
    "response": "    private Repository getLocalRepository() throws IOException {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.facebook.buck.step;\n\nimport com.facebook.buck.core.build.execution.context.StepExecutionContext;\nimport com.facebook.buck.core.model.BuildTarget;\nimport com.facebook.buck.core.util.log.Logger;\nimport com.facebook.buck.event.StepEvent;\nimport com.google.common.collect.ImmutableList;\nimport java.io.IOException;\nimport java.util.Optional;\n\npublic final class StepRunner {\n\n  private static final Logger LOG = Logger.get(StepRunner.class);\n\n  private StepRunner() {}\n\n  /**\n   * Runs a single {@link Step}\n   *\n   * @param context the {@link StepExecutionContext} containing information and console logging\n   *     utilities for the {@link Step}\n   * @param step the {@link Step} to execute\n   * @throws StepFailedException if the step failed\n   * @throws InterruptedException if an interrupt occurred while executing the {@link Step}\n   */\n  public static void runStep(\n      StepExecutionContext context, Step step, Optional<BuildTarget> buildTarget)\n      throws StepFailedException, InterruptedException {\n    if (context.getVerbosity().shouldPrintCommand()) {\n      context.getStdErr().println(step.getDescription(context));\n    }\n\n    String stepShortName = step.getShortName();\n    String stepDescription = step.getDescription(context);\n    StepEvent.Started started = StepEvent.started(stepShortName, stepDescription);\n    String buildTargetName = buildTarget.map(BuildTarget::getFullyQualifiedName).orElse(\"N/A\");\n    logStepEvent(context, started, buildTargetName);\n    context.getBuckEventBus().post(started);\n    StepExecutionResult executionResult = StepExecutionResults.ERROR;\n    try {\n      executionResult = step.execute(context);\n    } catch (IOException | RuntimeException e) {\n      throw StepFailedException.createForFailingStepWithException(step, context, e);\n    } finally {\n      StepEvent.Finished finished = StepEvent.finished(started, executionResult.getExitCode());\n      logStepEvent(context, finished, buildTargetName, executionResult.getExecutedCommand());\n      context.getBuckEventBus().post(finished);\n    }\n\n    if (!executionResult.isSuccess()) {\n      throw StepFailedException.createForFailingStepWithExitCode(step, context, executionResult);\n    }\n  }\n\n  private static void logStepEvent(\n<｜fim▁hole｜>  private static void logStepEvent(\n      StepExecutionContext context,\n      StepEvent stepEvent,\n      String buildTargetName,\n      ImmutableList<String> command) {\n    if (command.isEmpty()) {\n      LOG.verbose(\"%s for build rule <%s>\", stepEvent, buildTargetName);\n    } else {\n      LOG.verbose(\n          \"%s for build rule <%s>, executed command: %s\", stepEvent, buildTargetName, command);\n      if (context.getVerbosity().shouldPrintCommand()) {\n        context.getStdErr().println(command);\n      }\n    }\n  }\n}<｜fim▁end｜>",
    "response": "      StepExecutionContext context, StepEvent stepEvent, String buildTargetName) {\n    logStepEvent(context, stepEvent, buildTargetName, ImmutableList.of());\n  }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package nth.sprite.vetsupport.basicsprites.camera;\n\n<｜fim▁hole｜>\npublic class Camera extends ImageSprite{\n\n    public Camera(Canvas canvas, int x, int y) {\n        super(canvas, \"camera.png\", Constants.WIDTH_CAMERA, Constants.HEIGHT_CAMERA);\n        setX(x);\n        setY(y);\n    }\n\n}<｜fim▁end｜>",
    "response": "import nth.sprite.Canvas;\nimport nth.sprite.ImageSprite;\nimport nth.sprite.vetsupport.Constants;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package amu.zhcet.data.user.faculty;\n\nimport amu.zhcet.data.ItemNotFoundException;\n\nimport javax.annotation.Nullable;\n\npublic class FacultyMemberNotFoundException extends ItemNotFoundException {\n<｜fim▁hole｜>        super(\"Faculty Member\");\n    }\n\n    public FacultyMemberNotFoundException(@Nullable String id) {\n        super(\"Faculty Member\", id);\n    }\n}<｜fim▁end｜>",
    "response": "    public FacultyMemberNotFoundException() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package voldemort;\n\nimport java.io.IOException;\nimport java.io.StringReader;\n\nimport org.apache.commons.io.IOUtils;\n\nimport voldemort.cluster.Cluster;\nimport voldemort.xml.ClusterMapper;\n\npublic class VoldemortTestConstants {\n\n    public static String getOneNodeClusterXml() {\n        return readString(\"config/one-node-cluster.xml\");\n    }\n\n    public static Cluster getOneNodeCluster() {\n        return new ClusterMapper().readCluster(new StringReader(getOneNodeClusterXml()));\n    }\n\n    public static String getSimpleStoreDefinitionsXml() {\n        return readString(\"config/stores.xml\");\n    }\n\n    public static String getSingleStoreDefinitionsXml() {\n        return readString(\"config/single-store.xml\");\n    }\n\n    public static String getNoVersionStoreDefinitionsXml() {\n        return readString(\"config/no-version-store.xml\");\n    }\n<｜fim▁hole｜>    public static String getTwoNodeClusterXml() {\n        return readString(\"config/two-node-cluster.xml\");\n    }\n\n    public static String getStoreWithTwoKeyVersions() {\n        return readString(\"config/store-with-two-key-versions.xml\");\n    }\n\n    public static Cluster getTwoNodeCluster() {\n        return new ClusterMapper().readCluster(new StringReader(getTwoNodeClusterXml()));\n    }\n\n    public static String getNineNodeClusterXml() {\n        return readString(\"config/nine-node-cluster.xml\");\n    }\n\n    public static String getThreeNodeClusterXml() {\n        return readString(\"config/three-node-cluster.xml\");\n    }\n\n    public static Cluster getNineNodeCluster() {\n        return new ClusterMapper().readCluster(new StringReader(getNineNodeClusterXml()));\n    }\n\n    public static Cluster getThreeNodeCluster() {\n        return new ClusterMapper().readCluster(new StringReader(getThreeNodeClusterXml()));\n    }\n\n    private static String readString(String filename) {\n        try {\n            return IOUtils.toString(VoldemortTestConstants.class.getResourceAsStream(filename));\n        } catch(IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    public static String getCompressedStoreDefinitionsXml() {\n        return readString(\"config/compressed-store.xml\");\n    }\n\n    public static String getViewStoreDefinitionXml() {\n        return readString(\"config/view-store.xml\");\n    }\n}<｜fim▁end｜>",
    "response": "\n    public static String getStoreDefinitionsWithRetentionXml() {\n        return readString(\"config/store-with-retention.xml\");\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package turnus.model.common.impl;\n\nimport org.eclipse.emf.common.notify.Notification;\n\nimport org.eclipse.emf.common.util.BasicEMap;\nimport org.eclipse.emf.common.util.EMap;\n\nimport org.eclipse.emf.ecore.EClass;\nimport org.eclipse.emf.ecore.EObject;\n\nimport org.eclipse.emf.ecore.impl.ENotificationImpl;\nimport org.eclipse.emf.ecore.impl.MinimalEObjectImpl;\n\nimport turnus.model.common.CommonPackage;\n\npublic class StringToObjectMapImpl extends MinimalEObjectImpl.Container implements BasicEMap.Entry<String, Object> {\n    /**\n     * The default value of the '{@link #getTypedKey() <em>Key</em>}' attribute.\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @see #getTypedKey()\n     * @generated\n     * @ordered\n     */\n    protected static final String KEY_EDEFAULT = null;\n\n    /**\n     * The cached value of the '{@link #getTypedKey() <em>Key</em>}' attribute.\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @see #getTypedKey()\n     * @generated\n     * @ordered\n     */\n    protected String key = KEY_EDEFAULT;\n\n    /**\n     * The default value of the '{@link #getTypedValue() <em>Value</em>}'\n     * attribute. <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @see #getTypedValue()\n     * @generated\n     * @ordered\n     */\n    protected static final Object VALUE_EDEFAULT = null;\n\n    /**\n     * The cached value of the '{@link #getTypedValue() <em>Value</em>}'\n     * attribute. <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @see #getTypedValue()\n     * @generated\n     * @ordered\n     */\n    protected Object value = VALUE_EDEFAULT;\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    protected StringToObjectMapImpl() {\n        super();\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    protected EClass eStaticClass() {\n        return CommonPackage.Literals.STRING_TO_OBJECT_MAP;\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    public String getTypedKey() {\n        return key;\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    public void setTypedKey(String newKey) {\n        String oldKey = key;\n        key = newKey;\n        if (eNotificationRequired())\n            eNotify(new ENotificationImpl(this, Notification.SET, CommonPackage.STRING_TO_OBJECT_MAP__KEY, oldKey,\n                    key));\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    public Object getTypedValue() {\n        return value;\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    public void setTypedValue(Object newValue) {\n        Object oldValue = value;\n        value = newValue;\n        if (eNotificationRequired())\n            eNotify(new ENotificationImpl(this, Notification.SET, CommonPackage.STRING_TO_OBJECT_MAP__VALUE, oldValue,\n                    value));\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    public Object eGet(int featureID, boolean resolve, boolean coreType) {\n        switch (featureID) {\n        case CommonPackage.STRING_TO_OBJECT_MAP__KEY:\n            return getTypedKey();\n        case CommonPackage.STRING_TO_OBJECT_MAP__VALUE:\n            return getTypedValue();\n        }\n        return super.eGet(featureID, resolve, coreType);\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    public void eSet(int featureID, Object newValue) {\n        switch (featureID) {\n        case CommonPackage.STRING_TO_OBJECT_MAP__KEY:\n            setTypedKey((String) newValue);\n            return;\n        case CommonPackage.STRING_TO_OBJECT_MAP__VALUE:\n            setTypedValue(newValue);\n            return;\n        }\n        super.eSet(featureID, newValue);\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    public void eUnset(int featureID) {\n        switch (featureID) {\n        case CommonPackage.STRING_TO_OBJECT_MAP__KEY:\n            setTypedKey(KEY_EDEFAULT);\n            return;\n        case CommonPackage.STRING_TO_OBJECT_MAP__VALUE:\n            setTypedValue(VALUE_EDEFAULT);\n            return;\n        }\n        super.eUnset(featureID);\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    public boolean eIsSet(int featureID) {\n        switch (featureID) {\n        case CommonPackage.STRING_TO_OBJECT_MAP__KEY:\n            return KEY_EDEFAULT == null ? key != null : !KEY_EDEFAULT.equals(key);\n        case CommonPackage.STRING_TO_OBJECT_MAP__VALUE:\n            return VALUE_EDEFAULT == null ? value != null : !VALUE_EDEFAULT.equals(value);\n        }\n        return super.eIsSet(featureID);\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    public String toString() {\n        if (eIsProxy())\n            return super.toString();\n\n        StringBuffer result = new StringBuffer(super.toString());\n        result.append(\" (key: \");\n        result.append(key);\n        result.append(\", value: \");\n        result.append(value);\n        result.append(')');\n        return result.toString();\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    protected int hash = -1;\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    public int getHash() {\n        if (hash == -1) {\n            Object theKey = getKey();\n            hash = (theKey == null ? 0 : theKey.hashCode());\n        }\n        return hash;\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    public void setHash(int hash) {\n        this.hash = hash;\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    public String getKey() {\n<｜fim▁hole｜>     * \n     * @generated\n     */\n    @Override\n    public void setKey(String key) {\n        setTypedKey(key);\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    public Object getValue() {\n        return getTypedValue();\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    public Object setValue(Object value) {\n        Object oldValue = getValue();\n        setTypedValue(value);\n        return oldValue;\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @SuppressWarnings(\"unchecked\")\n    public EMap<String, Object> getEMap() {\n        EObject container = eContainer();\n        return container == null ? null : (EMap<String, Object>) container.eGet(eContainmentFeature());\n    }\n\n} // StringToObjectMapImpl<｜fim▁end｜>",
    "response": "        return getTypedKey();\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.mavlink.messages.ardupilotmega;\nimport org.mavlink.messages.MAVLinkMessage;\nimport org.mavlink.IMAVLinkCRC;\nimport org.mavlink.MAVLinkCRC;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\n\npublic class msg_optical_flow extends MAVLinkMessage {\n  public static final int MAVLINK_MSG_ID_OPTICAL_FLOW = 100;\n  private static final long serialVersionUID = MAVLINK_MSG_ID_OPTICAL_FLOW;\n  public msg_optical_flow(int sysId, int componentId) {\n    messageType = MAVLINK_MSG_ID_OPTICAL_FLOW;\n    this.sysId = sysId;\n    this.componentId = componentId;\n    length = 26;\n}\n\n  /**\n   * Timestamp (UNIX)\n   */\n  public long time_usec;\n  /**\n   * Flow in meters in x-sensor direction, angular-speed compensated\n   */\n  public float flow_comp_m_x;\n  /**\n   * Flow in meters in y-sensor direction, angular-speed compensated\n   */\n  public float flow_comp_m_y;\n  /**\n   * Ground distance in meters. Positive value: distance known. Negative value: Unknown distance\n   */\n  public float ground_distance;\n  /**\n   * Flow in pixels * 10 in x-sensor direction (dezi-pixels)\n   */\n  public int flow_x;\n  /**\n   * Flow in pixels * 10 in y-sensor direction (dezi-pixels)\n   */\n  public int flow_y;\n  /**\n   * Sensor ID\n   */\n  public int sensor_id;\n  /**\n   * Optical flow quality / confidence. 0: bad, 255: maximum quality\n   */\n  public int quality;\n\npublic void decode(ByteBuffer dis) throws IOException {\n  time_usec = (long)dis.getLong();\n  flow_comp_m_x = (float)dis.getFloat();\n  flow_comp_m_y = (float)dis.getFloat();\n  ground_distance = (float)dis.getFloat();\n  flow_x = (int)dis.getShort();\n  flow_y = (int)dis.getShort();\n<｜fim▁hole｜>  byte[] buffer = new byte[8+26];\n   ByteBuffer dos = ByteBuffer.wrap(buffer).order(ByteOrder.LITTLE_ENDIAN);\n  dos.put((byte)0xFE);\n  dos.put((byte)(length & 0x00FF));\n  dos.put((byte)(sequence & 0x00FF));\n  dos.put((byte)(sysId & 0x00FF));\n  dos.put((byte)(componentId & 0x00FF));\n  dos.put((byte)(messageType & 0x00FF));\n  dos.putLong(time_usec);\n  dos.putFloat(flow_comp_m_x);\n  dos.putFloat(flow_comp_m_y);\n  dos.putFloat(ground_distance);\n  dos.putShort((short)(flow_x&0x00FFFF));\n  dos.putShort((short)(flow_y&0x00FFFF));\n  dos.put((byte)(sensor_id&0x00FF));\n  dos.put((byte)(quality&0x00FF));\n  int crc = MAVLinkCRC.crc_calculate_encode(buffer, 26);\n  crc = MAVLinkCRC.crc_accumulate((byte) IMAVLinkCRC.MAVLINK_MESSAGE_CRCS[messageType], crc);\n  byte crcl = (byte) (crc & 0x00FF);\n  byte crch = (byte) ((crc >> 8) & 0x00FF);\n  buffer[32] = crcl;\n  buffer[33] = crch;\n  return buffer;\n}\npublic String toString() {\nreturn \"MAVLINK_MSG_ID_OPTICAL_FLOW : \" +   \"  time_usec=\"+time_usec+  \"  flow_comp_m_x=\"+flow_comp_m_x+  \"  flow_comp_m_y=\"+flow_comp_m_y+  \"  ground_distance=\"+ground_distance+  \"  flow_x=\"+flow_x+  \"  flow_y=\"+flow_y+  \"  sensor_id=\"+sensor_id+  \"  quality=\"+quality;}\n}<｜fim▁end｜>",
    "response": "  sensor_id = (int)dis.get()&0x00FF;\n  quality = (int)dis.get()&0x00FF;\n}\n\npublic byte[] encode() throws IOException {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jackhuang.hmcl.game;\n\nimport com.google.gson.annotations.SerializedName;\nimport org.jackhuang.hmcl.util.ToStringBuilder;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic final class AssetIndex {\n\n    @SerializedName(\"virtual\")\n    private final boolean virtual;\n\n    @SerializedName(\"map_to_resources\")\n    private final boolean mapToResources;\n\n    @SerializedName(\"objects\")\n    private final Map<String, AssetObject> objects;\n\n    public AssetIndex() {\n        this(false, Collections.emptyMap());\n    }\n\n    public AssetIndex(boolean virtual, Map<String, AssetObject> objects) {\n        this.virtual = this.mapToResources = virtual;\n        this.objects = new HashMap<>(objects);\n    }\n\n    public boolean isVirtual() {\n        return virtual || mapToResources;\n    }\n\n<｜fim▁hole｜>        return Collections.unmodifiableMap(objects);\n    }\n\n    @Override\n    public String toString() {\n        return new ToStringBuilder(this).append(\"virtual\", virtual).append(\"objects\", objects).toString();\n    }\n}<｜fim▁end｜>",
    "response": "    public Map<String, AssetObject> getObjects() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package info.ganglia;\n\nimport java.lang.reflect.Method;\n\npublic class UnitTestHelper {\n\n    @SuppressWarnings(\"unchecked\")\n    public static Object invokeMethod(Object targetObject, String methodName, Class[] argClasses, Object[] argObjects) {\n        Object result = null;\n        try {\n<｜fim▁hole｜>        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static Object invokeMethod(Class targetClass, Object targetObject, String methodName, Class[] argClasses, Object[] argObjects) {\n        Object result = null;\n        try {\n            Method method = targetClass.getDeclaredMethod(methodName, argClasses);\n            // this makes private methods accessible\n            method.setAccessible(true);\n            result = method.invoke(targetObject, argObjects);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n}<｜fim▁end｜>",
    "response": "            Method method = targetObject.getClass().getDeclaredMethod(methodName, argClasses);\n            // this makes private methods accessible\n            method.setAccessible(true);\n            result = method.invoke(targetObject, argObjects);\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.epics.pvmanager.timecache.query;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.epics.util.time.TimeInterval;\nimport org.epics.util.time.Timestamp;\nimport org.epics.vtype.VType;\n\npublic class QueryDataBlank implements QueryData {\n\n    private final TimeInterval timeInterval;\n\n    QueryDataBlank(TimeInterval timeInterval) {\n        this.timeInterval = timeInterval;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public TimeInterval getTimeInterval() {\n        return timeInterval;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public int getCount() {\n        return 0;\n<｜fim▁hole｜>    /** {@inheritDoc} */\n    @Override\n    public List<VType> getData() {\n        return Collections.emptyList();\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public List<Timestamp> getTimestamps() {\n        return Collections.emptyList();\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package patterns.behavioral.state.example;\n\nclass Character {\n\n    private CharacterState currentState;\n\n    Character() {\n        currentState = new CharacterStanding(this);\n    }\n\n    CharacterState getState() {\n        return currentState;\n    }\n\n    void setState(CharacterState currentState) {\n        this.currentState = currentState;\n    }\n\n    public void walk() {\n<｜fim▁hole｜>    }\n\n    void getDown() {\n        currentState.getDown();\n    }\n\n    void jump() {\n        currentState.jump();\n    }\n\n}<｜fim▁end｜>",
    "response": "        currentState.walk();\n    }\n\n    void getUp() {\n        currentState.getUp();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package model.diagram.edit.policies;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.eclipse.draw2d.ColorConstants;\nimport org.eclipse.draw2d.Figure;\nimport org.eclipse.draw2d.FigureListener;\nimport org.eclipse.draw2d.Graphics;\nimport org.eclipse.draw2d.IFigure;\nimport org.eclipse.draw2d.Label;\nimport org.eclipse.draw2d.RectangleFigure;\nimport org.eclipse.draw2d.geometry.Rectangle;\nimport org.eclipse.gef.GraphicalEditPart;\nimport org.eclipse.gef.handles.MoveHandle;\n<｜fim▁hole｜>import org.eclipse.gmf.tooling.runtime.edit.policies.labels.IRefreshableFeedbackEditPolicy;\n\npublic class ModelTextNonResizableEditPolicy extends NonResizableEditPolicyEx\n        implements IRefreshableFeedbackEditPolicy {\n\n    /**\n    * @generated\n    */\n    private IFigure selectionFeedbackFigure;\n\n    /**\n    * @generated\n    */\n    private IFigure focusFeedbackFigure;\n\n    /**\n    * @generated\n    */\n    private FigureListener hostPositionListener;\n\n    /**\n    * @generated\n    */\n    protected void showPrimarySelection() {\n        if (getHostFigure() instanceof WrappingLabel) {\n            ((WrappingLabel) getHostFigure()).setSelected(true);\n            ((WrappingLabel) getHostFigure()).setFocus(true);\n        } else {\n            showSelection();\n            showFocus();\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected void showSelection() {\n        if (getHostFigure() instanceof WrappingLabel) {\n            ((WrappingLabel) getHostFigure()).setSelected(true);\n            ((WrappingLabel) getHostFigure()).setFocus(false);\n        } else {\n            hideSelection();\n            addFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());\n            getHostFigure().addFigureListener(getHostPositionListener());\n            refreshSelectionFeedback();\n            hideFocus();\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected void hideSelection() {\n        if (getHostFigure() instanceof WrappingLabel) {\n            ((WrappingLabel) getHostFigure()).setSelected(false);\n            ((WrappingLabel) getHostFigure()).setFocus(false);\n        } else {\n            if (selectionFeedbackFigure != null) {\n                removeFeedback(selectionFeedbackFigure);\n                getHostFigure().removeFigureListener(getHostPositionListener());\n                selectionFeedbackFigure = null;\n            }\n            hideFocus();\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected void showFocus() {\n        if (getHostFigure() instanceof WrappingLabel) {\n            ((WrappingLabel) getHostFigure()).setFocus(true);\n        } else {\n            hideFocus();\n            addFeedback(focusFeedbackFigure = createFocusFeedbackFigure());\n            refreshFocusFeedback();\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected void hideFocus() {\n        if (getHostFigure() instanceof WrappingLabel) {\n            ((WrappingLabel) getHostFigure()).setFocus(false);\n        } else {\n            if (focusFeedbackFigure != null) {\n                removeFeedback(focusFeedbackFigure);\n                focusFeedbackFigure = null;\n            }\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected Rectangle getFeedbackBounds() {\n        Rectangle bounds;\n        if (getHostFigure() instanceof Label) {\n            bounds = ((Label) getHostFigure()).getTextBounds();\n            bounds.intersect(getHostFigure().getBounds());\n        } else {\n            bounds = getHostFigure().getBounds().getCopy();\n        }\n        getHostFigure().getParent().translateToAbsolute(bounds);\n        getFeedbackLayer().translateToRelative(bounds);\n        return bounds;\n    }\n\n    /**\n    * @generated\n    */\n    protected IFigure createSelectionFeedbackFigure() {\n        if (getHostFigure() instanceof Label) {\n            Label feedbackFigure = new Label();\n            feedbackFigure.setOpaque(true);\n            feedbackFigure.setBackgroundColor(ColorConstants.menuBackgroundSelected);\n            feedbackFigure.setForegroundColor(ColorConstants.menuForegroundSelected);\n            return feedbackFigure;\n        } else {\n            RectangleFigure feedbackFigure = new RectangleFigure();\n            feedbackFigure.setFill(false);\n            return feedbackFigure;\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected IFigure createFocusFeedbackFigure() {\n        return new Figure() {\n\n            protected void paintFigure(Graphics graphics) {\n                graphics.drawFocus(getBounds().getResized(-1, -1));\n            }\n        };\n    }\n\n    /**\n    * @generated\n    */\n    protected void updateLabel(Label target) {\n        Label source = (Label) getHostFigure();\n        target.setText(source.getText());\n        target.setTextAlignment(source.getTextAlignment());\n        target.setFont(source.getFont());\n    }\n\n    /**\n    * @generated\n    */\n    protected void refreshSelectionFeedback() {\n        if (selectionFeedbackFigure != null) {\n            if (selectionFeedbackFigure instanceof Label) {\n                updateLabel((Label) selectionFeedbackFigure);\n                selectionFeedbackFigure.setBounds(getFeedbackBounds());\n            } else {\n                selectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));\n            }\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected void refreshFocusFeedback() {\n        if (focusFeedbackFigure != null) {\n            focusFeedbackFigure.setBounds(getFeedbackBounds());\n        }\n    }\n\n    /**\n    * @generated\n    */\n    public void refreshFeedback() {\n        refreshSelectionFeedback();\n        refreshFocusFeedback();\n    }\n\n    /**\n    * @generated\n    */\n    private FigureListener getHostPositionListener() {\n        if (hostPositionListener == null) {\n            hostPositionListener = new FigureListener() {\n                public void figureMoved(IFigure source) {\n                    refreshFeedback();\n                }\n            };\n        }\n        return hostPositionListener;\n    }\n\n    /**\n    * @generated\n    */\n    protected List createSelectionHandles() {\n        MoveHandle moveHandle = new MoveHandle((GraphicalEditPart) getHost());\n        moveHandle.setBorder(null);\n        moveHandle.setDragTracker(new DragEditPartsTrackerEx(getHost()));\n        return Collections.singletonList(moveHandle);\n    }\n\n}<｜fim▁end｜>",
    "response": "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx;\nimport org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;\nimport org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.booleanworks.bomworkshop2015a.entity.oagi10.bom.v1;\n\nimport javax.xml.bind.annotation.XmlAccessType;\n<｜fim▁hole｜>import javax.xml.bind.annotation.XmlType;\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"StatusExtensionType\")\npublic class StatusExtensionType\n    extends AllExtensionType\n{\n\n}<｜fim▁end｜>",
    "response": "import javax.xml.bind.annotation.XmlAccessorType;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.api.services.businesscommunications.v1.model;\n\n@SuppressWarnings(\"javadoc\")\npublic final class CallReason extends com.google.api.client.json.GenericJson {\n\n  /**\n   * Output only. Approval details; each call reason must be approved before use.\n   * The value may be {@code null}.\n   */\n  @com.google.api.client.util.Key\n  private ApprovalDetails approvalDetails;\n\n  /**\n   * Immutable. The actual text of the call reason.\n   * The value may be {@code null}.\n   */\n  @com.google.api.client.util.Key\n  private java.lang.String text;\n\n  /**\n   * Output only. Approval details; each call reason must be approved before use.\n   * @return value or {@code null} for none\n   */\n  public ApprovalDetails getApprovalDetails() {\n    return approvalDetails;\n  }\n\n  /**\n   * Output only. Approval details; each call reason must be approved before use.\n   * @param approvalDetails approvalDetails or {@code null} for none\n   */\n  public CallReason setApprovalDetails(ApprovalDetails approvalDetails) {\n    this.approvalDetails = approvalDetails;\n    return this;\n  }\n\n  /**\n   * Immutable. The actual text of the call reason.\n   * @return value or {@code null} for none\n   */\n  public java.lang.String getText() {\n    return text;\n  }\n\n  /**\n   * Immutable. The actual text of the call reason.\n   * @param text text or {@code null} for none\n   */\n  public CallReason setText(java.lang.String text) {\n    this.text = text;\n    return this;\n  }\n\n  @Override\n  public CallReason set(String fieldName, Object value) {\n    return (CallReason) super.set(fieldName, value);\n  }\n<｜fim▁hole｜>\n}<｜fim▁end｜>",
    "response": "\n  @Override\n  public CallReason clone() {\n    return (CallReason) super.clone();\n  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.alibaba.excel.write.handler.impl;\n\nimport java.lang.reflect.Field;\nimport java.util.Map;\n\nimport com.alibaba.excel.util.FieldUtils;\nimport com.alibaba.excel.write.handler.WorkbookWriteHandler;\nimport com.alibaba.excel.write.metadata.holder.WriteSheetHolder;\nimport com.alibaba.excel.write.metadata.holder.WriteWorkbookHolder;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.poi.ss.util.CellReference;\nimport org.apache.poi.xssf.streaming.SXSSFSheet;\nimport org.apache.poi.xssf.streaming.SXSSFWorkbook;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.openxmlformats.schemas.spreadsheetml.x2006.main.CTWorksheet;\n\n@Slf4j\npublic class DimensionWorkbookWriteHandler implements WorkbookWriteHandler {\n\n    private static final String XSSF_SHEET_MEMBER_VARIABLE_NAME = \"_sh\";\n<｜fim▁hole｜>            return;\n        }\n        if (!(writeWorkbookHolder.getWorkbook() instanceof SXSSFWorkbook)) {\n            return;\n        }\n\n        Map<Integer, WriteSheetHolder> writeSheetHolderMap = writeWorkbookHolder.getHasBeenInitializedSheetIndexMap();\n        if (MapUtils.isEmpty(writeSheetHolderMap)) {\n            return;\n        }\n        for (WriteSheetHolder writeSheetHolder : writeSheetHolderMap.values()) {\n            if (writeSheetHolder.getSheet() == null || !(writeSheetHolder.getSheet() instanceof SXSSFSheet)) {\n                continue;\n            }\n            SXSSFSheet sxssfSheet = ((SXSSFSheet)writeSheetHolder.getSheet());\n            XSSFSheet xssfSheet;\n            try {\n                xssfSheet = (XSSFSheet)XSSF_SHEET_FIELD.get(sxssfSheet);\n            } catch (IllegalAccessException e) {\n                log.debug(\"Can not found _sh.\", e);\n                continue;\n            }\n            if (xssfSheet == null) {\n                continue;\n            }\n            CTWorksheet ctWorksheet = xssfSheet.getCTWorksheet();\n            if (ctWorksheet == null) {\n                continue;\n            }\n            int headSize = 0;\n            if (MapUtils.isNotEmpty(writeSheetHolder.getExcelWriteHeadProperty().getHeadMap())) {\n                headSize = writeSheetHolder.getExcelWriteHeadProperty().getHeadMap().size();\n                if (headSize > 0) {\n                    headSize--;\n                }\n            }\n            Integer lastRowIndex = writeSheetHolder.getLastRowIndex();\n            if (lastRowIndex == null) {\n                lastRowIndex = 0;\n            }\n\n            ctWorksheet.getDimension().setRef(\n                \"A1:\" + CellReference.convertNumToColString(headSize) + (lastRowIndex + 1));\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    private static final Field XSSF_SHEET_FIELD = FieldUtils.getField(SXSSFSheet.class, XSSF_SHEET_MEMBER_VARIABLE_NAME,\n        true);\n\n    @Override\n    public void afterWorkbookDispose(WriteWorkbookHolder writeWorkbookHolder) {\n        if (writeWorkbookHolder == null || writeWorkbookHolder.getWorkbook() == null) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.codepath.apps.mysimpletweets;\n\nimport android.os.Bundle;\nimport android.support.v4.app.FragmentTransaction;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.widget.TextView;\n\nimport com.codepath.apps.mysimpletweets.fragments.DetailTweetFragment;\nimport com.codepath.apps.mysimpletweets.fragments.RetweetLineFragment;\nimport com.codepath.apps.mysimpletweets.models.Tweet;\n\nimport org.parceler.Parcels;\n\npublic class DetailTweetActivity extends AppCompatActivity {\n    Tweet.UserBean userData;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_detail_tweet);\n\n        Tweet tweet = Parcels.unwrap(getIntent().getParcelableExtra(\"tweet\"));\n\n<｜fim▁hole｜>        // Make sure the toolbar exists in the activity and is not null\n        setSupportActionBar(toolbar);\n        getSupportActionBar().setDisplayShowTitleEnabled(false);\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\n        getSupportActionBar().setLogo(R.drawable.twitter_logo_trans);\n        getSupportActionBar().setDisplayUseLogoEnabled(true);\n        // Get access to the custom title view\n        TextView mTitle = (TextView) toolbar.findViewById(R.id.toolbar_detail_tweet_title);\n        mTitle.setText(\"Tweet\");\n\n        if (savedInstanceState == null) {\n            DetailTweetFragment detailTweetFragment = DetailTweetFragment.newInstance(tweet);\n            RetweetLineFragment retweetLineFragment = RetweetLineFragment.newInstance(tweet.getId());\n            FragmentTransaction ft = getSupportFragmentManager().beginTransaction();\n            ft.replace(R.id.flDetailHeader,detailTweetFragment);\n            ft.replace(R.id.flRetweetContainer,retweetLineFragment);\n            ft.commit();\n        }\n    }\n\n    public Tweet.UserBean getUserData() {\n        return userData;\n    }\n}<｜fim▁end｜>",
    "response": "        // Find the toolbar view inside the activity layout\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbarDetailTweet);\n        // Sets the Toolbar to act as the ActionBar for this Activity window.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package groovy.swing.impl;\n\nimport groovy.lang.Closure;\n\nimport javax.swing.*;\nimport java.awt.event.ActionEvent;\n\npublic class DefaultAction extends AbstractAction {\n\n    private Closure closure;\n\n    public void actionPerformed(ActionEvent event) {\n        if (closure == null) {\n<｜fim▁hole｜>\n    public Closure getClosure() {\n        return closure;\n    }\n\n    public void setClosure(Closure closure) {\n        this.closure = closure;\n    }\n\n}<｜fim▁end｜>",
    "response": "            throw new NullPointerException(\"No closure has been configured for this Action\");\n        }\n        closure.call(event);\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package katas.groovy.orderbook.v4_golf.app;\n\nimport katas.groovy.orderbook.v4_golf.iface.*;\n\nimport java.util.LinkedHashSet;\nimport java.util.Set;\n\npublic abstract class AbstractAppEnvironment implements AppEnvironment {\n    private final Set<OrderConsumer> consumers = new LinkedHashSet<OrderConsumer>();\n    private final LogLevel logLevel;\n    /**\n     * Implementation of {@link katas.groovy.orderbook.v1.iface.Log} which uses the standard out.\n     */\n    protected final Log log = new Log() {\n        @Override\n        public void log(LogLevel logLevel, String msg) {\n            if (isEnabled(logLevel)) {\n                System.out.println(logLevel + \": \" + msg);\n            }\n        }\n\n        private boolean isEnabled(LogLevel logLevel) {\n            return logLevel.compareTo(AbstractAppEnvironment.this.logLevel) >= 0;\n        }\n    };\n\n    public AbstractAppEnvironment(LogLevel logLevel) {\n        this.logLevel = logLevel;\n    }\n\n    @Override\n    public void registerHandler(OrderConsumer handler) {\n        consumers.add(handler);\n    }\n\n    @Override\n    public final void run() {\n        notifyStart();\n        try {\n            feedOrders();\n        } catch (Exception e) {\n            e.printStackTrace();\n            log.log(LogLevel.ERROR, e.getMessage());\n        } finally {\n            notifyFinish();\n        }\n    }\n\n    /**\n     * Sends a stream of orders to {@link katas.groovy.orderbook.v1.iface.OrderConsumer}s.\n     *\n     * @throws Exception if there is an error.\n     * @see #notifyOrder(Action, Order)\n<｜fim▁hole｜>     * specified <code>action</code> and <code>order</code>.\n     */\n    protected void notifyOrder(Action action, Order order) {\n        for (OrderConsumer consumer : consumers) {\n            consumer.handleEvent(action, order);\n        }\n    }\n\n    private void notifyStart() {\n        for (OrderConsumer consumer : consumers) {\n            consumer.startProcessing(log);\n        }\n    }\n\n    private void notifyFinish() {\n        for (OrderConsumer consumer : consumers) {\n            consumer.finishProcessing();\n        }\n    }\n}<｜fim▁end｜>",
    "response": "     */\n    protected abstract void feedOrders() throws Exception;\n\n    /**\n     * Invokes {@link katas.groovy.orderbook.v1.iface.OrderConsumer#handleEvent(katas.groovy.orderbook.v1.iface.Action, katas.groovy.orderbook.v1.iface.Order)} for every registered consumer with\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.fabric8.itests.support;\n\nimport io.fabric8.api.Container;\nimport io.fabric8.api.EnsembleModificationFailed;\nimport io.fabric8.api.FabricService;\n\nimport java.util.Arrays;\n\npublic class EnsembleSupport {\n\n    public static void addToEnsemble(FabricService fabricService, Container... containers) throws Exception {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"fabric:ensemble-add --force --migration-timeout 240000 \");\n<｜fim▁hole｜>\n        doWithEnsemble(fabricService, sb.toString());\n    }\n\n    public static void removeFromEnsemble(FabricService fabricService, Container... containers) throws Exception {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"fabric:ensemble-remove --force --migration-timeout 240000 \");\n        for (Container c : containers) {\n            sb.append(c.getId()).append(\" \");\n        }\n\n        doWithEnsemble(fabricService, sb.toString());\n    }\n\n    private static void doWithEnsemble(FabricService fabricService, String command) throws Exception {\n        long start = System.currentTimeMillis();\n        long now = System.currentTimeMillis();\n        boolean keepRunning = true;\n\n        while (!Thread.currentThread().isInterrupted() && keepRunning && now - start <= 30000L) {\n            try {\n                System.err.println(CommandSupport.executeCommand(command));\n                keepRunning = false;\n            } catch (Exception ex) {\n                if (isRetriable(ex)) {\n                    System.err.println(\"Not ready for ensemble modification! Retrying...\");\n                    ProvisionSupport.provisioningSuccess(Arrays.asList(fabricService.getContainers()), ProvisionSupport.PROVISION_TIMEOUT);\n                    now = System.currentTimeMillis();\n                } else {\n                    throw ex;\n                }\n            }\n        }\n    }\n\n    private static boolean isRetriable(Throwable th) {\n        if (th instanceof CommandExecutionException) {\n            return isRetriable(th.getCause());\n        } if (th instanceof EnsembleModificationFailed) {\n            return ((EnsembleModificationFailed) th).getReason() == EnsembleModificationFailed.Reason.CONTAINERS_NOT_ALIVE;\n        } else {\n            return false;\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        for (Container c : containers) {\n            sb.append(c.getId()).append(\" \");\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package nam.model.pod;\n\nimport java.io.Serializable;\nimport java.util.Collection;\n\nimport javax.enterprise.context.SessionScoped;\nimport javax.enterprise.event.Observes;\nimport javax.inject.Inject;\nimport javax.inject.Named;\n\nimport org.aries.runtime.BeanContext;\nimport org.aries.ui.AbstractDomainListManager;\nimport org.aries.ui.event.Cancelled;\nimport org.aries.ui.event.Export;\nimport org.aries.ui.event.Refresh;\nimport org.aries.ui.manager.ExportManager;\n\nimport nam.model.Pod;\nimport nam.model.util.PodUtil;\nimport nam.ui.design.SelectionContext;\n\n@SessionScoped\n@Named(\"podListManager\")\npublic class PodListManager extends AbstractDomainListManager<Pod, PodListObject> implements Serializable {\n\n    @Inject\n    private PodDataManager podDataManager;\n\n    @Inject\n    private PodEventManager podEventManager;\n\n    @Inject\n    private PodInfoManager podInfoManager;\n\n    @Inject\n    private SelectionContext selectionContext;\n\n    @Override\n    public String getClientId() {\n        return \"podList\";\n    }\n\n    @Override\n    public String getTitle() {\n        return \"Pod List\";\n    }\n\n    @Override\n    public Object getRecordKey(Pod pod) {\n        return PodUtil.getKey(pod);\n    }\n\n    @Override\n    public String getRecordName(Pod pod) {\n        return PodUtil.toString(pod);\n    }\n\n    @Override\n    protected Class<Pod> getRecordClass() {\n        return Pod.class;\n    }\n\n    @Override\n    protected Pod getRecord(PodListObject rowObject) {\n        return rowObject.getPod();\n    }\n\n    @Override\n    public Pod getSelectedRecord() {\n        return super.getSelectedRecord();\n    }\n\n    public String getSelectedRecordLabel() {\n        return selectedRecord != null ? PodUtil.getLabel(selectedRecord) : null;\n    }\n\n    @Override\n    public void setSelectedRecord(Pod pod) {\n        super.setSelectedRecord(pod);\n        fireSelectedEvent(pod);\n    }\n\n    protected void fireSelectedEvent(Pod pod) {\n        podEventManager.fireSelectedEvent(pod);\n    }\n\n    public boolean isSelected(Pod pod) {\n        Pod selection = selectionContext.getSelection(\"pod\");\n        boolean selected = selection != null && selection.equals(pod);\n        return selected;\n    }\n\n    @Override\n    protected PodListObject createRowObject(Pod pod) {\n        PodListObject listObject = new PodListObject(pod);\n        listObject.setSelected(isSelected(pod));\n        return listObject;\n    }\n\n    @Override\n    public void reset() {\n        refresh();\n    }\n\n    @Override\n    public void initialize() {\n        if (recordList != null)\n            initialize(recordList);\n        else refreshModel();\n    }\n\n    public void handleRefresh(@Observes @Refresh Object object) {\n        //refreshModel();\n    }\n\n    @Override\n    public void refreshModel() {\n        refreshModel(createRecordList());\n    }\n\n    @Override\n    protected Collection<Pod> createRecordList() {\n        try {\n            Collection<Pod> podList = podDataManager.getPodList();\n<｜fim▁hole｜>        } catch (Exception e) {\n            handleException(e);\n            return null;\n        }\n    }\n\n    public String viewPod() {\n        return viewPod(selectedRecordKey);\n    }\n\n    public String viewPod(Object recordKey) {\n        Pod pod = recordByKeyMap.get(recordKey);\n        return viewPod(pod);\n    }\n\n    public String viewPod(Pod pod) {\n        String url = podInfoManager.viewPod(pod);\n        return url;\n    }\n\n    public String editPod() {\n        return editPod(selectedRecordKey);\n    }\n\n    public String editPod(Object recordKey) {\n        Pod pod = recordByKeyMap.get(recordKey);\n        return editPod(pod);\n    }\n\n    public String editPod(Pod pod) {\n        String url = podInfoManager.editPod(pod);\n        return url;\n    }\n\n    public void removePod() {\n        removePod(selectedRecordKey);\n    }\n\n    public void removePod(Object recordKey) {\n        Pod pod = recordByKeyMap.get(recordKey);\n        removePod(pod);\n    }\n\n    public void removePod(Pod pod) {\n        try {\n            if (podDataManager.removePod(pod))\n                clearSelection();\n            refresh();\n\n        } catch (Exception e) {\n            handleException(e);\n        }\n    }\n\n    public void cancelPod(@Observes @Cancelled Pod pod) {\n        try {\n            //Object key = PodUtil.getKey(pod);\n            //recordByKeyMap.put(key, pod);\n            initialize(recordByKeyMap.values());\n            BeanContext.removeFromSession(\"pod\");\n        } catch (Exception e) {\n            handleException(e);\n        }\n    }\n\n    public boolean validatePod(Collection<Pod> podList) {\n        return PodUtil.validate(podList);\n    }\n\n    public void exportPodList(@Observes @Export String tableId) {\n        //String tableId = \"pageForm:podListTable\";\n        ExportManager exportManager = BeanContext.getFromSession(\"org.aries.exportManager\");\n        exportManager.exportToXLS(tableId);\n    }\n\n}<｜fim▁end｜>",
    "response": "            if (podList != null)\n                return podList;\n            return recordList;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ExerciseClasses;\n\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport junit.framework.Assert;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class WordCountTest {\n\n    public WordCountTest() {\n    }\n\n    @BeforeClass\n    public static void setUpClass() {\n    }\n\n    @AfterClass\n    public static void tearDownClass() {\n    }\n\n<｜fim▁hole｜>    }\n\n    /**\n     * Test of wordCount method, of class WordCount.\n     */\n    @Test\n    public void testWordCount() throws Exception {\n        System.out.println(\"wordCount() is tested\");\n        String readpath = \"C:\\\\Users\\\\Max\\\\Documents\\\\input.txt\";\n        String writepath = \"C:\\\\Users\\\\Max\\\\Documents\\\\output.txt\";\n        WordCount instance = new WordCount();\n        instance.wordCount(readpath, writepath);\n\n        String exppath = \"C:\\\\Users\\\\Max\\\\Documents\\\\expected.txt\";\n        BufferedReader a = new BufferedReader(new FileReader(exppath));\n        BufferedReader b = new BufferedReader(new FileReader(writepath));\n        String lineA;\n        String lineB;\n\n        while (((lineA = a.readLine()) != null) && ((lineB = b.readLine()) != null)) {\n            Assert.assertEquals(lineA, lineB);\n        }\n\n        a.close();\n        b.close();\n    }\n}<｜fim▁end｜>",
    "response": "    @Before\n    public void setUp() {\n    }\n\n    @After\n    public void tearDown() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package no.jskdata.data.geonorge;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class OrderLine {\n\n    private final List<OrderArea> areas = new ArrayList<>();\n    private final List<Format> formats = new ArrayList<>();\n    public String metadataUuid;\n    public String coordinates;\n    private final List<Projection> projections = new ArrayList<>();\n\n    public void addArea(OrderArea area) {\n        areas.add(area);\n    }\n\n    public void setProjection(Projection projection) {\n        projections.clear();\n        projections.add(projection);\n<｜fim▁hole｜>\n    public boolean hasProjection(Projection projection) {\n        return projections.contains(projection);\n    }\n\n    public void setFormats(Collection<Format> formats) {\n        this.formats.clear();\n        this.formats.addAll(formats);\n    }\n\n    public boolean hasFormats(Collection<Format> formats) {\n        return this.formats.containsAll(formats);\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.zing.nio_study.kans;\n\npublic class DuiZhan {\n    private String orderNo;\n    private int amount;\n    private String state;\n\n    public DuiZhan(String orderNo, int amount, String state) {\n        this.orderNo = orderNo;\n        this.amount = amount;\n        this.state = state;\n    }\n\n    public String di() {\n        return String.valueOf(orderNo.hashCode() + amount + state.hashCode());\n    }\n\n    @Override\n    public int hashCode() {\n        return di().hashCode();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        DuiZhan duiZhan = (DuiZhan) o;\n\n        if (amount != duiZhan.amount) return false;\n        if (orderNo != null ? !orderNo.equals(duiZhan.orderNo) : duiZhan.orderNo != null) return false;\n        return state != null ? state.equals(duiZhan.state) : duiZhan.state == null;\n    }\n\n    @Override\n    public String toString() {\n        return \"DuiZhan{\" +\n<｜fim▁hole｜>                \", amount=\" + amount +\n                \", state='\" + state + '\\'' +\n                '}';\n    }\n}<｜fim▁end｜>",
    "response": "                \"orderNo='\" + orderNo + '\\'' +\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.ray.streaming.runtime.core.graph;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.ray.streaming.jobgraph.VertexType;\nimport org.ray.streaming.operator.StreamOperator;\n\npublic class ExecutionNode implements Serializable {\n\n  private int nodeId;\n  private int parallelism;\n  private NodeType nodeType;\n  private StreamOperator streamOperator;\n  private List<ExecutionTask> executionTasks;\n  private List<ExecutionEdge> inputsEdges;\n  private List<ExecutionEdge> outputEdges;\n\n  public ExecutionNode(int nodeId, int parallelism) {\n    this.nodeId = nodeId;\n    this.parallelism = parallelism;\n    this.executionTasks = new ArrayList<>();\n    this.inputsEdges = new ArrayList<>();\n    this.outputEdges = new ArrayList<>();\n  }\n\n  public int getNodeId() {\n    return nodeId;\n  }\n\n  public void setNodeId(int nodeId) {\n    this.nodeId = nodeId;\n  }\n\n  public int getParallelism() {\n    return parallelism;\n  }\n\n  public void setParallelism(int parallelism) {\n    this.parallelism = parallelism;\n  }\n\n  public List<ExecutionTask> getExecutionTasks() {\n    return executionTasks;\n  }\n\n  public void setExecutionTasks(List<ExecutionTask> executionTasks) {\n    this.executionTasks = executionTasks;\n  }\n\n  public List<ExecutionEdge> getOutputEdges() {\n    return outputEdges;\n  }\n\n  public void setOutputEdges(List<ExecutionEdge> outputEdges) {\n    this.outputEdges = outputEdges;\n  }\n\n  public void addExecutionEdge(ExecutionEdge executionEdge) {\n    this.outputEdges.add(executionEdge);\n  }\n\n  public void addInputEdge(ExecutionEdge executionEdge) {\n    this.inputsEdges.add(executionEdge);\n  }\n\n  public List<ExecutionEdge> getInputsEdges() {\n    return inputsEdges;\n  }\n\n  public StreamOperator getStreamOperator() {\n    return streamOperator;\n  }\n\n  public void setStreamOperator(StreamOperator streamOperator) {\n    this.streamOperator = streamOperator;\n  }\n\n  public NodeType getNodeType() {\n    return nodeType;\n  }\n\n  public void setNodeType(VertexType vertexType) {\n    switch (vertexType) {\n      case SOURCE:\n        this.nodeType = NodeType.SOURCE;\n        break;\n      case SINK:\n        this.nodeType = NodeType.SINK;\n        break;\n      default:\n        this.nodeType = NodeType.PROCESS;\n    }\n  }\n\n<｜fim▁hole｜>    sb.append(\", nodeType=\").append(nodeType);\n    sb.append(\", streamOperator=\").append(streamOperator);\n    sb.append('}');\n    return sb.toString();\n  }\n\n  public enum NodeType {\n    SOURCE,\n    PROCESS,\n    SINK,\n  }\n}<｜fim▁end｜>",
    "response": "  @Override\n  public String toString() {\n    final StringBuilder sb = new StringBuilder(\"ExecutionNode{\");\n    sb.append(\"nodeId=\").append(nodeId);\n    sb.append(\", parallelism=\").append(parallelism);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.cloud.datalabeling.v1beta1;\n\npublic interface ObjectDetectionMetricsOrBuilder\n    extends\n    // @@protoc_insertion_point(interface_extends:google.cloud.datalabeling.v1beta1.ObjectDetectionMetrics)\n    com.google.protobuf.MessageOrBuilder {\n\n  /**\n   *\n   *\n   * <pre>\n   * Precision-recall curve.\n   * </pre>\n   *\n   * <code>.google.cloud.datalabeling.v1beta1.PrCurve pr_curve = 1;</code>\n   *\n   * @return Whether the prCurve field is set.\n   */\n  boolean hasPrCurve();\n  /**\n   *\n<｜fim▁hole｜>   * </pre>\n   *\n   * <code>.google.cloud.datalabeling.v1beta1.PrCurve pr_curve = 1;</code>\n   *\n   * @return The prCurve.\n   */\n  com.google.cloud.datalabeling.v1beta1.PrCurve getPrCurve();\n  /**\n   *\n   *\n   * <pre>\n   * Precision-recall curve.\n   * </pre>\n   *\n   * <code>.google.cloud.datalabeling.v1beta1.PrCurve pr_curve = 1;</code>\n   */\n  com.google.cloud.datalabeling.v1beta1.PrCurveOrBuilder getPrCurveOrBuilder();\n}<｜fim▁end｜>",
    "response": "   *\n   * <pre>\n   * Precision-recall curve.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package xreliquary.entities.shot;\n\nimport net.minecraft.entity.EntityLivingBase;\nimport net.minecraft.entity.effect.EntityLightningBolt;\nimport net.minecraft.entity.monster.EntityCreeper;\nimport net.minecraft.entity.player.EntityPlayer;\nimport net.minecraft.util.MovingObjectPosition;\nimport net.minecraft.world.World;\n\npublic class EntityStormShot extends EntityShotBase {\n    public EntityStormShot(World par1World) {\n        super(par1World);\n    }\n\n    public EntityStormShot(World par1World, double par2, double par4, double par6) {\n        super(par1World, par2, par4, par6);\n    }\n\n    public EntityStormShot(World par1World, EntityPlayer par2EntityPlayer) {\n        super(par1World, par2EntityPlayer);\n    }\n\n    @Override\n    void doFiringEffects() {\n        worldObj.spawnParticle(\"mobSpellAmbient\", posX + smallGauss(0.1D), posY + smallGauss(0.1D), posZ + smallGauss(0.1D), 0.5D, 0.5D, 0.5D);\n        worldObj.spawnParticle(\"flame\", posX, posY, posZ, gaussian(motionX), gaussian(motionY), gaussian(motionZ));\n    }\n\n    @Override\n    void doFlightEffects() {\n        // does nothing\n    }\n\n    @Override\n    void onImpact(MovingObjectPosition mop) {\n        if (mop.typeOfHit == MovingObjectPosition.MovingObjectType.ENTITY && mop.entityHit != null) {\n            if (mop.entityHit == shootingEntity)\n                return;\n            if (!(mop.entityHit instanceof EntityLivingBase))\n                return;\n            this.onImpact((EntityLivingBase)mop.entityHit);\n        } else if (mop.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {\n            if (worldObj.canLightningStrikeAt(mop.blockX, mop.blockY, mop.blockZ) && worldObj.getWorldInfo().isRaining() && worldObj.getWorldInfo().isThundering())\n                worldObj.addWeatherEffect(new EntityLightningBolt(worldObj, mop.blockX, mop.blockY, mop.blockZ));\n            this.groundImpact(mop.sideHit);\n        }\n    }\n\n    @Override\n    void doBurstEffect(int sideHit) {\n        // does nothing\n    }\n\n    @Override\n    void onImpact(EntityLivingBase mop) {\n        if (mop != shootingEntity || ticksInAir > 3)\n            doDamage(mop);\n<｜fim▁hole｜>    }\n\n    @Override\n    void spawnHitParticles(String string, int i) {\n        for (int particles = 0; particles < i; particles++)\n            worldObj.spawnParticle(string, posX, posY - (string == \"portal\" ? 1 : 0), posZ, gaussian(motionX), rand.nextFloat() + motionY, gaussian(motionZ));\n    }\n\n    @Override\n    int getRicochetMax() {\n        return 1;\n    }\n\n    @Override\n    int getDamageOfShot(EntityLivingBase mop) {\n        if (mop instanceof EntityCreeper)\n            ((EntityCreeper) mop).onStruckByLightning(new EntityLightningBolt(worldObj, mop.posX, mop.posY, mop.posZ));\n        if (worldObj.canLightningStrikeAt((int) (mop.posX + 0.5F), (int) (mop.posY + 0.5F), (int) (mop.posZ + 0.5F)) && worldObj.getWorldInfo().isRaining() && worldObj.getWorldInfo().isThundering())\n            worldObj.addWeatherEffect(new EntityLightningBolt(worldObj, (int) (mop.posX + 0.5F), (int) (mop.posY + 0.5F), (int) (mop.posZ + 0.5F)));\n        float f = 1F + (worldObj.isRaining() ? 0.5F : 0F) + (worldObj.isThundering() ? 0.5F : 0F);\n        return Math.round(9F * f) + d6();\n    }\n}<｜fim▁end｜>",
    "response": "        spawnHitParticles(\"bubble\", 18);\n        this.setDead();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package eu.europa.ec.fisheries.uvms.proxy.vessel;\n\nimport eu.europa.ec.fisheries.uvms.proxy.vessel.bean.ParameterCacheBean;\nimport eu.europa.ec.fisheries.uvms.proxy.vessel.constant.ParameterKey;\nimport eu.europa.ec.fisheries.uvms.proxy.vessel.message.FluxMessageSenderBean;\nimport java.util.Map;\nimport javax.ejb.DependsOn;\nimport javax.ejb.EJB;\nimport javax.ejb.Singleton;\nimport javax.ejb.Startup;\nimport javax.xml.ws.BindingProvider;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport xeu.connector_bridge.wsdl.v1.BridgeConnectorPortType;\nimport xeu.connector_bridge.wsdl.v1.BridgeConnectorService;\n\n@Singleton\npublic class PortInitiator {\n\n    private static Logger LOG = LoggerFactory.getLogger(PortInitiator.class);\n\n    private BridgeConnectorPortType vesselPort;\n\n    @EJB\n    ParameterCacheBean params;\n\n    /**\n     *\n     * @return\n     */\n    public BridgeConnectorPortType getPort() {\n        if (vesselPort == null) {\n            vesselPort = setupPort();\n        }\n        return vesselPort;\n    }\n\n    /**\n     *\n     * @return\n     */\n    private BridgeConnectorPortType setupPort() {\n        LOG.info(\"Setting up port with endpoint address: {}\", params.getCachedStringValue(ParameterKey.SERVICE_ENDPOINT));\n        BridgeConnectorService service = new BridgeConnectorService();\n        BridgeConnectorPortType port = service.getBridgeConnectorSOAP11Port();\n<｜fim▁hole｜>    }\n\n    public void updatePortValues() {\n        vesselPort = null;\n    }\n}<｜fim▁end｜>",
    "response": "        BindingProvider bp = (BindingProvider) port;\n        Map<String, Object> context = bp.getRequestContext();\n        context.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, params.getCachedStringValue(ParameterKey.SERVICE_ENDPOINT));\n        return port;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.earthtime.dataDictionaries;\n\npublic enum UThFractionationCorrectedIsotopicRatios {\n\n    // measured UTh ratios\n    /**\n     * \n     */\n    r234U_238Ufc( \"r234U_238Ufc\" ),\n    r232Th_238Ufc(\"r232Th_238Ufc\"),\n    r230Th_238Ufc(\"r230Th_238Ufc\"),\n    /**\n     * \n     */\n    r230Th_232Thfc( \"r230Th_232Thfc\" ),\n    /**\n     * \n     */\n    r228Ra_226Rafc( \"r228Ra_226Rafc\" ),\n    /**\n     * \n     */\n    r231Pa_233Pafc( \"r231Pa_233Pafc\" ),    \n    /**\n     * \n     */\n    r238U_206Pbfc( \"r238U_206Pbfc\" ),\n    /**\n     * \n     */\n    r207Pb_206Pbfc( \"r207Pb_206Pbfc\" );\n\n    private String name;\n\n    private UThFractionationCorrectedIsotopicRatios ( String name ) {\n        this.name = name;\n    }\n\n    /**\n     * \n     * @return\n     */\n    public String getName () {\n        return name;\n    }\n\n    /**\n     * \n     * @return\n     */\n    public static String[] getNames () {\n        String[] retVal = new String[UThFractionationCorrectedIsotopicRatios.values().length];\n        for (int i = 0; i < UThFractionationCorrectedIsotopicRatios.values().length; i ++) {\n            retVal[i] = UThFractionationCorrectedIsotopicRatios.values()[i].getName();\n        }\n        return retVal;\n    }\n\n    /**\n     * \n     * @param checkString\n     * @return\n     */\n    public static boolean contains ( String checkString ) {\n        boolean retVal = true;\n        try {\n<｜fim▁hole｜>        } catch (IllegalArgumentException e) {\n            retVal = false;\n        }\n\n        return retVal;\n    }\n}<｜fim▁end｜>",
    "response": "            UThFractionationCorrectedIsotopicRatios.valueOf( checkString );\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.rapidminer.tools.math.som;\n\nimport java.io.Serializable;\n\npublic class KohonenNode implements Serializable {\n\n    private static final long serialVersionUID = -7614188662702840710L;\n    private double[] weight;\n\n    /**\n<｜fim▁hole｜>    }\n\n    /**\n     * Get weights double [ ].\n     *\n     * @return the double [ ]\n     */\n    public double[] getWeights() {\n        return weight;\n    }\n\n    /**\n     * Sets weights.\n     *\n     * @param weights the weights\n     */\n    public void setWeights(double[] weights) {\n        this.weight = weights.clone();\n    }\n}<｜fim▁end｜>",
    "response": "     * Instantiates a new Kohonen node.\n     *\n     * @param weightInit the weight init\n     */\n    public KohonenNode(double[] weightInit) {\n        weight = weightInit.clone();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package eu.itesla_project.contingency.tasks;\n\nimport eu.itesla_project.commons.ITeslaException;\nimport eu.itesla_project.computation.ComputationManager;\nimport eu.itesla_project.iidm.network.BusbarSection;\nimport eu.itesla_project.iidm.network.Network;\nimport eu.itesla_project.iidm.network.Switch;\nimport eu.itesla_project.iidm.network.Terminal;\n\nimport java.util.Objects;\nimport java.util.Set;\n\npublic class BusbarSectionTripping extends AbstractTrippingTask {\n\n    private final String busbarSectionId;\n\n    public BusbarSectionTripping(String busbarSectionId) {\n        this.busbarSectionId = Objects.requireNonNull(busbarSectionId);\n<｜fim▁hole｜>\n    @Override\n    public void traverse(Network network, ComputationManager computationManager, Set<Switch> switchesToOpen, Set<Terminal> terminalsToDisconnect) {\n        Objects.requireNonNull(network);\n\n        BusbarSection busbarSection = network.getBusbarSection(busbarSectionId);\n        if (busbarSection == null) {\n            throw new ITeslaException(\"Busbar section '\" + busbarSectionId + \"' not found\");\n        }\n\n        ContingencyTopologyTraverser.traverse(busbarSection.getTerminal(), switchesToOpen, terminalsToDisconnect);\n    }\n}<｜fim▁end｜>",
    "response": "    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import com.twilio.Twilio;\nimport com.twilio.rest.api.v2010.account.call.Feedback;\n\npublic class Example {\n  // Get your Account SID and Auth Token from https://twilio.com/console\n  // To set up environment variables, see http://twil.io/secure\n  public static final String ACCOUNT_SID = System.getenv(\"TWILIO_ACCOUNT_SID\");\n  public static final String AUTH_TOKEN = System.getenv(\"TWILIO_AUTH_TOKEN\");\n\n  public static void main(String[] args) {\n    Twilio.init(ACCOUNT_SID, AUTH_TOKEN);\n\n    // Get an object from its sid. If you do not have a sid,\n    // check out the list resource examples on this page\n<｜fim▁hole｜>\n    System.out.println(feedback.getDateCreated());\n  }\n}<｜fim▁end｜>",
    "response": "    Feedback feedback = Feedback.fetcher(\"CA42ed11f93dc08b952027ffbc406d0868\").fetch();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.sf.jabref.logic.layout.format;\n\n<｜fim▁hole｜>public class Iso690FormatDate implements LayoutFormatter {\n\n    @Override\n    public String format(String s) {\n\n        if (s == null || s.trim().isEmpty()) {\n            return \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        String[] date = s.split(\"de\");\n        //parte el string en los distintos campos de la fecha\n        if (date.length == 1) { //sólo pone el año\n            sb.append(date[0].trim());\n        } else if (date.length == 2) {//primer campo mes, segundo campo año\n            //cambiamos al formato año - mes\n            sb.append(date[1].trim()).append('-').append(date[0].trim());\n        } else if (date.length == 3) {\n            //primer campo día, segundo campo mes y tercer campo año\n            // cambiamos al formato año-mes-día\n            sb.append(date[2].trim()).append('-').append(date[1].trim()).append('-').append(date[0].trim());\n        }\n        return sb.toString();//retorna el string creado con la fecha.\n    }\n}<｜fim▁end｜>",
    "response": "import net.sf.jabref.logic.layout.LayoutFormatter;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package hu.bme.mit.incqueryd.monitoringserver.core.processing;\n\nimport static akka.pattern.Patterns.ask;\nimport hu.bme.mit.incqueryd.jvmmonitoring.metrics.JVMMetrics;\nimport hu.bme.mit.incqueryd.monitoringserver.core.MonitoringAddressStore;\nimport hu.bme.mit.incqueryd.retemonitoring.metrics.MonitoringMessage;\n\nimport java.util.ArrayList;\n<｜fim▁hole｜>import akka.util.Timeout;\n\npublic class JVMMonitoringWorker extends Thread {\n\n    private List<JVMMetrics> jvmMetrics;\n\n    protected final Timeout timeout = new Timeout(Duration.create(20, \"seconds\"));\n\n    public JVMMonitoringWorker() {\n        jvmMetrics = new ArrayList<>();\n\n    }\n\n    public void run() {\n        for (ActorRef actorRef: MonitoringAddressStore.getJvmActors()) {\n            final Future<Object> future = ask(actorRef, MonitoringMessage.MONITOR, timeout);\n            try {\n                final JVMMetrics result = (JVMMetrics) Await.result(future, timeout.duration());\n                jvmMetrics.add(result);\n            } catch (Exception e) {\n\n            }\n        }\n    }\n\n    public List<JVMMetrics> getJvmMetrics() {\n        return jvmMetrics;\n    }\n}<｜fim▁end｜>",
    "response": "import java.util.List;\n\nimport scala.concurrent.Await;\nimport scala.concurrent.Future;\nimport scala.concurrent.duration.Duration;\nimport akka.actor.ActorRef;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package is.idega.idegaweb.campus.block.request.data;\n\npublic interface Request extends com.idega.data.IDOEntity\n{\n public java.sql.Timestamp getDateFailure();\n public java.sql.Timestamp getDateProcessed();\n public java.sql.Timestamp getDateSent();\n public java.lang.String getDescription();\n public java.lang.String getRequestType();\n public java.lang.String getSpecialTime();\n public java.lang.String getStatus();\n public boolean getReportedViaTelephone();\n public int getUserId();\n<｜fim▁hole｜> public void setDateFailure(java.sql.Timestamp p0);\n public void setDateProcessed(java.sql.Timestamp p0);\n public void setDateSent(java.sql.Timestamp p0);\n public void setDescription(java.lang.String p0);\n public void setRequestType(java.lang.String p0);\n public void setSpecialTime(java.lang.String p0);\n public void setStatus(java.lang.String p0);\n public void setUserId(int p0);\n public void setUserId(java.lang.Integer p0);\n public void setReportedViaTelephone(boolean reported);\n\n}<｜fim▁end｜>",
    "response": " public void initializeAttributes();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.zeppelin.elasticsearch;\n\nimport static org.elasticsearch.common.xcontent.XContentFactory.jsonBuilder;\nimport static org.junit.Assert.assertEquals;\n\nimport java.io.IOException;\nimport java.util.*;\n\nimport org.apache.commons.lang.math.RandomUtils;\nimport org.apache.zeppelin.interpreter.InterpreterResult;\nimport org.apache.zeppelin.interpreter.InterpreterResult.Code;\nimport org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;\nimport org.elasticsearch.action.admin.indices.delete.DeleteIndexRequest;\nimport org.elasticsearch.client.Client;\nimport org.elasticsearch.common.settings.Settings;\nimport org.elasticsearch.node.Node;\nimport org.elasticsearch.node.NodeBuilder;\nimport org.junit.AfterClass;\nimport org.junit.Assert;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\n\npublic class ElasticsearchInterpreterTest {\n\n  private static Client elsClient;\n  private static Node elsNode;\n  private static ElasticsearchInterpreter interpreter;\n\n  private static final String[] METHODS = { \"GET\", \"PUT\", \"DELETE\", \"POST\" };\n  private static final int[] STATUS = { 200, 404, 500, 403 };\n\n  private static final String ELS_CLUSTER_NAME = \"zeppelin-elasticsearch-interpreter-test\";\n  private static final String ELS_HOST = \"localhost\";\n  private static final String ELS_TRANSPORT_PORT = \"10300\";\n  private static final String ELS_HTTP_PORT = \"10200\";\n  private static final String ELS_PATH = \"/tmp/els\";\n\n  @BeforeClass\n  public static void populate() throws IOException {\n\n    final Settings settings = Settings.settingsBuilder()\n      .put(\"cluster.name\", ELS_CLUSTER_NAME)\n      .put(\"network.host\", ELS_HOST)\n      .put(\"http.port\", ELS_HTTP_PORT)\n      .put(\"transport.tcp.port\", ELS_TRANSPORT_PORT)\n      .put(\"path.home\", ELS_PATH)\n      .build();\n\n    elsNode = NodeBuilder.nodeBuilder().settings(settings).node();\n    elsClient = elsNode.client();\n\n    elsClient.admin().indices().prepareCreate(\"logs\")\n      .addMapping(\"http\", jsonBuilder()\n        .startObject().startObject(\"http\").startObject(\"properties\")\n          .startObject(\"content_length\")\n            .field(\"type\", \"integer\")\n          .endObject()\n        .endObject().endObject().endObject()).get();\n\n    for (int i = 0; i < 50; i++) {\n      elsClient.prepareIndex(\"logs\", \"http\", \"\" + i)\n        .setRefresh(true)\n        .setSource(jsonBuilder()\n          .startObject()\n            .field(\"date\", new Date())\n            .startObject(\"request\")\n              .field(\"method\", METHODS[RandomUtils.nextInt(METHODS.length)])\n              .field(\"url\", \"/zeppelin/\" + UUID.randomUUID().toString())\n              .field(\"headers\", Arrays.asList(\"Accept: *.*\", \"Host: apache.org\"))\n            .endObject()\n            .field(\"status\", STATUS[RandomUtils.nextInt(STATUS.length)])\n            .field(\"content_length\", RandomUtils.nextInt(2000))\n          )\n        .get();\n    }\n\n    final Properties props = new Properties();\n    props.put(ElasticsearchInterpreter.ELASTICSEARCH_HOST, ELS_HOST);\n    props.put(ElasticsearchInterpreter.ELASTICSEARCH_PORT, ELS_TRANSPORT_PORT);\n    props.put(ElasticsearchInterpreter.ELASTICSEARCH_CLUSTER_NAME, ELS_CLUSTER_NAME);\n    interpreter = new ElasticsearchInterpreter(props);\n    interpreter.open();\n  }\n\n  @AfterClass\n  public static void clean() {\n    if (interpreter != null) {\n      interpreter.close();\n    }\n\n    if (elsClient != null) {\n      elsClient.admin().indices().delete(new DeleteIndexRequest(\"logs\")).actionGet();\n      elsClient.close();\n    }\n\n    if (elsNode != null) {\n      elsNode.close();\n    }\n  }\n\n  @Test\n  public void testCount() {\n\n    InterpreterResult res = interpreter.interpret(\"count /unknown\", null);\n    assertEquals(Code.ERROR, res.code());\n\n    res = interpreter.interpret(\"count /logs\", null);\n    assertEquals(\"50\", res.message());\n  }\n\n  @Test\n  public void testGet() {\n\n    InterpreterResult res = interpreter.interpret(\"get /logs/http/unknown\", null);\n    assertEquals(Code.ERROR, res.code());\n\n    res = interpreter.interpret(\"get /logs/http/10\", null);\n    assertEquals(Code.SUCCESS, res.code());\n  }\n\n  @Test\n  public void testSearch() {\n\n    InterpreterResult res = interpreter.interpret(\"size 10\\nsearch /logs *\", null);\n    assertEquals(Code.SUCCESS, res.code());\n\n    res = interpreter.interpret(\"search /logs {{{hello}}}\", null);\n    assertEquals(Code.ERROR, res.code());\n\n    res = interpreter.interpret(\"search /logs { \\\"query\\\": { \\\"match\\\": { \\\"status\\\": 500 } } }\", null);\n    assertEquals(Code.SUCCESS, res.code());\n\n    res = interpreter.interpret(\"search /logs status:404\", null);\n    assertEquals(Code.SUCCESS, res.code());\n\n    res = interpreter.interpret(\"search /logs { \\\"fields\\\": [ \\\"date\\\", \\\"request.headers\\\" ], \\\"query\\\": { \\\"match\\\": { \\\"status\\\": 500 } } }\", null);\n    assertEquals(Code.SUCCESS, res.code());\n  }\n\n  @Test\n  public void testAgg() {\n\n    // Single-value metric\n    InterpreterResult res = interpreter.interpret(\"search /logs { \\\"aggs\\\" : { \\\"distinct_status_count\\\" : \" +\n            \" { \\\"cardinality\\\" : { \\\"field\\\" : \\\"status\\\" } } } }\", null);\n    assertEquals(Code.SUCCESS, res.code());\n\n    // Multi-value metric\n    res = interpreter.interpret(\"search /logs { \\\"aggs\\\" : { \\\"content_length_stats\\\" : \" +\n            \" { \\\"extended_stats\\\" : { \\\"field\\\" : \\\"content_length\\\" } } } }\", null);\n    assertEquals(Code.SUCCESS, res.code());\n\n    // Single bucket\n    res = interpreter.interpret(\"search /logs { \\\"aggs\\\" : { \" +\n            \" \\\"200_OK\\\" : { \\\"filter\\\" : { \\\"term\\\": { \\\"status\\\": \\\"200\\\" } }, \" +\n            \"   \\\"aggs\\\" : { \\\"avg_length\\\" : { \\\"avg\\\" : { \\\"field\\\" : \\\"content_length\\\" } } } } } }\", null);\n    assertEquals(Code.SUCCESS, res.code());\n\n    // Multi-buckets\n    res = interpreter.interpret(\"search /logs { \\\"aggs\\\" : { \\\"status_count\\\" : \" +\n<｜fim▁hole｜>  @Test\n  public void testIndex() {\n\n    InterpreterResult res = interpreter.interpret(\"index /logs { \\\"date\\\": \\\"\" + new Date() + \"\\\", \\\"method\\\": \\\"PUT\\\", \\\"status\\\": \\\"500\\\" }\", null);\n    assertEquals(Code.ERROR, res.code());\n\n    res = interpreter.interpret(\"index /logs/http { \\\"date\\\": \\\"2015-12-06T14:54:23.368Z\\\", \\\"method\\\": \\\"PUT\\\", \\\"status\\\": \\\"500\\\" }\", null);\n    assertEquals(Code.SUCCESS, res.code());\n  }\n\n  @Test\n  public void testDelete() {\n\n    InterpreterResult res = interpreter.interpret(\"delete /logs/http/unknown\", null);\n    assertEquals(Code.ERROR, res.code());\n\n    res = interpreter.interpret(\"delete /logs/http/11\", null);\n    assertEquals(\"11\", res.message());\n  }\n\n  @Test\n  public void testMisc() {\n\n    InterpreterResult res = interpreter.interpret(null, null);\n    assertEquals(Code.SUCCESS, res.code());\n\n    res = interpreter.interpret(\"   \\n \\n \", null);\n    assertEquals(Code.SUCCESS, res.code());\n  }\n\n  @Test\n  public void testCompletion() {\n    List expectedResultOne = Arrays.asList(new InterpreterCompletion(\"count\", \"count\"));\n    List expectedResultTwo = Arrays.asList(new InterpreterCompletion(\"help\", \"help\"));\n\n    List<InterpreterCompletion> resultOne = interpreter.completion(\"co\", 0);\n    List<InterpreterCompletion> resultTwo = interpreter.completion(\"he\", 0);\n    List<InterpreterCompletion> resultAll = interpreter.completion(\"\", 0);\n\n    Assert.assertEquals(expectedResultOne, resultOne);\n    Assert.assertEquals(expectedResultTwo, resultTwo);\n\n    List allCompletionList = new ArrayList<>();\n    for (InterpreterCompletion ic : resultAll) {\n      allCompletionList.add(ic.getName());\n    }\n    Assert.assertEquals(interpreter.COMMANDS, allCompletionList);\n  }\n\n}<｜fim▁end｜>",
    "response": "            \" { \\\"terms\\\" : { \\\"field\\\" : \\\"status\\\" } } } }\", null);\n    assertEquals(Code.SUCCESS, res.code());\n  }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package uk.ac.bbsrc.tgac.miso.service.impl;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport com.eaglegenomics.simlims.core.User;\n\nimport uk.ac.bbsrc.tgac.miso.core.data.Lab;\nimport uk.ac.bbsrc.tgac.miso.core.security.AuthorizationManager;\nimport uk.ac.bbsrc.tgac.miso.core.service.LabService;\nimport uk.ac.bbsrc.tgac.miso.core.service.exception.ValidationError;\nimport uk.ac.bbsrc.tgac.miso.core.service.exception.ValidationResult;\nimport uk.ac.bbsrc.tgac.miso.core.store.DeletionStore;\nimport uk.ac.bbsrc.tgac.miso.core.util.Pluralizer;\nimport uk.ac.bbsrc.tgac.miso.persistence.InstituteDao;\nimport uk.ac.bbsrc.tgac.miso.persistence.LabDao;\n\n@Transactional(rollbackFor = Exception.class)\n@Service\npublic class DefaultLabService implements LabService {\n\n  @Autowired\n  private LabDao labDao;\n\n  @Autowired\n  private DeletionStore deletionStore;\n\n  @Autowired\n  private InstituteDao instituteDao;\n\n  @Autowired\n  private AuthorizationManager authorizationManager;\n\n  public void setLabDao(LabDao labDao) {\n    this.labDao = labDao;\n  }\n\n  public void setInstituteDao(InstituteDao instituteDao) {\n    this.instituteDao = instituteDao;\n  }\n\n  public void setAuthorizationManager(AuthorizationManager authorizationManager) {\n    this.authorizationManager = authorizationManager;\n  }\n\n  @Override\n  public Lab get(long id) throws IOException {\n<｜fim▁hole｜>  @Override\n  public Long create(Lab lab, Long instituteId) throws IOException {\n    authorizationManager.throwIfNotInternal();\n    User user = authorizationManager.getCurrentUser();\n    lab.setCreatedBy(user);\n    lab.setUpdatedBy(user);\n    lab.setInstitute(instituteDao.getInstitute(instituteId));\n    return labDao.addLab(lab);\n  }\n\n  @Override\n  public void update(Lab lab, Long instituteId) throws IOException {\n    authorizationManager.throwIfNonAdmin();\n    Lab updatedLab = get(lab.getId());\n    updatedLab.setAlias(lab.getAlias());\n    updatedLab.setInstitute(instituteDao.getInstitute(instituteId));\n    updatedLab.setArchived(lab.isArchived());\n    User user = authorizationManager.getCurrentUser();\n    updatedLab.setUpdatedBy(user);\n    labDao.update(updatedLab);\n  }\n\n  @Override\n  public List<Lab> list() throws IOException {\n    return labDao.getLabs();\n  }\n\n  @Override\n  public DeletionStore getDeletionStore() {\n    return deletionStore;\n  }\n\n  @Override\n  public AuthorizationManager getAuthorizationManager() {\n    return authorizationManager;\n  }\n\n  @Override\n  public ValidationResult validateDeletion(Lab object) {\n    ValidationResult result = new ValidationResult();\n\n    long tissueUsage = labDao.getUsageByTissues(object);\n    if (tissueUsage > 0L) {\n      result.addError(ValidationError.forDeletionUsage(object, tissueUsage, Pluralizer.samples(tissueUsage)));\n    }\n    long transferUsage = labDao.getUsageByTransfers(object);\n    if (transferUsage > 0L) {\n      result.addError(ValidationError.forDeletionUsage(object, transferUsage, Pluralizer.transfers(transferUsage)));\n    }\n\n    return result;\n  }\n\n}<｜fim▁end｜>",
    "response": "    authorizationManager.throwIfUnauthenticated();\n    return labDao.getLab(id);\n  }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package greymerk.roguelike.worldgen;\n\nimport net.minecraft.block.Block;\nimport net.minecraft.init.Blocks;\nimport net.minecraft.world.World;\n\npublic enum Door {\n\n    IRON, WOOD;\n\n    public static void generate(World world, Coord pos, Cardinal dir, Door type){\n        generate(world, pos, dir, type, false);\n<｜fim▁hole｜>\n        MetaBlock doorBase = new MetaBlock(getBlockId(type), getMeta(false, dir, open, false));\n        doorBase.setBlock(world, cursor);\n        cursor.add(Cardinal.UP);\n        MetaBlock doorTop = new MetaBlock(getBlockId(type), getMeta(true, dir, open, false));\n        doorTop.setBlock(world, cursor);\n    }\n\n    private static Block getBlockId(Door type){\n        if(type == Door.IRON) return Blocks.iron_door; \n        return Blocks.wooden_door;\n    }\n\n    private static int getMeta(boolean top, Cardinal dir, boolean open, boolean hingeLeft){\n        int meta = 0;\n\n        if(top){\n\n            if(hingeLeft) meta += 1;\n            return meta + 8;\n\n        } else {\n\n            if(open) meta += 4;\n\n            switch(dir){\n            case WEST: return meta;\n            case NORTH: return meta + 1;\n            case EAST: return meta + 2;\n            case SOUTH: return meta + 3;\n            default: return meta;\n            }\n\n        }\n\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    public static void generate(World world, Coord pos, Cardinal dir, Door type, boolean open){\n\n        Coord cursor = new Coord(pos);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.ovirt.engine.ui.webadmin.widget.storage;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\n\nimport org.ovirt.engine.core.common.businessentities.BusinessEntity;\nimport org.ovirt.engine.core.common.businessentities.DiskImage;\nimport org.ovirt.engine.core.common.businessentities.VM;\nimport org.ovirt.engine.ui.common.CommonApplicationConstants;\nimport org.ovirt.engine.ui.common.CommonApplicationResources;\nimport org.ovirt.engine.ui.common.widget.label.DiskSizeLabel;\nimport org.ovirt.engine.ui.common.widget.label.TextBoxLabel;\nimport org.ovirt.engine.ui.common.widget.tree.AbstractSubTabTree;\nimport org.ovirt.engine.ui.uicommonweb.models.SearchableListModel;\nimport org.ovirt.engine.ui.webadmin.ApplicationConstants;\nimport org.ovirt.engine.ui.webadmin.ApplicationResources;\nimport org.ovirt.engine.ui.webadmin.widget.label.FullDateTimeLabel;\n\nimport com.google.gwt.resources.client.ImageResource;\nimport com.google.gwt.user.client.ui.HorizontalPanel;\nimport com.google.gwt.user.client.ui.Image;\nimport com.google.gwt.user.client.ui.TreeItem;\nimport com.google.gwt.user.client.ui.VerticalPanel;\n\npublic class VMsTree<M extends SearchableListModel> extends AbstractSubTabTree<M, VM, DiskImage> {\n\n    ApplicationResources resources;\n    ApplicationConstants constants;\n\n    public VMsTree(CommonApplicationResources resources, CommonApplicationConstants constants) {\n        super(resources, constants);\n        this.resources = (ApplicationResources) resources;\n        this.constants = (ApplicationConstants) constants;\n    }\n\n    @Override\n    protected TreeItem getRootItem(VM vm) {\n        HorizontalPanel panel = new HorizontalPanel();\n        panel.setSpacing(1);\n        panel.setWidth(\"100%\");\n\n        addItemToPanel(panel, new Image(resources.vmImage()), \"25px\");\n        addTextBoxToPanel(panel, new TextBoxLabel(), vm.getvm_name(), \"\");\n        addTextBoxToPanel(panel, new TextBoxLabel(), String.valueOf(vm.getDiskMap().size()), \"80px\");\n        addTextBoxToPanel(panel, new TextBoxLabel(), vm.getvmt_name(), \"160px\");\n        addValueLabelToPanel(panel, new DiskSizeLabel<Double>(), vm.getDiskSize(), \"110px\");\n        addValueLabelToPanel(panel, new DiskSizeLabel<Double>(), vm.getActualDiskWithSnapshotsSize(), \"110px\");\n        addValueLabelToPanel(panel, new FullDateTimeLabel(), vm.getvm_creation_date(), \"140px\");\n\n        TreeItem treeItem = new TreeItem(panel);\n        treeItem.setUserObject(vm.getId());\n        return treeItem;\n    }\n\n    @Override\n    protected TreeItem getNodeItem(DiskImage disk) {\n        return getDiskOrSnapshotNode(new ArrayList<DiskImage>(Arrays.asList(disk)), true);\n    }\n\n    @Override\n    protected TreeItem getLeafItem(DiskImage disk) {\n        return getDiskOrSnapshotNode(disk.getSnapshots(), false);\n    }\n\n    @Override\n    protected ArrayList<DiskImage> getNodeObjects(VM vm) {\n        return new ArrayList<DiskImage>(vm.getDiskMap().values());\n    }\n\n    @Override\n    protected boolean getIsNodeEnabled(DiskImage disk) {\n        return disk.getstorage_ids().get(0).equals(((BusinessEntity) listModel.getEntity()).getId());\n    }\n\n    @Override\n    protected String getNodeDisabledTooltip() {\n        return constants.differentStorageDomainWarning();\n    }\n\n    private TreeItem getDiskOrSnapshotNode(ArrayList<DiskImage> disks, final boolean isDisk) {\n        if (disks.isEmpty()) {\n            return null;\n        }\n\n        VerticalPanel vPanel = new VerticalPanel();\n        vPanel.setWidth(\"100%\");\n\n        for (DiskImage disk : disks) {\n            HorizontalPanel panel = new HorizontalPanel();\n\n            ImageResource image =\n                    isDisk ? resources.diskImage() : resources.snapshotImage();\n            String name = isDisk ? \"Disk \" + disk.getinternal_drive_mapping() : disk.getdescription();\n\n            addItemToPanel(panel, new Image(image), \"25px\");\n            addTextBoxToPanel(panel, new TextBoxLabel(), name, \"\");\n<｜fim▁hole｜>            addValueLabelToPanel(panel, new DiskSizeLabel<Long>(), disk.getSizeInGigabytes(), \"110px\");\n            addValueLabelToPanel(panel, new DiskSizeLabel<Double>(), disk.getActualDiskWithSnapshotsSize(), \"110px\");\n            addValueLabelToPanel(panel, new FullDateTimeLabel(), disk.getcreation_date(), \"140px\");\n\n            panel.setSpacing(1);\n            panel.setWidth(\"100%\");\n\n            vPanel.add(panel);\n        }\n\n        TreeItem treeItem = new TreeItem(vPanel);\n        treeItem.setUserObject(disks.get(0).getId());\n        return treeItem;\n    }\n\n    private TreeItem getDiskNode(DiskImage disk) {\n        return getDiskOrSnapshotNode(new ArrayList<DiskImage>(Arrays.asList(disk)), true);\n    }\n\n    private TreeItem getSnapshotsNode(ArrayList<DiskImage> disks) {\n        return getDiskOrSnapshotNode(disks, false);\n    }\n\n}<｜fim▁end｜>",
    "response": "            addTextBoxToPanel(panel, new TextBoxLabel(), \"\", \"80px\");\n            addTextBoxToPanel(panel, new TextBoxLabel(), \"\", \"160px\");\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.mcac0006.siftscience.event.domain;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.codehaus.jackson.annotate.JsonAnyGetter;\nimport org.codehaus.jackson.annotate.JsonAnySetter;\nimport org.codehaus.jackson.annotate.JsonProperty;\nimport org.codehaus.jackson.map.annotate.JsonDeserialize;\nimport org.codehaus.jackson.map.annotate.JsonSerialize;\nimport org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion;\n\nimport com.mcac0006.siftscience.types.deserializer.DateDeserializer;\nimport com.mcac0006.siftscience.types.serializer.DateSerializer;\n\npublic abstract class Event {\n\n    /**\n     * The event type. Can be $create_order, $transaction, etc ...\n     */\n    @JsonProperty(value=\"$type\")\n    private String eventType;\n\n    /**\n     * Your Sift Science API key\n     */\n    @JsonProperty(value=\"$api_key\")\n    private String apiKey;\n\n    /**\n     * Include this field in your API requests when sending historical events.\n     * The value is the date and time of the historical time that the action took place.\n     *\n     * Refer to Sift Science's\n     * <a href=\"https://siftscience.com/docs/tutorials/sending-historical-data/\">Sending Historical Data</a>\n     * for more information.\n     */\n    @JsonProperty(value=\"$time\")\n    @JsonSerialize(using=DateSerializer.class, include=Inclusion.NON_EMPTY)\n    @JsonDeserialize(using=DateDeserializer.class)\n    private Date time;\n\n    /**\n     * Sift Science also supports additional information which might be analyzed and\n     * further improve the accuracy for fraud.\n     *\n     * <br /><br />\n     *\n     * <strong>Note: The $ prefix is reserved for supported fields in the Events API.\n     * Custom field names may only contain alphanumeric characters and _.</strong>\n     *\n<｜fim▁hole｜>     * analysis on them.\n     *\n     * <ul>\n     * <li><strong>Email</strong> fields should always end with <code>_email</code>. For example: <code>referrer_email</code>, <code>seller_email</code>.</li>\n     * <li><strong>Phone</strong> fields should always end with <code>_phone</code>. For example: <code>secondary_phone</code>, <code>work_phone</code>.</li>\n     * <li><strong>Latitude</strong> fields should always end with <code>_lat</code>. For example: <code>dropoff_location_lat</code>. Must be a floating point number.</li>\n     * <li><strong>Longitude</strong> fields should always end with <code>_lng</code>. For example: <code>pickup_location_lng</code>. Must be a floating point number.</li>\n     * <li><strong>User ID</strong> fields should always end with <code>_user_id</code>. For example: <code>friend_user_id</code>, <code>buyer_user_id</code>.</li>\n     * <li><strong>Status</strong> fields should always end with <code>_status</code>. For example: <code>request_status</code>, <code>rma_status</code>.</li>\n     * </ul>\n     *\n     */\n    private Map<String, Object> customFields = new HashMap<String, Object>();\n\n    protected Event(final String eventType) {\n        super();\n        this.eventType = eventType;\n    }\n\n    protected Event(final String eventType, final String apiKey) {\n        this(eventType);\n        this.apiKey = apiKey;\n    }\n\n    public String getApiKey() {\n        return this.apiKey;\n    }\n\n    public void setApiKey(final String apiKey) {\n        this.apiKey = apiKey;\n    }\n\n    public final String getEventType() {\n        return this.eventType;\n    }\n\n    @JsonAnyGetter\n    public final Map<String, Object> getCustomFields() {\n        return this.customFields;\n    }\n\n    @JsonAnySetter\n    public final void addCustomField(final String key, final Object value) {\n        this.customFields.put(key, value);\n    }\n\n    public Date getTime() {\n        return this.time;\n    }\n\n    public void setTime(final Date time) {\n        this.time = time;\n    }\n\n    @Override\n    public boolean equals(final Object obj) {\n\n        if (obj == null || !(obj instanceof Event)) {\n            return false;\n        }\n\n        final Event e = (Event)obj;\n\n        if (this.apiKey == null) {\n            if (e.getApiKey() != null) {\n                return false;\n            }\n        } else if (!this.apiKey.equals(e.getApiKey())) {\n            return false;\n        }\n\n        if (this.eventType == null) {\n            if (e.getEventType() != null) {\n                return false;\n            }\n        } else if (!this.eventType.equals(e.getEventType())) {\n            return false;\n        }\n\n        if (this.customFields == null) {\n            if (e.getCustomFields() != null) {\n                return false;\n            }\n        } else if (!this.customFields.equals(e.getCustomFields())) {\n            return false;\n        }\n\n        if (this.time == null) {\n            if (e.getTime() != null) {\n                return false;\n            }\n        } else if (!this.time.equals(e.getTime())) {\n            return false;\n        }\n\n        return true;\n    }\n}<｜fim▁end｜>",
    "response": "     * <br /><br />\n     *\n     * It is important to name the field properly so that Sift Science can perform the relevant\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.fortiss.smg.websocket.test;\n\n<｜fim▁hole｜>import org.fortiss.smg.websocket.impl.communication.SocketServer;\nimport org.junit.FixMethodOrder;\nimport org.junit.Test;\nimport org.junit.runners.MethodSorters;\n\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class WebSocketImplTest extends TestCase {\n\n    @Test\n    public void testStartServer() throws Exception {\n       /* WebSocketImpl impl = new WebSocketImpl();\n         SocketServer server = impl.startServer(7070);\n         assertTrue(server.isRunning()); */\n    }\n\n}<｜fim▁end｜>",
    "response": "import junit.framework.TestCase;\n\nimport org.fortiss.smg.websocket.impl.WebSocketImpl;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.flink.streaming.runtime.tasks;\n\nimport org.apache.flink.annotation.Internal;\nimport org.apache.flink.api.common.typeutils.TypeSerializer;\nimport org.apache.flink.runtime.execution.Environment;\nimport org.apache.flink.runtime.io.network.partition.consumer.IndexedInputGate;\nimport org.apache.flink.runtime.io.network.partition.consumer.InputGate;\nimport org.apache.flink.runtime.metrics.MetricNames;\nimport org.apache.flink.streaming.api.graph.StreamConfig;\nimport org.apache.flink.streaming.api.graph.StreamEdge;\nimport org.apache.flink.streaming.api.operators.InputSelectable;\nimport org.apache.flink.streaming.api.operators.MultipleInputStreamOperator;\nimport org.apache.flink.streaming.runtime.io.CheckpointedInputGate;\nimport org.apache.flink.streaming.runtime.io.InputGateUtil;\nimport org.apache.flink.streaming.runtime.io.InputProcessorUtil;\nimport org.apache.flink.streaming.runtime.io.MultipleInputSelectionHandler;\nimport org.apache.flink.streaming.runtime.io.StreamMultipleInputProcessor;\nimport org.apache.flink.streaming.runtime.metrics.MinWatermarkGauge;\nimport org.apache.flink.streaming.runtime.metrics.WatermarkGauge;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\nimport static org.apache.flink.util.Preconditions.checkState;\n\n@Internal\npublic class MultipleInputStreamTask<OUT> extends StreamTask<OUT, MultipleInputStreamOperator<OUT>> {\n    public MultipleInputStreamTask(Environment env) throws Exception {\n        super(env);\n    }\n\n    @Override\n<｜fim▁hole｜>\n        ArrayList<IndexedInputGate>[] inputLists = new ArrayList[inputDeserializers.length];\n        WatermarkGauge[] watermarkGauges = new WatermarkGauge[inputDeserializers.length];\n\n        for (int i = 0; i < inputDeserializers.length; i++) {\n            inputLists[i] = new ArrayList<>();\n            watermarkGauges[i] = new WatermarkGauge();\n            headOperator.getMetricGroup().gauge(MetricNames.currentInputWatermarkName(i + 1), watermarkGauges[i]);\n        }\n\n        MinWatermarkGauge minInputWatermarkGauge = new MinWatermarkGauge(watermarkGauges);\n        headOperator.getMetricGroup().gauge(MetricNames.IO_CURRENT_INPUT_WATERMARK, minInputWatermarkGauge);\n\n        List<StreamEdge> inEdges = configuration.getInPhysicalEdges(userClassLoader);\n        int numberOfInputs = configuration.getNumberOfInputs();\n\n        for (int i = 0; i < numberOfInputs; i++) {\n            int inputType = inEdges.get(i).getTypeNumber();\n            IndexedInputGate reader = getEnvironment().getInputGate(i);\n            inputLists[inputType - 1].add(reader);\n        }\n\n        createInputProcessor(inputLists, inputDeserializers, watermarkGauges);\n\n        // wrap watermark gauge since registered metrics must be unique\n        getEnvironment().getMetricGroup().gauge(MetricNames.IO_CURRENT_INPUT_WATERMARK, minInputWatermarkGauge::getValue);\n    }\n\n    protected void createInputProcessor(\n            Collection<IndexedInputGate>[] inputGates,\n            TypeSerializer<?>[] inputDeserializers,\n            WatermarkGauge[] inputWatermarkGauges) {\n        MultipleInputSelectionHandler selectionHandler = new MultipleInputSelectionHandler(\n            headOperator instanceof InputSelectable ? (InputSelectable) headOperator : null,\n            inputGates.length);\n\n        InputGate[] unionedInputGates = new InputGate[inputGates.length];\n        for (int i = 0; i < inputGates.length; i++) {\n            unionedInputGates[i] = InputGateUtil.createInputGate(inputGates[i].toArray(new IndexedInputGate[0]));\n        }\n\n        CheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.createCheckpointedInputGatePair(\n            this,\n            getConfiguration(),\n            getChannelStateWriter(),\n            getEnvironment().getTaskManagerInfo().getConfiguration(),\n            getEnvironment().getMetricGroup().getIOMetricGroup(),\n            getTaskNameWithSubtaskAndId(),\n            unionedInputGates);\n        checkState(checkpointedInputGates.length == inputGates.length);\n\n        inputProcessor = new StreamMultipleInputProcessor(\n            checkpointedInputGates,\n            inputDeserializers,\n            getEnvironment().getIOManager(),\n            getStreamStatusMaintainer(),\n            headOperator,\n            selectionHandler,\n            inputWatermarkGauges,\n            operatorChain,\n            setupNumRecordsInCounter(headOperator));\n    }\n}<｜fim▁end｜>",
    "response": "    public void init() throws Exception {\n        StreamConfig configuration = getConfiguration();\n        ClassLoader userClassLoader = getUserCodeClassLoader();\n\n        TypeSerializer<?>[] inputDeserializers = configuration.getTypeSerializersIn(userClassLoader);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.structr.function;\n\nimport java.util.Collection;\nimport org.apache.commons.lang3.StringUtils;\nimport org.structr.common.error.FrameworkException;\nimport org.structr.core.GraphObject;\nimport org.structr.schema.action.ActionContext;\nimport org.structr.schema.action.Function;\nimport org.structr.web.common.RenderContext;\nimport org.structr.web.entity.dom.DOMNode;\n\npublic class RenderFunction extends Function<Object, Object> {\n\n    public static final String ERROR_MESSAGE_RENDER    = \"Usage: ${render(node)} or ${render(nodes)}. Example: ${render(get(this, \\\"children\\\"))}\";\n    public static final String ERROR_MESSAGE_RENDER_JS = \"Usage: ${{Structr.render(node)}} or ${{Structr.render(nodes)}}. Example: ${{Structr.render(Structr.get('this').children)}}\";\n\n    @Override\n    public String getName() {\n        return \"render()\";\n    }\n<｜fim▁hole｜>            RenderContext innerCtx = new RenderContext((RenderContext)ctx);\n\n            if (sources[0] instanceof DOMNode) {\n\n                ((DOMNode)sources[0]).render(innerCtx, 0);\n\n            } else if (sources[0] instanceof Collection) {\n\n                for (final Object obj : (Collection)sources[0]) {\n\n                    if (obj instanceof DOMNode) {\n                        ((DOMNode)obj).render(innerCtx, 0);\n                    }\n\n                }\n\n            }\n\n            return StringUtils.join(innerCtx.getBuffer().getQueue(), \"\");\n        }\n\n        return usage(ctx.isJavaScriptContext());\n    }\n\n    @Override\n    public String usage(boolean inJavaScriptContext) {\n        return (inJavaScriptContext ? ERROR_MESSAGE_RENDER_JS : ERROR_MESSAGE_RENDER);\n    }\n\n    @Override\n    public String shortDescription() {\n        return \"Renders the children of the current node\";\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    @Override\n    public Object apply(final ActionContext ctx, final GraphObject entity, final Object[] sources) throws FrameworkException {\n\n        if (sources != null && sources.length == 1) {\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jflicks.job;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\n\npublic class OutputStreamJob extends AbstractJob {\n\n    private OutputStream outputStream;\n\n    private OutputStreamJob() {\n    }\n\n    /**\n     * The output stream to send data.\n     *\n     * @param os The given output stream.\n     */\n    public OutputStreamJob(OutputStream os) {\n\n        setOutputStream(os);\n    }\n\n    private OutputStream getOutputStream() {\n        return (outputStream);\n    }\n\n    private void setOutputStream(OutputStream os) {\n        outputStream = os;\n    }\n\n    /**\n     * Write the given data to the stream.\n     *\n     * @param array A byte array of data.\n     * @param offset The offset into the array.\n     * @param length The number of bytes to write.\n     */\n    public void write(byte[] array, int offset, int length) {\n\n        OutputStream os = getOutputStream();\n        if ((os != null) && (array != null)) {\n\n            try {\n\n                os.write(array, offset, length);\n                os.flush();\n\n<｜fim▁hole｜>        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void start() {\n\n        setTerminate(false);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void run() {\n\n        while (!isTerminate()) {\n\n            JobManager.sleep(getSleepTime());\n        }\n\n        setTerminate(true);\n        fireJobEvent(JobEvent.COMPLETE);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public void stop() {\n\n        setTerminate(true);\n    }\n\n}<｜fim▁end｜>",
    "response": "            } catch (IOException ex) {\n            }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.metroveu.metroveu.data;\n\npublic class Pair<L,R> {\n    private L l;\n    private R r;\n    public Pair(L l, R r){\n        this.l = l;\n<｜fim▁hole｜>    public L getL(){ return l; }\n    public R getR(){ return r; }\n    public void setL(L l){ this.l = l; }\n    public void setR(R r){ this.r = r; }\n}<｜fim▁end｜>",
    "response": "        this.r = r;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.fabric8.forge.rest.dto;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\nimport java.util.List;\n\n@JsonInclude(JsonInclude.Include.NON_EMPTY)\npublic class PropertyDTO {\n    private final String name;\n    private final String description;\n    private final String title;\n    private final String requiredMessage;\n    private final Object value;\n    private final String javaType;\n    private final String type;\n    private final boolean enabled;\n    private final boolean required;\n    @JsonProperty(\"enum\")\n    private final List<Object> valueChoices;\n    private final List<Object> typeaheadData;\n\n    public PropertyDTO(String name, String description, String title, String requiredMessage, Object value, String javaType, String type, boolean enabled, boolean required, List<Object> valueChoices, List<Object> typeaheadData) {\n        this.name = name;\n        this.description = description;\n        this.title = title;\n        this.requiredMessage = requiredMessage;\n        this.value = value;\n        this.javaType = javaType;\n        this.type = type;\n        this.enabled = enabled;\n        this.required = required;\n        this.valueChoices = valueChoices;\n        this.typeaheadData = typeaheadData;\n    }\n\n    @Override\n    public String toString() {\n        return \"PropertyDTO{\" +\n                \"name='\" + name + '\\'' +\n                \", javaType='\" + javaType + '\\'' +\n                \", description='\" + description + '\\'' +\n                '}';\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public String getJavaType() {\n        return javaType;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getRequiredMessage() {\n<｜fim▁hole｜>        return value;\n    }\n\n    public boolean isEnabled() {\n        return enabled;\n    }\n\n    public boolean isRequired() {\n        return required;\n    }\n\n    public String getType() {\n        return type;\n    }\n\n    public List<Object> getValueChoices() {\n        return valueChoices;\n    }\n\n    public List<Object> getTypeaheadData() {\n        return typeaheadData;\n    }\n}<｜fim▁end｜>",
    "response": "        return requiredMessage;\n    }\n\n    public Object getValue() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package nl.rug.ai.mas.oops;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.swing.JTextArea;\n\n@SuppressWarnings(\"serial\")\npublic class Console extends JTextArea {\n    public PipedInputStream d_out;\n    public PipedInputStream d_err;\n\n    private static class ReaderThread extends Thread {\n        private List<BufferedReader> d_input = new ArrayList<BufferedReader>();\n        private JTextArea d_console;\n\n        public ReaderThread(JTextArea console) {\n            d_console = console;\n        }\n\n        public void addInputStream(InputStream is) {\n            d_input.add(new BufferedReader(new InputStreamReader(is)));\n        }\n\n        @Override\n        public void run() {\n            while (true) {\n                try {\n                    sleep(10);\n                } catch (InterruptedException e) {\n\n                }\n                try {\n                    for (BufferedReader reader : d_input) {\n                        if (reader.ready()) {\n                            String line = reader.readLine();\n                            synchronized(d_console) {\n                                d_console.append(line + \"\\n\");\n<｜fim▁hole｜>                            }\n                        }\n                    }\n                } catch (IOException e) {\n                    synchronized(d_console) {\n                        d_console.append(\"Internal error: e.getMessage()\");\n                    }\n                }\n            }\n        }\n    }\n\n    public Console() {\n        d_out = new PipedInputStream();\n        d_err = new PipedInputStream();\n    }\n\n    public void start() {\n        ReaderThread readerThread = new ReaderThread(this);\n        readerThread.addInputStream(d_out);\n        readerThread.addInputStream(d_err);\n        readerThread.setDaemon(true);\n        readerThread.start();\n    }\n\n    public OutputStream getOutputStream() throws IOException {\n        return new PipedOutputStream(d_out);\n    }\n\n    public OutputStream getErrorStream() throws IOException {\n        return new PipedOutputStream(d_err);\n    }\n\n    public boolean streamsFlushed() {\n        try {\n            return d_out.available() == 0 && d_err.available() == 0;\n        } catch (IOException e) {\n            return false;\n        }\n    }\n\n    public void clear() {\n        setText(\"\");\n    }\n}<｜fim▁end｜>",
    "response": "\n                                // Scroll down\n                                d_console.setCaretPosition(d_console.getDocument().getLength());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.kuali.coeus.common.budget.impl.core;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.kuali.coeus.sys.framework.service.KcServiceLocator;\nimport org.kuali.rice.coreservice.framework.parameter.ParameterService;\nimport org.kuali.rice.kns.document.MaintenanceDocument;\nimport org.kuali.rice.kns.maintenance.KualiMaintainableImpl;\nimport org.kuali.rice.kns.maintenance.Maintainable;\nimport org.kuali.rice.kns.web.ui.Section;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CostElementMaintainableImpl extends KualiMaintainableImpl {\n\n    private static final long serialVersionUID = -2403270541923494151L;\n\n    private static final String KFS_ON_PARM_NMSPC_CD = \"KC-AWARD\";\n    private static final String KFS_ON_PARM_DTL_TYP_CD = \"Document\";\n    private static final String KFS_ON_PARM_NM = \"FIN_SYSTEM_INTEGRATION_ON\";\n    private static final String KFS_ON_OFF_VALUE = \"OFF\";\n    private static final String KFS_SECTION_NAME = \"Edit Cost Element KFS Option List\";\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public List<Section> getSections(MaintenanceDocument document, Maintainable oldMaintainable) {\n        List<Section> oldSections = super.getSections(document, oldMaintainable);\n\n        String kfsOnParameterValue = getParameterService().getParameterValueAsString(KFS_ON_PARM_NMSPC_CD, KFS_ON_PARM_DTL_TYP_CD, KFS_ON_PARM_NM);\n\n        List<Section> sections = new ArrayList<Section>();\n        if (!StringUtils.equals(kfsOnParameterValue, KFS_ON_OFF_VALUE)) {\n            sections.addAll(oldSections);\n        } else {\n<｜fim▁hole｜>                }\n            }\n        }\n\n        return sections;\n    }\n\n    private ParameterService getParameterService() {\n        return KcServiceLocator.getService(ParameterService.class);\n    }\n\n}<｜fim▁end｜>",
    "response": "            for (Section oldSection : oldSections) {\n                if (!StringUtils.equals(oldSection.getSectionTitle(), KFS_SECTION_NAME)) {\n                    sections.add(oldSection);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.flyco.animation.ZoomExit;\n\nimport android.view.View;\n\n<｜fim▁hole｜>public class ZoomInExit extends BaseAnimatorSet {\n    @Override\n    public void setAnimation(View view) {\n        animatorSet.playTogether(//\n                ObjectAnimator.ofFloat(view, \"scaleX\", 1f, 1.25f, 0),//\n                ObjectAnimator.ofFloat(view, \"scaleY\", 1f, 1.25f, 0),//\n                ObjectAnimator.ofFloat(view, \"alpha\", 1, 0, 0));//\n    }\n}<｜fim▁end｜>",
    "response": "import com.nineoldandroids.animation.ObjectAnimator;\nimport com.flyco.animation.BaseAnimatorSet;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package gov.nasa.worldwindx.examples.dataimport;\n\nimport gov.nasa.worldwind.WorldWind;\nimport gov.nasa.worldwind.avlist.*;\nimport gov.nasa.worldwind.data.*;\nimport gov.nasa.worldwind.geom.*;\nimport gov.nasa.worldwind.layers.SurfaceImageLayer;\nimport gov.nasa.worldwind.render.SurfaceImage;\n<｜fim▁hole｜>import java.io.File;\n\npublic class ImportImagery extends ApplicationTemplate\n{\n    // The data to import.\n    protected static final String IMAGE_PATH = \"gov/nasa/worldwindx/examples/data/craterlake-imagery-30m.tif\";\n\n    public static class AppFrame extends ApplicationTemplate.AppFrame\n    {\n        public AppFrame()\n        {\n            // Show the WAIT cursor because the import may take a while.\n            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));\n\n            // Import the imagery on a thread other than the event-dispatch thread to avoid freezing the UI.\n            Thread t = new Thread(new Runnable()\n            {\n                public void run()\n                {\n                    importImagery();\n\n                    // Restore the cursor.\n                    setCursor(Cursor.getDefaultCursor());\n                }\n            });\n\n            t.start();\n        }\n\n        protected void importImagery()\n        {\n            try\n            {\n                // Read the data and save it in a temp file.\n                File sourceFile = ExampleUtil.saveResourceToTempFile(IMAGE_PATH, \".tif\");\n\n                // Create a raster reader to read this type of file. The reader is created from the currently\n                // configured factory. The factory class is specified in the Configuration, and a different one can be\n                // specified there.\n                DataRasterReaderFactory readerFactory\n                    = (DataRasterReaderFactory) WorldWind.createConfigurationComponent(\n                    AVKey.DATA_RASTER_READER_FACTORY_CLASS_NAME);\n                DataRasterReader reader = readerFactory.findReaderFor(sourceFile, null);\n\n                // Before reading the raster, verify that the file contains imagery.\n                AVList metadata = reader.readMetadata(sourceFile, null);\n                if (metadata == null || !AVKey.IMAGE.equals(metadata.getStringValue(AVKey.PIXEL_FORMAT)))\n                    throw new Exception(\"Not an image file.\");\n\n                // Read the file into the raster. read() returns potentially several rasters if there are multiple\n                // files, but in this case there is only one so just use the first element of the returned array.\n                DataRaster[] rasters = reader.read(sourceFile, null);\n                if (rasters == null || rasters.length == 0)\n                    throw new Exception(\"Can't read the image file.\");\n\n                DataRaster raster = rasters[0];\n\n                // Determine the sector covered by the image. This information is in the GeoTIFF file or auxiliary\n                // files associated with the image file.\n                final Sector sector = (Sector) raster.getValue(AVKey.SECTOR);\n                if (sector == null)\n                    throw new Exception(\"No location specified with image.\");\n\n                // Request a sub-raster that contains the whole image. This step is necessary because only sub-rasters\n                // are reprojected (if necessary); primary rasters are not.\n                int width = raster.getWidth();\n                int height = raster.getHeight();\n\n                // getSubRaster() returns a sub-raster of the size specified by width and height for the area indicated\n                // by a sector. The width, height and sector need not be the full width, height and sector of the data,\n                // but we use the full values of those here because we know the full size isn't huge. If it were huge\n                // it would be best to get only sub-regions as needed or install it as a tiled image layer rather than\n                // merely import it.\n                DataRaster subRaster = raster.getSubRaster(width, height, sector, null);\n\n                // Tne primary raster can be disposed now that we have a sub-raster. Disposal won't affect the\n                // sub-raster.\n                raster.dispose();\n\n                // Verify that the sub-raster can create a BufferedImage, then create one.\n                if (!(subRaster instanceof BufferedImageRaster))\n                    throw new Exception(\"Cannot get BufferedImage.\");\n                BufferedImage image = ((BufferedImageRaster) subRaster).getBufferedImage();\n\n                // The sub-raster can now be disposed. Disposal won't affect the BufferedImage.\n                subRaster.dispose();\n\n                // Create a SurfaceImage to display the image over the specified sector.\n                final SurfaceImage si1 = new SurfaceImage(image, sector);\n\n                // On the event-dispatch thread, add the imported data as an SurfaceImageLayer.\n                SwingUtilities.invokeLater(new Runnable()\n                {\n                    public void run()\n                    {\n                        // Add the SurfaceImage to a layer.\n                        SurfaceImageLayer layer = new SurfaceImageLayer();\n                        layer.setName(\"Imported Surface Image\");\n                        layer.setPickEnabled(false);\n                        layer.addRenderable(si1);\n\n                        // Add the layer to the model and update the application's layer panel.\n                        insertBeforeCompass(AppFrame.this.getWwd(), layer);\n                        AppFrame.this.getLayerPanel().update(AppFrame.this.getWwd());\n\n                        // Set the view to look at the imported image.\n                        ExampleUtil.goTo(getWwd(), sector);\n                    }\n                });\n            }\n            catch (Exception e)\n            {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void main(String[] args)\n    {\n        ApplicationTemplate.start(\"World Wind Imagery Import\", ImportImagery.AppFrame.class);\n    }\n}<｜fim▁end｜>",
    "response": "import gov.nasa.worldwindx.examples.ApplicationTemplate;\nimport gov.nasa.worldwindx.examples.util.ExampleUtil;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.image.*;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package fragments;\n\n<｜fim▁hole｜>\nimport activities.SetMatchScheduleActivity;\nimport activities.SetMatchTimeRangeActivity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.view.View;\nimport dataFormat.TimeDayPair;\n\npublic class SetMatchScheduleFragment extends ScheduleControlFragment {\n    public SetMatchScheduleFragment(boolean isAddScheduleEnabled, Calendar weekCal) {\n        super(isAddScheduleEnabled, weekCal);\n    }\n\n    @Override\n    protected void clickAddSchedule(View view) {\n        Bundle bundle = new Bundle();\n        Intent intent = new Intent(getActivity(), SetMatchTimeRangeActivity.class);\n        TimeDayPair tdPair = getImgTimeDayPairMap().get(view);\n\n        bundle.putInt(\"hour\", tdPair.getTime());\n        bundle.putInt(\"day\", tdPair.getDay());\n        intent.putExtras(bundle);\n        getActivity().startActivityForResult(intent,\n                ((SetMatchScheduleActivity)getActivity()).SET_MATCH_TIME_RANGE_REQUEST_CODE);\n    }\n}<｜fim▁end｜>",
    "response": "import java.util.Calendar;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>import play.libs.F;\nimport play.libs.F.Promise;\nimport play.mvc.Http.RequestHeader;\nimport play.mvc.SimpleResult;\n\npublic class Global extends GlobalSettings{\n\n     @SuppressWarnings(\"unchecked\")\n     public <T extends EssentialFilter> Class<T>[] filters() {\n        return new Class[]{GzipFilter.class};\n     }\n\n    @Override\n    public void onStart(Application application){}\n\n    @Override\n    public void onStop(Application application){}\n\n    public Promise<SimpleResult> onError(RequestHeader request, Throwable t) {\n        return F.Promise.promise(new F.Function0<SimpleResult>() {\n            @Override\n            public SimpleResult apply(){\n                return play.mvc.Results.ok(UtilTool.message(1,\"执行失败！\"));\n            }\n        });\n    }\n\n}<｜fim▁end｜>",
    "response": "import models.UtilTool;\n\nimport play.Application;\nimport play.GlobalSettings;\nimport play.api.mvc.EssentialFilter;\nimport play.filters.gzip.GzipFilter;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.dcache.chimera;\n\nimport java.io.IOException;\n\nimport org.dcache.nfs.ChimeraNFSException;\nimport org.dcache.nfs.nfsstat;\nimport org.dcache.nfs.v4.AbstractNFSv4Operation;\nimport org.dcache.nfs.v4.CompoundContext;\nimport org.dcache.nfs.v4.NFS4Client;\nimport org.dcache.nfs.v4.Stateids;\nimport org.dcache.nfs.v4.xdr.CLOSE4res;\nimport org.dcache.nfs.v4.xdr.nfs_argop4;\nimport org.dcache.nfs.v4.xdr.nfs_opnum4;\nimport org.dcache.nfs.v4.xdr.nfs_resop4;\nimport org.dcache.nfs.vfs.FsCache;\nimport org.dcache.nfs.vfs.Inode;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HdfsOperationCLOSE extends AbstractNFSv4Operation {\n\n    private static final Logger _log = LoggerFactory\n            .getLogger(HdfsOperationCLOSE.class);\n\n    private final HadoopHdfsVfs _fsCache;\n\n    HdfsOperationCLOSE(nfs_argop4 args, HadoopHdfsVfs fsCache) {\n<｜fim▁hole｜>    @Override\n    public void process(CompoundContext context, nfs_resop4 result)\n            throws ChimeraNFSException, IOException {\n        final CLOSE4res res = result.opclose;\n\n        Inode inode = context.currentInode();\n        _fsCache.close(inode);\n\n        NFS4Client client;  \n        if (context.getMinorversion() > 0) {\n            client = context.getSession().getClient();\n        } else {\n            client = context.getStateHandler().getClientIdByStateId(\n                    _args.opclose.open_stateid);\n        }\n\n        if (context.getMinorversion() > 0) {\n            context.getDeviceManager().layoutReturn(context,\n                    _args.opclose.open_stateid);\n        }\n\n        client.releaseState(_args.opclose.open_stateid);\n        client.updateLeaseTime();\n\n        res.open_stateid = Stateids.invalidStateId();\n        res.status = nfsstat.NFS_OK;\n\n        if(_log.isDebugEnabled()) _log.debug(\"IO Closed.\");\n\n    }\n}<｜fim▁end｜>",
    "response": "        super(args, nfs_opnum4.OP_CLOSE);\n        _fsCache = fsCache;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.kylin.common.util;\n\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.URI;\nimport java.net.URISyntaxException;\nimport java.net.UnknownHostException;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.FileSystem;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.hbase.HBaseConfiguration;\nimport org.apache.hadoop.hbase.HConstants;\nimport org.apache.kylin.common.KylinConfig;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HadoopUtil {\n    private static final Logger logger = LoggerFactory.getLogger(HadoopUtil.class);\n\n    private static ThreadLocal<Configuration> hadoopConfig = new ThreadLocal<>();\n\n    private static ThreadLocal<Configuration> hbaseConfig = new ThreadLocal<>();\n\n    public static void setCurrentConfiguration(Configuration conf) {\n        hadoopConfig.set(conf);\n    }\n\n    public static void setCurrentHBaseConfiguration(Configuration conf) {\n        hbaseConfig.set(conf);\n    }\n\n    public static Configuration getCurrentConfiguration() {\n        if (hadoopConfig.get() == null) {\n            hadoopConfig.set(new Configuration());\n        }\n        return hadoopConfig.get();\n    }\n\n    public static Configuration getCurrentHBaseConfiguration() {\n        if (hbaseConfig.get() == null) {\n            Configuration configuration = HBaseConfiguration.create(new Configuration());\n            String hbaseClusterFs = KylinConfig.getInstanceFromEnv().getHBaseClusterFs();\n            if (StringUtils.isNotEmpty(hbaseClusterFs)) {\n                configuration.set(FileSystem.FS_DEFAULT_NAME_KEY, hbaseClusterFs);\n            }\n            hbaseConfig.set(configuration);\n        }\n        return hbaseConfig.get();\n    }\n\n    public static FileSystem getFileSystem(String path) throws IOException {\n        return FileSystem.get(makeURI(path), getCurrentConfiguration());\n    }\n\n    public static URI makeURI(String filePath) {\n        try {\n            return new URI(filePath);\n        } catch (URISyntaxException e) {\n            throw new IllegalArgumentException(\"Cannot create FileSystem from URI: \" + filePath, e);\n        }\n    }\n\n    public static String makeQualifiedPathInHadoopCluster(String path) {\n        try {\n            FileSystem fs = FileSystem.get(getCurrentConfiguration());\n            return fs.makeQualified(new Path(path)).toString();\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Cannot create FileSystem from current hadoop cluster conf\", e);\n        }\n    }\n\n    public static String makeQualifiedPathInHBaseCluster(String path) {\n        try {\n            FileSystem fs = FileSystem.get(getCurrentHBaseConfiguration());\n            return fs.makeQualified(new Path(path)).toString();\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Cannot create FileSystem from current hbase cluster conf\", e);\n<｜fim▁hole｜>\n    /**\n     * e.g.\n     * 0. hbase (recommended way)\n     * 1. hbase:zk-1.hortonworks.com,zk-2.hortonworks.com,zk-3.hortonworks.com:2181:/hbase-unsecure\n     * 2. hbase:zk-1.hortonworks.com,zk-2.hortonworks.com,zk-3.hortonworks.com:2181\n     * 3. hbase:zk-1.hortonworks.com:2181:/hbase-unsecure\n     * 4. hbase:zk-1.hortonworks.com:2181\n     */\n    public static Configuration newHBaseConfiguration(String url) {\n        Configuration conf = HBaseConfiguration.create();\n        if (StringUtils.isEmpty(url))\n            return conf;\n\n        // chop off \"hbase\"\n        if (url.startsWith(\"hbase\") == false)\n            throw new IllegalArgumentException(\"hbase url must start with 'hbase' -- \" + url);\n\n        url = StringUtils.substringAfter(url, \"hbase\");\n        if (StringUtils.isEmpty(url))\n            return conf;\n\n        // case of \"hbase:domain.com:2181:/hbase-unsecure\"\n        Pattern urlPattern = Pattern.compile(\"[:]((?:[\\\\w\\\\-.]+)(?:\\\\,[\\\\w\\\\-.]+)*)[:](\\\\d+)(?:[:](.+))\");\n        Matcher m = urlPattern.matcher(url);\n        if (m.matches() == false)\n            throw new IllegalArgumentException(\"HBase URL '\" + url + \"' is invalid, expected url is like '\" + \"hbase:domain.com:2181:/hbase-unsecure\" + \"'\");\n\n        logger.debug(\"Creating hbase conf by parsing -- \" + url);\n\n        String quorums = m.group(1);\n        String quorum = null;\n        try {\n            String[] tokens = quorums.split(\",\");\n            for (String s : tokens) {\n                quorum = s;\n                InetAddress.getByName(quorum);\n            }\n        } catch (UnknownHostException e) {\n            throw new IllegalArgumentException(\"Zookeeper quorum is invalid: \" + quorum + \"; urlString=\" + url, e);\n        }\n        conf.set(HConstants.ZOOKEEPER_QUORUM, quorums);\n\n        String port = m.group(2);\n        conf.set(HConstants.ZOOKEEPER_CLIENT_PORT, port);\n\n        String znodePath = m.group(3);\n        conf.set(HConstants.ZOOKEEPER_ZNODE_PARENT, znodePath);\n\n        // reduce rpc retry\n        conf.set(HConstants.HBASE_CLIENT_PAUSE, \"3000\");\n        conf.set(HConstants.HBASE_CLIENT_RETRIES_NUMBER, \"5\");\n        conf.set(HConstants.HBASE_CLIENT_OPERATION_TIMEOUT, \"60000\");\n        // conf.set(ScannerCallable.LOG_SCANNER_ACTIVITY, \"true\");\n\n        String hbaseClusterFs = KylinConfig.getInstanceFromEnv().getHBaseClusterFs();\n        if (StringUtils.isNotEmpty(hbaseClusterFs)) {\n            conf.set(FileSystem.FS_DEFAULT_NAME_KEY, hbaseClusterFs);\n        }\n        return conf;\n    }\n\n    /**\n     * \n     * @param table the identifier of hive table, in format <db_name>.<table_name>\n     * @return a string array with 2 elements: {\"db_name\", \"table_name\"}\n     */\n    public static String[] parseHiveTableName(String table) {\n        int cut = table.indexOf('.');\n        String database = cut >= 0 ? table.substring(0, cut).trim() : \"DEFAULT\";\n        String tableName = cut >= 0 ? table.substring(cut + 1).trim() : table.trim();\n\n        return new String[] { database, tableName };\n    }\n}<｜fim▁end｜>",
    "response": "        }\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package amnl.pylizard;\n\nimport junit.framework.TestCase;\n\nimport java.io.File;\nimport java.util.HashSet;\nimport java.util.Set;\nimport java.util.UUID;\n\npublic class LizardExtensionTest extends TestCase {\n\n    LizardExtension lizardExtension;\n\n    public void setUp() throws Exception {\n        super.setUp();\n\n        lizardExtension = new LizardExtension();\n    }\n\n    public void testGetReportsDir() {\n        assertNotNull(lizardExtension.getReportsDir());\n    }\n\n    public void testSetReportsDir() {\n        final File value = new File(UUID.randomUUID().toString());\n        lizardExtension.setReportsDir(value);\n        assertEquals(value, lizardExtension.getReportsDir());\n    }\n\n    public void testGetSourceSets() {\n        assertNotNull(lizardExtension.getSourceSets());\n<｜fim▁hole｜>    }\n\n    public void testSetNumberOfThreads() {\n        final int value = 25;\n        lizardExtension.setNumberOfThreads(value);\n        assertEquals(value, lizardExtension.getNumberOfThreads());\n    }\n\n    public void testDefaultNumberOfThreads() {\n        final int count = Runtime.getRuntime().availableProcessors();\n        assertEquals(count, lizardExtension.getNumberOfThreads());\n    }\n\n    public void testGetIncludes() {\n        assertNotNull(lizardExtension.getIncludes());\n    }\n\n    public void testSetIncludes() {\n        final Set<String> value = new HashSet<String>();\n        lizardExtension.setIncludes(value);\n        assertEquals(value, lizardExtension.getIncludes());\n    }\n\n    public void testGetExcludes() {\n        assertNotNull(lizardExtension.getExcludes());\n    }\n\n    public void testSetExcludes() {\n        final Set<String> value = new HashSet<String>();\n        lizardExtension.setExcludes(value);\n        assertEquals(value, lizardExtension.getExcludes());\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    public void testSetSourceSets() {\n        final Set<Object> value = new HashSet<Object>();\n        lizardExtension.setSourceSets(value);\n        assertEquals(value, lizardExtension.getSourceSets());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package example;\n\nimport java.awt.*;\nimport java.awt.event.KeyEvent;\nimport java.util.Objects;\nimport javax.swing.*;\nimport javax.swing.plaf.TextUI;\nimport javax.swing.text.BadLocationException;\nimport javax.swing.text.Caret;\nimport javax.swing.text.DefaultCaret;\nimport javax.swing.text.JTextComponent;\n\npublic final class MainPanel extends JPanel {\n  private MainPanel() {\n    super(new BorderLayout());\n    OvertypeTextArea textArea = new OvertypeTextArea();\n    textArea.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));\n    textArea.setText(\"Press the INSERT key to toggle the overwrite mode.\\nあああ\\naaaaaaaaaaafasdfas\");\n    add(new JScrollPane(textArea));\n    setPreferredSize(new Dimension(320, 240));\n  }\n\n  public static void main(String[] args) {\n    EventQueue.invokeLater(MainPanel::createAndShowGui);\n  }\n\n  private static void createAndShowGui() {\n    try {\n      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\n      ex.printStackTrace();\n      Toolkit.getDefaultToolkit().beep();\n    }\n    JFrame frame = new JFrame(\"@title@\");\n    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n    frame.getContentPane().add(new MainPanel());\n    frame.pack();\n    frame.setLocationRelativeTo(null);\n    frame.setVisible(true);\n  }\n}\n\nclass OvertypeTextArea extends JTextArea {\n  private boolean overtypeMode = true;\n  private transient Caret defaultCaret;\n  private transient Caret overtypeCaret;\n\n<｜fim▁hole｜>      // setCaretColor(Color.RED);\n      defaultCaret = getCaret();\n      overtypeCaret = new OvertypeCaret();\n      overtypeCaret.setBlinkRate(defaultCaret.getBlinkRate());\n      setOvertypeMode(overtypeMode);\n    });\n  }\n\n  public boolean isOvertypeMode() {\n    return overtypeMode;\n  }\n\n  /*\n   * Set the caret to use depending on overtype/insert mode\n   */\n  public void setOvertypeMode(boolean overtypeMode) {\n    this.overtypeMode = overtypeMode;\n    int pos = getCaretPosition();\n    if (isOvertypeMode()) {\n      setCaret(overtypeCaret);\n    } else {\n      setCaret(defaultCaret);\n    }\n    setCaretPosition(pos);\n  }\n\n  /*\n   * Override method from JComponent\n   */\n  @Override public void replaceSelection(String text) {\n    // Implement overtype mode by selecting the character at the current\n    // caret position\n    if (isOvertypeMode()) {\n      int pos = getCaretPosition();\n      if (getSelectionStart() == getSelectionEnd() && pos < getDocument().getLength()) {\n        moveCaretPosition(pos + 1);\n      }\n    }\n    super.replaceSelection(text);\n  }\n\n  /*\n   * Override method from JComponent\n   */\n  @Override protected void processKeyEvent(KeyEvent e) {\n    super.processKeyEvent(e);\n    // Handle release of Insert key to toggle overtype/insert mode\n    if (e.getID() == KeyEvent.KEY_RELEASED && e.getKeyCode() == KeyEvent.VK_INSERT) {\n      setCaretPosition(getCaretPosition()); // add\n      moveCaretPosition(getCaretPosition()); // add\n      setOvertypeMode(!isOvertypeMode());\n      e.getComponent().repaint(); // add\n    }\n  }\n\n  /*\n   * Paint a horizontal line the width of a column and 1 pixel high\n   */\n  private class OvertypeCaret extends DefaultCaret {\n    /*\n     * The overtype caret will simply be a horizontal line one pixel high\n     * (once we determine where to paint it)\n     */\n    @Override public void paint(Graphics g) {\n      if (isVisible()) {\n        try {\n          JTextComponent component = getComponent();\n          TextUI mapper = component.getUI();\n          Rectangle r = mapper.modelToView(component, getDot());\n          // Java 9: Rectangle rect = mapper.modelToView2D(c, pos, Position.Bias.Forward).getBounds();\n          g.setColor(component.getCaretColor());\n          int width = g.getFontMetrics().charWidth('w');\n          // A patch for full width characters >>>>\n          if (isOvertypeMode()) {\n            int pos = getCaretPosition();\n            if (pos < getDocument().getLength()) {\n              if (getSelectionStart() == getSelectionEnd()) {\n                String str = getText(pos, 1);\n                width = g.getFontMetrics().stringWidth(str);\n              } else {\n                width = 0;\n              }\n            }\n          } // <<<<\n          int y = r.y + r.height - 2;\n          g.drawLine(r.x, y, r.x + width - 2, y);\n        } catch (BadLocationException ex) {\n          // should never happen\n          RuntimeException wrap = new StringIndexOutOfBoundsException(ex.offsetRequested());\n          wrap.initCause(ex);\n          throw wrap;\n        }\n      }\n    }\n\n    /*\n     * Damage must be overridden whenever the paint method is overridden\n     * (The damaged area is the area the caret is painted in. We must\n     * consider the area for the default caret and this caret)\n     */\n    // [UnsynchronizedOverridesSynchronized]\n    // Unsynchronized method damage overrides synchronized method in DefaultCaret\n    @SuppressWarnings(\"PMD.AvoidSynchronizedAtMethodLevel\")\n    @Override protected synchronized void damage(Rectangle r) {\n      if (Objects.nonNull(r)) {\n        JTextComponent c = getComponent();\n        x = r.x;\n        y = r.y;\n        // width = c.getFontMetrics(c.getFont()).charWidth('w');\n        // width = c.getFontMetrics(c.getFont()).charWidth('\\u3042');\n        width = c.getFontMetrics(c.getFont()).charWidth('あ');\n        height = r.height;\n        c.repaint();\n      }\n    }\n  }\n}<｜fim▁end｜>",
    "response": "  @Override public void updateUI() {\n    super.updateUI();\n    EventQueue.invokeLater(() -> {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package metamutator;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport metamutator.LogicalExpressionMetaMutator;\nimport metamutator.Selector;\nimport metamutator.NumericVariableMetaMutator;\n\nimport org.junit.Test;\n\nimport spoon.Launcher;\nimport spoon.reflect.code.CtVariableRead;\nimport spoon.reflect.declaration.CtClass;\nimport spoon.reflect.declaration.ModifierKind;\nimport spoon.reflect.reference.CtFieldReference;\nimport spoon.reflect.reference.CtTypeReference;\nimport spoon.reflect.reference.CtVariableReference;\nimport spoon.reflect.visitor.filter.NameFilter;\nimport spoon.reflect.visitor.filter.TypeFilter;\nimport bsh.Interpreter;\nimport static org.apache.commons.lang.reflect.MethodUtils.*;\n\npublic class NumericExpressionMetaMutatorTest {\n\n    @Test\n    public void testNumericExpressionMetaMutator() throws Exception {\n        // build the model and apply the transformation\n        Launcher l = new Launcher();\n        l.addInputResource(\"src/test/java/resources/Foo.java\");\n        l.addProcessor(new NumericVariableMetaMutator());\n        l.run();\n\n        // now we get the code of Foo\n        CtClass c = (CtClass) l.getFactory().Package().getRootPackage().getElements(new NameFilter(\"Foo\")).get(0);\n\n        // printing the metaprogram\n        System.out.println(\"// Metaprogram: \");\n        System.out.println(c.toString());\n\n        // we prepare an interpreter for the transformed code\n        Interpreter bsh = new Interpreter();\n        // creating a new instance of the class\n        Object o = ((Class)bsh.eval(c.toString())).newInstance();\n\n        // test with the second mutation hotspot\n        Selector sel1=Selector.getSelectorByName(NumericVariableMetaMutator.PREFIX + \"1\");\n\n        sel1.choose(0);// INIT B\n        assertEquals(-1, invokeExactMethod(o, \"add\", new Object[] {3, -4}));   \n        sel1.choose(1);// ABS B\n        assertEquals(1, invokeExactMethod(o, \"add\", new Object[] {3, -4}));  \n        sel1.choose(2);// MINUS B\n        assertEquals(-6, invokeExactMethod(o, \"add\", new Object[] {3, 3})); \n        sel1.choose(3);// INC B\n        assertEquals(0, invokeExactMethod(o, \"add\", new Object[] {3, -4}));  \n        sel1.choose(4);// DEC B\n        assertEquals(-2, invokeExactMethod(o, \"add\", new Object[] {3, -4}));\n\n        NumericVariableMetaMutator numericPROC = new NumericVariableMetaMutator();\n\n        CtVariableRead candidate = l.getFactory().Core().createVariableRead();\n<｜fim▁hole｜>        // TEST GOOD TYPE\n        CtTypeReference type =  l.getFactory().Core().createTypeReference().setSimpleName(int.class.getName());\n        assertEquals(true,numericPROC.isNumber(type));\n        type =  l.getFactory().Core().createTypeReference().setSimpleName(long.class.getName());\n        assertEquals(true,numericPROC.isNumber(type));\n        type =  l.getFactory().Core().createTypeReference().setSimpleName(byte.class.getName());\n        assertEquals(true,numericPROC.isNumber(type));\n        type =  l.getFactory().Core().createTypeReference().setSimpleName(float.class.getName());\n        assertEquals(true,numericPROC.isNumber(type));\n        type =  l.getFactory().Core().createTypeReference().setSimpleName(double.class.getName());\n        assertEquals(true,numericPROC.isNumber(type));\n\n        // TEST NOT ALLOW TYPE\n        type =  l.getFactory().Core().createTypeReference().setSimpleName(String.class.getName());\n        assertEquals(false,numericPROC.isNumber(type));\n        type =  l.getFactory().Core().createTypeReference().setSimpleName(boolean.class.getName());\n        assertEquals(false,numericPROC.isNumber(type));\n        type =  l.getFactory().Core().createTypeReference().setSimpleName(Object.class.getName());\n        assertEquals(false,numericPROC.isNumber(type));\n        type =  l.getFactory().Core().createTypeReference().setSimpleName(List.class.getName());\n        assertEquals(false,numericPROC.isNumber(type));\n    }\n}<｜fim▁end｜>",
    "response": "        // Fail On NOT declared variable\n        assertEquals(false,numericPROC.isToBeProcessed(candidate));\n\n        // TEST IsNumeric() on typeReference\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.eclipse.wst.html.webresources.internal.ui;\n\nimport java.io.File;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.eclipse.jface.resource.ImageDescriptor;\nimport org.eclipse.jface.resource.ImageRegistry;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.graphics.Image;\nimport org.eclipse.swt.graphics.ImageData;\nimport org.eclipse.swt.graphics.ImageLoader;\n\npublic class ImageResource {\n\n    private static final String IMAGE_DIR = \"wtp-webresources-images\"; //$NON-NLS-1$\n\n    private static Map<ImageDescriptor, URL> fURLMap;\n    private static File fTempDir;\n    private static int fImageCount;\n\n    // the image registry\n    private static ImageRegistry imageRegistry;\n\n    // map of image descriptors since these\n    // will be lost by the image registry\n    private static Map<String, ImageDescriptor> imageDescriptors;\n\n    // base urls for images\n    private static URL ICON_BASE_URL;\n\n<｜fim▁hole｜>    public static final String IMG_CSS_ID = \"css_id\";\n    public static final String IMG_NEW_CSS = \"newcss\";\n    public static final String IMG_NEW_HTML = \"newhtml\";\n\n    static {\n        try {\n            String pathSuffix = \"icons/\";\n            ICON_BASE_URL = WebResourcesUIPlugin.getDefault().getBundle()\n                    .getEntry(pathSuffix);\n            fURLMap = new HashMap<ImageDescriptor, URL>();\n            fTempDir = getTempDir();\n            fImageCount = 0;\n\n        } catch (Exception e) {\n            Trace.trace(Trace.SEVERE, \"Images error\", e);\n        }\n    }\n\n    /**\n     * Cannot construct an ImageResource. Use static methods only.\n     */\n    private ImageResource() {\n    }\n\n    /**\n     * Dispose of element images that were created.\n     */\n    public static void dispose() {\n        if (fTempDir != null) {\n            delete(fTempDir);\n        }\n        fURLMap = null;\n    }\n\n    /**\n     * Return the image with the given key.\n     * \n     * @param key\n     *            java.lang.String\n     * @return org.eclipse.swt.graphics.Image\n     */\n    public static Image getImage(String key) {\n        return getImage(key, null);\n    }\n\n    /**\n     * Return the image with the given key.\n     * \n     * @param key\n     *            java.lang.String\n     * @return org.eclipse.swt.graphics.Image\n     */\n    public static Image getImage(String key, String keyIfImageNull) {\n        if (imageRegistry == null)\n            initializeImageRegistry();\n        Image image = imageRegistry.get(key);\n        if (image == null) {\n            if (keyIfImageNull != null) {\n                return getImage(keyIfImageNull, null);\n            }\n            imageRegistry.put(key, ImageDescriptor.getMissingImageDescriptor());\n            image = imageRegistry.get(key);\n        }\n        return image;\n    }\n\n    /**\n     * Return the image descriptor with the given key.\n     * \n     * @param key\n     *            java.lang.String\n     * @return org.eclipse.jface.resource.ImageDescriptor\n     */\n    public static ImageDescriptor getImageDescriptor(String key) {\n        if (imageRegistry == null)\n            initializeImageRegistry();\n        ImageDescriptor id = imageDescriptors.get(key);\n        if (id != null)\n            return id;\n\n        return ImageDescriptor.getMissingImageDescriptor();\n    }\n\n    /**\n     * Initialize the image resources.\n     */\n    protected static void initializeImageRegistry() {\n        imageRegistry = WebResourcesUIPlugin.getDefault().getImageRegistry();\n        imageDescriptors = new HashMap<String, ImageDescriptor>();\n\n        // load general object images\n        registerImage(IMG_CSS_CLASSNAME, URL_OBJ + IMG_CSS_CLASSNAME + \".gif\");\n        registerImage(IMG_CSS_ID, URL_OBJ + IMG_CSS_ID + \".gif\");\n        registerImage(IMG_NEW_CSS, URL_OBJ + IMG_NEW_CSS + \".gif\");\n        registerImage(IMG_NEW_HTML, URL_OBJ + IMG_NEW_HTML + \".gif\");\n    }\n\n    /**\n     * Register an image with the registry.\n     * \n     * @param key\n     *            java.lang.String\n     * @param partialURL\n     *            java.lang.String\n     */\n    private static void registerImage(String key, String partialURL) {\n        try {\n            ImageDescriptor id = ImageDescriptor.createFromURL(new URL(\n                    ICON_BASE_URL, partialURL));\n            imageRegistry.put(key, id);\n            imageDescriptors.put(key, id);\n        } catch (Exception e) {\n            Trace.trace(Trace.SEVERE, \"Error registering image \" + key\n                    + \" from \" + partialURL, e);\n        }\n    }\n\n    // Temp image\n\n    private static File getTempDir() {\n        try {\n            File imageDir = WebResourcesUIPlugin.getDefault()\n                    .getStateLocation().append(IMAGE_DIR).toFile();\n            if (imageDir.exists()) {\n                // has not been deleted on previous shutdown\n                delete(imageDir);\n            }\n            if (!imageDir.exists()) {\n                imageDir.mkdir();\n            }\n            if (!imageDir.isDirectory()) {\n                Trace.trace(\n                        Trace.SEVERE,\n                        \"Failed to create image directory \" + imageDir.toString()); //$NON-NLS-1$\n                return null;\n            }\n            return imageDir;\n        } catch (IllegalStateException e) {\n            // no state location\n            return null;\n        }\n    }\n\n    private static void delete(File file) {\n        if (file.isDirectory()) {\n            File[] listFiles = file.listFiles();\n            for (int i = 0; i < listFiles.length; i++) {\n                delete(listFiles[i]);\n            }\n        }\n        file.delete();\n    }\n\n    public static URL getImageURL(ImageDescriptor descriptor) {\n        if (fTempDir == null)\n            return null;\n\n        URL url = fURLMap.get(descriptor);\n        if (url != null)\n            return url;\n\n        File imageFile = getNewFile();\n        ImageData imageData = descriptor.getImageData();\n        if (imageData == null) {\n            return null;\n        }\n\n        ImageLoader loader = new ImageLoader();\n        loader.data = new ImageData[] { imageData };\n        loader.save(imageFile.getAbsolutePath(), SWT.IMAGE_PNG);\n\n        try {\n            url = imageFile.toURI().toURL();\n            fURLMap.put(descriptor, url);\n            return url;\n        } catch (MalformedURLException e) {\n            Trace.trace(Trace.SEVERE, \"Failed to create image directory \", e); //$NON-NLS-1$\n        }\n        return null;\n    }\n\n    private static File getNewFile() {\n        File file;\n        do {\n            file = new File(fTempDir, String.valueOf(getImageCount()) + \".png\"); //$NON-NLS-1$\n        } while (file.exists());\n        return file;\n    }\n\n    private static synchronized int getImageCount() {\n        return fImageCount++;\n    }\n\n}<｜fim▁end｜>",
    "response": "    private static final String URL_OBJ = \"full/obj16/\";\n\n    // General Object Images\n    public static final String IMG_CSS_CLASSNAME = \"css_classname\";\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.vleo.timel.impl.iterator;\n\nimport net.vleo.timel.iterator.TimeIterator;\nimport net.vleo.timel.time.Interval;\nimport net.vleo.timel.time.Sample;\n\nimport java.util.NoSuchElementException;\n\npublic class TracingTimeIterator<V> implements TimeIterator<V> {\n    protected final Object reference;\n    protected final String id;\n    protected final Interval interval;\n    protected final TracingPolicy tracePolicy;\n    protected final TimeIterator<V> delegate;\n\n    public TracingTimeIterator(Object reference, String id, Interval interval, TracingPolicy tracePolicy, TimeIterator<V> delegate) {\n        this.reference = reference;\n        this.id = id;\n        this.interval = interval;\n        this.tracePolicy = tracePolicy;\n        this.delegate = delegate;\n    }\n\n    @Override\n    public Sample<V> next() throws NoSuchElementException {\n        return tracePolicy.apply(\n                reference,\n                id,\n                interval,\n                \"next\",\n                delegate::next\n        );\n    }\n\n    @Override\n    public Sample<V> peekNext() throws NoSuchElementException {\n        return tracePolicy.apply(\n                reference,\n                id,\n                interval,\n                \"peekNext\",\n                delegate::peekNext\n        );\n    }\n\n    @Override\n    public boolean hasNext() {\n        return tracePolicy.apply(\n                reference,\n<｜fim▁hole｜>    }\n\n    @Override\n    public String toString() {\n        return delegate.toString();\n    }\n}<｜fim▁end｜>",
    "response": "                id,\n                interval,\n                \"hasNext\",\n                delegate::hasNext\n        );\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.example.idea.retrofitdemo.fragment;\n\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.example.idea.retrofitdemo.R;\nimport com.example.idea.retrofitdemo.base.BaseFragment;\n<｜fim▁hole｜>    @Override\n    public View inflaterRootView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n        return View.inflate(getActivity(),R.layout.fra_girl, null);\n    }\n\n    @Override\n    public void initView(View rootView) {\n\n    }\n\n    @Override\n    public void initData() {\n\n    }\n}<｜fim▁end｜>",
    "response": "\npublic class GankFragment extends BaseFragment {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.spacedog.services.bulk;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\n\nimport io.spacedog.client.bulk.ServiceCall;\nimport io.spacedog.client.bulk.ServiceResponse;\nimport io.spacedog.client.http.SpaceMethod;\nimport io.spacedog.services.InternalRequest;\nimport io.spacedog.services.JsonPayload;\nimport io.spacedog.services.Server;\nimport io.spacedog.utils.Exceptions;\nimport io.spacedog.utils.Json;\nimport net.codestory.http.constants.HttpStatus;\nimport net.codestory.http.payload.Payload;\n\npublic class BulkService {\n\n    public List<ServiceResponse> execute(List<ServiceCall> batch) {\n        return execute(batch, true);\n    }\n\n    public List<ServiceResponse> execute(List<ServiceCall> batch, Boolean stopOnError) {\n\n        List<ServiceResponse> responses = Lists.newArrayList();\n\n        for (int i = 0; i < batch.size(); i++) {\n            ServiceCall call = batch.get(i);\n            ServiceResponse payload = execute(call);\n            responses.add(payload);\n\n            if (stopOnError && payload.success == false)\n                break;\n        }\n        return responses;\n    }\n\n    public ServiceResponse execute(ServiceCall call) {\n\n        checkBatchCall(call);\n\n        Payload payload = null;\n        InternalRequest request = new InternalRequest(call);\n\n        try {\n            payload = Server.get().executeRequest(request, null);\n\n        } catch (Throwable t) {\n            payload = JsonPayload.error(t).build();\n        }\n\n        if (payload == null)\n            payload = new Payload(HttpStatus.INTERNAL_SERVER_ERROR);\n\n        return toServiceAnswer(payload);\n    }\n\n    private ServiceResponse toServiceAnswer(Payload payload) {\n        ServiceResponse answer = new ServiceResponse();\n        answer.success = payload.isSuccess();\n        answer.status = payload.code();\n        answer.content = Json.toJsonNode(payload.rawContent());\n        return answer;\n    }\n\n    public Map<String, Object> get(Map<String, String> paths, Boolean stopOnError) {\n\n        Map<String, Object> objects = Maps.newHashMap();\n\n        for (Entry<String, String> entry : paths.entrySet()) {\n            ServiceCall call = new ServiceCall(SpaceMethod.GET, \"/2\" + entry.getValue());\n            ServiceResponse payload = execute(call);\n            objects.put(entry.getKey(), payload.content);\n\n            if (stopOnError && payload.success == false)\n                break;\n        }\n        return objects;\n    }\n\n    //\n    // Implementation\n    //\n\n    private void checkBatchCall(ServiceCall call) {\n        // backend service is forbidden in batch request to avoid create/delete backend\n<｜fim▁hole｜>                    \"/backend requests forbidden in batch\");\n    }\n}<｜fim▁end｜>",
    "response": "        // in batches. Without this restriction, it is possible in certain conditions to\n        // create multiple credentials with the same username.\n        if (call.path.startsWith(\"/1/backend\"))\n            throw Exceptions.illegalArgument(//\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.schmizz.sshj.xfer.scp;\n\nimport net.schmizz.sshj.common.IOUtils;\nimport net.schmizz.sshj.xfer.LocalDestFile;\nimport net.schmizz.sshj.xfer.TransferListener;\nimport net.schmizz.sshj.xfer.scp.SCPEngine.Arg;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic final class SCPDownloadClient {\n\n    private boolean recursiveMode = true;\n\n    private final SCPEngine engine;\n\n    SCPDownloadClient(SCPEngine engine) {\n        this.engine = engine;\n    }\n\n    /** Download a file from {@code sourcePath} on the connected host to {@code targetPath} locally. */\n    public synchronized int copy(String sourcePath, LocalDestFile targetFile)\n            throws IOException {\n        engine.cleanSlate();\n        try {\n            startCopy(sourcePath, targetFile);\n        } finally {\n            engine.exit();\n        }\n        return engine.getExitStatus();\n    }\n\n    public boolean getRecursiveMode() {\n        return recursiveMode;\n    }\n\n    public void setRecursiveMode(boolean recursive) {\n        this.recursiveMode = recursive;\n    }\n\n    void startCopy(String sourcePath, LocalDestFile targetFile)\n            throws IOException {\n        List<Arg> args = new LinkedList<Arg>();\n        args.add(Arg.SOURCE);\n        args.add(Arg.QUIET);\n        args.add(Arg.PRESERVE_TIMES);\n        if (recursiveMode)\n            args.add(Arg.RECURSIVE);\n        engine.execSCPWith(args, sourcePath);\n\n        engine.signal(\"Start status OK\");\n\n        String msg = engine.readMessage();\n        do\n            process(engine.getTransferListener(), null, msg, targetFile);\n        while (!(msg = engine.readMessage()).isEmpty());\n    }\n\n    private long parseLong(String longString, String valType)\n            throws SCPException {\n        try {\n            return Long.parseLong(longString);\n        } catch (NumberFormatException nfe) {\n            throw new SCPException(\"Could not parse \" + valType + \" from `\" + longString + \"`\", nfe);\n        }\n    }\n\n    /* e.g. \"C0644\" -> 0644; \"D0755\" -> 0755 */\n\n    private int parsePermissions(String cmd)\n            throws SCPException {\n        if (cmd.length() != 5)\n            throw new SCPException(\"Could not parse permissions from `\" + cmd + \"`\");\n<｜fim▁hole｜>            throw new SCPException(\"Could not parse message `\" + msg + \"`\");\n\n        switch (msg.charAt(0)) {\n\n            case 'T':\n                engine.signal(\"ACK: T\");\n                process(listener, msg, engine.readMessage(), f);\n                break;\n\n            case 'C':\n                processFile(listener, msg, bufferedTMsg, f);\n                break;\n\n            case 'D':\n                processDirectory(listener, msg, bufferedTMsg, f);\n                break;\n\n            case 'E':\n                return true;\n\n            case (char) 1:\n            case (char) 2:\n                throw new SCPException(\"Remote SCP command returned error: \" + msg.substring(1));\n\n            default:\n                final String err = \"Unrecognized message: `\" + msg + \"`\";\n                engine.sendMessage((char) 2 + err);\n                throw new SCPException(err);\n        }\n\n        return false;\n    }\n\n    private void processDirectory(TransferListener listener, String dMsg, String tMsg, LocalDestFile f)\n            throws IOException {\n        final List<String> dMsgParts = tokenize(dMsg, 3, true); // D<perms> 0 <dirname>\n        final long length = parseLong(dMsgParts.get(1), \"dir length\");\n        final String dirname = dMsgParts.get(2);\n        if (length != 0)\n            throw new IOException(\"Remote SCP command sent strange directory length: \" + length);\n\n        final TransferListener dirListener = listener.directory(dirname);\n        {\n            f = f.getTargetDirectory(dirname);\n            engine.signal(\"ACK: D\");\n            do {\n            } while (!process(dirListener, null, engine.readMessage(), f));\n            setAttributes(f, parsePermissions(dMsgParts.get(0)), tMsg);\n            engine.signal(\"ACK: E\");\n        }\n    }\n\n    private void processFile(TransferListener listener, String cMsg, String tMsg, LocalDestFile f)\n            throws IOException {\n        final List<String> cMsgParts = tokenize(cMsg, 3, true); // C<perms> <size> <filename>\n        final long length = parseLong(cMsgParts.get(1), \"length\");\n        final String filename = cMsgParts.get(2);\n        {\n            f = f.getTargetFile(filename);\n            engine.signal(\"Remote can start transfer\");\n            final OutputStream dest = f.getOutputStream();\n            try {\n                engine.transferFromRemote(listener.file(filename, length), dest, length);\n            } finally {\n                IOUtils.closeQuietly(dest);\n            }\n            engine.check(\"Remote agrees transfer done\");\n            setAttributes(f, parsePermissions(cMsgParts.get(0)), tMsg);\n            engine.signal(\"Transfer done\");\n        }\n    }\n\n    private void setAttributes(LocalDestFile f, int perms, String tMsg)\n            throws IOException {\n        f.setPermissions(perms);\n        if (tMsg != null) {\n            List<String> tMsgParts = tokenize(tMsg, 4, false); // e.g. T<mtime> 0 <atime> 0\n            f.setLastModifiedTime(parseLong(tMsgParts.get(0).substring(1), \"last modified time\"));\n            f.setLastAccessedTime(parseLong(tMsgParts.get(2), \"last access time\"));\n        }\n    }\n\n    private static List<String> tokenize(String msg, int totalParts, boolean consolidateTail)\n            throws IOException {\n        List<String> parts = Arrays.asList(msg.split(\" \"));\n        if (parts.size() < totalParts ||\n                (!consolidateTail && parts.size() != totalParts))\n            throw new IOException(\"Could not parse message received from remote SCP: \" + msg);\n\n        if (consolidateTail && totalParts < parts.size()) {\n            final StringBuilder sb = new StringBuilder(parts.get(totalParts - 1));\n            for (int i = totalParts; i < parts.size(); i++) {\n                sb.append(\" \").append(parts.get(i));\n            }\n            parts = new ArrayList<String>(parts.subList(0, totalParts - 1));\n            parts.add(sb.toString());\n        }\n\n        return parts;\n    }\n\n}<｜fim▁end｜>",
    "response": "        return Integer.parseInt(cmd.substring(1), 8);\n    }\n\n    private boolean process(TransferListener listener, String bufferedTMsg, String msg, LocalDestFile f)\n            throws IOException {\n        if (msg.length() < 1)\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package training.easy.onboarding;\n\nimport java.util.*;\n\nclass Player {\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n\n        while (true) {\n            String enemy1 = in.next(); // name of enemy 1\n            int dist1 = in.nextInt(); // distance to enemy 1\n            String enemy2 = in.next(); // name of enemy 2\n            int dist2 = in.nextInt(); // distance to enemy 2\n\n            String target = enemy1;\n            if (dist1 > dist2) {\n                target = enemy2;\n            }\n<｜fim▁hole｜>    }\n\n}<｜fim▁end｜>",
    "response": "\n            // You have to output a correct ship name to shoot (\"Buzz\", enemy1, enemy2, ...)\n            System.out.println(target);\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.syncope.core.persistence.jpa.entity;\n\nimport java.util.HashSet;\nimport java.util.Set;\nimport javax.persistence.DiscriminatorValue;\nimport javax.persistence.Entity;\nimport javax.persistence.FetchType;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.JoinTable;\nimport javax.persistence.ManyToMany;\nimport javax.validation.Valid;\nimport org.apache.syncope.common.lib.types.PolicyType;\nimport org.apache.syncope.core.persistence.api.entity.AccountPolicy;\nimport org.apache.syncope.core.persistence.api.entity.ExternalResource;\n\n@Entity\n@DiscriminatorValue(\"AccountPolicy\")\npublic class JPAAccountPolicy extends JPAPolicy implements AccountPolicy {\n\n    private static final long serialVersionUID = -2767606675667839060L;\n\n    /**\n     * Resources for alternative user authentication: if empty, only internal storage will be used.\n     */\n    @ManyToMany(fetch = FetchType.EAGER)\n    @JoinTable(joinColumns =\n            @JoinColumn(name = \"account_policy_id\"),\n            inverseJoinColumns =\n            @JoinColumn(name = \"resource_name\"))\n    @Valid\n    private Set<JPAExternalResource> resources;\n\n    public JPAAccountPolicy() {\n        this(false);\n        this.resources = new HashSet<>();\n    }\n\n    public JPAAccountPolicy(final boolean global) {\n        super();\n\n        this.type = global\n                ? PolicyType.GLOBAL_ACCOUNT\n                : PolicyType.ACCOUNT;\n    }\n\n    @Override\n    public boolean addResource(final ExternalResource resource) {\n        checkType(resource, JPAExternalResource.class);\n        return resources.add((JPAExternalResource) resource);\n    }\n\n    @Override\n    public boolean removeResource(final ExternalResource resource) {\n        checkType(resource, JPAExternalResource.class);\n        return resources.remove((JPAExternalResource) resource);\n    }\n\n    @Override\n    public Set<? extends ExternalResource> getResources() {\n        return resources;\n    }\n\n    @Override\n    public Set<String> getResourceNames() {\n        Set<String> result = new HashSet<>(resources.size());\n        for (ExternalResource resource : resources) {\n            result.add(resource.getKey());\n        }\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "\n        return result;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.ctrip.platform.dal.dao.task;\n\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\n\npublic class QuerySqlTaskMySqlTest extends QuerySqlTaskTestStub {\n    public QuerySqlTaskMySqlTest() {\n        super(MySqlTestInitializer.DATABASE_NAME_MYSQL);\n    }\n\n<｜fim▁hole｜>        MySqlTestInitializer.setUpBeforeClass();\n    }\n\n    @AfterClass\n    public static void tearDownAfterClass() throws Exception {\n        MySqlTestInitializer.tearDownAfterClass();\n    }\n\n    @Before\n    public void setUp() throws Exception {\n        MySqlTestInitializer.setUp();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        MySqlTestInitializer.tearDown();\n    }\n\n}<｜fim▁end｜>",
    "response": "    @BeforeClass\n    public static void setUpBeforeClass() throws Exception {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package AnaNew.ana;\n\nimport javax.jms.JMSException;\nimport javax.naming.NamingException;\n\npublic class Main2 {\n    private static Leutnant leutnant2;\n\n    public static void main(String[] args) throws NamingException, JMSException, InterruptedException {\n\n<｜fim▁hole｜>        Thread.sleep(10000l);\n        leutnant2.zweiteRunde(\"queue/aufgabe6Queue2\", \"queue/aufgabe6Queue3\");\n        leutnant2.analyse();\n\n    }\n}<｜fim▁end｜>",
    "response": "        leutnant2 = new Leutnant(1, \"Leutnant 2\");\n        leutnant2.ersteRunde(\"queue/aufgabe6Queue2\");\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.liulishuo.filedownloader.services;\n\nimport com.liulishuo.filedownloader.util.FileDownloadHelper;\nimport com.liulishuo.filedownloader.util.FileDownloadUtils;\n\nimport static com.liulishuo.filedownloader.util.FileDownloadUtils.formatString;\n\npublic class DefaultIdGenerator implements FileDownloadHelper.IdGenerator {\n\n    @Override\n    public int transOldId(int oldId, String url, String path, boolean pathAsDirectory) {\n        return generateId(url, path, pathAsDirectory);\n    }\n\n    @Override\n    public int generateId(String url, String path, boolean pathAsDirectory) {\n        if (pathAsDirectory) {\n            return FileDownloadUtils.md5(formatString(\"%sp%s@dir\", url, path)).hashCode();\n<｜fim▁hole｜>            return FileDownloadUtils.md5(formatString(\"%sp%s\", url, path)).hashCode();\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        } else {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.helix.healthcheck;\n\nimport java.util.Random;\nimport java.util.Timer;\nimport java.util.TimerTask;\n\nimport org.apache.helix.HelixTimerTask;\nimport org.apache.log4j.Logger;\n\npublic class ParticipantHealthReportTask extends HelixTimerTask {\n  private static final Logger LOG = Logger.getLogger(ParticipantHealthReportTask.class);\n  public final static int DEFAULT_REPORT_LATENCY = 60 * 1000;\n\n  Timer _timer;\n  final ParticipantHealthReportCollectorImpl _healthReportCollector;\n\n  class ParticipantHealthReportTimerTask extends TimerTask {\n\n    @Override\n    public void run() {\n<｜fim▁hole｜>  }\n\n  public ParticipantHealthReportTask(ParticipantHealthReportCollectorImpl healthReportCollector) {\n    _healthReportCollector = healthReportCollector;\n  }\n\n  @Override\n  public void start() {\n    if (_timer == null) {\n      LOG.info(\"Start HealthCheckInfoReportingTask\");\n      _timer = new Timer(\"ParticipantHealthReportTimerTask\", true);\n      _timer.scheduleAtFixedRate(new ParticipantHealthReportTimerTask(),\n          new Random().nextInt(DEFAULT_REPORT_LATENCY), DEFAULT_REPORT_LATENCY);\n    } else {\n      LOG.warn(\"ParticipantHealthReportTimerTask already started\");\n    }\n  }\n\n  @Override\n  public void stop() {\n    if (_timer != null) {\n      LOG.info(\"Stop ParticipantHealthReportTimerTask\");\n      _timer.cancel();\n      _timer = null;\n    } else {\n      LOG.warn(\"ParticipantHealthReportTimerTask already stopped\");\n    }\n  }\n\n}<｜fim▁end｜>",
    "response": "      _healthReportCollector.transmitHealthReports();\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.wso2.siddhi.core.executor.math.add;\n\nimport org.wso2.siddhi.core.event.ComplexEvent;\nimport org.wso2.siddhi.core.executor.ExpressionExecutor;\nimport org.wso2.siddhi.query.api.definition.Attribute;\n\npublic class AddExpressionExecutorLong implements ExpressionExecutor {\n    private ExpressionExecutor leftExpressionExecutor;\n    private ExpressionExecutor rightExpressionExecutor;\n\n    public AddExpressionExecutorLong(ExpressionExecutor leftExpressionExecutor,\n                                     ExpressionExecutor rightExpressionExecutor) {\n        this.leftExpressionExecutor = leftExpressionExecutor;\n        this.rightExpressionExecutor = rightExpressionExecutor;\n    }\n\n<｜fim▁hole｜>        Object leftObject = leftExpressionExecutor.execute(event);\n        Object rightObject = rightExpressionExecutor.execute(event);\n        if (leftObject == null || rightObject == null) {\n            return null;\n        }\n        return ((Number) leftObject).longValue() + ((Number) rightObject).longValue();\n\n    }\n\n    public Attribute.Type getReturnType() {\n        return Attribute.Type.LONG;\n    }\n\n    @Override\n    public ExpressionExecutor cloneExecutor(String key) {\n        return new AddExpressionExecutorLong(leftExpressionExecutor.cloneExecutor(key), rightExpressionExecutor.cloneExecutor(key));\n    }\n\n}<｜fim▁end｜>",
    "response": "    @Override\n    public Object execute(ComplexEvent event) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jaggeryjs.hostobjects.oauth;\n\nimport org.scribe.builder.api.DefaultApi20;\nimport org.scribe.model.OAuthConfig;\nimport org.scribe.utils.Preconditions;\n\nimport org.scribe.utils.*;\n\npublic class GenericOAuth20Api extends DefaultApi20 {\n    private String AUTHORIZE_URL;\n    private String ACCESS_TOKEN_EP;\n    private String CALLBACK_URL;\n\n    public void setAuthorizeUrl(String authorizeUrl) {\n        this.AUTHORIZE_URL = authorizeUrl;\n<｜fim▁hole｜>    @Override\n    public String getAccessTokenEndpoint() {\n        return this.ACCESS_TOKEN_EP;\n    }\n\n    public String getCallBackUrl() {\n        return CALLBACK_URL;\n    }\n\n    public void setCallBackUrl(String cALLBACK_URL) {\n        CALLBACK_URL = cALLBACK_URL;\n    }\n\n    @Override\n    public String getAuthorizationUrl(OAuthConfig config) {\n        Preconditions.checkValidUrl(getCallBackUrl(), \"Must provide a valid url as callback.\");\n\n        // Append scope if present\n        if (config.hasScope()) {\n            return AUTHORIZE_URL\n                    + \"?client_id=\" + config.getApiKey()\n                    + \"&response_type=code\"\n                    + \"&redirect_uri=\" + OAuthEncoder.encode(getCallBackUrl())\n                    + \"&scope=\" + OAuthEncoder.encode(config.getScope());\n        } else {\n            return AUTHORIZE_URL\n                    + \"?client_id=\" + config.getApiKey()\n                    + \"&response_type=code\"\n                    + \"&redirect_uri=\" + OAuthEncoder.encode(getCallBackUrl());\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    public void setAccessTokenEP(String accessTokenEP) {\n        this.ACCESS_TOKEN_EP = accessTokenEP;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.profilematch.pmcore.entities;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\n\nimport javax.persistence.Entity;\n<｜fim▁hole｜>\n@Entity\npublic class CertificationCandidat  implements Serializable {\n\n    @JsonIgnore\n    private Long id_certif;\n\n    private String certification;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    public Long getId() {\n        return id_certif;\n    }\n\n    public void setId(Long id){\n        this.id_certif = id;\n    }\n\n    public String getCertification() {\n        return certification;\n    }\n\n    public void setCertification(String certification) {\n        this.certification = certification;\n    }\n}<｜fim▁end｜>",
    "response": "import javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport java.io.Serializable;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.splicemachine.tutorials.function;\n\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport com.splicemachine.db.iapi.error.StandardException;\nimport com.splicemachine.db.iapi.services.io.ArrayUtil;\nimport com.splicemachine.db.iapi.services.io.StoredFormatIds;\nimport com.splicemachine.db.iapi.sql.execute.ExecRow;\nimport com.splicemachine.db.iapi.types.DataValueDescriptor;\nimport com.splicemachine.db.iapi.types.DateTimeDataValue;\nimport com.splicemachine.derby.iapi.sql.execute.SpliceOperation;\nimport com.splicemachine.derby.impl.sql.execute.operations.LocatedRow;\nimport com.splicemachine.derby.stream.function.SpliceFlatMapFunction;\nimport com.splicemachine.derby.stream.iapi.OperationContext;\nimport com.splicemachine.derby.stream.output.WriteReadUtils;\nimport com.splicemachine.derby.utils.SpliceDateFunctions;\n\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Collections;\nimport java.util.GregorianCalendar;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.Map.Entry;\nimport java.io.*;\n\npublic class JsonFunction<I> extends SpliceFlatMapFunction<SpliceOperation, String, LocatedRow> implements Serializable {\n\n    ExecRow execRow;\n\n    JsonParser parser = new JsonParser();\n\n    private transient Calendar calendar;\n    /*\n    private String timeFormat;\n    private String dateTimeFormat;\n    private String timestampFormat;\n    */\n    public JsonFunction() {\n        super();\n    }\n    public JsonFunction(ExecRow execRow, OperationContext operationContext) {\n        super(operationContext);\n        this.execRow = execRow;\n    }\n\n    @Override\n    public void writeExternal(ObjectOutput out) throws IOException {\n        super.writeExternal(out);\n        try {\n            ArrayUtil.writeIntArray(out, WriteReadUtils.getExecRowTypeFormatIds(execRow));\n        } catch (StandardException se) {\n            throw new IOException(se);\n        }\n    }\n\n    @Override\n    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n        super.readExternal(in);\n        execRow =WriteReadUtils.getExecRowFromTypeFormatIds(ArrayUtil.readIntArray(in));\n\n    }\n\n    /**\n     *\n     * Call Method for parsing the string into either a singleton List with a LocatedRow or\n     * an empty list.\n     *\n     * @param s\n     * @return\n     * @throws Exception\n     */\n    @Override\n    public Iterator<LocatedRow> call(final String jsonString) throws Exception {\n\n        Iterator<LocatedRow> itr = Collections.<LocatedRow>emptyList().iterator();\n        if(jsonString == null) {\n            return itr;\n        }\n\n        JsonElement elem = parser.parse(jsonString);\n        JsonObject root = elem.getAsJsonObject();   \n        JsonArray dataArray = root == null ? null : root.getAsJsonArray(\"data\");\n        int numRcds = dataArray == null ? 0 : dataArray.size();\n\n        if(numRcds == 0) {\n            return itr;\n        }\n\n<｜fim▁hole｜>\n            //The definition of the row to be returned\n            ExecRow returnRow = execRow.getClone();\n\n            //Reset the column counter\n            int column = 1;\n\n            JsonObject json = dataArray.get(i).getAsJsonObject();\n\n            //Retrieve the properties for each entry\n            Set<Entry<String, JsonElement>> keys = json.entrySet();\n            for(Map.Entry<String,JsonElement> entry : keys){\n                String key = entry.getKey();\n                JsonElement valueElem = json.get(key);\n\n                DataValueDescriptor dvd = returnRow.getColumn(column);\n                int type = dvd.getTypeFormatId();\n\n                String value = valueElem.getAsJsonPrimitive().getAsString();\n\n                switch(type){\n                    case StoredFormatIds.SQL_TIME_ID:\n                        if(calendar==null)\n                            calendar = new GregorianCalendar();\n                        //if (timeFormat == null || value==null){\n                            ((DateTimeDataValue)dvd).setValue(value,calendar);\n                       // }else\n                       //     dvd.setValue(SpliceDateFunctions.TO_TIME(value, timeFormat),calendar);\n                        break;\n                    case StoredFormatIds.SQL_DATE_ID:\n                        if(calendar==null)\n                            calendar = new GregorianCalendar();\n                        //if (dateTimeFormat == null || value == null)\n                            ((DateTimeDataValue)dvd).setValue(value,calendar);\n                        //else\n                        //    dvd.setValue(SpliceDateFunctions.TO_DATE(value, dateTimeFormat),calendar);\n                        break;\n                    case StoredFormatIds.SQL_TIMESTAMP_ID:\n                        if(calendar==null)\n                            calendar = new GregorianCalendar();\n                        //if (timestampFormat == null || value==null)\n                            ((DateTimeDataValue)dvd).setValue(value,calendar);\n                        //else\n                        //    dvd.setValue(SpliceDateFunctions.TO_TIMESTAMP(value, timestampFormat),calendar);\n                        break;\n                    default:\n                        dvd.setValue(value);\n\n                }\n                column++;\n            }\n\n            rows.add(new LocatedRow(returnRow));\n        }\n        return rows.iterator();\n    }\n\n    /**\n     * \n     * { \"data\" : [{\n     * \"fullName\"  : \"$MODEL/TimerEngine_In/CandyDataBase_In/KafkaBridge/Float\",\n     * \"timeStamp\" : \"1477307252000\",\n     * \"value\"     : \"-0.06279052\", \n     * \"quality\"   : \"128\"},\n     * \n     * {\"fullName\"  : \"$MODEL/TimerEngine_In/CandyDataBase_In/KafkaBridge/Float(2)\",\"timeStamp\" : \"1477307252000\",\"value\"     : \"31.886976\",\"quality\"   : \"128\"}]}\n     * \n     * \n     * \n     */\n\n}<｜fim▁end｜>",
    "response": "        List<LocatedRow> rows = new ArrayList<LocatedRow>();\n        //Loop through each of the entries in the array\n        for(int i=0; i<numRcds; i++) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>import android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.view.ViewGroup;\nimport me.ccrama.redditslide.Fragments.SettingsHandlingFragment;\nimport me.ccrama.redditslide.R;\nimport me.ccrama.redditslide.SettingValues;\n\npublic class SettingsHandling extends BaseActivityAnim {\n\n    private SettingsHandlingFragment fragment = new SettingsHandlingFragment(this);\n\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        applyColorTheme();\n        setContentView(R.layout.activity_settings_handling);\n        setupAppBar(R.id.toolbar, R.string.settings_link_handling, true, true);\n\n        ((ViewGroup) findViewById(R.id.settings_handling)).addView(\n                getLayoutInflater().inflate(R.layout.activity_settings_handling_child, null));\n\n        fragment.Bind();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n        SharedPreferences.Editor e = SettingValues.prefs.edit();\n\n        e.putStringSet(SettingValues.PREF_ALWAYS_EXTERNAL, SettingValues.alwaysExternal);\n        e.apply();\n    }\n\n}<｜fim▁end｜>",
    "response": "package me.ccrama.redditslide.Activities;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.taobao.tae.buyingdemo.model;\n\nimport java.io.Serializable;\n\npublic class ItemInfoDO implements Serializable {\n\n    /*标题*/\n    private String title;\n\n    /*后台商品库中商品ID*/\n    private Long itemId;\n\n    /*淘宝商品ID*/\n    private String tbItemId;\n\n    /* 商品价格 */\n    private String price;\n\n    /*商品促销价*/\n    private String promotionPrice;\n\n    private String picUrl;\n\n    /*喜欢数*/\n    private String favorCount;\n\n    /*商品打开方式*/\n    private Integer type;\n\n    /*商品打开方式名称*/\n    private String name;\n\n    /*商品所属二级分类ID*/\n    private Integer categoryId;\n\n    /*以H5打开时的URL地址*/\n    private String H5Url;\n\n    /*以搜索方式打开时的关键字*/\n    private String keyword;\n\n    /*排序方式*/\n    private Integer sort;\n\n    /*商品所在地*/\n    private String location;\n\n    /*月销量*/\n    private int monthlySales;\n\n    /*商品是否处于销售中*/\n    private boolean inSale;\n\n    /*是否有SKU属性*/\n    private boolean hasSKU;\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public Long getItemId() {\n        return itemId;\n    }\n\n    public void setItemId(Long itemId) {\n        this.itemId = itemId;\n    }\n\n    public String getTbItemId() {\n        return tbItemId;\n    }\n\n    public void setTbItemId(String tbItemId) {\n        this.tbItemId = tbItemId;\n    }\n\n    public String getPrice() {\n        return price;\n    }\n\n    public void setPrice(String price) {\n        this.price = price;\n    }\n\n    public String getPromotionPrice() {\n        return promotionPrice;\n    }\n\n    public void setPromotionPrice(String promotionPrice) {\n        this.promotionPrice = promotionPrice;\n    }\n\n    public String getPicUrl() {\n        return picUrl;\n    }\n\n    public void setPicUrl(String picUrl) {\n        this.picUrl = picUrl;\n    }\n\n    public String getFavorCount() {\n        return favorCount;\n    }\n\n    public void setFavorCount(String favorCount) {\n        this.favorCount = favorCount;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getH5Url() {\n        return H5Url;\n    }\n\n    public void setH5Url(String h5Url) {\n        H5Url = h5Url;\n    }\n\n    public String getKeyword() {\n        return keyword;\n    }\n\n    public void setKeyword(String keyword) {\n        this.keyword = keyword;\n    }\n\n    public Integer getSort() {\n        return sort;\n    }\n\n    public void setSort(Integer sort) {\n        this.sort = sort;\n    }\n\n    public Integer getCategoryId() {\n        return categoryId;\n    }\n\n    public void setCategoryId(Integer categoryId) {\n        this.categoryId = categoryId;\n    }\n\n    public Integer getType() {\n        return type;\n    }\n\n    public void setType(Integer type) {\n        this.type = type;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n\n    public void setLocation(String location) {\n        this.location = location;\n    }\n\n    public int getMonthlySales() {\n        return monthlySales;\n    }\n\n    public void setMonthlySales(int monthlySales) {\n        this.monthlySales = monthlySales;\n    }\n\n<｜fim▁hole｜>        return inSale;\n    }\n\n    public void setInSale(boolean inSale) {\n        this.inSale = inSale;\n    }\n\n    public boolean isHasSKU() {\n        return hasSKU;\n    }\n\n    public void setHasSKU(boolean hasSKU) {\n        this.hasSKU = hasSKU;\n    }\n}<｜fim▁end｜>",
    "response": "    public boolean isInSale() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.netty.channel.epoll;\n\nimport io.netty.buffer.ByteBuf;\nimport io.netty.buffer.ByteBufAllocator;\nimport io.netty.channel.RecvByteBufAllocator.DelegatingHandle;\nimport io.netty.channel.RecvByteBufAllocator.ExtendedHandle;\nimport io.netty.channel.unix.PreferredDirectByteBufAllocator;\nimport io.netty.util.UncheckedBooleanSupplier;\n\nclass EpollRecvByteAllocatorHandle extends DelegatingHandle implements ExtendedHandle {\n    private final PreferredDirectByteBufAllocator preferredDirectByteBufAllocator =\n            new PreferredDirectByteBufAllocator();\n    private final UncheckedBooleanSupplier defaultMaybeMoreDataSupplier = new UncheckedBooleanSupplier() {\n        @Override\n        public boolean get() {\n            return maybeMoreDataToRead();\n        }\n<｜fim▁hole｜>\n    EpollRecvByteAllocatorHandle(ExtendedHandle handle) {\n        super(handle);\n    }\n\n    final void receivedRdHup() {\n        receivedRdHup = true;\n    }\n\n    final boolean isReceivedRdHup() {\n        return receivedRdHup;\n    }\n\n    boolean maybeMoreDataToRead() {\n        /**\n         * EPOLL ET requires that we read until we get an EAGAIN\n         * (see Q9 in <a href=\"http://man7.org/linux/man-pages/man7/epoll.7.html\">epoll man</a>). However in order to\n         * respect auto read we supporting reading to stop if auto read is off. It is expected that the\n         * {@link #EpollSocketChannel} implementations will track if we are in edgeTriggered mode and all data was not\n         * read, and will force a EPOLLIN ready event.\n         *\n         * It is assumed RDHUP is handled externally by checking {@link #isReceivedRdHup()}.\n         */\n        return (isEdgeTriggered && lastBytesRead() > 0) ||\n               (!isEdgeTriggered && lastBytesRead() == attemptedBytesRead());\n    }\n\n    final void edgeTriggered(boolean edgeTriggered) {\n        isEdgeTriggered = edgeTriggered;\n    }\n\n    final boolean isEdgeTriggered() {\n        return isEdgeTriggered;\n    }\n\n    @Override\n    public final ByteBuf allocate(ByteBufAllocator alloc) {\n        // We need to ensure we always allocate a direct ByteBuf as we can only use a direct buffer to read via JNI.\n        preferredDirectByteBufAllocator.updateAllocator(alloc);\n        return delegate().allocate(preferredDirectByteBufAllocator);\n    }\n\n    @Override\n    public final boolean continueReading(UncheckedBooleanSupplier maybeMoreDataSupplier) {\n        return ((ExtendedHandle) delegate()).continueReading(maybeMoreDataSupplier);\n    }\n\n    @Override\n    public final boolean continueReading() {\n        // We must override the supplier which determines if there maybe more data to read.\n        return continueReading(defaultMaybeMoreDataSupplier);\n    }\n}<｜fim▁end｜>",
    "response": "    };\n    private boolean isEdgeTriggered;\n    private boolean receivedRdHup;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.ralasafe;\n\nimport java.util.HashMap;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport org.ralasafe.SystemConstant;\nimport org.ralasafe.entitle.CustomizedWhere;\nimport org.ralasafe.entitle.Decision;\nimport org.ralasafe.entitle.EntitleManager;\nimport org.ralasafe.entitle.QueryResult;\nimport org.ralasafe.privilege.Privilege;\nimport org.ralasafe.privilege.UserRoleManager;\nimport org.ralasafe.user.User;\n\npublic class Ralasafe {\n    private static final String appName = \"ralasafe\";\n\n    /**\n     * Eval query policy, return query result.\n     * \n     * @param privilegeId       privilegeId\n     * @param user              who queries for data\n     * @param context           context\n     * @param where             customeized where conditions\n     * @return  query result\n     */\n    public static QueryResult query(int privilegeId, User user, Map context,\n            CustomizedWhere where) {\n\n        if (context == null) {\n            context = new HashMap();\n        }\n        EntitleManager entitleManager = Factory.getEntitleManager(appName);\n        return entitleManager.query(privilegeId, user, context, where);\n    }\n\n    /**\n     * Eval query policy, return query result.\n     * \n     * @param privilegeId       privilegeId\n     * @param user              who queries for data\n     * @param context           context\n     * @return    query result\n     */\n    public static QueryResult query(int privilegeId, User user, Map context) {\n        if (context == null) {\n            context = new HashMap();\n        }\n        EntitleManager entitleManager = Factory.getEntitleManager(appName);\n        return entitleManager.query(privilegeId, user, context);\n    }\n\n    /**\n     * Eval query policy, return query result pagination.\n     * \n     * @param privilegeId     privilegeId\n     * @param user            who queries for data\n     * @param context         context\n     * @param where           customized where condition \n     * @param first           first index, count from 0,1,2...\n     * @param max             max records\n     * @return         query result\n     */\n    public static QueryResult query(int privilegeId, User user, Map context,\n            CustomizedWhere where, int first, int max) {\n        if (context == null) {\n            context = new HashMap();\n        }\n        EntitleManager entitleManager = Factory.getEntitleManager(appName);\n        return entitleManager.query(privilegeId, user, context, where, first,\n                max);\n    }\n\n    /**\n     * Eval query policy, return query result pagination.\n     * \n     * @param privilegeId       privilegeId\n     * @param user              who queries for data\n     * @param context           context\n     * @param first             first index, count from 0,1,2...\n     * @param max               max returned records\n     * @return     query result\n     */\n    public static QueryResult query(int privilegeId, User user, Map context,\n            int first, int max) {\n        if (context == null) {\n            context = new HashMap();\n        }\n        EntitleManager entitleManager = Factory.getEntitleManager(appName);\n        return entitleManager.query(privilegeId, user, context, first, max);\n    }\n\n    /**\n     * Eval query policy, return result count.\n     * \n     * @param privilegeId            privilegeId\n     * @param user                   who queries for data\n     * @param context                context\n     * @param where                  customized where condition\n     * @return     result count\n     */\n    public static int queryCount(int privilegeId, User user, Map context,\n            CustomizedWhere where) {\n        if (context == null) {\n            context = new HashMap();\n        }\n        EntitleManager entitleManager = Factory.getEntitleManager(appName);\n        return entitleManager.queryCount(privilegeId, user, context, where);\n    }\n\n    /**\n     * Eval query policy, return result count.\n     * \n     * @param privilegeId            privilegeId\n     * @param user                   who queries for data\n     * @param context                context\n     * @return     result count\n     */\n    public static int queryCount(int privilegeId, User user, Map context) {\n        if (context == null) {\n            context = new HashMap();\n        }\n        EntitleManager entitleManager = Factory.getEntitleManager(appName);\n        return entitleManager.queryCount(privilegeId, user, context);\n    }\n\n    /**\n     * Eval decision policy, return decision result.\n     * \n     * @param privilegeId                 privilegeId\n     * @param user                        who requests for this operation\n     * @param businessData                the business data\n     * @param context                     context\n     * @return        decision result\n     */\n    public static Decision permit(int privilegeId, User user,\n<｜fim▁hole｜>        if (context == null) {\n            context = new HashMap();\n        }\n        EntitleManager entitleManager = Factory.getEntitleManager(appName);\n        context.put(SystemConstant.BUSINESS_DATA, businessData);\n        return entitleManager.permit(Locale.US, privilegeId, user, context);\n    }\n\n    /**\n     * Does this user be granted for the privilege?\n     * \n     * @param privilegeId               privilege\n     * @param user                      who\n     * @return true--be granted;   false--not be granted\n     */\n    public static boolean hasPrivilege(int privilegeId, User user) {\n        UserRoleManager userRoleMng = Factory.getUserRoleManager(appName,\n                \"ralasafe\");\n        Object userId=null;\n        if( user!=null ) {\n            userId=user.get(User.idFieldName);\n        }\n        return userRoleMng.hasPrivilege(userId, privilegeId);\n    }\n\n    /**\n     * Get the user's privilege tree, often for display operate menu.\n     * @param user     who\n     * @return         privilege tree(menu tree)\n     */\n    public static Privilege getBusinessPrivilegeTree(User user) {\n        UserRoleManager userRoleMng = Factory.getUserRoleManager(appName, \"ralasafe\");\n        Object userId=user.get(User.idFieldName);\n\n        return userRoleMng.getBusinessPrivilegeTree( userId );\n    }\n}<｜fim▁end｜>",
    "response": "            Object businessData, Map context) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package jace;\n\nimport jace.core.RAMEvent;\nimport jace.core.RAMListener;\nimport jace.core.Utility;\nimport jace.ui.MetacheatUI;\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javafx.application.Application;\nimport javafx.application.Platform;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.Scene;\nimport javafx.scene.layout.AnchorPane;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport javafx.stage.StageStyle;\n\n<｜fim▁hole｜>\n    public Stage primaryStage;\n    JaceUIController controller;\n\n    static boolean romStarted = false;\n\n    @Override\n    public void start(Stage stage) throws Exception {\n        singleton = this;\n        primaryStage = stage;\n        FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/JaceUI.fxml\"));\n        fxmlLoader.setResources(null);\n        try {\n            AnchorPane node = (AnchorPane) fxmlLoader.load();\n            controller = fxmlLoader.getController();\n            controller.initialize();\n            Scene s = new Scene(node);\n            primaryStage.setScene(s);\n            primaryStage.setTitle(\"Jace\");\n            EmulatorUILogic.scaleIntegerRatio();\n            Utility.loadIcon(\"woz_figure.gif\").ifPresent(primaryStage.getIcons()::add);\n        } catch (IOException exception) {\n            throw new RuntimeException(exception);\n        }\n\n        primaryStage.show();\n        new Thread(() -> {\n            new Emulator(getParameters().getRaw());\n            reconnectUIHooks();\n            EmulatorUILogic.scaleIntegerRatio();\n            while (Emulator.computer.getVideo() == null || Emulator.computer.getVideo().getFrameBuffer() == null) {\n                Thread.yield();\n            }\n            bootWatchdog();\n        }).start();\n        primaryStage.setOnCloseRequest(event -> {\n            Emulator.computer.deactivate();\n            Platform.exit();\n            System.exit(0);\n        });\n    }\n\n    public void reconnectUIHooks() {\n        controller.connectComputer(Emulator.computer, primaryStage);        \n    }\n\n    public static JaceApplication getApplication() {\n        return singleton;\n    }\n\n    Stage cheatStage;\n    private MetacheatUI cheatController;\n\n    public MetacheatUI showMetacheat() {\n        if (cheatController == null) {\n            cheatStage = new Stage(StageStyle.DECORATED);\n            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(\"/fxml/Metacheat.fxml\"));\n            fxmlLoader.setResources(null);\n            try {\n                VBox node = fxmlLoader.load();\n                cheatController = fxmlLoader.getController();\n                Scene s = new Scene(node);\n                cheatStage.setScene(s);\n                cheatStage.setTitle(\"Jace: MetaCheat\");\n                Utility.loadIcon(\"woz_figure.gif\").ifPresent(cheatStage.getIcons()::add);\n            } catch (IOException exception) {\n                throw new RuntimeException(exception);\n            }\n\n        }\n        cheatStage.show();\n        return cheatController;\n    }\n\n    /**\n     * @param args the command line arguments\n     */\n    public static void main(String[] args) {\n        launch(args);\n    }\n\n    /**\n     * Start the computer and make sure it runs through the expected rom routine\n     * for cold boot\n     */\n    private void bootWatchdog() {\n        romStarted = false;\n        RAMListener startListener = Emulator.computer.getMemory().\n                observe(RAMEvent.TYPE.EXECUTE, 0x0FA62, (e) -> {\n                    romStarted = true;\n                });\n        Emulator.computer.coldStart();\n        try {\n            Thread.sleep(250);\n            if (!romStarted) {\n                Logger.getLogger(getClass().getName()).log(Level.WARNING, \"Boot not detected, performing a cold start\");\n                Emulator.computer.coldStart();\n            }\n        } catch (InterruptedException ex) {\n            Logger.getLogger(JaceApplication.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        Emulator.computer.getMemory().removeListener(startListener);\n    }\n\n}<｜fim▁end｜>",
    "response": "public class JaceApplication extends Application {\n\n    static JaceApplication singleton;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package quest.talocs_hollow;\n\nimport com.aionemu.gameserver.model.gameobjects.Item;\nimport com.aionemu.gameserver.model.gameobjects.player.Player;\nimport com.aionemu.gameserver.network.aion.serverpackets.SM_DIALOG_WINDOW;\nimport com.aionemu.gameserver.network.aion.serverpackets.SM_ITEM_USAGE_ANIMATION;\nimport com.aionemu.gameserver.questEngine.handlers.HandlerResult;\nimport com.aionemu.gameserver.questEngine.handlers.QuestHandler;\nimport com.aionemu.gameserver.model.DialogAction;\nimport com.aionemu.gameserver.questEngine.model.QuestEnv;\nimport com.aionemu.gameserver.questEngine.model.QuestState;\nimport com.aionemu.gameserver.questEngine.model.QuestStatus;\nimport com.aionemu.gameserver.services.QuestService;\nimport com.aionemu.gameserver.utils.PacketSendUtility;\nimport com.aionemu.gameserver.utils.ThreadPoolManager;\n\npublic class _21465MysteriousSeed extends QuestHandler {\n\n    private final static int questId = 21465;\n\n    public _21465MysteriousSeed() {\n        super(questId);\n    }\n\n    public void register() {\n        qe.registerQuestItem(182209527, questId);\n        qe.registerQuestNpc(279000).addOnTalkEvent(questId);\n    }\n\n    @Override\n    public boolean onDialogEvent(QuestEnv env) {\n        Player player = env.getPlayer();\n        QuestState qs = player.getQuestStateList().getQuestState(questId);\n        DialogAction dialog = env.getDialog();\n        int targetId = env.getTargetId();\n\n        if (targetId == 0) {\n            if (env.getDialogId() == DialogAction.QUEST_ACCEPT_1.id()) {\n                QuestService.startQuest(env);\n                PacketSendUtility.sendPacket(player, new SM_DIALOG_WINDOW(0, 0));\n<｜fim▁hole｜>            }\n        }\n        if (qs == null || qs.getStatus() == QuestStatus.NONE) {\n            return false;\n        } else if (qs.getStatus() == QuestStatus.START) {\n            if (targetId == 279000) {\n                switch (dialog) {\n                    case USE_OBJECT:\n                        return sendQuestDialog(env, 2375);\n                    case SELECT_QUEST_REWARD: {\n                        removeQuestItem(env, 182209527, 1);\n                        changeQuestStep(env, 0, 0, true);\n                        return sendQuestDialog(env, 5);\n                    }\n                }\n            }\n        } else if (qs.getStatus() == QuestStatus.REWARD) {\n            if (targetId == 279000) {\n                return sendQuestEndDialog(env);\n            }\n\n        }\n        return false;\n    }\n\n    @Override\n    public HandlerResult onItemUseEvent(final QuestEnv env, Item item) {\n        final Player player = env.getPlayer();\n        final int id = item.getItemTemplate().getTemplateId();\n        final int itemObjId = item.getObjectId();\n\n        if (id != 182209527) {\n            return HandlerResult.UNKNOWN;\n        }\n        PacketSendUtility.broadcastPacket(player, new SM_ITEM_USAGE_ANIMATION(player.getObjectId(), itemObjId, id, 3000, 0,\n                0), true);\n        ThreadPoolManager.getInstance().schedule(new Runnable() {\n            @Override\n            public void run() {\n                PacketSendUtility.broadcastPacket(player, new SM_ITEM_USAGE_ANIMATION(player.getObjectId(), itemObjId, id, 0,\n                        1, 0), true);\n                sendQuestDialog(env, 4);\n            }\n        }, 3000);\n        return HandlerResult.SUCCESS;\n    }\n}<｜fim▁end｜>",
    "response": "                return true;\n            } else if (env.getDialogId() == DialogAction.QUEST_REFUSE_1.id()) {\n                PacketSendUtility.sendPacket(player, new SM_DIALOG_WINDOW(0, 0));\n                return true;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.sonar.db.version.v53;\n\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.sonar.api.utils.System2;\nimport org.sonar.db.DbTester;\nimport org.sonar.db.version.MigrationStep;\n\npublic class UpdateCustomDashboardInLoadedTemplatesTest {\n\n  static final String TABLE = \"loaded_templates\";\n\n  @Rule\n  public DbTester db = DbTester.createForSchema(System2.INSTANCE, UpdateCustomDashboardInLoadedTemplatesTest.class, \"schema.sql\");\n\n  MigrationStep migration;\n\n  @Before\n  public void setUp() {\n    db.executeUpdateSql(\"truncate table \" + TABLE);\n\n    migration = new UpdateCustomDashboardInLoadedTemplates(db.database());\n  }\n\n  @Test\n  public void migrate_empty_db() throws Exception {\n    migration.execute();\n  }\n\n  @Test\n  public void migrate() throws Exception {\n    db.prepareDbUnit(this.getClass(), \"migrate.xml\");\n    migration.execute();\n    db.assertDbUnit(this.getClass(), \"migrate-result.xml\", TABLE);\n  }\n\n  @Test\n<｜fim▁hole｜>  }\n\n}<｜fim▁end｜>",
    "response": "  public void not_migrate_already_migrated_data() throws Exception {\n    db.prepareDbUnit(this.getClass(), \"not_migrate_already_migrated_data.xml\");\n    migration.execute();\n    db.assertDbUnit(this.getClass(), \"not_migrate_already_migrated_data.xml\", TABLE);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.multiverse.stms.gamma.transactionalobjects;\n\nimport org.multiverse.api.functions.Function;\n\npublic final class CallableNode {\n    public CallableNode next;\n    public Function function;\n\n    public CallableNode() {\n    }\n\n    public CallableNode(Function function, CallableNode next) {\n        this.next = next;\n        this.function = function;\n<｜fim▁hole｜>\n    public void prepareForPooling() {\n        next = null;\n        function = null;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.nabucco.framework.base.ui.web.model.editor.util.formatter;\n\npublic interface ControlFormatter<N> {\n\n    /**\n<｜fim▁hole｜>     * @return formatted string\n     */\n    String format(N value);\n\n    /**\n     * Remove format symbols if any\n     * \n     * @param value\n     *            the string to be cleared\n     * @return cleared string\n     */\n    String removeFormat(String value);\n}<｜fim▁end｜>",
    "response": "     * Perform format of bound element\n     * \n     * @param value\n     *            value to be formatted\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.syzton.sunread.common.controller;\n\nimport com.syzton.sunread.config.ApplicationContext;\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.context.ContextConfiguration;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.web.WebAppConfiguration;\nimport org.springframework.test.web.servlet.MockMvc;\nimport org.springframework.test.web.servlet.setup.MockMvcBuilders;\nimport org.springframework.web.context.WebApplicationContext;\n\nimport javax.annotation.Resource;\n\nimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.view;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(classes = {ApplicationContext.class})\n\n@WebAppConfiguration\n@Ignore\npublic class ITHomeControllerTest {\n\n    @Resource\n    private WebApplicationContext webApplicationContext;\n\n    private MockMvc mockMvc;\n\n    @Before\n    public void setUp() {\n        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();\n    }\n\n<｜fim▁hole｜>                .andExpect(view().name(\"index\"))\n                .andExpect(forwardedUrl(\"/WEB-INF/jsp/index.jsp\"));\n    }\n}<｜fim▁end｜>",
    "response": "    @Test\n    public void showHomePage_ShouldRenderHomePage() throws Exception {\n        mockMvc.perform(get(\"/\"))\n                .andExpect(status().isOk())\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.loomchild.segment.util;\n\nimport javax.xml.bind.ValidationEvent;\n<｜fim▁hole｜>\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\n\npublic class LoggingValidationEventHandler implements ValidationEventHandler {\n\n    private static final Log log = LogFactory\n            .getLog(LoggingValidationEventHandler.class);\n\n    public boolean handleEvent(ValidationEvent event) {\n        if ((event.getSeverity() == ValidationEvent.FATAL_ERROR)\n                || (event.getSeverity() == ValidationEvent.ERROR)) {\n            return false;\n        } else if (event.getSeverity() == ValidationEvent.WARNING) {\n            log.debug(\"Validation warning: \" + event.getMessage() + \".\");\n            return true;\n        } else {\n            log.warn(\"Unknown validation event type.\");\n            return false;\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "import javax.xml.bind.ValidationEventHandler;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.netty.handler.ssl;\n\nimport io.netty.util.internal.ResourcesUtil;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.function.Executable;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.PrivateKey;\nimport java.security.cert.CertificateException;\nimport java.security.spec.InvalidKeySpecException;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLException;\n\nimport static org.junit.jupiter.api.Assumptions.assumeTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic abstract class SslContextTest {\n\n    @Test\n    public void testUnencryptedEmptyPassword() throws Exception {\n        assertThrows(IOException.class, new Executable() {\n            @Override\n            public void execute() throws Throwable {\n                SslContext.toPrivateKey(\n                        ResourcesUtil.getFile(getClass(), \"test2_unencrypted.pem\"), \"\");\n            }\n        });\n    }\n\n    @Test\n    public void testUnEncryptedNullPassword() throws Exception {\n        PrivateKey key = SslContext.toPrivateKey(\n                ResourcesUtil.getFile(getClass(), \"test2_unencrypted.pem\"), null);\n        assertNotNull(key);\n    }\n\n    @Test\n    public void testEncryptedEmptyPassword() throws Exception {\n        PrivateKey key = SslContext.toPrivateKey(\n                ResourcesUtil.getFile(getClass(), \"test_encrypted_empty_pass.pem\"), \"\");\n        assertNotNull(key);\n    }\n\n    @Test\n    public void testEncryptedNullPassword() throws Exception {\n        assertThrows(InvalidKeySpecException.class, new Executable() {\n            @Override\n            public void execute() throws Throwable {\n                SslContext.toPrivateKey(\n                        ResourcesUtil.getFile(getClass(), \"test_encrypted_empty_pass.pem\"), null);\n            }\n        });\n    }\n\n    @Test\n    public void testSslContextWithEncryptedPrivateKey() throws SSLException {\n        File keyFile = ResourcesUtil.getFile(getClass(), \"test_encrypted.pem\");\n        File crtFile = ResourcesUtil.getFile(getClass(), \"test.crt\");\n\n        newSslContext(crtFile, keyFile, \"12345\");\n    }\n\n    @Test\n    public void testSslContextWithEncryptedPrivateKey2() throws SSLException {\n        File keyFile = ResourcesUtil.getFile(getClass(), \"test2_encrypted.pem\");\n        File crtFile = ResourcesUtil.getFile(getClass(), \"test2.crt\");\n\n        newSslContext(crtFile, keyFile, \"12345\");\n    }\n\n    @Test\n    public void testSslContextWithUnencryptedPrivateKey() throws SSLException {\n        File keyFile = ResourcesUtil.getFile(getClass(), \"test_unencrypted.pem\");\n        File crtFile = ResourcesUtil.getFile(getClass(), \"test.crt\");\n\n        newSslContext(crtFile, keyFile, null);\n    }\n\n    @Test\n    public void testSslContextWithUnencryptedPrivateKeyEmptyPass() throws SSLException {\n        final File keyFile = ResourcesUtil.getFile(getClass(), \"test_unencrypted.pem\");\n        final File crtFile = ResourcesUtil.getFile(getClass(), \"test.crt\");\n\n        assertThrows(SSLException.class, new Executable() {\n            @Override\n            public void execute() throws Throwable {\n                newSslContext(crtFile, keyFile, \"\");\n            }\n        });\n    }\n\n    @Test\n    public void testSupportedCiphers() throws KeyManagementException, NoSuchAlgorithmException, SSLException {\n        SSLContext jdkSslContext = SSLContext.getInstance(\"TLS\");\n        jdkSslContext.init(null, null, null);\n        SSLEngine sslEngine = jdkSslContext.createSSLEngine();\n\n        String unsupportedCipher = \"TLS_DH_anon_WITH_DES_CBC_SHA\";\n        IllegalArgumentException exception = null;\n        try {\n            sslEngine.setEnabledCipherSuites(new String[] {unsupportedCipher});\n        } catch (IllegalArgumentException e) {\n            exception = e;\n        }\n        assumeTrue(exception != null);\n        File keyFile = ResourcesUtil.getFile(getClass(), \"test_unencrypted.pem\");\n        File crtFile = ResourcesUtil.getFile(getClass(), \"test.crt\");\n\n        SslContext sslContext = newSslContext(crtFile, keyFile, null);\n        assertFalse(sslContext.cipherSuites().contains(unsupportedCipher));\n<｜fim▁hole｜>\n    @Test\n    public void testUnsupportedParams() throws CertificateException {\n        assertThrows(CertificateException.class, new Executable() {\n            @Override\n            public void execute() throws Throwable {\n                SslContext.toX509Certificates(\n                        new File(getClass().getResource(\"ec_params_unsupported.pem\").getFile()));\n            }\n        });\n    }\n\n    protected abstract SslContext newSslContext(File crtFile, File keyFile, String pass) throws SSLException;\n}<｜fim▁end｜>",
    "response": "    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.facebook.buck.slb;\n\nimport org.apache.thrift.protocol.TBinaryProtocol;\nimport org.apache.thrift.protocol.TCompactProtocol;\nimport org.apache.thrift.protocol.TJSONProtocol;\nimport org.apache.thrift.protocol.TProtocolFactory;\n\npublic enum ThriftProtocol {\n  JSON(new TJSONProtocol.Factory()),\n  BINARY(new TBinaryProtocol.Factory()),\n  COMPACT(new TCompactProtocol.Factory());\n\n  private TProtocolFactory factory;\n\n  ThriftProtocol(TProtocolFactory factory) {\n    this.factory = factory;\n  }\n\n<｜fim▁hole｜>    return factory;\n  }\n}<｜fim▁end｜>",
    "response": "  public TProtocolFactory getFactory() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package nl.vu.datalayer.hbase.schema;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.hbase.client.Get;\nimport org.apache.hadoop.hbase.client.Result;\nimport org.apache.hadoop.hbase.client.ResultScanner;\nimport org.apache.hadoop.hbase.client.Scan;\nimport org.apache.hadoop.hbase.rest.client.Client;\nimport org.apache.hadoop.hbase.rest.client.RemoteHTable;\n\npublic class PrefixMatchRemoteHTable extends RemoteHTable {\n\n    public PrefixMatchRemoteHTable(Client client, Configuration conf, byte[] name, String accessToken) {\n        super(client, conf, name, accessToken);\n    }\n\n    public PrefixMatchRemoteHTable(Client client, Configuration conf, String name, String accessToken) {\n        super(client, conf, name, accessToken);\n    }\n\n    public PrefixMatchRemoteHTable(Client client, String name, String accessToken) {\n        super(client, name, accessToken);\n    }\n\n    public PrefixMatchRemoteHTable(Client client, String name) {\n        super(client, name);\n    }\n\n    @Override\n    public Result get(Get get) throws IOException {\n<｜fim▁hole｜>        scan.addFamily(get.familySet().iterator().next());\n        ResultScanner scanner = getScanner(scan);\n        Result ret = scanner.next();\n        scanner.close();\n        return ret;\n    }\n\n    @Override\n    public Result[] get(List<Get> gets) throws IOException {\n        Result []results = new Result[gets.size()];\n        int i=0;\n        for (Get get : gets) {\n            results[i++] = get(get);\n        }\n        return results;\n    }\n\n    @Override\n    public void close() throws IOException {\n        //do nothing so that the client is not closed\n        //when the client has to be closed we should close it explicitly\n    }\n\n}<｜fim▁end｜>",
    "response": "        Scan scan = new Scan(get.getRow());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.vladsch.flexmark.docx.converter;\n\nimport com.vladsch.flexmark.test.util.spec.ResourceLocation;\nimport com.vladsch.flexmark.test.util.spec.SpecExample;\nimport org.jetbrains.annotations.NotNull;\nimport org.junit.runners.Parameterized;\n<｜fim▁hole｜>    final private static String SPEC_RESOURCE = \"/docx_converter_ast_spec2.md\";\n    final public static @NotNull ResourceLocation RESOURCE_LOCATION = ResourceLocation.of(SPEC_RESOURCE);\n\n    public ComboEnDocxConverterSpec2Test(@NotNull SpecExample example) {\n        super(example, null, getDefaultOptions(RESOURCE_LOCATION));\n    }\n\n    @Parameterized.Parameters(name = \"{0}\")\n    public static List<Object[]> data() {\n        return getTestData(RESOURCE_LOCATION);\n    }\n}<｜fim▁end｜>",
    "response": "\nimport java.util.List;\n\npublic class ComboEnDocxConverterSpec2Test extends ComboDocxConverterSpecTestBase {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.uma.jmetal.problem.multiobjective.glt;\n\nimport org.uma.jmetal.problem.doubleproblem.impl.AbstractDoubleProblem;\nimport org.uma.jmetal.solution.doublesolution.DoubleSolution;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SuppressWarnings(\"serial\")\npublic class GLT5 extends AbstractDoubleProblem {\n\n  /**\n   * Default constructor\n   */\n  public GLT5() {\n    this(10) ;\n  }\n\n  /**\n   * Constructor\n   * @param numberOfVariables\n   */\n  public GLT5(int numberOfVariables) {\n    setNumberOfVariables(numberOfVariables);\n<｜fim▁hole｜>    List<Double> upperLimit = new ArrayList<>(getNumberOfVariables()) ;\n\n    lowerLimit.add(0.0) ;\n    upperLimit.add(1.0) ;\n    lowerLimit.add(0.0) ;\n    upperLimit.add(1.0) ;\n    for (int i = 2; i < getNumberOfVariables(); i++) {\n      lowerLimit.add(-1.0);\n      upperLimit.add(1.0);\n    }\n\n    setVariableBounds(lowerLimit, upperLimit);\n  }\n\n  @Override\n  public void evaluate(DoubleSolution solution) {\n    solution.setObjective(0, (1.0 + g(solution))*\n        (1.0 - Math.cos(solution.getVariable(0)*Math.PI/2.0))*\n        (1.0 - Math.cos(solution.getVariable(1)*Math.PI/2.0)));\n    solution.setObjective(1, (1.0 + g(solution))*\n        (1.0 - Math.cos(solution.getVariable(0)*Math.PI/2.0))*\n        (1.0 - Math.sin(solution.getVariable(1)*Math.PI/2.0)));\n    solution.setObjective(2, (1.0 + g(solution))*\n        (1.0 - Math.sin(solution.getVariable(0)*Math.PI/2.0)));\n  }\n\n  private double g(DoubleSolution solution) {\n    double result = 0.0 ;\n\n    for (int i = 2; i < solution.getNumberOfVariables(); i++) {\n      double value =solution.getVariable(i)\n          - Math.sin(2*Math.PI*solution.getVariable(0)+i*Math.PI/solution.getNumberOfVariables()) ;\n\n      result += value * value ;\n    }\n\n    return result ;\n  }\n}<｜fim▁end｜>",
    "response": "    setNumberOfObjectives(3);\n    setName(\"GLT5\");\n\n    List<Double> lowerLimit = new ArrayList<>(getNumberOfVariables()) ;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package piano;\n\npublic class Localization_de implements LocalizationInterface\n{\n    /**\n     * Implementation of the LocalizationInterface.\n     */\n    public String getResource(int id)\n    {\n        switch(id)\n        {\n            case ID_COMMAND_EXIT: return \"Beenden\";\n            case ID_COMMAND_BACK: return \"Zurück\";\n            case ID_COMMAND_OK: return \"OK\";\n            case ID_COMMAND_CANCEL: return \"Abbrechen\";\n            case ID_HELP: return \"Hilfe\";\n            case ID_VOLUME: return \"Lautstärke\";\n<｜fim▁hole｜>                return \"Dies ist ein simples Musikinstrument.\";\n            case ID_HELP_SECTION_PLAYING_TITLE: return \"Bedienung\";\n            case ID_HELP_SECTION_PLAYING_TEXT:\n                return \"Benutzen Sie die Telefontastatur, \" +\n                       \"um auf der dargestellten Tastatur zu spielen. \" +\n                       \"Die Hilfeleiste unter der abgebildeten Tastatur \" +\n                       \"zeigt den Zusammenhang zwischen den Tasten \" +\n                       \"der beiden Tastaturen.\\n\" +\n                       \"Es ist nicht ausgeschlossen, dass Sie wegen \" +\n                       \"der Einschränkungen in der Telefontastatur \" +\n                       \"nicht mehr als eine oder zwei Tasten gleichzeitig \" +\n                       \"spielen können.\\n\" +\n                       \"Hat das Gerät einen Touchscreen, können Sie direkt \" +\n                       \"auf der abgebildeten Klaviertastatur spielen.\\n\";\n            case ID_HELP_SECTION_OCTAVE_TITLE: return \"Oktavenwechsel\";\n            case ID_HELP_SECTION_OCTAVE_TEXT:\n                return \"Benutzen Sie die Pfeiltasten, \" +\n                       \"um die Oktave zu wechseln.\";\n            case ID_HELP_SECTION_COPYRIGHT_TITLE: return \"Copyright\";\n            case ID_HELP_SECTION_COPYRIGHT_TEXT:\n                return \"Copyright (C) 2010 Wincent Balin und Pitt Werhan\";\n            case ID_HELP_SECTION_THANKS_TITLE: return \"Danksagungen\";\n            case ID_HELP_SECTION_THANKS_TEXT:\n                return \"Ein großer Dank geht an meine Betatester \" +\n                       \"Birgit und Marina.\";\n            case ID_OCTAVE: return \"Oktave\";\n            case ID_ERROR: return \"Fehler\";\n            case ID_ERROR_NO_TONE_GENERATOR:\n                return \"Kein Tongenerator vorhanden!\";\n            default: return \"\";\n        }\n    }\n}<｜fim▁end｜>",
    "response": "            case ID_TIMBRES: return \"Klangfarben\";\n            case ID_HELP_SECTION_INTRODUCTION_TITLE: return \"\";\n            case ID_HELP_SECTION_INTRODUCTION_TEXT:\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.thoughtworks.go.util.command;\n\nimport org.apache.commons.lang.StringUtils;\n\npublic class ExecScript implements Script, StreamConsumer {\n    private String errorStr;\n    private int exitCode;\n    private boolean foundError = false;\n\n    public ExecScript(String errorString) {\n        this.errorStr = errorString;\n    }\n\n    /**\n     * Ugly parsing of Exec output into some Elements. Gets called from StreamPumper.\n     *\n     * @param line the line of output to parse\n     */\n<｜fim▁hole｜>        // check if the output contains the error string\n        if (StringUtils.isNotEmpty(errorStr)) {\n            // YES: set error flag\n            if (StringUtils.equalsIgnoreCase(line.trim(), errorStr)) {\n                foundError = true;\n            }\n        }\n    } // consumeLine\n\n    /**\n     * @return returns the exitcode of the command\n     */\n    public int getExitCode() {\n        return exitCode;\n    } // getExitCode\n\n    /**\n     * @param exitCode the exit code value to set.\n     */\n    public void setExitCode(int exitCode) {\n        this.exitCode = exitCode;\n    } // setExitCode\n\n    /**\n     * @return true if error occurred, else false\n     */\n    public boolean foundError() {\n        return this.foundError;\n    } // wasError\n\n} // ExecScript<｜fim▁end｜>",
    "response": "    public synchronized void consumeLine(final String line) {\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.ebookdroid.opds.exceptions;\n\npublic class AuthorizationRequiredException extends OPDSException {\n\n    /**\n     * serial version UID.\n     */\n    private static final long serialVersionUID = -3974414687166243083L;\n\n<｜fim▁hole｜>    public final String method;\n\n    public AuthorizationRequiredException(final String host, final String method) {\n        this.host = host;\n        this.method = method;\n    }\n\n}<｜fim▁end｜>",
    "response": "    public final String host;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.owenbutler.theta.logic.levels;\n\nimport org.jgameengine.common.events.Event;\nimport org.owenbutler.theta.logic.LevelSupport;\n\npublic class LevelFour extends LevelSupport {\n\n    public void start() {\n\n        // let the hud manager know the level is starting\n        showLevelIntro(\"level four\");\n\n        // setup the enemy spawns\n        float time = 0;\n\n        for (int i = 0; i < 21; ++i) {\n            in((float) i, new Event() {\n                public void trigger() {\n                    spawnSmallSeeker();\n                }\n            });\n        }\n\n        // 1 1 1\n        time += 3.0f;\n        in(time, new Event() {\n            public void trigger() {\n                spawnEnemy1();\n                spawnEnemy1();\n                spawnEnemy1();\n            }\n        });\n\n        // 2 2 2\n        time += 3.0f;\n        in(time, new Event() {\n            public void trigger() {\n                spawnEnemy2();\n                spawnEnemy2();\n                spawnEnemy2();\n            }\n        });\n\n        // 3 3 3\n        time += 3.0f;\n        in(time, new Event() {\n            public void trigger() {\n                spawnEnemy3();\n                spawnEnemy3();\n                spawnEnemy3();\n            }\n        });\n\n        // 4\n        time += 3.0f;\n        in(time, new Event() {\n            public void trigger() {\n                spawnEnemy4();\n            }\n        });\n\n        // 4 4\n        time += 3.0f;\n        in(time, new Event() {\n            public void trigger() {\n                spawnEnemy4();\n                spawnEnemy4();\n                spawnEnemy1();\n            }\n        });\n\n        time += 3.0f;\n        in(time, new Event() {\n            public void trigger() {\n                spawnEnemy1();\n                spawnEnemy1();\n                spawnEnemy1();\n                spawnEnemy1();\n            }\n        });\n\n        // 1b 1b\n        time += 3.0f;\n        in(time, new Event() {\n            public void trigger() {\n                showLevelText(\"warning!\");\n\n                spawnEnemy1(true);\n                spawnEnemy1(true);\n            }\n        });\n\n        time += 4.0f;\n\n        in(time, new Event() {\n<｜fim▁hole｜>                endLevelWhenAllEnemiesDead();\n            }\n        });\n\n    }\n\n}<｜fim▁end｜>",
    "response": "            public void trigger() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package it.unical.asde.login.model;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.Table;\n\n@Entity\n@Table\npublic class Credentials {\n\n    @Id\n    @Column\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private int id;\n\n    @Column(unique=true)\n    private String username;\n\n    @Column\n    private String password;\n\n    public Credentials() {\n    }\n\n    public Credentials(String username, String password) {\n        super();\n        this.username = username;\n        this.password = password;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n<｜fim▁hole｜>\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n}<｜fim▁end｜>",
    "response": "    public String getPassword() {\n        return password;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amazonaws.services.ec2.model.transform;\n\nimport java.util.ArrayList;\n\nimport javax.xml.stream.events.XMLEvent;\nimport javax.annotation.Generated;\n\nimport com.amazonaws.services.ec2.model.*;\nimport com.amazonaws.transform.Unmarshaller;\n\nimport com.amazonaws.transform.StaxUnmarshallerContext;\nimport com.amazonaws.transform.SimpleTypeStaxUnmarshallers.*;\n\n@Generated(\"com.amazonaws:aws-java-sdk-code-generator\")\npublic class InstanceTagNotificationAttributeStaxUnmarshaller implements Unmarshaller<InstanceTagNotificationAttribute, StaxUnmarshallerContext> {\n\n    public InstanceTagNotificationAttribute unmarshall(StaxUnmarshallerContext context) throws Exception {\n        InstanceTagNotificationAttribute instanceTagNotificationAttribute = new InstanceTagNotificationAttribute();\n        int originalDepth = context.getCurrentDepth();\n        int targetDepth = originalDepth + 1;\n\n        if (context.isStartOfDocument())\n            targetDepth += 1;\n\n        while (true) {\n            XMLEvent xmlEvent = context.nextEvent();\n            if (xmlEvent.isEndDocument())\n                return instanceTagNotificationAttribute;\n\n            if (xmlEvent.isAttribute() || xmlEvent.isStartElement()) {\n\n                if (context.testExpression(\"instanceTagKeySet\", targetDepth)) {\n                    instanceTagNotificationAttribute.withInstanceTagKeys(new ArrayList<String>());\n                    continue;\n                }\n\n                if (context.testExpression(\"instanceTagKeySet/item\", targetDepth)) {\n                    instanceTagNotificationAttribute.withInstanceTagKeys(StringStaxUnmarshaller.getInstance().unmarshall(context));\n                    continue;\n                }\n\n                if (context.testExpression(\"includeAllTagsOfInstance\", targetDepth)) {\n                    instanceTagNotificationAttribute.setIncludeAllTagsOfInstance(BooleanStaxUnmarshaller.getInstance().unmarshall(context));\n                    continue;\n<｜fim▁hole｜>                    return instanceTagNotificationAttribute;\n                }\n            }\n        }\n    }\n\n    private static InstanceTagNotificationAttributeStaxUnmarshaller instance;\n\n    public static InstanceTagNotificationAttributeStaxUnmarshaller getInstance() {\n        if (instance == null)\n            instance = new InstanceTagNotificationAttributeStaxUnmarshaller();\n        return instance;\n    }\n}<｜fim▁end｜>",
    "response": "                }\n            } else if (xmlEvent.isEndElement()) {\n                if (context.getCurrentDepth() < originalDepth) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package iunet.util;\n\nimport java.awt.Color;\nimport java.awt.Font;\nimport java.awt.image.ImageFilter;\n\nimport com.octo.captcha.component.image.backgroundgenerator.BackgroundGenerator;\nimport com.octo.captcha.component.image.backgroundgenerator.UniColorBackgroundGenerator;\nimport com.octo.captcha.component.image.color.RandomListColorGenerator;\nimport com.octo.captcha.component.image.color.RandomRangeColorGenerator;\nimport com.octo.captcha.component.image.deformation.ImageDeformation;\nimport com.octo.captcha.component.image.deformation.ImageDeformationByFilters;\nimport com.octo.captcha.component.image.fontgenerator.FontGenerator;\nimport com.octo.captcha.component.image.fontgenerator.RandomFontGenerator;\nimport com.octo.captcha.component.image.textpaster.DecoratedRandomTextPaster;\nimport com.octo.captcha.component.image.textpaster.TextPaster;\nimport com.octo.captcha.component.image.textpaster.textdecorator.BaffleTextDecorator;\nimport com.octo.captcha.component.image.textpaster.textdecorator.LineTextDecorator;\nimport com.octo.captcha.component.image.textpaster.textdecorator.TextDecorator;\nimport com.octo.captcha.component.image.wordtoimage.DeformedComposedWordToImage;\nimport com.octo.captcha.component.image.wordtoimage.WordToImage;\nimport com.octo.captcha.component.word.wordgenerator.RandomWordGenerator;\nimport com.octo.captcha.component.word.wordgenerator.WordGenerator;\nimport com.octo.captcha.engine.image.ListImageCaptchaEngine;\nimport com.octo.captcha.image.gimpy.GimpyFactory;\n\npublic class CaptchaEngineUtil extends ListImageCaptchaEngine {\n\n    protected void buildInitialFactories() {\n        int minWordLength = 6;\n        int maxWordLength = 6;\n        int fontSize = 50;\n        int imageWidth = 250;\n        int imageHeight = 100;\n\n        WordGenerator wordGenerator = new RandomWordGenerator(\"0123456789abcdefghijklmnopqrstuvwxyz\");\n\n        RandomRangeColorGenerator cgen = new RandomRangeColorGenerator(new int[] { 0, 150 }, new int[] { 0, 150 },\n                new int[] { 0, 150 });\n        LineTextDecorator lineTextDecorator = new LineTextDecorator(1, cgen);// 曲线干扰\n        BaffleTextDecorator baffleTextDecorator = new BaffleTextDecorator(2, cgen);// 气泡干扰\n        TextDecorator[] textDecorators = new TextDecorator[2];\n        textDecorators[0] = lineTextDecorator;\n        textDecorators[1] = baffleTextDecorator;\n\n        TextPaster randomPaster = new DecoratedRandomTextPaster(minWordLength, maxWordLength,\n                new RandomListColorGenerator(\n<｜fim▁hole｜>\n        ImageDeformation postDef = new ImageDeformationByFilters(new ImageFilter[] {});\n        ImageDeformation backDef = new ImageDeformationByFilters(new ImageFilter[] {});\n        ImageDeformation textDef = new ImageDeformationByFilters(new ImageFilter[] {});\n\n        WordToImage word2image = new DeformedComposedWordToImage(font, background, randomPaster, backDef, textDef,\n                postDef);\n        addFactory(new GimpyFactory(wordGenerator, word2image));\n    }\n}<｜fim▁end｜>",
    "response": "                        new Color[] { new Color(23, 170, 27), new Color(220, 34, 11), new Color(23, 67, 172) }),\n                textDecorators);\n        BackgroundGenerator background = new UniColorBackgroundGenerator(imageWidth, imageHeight, Color.white);\n        FontGenerator font = new RandomFontGenerator(fontSize, fontSize,\n                new Font[] { new Font(\"nyala\", Font.BOLD, fontSize), new Font(\"Bell MT\", Font.PLAIN, fontSize),\n                        new Font(\"Credit valley\", Font.BOLD, fontSize) });\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package me.bogeymanEST.cmdhelper.tagdef;\n\npublic class OzelotDef extends TameableDef {\n    @Info(\"The ID of the skin the ocelot has. 0 is wild ocelot, 1 is tuxuedo, 2 is tabby and 3 is siamese. Does not determine an ocelot's behavior: it will be wild unless its Owner string is not empty, meaning wild ocelots can look like cats and vice versa.\")\n    @Min(0)\n<｜fim▁hole｜>    public Integer CatType;\n\n    @Override\n    public String getName() {\n        return \"Ozelot\";\n    }\n}<｜fim▁end｜>",
    "response": "    @Max(3)\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.kaazing.specification.amqp;\n\nimport static java.util.concurrent.TimeUnit.SECONDS;\nimport static org.junit.rules.RuleChain.outerRule;\n\nimport org.junit.Ignore;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.DisableOnDebug;\nimport org.junit.rules.TestRule;\nimport org.junit.rules.Timeout;\nimport org.kaazing.k3po.junit.annotation.ScriptProperty;\nimport org.kaazing.k3po.junit.annotation.Specification;\nimport org.kaazing.k3po.junit.rules.K3poRule;\n\npublic class AmqpIndenityWsIT {\n\n    private final K3poRule k3po = new K3poRule().setScriptRoot(\"org/kaazing/specification/amqp/ws\");\n\n    private final TestRule timeout = new DisableOnDebug(new Timeout(5, SECONDS));\n\n    @Rule\n    public final TestRule chain = outerRule(k3po).around(timeout);\n\n    @Test\n    @ScriptProperty({ \"connectLocation \\\"http://localhost:8001/amqp\\\"\", \"acceptLocation \\\"http://localhost:8001/amqp\\\"\" })\n    @Specification({ \"open/identity/request\", \"open/identity/response\" })\n    public void connectWithIdentity() throws Exception {\n        k3po.finish();\n    }\n\n    @Test\n<｜fim▁hole｜>    @Test\n    @Specification({ \"open/identity/request\", \"close/request\",\n                    \"open/identity/response\", \"close/response\" })\n    public void closeConnection() throws Exception {\n        k3po.finish();\n    }\n\n}<｜fim▁end｜>",
    "response": "    @ScriptProperty({ \"connectLocation \\\"http://localhost:8001/amqp\\\"\", \"acceptLocation \\\"http://localhost:8001/amqp\\\"\" })\n    @Specification({ \"open/noidentity/request\",  \"open/noidentity/response\" })\n    public void connectWithNoIdentity() throws Exception {\n        k3po.finish();\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.twitterclient.models;\n\nimport com.google.gson.annotations.Expose;\nimport com.google.gson.annotations.SerializedName;\nimport com.raizlabs.android.dbflow.annotation.Column;\n\nimport org.parceler.Parcel;\n\n@Parcel(analyze ={Message.class})\npublic class Message {\n\n    @SerializedName(\"id\")\n    @Expose\n    long id;\n\n    @Column\n    @SerializedName(\"text\")\n    @Expose\n    String text;\n\n    @Column\n    @SerializedName(\"created_at\")\n    @Expose\n    String createdAt;\n\n    @Column\n    @SerializedName(\"sender\")\n    @Expose\n    User sender;\n\n    @Column\n    @SerializedName(\"recipient\")\n    @Expose\n<｜fim▁hole｜>\n    public long getId() {\n        return id;\n    }\n\n    public void setId(long id) {\n        this.id = id;\n    }\n\n    public String getText() {\n        return text;\n    }\n\n    public void setText(String text) {\n        this.text = text;\n    }\n\n    public String getCreatedAt() {\n        return createdAt;\n    }\n\n    public void setCreatedAt(String createdAt) {\n        this.createdAt = createdAt;\n    }\n\n    public User getSender() {\n        return sender;\n    }\n\n    public void setSender(User sender) {\n        this.sender = sender;\n    }\n\n    public User getRecipient() {\n        return recipient;\n    }\n\n    public void setRecipient(User recipient) {\n        this.recipient = recipient;\n    }\n}<｜fim▁end｜>",
    "response": "    User recipient;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package lucee.runtime.cache.eh.remote.soap;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ObjectInputStream;\nimport java.nio.charset.Charset;\nimport java.util.Date;\n\nimport lucee.commons.io.IOUtil;\nimport lucee.commons.io.cache.CacheEntry;\nimport lucee.runtime.cache.CacheUtil;\nimport lucee.runtime.type.Struct;\n\npublic class SoapCacheEntry implements CacheEntry {\n\n    private Element element;\n\n    public SoapCacheEntry(Element element) {\n        this.element=element;\n\n    }\n\n    @Override\n    public Date created() {\n        return new Date(element.getExpirationDate().longValue()-element.getTimeToLiveSeconds().longValue());\n    }\n\n    @Override\n    public Date lastHit() {\n        return new Date(0);\n        // TODO return new Date(element.getLastAccessTime());\n    }\n\n    @Override\n    public Date lastModified() {\n        return new Date(0);\n        // TODO long value = element.getLastUpdateTime();\n        // TODO if(value==0)return created();\n        // TODO return new Date(value); \n    }\n\n    @Override\n    public int hitCount() {\n        return 0;\n        // TODO return (int)element.getHitCount();\n    }\n\n    @Override\n    public long idleTimeSpan() {\n        return element.getTimeToIdleSeconds().intValue()*1000;\n    }\n\n    @Override\n    public long liveTimeSpan() { \n        return element.getTimeToLiveSeconds().intValue()*1000;\n    }\n\n    @Override\n    public long size() {\n        return element.getValue().length;\n    }\n\n    @Override\n    public String getKey() {\n        return (String) element.getKey();\n    }\n\n    @Override\n    public Object getValue() {\n        try{\n        ByteArrayInputStream bais = new ByteArrayInputStream(element.getValue());\n        if(\"application/x-java-serialized-object\".equals(element.getMimeType())){\n            ObjectInputStream ois=new ObjectInputStream(bais);\n            return ois.readObject();\n        }\n        // other\n        return IOUtil.toString(bais,(Charset)null);\n        }\n        catch(Throwable t){\n            return null;\n        }\n<｜fim▁hole｜>    @Override\n    public String toString() {\n        return CacheUtil.toString(this);\n    }\n\n    @Override\n    public Struct getCustomInfo() {\n        Struct info=CacheUtil.getInfo(this);\n        // TODO info.setEL(\"version\", new Double(element.getVersion()));\n        return info;\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    public void setElement(Element element) {\n        this.element=element;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package teammates.test.cases.datatransfer;\n\nimport static teammates.common.util.Const.EOL;\n\nimport org.testng.annotations.Test;\n\nimport teammates.common.datatransfer.attributes.CourseAttributes;\nimport teammates.common.util.FieldValidator;\nimport teammates.common.util.StringHelper;\nimport teammates.test.cases.BaseTestCase;\n\npublic class CourseAttributesTest extends BaseTestCase {\n\n    //TODO: add test for constructor\n\n    @Test\n<｜fim▁hole｜>        assertTrue(\"valid value\", validCourse.isValid());\n\n        String veryLongId = StringHelper.generateStringOfLength(FieldValidator.COURSE_ID_MAX_LENGTH + 1);\n        String emptyName = \"\";\n        String invalidTimeZone = \"InvalidTimeZone\";\n        CourseAttributes invalidCourse = new CourseAttributes(veryLongId, emptyName, invalidTimeZone);\n\n        assertFalse(\"invalid value\", invalidCourse.isValid());\n        String errorMessage =\n                getPopulatedErrorMessage(\n                    FieldValidator.COURSE_ID_ERROR_MESSAGE, invalidCourse.getId(),\n                    FieldValidator.COURSE_ID_FIELD_NAME, FieldValidator.REASON_TOO_LONG,\n                    FieldValidator.COURSE_ID_MAX_LENGTH) + EOL\n                + getPopulatedErrorMessage(\n                      FieldValidator.SIZE_CAPPED_NON_EMPTY_STRING_ERROR_MESSAGE, invalidCourse.getName(),\n                      FieldValidator.COURSE_NAME_FIELD_NAME, FieldValidator.REASON_EMPTY,\n                      FieldValidator.COURSE_NAME_MAX_LENGTH) + EOL\n                + getPopulatedErrorMessage(\n                      FieldValidator.COURSE_TIME_ZONE_ERROR_MESSAGE, invalidCourse.getTimeZone(),\n                      FieldValidator.COURSE_TIME_ZONE_FIELD_NAME, FieldValidator.REASON_UNAVAILABLE_AS_CHOICE);\n        assertEquals(\"invalid value\", errorMessage, StringHelper.toString(invalidCourse.getInvalidityInfo()));\n    }\n\n    @Test\n    public void testGetValidityInfo() {\n        //already tested in testValidate() above\n    }\n\n    @Test\n    public void testIsValid() {\n        //already tested in testValidate() above\n    }\n\n    @Test\n    public void testToString() {\n        CourseAttributes c = generateValidCourseAttributesObject();\n        assertEquals(\"[CourseAttributes] id: valid-id-$_abc name: valid-name timeZone: UTC\", c.toString());\n    }\n\n    private static CourseAttributes generateValidCourseAttributesObject() {\n        return new CourseAttributes(\"valid-id-$_abc\", \"valid-name\", \"UTC\");\n    }\n\n}<｜fim▁end｜>",
    "response": "    public void testValidate() throws Exception {\n\n        CourseAttributes validCourse = generateValidCourseAttributesObject();\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package te.com.locksmith;\n\nimport android.app.NotificationManager;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.view.View;\nimport android.widget.Toast;\n\nimport com.mikepenz.materialdrawer.Drawer;\n<｜fim▁hole｜>import te.com.locksmith.helpers.ActivityResultBus;\nimport te.com.locksmith.helpers.BackStackHelper;\nimport te.com.locksmith.helpers.OnBackPressedHelper;\nimport te.com.locksmith.tools.FragmentChanger;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Drawer leftNavDrawer = null;\n    private boolean doubleBackToExitPressedOnce = false;\n    public View activityRootView;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        this.activityRootView = findViewById(R.id.activityRoot);\n\n        // Handle Toolbar\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n\n        //ActionBarAdapter\n        ActionBarAdapter actionBarAdapter = new ActionBarAdapter(MainActivity.this, getSupportActionBar());\n\n        Bundle extras = getIntent().getExtras();\n\n        //Check for notification click\n        if (extras != null) {\n            //Create the drawer\n            leftNavDrawer = new LeftNavAdapter(MainActivity.this, toolbar, actionBarAdapter, false).build();\n\n        } else {\n            //Create the drawer\n            leftNavDrawer = new LeftNavAdapter(MainActivity.this, toolbar, actionBarAdapter, true).build();\n        }\n\n    }\n\n    @Override\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        ActivityResultBus.getInstance().postQueue(\n                new ActivityResultEvent(requestCode, resultCode, data));\n    }\n\n    @Override\n    public void onBackPressed() {\n        //handle the back press :D close the drawer first and if the drawer is closed close the activity\n        if (leftNavDrawer != null && leftNavDrawer.isDrawerOpen()) {\n            leftNavDrawer.closeDrawer();\n        } else if (OnBackPressedHelper.getOnBackPressed() != null) {\n            OnBackPressedHelper.getOnBackPressed().Run();\n        } else if (!BackStackHelper.isEmty()) {\n            new FragmentChanger(MainActivity.this, BackStackHelper.pop(), null, false, ActiveFragmentConservative.fragment.getClass());\n        } else {\n            if (doubleBackToExitPressedOnce) {\n                super.onBackPressed();\n                return;\n            }\n\n            this.doubleBackToExitPressedOnce = true;\n            Toast.makeText(this, \"Çıkmak için tekrar basın\", Toast.LENGTH_SHORT).show();\n\n            new Handler().postDelayed(new Runnable() {\n                @Override\n                public void run() {\n                    doubleBackToExitPressedOnce = false;\n                }\n            }, 2000);\n        }\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n        //Uygulama açıldığında daha önceden verilmiş olan notifleri siliyorum\n        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n        notificationManager.cancelAll();\n    }\n\n    @Override\n    protected void onPause() {\n        super.onPause();\n    }\n}<｜fim▁end｜>",
    "response": "\nimport te.com.locksmith.adapters.ActionBarAdapter;\nimport te.com.locksmith.adapters.LeftNavAdapter;\nimport te.com.locksmith.constants.ActiveFragmentConservative;\nimport te.com.locksmith.dao.ActivityResultEvent;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.microsoft.bingads.v12.reporting;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlType;\nimport javax.xml.bind.annotation.XmlValue;\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"duration\", namespace = \"http://schemas.microsoft.com/2003/10/Serialization/\", propOrder = {\n    \"value\"\n})\npublic class Duration {\n\n    @XmlValue\n<｜fim▁hole｜>    /**\n     * Gets the value of the value property.\n     * \n     * @return\n     *     possible object is\n     *     {@link javax.xml.datatype.Duration }\n     *     \n     */\n    public javax.xml.datatype.Duration getValue() {\n        return value;\n    }\n\n    /**\n     * Sets the value of the value property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link javax.xml.datatype.Duration }\n     *     \n     */\n    public void setValue(javax.xml.datatype.Duration value) {\n        this.value = value;\n    }\n\n}<｜fim▁end｜>",
    "response": "    protected javax.xml.datatype.Duration value;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package jp.co.flect.formvalidation;\n\nimport org.junit.Test;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\nimport java.util.Map;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.io.File;\nimport jp.co.flect.io.FileUtils;\nimport jp.co.flect.json.JsonUtils;\n\npublic class JsonTest {\n\n    private static final String TESTDATA_PATH = \"../enq/app/data\";\n<｜fim▁hole｜>\n        Map<String, String[]> map = new HashMap<String, String[]>();\n        ValidationResult result = form.validate(map);\n        assertTrue(result.hasErrors());\n        for (Map.Entry<FormItem, List<String>> entry : result.getErrors().entrySet()) {\n            System.out.println(entry.getKey().getLabel() + \": \" + entry.getValue());\n        }\n        for (String msg : result.getCommonErrors()) {\n            System.out.println(\"Common: \" + msg);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    @Test \n    public void readSample() throws Exception {\n        String json = FileUtils.readFileAsString(new File(TESTDATA_PATH, \"sampleForm.json\"));\n        FormDefinition form = FormDefinition.fromJson(json);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package password.pwm.ws.server.rest;\n\nimport com.novell.ldapchai.ChaiUser;\nimport com.novell.ldapchai.exception.ChaiOperationException;\nimport com.novell.ldapchai.exception.ChaiUnavailableException;\nimport password.pwm.Permission;\nimport password.pwm.bean.UserIdentity;\nimport password.pwm.error.ErrorInformation;\nimport password.pwm.error.PwmError;\nimport password.pwm.error.PwmOperationalException;\nimport password.pwm.error.PwmUnrecoverableException;\nimport password.pwm.i18n.Message;\nimport password.pwm.ldap.UserSearchEngine;\nimport password.pwm.util.operations.OtpService;\nimport password.pwm.util.otp.OTPUserRecord;\nimport password.pwm.ws.server.RestRequestBean;\nimport password.pwm.ws.server.RestResultBean;\nimport password.pwm.ws.server.RestServerHelper;\nimport password.pwm.ws.server.ServicePermissions;\n\nimport javax.ws.rs.*;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.Response;\nimport java.io.Serializable;\nimport java.net.URISyntaxException;\n\n@Path(\"/verifyotp\")\npublic class RestVerifyOtpServer extends AbstractRestServer {\n\n    public static class JsonPutOtpInput implements Serializable {\n        public String token;\n        public String username;\n    }\n\n    @GET\n    @Produces(MediaType.TEXT_HTML)\n    public Response doHtmlRedirect() throws URISyntaxException {\n        return RestServerHelper.doHtmlRedirect();\n    }\n\n    @POST\n    @Produces(MediaType.APPLICATION_JSON + \";charset=UTF-8\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response doSetOtpDataJson(final RestVerifyOtpServer.JsonPutOtpInput jsonInput) {\n        final RestRequestBean restRequestBean;\n        try {\n            final ServicePermissions servicePermissions = new ServicePermissions();\n            servicePermissions.setAdminOnly(false);\n            servicePermissions.setAuthRequired(true);\n            servicePermissions.setBlockExternal(true);\n            restRequestBean = RestServerHelper.initializeRestRequest(request, response, servicePermissions, jsonInput.username);\n        } catch (PwmUnrecoverableException e) {\n            return RestResultBean.fromError(e.getErrorInformation()).asJsonResponse();\n        }\n        try {\n            if (!restRequestBean.getPwmSession().getSessionManager().checkPermission(restRequestBean.getPwmApplication(), Permission.SETUP_OTP_SECRET)) {\n                throw new PwmUnrecoverableException(new ErrorInformation(PwmError.ERROR_UNAUTHORIZED,\"actor does not have required permission\"));\n            }\n\n            final UserSearchEngine userSearchEngine = new UserSearchEngine(restRequestBean.getPwmApplication(), restRequestBean.getPwmSession().getLabel());\n            UserIdentity userIdentity = restRequestBean.getUserIdentity();\n            if (userIdentity == null) {\n                ChaiUser chaiUser = restRequestBean.getPwmSession().getSessionManager().getActor(restRequestBean.getPwmApplication());\n                userIdentity = userSearchEngine.resolveUsername(chaiUser.readUsername(), null, null);\n            }\n\n            final OtpService otpService = restRequestBean.getPwmApplication().getOtpService();\n            final OTPUserRecord otpUserRecord = otpService.readOTPUserConfiguration(restRequestBean.getPwmSession().getLabel(),userIdentity);\n            final boolean verified = otpUserRecord !=null && otpService.validateToken(\n                    restRequestBean.getPwmSession(),\n                    userIdentity,\n                    otpUserRecord,\n                    jsonInput.token,\n                    false\n            );\n            final String successMsg = Message.Success_Unknown.getLocalizedMessage(request.getLocale(),restRequestBean.getPwmApplication().getConfig());\n            RestResultBean resultBean = new RestResultBean();\n            resultBean.setError(false);\n            resultBean.setData(verified);\n            resultBean.setSuccessMessage(successMsg);\n            return resultBean.asJsonResponse();                    \n        } catch (PwmUnrecoverableException e) {\n<｜fim▁hole｜>            final ErrorInformation errorInformation = new ErrorInformation(PwmError.ERROR_UNKNOWN, errorMsg);\n            return RestResultBean.fromError(errorInformation,restRequestBean).asJsonResponse();\n        } catch (ChaiOperationException e) {\n            final String errorMsg = \"unexpected error reading json input: \" + e.getMessage();\n            final ErrorInformation errorInformation = new ErrorInformation(PwmError.ERROR_UNKNOWN, errorMsg);\n            return RestResultBean.fromError(errorInformation,restRequestBean).asJsonResponse();\n        } catch (PwmOperationalException e) {\n            final String errorMsg = \"unexpected error reading json input: \" + e.getMessage();\n            final ErrorInformation errorInformation = new ErrorInformation(PwmError.ERROR_UNKNOWN, errorMsg);\n            return RestResultBean.fromError(errorInformation,restRequestBean).asJsonResponse();\n        }\n\n    }\n\n}<｜fim▁end｜>",
    "response": "            return RestResultBean.fromError(e.getErrorInformation(),restRequestBean).asJsonResponse();\n        } catch (ChaiUnavailableException e) {\n            final String errorMsg = \"unexpected error reading json input: \" + e.getMessage();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package agents.firm.purchases.pricing;\n\nimport agents.firm.purchases.PurchasesDepartment;\nimport goods.Good;\nimport goods.GoodType;\nimport model.utilities.ActionOrder;\nimport model.utilities.scheduler.Priority;\nimport sim.engine.SimState;\nimport sim.engine.Steppable;\n\npublic class PriceTaker implements BidPricingStrategy {\n\n    /**\n     * how much to offer for a good when the price is not visible.\n     *\n     */\n    private int defaultOffer = 1000;\n\n    /**\n     * creates the pricing strategy that looks at the market\n     * @param department reference needed because it sets the priority of its action as \"low\" (trying to act after the sales departments)\n     */\n    public PriceTaker(final PurchasesDepartment department) {\n        department.setTradePriority(Priority.AFTER_STANDARD);\n\n        department.getModel().scheduleSoon(ActionOrder.DAWN,new Steppable() {\n            @Override\n            public void step(SimState state) {\n                defaultOffer = 1000 + department.getRandom().nextInt(10000);\n<｜fim▁hole｜>\n            }\n        });\n    }\n\n    /**\n     * Returns the best sale price if there is one and is visible or default offer\n     *\n     * @param type the type of good you want to buy\n     * @return the maximum price I am willing to pay for this good\n     */\n    @Override\n    public int maxPrice(GoodType type) {\n\n            return defaultOffer;\n\n    }\n\n    /**\n     * Answer the purchase strategy question: how much am I willing to pay for this specific good?\n     *\n     * @param good the specific good being offered to you\n     * @return the maximum price I am willing to pay for this good\n     */\n    @Override\n    public int maxPrice(Good good) {\n        return maxPrice(good.getType()); //delegate\n    }\n\n    /**\n     * Useful to stop the bid pricing strategy from giving orders\n     */\n    @Override\n    public void turnOff() {\n        //nothing really\n    }\n\n    /**\n     * Sets new how much to offer for a good when the price is not visible..\n     *\n     * @param defaultOffer New value of how much to offer for a good when the price is not visible..\n     */\n    public void setDefaultOffer(int defaultOffer) {\n        this.defaultOffer = defaultOffer;\n    }\n\n    /**\n     * Gets how much to offer for a good when the price is not visible..\n     *\n     * @return Value of how much to offer for a good when the price is not visible..\n     */\n    public long getDefaultOffer() {\n        return defaultOffer;\n    }\n}<｜fim▁end｜>",
    "response": "                department.getModel().scheduleTomorrow(ActionOrder.DAWN,this);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.anddev.andengine.entity.scene.menu.animator;\n\nimport java.util.ArrayList;\n\nimport org.anddev.andengine.entity.scene.menu.item.IMenuItem;\n\npublic interface IMenuAnimator {\n    // ===========================================================\n    // Constants\n    // ===========================================================\n\n    public static final IMenuAnimator DEFAULT = new AlphaMenuAnimator();\n\n    // ===========================================================\n<｜fim▁hole｜>    public void buildAnimations(final ArrayList<IMenuItem> pMenuItems, final float pCameraWidth, final float pCameraHeight);\n}<｜fim▁end｜>",
    "response": "    // Methods\n    // ===========================================================\n\n    public void prepareAnimations(final ArrayList<IMenuItem> pMenuItems, final float pCameraWidth, final float pCameraHeight);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>import java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.eclipse.core.commands.ExecutionException;\nimport org.eclipse.core.runtime.IAdaptable;\nimport org.eclipse.core.runtime.IProgressMonitor;\nimport org.eclipse.core.runtime.IStatus;\nimport org.eclipse.core.runtime.jobs.Job;\nimport org.eclipse.osgi.util.NLS;\n\nimport com.bdaum.zoom.cat.model.asset.Asset;\nimport com.bdaum.zoom.core.Constants;\nimport com.bdaum.zoom.core.Core;\nimport com.bdaum.zoom.core.internal.CoreActivator;\nimport com.bdaum.zoom.core.internal.ImportState;\nimport com.bdaum.zoom.core.internal.Utilities;\nimport com.bdaum.zoom.core.internal.db.AssetEnsemble;\nimport com.bdaum.zoom.core.internal.operations.ImportConfiguration;\nimport com.bdaum.zoom.operations.AbstractImportOperation;\nimport com.bdaum.zoom.operations.IProfiledOperation;\n\n@SuppressWarnings(\"restriction\")\npublic class ImportForeignCatOperation extends AbstractImportOperation {\n\n    private IForeignCatHandler handler;\n    private final String fileName;\n    private Date previousImport;\n\n    public ImportForeignCatOperation(String fileName, IForeignCatHandler handler,\n            ImportConfiguration importConfiguration) {\n        super(NLS.bind(Messages.ImportForeignCatOperation_importing, handler.getName()));\n        this.fileName = fileName;\n        this.handler = handler;\n        importState = new ImportState(importConfiguration, null, null, this, Constants.FILESOURCE_UNKNOWN);\n        importConfiguration.rawOptions = Constants.RAWIMPORT_ONLYRAW;\n    }\n\n    @Override\n    public void init(IProgressMonitor aMonitor, int work) {\n        super.init(aMonitor, work);\n    }\n\n    @Override\n    public void fireStructureModified() {\n        super.fireStructureModified();\n    }\n\n    public int getExecuteProfile() {\n        return IProfiledOperation.CONTENT | IProfiledOperation.SYNCHRONIZE;\n    }\n\n    public int getUndoProfile() {\n        return IProfiledOperation.CONTENT | IProfiledOperation.INDEX;\n    }\n\n    @Override\n    public IStatus execute(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {\n        importState.info = info;\n        try {\n            // load the sqlite-JDBC driver using the current class loader\n            try {\n                Class.forName(\"org.sqlite.JDBC\"); //$NON-NLS-1$\n            } catch (ClassNotFoundException e1) {\n                CatActivator.getDefault().logError(Messages.ImportForeignCatOperation_no_driver, e1);\n            }\n            String path = fileName.replaceAll(\"\\\\\\\\\", \"/\"); //$NON-NLS-1$//$NON-NLS-2$\n            // create a database connection\n            try (Connection connection = DriverManager.getConnection(\"jdbc:sqlite:\" + path)) { //$NON-NLS-1$\n                handler.execute(monitor, fileName, connection, importState);\n                previousImport = handler.getPreviousImport();\n            } catch (SQLException e) {\n                CatActivator.getDefault().logError(NLS.bind(Messages.ImportForeignCatOperation_no_connection, fileName),\n                        e);\n            }\n        } finally {\n            if (storeSafely(null, 1, importState.meta))\n                fireAssetsModified(null, null);\n            for (Asset a : importState.allDeletedAssets)\n                dbManager.markSystemCollectionsForPurge(a);\n            importState.importFinished();\n        }\n        return close(info);\n    }\n\n    @Override\n    public boolean canRedo() {\n        return false;\n    }\n\n    @Override\n    public IStatus redo(IProgressMonitor aMonitor, IAdaptable info) throws ExecutionException {\n        return null;\n    }\n\n    @Override\n    public IStatus undo(IProgressMonitor monitor, IAdaptable info) throws ExecutionException {\n        importState.info = info;\n        List<Asset> assets = importState.obtainImportedAssets();\n        initUndo(monitor, assets.size() + importState.allDeletedAssets.size() + 3);\n        openIndexWriter();\n        final List<Object> toBeStored = new ArrayList<Object>();\n        final Set<Object> toBeDeleted = new HashSet<Object>();\n        try {\n            toBeStored.addAll(importState.allDeletedGhosts);\n            monitor.worked(1);\n            int i = 0;\n            for (Asset asset : assets) {\n                new AssetEnsemble(dbManager, asset, importState).delete(toBeDeleted, toBeStored);\n                storeSafely(toBeDeleted.toArray(), 1, toBeStored.toArray());\n                if (!importState.allDeletedAssets.contains(asset))\n                    deleteIndexEntry(asset.getStringId());\n                dbManager.markSystemCollectionsForPurge(asset);\n                if (i == 0)\n                    fireAssetsModified(null, null);\n                if (i++ == 16)\n                    i = 0;\n            }\n            storeSafely(null, importState.allDeletedAssets.size(), importState.allDeletedAssets.toArray());\n            if (!importState.allDeletedAssets.isEmpty() && !dbManager.getMeta(true).getNoIndex()) {\n                Job job = Core.getCore().getDbFactory().getLireService(true).createIndexingJob(importState.allDeletedAssets,\n                        true, -1, 0, CoreActivator.getDefault().isNoProgress());\n                if (job != null)\n                    job.schedule();\n            }\n        } finally {\n            closeIndex();\n            CoreActivator.getDefault().getFileWatchManager().stopIgnoring(opId);\n            Utilities.popLastImport(toBeStored, toBeDeleted, previousImport, true);\n            storeSafely(toBeDeleted.toArray(), 1, toBeStored.toArray());\n            fireAssetsModified(null, null);\n            fireStructureModified();\n        }\n        return close(info);\n    }\n\n}<｜fim▁end｜>",
    "response": "package com.bdaum.zoom.cat.foreign.internal;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.talpidae.base.util.auth;\n\nimport io.jsonwebtoken.Claims;\n\npublic interface Authenticator\n{\n    /**\n     * Create a new token with the specified subject (usually session ID).\n     */\n<｜fim▁hole｜>     * Try to parse the token using the known keys and return the contained body.\n     */\n    Claims evaluateToken(String token);\n\n    /**\n     * Retrieve secret key for signing tokens.\n     */\n    String[] getKeys();\n}<｜fim▁end｜>",
    "response": "    String createToken(String subject);\n\n    /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.anhonesteffort.polygons.map;\n\nimport android.util.Log;\n\nimport com.actionbarsherlock.view.ActionMode;\nimport com.actionbarsherlock.view.Menu;\nimport com.actionbarsherlock.view.MenuInflater;\nimport com.actionbarsherlock.view.MenuItem;\nimport org.anhonesteffort.polygons.R;\nimport org.anhonesteffort.polygons.database.model.PointRecord;\nimport org.anhonesteffort.polygons.map.ZoneMapActivity.DrawState;\n\npublic class PointEditCallback implements ActionMode.Callback {\n  private static final String TAG = \"org.anhonesteffort.polygons.map.PointEditCallback\";\n  private ZoneMapActivity mapActivity;\n\n  public PointEditCallback(ZoneMapActivity mapActivity) {\n    this.mapActivity = mapActivity;\n  }\n\n  private void removeSelectedPoint() {\n    Log.d(TAG, \"removeSelectedPoint()\");\n    PointRecord removePoint = null;\n\n    for(PointRecord point : mapActivity.getSelectedZone().getPoints()) {\n      if(point.getId() == mapActivity.getSelectedPoint().getId())\n        removePoint = point;\n    }\n    if(removePoint != null)\n      mapActivity.getSelectedZone().getPoints().remove(removePoint);\n\n    mapActivity.updateSelectedZone();\n    mapActivity.setState(DrawState.EDIT_ZONE);\n  }\n\n  @Override\n  public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n    Log.d(TAG, \"onCreateActionMode()\");\n    MenuInflater inflater = mode.getMenuInflater();\n    inflater.inflate(R.menu.edit_point_menu, menu);\n<｜fim▁hole｜>  @Override\n  public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n    mode.setSubtitle(mapActivity.getSelectedZone().getLabel());\n    return true;\n  }\n\n  @Override\n  public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n    switch (item.getItemId()) {\n      case R.id.delete_point_button:\n        removeSelectedPoint();\n        return true;\n    }\n    return false;\n  }\n\n  @Override\n  public void onDestroyActionMode(ActionMode mode) {\n    Log.d(TAG, \"onDestroyActionMode()\");\n    if(mapActivity.getState() != DrawState.NEW_POINTS)\n      mapActivity.setState(DrawState.NAVIGATE);\n  }\n}<｜fim▁end｜>",
    "response": "    mode.setTitle(mapActivity.getString(R.string.title_edit_point));\n    mode.setSubtitle(mapActivity.getSelectedZone().getLabel());\n    return true;\n  }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package de.uka.ipd.sdq.beagle.gui;\n\nimport de.uka.ipd.sdq.beagle.core.facade.BeagleController;\nimport de.uka.ipd.sdq.beagle.core.failurehandling.FailureHandler;\nimport de.uka.ipd.sdq.beagle.core.failurehandling.FailureReport;\nimport de.uka.ipd.sdq.beagle.core.failurehandling.FailureResolver;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class GuiController {\n\n    /**\n     * The {@link BeagleController} connected to this GUI.\n     */\n    private final BeagleController beagleController;\n\n    /**\n     * The window showing progress to the user.\n     */\n    private final ProgressWindow progressWindow = new ProgressWindow(this);\n\n    /**\n     * Callbacks for when the analysis has finished.\n     */\n    private final Set<Runnable> finishListeners = new HashSet<>();\n\n    /**\n     * Will be set when the analysis finished.\n     */\n    private volatile boolean finished;\n\n    /**\n     * Will be set when the analysis was requested to be aborted.\n     */\n    private volatile boolean aborted;\n\n    /**\n     * Constructs a new {@link GuiController} using {@code components} as the default\n     * components to be measured.\n     *\n     * @param beagleController The {@link BeagleController} to use.\n     */\n    public GuiController(final BeagleController beagleController) {\n        this.beagleController = beagleController;\n    }\n\n    /**\n     * Reports that the analysis is being prepared.\n     */\n    public synchronized void preparingAnalysis() {\n        this.progressWindow.initialise();\n        FailureHandler.setProvider(FailureResponder::new);\n        this.progressWindow.show();\n        this.progressWindow.setPreparing();\n    }\n\n    /**\n     * Reports that the analysis has started. May only be called after\n     * {@link #preparingAnalysis()} has been called.\n     */\n    public synchronized void analysisStarted() {\n        this.progressWindow.show();\n        this.progressWindow.setRunning();\n    }\n\n    /**\n     * Reports that the analysis has ended. May only be called after\n     * {@link #analysisStarted()} has been called.\n     */\n    public synchronized void analysisFinished() {\n        this.finished = true;\n        for (final Runnable endListener : this.finishListeners) {\n            endListener.run();\n        }\n        this.progressWindow.hide();\n    }\n\n    /**\n     * Callback to report that the user requested to pause the analysis. May only be\n     * called after {@link #analysisStarted()} has been called.\n     */\n    public synchronized void pauseRequested() {\n        this.beagleController.pauseAnalysis();\n        this.progressWindow.setPaused();\n    }\n\n    /**\n     * Callback to report that the user requested to abort the analysis. May only be\n     * called after {@link #analysisStarted()} has been called.\n     */\n    public void abortRequested() {\n        if (this.aborted || this.finished) {\n            return;\n        }\n\n        this.progressWindow.hide();\n        if (this.confirmAbort()) {\n            this.aborted = true;\n            this.progressWindow.setAborting();\n            this.beagleController.abortAnalysis();\n        }\n\n        synchronized (this) {\n            if (!this.finished) {\n                this.progressWindow.show();\n            }\n        }\n    }\n\n    /**\n     * Callback to report that the user requested to resume the analysis. May only be\n     * called after {@link #analysisStarted()} has been called.\n     */\n    public synchronized void continueRequested() {\n        this.progressWindow.setRunning();\n        this.beagleController.continueAnalysis();\n    }\n\n    /**\n     * Shows a dialog asking the user if they really want to abort.\n     *\n     * @return {@code true} if the user confirmed to abort the analysis.\n     */\n    private boolean confirmAbort() {\n        final AbortQuestion question = new AbortQuestion();\n        final Runnable finishCallback = question::nevermind;\n        this.finishListeners.add(finishCallback);\n        final boolean answer = question.ask();\n        this.finishListeners.remove(finishCallback);\n        return answer;\n    }\n\n    /**\n     * Intermediate {@code FailureResolver}. Prepares the GUI and then calls\n     * {@link GraphicalFailureHandler}.\n     *\n     * @author Joshua Gleitze\n     */\n    private final class FailureResponder implements FailureResolver {\n\n        /**\n         * The handler of failures that will be called for all reported failures.\n         */\n        private final GraphicalFailureHandler gFailureHandler = new GraphicalFailureHandler();\n\n        @Override\n        public <RECOVER_TYPE> RECOVER_TYPE handle(final FailureReport<RECOVER_TYPE> report, final String reporterName) {\n            GuiController.this.progressWindow.hide();\n            final RECOVER_TYPE result = this.gFailureHandler.handle(report, reporterName);\n            GuiController.this.progressWindow.show();\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "            return result;\n        }\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.flowable.engine.test.bpmn.servicetask;\n\nimport java.io.Serializable;\n<｜fim▁hole｜>import org.junit.jupiter.api.Test;\n\npublic class ServiceTaskVariablesTest extends PluggableFlowableTestCase {\n\n    static boolean isOkInDelegate2;\n    static boolean isOkInDelegate3;\n\n    public static class Variable implements Serializable {\n        private static final long serialVersionUID = 1L;\n        public String value;\n    }\n\n    public static class Delegate1 implements JavaDelegate {\n\n        @Override\n        public void execute(DelegateExecution execution) {\n            Variable v = new Variable();\n            v.value = \"delegate1\";\n            execution.setVariable(\"variable\", v);\n        }\n\n    }\n\n    public static class Delegate2 implements JavaDelegate {\n\n        @Override\n        public void execute(DelegateExecution execution) {\n            Variable v = (Variable) execution.getVariable(\"variable\");\n            synchronized (ServiceTaskVariablesTest.class) {\n                // we expect this to be 'true'\n                isOkInDelegate2 = (\"delegate1\".equals(v.value));\n            }\n            v.value = \"delegate2\";\n            execution.setVariable(\"variable\", v);\n        }\n\n    }\n\n    public static class Delegate3 implements JavaDelegate {\n\n        @Override\n        public void execute(DelegateExecution execution) {\n            Variable v = (Variable) execution.getVariable(\"variable\");\n            synchronized (ServiceTaskVariablesTest.class) {\n                // we expect this to be 'true' as well\n                isOkInDelegate3 = (\"delegate2\".equals(v.value));\n            }\n        }\n\n    }\n\n    @Test\n    @Deployment\n    public void testSerializedVariablesBothAsync() {\n\n        // in this test, there is an async cont. both before the second and the\n        // third service task in the sequence\n\n        runtimeService.startProcessInstanceByKey(\"process\");\n\n        Job job = managementService.createJobQuery().singleResult();\n        assertNotNull(job);\n        managementService.executeJob(job.getId());\n\n        job = managementService.createJobQuery().singleResult();\n        assertNotNull(job);\n        managementService.executeJob(job.getId());\n\n        assertTrue(isOkInDelegate2);\n        assertTrue(isOkInDelegate3);\n    }\n\n    @Test\n    @Deployment\n    public void testSerializedVariablesThirdAsync() {\n\n        // in this test, only the third service task is async\n\n        runtimeService.startProcessInstanceByKey(\"process\");\n        waitForJobExecutorToProcessAllJobs(10000, 500);\n\n        synchronized (ServiceTaskVariablesTest.class) {\n            assertTrue(isOkInDelegate2);\n            assertTrue(isOkInDelegate3);\n        }\n\n    }\n\n}<｜fim▁end｜>",
    "response": "\nimport org.flowable.engine.delegate.DelegateExecution;\nimport org.flowable.engine.delegate.JavaDelegate;\nimport org.flowable.engine.impl.test.PluggableFlowableTestCase;\nimport org.flowable.engine.test.Deployment;\nimport org.flowable.job.api.Job;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.wings.template;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\npublic class StreamTemplateSource implements TemplateSource {\n    /**\n     * enable debug output\n     */\n    private static final boolean DEBUG = true;\n\n    /**\n     * <p>the <code>InputStream</code> from which we are reading data.</p>\n     */\n    private transient InputStream iStream;\n\n    /**\n     * <p>the last time the <code>InputStream</code> was updated.</p>\n     */\n    private long modificationTime;\n<｜fim▁hole｜>     * @param iStream the InputStream from which the template is read.\n     */\n    public StreamTemplateSource(InputStream iStream) {\n        setInputStream(iStream);\n    }\n\n    /**\n     * <p>sets the InputStream and the modificationTime</p>\n     *\n     * @param iStream the InputStream from which the template is read.\n     */\n    public void setInputStream(InputStream iStream) {\n        if (iStream == null) {\n            throw new IllegalArgumentException(\"stream is null, this is invalid!!\");\n        }\n        this.iStream = iStream;\n        setModificationTime();\n    }\n\n    /**\n     * <p>sets the modificationTime to the currentTimeMillis</p>\n     */\n    public void setModificationTime() {\n        modificationTime = System.currentTimeMillis();\n    }\n\n    /**\n     * <p>returns the canonical name of the inputStream (uaaaah!)</p>\n     *\n     * @return <p>always null, because stream is always to be parsed</p>\n     */\n    public String getCanonicalName() {\n        return null;\n    }\n\n    /**\n     * <p>Returns the time the content of this stream\n     * was last modified.</p>\n     * <p>The return value is used to decide whether to reparse a\n     * Source or not. Reparsing is done if the value returned\n     * here differs from the value returned at the last processing\n     * time.</p>\n     * <p><em>Attention: Modificationtime is only updated if a new stream is set!</em></p>\n     *\n     * @return long a modification time\n     */\n    public long lastModified() {\n        return modificationTime;\n    }\n\n    /**\n     * Gets an InputStream of the File.\n     *\n     * @return the actually set InputStream\n     */\n    public InputStream getInputStream() throws IOException {\n        iStream.reset();\n        return iStream;\n    }\n}<｜fim▁end｜>",
    "response": "\n    /**\n     * <p>generates a new StreamDataSource with the given Stream</p>\n     *\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package edu.softserve.zoo.web.test.config;\n\n<｜fim▁hole｜>import org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\n\n@Configuration\n@Import(WebConfig.class)\n@ComponentScan(\"edu.softserve.zoo.web.test.controller.endpoints.checking.checker\")\npublic class WebTestConfig {\n\n}<｜fim▁end｜>",
    "response": "import edu.softserve.zoo.config.WebConfig;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.whitney.sales.web.vo;\n\nimport java.math.BigDecimal;\n\npublic class SaleVO {\n    private Long id;\n    private Long productId;\n    private Long userId;\n    private Integer quantity;\n    private BigDecimal amount;\n\n    public Long getId() {\n        return id;\n    }\n\n<｜fim▁hole｜>    }\n\n    public Long getProductId() {\n        return productId;\n    }\n\n    public void setProductId(Long productId) {\n        this.productId = productId;\n    }\n\n    public Long getUserId() {\n        return userId;\n    }\n\n    public void setUserId(Long userId) {\n        this.userId = userId;\n    }\n\n    public Integer getQuantity() {\n        return quantity;\n    }\n\n    public void setQuantity(Integer quantity) {\n        this.quantity = quantity;\n    }\n\n    public BigDecimal getAmount() {\n        return amount;\n    }\n\n    public void setAmount(BigDecimal amount) {\n        this.amount = amount;\n    }\n}<｜fim▁end｜>",
    "response": "    public void setId(Long id) {\n        this.id = id;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.rim.samples.device.ui.uitoolkitdemo;\n\nimport net.rim.device.api.system.Bitmap;\nimport net.rim.device.api.ui.component.StandardTitleBar;\n<｜fim▁hole｜>    /**\n     * Creates a new TitleBarScreen object\n     */\n    public TitleBarScreen() {\n        // Initialize and configure title bar\n        final StandardTitleBar titleBar = new StandardTitleBar();\n\n        titleBar.addTitle(\"<title goes here>\");\n\n        final Bitmap bitmap = Bitmap.getBitmapResource(\"logo.jpg\");\n        if (bitmap != null) {\n            titleBar.addIcon(bitmap);\n        }\n\n        titleBar.addClock();\n\n        titleBar.addNotifications();\n\n        titleBar.setPropertyValue(StandardTitleBar.PROPERTY_BATTERY_VISIBILITY,\n                StandardTitleBar.BATTERY_VISIBLE_ALWAYS);\n        titleBar.setPropertyValue(StandardTitleBar.PROPERTY_WIFI_VISIBILITY,\n                StandardTitleBar.PROPERTY_VALUE_ON);\n        titleBar.setPropertyValue(\n                StandardTitleBar.PROPERTY_CELLULAR_VISIBILITY,\n                StandardTitleBar.PROPERTY_VALUE_ON);\n\n        // Set title bar for this screen\n        setTitleBar(titleBar);\n    }\n}<｜fim▁end｜>",
    "response": "import net.rim.device.api.ui.container.MainScreen;\n\npublic final class TitleBarScreen extends MainScreen {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.myrobotlab.arduino.compiler;\n\nimport org.myrobotlab.serial.SerialDeviceException;\n\npublic class SerialNotFoundException extends SerialDeviceException {\n    private static final long serialVersionUID = 1L;\n\n    public SerialNotFoundException() {\n        super();\n    }\n\n    public SerialNotFoundException(String message) {\n        super(message);\n    }\n\n    public SerialNotFoundException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public SerialNotFoundException(Throwable cause) {\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "        super(cause);\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.optaplanner.examples.projectjobscheduling.domain;\n\nimport org.optaplanner.examples.common.domain.AbstractPersistable;\nimport org.optaplanner.examples.projectjobscheduling.domain.resource.Resource;\n\nimport com.thoughtworks.xstream.annotations.XStreamAlias;\n\n@XStreamAlias(\"PjsResourceRequirement\")\npublic class ResourceRequirement extends AbstractPersistable {\n\n    private ExecutionMode executionMode;\n    private Resource resource;\n    private int requirement;\n\n    public ExecutionMode getExecutionMode() {\n        return executionMode;\n    }\n\n    public void setExecutionMode(ExecutionMode executionMode) {\n        this.executionMode = executionMode;\n    }\n\n    public Resource getResource() {\n<｜fim▁hole｜>    public void setResource(Resource resource) {\n        this.resource = resource;\n    }\n\n    public int getRequirement() {\n        return requirement;\n    }\n\n    public void setRequirement(int requirement) {\n        this.requirement = requirement;\n    }\n\n    // ************************************************************************\n    // Complex methods\n    // ************************************************************************\n\n    public boolean isResourceRenewable() {\n        return resource.isRenewable();\n    }\n\n}<｜fim▁end｜>",
    "response": "        return resource;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.percederberg.grammatica.code.visualbasic;\n\nimport java.io.PrintWriter;\nimport java.util.LinkedList;\n\nimport net.percederberg.grammatica.code.CodeElement;\nimport net.percederberg.grammatica.code.CodeStyle;\n\npublic class VisualBasicConstructor extends CodeElement {\n\n    /**\n     * The public access modifier constant.\n     */\n    public static final int PUBLIC = VisualBasicModifier.PUBLIC;\n\n    /**\n     * The protected friend access modifier constant.\n     */\n    public static final int PROTECTED_FRIEND =\n        VisualBasicModifier.PROTECTED_FRIEND;\n\n    /**\n     * The protected access modifier constant.\n     */\n    public static final int PROTECTED = VisualBasicModifier.PROTECTED;\n\n    /**\n     * The friend access modifier constant.\n     */\n    public static final int FRIEND = VisualBasicModifier.FRIEND;\n\n    /**\n     * The private access modifier constant.\n     */\n    public static final int PRIVATE = VisualBasicModifier.PRIVATE;\n\n    /**\n     * The shared modifier constant.\n     */\n    public static final int SHARED = VisualBasicModifier.SHARED;\n\n    /**\n     * The modifier flags.\n     */\n    private int modifiers;\n\n    /**\n     * The class to construct.\n     */\n    private VisualBasicClass cls;\n\n    /**\n     * The argument list.\n     */\n    private String args;\n\n    /**\n     * The implementing code.\n     */\n    private LinkedList code;\n\n    /**\n     * The constructor comment.\n     */\n    private VisualBasicComment comment;\n\n    /**\n     * Creates a new empty constructor.\n     */\n    public VisualBasicConstructor() {\n        this(\"\");\n    }\n\n    /**\n     * Creates a new constructor with the specified arguments.\n     *\n     * @param args           the argument list, excluding parenthesis\n     */\n    public VisualBasicConstructor(String args) {\n        this(PUBLIC, args);\n    }\n\n    /**\n     * Creates a new constructor with the specified arguments.\n     *\n     * @param modifiers      the modifier flags\n     * @param args           the argument list, excluding parenthesis\n     */\n    public VisualBasicConstructor(int modifiers, String args) {\n        this.modifiers = modifiers;\n        this.cls = null;\n        this.args = args;\n        this.code = new LinkedList();\n        this.comment = null;\n    }\n\n    /**\n     * Returns the class for this constructor, or null.\n     *\n     * @return the class for this constructor, or\n     *         null if none has been assigned\n     */\n    public VisualBasicClass getVisualBasicClass() {\n        return this.cls;\n    }\n\n    /**\n     * Sets the class for this constructor.\n     *\n     * @param cls      the class to add the constructor to\n     */\n    void setVisualBasicClass(VisualBasicClass cls) {\n        this.cls = cls;\n    }\n\n    /**\n     * Adds one or more lines of actual code.\n     *\n     * @param codeLines     the lines of Java code to add\n     */\n    public void addCode(String codeLines) {\n        int  pos;\n\n        pos = codeLines.indexOf('\\n');\n        while (pos >= 0) {\n            this.code.add(codeLines.substring(0, pos));\n            codeLines = codeLines.substring(pos + 1);\n            pos = codeLines.indexOf('\\n');\n        }\n        this.code.add(codeLines);\n    }\n\n    /**\n     * Sets a comment for this constructor.\n     *\n     * @param comment       the new constructor comment\n     */\n    public void addComment(VisualBasicComment comment) {\n        this.comment = comment;\n    }\n\n    /**\n     * Returns a numeric category number for the code element. A lower\n     * category number implies that the code element should be placed\n     * before code elements with a higher category number within a\n     * declaration.\n     *\n     * @return the category number\n     */\n    public int category() {\n        return 7;\n    }\n\n    /**\n     * Prints the code element to the specified output stream.\n     *\n     * @param out            the output stream\n     * @param style          the code style to use\n     * @param indent         the indentation level\n     */\n    public void print(PrintWriter out, CodeStyle style, int indent) {\n        String        indentStr = style.getIndent(indent);\n        String        codeIndentStr = style.getIndent(indent + 1);\n        StringBuffer  res = new StringBuffer();\n\n        // Print comment\n        if (comment != null) {\n            comment.print(out, style, indent);\n        }\n\n        // Handle declaration\n        res.append(indentStr);\n        res.append(VisualBasicModifier.createModifierDecl(modifiers));\n        res.append(\"Sub New(\");\n        res.append(args);\n        res.append(\")\");\n\n        // Handle code\n<｜fim▁hole｜>                res.append(\"\\n\");\n            } else {\n                res.append(\"\\n\");\n            }\n        }\n        res.append(indentStr);\n        res.append(\"End Sub\");\n\n        // Print method\n        out.println(res.toString());\n    }\n}<｜fim▁end｜>",
    "response": "        for (int i = 0; i < code.size(); i++) {\n            if (code.get(i).toString().length() > 0) {\n                res.append(codeIndentStr);\n                res.append(code.get(i).toString());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.microsoft.alm.visualstudio.services.gallery.webapi;\n\npublic enum ExtensionVersionFlags {\n\n    /**\n    * No flags exist for this version.\n    */\n<｜fim▁hole｜>    /**\n    * The Validated flag for a version means the extension version has passed validation and can be used..\n    */\n    VALIDATED(1),\n    ;\n\n    private int value;\n\n    private ExtensionVersionFlags(final int value) {\n        this.value = value;\n    }\n\n    public int getValue() {\n        return value;\n    }\n\n    @Override\n    public String toString() {\n        final String name = super.toString();\n\n        if (name.equals(\"NONE\")) { //$NON-NLS-1$\n            return \"none\"; //$NON-NLS-1$\n        }\n\n        if (name.equals(\"VALIDATED\")) { //$NON-NLS-1$\n            return \"validated\"; //$NON-NLS-1$\n        }\n\n        return null;\n    }\n}<｜fim▁end｜>",
    "response": "    NONE(0),\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.devocative.adroit.sql;\n\nimport com.thoughtworks.xstream.XStream;\nimport org.devocative.adroit.sql.plugin.INpsPlugin;\nimport org.devocative.adroit.sql.result.EColumnNameCase;\nimport org.devocative.adroit.sql.result.QueryVO;\nimport org.devocative.adroit.sql.result.ResultSetProcessor;\nimport org.devocative.adroit.xml.AdroitXStream;\n\nimport java.io.InputStream;\nimport java.sql.*;\nimport java.util.*;\nimport java.util.Date;\n\npublic class SqlHelper {\n    private final Connection connection;\n    private boolean ignoreExtraPassedParam = true;\n    private EColumnNameCase nameCase = EColumnNameCase.LOWER;\n    private Class<? extends Date> dateClassReplacement = java.sql.Date.class;\n\n    private Map<String, XQuery> xQueryMap = new HashMap<>();\n\n    // ------------------------------\n\n    public SqlHelper(Connection connection) {\n        this.connection = connection;\n    }\n\n    // ------------------------------\n\n    public SqlHelper setIgnoreExtraPassedParam(boolean ignoreExtraPassedParam) {\n        this.ignoreExtraPassedParam = ignoreExtraPassedParam;\n        return this;\n    }\n\n    public SqlHelper setNameCase(EColumnNameCase nameCase) {\n        this.nameCase = nameCase;\n        return this;\n    }\n\n    public SqlHelper setDateClassReplacement(Class<? extends Date> dateClassReplacement) {\n        this.dateClassReplacement = dateClassReplacement;\n        return this;\n    }\n\n    public SqlHelper addXMLQueryFile(InputStream in) {\n        XStream xStream = new AdroitXStream();\n        xStream.processAnnotations(XQuery.class);\n\n        List<XQuery> xQueries = (List<XQuery>) xStream.fromXML(in);\n        for (XQuery xQuery : xQueries) {\n            xQueryMap.put(xQuery.getName(), xQuery);\n        }\n        return this;\n    }\n\n    // ---------------\n\n    public NamedParameterStatement createNPS(String name) {\n        return createNPS(xQueryMap.get(name));\n    }\n\n    public NamedParameterStatement createNPS(XQuery sql) {\n        return new NamedParameterStatement(connection, sql.getSql())\n            .setIgnoreExtraPassedParam(ignoreExtraPassedParam)\n            .setDateClassReplacement(dateClassReplacement);\n    }\n\n    // ---------------\n\n    public <K, V> Map<K, V> twoCellsAsMap(String name) throws SQLException {\n        return twoCellsAsMap(name, new HashMap<>());\n    }\n\n    public <K, V> Map<K, V> twoCellsAsMap(String name, Map<String, Object> params, INpsPlugin... plugins) throws SQLException {\n        return twoCellsAsMap(xQueryMap.get(name), params, plugins);\n    }\n\n    public <K, V> Map<K, V> twoCellsAsMap(XQuery sql) throws SQLException {\n        return twoCellsAsMap(sql, new HashMap<>());\n    }\n\n    public <K, V> Map<K, V> twoCellsAsMap(XQuery sql, Map<String, Object> params, INpsPlugin... plugins) throws SQLException {\n        NamedParameterStatement nps = createNPS(sql, params, plugins);\n\n        ResultSet rs = nps.executeQuery();\n        ResultSetMetaData metaData = rs.getMetaData();\n        int col1Type = metaData.getColumnType(1);\n        int col2Type = metaData.getColumnType(2);\n\n        Map<K, V> result = new LinkedHashMap<>();\n        while (rs.next()) {\n            K key = (K) ResultSetProcessor.getValue(rs, 1, col1Type);\n            V value = (V) ResultSetProcessor.getValue(rs, 2, col2Type);\n            result.put(key, value);\n        }\n\n        nps.close();\n\n        return result;\n    }\n\n    // -----\n\n    public List<Object> firstRowAsList(String name) throws SQLException {\n        return firstRowAsList(name, new HashMap<>());\n    }\n\n    public List<Object> firstRowAsList(String name, Map<String, Object> params, INpsPlugin... plugins) throws SQLException {\n        return firstRowAsList(xQueryMap.get(name), params, plugins);\n    }\n\n    public List<Object> firstRowAsList(XQuery sql) throws SQLException {\n        return firstRowAsList(sql, new HashMap<>());\n    }\n\n    public List<Object> firstRowAsList(XQuery sql, Map<String, Object> params, INpsPlugin... plugins) throws SQLException {\n        NamedParameterStatement nps = createNPS(sql, params, plugins);\n<｜fim▁hole｜>        if (rs.next()) {\n            for (int i = 1; i <= columnCount; i++) {\n                result.add(rs.getObject(i));\n            }\n        }\n        nps.close();\n        return result;\n    }\n\n    // -----\n\n    public <T> List<T> firstColAsList(String name) throws SQLException {\n        return firstColAsList(name, new HashMap<>());\n    }\n\n    public <T> List<T> firstColAsList(String name, Map<String, Object> params, INpsPlugin... plugins) throws SQLException {\n        return firstColAsList(xQueryMap.get(name), params, plugins);\n    }\n\n    public <T> List<T> firstColAsList(XQuery sql) throws SQLException {\n        return firstColAsList(sql, new HashMap<>());\n    }\n\n    public <T> List<T> firstColAsList(XQuery sql, Map<String, Object> params, INpsPlugin... plugins) throws SQLException {\n        NamedParameterStatement nps = createNPS(sql, params, plugins);\n\n        ResultSet rs = nps.executeQuery();\n        int col1Type = rs.getMetaData().getColumnType(1);\n\n        List<T> result = new ArrayList<>();\n        while (rs.next()) {\n            result.add((T) ResultSetProcessor.getValue(rs, 1, col1Type));\n        }\n        nps.close();\n        return result;\n    }\n\n    // -----\n\n    public Object firstCell(String name) throws SQLException {\n        return firstCell(name, new HashMap<>());\n    }\n\n    public Object firstCell(String name, Map<String, Object> params, INpsPlugin... plugins) throws SQLException {\n        return firstCell(xQueryMap.get(name), params, plugins);\n    }\n\n    public Object firstCell(XQuery sql) throws SQLException {\n        return firstCell(sql, new HashMap<>());\n    }\n\n    public Object firstCell(XQuery sql, Map<String, Object> params, INpsPlugin... plugins) throws SQLException {\n        NamedParameterStatement nps = createNPS(sql, params, plugins);\n\n        ResultSet rs = nps.executeQuery();\n        ResultSetMetaData metaData = rs.getMetaData();\n\n        Object result = null;\n        if (rs.next()) {\n            result = ResultSetProcessor.getValue(rs, 1, metaData.getColumnType(1));\n        }\n\n        nps.close();\n\n        return result;\n    }\n\n    // -----\n\n    public QueryVO selectAll(String name) throws SQLException {\n        return selectAll(name, new HashMap<>());\n    }\n\n    public QueryVO selectAll(String name, Map<String, Object> params, INpsPlugin... plugins) throws SQLException {\n        return selectAll(xQueryMap.get(name), params, plugins);\n    }\n\n    public QueryVO selectAll(XQuery sql) throws SQLException {\n        return selectAll(sql, new HashMap<>());\n    }\n\n    public QueryVO selectAll(XQuery sql, Map<String, Object> params, INpsPlugin... plugins) throws SQLException {\n        NamedParameterStatement nps = createNPS(sql, params, plugins);\n        ResultSet resultSet = nps.executeQuery();\n        QueryVO queryVO = ResultSetProcessor.process(resultSet, nameCase);\n        nps.close();\n        return queryVO;\n    }\n\n    // -----\n\n    public void executeDDL(String name, Map<String, Object> params) throws SQLException {\n        String ddl = xQueryMap.get(name).getSql();\n        for (Map.Entry<String, Object> entry : params.entrySet()) {\n            ddl = ddl.replaceAll(\"[:]\" + entry.getKey(), entry.getValue().toString());\n        }\n\n        Statement st = connection.createStatement();\n        st.executeUpdate(ddl);\n        st.close();\n    }\n\n    // ------------------------------\n\n    private NamedParameterStatement createNPS(XQuery sql, Map<String, Object> params, INpsPlugin... plugins) {\n        NamedParameterStatement nps = createNPS(sql)\n            .setParameters(params);\n\n        if (plugins != null) {\n            for (INpsPlugin plugin : plugins) {\n                if (plugin != null) {\n                    nps.addPlugin(plugin);\n                }\n            }\n        }\n\n        return nps;\n    }\n}<｜fim▁end｜>",
    "response": "\n        ResultSet rs = nps.executeQuery();\n        int columnCount = rs.getMetaData().getColumnCount();\n\n        List<Object> result = new ArrayList<>();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.smartg.swing;\n\nimport javax.swing.AbstractListModel;\n\npublic class FixedListModel<E> extends AbstractListModel<E> {\n\n    private static final long serialVersionUID = -4661854593273156025L;\n<｜fim▁hole｜>    }\n\n    public E getElementAt(int index) {\n        return values[index];\n    }\n\n    public int getSize() {\n        return values.length;\n    }\n}<｜fim▁end｜>",
    "response": "    E[] values;\n\n    public FixedListModel(E[] values) {\n        this.values = values;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>import java.net.URL;\n\nimport javax.annotation.Nullable;\n\nimport com.google.common.base.Objects;\nimport com.google.common.base.Preconditions;\nimport com.google.common.base.Strings;\n\npublic final class ProxyConfig {\n\n    private final String url;\n\n    @Nullable\n    private final String username;\n\n    @Nullable\n    private final String password;\n\n    public ProxyConfig(final String url) {\n        this(url, null, null);\n    }\n\n    public ProxyConfig(final String url, @Nullable final String username,\n            @Nullable final String password) {\n        this.url = url.trim();\n        this.username = username;\n        this.password = password;\n        try {\n            final URL u = new URL(url);\n            final String p = u.getProtocol().toLowerCase();\n            Preconditions.checkArgument(p.equals(\"http\") || p.equals(\"https\"),\n                    \"Not an HTTP(S) URL: \" + url);\n        } catch (final MalformedURLException ex) {\n            throw new IllegalArgumentException(\"Invalid URL: \" + url);\n        }\n    }\n\n    public String getURL() {\n        return this.url;\n    }\n\n    public String getUsername() {\n        return this.username;\n    }\n\n    public String getPassword() {\n        return this.password;\n    }\n\n    @Override\n    public boolean equals(final Object object) {\n        if (object == this) {\n            return true;\n        }\n        if (!(object instanceof ProxyConfig)) {\n            return false;\n        }\n        final ProxyConfig o = (ProxyConfig) object;\n        return this.url.equals(o.url) && Objects.equal(this.username, o.username)\n                && Objects.equal(this.password, o.password);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hashCode(this.url, this.username, this.password);\n    }\n\n    @Override\n    public String toString() {\n        if (this.username == null && this.password == null) {\n            return this.url;\n        }\n        final String info = Strings.nullToEmpty(this.username) + \":\"\n                + Strings.nullToEmpty(this.password);\n        return this.url.replaceFirst(\"://\", info);\n    }\n\n}<｜fim▁end｜>",
    "response": "package eu.fbk.knowledgestore.client;\n\nimport java.net.MalformedURLException;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ar.gov.rosario.siat.gde.buss.bean;\n\nimport java.util.List;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.Table;\n\nimport ar.gov.rosario.siat.gde.buss.dao.GdeDAOFactory;\nimport coop.tecso.demoda.buss.bean.BaseBO;\nimport coop.tecso.demoda.iface.model.Estado;\n\n@Entity\n@Table(name = \"gde_tipDecJur\")\npublic class TipDecJur extends BaseBO {\n\n    private static final long serialVersionUID = 1L;\n    public static final long ID_ORIGINAL=1L;\n    public static final long ID_RECTIFICATIVA=2L;\n\n    @Column(name = \"desTipo\")\n    private String desTipo;\n\n    @Column(name = \"abreviatura\")\n    private String abreviatura;\n\n    //<#Propiedades#>\n\n    // Constructores\n    public TipDecJur(){\n        super();\n        // Seteo de valores default \n        // propiedad_ejemplo = valorDefault;\n    }\n\n    // Metodos de Clase\n    public static TipDecJur getById(Long id) {\n        return (TipDecJur) GdeDAOFactory.getTipDecJurDAO().getById(id);\n    }\n\n    public static TipDecJur getByIdNull(Long id) {\n        return (TipDecJur) GdeDAOFactory.getTipDecJurDAO().getByIdNull(id);\n    }\n\n    public static List<TipDecJur> getList() {\n        return (List<TipDecJur>) GdeDAOFactory.getTipDecJurDAO().getList();\n    }\n\n    public static List<TipDecJur> getListActivos() {            \n        return (List<TipDecJur>) GdeDAOFactory.getTipDecJurDAO().getListActiva();\n    }\n\n    // Getters y setters\n    public String getDesTipo() {\n        return desTipo;\n    }\n\n    public void setDesTipo(String desTipo) {\n        this.desTipo = desTipo;\n    }\n\n    public String getAbreviatura() {\n        return abreviatura;\n    }\n\n    public void setAbreviatura(String abreviatura) {\n        this.abreviatura = abreviatura;\n    }\n\n    // Validaciones \n    public boolean validateCreate() throws Exception {\n        // limpiamos la lista de errores\n        clearError();\n\n        if (!this.validate()) {\n            return false;\n        }\n\n        // Validaciones de Negocio\n\n        return true;\n    }\n\n    public boolean validateUpdate() throws Exception {\n        // limpiamos la lista de errores\n        clearError();\n\n        if (!this.validate()) {\n            return false;\n        }\n\n        // Validaciones de Negocio\n\n        return true;        \n    }\n\n    public boolean validateDelete() {\n        //limpiamos la lista de errores\n        clearError();\n\n        //<#ValidateDelete#>\n\n        if (hasError()) {\n            return false;\n        }\n\n        return true;\n    }\n\n    private boolean validate() throws Exception {\n\n        //  Validaciones        \n\n        return true;\n    }\n\n    // Metodos de negocio\n\n    /**\n     * Activa el TipoDeudaPlan. Previamente valida la activacion. \n     *\n     */\n    public void activar(){\n        if(!this.validateActivar()){\n            return;\n        }\n        this.setEstado(Estado.ACTIVO.getId());\n        GdeDAOFactory.getTipDecJurDAO().update(this);\n    }\n\n    /**\n     * Desactiva el TipoDeudaPlan. Previamente valida la desactivacion. \n     *\n     */\n<｜fim▁hole｜>    }\n\n    /**\n     * Valida la activacion del TipoDeudaPlan\n     * @return boolean\n     */\n    private boolean validateActivar(){\n        //limpiamos la lista de errores\n        clearError();\n\n        //Validaciones \n        return true;\n    }\n\n    /**\n     * Valida la desactivacion del TipoDeudaPlan\n     * @return boolean\n     */\n    private boolean validateDesactivar(){\n        //limpiamos la lista de errores\n        clearError();\n\n        //Validaciones \n        return true;\n    }\n\n    //<#MetodosBeanDetalle#>\n}<｜fim▁end｜>",
    "response": "    public void desactivar(){\n        if(!this.validateDesactivar()){\n            return;\n        }\n        this.setEstado(Estado.INACTIVO.getId());\n        GdeDAOFactory.getTipDecJurDAO().update(this);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.futurice.sankogame;\n\nimport com.badlogic.gdx.Gdx;\nimport com.badlogic.gdx.graphics.Texture;\nimport com.badlogic.gdx.graphics.g2d.SpriteBatch;\nimport com.badlogic.gdx.math.Rectangle;\n\npublic class Bullet {\n    static private final String TEXTURE_PATH = \"images/Bullet.png\";\n\n    private Texture texture;\n    private Rectangle boundingBox;\n    public double x;\n    public double y;\n    private double vx;\n    private double vy;\n    private float screenWidth = 1000000f;\n\n    public boolean canDestroy;\n<｜fim▁hole｜>        boundingBox = new Rectangle();\n        x = initialX;\n        y = initialY;\n        vy = -GamePlayParams.BULLET_SPEED;\n        updateBoundingBox();\n    }\n\n    public void redraw(final SpriteBatch batch) {\n        x += vx;\n        y += vy;\n        updateBoundingBox();\n        draw(batch);\n    }\n\n    public Rectangle getBoundingBox() {\n        return boundingBox;\n    }\n\n    private void updateBoundingBox() {\n        boundingBox.set(\n            (float) x - texture.getWidth()*0.5f,\n            (float) y - texture.getHeight()*0.5f,\n            texture.getWidth(),\n            texture.getHeight()\n        );\n    }\n\n    private void draw(final SpriteBatch batch) {\n        batch.draw(\n            texture,\n            (float) x - texture.getWidth()*0.5f,\n            (float) y - texture.getHeight()*0.5f\n        );\n    }\n}<｜fim▁end｜>",
    "response": "\n    public Bullet(final double initialX, final double initialY) {\n        canDestroy = false;\n        texture = new Texture(Gdx.files.internal(TEXTURE_PATH));\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>\nimport com.roskart.dropwizard.jaxws.example.core.User;\nimport io.dropwizard.auth.Authenticator;\nimport io.dropwizard.auth.basic.BasicCredentials;\n\nimport java.util.Optional;\n\npublic class BasicAuthenticator implements Authenticator<BasicCredentials, User> {\n    @Override\n    public Optional<User> authenticate(BasicCredentials credentials) {\n        if (\"secret\".equals(credentials.getPassword())) {\n            return Optional.of(new User(credentials.getUsername()));\n        }\n        // Note that Authenticator should only throw an AuthenticationException\n        // if it is unable to check the credentials.\n        return Optional.empty();\n    }\n}<｜fim▁end｜>",
    "response": "package com.roskart.dropwizard.jaxws.example.auth;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.sf.jasperreports.data.bean;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Collection;\nimport java.util.Map;\n\nimport net.sf.jasperreports.data.AbstractClasspathAwareDataAdapterService;\nimport net.sf.jasperreports.engine.DefaultJasperReportsContext;\nimport net.sf.jasperreports.engine.JRException;\nimport net.sf.jasperreports.engine.JRParameter;\nimport net.sf.jasperreports.engine.JasperReportsContext;\nimport net.sf.jasperreports.engine.data.JRAbstractBeanDataSource;\nimport net.sf.jasperreports.engine.data.JRBeanArrayDataSource;\nimport net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;\nimport net.sf.jasperreports.engine.util.JRClassLoader;\n\npublic class BeanDataAdapterService extends AbstractClasspathAwareDataAdapterService \n{\n\n    /**\n     * \n     */\n    public BeanDataAdapterService(JasperReportsContext jasperReportsContext, BeanDataAdapter beanDataAdapter) \n    {\n        super(jasperReportsContext, beanDataAdapter);\n    }\n\n    /**\n     * @deprecated Replaced by {@link #BeanDataAdapterService(JasperReportsContext, BeanDataAdapter)}.\n     */\n<｜fim▁hole｜>    }\n\n    public BeanDataAdapter getBeanDataAdapter() {\n        return (BeanDataAdapter) getDataAdapter();\n    }\n\n    @Override\n    public void contributeParameters(Map<String, Object> parameters) throws JRException \n    {\n        BeanDataAdapter beanDataAdapter = getBeanDataAdapter();\n        if (beanDataAdapter != null)\n        {\n            JRAbstractBeanDataSource beanDataSource = null;\n\n            ClassLoader oldThreadClassLoader = Thread.currentThread().getContextClassLoader();\n\n            try \n            {\n                Thread.currentThread().setContextClassLoader(getClassLoader(oldThreadClassLoader));\n\n                Class<?> clazz = JRClassLoader.loadClassForRealName(beanDataAdapter.getFactoryClass());\n                Method method = clazz.getMethod(beanDataAdapter.getMethodName());\n                Object res = method.invoke(null);\n                if (res instanceof Collection) {\n                    beanDataSource = new JRBeanCollectionDataSource(\n                            (Collection<?>) res,\n                            beanDataAdapter.isUseFieldDescription());\n                } else if (res instanceof Object[]) {\n                    beanDataSource = new JRBeanArrayDataSource((Object[]) res,\n                            beanDataAdapter.isUseFieldDescription());\n                } else {\n                    throw new JRException(\n                            \"Factory method must return Collection<?> or Object[] not: \"\n                                    + clazz.getName());\n                }\n            }\n            catch (ClassNotFoundException e) {\n                throw new JRException(e);\n            } catch (IllegalAccessException e) {\n                throw new JRException(e);\n            } catch (SecurityException e) {\n                throw new JRException(e);\n            } catch (NoSuchMethodException e) {\n                throw new JRException(e);\n            } catch (IllegalArgumentException e) {\n                throw new JRException(e);\n            } catch (InvocationTargetException e) {\n                throw new JRException(e);\n            }\n            finally\n            {\n                Thread.currentThread().setContextClassLoader(oldThreadClassLoader);\n            }\n\n            parameters.put(JRParameter.REPORT_DATA_SOURCE, beanDataSource);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    public BeanDataAdapterService(BeanDataAdapter beanDataAdapter) \n    {\n        this(DefaultJasperReportsContext.getInstance(), beanDataAdapter);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jpmml.model.annotations;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\nimport java.util.Collection;\n\n@Retention (\n    value = RetentionPolicy.RUNTIME\n)\n@Target (\n    value = {ElementType.FIELD}\n)\npublic @interface CollectionSize {\n\n    String value();\n\n    Operator operator() default Operator.EQUAL;\n\n    static\n    public enum Operator {\n        EQUAL(){\n\n            @Override\n<｜fim▁hole｜>        GREATER_OR_EQUAL(){\n\n            @Override\n            public boolean check(int size, Collection<?> collection){\n                return size >= collection.size();\n            }\n        }\n        ;\n\n        abstract\n        public boolean check(int size, Collection<?> collection);\n    }\n}<｜fim▁end｜>",
    "response": "            public boolean check(int size, Collection<?> collection){\n                return size == collection.size();\n            }\n        },\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.espertech.esper.epl.spec;\n\nimport com.espertech.esper.util.MetaDefItem;\n\nimport java.util.List;\nimport java.util.LinkedList;\nimport java.io.Serializable;\n\npublic class InsertIntoDesc implements MetaDefItem, Serializable\n{\n    private final SelectClauseStreamSelectorEnum streamSelector;\n    private final String eventTypeName;\n    private List<String> columnNames;\n    private static final long serialVersionUID = 6204369134039715720L;\n\n    /**\n     * Ctor.\n     * @param streamSelector selects insert, remove or insert+remove stream\n     * @param eventTypeName is the event type name\n     */\n    public InsertIntoDesc(SelectClauseStreamSelectorEnum streamSelector, String eventTypeName)\n    {\n        this.streamSelector = streamSelector;\n        this.eventTypeName = eventTypeName;\n        columnNames = new LinkedList<String>();\n    }\n\n    /**\n     * Returns the stream(s) selected for inserting into.\n     * @return stream selector\n     */\n    public SelectClauseStreamSelectorEnum getStreamSelector() {\n        return streamSelector;\n    }\n\n    /**\n     * Returns name of event type to use for insert-into stream.\n     * @return event type name\n     */\n<｜fim▁hole｜>\n    /**\n     * Returns a list of column names specified optionally in the insert-into clause, or empty if none specified.\n     * @return column names or empty list if none supplied\n     */\n    public List<String> getColumnNames()\n    {\n        return columnNames;\n    }\n\n    /**\n     * Add a column name to the insert-into clause.\n     * @param columnName to add\n     */\n    public void add(String columnName)\n    {\n        columnNames.add(columnName);\n    }\n}<｜fim▁end｜>",
    "response": "    public String getEventTypeName()\n    {\n        return eventTypeName;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package jermit.tests.ymodem;\n\nimport java.io.File;\nimport java.io.IOException;\n\nimport jermit.protocol.ymodem.YmodemReceiver;\nimport jermit.protocol.ymodem.YmodemSession;\nimport jermit.tests.SerialTransferTest;\nimport jermit.tests.TestFailedException;\n\npublic class Ymodem1 extends SerialTransferTest {\n\n    /**\n     * Public constructor.\n     */\n    public Ymodem1() {\n    }\n\n    /**\n     * Run the test.\n     */\n    @Override\n    public void doTest() throws IOException, TestFailedException {\n        System.out.printf(\"Ymodem1: one binary file download - VANILLA\\n\");\n\n        // Process:\n        //\n        //   1. Extract jermit/tests/data/lady-of-shalott.jpg to\n        //      a temp file.\n        //   2. Spawn 'sb /path/to/lady-of-shalott.jpg'\n        //   3. Spin up YmodemReceiver to download to a temp directory.\n        //   4. Read both files and compare contents.\n\n        File source = File.createTempFile(\"send-ymodem\", \".jpg\");\n        saveResourceToFile(\"jermit/tests/data/lady-of-shalott.jpg\", source);\n        source.deleteOnExit();\n\n        // Create a directory\n        File destinationDirName = File.createTempFile(\"receive-ymodem\", \"\");\n        String destinationPath = destinationDirName.getPath();\n        destinationDirName.delete();\n        File destinationDir = new File(destinationPath);\n        destinationDir.mkdir();\n        destinationDir.deleteOnExit();\n        File destination = new File(destinationPath, source.getName());\n        destination.deleteOnExit();\n\n        ProcessBuilder syb = new ProcessBuilder(\"sb\", source.getPath());\n        Process sy = syb.start();\n\n        YmodemReceiver ry = new YmodemReceiver(YmodemSession.YFlavor.VANILLA,\n            sy.getInputStream(), sy.getOutputStream(), destinationPath, false);\n\n        ry.run();\n        if (!compareFiles(source, destination)) {\n            throw new TestFailedException(\"Files are not the same\");\n        }\n\n    }\n\n    /**\n     * Main entry point.\n     *\n     * @param args Command line arguments\n     */\n    public static void main(final String [] args) {\n        try {\n            Ymodem1 test = new Ymodem1();\n<｜fim▁hole｜>            t.printStackTrace();\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "            test.doTest();\n        } catch (Throwable t) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.pentaho.reporting.engine.classic.core.layout.process.util;\n\nimport org.pentaho.reporting.engine.classic.core.layout.model.LayoutNodeTypes;\nimport org.pentaho.reporting.engine.classic.core.layout.model.RenderBox;\nimport org.pentaho.reporting.engine.classic.core.layout.model.RenderNode;\n\npublic final class CacheBoxShifter {\n  private CacheBoxShifter() {\n  }\n\n  public static void shiftBox( final RenderNode box, final long amount ) {\n    if ( amount == 0 ) {\n      return;\n    }\n    if ( amount < 0 ) {\n      throw new IllegalArgumentException( \"Cannot shift upwards: \" + amount );\n    }\n\n    box.shiftCached( amount );\n    if ( ( box.getNodeType() & LayoutNodeTypes.MASK_BOX ) == LayoutNodeTypes.MASK_BOX ) {\n      CacheBoxShifter.shiftBoxInternal( (RenderBox) box, amount );\n    }\n  }\n\n  public static void shiftBoxUnchecked( final RenderNode box, final long amount ) {\n    if ( amount == 0 ) {\n      return;\n    }\n\n    box.shiftCached( amount );\n    if ( ( box.getNodeType() & LayoutNodeTypes.MASK_BOX ) == LayoutNodeTypes.MASK_BOX ) {\n      CacheBoxShifter.shiftBoxInternal( (RenderBox) box, amount );\n    }\n  }\n\n  public static void shiftBoxChilds( final RenderBox box, final long amount ) {\n    if ( amount == 0 ) {\n      return;\n    }\n    CacheBoxShifter.shiftBoxInternal( box, amount );\n  }\n\n  private static void shiftBoxInternal( final RenderBox box, final long amount ) {\n    RenderNode node = box.getFirstChild();\n    while ( node != null ) {\n      node.shiftCached( amount );\n      if ( ( node.getNodeType() & LayoutNodeTypes.MASK_BOX ) == LayoutNodeTypes.MASK_BOX ) {\n        CacheBoxShifter.shiftBoxInternal( (RenderBox) node, amount );\n      }\n<｜fim▁hole｜>    }\n  }\n\n  public static void extendHeight( final RenderNode node, final long amount ) {\n    if ( amount < 0 ) {\n      throw new IllegalArgumentException( \"Cannot shrink elements.\" );\n    }\n    if ( node == null || amount == 0 ) {\n      return;\n    }\n\n    node.setCachedHeight( node.getCachedHeight() + amount );\n\n    RenderBox parent = node.getParent();\n    while ( parent != null ) {\n      parent.setCachedHeight( parent.getCachedHeight() + amount );\n      parent = parent.getParent();\n    }\n  }\n}<｜fim▁end｜>",
    "response": "      node = node.getNext();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.jetbrains.python.packaging;\n\nimport com.intellij.execution.ExecutionException;\nimport com.intellij.openapi.module.Module;\nimport com.intellij.openapi.projectRoots.Sdk;\nimport com.intellij.openapi.util.Key;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport java.util.List;\nimport java.util.Set;\n\npublic abstract class PyPackageManager {\n  public static final Key<Boolean> RUNNING_PACKAGING_TASKS = Key.create(\"PyPackageRequirementsInspection.RunningPackagingTasks\");\n\n  public static final String SETUPTOOLS = \"setuptools\";\n  public static final String PIP = \"pip\";\n  public static final String DISTRIBUTE = \"distribute\";\n\n  public static final String USE_USER_SITE = \"--user\";\n\n  public static PyPackageManager getInstance(Sdk sdk) {\n    return PyPackageManagers.getInstance().forSdk(sdk);\n  }\n\n  public abstract void installManagement() throws ExecutionException;\n\n  public abstract boolean hasManagement(boolean cachedOnly) throws ExecutionException;\n\n  public abstract void install(@NotNull String requirementString) throws ExecutionException;\n\n  public abstract void install(@NotNull List<PyRequirement> requirements, @NotNull List<String> extraArgs) throws ExecutionException;\n\n  public abstract void uninstall(@NotNull List<PyPackage> packages) throws ExecutionException;\n\n  public abstract void refresh();\n\n  @NotNull\n  public abstract String createVirtualEnv(@NotNull String destinationDir, boolean useGlobalSite) throws ExecutionException;\n\n  @Nullable\n  public abstract List<PyPackage> getPackages(boolean cachedOnly) throws ExecutionException;\n\n  /**\n   * @param cachedOnly only search through cached packages. Cache may be empty just after project opened.\n<｜fim▁hole｜>   *                   in local\n   */\n  @Nullable\n  public abstract PyPackage findPackage(@NotNull String name, boolean cachedOnly) throws ExecutionException;\n\n  /**\n   * Like {@link #findPackage(String, boolean)} but controls cache access based on intepreter remote/local type\n   */\n  @Nullable\n  public abstract PyPackage findPackage(@NotNull String name) throws ExecutionException;\n\n  @Nullable\n  public abstract List<PyRequirement> getRequirements(@NotNull Module module);\n\n  @Nullable\n  public abstract Set<PyPackage> getDependents(@NotNull PyPackage pkg) throws ExecutionException;\n}<｜fim▁end｜>",
    "response": "   *                   <strong>warning</strong>: non-cache access may be slow on remote interpreters.\n   *                   Use {@link #findPackage(String)}: this method uses cache on remote interpreters and skips\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package de.budgetfreak.budgeting.domain;\n\nimport de.budgetfreak.accounting.domain.Account;\nimport de.budgetfreak.accounting.domain.AccountRepository;\nimport de.budgetfreak.usermanagement.domain.User;\nimport de.budgetfreak.usermanagement.domain.UserRepository;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.domain.EntityScan;\nimport org.springframework.boot.jdbc.EmbeddedDatabaseConnection;\nimport org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\nimport org.springframework.data.jpa.repository.config.EnableJpaRepositories;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.math.BigDecimal;\nimport java.util.Date;\nimport java.util.Optional;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\n@RunWith(SpringRunner.class)\n@DataJpaTest\n@AutoConfigureTestDatabase(connection = EmbeddedDatabaseConnection.H2)\n@EntityScan(\"de.budgetfreak\")\n@EnableJpaRepositories(\"de.budgetfreak\")\npublic class TransactionRepositoryTest {\n\n    @Autowired\n    private TransactionRepository testSubject;\n\n    @Autowired\n    private CategoryRepository categoryRepository;\n\n    @Autowired\n    private UserRepository userRepository;\n\n    @Autowired\n    private MasterCategoryRepository masterCategoryRepository;\n\n    @Autowired\n    private PayeeRepository payeeRepository;\n\n    @Autowired\n    private AccountRepository accountRepository;\n\n    @Test\n    public void shouldSaveNewMaterCategories() {\n        User user = userRepository.save(new User().setName(\"Bob\").setCurrency(\"€\"));\n        MasterCategory masterCategory = masterCategoryRepository.save(new MasterCategory().setName(\"mastercategory\").setUser(user));\n        Category category = categoryRepository.save(new Category().setName(\"category\").setMasterCategory(masterCategory));\n        Payee payee = payeeRepository.save(new Payee().setName(\"payee\").setUser(user));\n        Account account = accountRepository.save(new Account().setUser(user).setOnBudget(true).setDescription(\"account\"));\n        Date bookingDate = new Date();\n\n        Transaction transaction = new Transaction()\n                .setAmount(new BigDecimal(\"1337.42\"))\n                .setBookingDate(bookingDate)\n                .setDescription(\"description\")\n                .setCleared(true)\n                .setPayee(payee)\n                .setCategory(category)\n                .setAccount(account);\n        Long id = testSubject.save(transaction).getId();\n\n<｜fim▁hole｜>        Transaction savedTransaction = savedTransactionOptional.get();\n        assertThat(savedTransaction.getAmount()).isEqualTo(new BigDecimal(\"1337.42\"));\n        assertThat(savedTransaction.getBookingDate()).isEqualTo(bookingDate);\n        assertThat(savedTransaction.getDescription()).isEqualTo(\"description\");\n        assertThat(savedTransaction.isCleared()).isEqualTo(true);\n        assertThat(savedTransaction.getPayee().getId()).isEqualTo(payee.getId());\n        assertThat(savedTransaction.getCategory().getId()).isEqualTo(category.getId());\n        assertThat(savedTransaction.getAccount().getId()).isEqualTo(account.getId());\n    }\n}<｜fim▁end｜>",
    "response": "        Optional<Transaction> savedTransactionOptional = testSubject.findById(id);\n        assertThat(savedTransactionOptional).isPresent();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.etherous.emerge.config;\n\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\nimport net.etherous.emerge.Feature;\nimport net.etherous.emerge.Game;\nimport net.etherous.emerge.service.ServiceProvider;\n\n@ServiceProvider (ConfigNodeFactory.class)\npublic class FeatureNodeFactory implements ConfigNodeFactory<Feature,Game>\n{\n    static Map<String,Object> defaults = new HashMap<> ();\n\n    @Override\n    public String getName ()\n    {\n        return \"feature\";\n    }\n    @Override\n    public Map<String,Object> getDefaults ()\n    {\n        return FeatureNodeFactory.defaults;\n<｜fim▁hole｜>    {\n        return Feature.class;\n    }\n    @Override\n    public Iterable<Class<? extends ConfigNode>> getParentNodeClasses ()\n    {\n        return Arrays.asList (new Class[] {RootNode.class, GameNode.class});\n    }\n    @Override\n    public ConfigNode<Feature,Game> createNode (final ConfigNode<Game,?> parent)\n    {\n        return new FeatureNode (this, parent, this.getName ());\n    }\n    @Override\n    public ConfigNode<Feature,Game> createNode (final ConfigNode<Game,?> parent, final String value)\n    {\n        return new FeatureNode (this, parent, this.getName (), value);\n    }\n}<｜fim▁end｜>",
    "response": "    }\n    @Override\n    public Class<Feature> getModelClass ()\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.jorphan;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.apache.jmeter.config.gui.ArgumentsPanel;\nimport org.apache.jmeter.junit.JMeterTestCase;\nimport org.apache.jmeter.protocol.http.gui.HTTPArgumentsPanel;\nimport org.apache.jmeter.protocol.ldap.config.gui.LDAPArgumentsPanel;\nimport org.apache.jmeter.visualizers.StatGraphVisualizer;\nimport org.apache.jmeter.visualizers.StatVisualizer;\nimport org.apache.jmeter.visualizers.SummaryReport;\nimport org.apache.jmeter.visualizers.TableVisualizer;\nimport org.junit.jupiter.api.Test;\n\npublic class TestFunctorUsers extends JMeterTestCase {\n\n    @Test\n    @SuppressWarnings(\"deprecation\")\n    public void testSummaryReport() throws Exception {\n        assertTrue(\"SummaryReport Functor\", SummaryReport.testFunctors());\n    }\n\n    @Test\n    public void testTableVisualizer() throws Exception {\n        assertTrue(\"TableVisualizer Functor\", TableVisualizer.testFunctors());\n    }\n\n    @Test\n    public void testStatGraphVisualizer() throws Exception {\n        assertTrue(\"StatGraphVisualizer Functor\", StatGraphVisualizer.testFunctors());\n    }\n\n    @Test\n    @SuppressWarnings(\"deprecation\")\n    public void testStatVisualizer() throws Exception {\n<｜fim▁hole｜>    }\n\n    @Test\n    public void testArgumentsPanel() throws Exception {\n        assertTrue(\"ArgumentsPanel Functor\", ArgumentsPanel.testFunctors());\n    }\n\n    @Test\n    public void testHTTPArgumentsPanel() throws Exception {\n        assertTrue(\"HTTPArgumentsPanel Functor\", HTTPArgumentsPanel.testFunctors());\n    }\n\n    @Test\n    public void testLDAPArgumentsPanel() throws Exception {\n        assertTrue(\"LDAPArgumentsPanel Functor\", LDAPArgumentsPanel.testFunctors());\n    }\n}<｜fim▁end｜>",
    "response": "        assertTrue(\"StatVisualizer Functor\", StatVisualizer.testFunctors());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package anubis;\n\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport javax.script.Bindings;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptEngineFactory;\nimport javax.script.SimpleBindings;\nimport anubis.parser.ParserHelper;\n\npublic class AnubisEngineFactory implements ScriptEngineFactory {\n    private Bindings global = new SimpleBindings();\n\n    public AnubisEngineFactory() {\n        global.put(ScriptEngine.ENGINE, getEngineName());\n        global.put(ScriptEngine.ENGINE_VERSION, getEngineVersion());\n        global.put(ScriptEngine.NAME, getEngineName());\n        global.put(ScriptEngine.LANGUAGE, getLanguageName());\n        global.put(ScriptEngine.LANGUAGE_VERSION, getLanguageVersion());\n        global.put(\"THREADING\", \"MULTITHREADED\");\n    }\n\n    @Override\n    public String getEngineName() {\n        return \"anubis\";\n    }\n\n    @Override\n    public String getEngineVersion() {\n        String version = getClass().getPackage().getImplementationVersion();\n        return version != null ? version : \"0.0\";\n    }\n\n    @Override\n    public List<String> getExtensions() {\n        return constList(\"anubis\", \"an\");\n    }\n\n    public Bindings getGlobalBindings() {\n        return global;\n    }\n\n    @Override\n    public String getLanguageName() {\n        return \"anubis\";\n    }\n\n    @Override\n    public String getLanguageVersion() {\n        return getEngineVersion();\n    }\n\n    @Override\n    public String getMethodCallSyntax(String obj, String name, String... args) {\n        StringBuilder result = new StringBuilder();\n        result.append(ParserHelper.quoteIdentifier(obj));\n        result.append(\".\");\n        result.append(ParserHelper.quoteIdentifier(name));\n        result.append(\"(\");\n        for (int i = 0; i < args.length; i++) {\n            if (i != 0)\n                result.append(\", \");\n            result.append(ParserHelper.quoteIdentifier(args[i]));\n        }\n        result.append(\")\");\n        return result.toString();\n    }\n\n    @Override\n    public List<String> getMimeTypes() {\n        return constList(\"application/x-anubis\");\n    }\n\n    @Override\n    public List<String> getNames() {\n        return constList(\"anubis\", \"Anubis\", \"AnubisLanguage\", \"AnubisScript\");\n    }\n\n    @Override\n    public String getOutputStatement(String text) {\n        return \"console.puts(\" + ParserHelper.quoteString(text) + \")\";\n    }\n\n    @Override\n    public Object getParameter(String key) {\n        return global.get(key);\n    }\n\n    @Override\n    public String getProgram(String... stats) {\n        StringBuilder result = new StringBuilder();\n        if (stats != null) {\n            for (String stat: stats) {\n                result.append(stat);\n                result.append(\"; \");\n            }\n        }\n        return result.toString();\n    }\n\n    @Override\n    public ScriptEngine getScriptEngine() {\n<｜fim▁hole｜>\n    private static <T> List<T> constList(T... args) {\n        return Collections.unmodifiableList(Arrays.asList(args));\n    }\n\n}<｜fim▁end｜>",
    "response": "        return new AnubisEngine(this);\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.flume.sink.hdfs;\n\nimport java.util.Collections;\nimport org.apache.flume.Context;\nimport org.apache.flume.Event;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.io.LongWritable;\n\npublic class HDFSTextSerializer implements SequenceFileSerializer {\n\n<｜fim▁hole｜>    textObject.set(e.getBody(), 0, e.getBody().length);\n    return textObject;\n  }\n\n  @Override\n  public Class<LongWritable> getKeyClass() {\n    return LongWritable.class;\n  }\n\n  @Override\n  public Class<Text> getValueClass() {\n    return Text.class;\n  }\n\n  @Override\n  public Iterable<Record> serialize(Event e) {\n    Object key = getKey(e);\n    Object value = getValue(e);\n    return Collections.singletonList(new Record(key, value));\n  }\n\n  private Object getKey(Event e) {\n    // Write the data to HDFS\n    String timestamp = e.getHeaders().get(\"timestamp\");\n    long eventStamp;\n\n    if (timestamp == null) {\n      eventStamp = System.currentTimeMillis();\n    } else {\n      eventStamp = Long.valueOf(timestamp);\n    }\n    return new LongWritable(eventStamp);\n  }\n\n  private Object getValue(Event e) {\n    return makeText(e);\n  }\n\n  public static class Builder implements SequenceFileSerializer.Builder {\n\n    @Override\n    public SequenceFileSerializer build(Context context) {\n      return new HDFSTextSerializer();\n    }\n\n  }\n\n}<｜fim▁end｜>",
    "response": "  private Text makeText(Event e) {\n    Text textObject = new Text();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package apple.foundation.struct;\n\nimport org.moe.natj.c.StructObject;\nimport org.moe.natj.c.ann.Structure;\nimport org.moe.natj.c.ann.StructureField;\nimport org.moe.natj.general.NatJ;\nimport org.moe.natj.general.Pointer;\nimport org.moe.natj.general.ann.Generated;\n\n@Generated\n@Structure()\npublic final class NSSwappedFloat extends StructObject {\n    private static long __natjCache;\n\n    static {\n        NatJ.register();\n    }\n<｜fim▁hole｜>    public NSSwappedFloat() {\n        super(NSSwappedFloat.class);\n    }\n\n    @Generated\n    protected NSSwappedFloat(Pointer peer) {\n        super(peer);\n    }\n\n    @Generated\n    public NSSwappedFloat(int v) {\n        super(NSSwappedFloat.class);\n        setV(v);\n    }\n\n    @Generated\n    @StructureField(order = 0, isGetter = true)\n    public native int v();\n\n    @Generated\n    @StructureField(order = 0, isGetter = false)\n    public native void setV(int value);\n}<｜fim▁end｜>",
    "response": "\n    @Generated\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package mx.infotec.dads.kukulkan.web;\n\nimport java.util.List;\n\nimport org.springframework.http.MediaType;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport mx.infotec.dads.kukulkan.engine.domain.core.Valor;\n\n@RestController\n@RequestMapping(value = \"/valores\")\npublic class CrudTemplateController {\n\n    /**\n     * GET /valores\n     * \n<｜fim▁hole｜>        return Valor.getDefault();\n    }\n\n}<｜fim▁end｜>",
    "response": "     * @return List<Valores> valores\n     * @throws Exception\n     */\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List<Valor> getDataContext() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package de.tudarmstadt.informatik.tk.assistanceplatform.services.clientaction;\n\nimport de.tudarmstadt.informatik.tk.assistanceplatform.services.action.rest.VisibleNotification;\nimport play.libs.F.Promise;\n\npublic abstract class AbstractClientActionSender {\n    /**\n<｜fim▁hole｜>     * platform.\n     *\n     * @param receiverIds The receiverIDs are the platform specific receiver tokens.\n     * @param data        The data to be sent\n     * @return\n     */\n    public abstract Promise<Boolean> platformSpecificSend(String[] receiverIds,\n                                                          VisibleNotification notification, String data);\n}<｜fim▁end｜>",
    "response": "     * Implement this to do the actual sending which is specific to the used\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.eagle.jpm.mr.runningentity;\n\nimport org.apache.eagle.jpm.util.Constants;\nimport org.apache.eagle.jpm.util.jobcounter.JobCounters;\nimport org.apache.eagle.log.base.taggedlog.TaggedLogAPIEntity;\nimport org.apache.eagle.log.entity.meta.*;\nimport com.fasterxml.jackson.databind.annotation.JsonSerialize;\n\n@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)\n@Table(\"eagleMRRunningTasks\")\n@ColumnFamily(\"f\")\n@Prefix(\"tasks_exec\")\n@Service(Constants.MR_RUNNING_TASK_EXECUTION_SERVICE_NAME)\n@TimeSeries(true)\n@Partition({\"site\"})\n@Indexes({\n        @Index(name = \"Index_1_jobId\", columns = { \"jobId\" }, unique = false)\n    })\n@Tags({\"site\", \"jobId\", \"JobName\", \"jobDefId\", \"jobType\", \"taskType\", \"taskId\", \"user\", \"queue\", \"hostname\"})\npublic class TaskExecutionAPIEntity extends TaggedLogAPIEntity {\n    @Column(\"a\")\n    private long startTime;\n    @Column(\"b\")\n    private long endTime;\n    @Column(\"c\")\n    private long duration;\n    @Column(\"d\")\n    private double progress;\n    @Column(\"e\")\n    private String taskStatus;\n    @Column(\"f\")\n    private String successfulAttempt;\n    @Column(\"g\")\n    private String statusDesc;\n    @Column(\"h\")\n    private JobCounters jobCounters;\n\n    public long getStartTime() {\n        return startTime;\n    }\n\n    public void setStartTime(long startTime) {\n        this.startTime = startTime;\n        valueChanged(\"startTime\");\n    }\n\n    public long getEndTime() {\n        return endTime;\n    }\n\n    public void setEndTime(long endTime) {\n        this.endTime = endTime;\n        valueChanged(\"endTime\");\n    }\n\n<｜fim▁hole｜>    }\n\n    public void setDuration(long duration) {\n        this.duration = duration;\n        valueChanged(\"duration\");\n    }\n\n    public double getProgress() {\n        return progress;\n    }\n\n    public void setProgress(double progress) {\n        this.progress = progress;\n        valueChanged(\"progress\");\n    }\n\n    public String getTaskStatus() {\n        return taskStatus;\n    }\n\n    public void setTaskStatus(String taskStatus) {\n        this.taskStatus = taskStatus;\n        valueChanged(\"taskStatus\");\n    }\n\n    public String getSuccessfulAttempt() {\n        return successfulAttempt;\n    }\n\n    public void setSuccessfulAttempt(String successfulAttempt) {\n        this.successfulAttempt = successfulAttempt;\n        valueChanged(\"successfulAttempt\");\n    }\n\n    public String getStatusDesc() {\n        return statusDesc;\n    }\n\n    public void setStatusDesc(String statusDesc) {\n        this.statusDesc = statusDesc;\n        valueChanged(\"statusDesc\");\n    }\n\n    public JobCounters getJobCounters() {\n        return jobCounters;\n    }\n\n    public void setJobCounters(JobCounters jobCounters) {\n        this.jobCounters = jobCounters;\n        valueChanged(\"jobCounters\");\n    }\n}<｜fim▁end｜>",
    "response": "    public long getDuration() {\n        return duration;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.gearvrf.physics;\n\nimport android.util.LongSparseArray;\n\nimport org.gearvrf.GVRBehavior;\nimport org.gearvrf.GVRComponent;\nimport org.gearvrf.GVRContext;\nimport org.gearvrf.GVRSceneObject;\nimport org.gearvrf.GVRSceneObject.ComponentVisitor;\nimport org.gearvrf.ISceneObjectEvents;\n\npublic class GVRWorld extends GVRBehavior implements ISceneObjectEvents, ComponentVisitor {\n    protected float mFrameTime;\n    private boolean mIsProcessing;\n\n    static {\n        System.loadLibrary(\"gvrf-physics\");\n    }\n\n    private final LongSparseArray<GVRRigidBody> mRigidBodies = new LongSparseArray<GVRRigidBody>();\n    private final GVRCollisionMatrix mCollisionMatrix;\n\n    /**\n     * Constructs new instance to simulatethe Physics World of the Scene.\n     *\n     * @param gvrContext The context of the app.\n     */\n    public GVRWorld(GVRContext gvrContext) {\n        this(gvrContext, null);\n    }\n\n    /**\n     * Constructs new instance to simulatethe Physics World of the Scene.\n     *\n     * @param gvrContext The context of the app.\n     * @param collisionMatrix a matrix that represents the collision relations of the bodies on the scene\n     */\n    public GVRWorld(GVRContext gvrContext, GVRCollisionMatrix collisionMatrix) {\n        super(gvrContext, NativePhysics3DWorld.ctor());\n        mHasFrameCallback = false;\n        mIsProcessing = false;\n        mFrameTime = 0.0f;\n        mCollisionMatrix = collisionMatrix;\n    }\n\n    static public long getComponentType() {\n        return NativePhysics3DWorld.getComponentType();\n    }\n\n    /**\n     * Add a {@link GVRConstraint} to this physics world.\n     *\n     * @param gvrConstraint The {@link GVRConstraint} to add.\n     */\n    public void addConstraint(GVRConstraint gvrConstraint) {\n        NativePhysics3DWorld.addConstraint(getNative(), gvrConstraint.getNative());\n    }\n\n    /**\n     * Remove a {@link GVRFixedConstraint} from this physics world.\n     *\n     * @param gvrConstraint the {@link GVRFixedConstraint} to remove.\n     */\n    public void removeConstraint(GVRConstraint gvrConstraint) {\n        NativePhysics3DWorld.removeConstraint(getNative(), gvrConstraint.getNative());\n    }\n\n    /**\n     * Returns true if the physics world contains the the specified rigid body.\n     *\n     * @param rigidBody Rigid body the to check if it is present in the world.\n     * @return true if the world contains the specified rigid body.\n     */\n    public boolean contains(GVRRigidBody rigidBody) {\n        return mRigidBodies.get(rigidBody.getNative()) != null;\n    }\n\n    /**\n     * Add a {@link GVRRigidBody} to this physics world.\n     *\n     * @param gvrBody The {@link GVRRigidBody} to add.\n     */\n    public void addBody(GVRRigidBody gvrBody) {\n        if (contains(gvrBody)) {\n            return;\n        }\n\n        if (gvrBody.getCollisionGroup() < 0 || gvrBody.getCollisionGroup() > 15\n                || mCollisionMatrix == null) {\n            NativePhysics3DWorld.addRigidBody(getNative(), gvrBody.getNative());\n        } else {\n            NativePhysics3DWorld.addRigidBodyWithMask(getNative(), gvrBody.getNative(),\n                    mCollisionMatrix.getCollisionFilterGroup(gvrBody.getCollisionGroup()),\n                    mCollisionMatrix.getCollisionFilterMask(gvrBody.getCollisionGroup()));\n        }\n\n        mRigidBodies.put(gvrBody.getNative(), gvrBody);\n    }\n\n    /**\n     * Remove a {@link GVRRigidBody} from this physics world.\n     *\n     * @param gvrBody the {@link GVRRigidBody} to remove.\n     */\n    public void removeBody(GVRRigidBody gvrBody) {\n        if (contains(gvrBody)) {\n            NativePhysics3DWorld.removeRigidBody(getNative(), gvrBody.getNative());\n            mRigidBodies.remove(gvrBody.getNative());\n        }\n    }\n\n    @Override\n    public void onDrawFrame(float frameTime) {\n        mFrameTime += frameTime;\n        if (mIsProcessing) {\n            return;\n        }\n        mIsProcessing = true;\n        NativePhysics3DWorld.step(getNative(), mFrameTime);\n        generateCollisionEvents();\n        mFrameTime = 0.0f;\n        mIsProcessing = false;\n    }\n\n    private void generateCollisionEvents() {\n        GVRCollisionInfo collisionInfos[] = NativePhysics3DWorld.listCollisions(getNative());\n\n        String onEnter = \"onEnter\";\n        String onExit = \"onExit\";\n\n        for (GVRCollisionInfo info : collisionInfos) {\n            if (info.isHit) {\n                sendCollisionEvent(info, onEnter);\n            }\n            else {\n                sendCollisionEvent(info, onExit);\n            }\n        }\n    }\n\n    private void sendCollisionEvent(GVRCollisionInfo info, String eventName) {\n        GVRSceneObject bodyA = mRigidBodies.get(info.bodyA).getOwnerObject();\n        GVRSceneObject bodyB = mRigidBodies.get(info.bodyB).getOwnerObject();\n\n        getGVRContext().getEventManager().sendEvent(bodyA, ICollisionEvents.class, eventName,\n                bodyA, bodyB, info.normal, info.distance);\n\n        getGVRContext().getEventManager().sendEvent(bodyB, ICollisionEvents.class, eventName,\n                bodyB, bodyA, info.normal, info.distance);\n    }\n\n    private void doPhysicsAttach(GVRSceneObject rootSceneObject) {\n        if (!mHasFrameCallback) {\n            rootSceneObject.getEventReceiver().addListener(this);\n        } else if (isEnabled()){\n            startListening();\n        }\n        rootSceneObject.forAllComponents(this, GVRRigidBody.getComponentType());\n    }\n\n    private void doPhysicsDetach(GVRSceneObject rootSceneObject) {\n        if (!mHasFrameCallback) {\n            rootSceneObject.getEventReceiver().removeListener(this);\n        }\n        if (isEnabled()) {\n            stopListening();\n        }\n        rootSceneObject.forAllComponents(this, GVRRigidBody.getComponentType());\n    }\n\n    @Override\n    public void onAttach(GVRSceneObject newOwner) {\n        super.onAttach(newOwner);\n\n        //FIXME: Implement a way to check if already exists a GVRWold attached to the scene\n        if (newOwner.getParent() != null) {\n            throw new RuntimeException(\"GVRWold must be attached to the scene's root object!\");\n        }\n\n        doPhysicsAttach(newOwner);\n    }\n\n    @Override\n    public void onDetach(GVRSceneObject oldOwner) {\n        super.onDetach(oldOwner);\n\n        doPhysicsDetach(oldOwner);\n    }\n\n    @Override\n    public void onInit(GVRContext gvrContext, GVRSceneObject sceneObject) {\n        if (mHasFrameCallback)\n            return;\n\n        mHasFrameCallback = true;\n        getOwnerObject().getEventReceiver().removeListener(this);\n\n        if (isEnabled()) {\n            startListening();\n        }\n    }\n\n    @Override\n    public void onLoaded() {\n<｜fim▁hole｜>\n    @Override\n    public void onAfterInit() {\n\n    }\n\n    @Override\n    public void onStep() {\n\n    }\n\n    public void setGravity(float x, float y, float z) {\n        NativePhysics3DWorld.setGravity(getNative(), x, y, z);\n    }\n\n    public void getGravity(float[] gravity) {\n        NativePhysics3DWorld.getGravity(getNative(), gravity);\n    }\n\n    @Override\n    public boolean visit(GVRComponent gvrComponent) {\n        if (!gvrComponent.isEnabled()) {\n            return false;\n        }\n        if (this.owner != null) {\n            addBody((GVRRigidBody) gvrComponent);\n        } else {\n            removeBody((GVRRigidBody) gvrComponent);\n        }\n        return true;\n    }\n}\n\nclass NativePhysics3DWorld {\n    static native long ctor();\n\n    static native long getComponentType();\n\n    static native boolean addConstraint(long jphysics_world, long jconstraint);\n\n    static native boolean removeConstraint(long jphysics_world, long jconstraint);\n\n    static native boolean addRigidBody(long jphysics_world, long jrigid_body);\n\n    static native boolean addRigidBodyWithMask(long jphysics_world, long jrigid_body, long collisionType, long collidesWith);\n\n    static native void removeRigidBody(long jphysics_world, long jrigid_body);\n\n    static native void step(long jphysics_world, float jtime_step);\n\n    static native void getGravity(long jworld, float[] array);\n\n    static native void setGravity(long jworld, float x, float y, float z);\n\n    static native GVRCollisionInfo[] listCollisions(long jphysics_world);\n}<｜fim▁end｜>",
    "response": "\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package imangazaliev.quickmenusample;\n\nimport android.graphics.Color;\nimport android.graphics.drawable.ColorDrawable;\nimport android.graphics.drawable.Drawable;\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.Gravity;\nimport android.view.View;\n\nimport imangazaliev.quickmenu.QuickMenu;\nimport imangazaliev.quickmenu.QuickMenuProperties;\nimport imangazaliev.quickmenu.model.DividerMenuItem;\nimport imangazaliev.quickmenu.model.SpinnerMenuItem;\n\npublic class QuickSettingsActivity extends AppCompatActivity {\n\n    QuickMenu menu;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_quick_settings);\n\n        String[] spinnerItems = {\"Cat\", \"Dog\", \"Cow\"};\n\n        Drawable menuBackground = getResources().getDrawable(R.drawable.quick_settings_menu_bg);\n        Drawable layoutBackground = new ColorDrawable(Color.parseColor(\"#80000000\"));\n\n        QuickMenuProperties properties = new QuickMenuProperties.Builder(this)\n                .withWidthInPercentages(60)\n<｜fim▁hole｜>        menu = new QuickMenu.Builder(this)\n                .withItems(new SpinnerMenuItem(spinnerItems),\n                        new DividerMenuItem(this).withColor(Color.parseColor(\"#EEEEEE\")),\n                        new SpinnerMenuItem(spinnerItems))\n                .withProperties(properties)\n                .build();\n\n    }\n\n    public void showMenu(View view) {\n        menu.show();\n    }\n}<｜fim▁end｜>",
    "response": "                .withBackground(menuBackground)\n                .withMargins(50, 50, 50, 50)\n                .withLayoutBackground(layoutBackground)\n                .withCancelOnTouchOutside(true)\n                .build();\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package grph.demo;\n\nimport grph.Grph;\nimport grph.in_memory.InMemoryGrph;\n\nimport java.util.Random;\n\nimport toools.gui.TrueColors24Map;\nimport toools.thread.Threads;\n\npublic class Colors\n{\n    public static void main(String[] args)\n    {\n        ClassLoader.getSystemClassLoader().setDefaultAssertionStatus(true);\n        Random r = new Random();\n\n        Grph g = new InMemoryGrph();\n        g.grid(6, 6);\n        g.getVertexLabelProperty().setValue(4, \"salut\");\n        g.getVertexColorProperty().setPalette(new TrueColors24Map());\n<｜fim▁hole｜>            int color = (int) (r.nextDouble() * g.getVertexColorProperty()\n                    .getPalette().getNumberOfColors());\n            g.getVertexColorProperty().setValue(\n                    g.getVertices().pickRandomElement(r), color);\n            g.getEdgeColorProperty().setValue(\n                    g.getEdges().pickRandomElement(r), color);\n            Threads.sleepMs(500);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        g.display();\n\n        for (int i = 0;; ++i)\n        {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.brixcms.demo.web;\n\nimport javax.jcr.ImportUUIDBehavior;\n\nimport org.apache.wicket.Page;\nimport org.apache.wicket.request.cycle.RequestCycle;\nimport org.brixcms.Brix;\nimport org.brixcms.Path;\nimport org.brixcms.config.BrixConfig;\nimport org.brixcms.config.PrefixUriMapper;\nimport org.brixcms.config.UriMapper;\nimport org.brixcms.demo.web.admin.AdminPage;\nimport org.brixcms.jcr.JcrSessionFactory;\nimport org.brixcms.jcr.api.JcrSession;\nimport org.brixcms.plugin.site.SitePlugin;\nimport org.brixcms.web.BrixRequestMapper;\nimport org.brixcms.workspace.Workspace;\nimport org.brixcms.workspace.WorkspaceManager;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic final class WicketApplication extends AbstractWicketApplication {\n    private static final Logger log = LoggerFactory.getLogger(WicketApplication.class);\n\n    /**\n     * brix instance\n     */\n    private Brix brix;\n\n    public Brix getBrix() {\n        return brix;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public Class<? extends Page> getHomePage() {\n        // use special class so that the URL coding strategy knows we want to go home\n        // it is not possible to just return null here because some pages (e.g. expired page)\n        // rely on knowing the home page\n        return BrixRequestMapper.HomePage.class;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected void init() {\n        super.init();\n\n        final JcrSessionFactory sf = getJcrSessionFactory();\n        final WorkspaceManager wm = getWorkspaceManager();\n\n        getDebugSettings().setOutputMarkupContainerClassName(true);\n\n        try {\n            // create uri mapper for the cms\n            // we are mounting the cms on the root, and getting the workspace name from the\n            // application properties\n            UriMapper mapper = new PrefixUriMapper(Path.ROOT) {\n                public Workspace getWorkspaceForRequest(RequestCycle requestCycle, Brix brix) {\n                    final String name = getProperties().getJcrDefaultWorkspace();\n                    SitePlugin sitePlugin = SitePlugin.get(brix);\n                    return sitePlugin.getSiteWorkspace(name, getProperties().getWorkspaceDefaultState());\n                }\n            };\n\n            // create brix configuration\n            BrixConfig config = new BrixConfig(sf, wm, mapper);\n            config.setHttpPort(getProperties().getHttpPort());\n            config.setHttpsPort(getProperties().getHttpsPort());\n\n            // create brix instance and attach it to this application\n            brix = new DemoBrix(config);\n            brix.attachTo(this);\n            initializeRepository();\n            initDefaultWorkspace();\n\n        } catch (Exception e) {\n            log.error(\"Exception in WicketApplication init()\", e);\n        } finally {\n            // since we accessed session factory we also have to perform cleanup\n            cleanupSessionFactory();\n        }\n<｜fim▁hole｜>    }\n\n    /**\n     * Allow Brix to perform repository initialization\n     */\n    private void initializeRepository() {\n        try {\n            brix.initRepository();\n        } finally {\n            // cleanup any sessions we might have created\n            cleanupSessionFactory();\n        }\n    }\n\n    private void initDefaultWorkspace() {\n        try {\n            final String defaultState = getProperties().getWorkspaceDefaultState();\n            final String wn = getProperties().getJcrDefaultWorkspace();\n            final SitePlugin sp = SitePlugin.get(brix);\n\n            if (!sp.siteExists(wn, defaultState)) {\n                Workspace w = sp.createSite(wn, defaultState);\n                JcrSession session = brix.getCurrentSession(w.getId());\n\n                session.importXML(\"/\", getClass().getResourceAsStream(\"workspace.xml\"),\n                        ImportUUIDBehavior.IMPORT_UUID_COLLISION_REPLACE_EXISTING);\n\n                brix.initWorkspace(w, session);\n\n                session.save();\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Could not initialize jackrabbit workspace with Brix\", e);\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "\n        // mount admin page\n        mountPage(\"/admin\", AdminPage.class);\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package mil.nga.giat.geowave.core.store.entities;\n\nimport java.nio.ByteBuffer;\nimport java.util.Arrays;\n\nimport edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n\n@SuppressFBWarnings(value = \"EI_EXPOSE_REP\", justification = \"private class only accessed internally\")\npublic class GeowaveRowId\n{\n    private final byte[] insertionId;\n    private final byte[] dataId;\n    private final byte[] adapterId;\n    private final int numberOfDuplicates;\n\n    public GeowaveRowId(\n            final byte[] rowId ) {\n        this(\n                rowId,\n                rowId.length);\n    }\n\n    public GeowaveRowId(\n            final byte[] rowId,\n            int length ) {\n        this(\n                rowId,\n                0,\n                length);\n    }\n\n    public GeowaveRowId(\n            final byte[] rowId,\n            int offset,\n            int length ) {\n        final ByteBuffer metadataBuf = ByteBuffer.wrap(\n                rowId,\n                length + offset - 12,\n                12);\n        final int adapterIdLength = metadataBuf.getInt();\n        final int dataIdLength = metadataBuf.getInt();\n        final int numberOfDuplicates = metadataBuf.getInt();\n\n        final ByteBuffer buf = ByteBuffer.wrap(\n                rowId,\n                offset,\n                length - 12);\n        final byte[] insertionId = new byte[length - 12 - adapterIdLength - dataIdLength];\n        final byte[] adapterId = new byte[adapterIdLength];\n        final byte[] dataId = new byte[dataIdLength];\n        buf.get(insertionId);\n        buf.get(adapterId);\n        buf.get(dataId);\n        this.insertionId = insertionId;\n        this.dataId = dataId;\n        this.adapterId = adapterId;\n        this.numberOfDuplicates = numberOfDuplicates;\n    }\n\n    public GeowaveRowId(\n            final byte[] indexId,\n            final byte[] dataId,\n            final byte[] adapterId,\n            final int numberOfDuplicates ) {\n        this.insertionId = indexId;\n        this.dataId = dataId;\n        this.adapterId = adapterId;\n        this.numberOfDuplicates = numberOfDuplicates;\n    }\n\n    public byte[] getRowId() {\n        final ByteBuffer buf = ByteBuffer.allocate(12 + dataId.length + adapterId.length + insertionId.length);\n        buf.put(insertionId);\n        buf.put(adapterId);\n        buf.put(dataId);\n        buf.putInt(adapterId.length);\n        buf.putInt(dataId.length);\n        buf.putInt(numberOfDuplicates);\n        return buf.array();\n    }\n\n    public byte[] getInsertionId() {\n        return insertionId;\n    }\n\n    public byte[] getDataId() {\n        return dataId;\n    }\n\n    public byte[] getAdapterId() {\n        return adapterId;\n    }\n\n    public int getNumberOfDuplicates() {\n        return numberOfDuplicates;\n    }\n\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "    public boolean isDeduplicationEnabled() {\n        return numberOfDuplicates >= 0;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.soebes.maven.plugins.iterator;\n\nimport org.apache.maven.model.Plugin;\nimport org.codehaus.plexus.configuration.xml.XmlPlexusConfiguration;\n\npublic class PluginExecutor\n{\n    /**\n     * The plugin to be executed.\n     * \n     * <pre>\n     * {@code\n     * <plugin>\n     *   <groupId>..</groupId>\n     *   <artifactId>..</artifactId>\n     *   <version>..</version>\n     * </plugin>\n     * }\n     * </pre>\n     */\n    private Plugin plugin;\n\n    /**\n     * The plugin goal to be executed.\n     */\n    private String goal;\n\n    /**\n     * Plugin configuration to use in the execution.\n     * \n     * <pre>\n     * {@code\n     * <configuration>\n     *   Plugin Configuration\n     * </configuration>\n     * }\n     * </pre>\n     */\n    private XmlPlexusConfiguration configuration;\n\n    public PluginExecutor()\n    {\n    }\n\n    public Plugin getPlugin()\n    {\n        return plugin;\n    }\n\n    public void setPlugin( Plugin plugin )\n    {\n        this.plugin = plugin;\n    }\n\n<｜fim▁hole｜>\n    public void setGoal( String goal )\n    {\n        this.goal = goal;\n    }\n\n    public XmlPlexusConfiguration getConfiguration()\n    {\n        return configuration;\n    }\n\n    public void setConfiguration( XmlPlexusConfiguration configuration )\n    {\n        this.configuration = configuration;\n    }\n}<｜fim▁end｜>",
    "response": "    public String getGoal()\n    {\n        return goal;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package artiano.ml.clustering;\n\nimport java.util.ArrayList;\n\nimport artiano.core.operation.CapabilityHandler;\nimport artiano.core.operation.OptionsHandler;\nimport artiano.core.structure.Attribute;\nimport artiano.core.structure.Table;\nimport artiano.ml.clustering.structure.ClusterModel;\n\npublic abstract class Clustering implements CapabilityHandler, OptionsHandler {\n\n    public static ArrayList<Class<?>> listAll() {\n        ArrayList<Class<?>> clusterings = new ArrayList<>();\n        clusterings.add(KMeans.class);\n        clusterings.add(SOM.class);\n        clusterings.add(Agenes.class);\n        clusterings.add(DBSCAN.class);\n<｜fim▁hole｜>\n    @Override\n    public boolean handleDataSet(Table table) {\n        return capability().handles(table);\n    }\n\n    public abstract ClusterModel cluster(Table data);\n\n}<｜fim▁end｜>",
    "response": "        return clusterings;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.openhab.binding.rme.internal;\n\nimport org.osgi.framework.BundleActivator;\nimport org.osgi.framework.BundleContext;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class RMEActivator implements BundleActivator {\n<｜fim▁hole｜>    private static BundleContext context;\n\n    static BundleContext getContext() {\n        return context;\n    }\n\n    /*\n     * (non-Javadoc)\n     * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)\n     */\n    public void start(BundleContext bundleContext) throws Exception {\n        logger.debug(\"RME binding has been started.\");\n\n        RMEActivator.context = bundleContext;\n    }\n\n    /*\n     * (non-Javadoc)\n     * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)\n     */\n    public void stop(BundleContext bundleContext) throws Exception {\n        logger.debug(\"RME binding has been stopped.\");\n\n        RMEActivator.context = null;\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    private static Logger logger = LoggerFactory.getLogger(RMEActivator.class);\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.microsoft.azure.batch.protocol.models;\n\nimport com.microsoft.rest.DateTimeRfc1123;\nimport org.joda.time.DateTime;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\npublic class CertificateDeleteOptions {\n    /**\n     * The maximum time that the server can spend processing the request, in\n     * seconds. The default is 30 seconds.\n     */\n    @JsonProperty(value = \"\")\n    private Integer timeout;\n\n    /**\n     * The caller-generated request identity, in the form of a GUID with no\n     * decoration such as curly braces, e.g.\n     * 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.\n     */\n    @JsonProperty(value = \"\")\n    private String clientRequestId;\n\n    /**\n     * Whether the server should return the client-request-id identifier in\n     * the response.\n     */\n    @JsonProperty(value = \"\")\n    private Boolean returnClientRequestId;\n\n    /**\n     * The time the request was issued. If not specified, this header will be\n     * automatically populated with the current system clock time.\n     */\n    @JsonProperty(value = \"\")\n    private DateTimeRfc1123 ocpDate;\n\n    /**\n     * Get the timeout value.\n     *\n     * @return the timeout value\n     */\n    public Integer timeout() {\n        return this.timeout;\n    }\n\n    /**\n     * Set the timeout value.\n     *\n     * @param timeout the timeout value to set\n     * @return the CertificateDeleteOptions object itself.\n     */\n    public CertificateDeleteOptions withTimeout(Integer timeout) {\n        this.timeout = timeout;\n        return this;\n    }\n\n    /**\n     * Get the clientRequestId value.\n     *\n     * @return the clientRequestId value\n     */\n    public String clientRequestId() {\n        return this.clientRequestId;\n    }\n\n    /**\n     * Set the clientRequestId value.\n     *\n     * @param clientRequestId the clientRequestId value to set\n     * @return the CertificateDeleteOptions object itself.\n     */\n    public CertificateDeleteOptions withClientRequestId(String clientRequestId) {\n<｜fim▁hole｜>        return this;\n    }\n\n    /**\n     * Get the returnClientRequestId value.\n     *\n     * @return the returnClientRequestId value\n     */\n    public Boolean returnClientRequestId() {\n        return this.returnClientRequestId;\n    }\n\n    /**\n     * Set the returnClientRequestId value.\n     *\n     * @param returnClientRequestId the returnClientRequestId value to set\n     * @return the CertificateDeleteOptions object itself.\n     */\n    public CertificateDeleteOptions withReturnClientRequestId(Boolean returnClientRequestId) {\n        this.returnClientRequestId = returnClientRequestId;\n        return this;\n    }\n\n    /**\n     * Get the ocpDate value.\n     *\n     * @return the ocpDate value\n     */\n    public DateTime ocpDate() {\n        if (this.ocpDate == null) {\n            return null;\n        }\n        return this.ocpDate.getDateTime();\n    }\n\n    /**\n     * Set the ocpDate value.\n     *\n     * @param ocpDate the ocpDate value to set\n     * @return the CertificateDeleteOptions object itself.\n     */\n    public CertificateDeleteOptions withOcpDate(DateTime ocpDate) {\n        if (ocpDate == null) {\n            this.ocpDate = null;\n        } else {\n            this.ocpDate = new DateTimeRfc1123(ocpDate);\n        }\n        return this;\n    }\n\n}<｜fim▁end｜>",
    "response": "        this.clientRequestId = clientRequestId;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package connect.view.camera;\n\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport android.view.MotionEvent;\n<｜fim▁hole｜>import android.widget.LinearLayout;\n\nimport connect.ui.activity.R;\n\npublic class VideoButtonView extends LinearLayout {\n\n    private final ImageView outCircularImg;\n    private final ImageView inCircularImg;\n    private final CricleProgressbar progressbar;\n    private OnTouchStatusListence onTouchStatusListence;\n    private boolean isLong = false;\n    private long downTime;\n    private final long LONG_TOUCH_TIME = 300;\n    private boolean vidioIng = false;\n\n    public VideoButtonView(Context context) {\n        this(context, null);\n    }\n\n    public VideoButtonView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public VideoButtonView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        View view = View.inflate(context, R.layout.view_video_btn, this);\n        outCircularImg = (ImageView) view.findViewById(R.id.out_circular_img);\n        inCircularImg = (ImageView) view.findViewById(R.id.in_circular_img);\n        progressbar = (CricleProgressbar) view.findViewById(R.id.myProgressBar);\n        this.setClipChildren(false);\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent ev) {\n        int action = ev.getAction();\n        long touchTime = System.currentTimeMillis();\n        if (action == MotionEvent.ACTION_DOWN) {\n            downTime = System.currentTimeMillis();\n        } else if (action == MotionEvent.ACTION_UP) {\n            long upTime = System.currentTimeMillis();\n            if (upTime - downTime < LONG_TOUCH_TIME) { // click end\n                onTouchStatusListence.clickView();\n            } else { // long end\n                vidioIng = false;\n                progressbar.setVisibility(GONE);\n                showPictureAni();\n                onTouchStatusListence.cancleLongClick();\n            }\n        } else {\n            if (touchTime - downTime > LONG_TOUCH_TIME && !vidioIng) { // long start\n                vidioIng = true;\n                showVideoAni();\n                onTouchStatusListence.longClickView();\n            }\n        }\n        return true;\n    }\n\n    public void showVideoAni() {\n        Animation animationOut = getAnimScale(1.4f, 1.4f);\n        Animation animationIn = getAnimScale(0.75f, 0.75f);\n        outCircularImg.startAnimation(animationOut);\n        inCircularImg.startAnimation(animationIn);\n    }\n\n    private void showPictureAni() {\n        Animation animationOut = getAnimScale(1f, 1f);\n        Animation animationIn = getAnimScale(1f, 1f);\n        outCircularImg.startAnimation(animationOut);\n        inCircularImg.startAnimation(animationIn);\n    }\n\n    private Animation getAnimScale(float toX, float toY) {\n        Animation scaleAnimation = new ScaleAnimation(1f, toX, 1f, toY,\n                Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);\n        scaleAnimation.setFillAfter(true);\n        scaleAnimation.setDuration(200);\n        return scaleAnimation;\n    }\n\n    public void setPeogressCricle(float length) {\n        if (length >= CameraTakeActivity.MAX_LENGTH / 1000) {\n            isLong = false;\n            progressbar.setVisibility(GONE);\n            showPictureAni();\n        } else {\n            progressbar.setVisibility(VISIBLE);\n            progressbar.setEndAngle(length * 36);\n        }\n    }\n\n    public void setOnTouchStatusListence(OnTouchStatusListence onTouchStatusListence) {\n        this.onTouchStatusListence = onTouchStatusListence;\n    }\n\n    public interface OnTouchStatusListence {\n        void clickView();\n\n        void longClickView();\n\n        void cancleLongClick();\n    }\n\n}<｜fim▁end｜>",
    "response": "import android.view.View;\nimport android.view.animation.Animation;\nimport android.view.animation.ScaleAnimation;\nimport android.widget.ImageView;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amee.platform.search;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.queryParser.ParseException;\nimport org.apache.lucene.queryParser.QueryParser;\nimport org.apache.lucene.search.NumericRangeQuery;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.TermQuery;\nimport org.apache.lucene.util.NumericUtils;\nimport org.apache.lucene.util.Version;\n\nimport java.beans.PropertyEditorSupport;\n\npublic class QueryParserEditor extends PropertyEditorSupport {\n\n    private String field;\n    private Analyzer analyzer;\n    private boolean doubleValue;\n\n    public QueryParserEditor(String field) {\n        setField(field);\n        setAnalyzer(SearchService.STANDARD_ANALYZER);\n        setDoubleValue(false);\n    }\n\n    public QueryParserEditor(String field, Analyzer analyzer) {\n        setField(field);\n        setAnalyzer(analyzer);\n        setDoubleValue(false);\n    }\n\n    public QueryParserEditor(String field, Analyzer analyzer, boolean doubleValue) {\n        setField(field);\n        setAnalyzer(analyzer);\n        setDoubleValue(doubleValue);\n    }\n\n    /**\n     * A factory method to return a tag specific implementation of QueryParserEditor. Uses SearchService.TAG_ANALYZER\n     * and a custom  implementation of getModifiedText to replace commas with spaces (to avoid confusing Lucene).\n     *\n     * @param field\n     * @return\n     */\n    public static QueryParserEditor getTagQueryParserEditor(String field) {\n        return new QueryParserEditor(field, SearchService.TAG_ANALYZER) {\n            public String getModifiedText(String text) {\n                return text.replace(',', ' ');\n            }\n        };\n    }\n\n    @Override\n    public void setAsText(String text) {\n        if (text != null) {\n            try {\n                QueryParser parser = getQueryParser();\n                setValue(parser.parse(getModifiedText(text)));\n            } catch (ParseException e) {\n                throw new IllegalArgumentException(\"Cannot parse query (\" + e.getMessage() + \").\", e);\n            }\n        } else {\n            setValue(null);\n        }\n    }\n\n    private QueryParser getQueryParser() {\n        return new QueryParser(Version.LUCENE_30, getField(), getAnalyzer()) {\n\n            // TODO: is getField meant to resolve to this.getField or super.getField?\n            // Added super as this is how java was resolving the unqualified method call.\n            // See: http://findbugs.sourceforge.net/bugDescriptions.html#IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD\n            protected Query newTermQuery(Term term) {\n                if (isDoubleValue()) {\n                    try {\n                        return new TermQuery(new Term(super.getField(),\n                                NumericUtils.doubleToPrefixCoded(Double.parseDouble(term.text()))));\n                    } catch (NumberFormatException e) {\n                        throw new IllegalArgumentException(\"Cannot parse query (\" + e.getMessage() + \").\", e);\n                    }\n                } else {\n                    return super.newTermQuery(term);\n                }\n            }\n\n            // TODO: is getField meant to resolve to this.getField or super.getField?\n            // Added super as this is how java was resolving the unqualified method call.\n            // See: http://findbugs.sourceforge.net/bugDescriptions.html#IA_AMBIGUOUS_INVOCATION_OF_INHERITED_OR_OUTER_METHOD\n            protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n                if (isDoubleValue()) {\n                    try {\n                        final NumericRangeQuery query =\n                                NumericRangeQuery.newDoubleRange(\n                                        super.getField(),\n                                        Double.parseDouble(part1),\n                                        Double.parseDouble(part2),\n                                        inclusive,\n                                        inclusive);\n                        query.setRewriteMethod(super.getMultiTermRewriteMethod());\n                        return query;\n                    } catch (NumberFormatException e) {\n                        throw new IllegalArgumentException(\"Cannot parse query (\" + e.getMessage() + \").\", e);\n                    }\n                } else {\n                    return super.newRangeQuery(field, part1, part2, inclusive);\n                }\n            }\n        };\n    }\n\n    /**\n     * Extension point to allow the text to be modified before it is parsed by the QueryParser. The default\n     * implementation simply returns the text unmodified.\n     *\n     * @param text to be modified\n     * @return text following modification.\n     */\n    public String getModifiedText(String text) {\n        return text;\n    }\n\n    public String getField() {\n        return field;\n    }\n\n    public void setField(String field) {\n        this.field = field;\n    }\n\n    public Analyzer getAnalyzer() {\n        return analyzer;\n    }\n\n<｜fim▁hole｜>\n    public boolean isDoubleValue() {\n        return doubleValue;\n    }\n\n    public void setDoubleValue(boolean doubleValue) {\n        this.doubleValue = doubleValue;\n    }\n}<｜fim▁end｜>",
    "response": "    public void setAnalyzer(Analyzer analyzer) {\n        this.analyzer = analyzer;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.iotivity.base.examples;\n\nimport android.util.Log;\n\n<｜fim▁hole｜>import org.iotivity.base.OcResourceHandle;\n\npublic abstract class Resource {\n    protected OcResourceHandle mResourceHandle;\n    protected OcRepresentation mRepresentation;\n\n    Resource() {\n        mResourceHandle = null;\n        mRepresentation = new OcRepresentation();\n    }\n\n    public void bindTo(OcResourceHandle collectionResourceHandle) {\n        try {\n            if (null != mResourceHandle && null != collectionResourceHandle) {\n                OcPlatform.bindResource(collectionResourceHandle, mResourceHandle);\n            }\n        } catch (OcException e) {\n            Log.e(\"Resource\", e.getMessage());\n        }\n    }\n\n    public static final int SUCCESS = 200;\n    public static final String INTENT = \"org.iotivity.base.examples.fridgegroupserver\";\n    public static final String MESSAGE = \"message\";\n}<｜fim▁end｜>",
    "response": "import org.iotivity.base.OcException;\nimport org.iotivity.base.OcPlatform;\nimport org.iotivity.base.OcRepresentation;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.alibaba.nacos.naming.consistency.ephemeral.distro.combined;\n\n<｜fim▁hole｜>import java.util.Objects;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class DistroHttpCombinedKey extends DistroKey {\n\n    private static final AtomicLong SEQUENCE = new AtomicLong(0);\n\n    private final List<String> actualResourceTypes = new LinkedList<>();\n\n    public DistroHttpCombinedKey(String resourceType, String targetServer) {\n        super(DistroHttpCombinedKey.getSequenceKey(), resourceType, targetServer);\n    }\n\n    public List<String> getActualResourceTypes() {\n        return actualResourceTypes;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n            return true;\n        }\n        if (!(o instanceof DistroHttpCombinedKey)) {\n            return false;\n        }\n        if (!super.equals(o)) {\n            return false;\n        }\n        DistroHttpCombinedKey that = (DistroHttpCombinedKey) o;\n        return Objects.equals(getResourceKey(), that.getResourceKey())\n                && Objects.equals(getResourceType(), that.getResourceType())\n                && Objects.equals(getTargetServer(), that.getTargetServer())\n                && Objects.equals(actualResourceTypes, that.actualResourceTypes);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(super.hashCode(), actualResourceTypes);\n    }\n\n    @Override\n    public String toString() {\n        return getResourceKey() + \"{\" + \"actualResourceTypes=\" + actualResourceTypes + \"} to \" + getTargetServer();\n    }\n\n    public static String getSequenceKey() {\n        return DistroHttpCombinedKey.class.getSimpleName() + \"-\" + SEQUENCE.get();\n    }\n\n    public static void incrementSequence() {\n        SEQUENCE.incrementAndGet();\n    }\n}<｜fim▁end｜>",
    "response": "import com.alibaba.nacos.core.distributed.distro.entity.DistroKey;\n\nimport java.util.LinkedList;\nimport java.util.List;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import java.util.Scanner;\n\npublic class ej4 {\n\n    private Scanner teclado;\n\n     private int [] vec;\n\n     public void cargar (){\n\n         teclado = new Scanner(System.in);\n\n         vec = new int [10];\n\n         for (int i = 0;i<10;i++){\n\n             System.out.println(\"Dime un valor\");\n\n             vec[i] = teclado.nextInt();\n             //fgfdgdg\n         }\n\n         //prueba\n\n     }\n\n      public void ordenar(){\n\n          int orden =1;\n\n          for (int i = 0; i<9; i++){\n\n            if ( vec[i] > vec[i+1]){\n\n                orden =0 ;\n            }\n\n            }\n          if (orden == 1){\n\n                System.out.println(\"Esta ordenado\");\n<｜fim▁hole｜>      }\n\n    public static void main ( String [] args){\n\n        ej4 mein = new ej4();\n\n        mein.cargar();\n        mein.ordenar();\n\n    }\n\n}<｜fim▁end｜>",
    "response": "\n            }\n            else{ System.out.println(\"No esta ordenado\");\n\n        }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.wso2.carbon.mediator.datamapper.datatypes;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\n\nimport javax.xml.stream.XMLStreamException;\n\nimport org.apache.avro.generic.GenericRecord;\nimport org.apache.avro.io.DatumWriter;\nimport org.apache.avro.io.Encoder;\nimport org.apache.axiom.om.OMElement;\nimport org.apache.axiom.om.util.AXIOMUtil;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.apache.synapse.SynapseException;\nimport org.wso2.datamapper.engine.outputAdapters.DummyEncoder;\nimport org.wso2.datamapper.engine.outputAdapters.WriterRegistry;\n\npublic class XMLWriter implements OutputWriter {\n\n    private static final Log log = LogFactory.getLog(XMLWriter.class);\n\n    /**\n     * Gives the output message \n     * @param outputType output data type\n     * @param result mapping result\n     * @return the output as an OMElement\n     * @throws IOException\n     */\n\n    public OMElement getOutputMessage(String outputType,\n            GenericRecord result) throws IOException {\n\n        DatumWriter<GenericRecord> writer = null;\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        Encoder encoder = new DummyEncoder(byteArrayOutputStream);\n        OMElement outMessage =null;\n        try {\n\n            writer = WriterRegistry.getInstance().get(outputType).newInstance();\n            writer.setSchema(result.getSchema());\n            writer.write(result, encoder);\n\n            // Converts the result into the desired outputType\n            outMessage = getOutputResult(byteArrayOutputStream.toString());\n\n        } catch (Exception e) {\n            handleException(\"Data coversion Failed\", e);\n        } finally {\n            encoder.flush();\n        }\n        return outMessage;\n    }\n\n    /**\n     * \n     * @param inputType\n     * @param inputMessage\n     * @param mappingResourceLoader\n     * @return\n     * @throws IOException\n     */\n\n    /*public static OMElement getInputMessage(String inputType,OMElement inputMessage) throws IOException {\n\n        DatumReader<GenericRecord> reader = null;\n        Decoder decoder = null;\n        OMElement inMessage = null;\n        try {\n        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(inputType.getBytes());\n        reader = ReaderRegistry.getInstance().get(inputType).newInstance();\n<｜fim▁hole｜>\n        } catch (Exception e) {\n            handleException(\"Data coversion Failed\", e);\n        } finally {\n            decoder.flush();\n        }\n        return inputMessage;\n\n    }*/\n\n    /**\n     * Gives the final output as an OMElement\n     * @param result mapping result\n     * @return output message as an OMElement\n     * @throws XMLStreamException\n     */\n\n    private static OMElement getOutputResult(String result)\n            throws XMLStreamException {\n        return AXIOMUtil.stringToOM(result);\n\n    }\n\n    private static void handleException(String message, Exception e) {\n        log.error(message, e);\n        throw new SynapseException(message, e);\n    }\n\n}<｜fim▁end｜>",
    "response": "        reader.setSchema(mappingResourceLoader.getInputSchema());\n        decoder = new DummyDecoder(byteArrayInputStream);\n        reader.read(reuse, decoder);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.ibm.gaiandb.udpdriver.common.protocol;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\nimport java.net.InetAddress;\n\npublic class NextValuesRequest extends Message\n{\n    //  Use PROPRIETARY notice if class contains a main() method, otherwise use COPYRIGHT notice.\n    public static final String COPYRIGHT_NOTICE = \"(c) Copyright IBM Corp. 2010\";\n\n    /**\n     * Creates a new NextValuesRequest\n     */\n    protected NextValuesRequest()\n    {\n        super();\n    }\n\n    /* (non-Javadoc)\n     * @see com.ibm.gaiandb.udpdriver.common.protocol.Message#initializeWithData(byte[], java.net.InetAddress, int)\n     */\n    public void initializeWithData( byte[] data, InetAddress emittingAdress, int emittingPort ) throws UDPProtocolException\n    {\n        super.initializeWithData( data, emittingAdress, emittingPort );\n\n        try\n        {\n            deserializeData();\n        }\n        catch( Exception e )\n        {\n            throw new UDPProtocolException( \"NextValuesRequest - constructor failed.\", e );\n        }\n<｜fim▁hole｜>    {\n        super.clean();\n    }\n\n    /* (non-Javadoc)\n     * @see com.ibm.gaiandb.udpdriver.common.protocol.Message#deserializeData()\n     */\n    protected void deserializeData() throws IOException\n    {\n        ByteArrayInputStream bais = new ByteArrayInputStream( binaryData );\n        DataInputStream dis = new DataInputStream( bais );\n\n        dis.readByte(); // the message type\n        queryID = dis.readUTF();\n        sequenceNumber = dis.readInt();\n\n        dis.close();\n        bais.close();\n    }\n\n    /* (non-Javadoc)\n     * @see com.ibm.gaiandb.udpdriver.common.protocol.Message#getType()\n     */\n    public int getType()\n    {\n        return Message.NEXT_VALUES_REQUEST;\n    }\n\n    /* (non-Javadoc)\n     * @see com.ibm.gaiandb.udpdriver.common.protocol.Message#serializeMessage()\n     */\n    public byte[] serializeMessage() throws UDPProtocolException\n    {\n        try\n        {\n            ByteArrayOutputStream baos = new ByteArrayOutputStream( BYTE_ARRAY_INITIAL_SIZE );\n            DataOutputStream daos = new DataOutputStream( baos );\n\n            if ( queryID==null || sequenceNumber==-1 )\n            {\n                throw new UDPProtocolException( \"The fields 'queryID' or 'sequenceNumber' are not initialized. \" );\n            }\n\n            daos.writeByte( getType() );\n            daos.writeUTF( queryID );\n            daos.writeInt( sequenceNumber );\n\n            daos.close();\n            byte[] serialized = baos.toByteArray();\n            baos.close();\n\n            return serialized;\n        }\n        catch( Exception e )\n        {\n            throw new UDPProtocolException( \"NextValuesRequest - serializeMessage() failed. \", e );\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    /* (non-Javadoc)\n     * @see com.ibm.gaiandb.udpdriver.common.protocol.Message#clean()\n     */\n    public void clean()\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.vmware.vim25;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlType;\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"AdminDisabled\")\npublic class AdminDisabled\n<｜fim▁hole｜>\n}<｜fim▁end｜>",
    "response": "    extends HostConfigFault\n{\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package elcon.mods.skillcraft;\n\nimport java.util.EnumSet;\n\nimport cpw.mods.fml.common.ITickHandler;\nimport cpw.mods.fml.common.TickType;\n\npublic class SCTickHandlerClient implements ITickHandler {\n\n    public boolean initialized = false;\n\n    @Override\n    public void tickStart(EnumSet<TickType> type, Object... tickData) {\n    }\n\n    @Override\n    public void tickEnd(EnumSet<TickType> type, Object... tickData) {\n        if(type.contains(TickType.RENDER)) {\n\n        }\n        if(type.contains(TickType.CLIENT)) {\n\n        }\n    }\n<｜fim▁hole｜>\n    @Override\n    public String getLabel() {\n        return \"SkillCraftTickHandler\";\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    @Override\n    public EnumSet<TickType> ticks() {\n        return EnumSet.of(TickType.RENDER, TickType.CLIENT);\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.londatiga.android;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\nimport android.view.View;\n\nimport android.widget.AdapterView;\nimport android.widget.ImageView;\nimport android.widget.ListView;\nimport android.widget.Toast;\nimport android.widget.AdapterView.OnItemClickListener; \nimport android.widget.PopupWindow;\n\npublic class Example2Activity extends Activity {\n    /**\n     * Listview selected row\n     */\n    private int mSelectedRow = 0;\n\n    /**\n     * Right arrow icon on each listview row\n     */\n    private ImageView mMoreIv = null;\n\n    private static final int ID_ADD = 1;\n    private static final int ID_ACCEPT = 2;\n    private static final int ID_UPLOAD = 3;\n\n    /** Called when the activity is first created. */\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.example2);\n\n        ListView mList          = (ListView) findViewById(R.id.l_list);\n\n        NewQAAdapter adapter    = new NewQAAdapter(this);\n\n        final String[] data     = {\"Test 01\", \"Test 02\", \"Test 03\", \"Test 04\", \"Test 05\", \"Test 06\", \"Test 07\", \"Test 08\",\n                                  \"Test 09\", \"Test 10\"};\n\n        adapter.setData(data);\n        mList.setAdapter(adapter);\n\n        ActionItem addItem      = new ActionItem(ID_ADD, \"Add\", getResources().getDrawable(R.drawable.ic_add));\n        ActionItem acceptItem   = new ActionItem(ID_ACCEPT, \"Accept\", getResources().getDrawable(R.drawable.ic_accept));\n        ActionItem uploadItem   = new ActionItem(ID_UPLOAD, \"Upload\", getResources().getDrawable(R.drawable.ic_up));\n\n<｜fim▁hole｜>        mQuickAction.addActionItem(uploadItem);\n\n        //setup the action item click listener\n        mQuickAction.setOnActionItemClickListener(new QuickAction.OnActionItemClickListener() {\n            @Override\n            public void onItemClick(QuickAction quickAction, int pos, int actionId) {\n                ActionItem actionItem = quickAction.getActionItem(pos);\n\n                if (actionId == ID_ADD) { //Add item selected\n                    Toast.makeText(getApplicationContext(), \"Add item selected on row \" + mSelectedRow, Toast.LENGTH_SHORT).show();\n                } else {\n                    Toast.makeText(getApplicationContext(), actionItem.getTitle() + \" item selected on row \" \n                            + mSelectedRow, Toast.LENGTH_SHORT).show();\n                }   \n            }\n        });\n\n        //setup on dismiss listener, set the icon back to normal\n        mQuickAction.setOnDismissListener(new PopupWindow.OnDismissListener() {         \n            @Override\n            public void onDismiss() {\n                mMoreIv.setImageResource(R.drawable.ic_list_more);\n            }\n        });\n\n        mList.setOnItemClickListener(new OnItemClickListener() {\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\n                mSelectedRow = position; //set the selected row\n\n                mQuickAction.show(view);\n\n                //change the right arrow icon to selected state \n                mMoreIv = (ImageView) view.findViewById(R.id.i_more);\n                mMoreIv.setImageResource(R.drawable.ic_list_more_selected);\n            }\n        });\n    }\n}<｜fim▁end｜>",
    "response": "        final QuickAction mQuickAction  = new QuickAction(this);\n\n        mQuickAction.addActionItem(addItem);\n        mQuickAction.addActionItem(acceptItem);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package Feb2021Leetcode;\n\npublic class _0669TrimABinarySearchTree {\n    static public class TreeNode {\n        int val;\n        TreeNode left;\n        TreeNode right;\n\n        TreeNode() {\n        }\n\n        TreeNode(int val) {\n            this.val = val;\n        }\n\n        TreeNode(int val, TreeNode left, TreeNode right) {\n            this.val = val;\n            this.left = left;\n<｜fim▁hole｜>\n    public static void main(String[] args) {\n        TreeNode tn = new TreeNode(1);\n        tn.left = new TreeNode(0);\n        tn.right = new TreeNode(2);\n        tn = trimBST(tn, 1, 2);\n        preOrder(tn);\n        System.out.println();\n\n        tn = new TreeNode(3);\n        tn.left = new TreeNode(0);\n        tn.right = new TreeNode(4);\n        tn.left.right = new TreeNode(2);\n        tn.left.right.left = new TreeNode(1);\n        tn = trimBST(tn, 1, 3);\n        preOrder(tn);\n        System.out.println();\n    }\n\n    public static void preOrder(TreeNode root) {\n        if (root == null)\n            return;\n        preOrder(root.left);\n        System.out.print(root.val + \"/\");\n        preOrder(root.right);\n    }\n\n    public static TreeNode trimBST(TreeNode root, int low, int high) {\n\n    }\n\n}<｜fim▁end｜>",
    "response": "            this.right = right;\n        }\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.falcon.validation;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.InputStream;\nimport java.util.Map;\n\nimport org.apache.falcon.entity.ClusterHelper;\nimport org.apache.falcon.entity.v0.EntityType;\nimport org.apache.falcon.entity.v0.cluster.Cluster;\nimport org.apache.falcon.entity.v0.cluster.Interface;\nimport org.apache.falcon.entity.v0.cluster.Interfacetype;\nimport org.apache.falcon.resource.TestContext;\nimport org.testng.Assert;\nimport org.testng.annotations.BeforeClass;\n<｜fim▁hole｜>    private final TestContext context = new TestContext();\n    private Map<String, String> overlay;\n\n    @BeforeClass\n    public void setup() throws Exception {\n        TestContext.prepare();\n    }\n\n    /**\n     * Positive test.\n     *\n     * @throws Exception\n     */\n    @Test\n    public void testClusterEntityWithValidInterfaces() throws Exception {\n        overlay = context.getUniqueOverlay();\n        overlay.put(\"colo\", \"default\");\n        ClientResponse response = context.submitToFalcon(TestContext.CLUSTER_TEMPLATE, overlay, EntityType.CLUSTER);\n        context.assertSuccessful(response);\n    }\n\n    @DataProvider(name = \"interfaceToInvalidURLs\")\n    public Object[][] createInterfaceToInvalidURLData() {\n        return new Object[][] {\n            // TODO FileSystem validates invalid hftp url, does NOT fail\n            // {Interfacetype.READONLY, \"hftp://localhost:41119\"},\n            {Interfacetype.READONLY, \"\"},\n            {Interfacetype.READONLY, \"localhost:41119\"},\n            {Interfacetype.WRITE, \"write-interface:9999\"},\n            {Interfacetype.WRITE, \"hdfs://write-interface:9999\"},\n            {Interfacetype.EXECUTE, \"execute-interface:9999\"},\n            {Interfacetype.WORKFLOW, \"workflow-interface:9999/oozie/\"},\n            {Interfacetype.WORKFLOW, \"http://workflow-interface:9999/oozie/\"},\n            {Interfacetype.MESSAGING, \"messaging-interface:9999\"},\n            {Interfacetype.MESSAGING, \"tcp://messaging-interface:9999\"},\n            {Interfacetype.REGISTRY, \"catalog-interface:9999\"},\n            {Interfacetype.REGISTRY, \"http://catalog-interface:9999\"},\n        };\n    }\n\n    @Test (dataProvider = \"interfaceToInvalidURLs\")\n    public void testClusterEntityWithInvalidInterfaces(Interfacetype interfacetype, String endpoint)\n        throws Exception {\n        overlay = context.getUniqueOverlay();\n        String filePath = TestContext.overlayParametersOverTemplate(TestContext.CLUSTER_TEMPLATE, overlay);\n        InputStream stream = new FileInputStream(filePath);\n        Cluster cluster = (Cluster) EntityType.CLUSTER.getUnmarshaller().unmarshal(stream);\n        Assert.assertNotNull(cluster);\n        cluster.setColo(\"default\");  // validations will be ignored if not default & tests fail\n\n        Interface anInterface = ClusterHelper.getInterface(cluster, interfacetype);\n        anInterface.setEndpoint(endpoint);\n\n        File tmpFile = TestContext.getTempFile();\n        EntityType.CLUSTER.getMarshaller().marshal(cluster, tmpFile);\n        ClientResponse response = context.submitFileToFalcon(EntityType.CLUSTER, tmpFile.getAbsolutePath());\n        context.assertFailure(response);\n    }\n}<｜fim▁end｜>",
    "response": "import org.testng.annotations.DataProvider;\nimport org.testng.annotations.Test;\n\nimport com.sun.jersey.api.client.ClientResponse;\n\npublic class ClusterEntityValidationIT {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>import org.junit.runner.RunWith;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = DriverApplication.class)\n@ActiveProfiles(\"test\")\npublic abstract class AbstractTest {\n}<｜fim▁end｜>",
    "response": "package br.com.nineninetaxis.driver;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package mzsJVM.NWNX;\n\npublic class CreatureScript {\n    public static final int OnHeartbeat = 0;\n    public static final int OnNotice = 1;\n    public static final int OnSpellCastAt = 2;\n    public static final int OnMeleeAttacked = 3;\n<｜fim▁hole｜>    public static final int OnDisturbed = 5;\n    public static final int OnEndCombatRound = 6;\n    public static final int OnDialogue = 7;\n    public static final int OnSpawnIn = 8;\n    public static final int OnRested = 9;\n    public static final int OnDeath = 10;\n    public static final int OnUserDefinedEvent = 11;\n    public static final int OnBlockedByDoor = 12;\n}<｜fim▁end｜>",
    "response": "    public static final int OnDamaged = 4;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.temenos.interaction.rimdsl.formatting;\n\nimport static org.junit.Assert.*;\n\nimport java.io.IOException;\nimport java.net.URL;\n\nimport javax.inject.Inject;\n\nimport org.eclipse.xtext.formatting.INodeModelFormatter;\nimport org.eclipse.xtext.junit4.InjectWith;\nimport org.eclipse.xtext.junit4.XtextRunner;\nimport org.eclipse.xtext.junit4.util.ParseHelper;\nimport org.eclipse.xtext.nodemodel.ICompositeNode;\nimport org.eclipse.xtext.parser.IParseResult;\nimport org.eclipse.xtext.resource.XtextResource;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport com.google.common.base.Charsets;\n<｜fim▁hole｜>import java.io.BufferedReader;\nimport java.io.StringReader;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@RunWith(XtextRunner.class)\n@InjectWith(RIMDslInjectorProvider.class)\npublic class FormatterTest {\n\n    @Inject\n    ParseHelper<DomainModel> parser;\n\n    @Inject\n    INodeModelFormatter formatter;\n\n    @Test\n    public void testFormatting() throws Exception {\n        String text = loadTestRIM(\"Simple.rim\");\n        DomainModel domainModel = parser.parse(text);\n        IParseResult parseResult = ((XtextResource) domainModel.eResource()).getParseResult();\n        assertNotNull(parseResult);\n        ICompositeNode rootNode = parseResult.getRootNode();\n        String formattedText = formatter.format(rootNode, 0, text.length()).getFormattedText();\n        assertEquals(toNormalizedLineList(text),toNormalizedLineList(formattedText));\n    }\n\n    @Test\n    public void testFormattingWithDomain() throws Exception {\n        String text = loadTestRIM(\"TestFormat.rim\");\n        DomainModel domainModel = parser.parse(text);\n        IParseResult parseResult = ((XtextResource) domainModel.eResource()).getParseResult();\n        assertNotNull(parseResult);\n        ICompositeNode rootNode = parseResult.getRootNode();\n        String formattedText = formatter.format(rootNode, 0, text.length()).getFormattedText();\n        assertEquals(toNormalizedLineList(text),toNormalizedLineList(formattedText));\n    }\n\n    private String loadTestRIM(String rimPath) throws IOException {\n        URL url = Resources.getResource(rimPath);\n        String rim = Resources.toString(url, Charsets.UTF_8);\n        return rim;\n    }\n\n    private String toNormalizedLineList(String source) throws IOException {\n        StringBuffer lines = new StringBuffer();\n\n        BufferedReader reader = new BufferedReader(new StringReader(source));\n\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n            line = line.trim();\n            if (!line.equals(\"\"))\n              lines.append(line.trim()).append('\\n');\n        }\n        return lines.toString();\n    }\n\n}<｜fim▁end｜>",
    "response": "import com.google.common.io.Resources;\nimport com.temenos.interaction.rimdsl.RIMDslInjectorProvider;\nimport com.temenos.interaction.rimdsl.rim.DomainModel;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jenkins.ci.plugins.keyboard_shortcuts;\n\nimport hudson.Extension;\nimport hudson.model.AbstractProject;\nimport hudson.model.Item;\nimport hudson.model.PageDecorator;\nimport hudson.model.TopLevelItem;\nimport hudson.model.Job;\nimport hudson.model.PermalinkProjectAction.Permalink;\nimport hudson.model.User;\nimport hudson.model.View;\n\nimport java.util.TreeMap;\n\nimport jenkins.model.Jenkins;\nimport jenkins.model.ParameterizedJobMixIn;\nimport net.sf.json.JSONArray;\nimport net.sf.json.JSONObject;\n\nimport org.apache.commons.lang.StringUtils;\nimport org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.Stapler;\nimport org.kohsuke.stapler.StaplerRequest;\n\n@Extension\npublic final class KeyboardShortcutsPageDecorator extends PageDecorator {\n    public static String getAllJobsAsJson() {\n<｜fim▁hole｜>    public static String getAllNodesAsJson() {\n        return NodeUtils.getAllNodesAsJsonArray().toString();\n    }\n\n    public static String getAllPermalinksAsJson() {\n        final TopLevelItem topLevelItem = JobUtils.getJob();\n\n        if (topLevelItem != null) {\n            for (final Job<?, ?> job : topLevelItem.getAllJobs()) {\n                final JSONArray permalinks = new JSONArray();\n\n                int idx = 0;\n                for (final Permalink permalink : job.getPermalinks()) {\n                    if (permalink.resolve(job) != null) {\n                        final TreeMap<String, String> map = new TreeMap<String, String>();\n                        map.put(\"idx\", \"ks_selector_\" + Integer.toString(idx++));\n                        map.put(\"url\", permalink.getId());\n                        map.put(\"name\", permalink.getDisplayName());\n                        permalinks.add(JSONObject.fromObject(map));\n                    }\n                }\n\n                return permalinks.toString();\n            }\n        }\n\n        return \"undefined\";\n    }\n\n    public static String getAllViewJobNamesAsJson() {\n        final View view = ViewUtils.getView();\n\n        if (view != null) {\n            final JSONArray viewJobNames = new JSONArray();\n\n            for (final TopLevelItem topLevelItem : view.getItems()) {\n                viewJobNames.add(topLevelItem.getDisplayName());\n            }\n\n            return viewJobNames.toString();\n        }\n\n        return \"undefined\";\n    }\n\n    public static String getAllViewsAsJson() {\n        return ViewUtils.getAllViewsAsJsonArray().toString();\n    }\n\n    public static String getBaseJobUrl() {\n        final Item job = JobUtils.getJob();\n\n        if (job != null) {\n            return job.getUrl();\n        }\n\n        return \"undefined\";\n    }\n\n    public static String getBaseUrl() {\n        final String rootUrl = Jenkins.getInstance().getRootUrl();\n\n        if (StringUtils.isNotEmpty(rootUrl)) {\n            return rootUrl;\n        }\n\n        return Jenkins.getInstance().getRootUrlFromRequest();\n    }\n\n    public static String getBaseViewUrl() {\n        final View view = ViewUtils.getView();\n        if (view != null) {\n            final String viewUrl = view.getUrl();\n            if (StringUtils.isEmpty(viewUrl)) {\n                return \"/\";\n            }\n\n            return viewUrl;\n        }\n\n        return \"undefined\";\n    }\n\n    public static boolean isDisabled() {\n        return isDisabled(User.current());\n    }\n\n    public static boolean isDisabled(\n            final KeyboardShortcutsUserProperty property) {\n        if (property == null) {\n            return KeyboardShortcutsUserProperty.DEFAULT_DISABLED;\n        }\n\n        return property.isDisabled();\n    }\n\n    public static boolean isDisabled(final User user) {\n        if (user == null) {\n            return KeyboardShortcutsUserProperty.DEFAULT_DISABLED;\n        }\n\n        return isDisabled(user.getProperty(KeyboardShortcutsUserProperty.class));\n    }\n\n    public static boolean isJobPage() {\n        return JobUtils.getJob() != null;\n    }\n\n    public static boolean isJobParameterized() {\n        // if job have build parameters\n        return isJobParameterized(Stapler.getCurrentRequest());\n    }\n\n    public static boolean isJobParameterized(StaplerRequest request) {\n        // if job have build parameters\n        if (request == null) {\n            return false;\n        }\n\n        if (JobUtils.getJob() != null) {\n            TopLevelItem topLevelItem = JobUtils.getJob();\n            for (final Job<?, ?> job : topLevelItem.getAllJobs()) {\n                if(job instanceof ParameterizedJobMixIn.ParameterizedJob) {\n                    ParameterizedJobMixIn.ParameterizedJob pj = (ParameterizedJobMixIn.ParameterizedJob) job;\n                    return pj.isParameterized();\n                }\n            }\n        }\n        return false;\n    }\n\n    public static boolean isNodePage() {\n        return isNodePage(Stapler.getCurrentRequest());\n    }\n\n    public static boolean isNodePage(StaplerRequest request) {\n        if (request == null) {\n            return false;\n        }\n\n        return request.getPathInfo().endsWith(\"/computer/\");\n    }\n\n    public static boolean isSearchPage() {\n        return isSearchPage(Stapler.getCurrentRequest());\n    }\n\n    public static boolean isSearchPage(StaplerRequest request) {\n        if (request == null) {\n            return false;\n        }\n\n        return request.getPathInfo().contains(\"/search/\");\n    }\n\n    public static boolean isViewPage() {\n        return !isJobPage() && ViewUtils.getView() != null;\n    }\n\n    @DataBoundConstructor\n    public KeyboardShortcutsPageDecorator() {\n        super();\n    }\n\n    @Override\n    public String getDisplayName() {\n        return Messages.Keyboard_Shortcuts_Plugin_DisplayName();\n    }\n}<｜fim▁end｜>",
    "response": "        return JobUtils.getAllJobsAsJsonArray().toString();\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.example.a18balanagav.equationbalancer;\n\npublic class Element {\n\n    private String name;\n    private String compound;\n    private int coefficient;\n    private int subscript;\n    private int num;\n\n    public Element(String n, String comp, int coeff, int sub, int nu) {\n        name = n;\n        compound = comp;\n        coefficient = coeff;\n        subscript = sub;\n        num = nu;\n    }\n\n    public Element(String n, String comp, int nu) {\n        name = n;\n        compound = comp;\n        num = nu;\n    }\n\n    //=========ACCESSORS AND MODIFIERS==================\n    public String getName(){\n        return name;\n<｜fim▁hole｜>\n    public void setName(String n){\n        name = n;\n    }\n\n    public String getCompound(){\n        return compound;\n    }\n\n    public void setCompound(String c){\n        compound = c;\n    }\n\n    /* DON'T USE THESE TWO FUNCTIONS: USE COEFFICIENT AND SUBSCRIPT INSTEAD\n    public int getNum(){\n        return num;\n    }\n\n    public void setNum(int n){\n        num = n;\n    } */\n\n    public int getCoefficient(){\n        return coefficient;\n    }\n\n    public void setCoefficient(int c){\n        coefficient = c;\n        num = coefficient * subscript;\n    }\n\n    public void setSubscript(int s){\n        subscript = s;\n        num = coefficient * subscript;\n    }\n\n    public int getSubscript(){\n        return subscript;\n    }\n\n    //====== update num = subscript * coefficient; at the end of each method======================\n}<｜fim▁end｜>",
    "response": "    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.fangxuele.tool.push.logic.msgsender;\n\nimport cn.hutool.extra.mail.MailAccount;\nimport cn.hutool.extra.mail.MailUtil;\nimport com.fangxuele.tool.push.App;\nimport com.fangxuele.tool.push.bean.MailMsg;\nimport com.fangxuele.tool.push.logic.PushControl;\nimport com.fangxuele.tool.push.logic.msgmaker.MailMsgMaker;\nimport lombok.extern.slf4j.Slf4j;\nimport org.apache.commons.collections.CollectionUtils;\nimport org.apache.commons.compress.utils.Lists;\nimport org.apache.commons.lang3.StringUtils;\nimport org.apache.commons.lang3.exception.ExceptionUtils;\n\nimport java.io.File;\nimport java.util.List;\n\n@Slf4j\npublic class MailMsgSender implements IMsgSender {\n\n    public volatile static MailAccount mailAccount;\n\n    private MailMsgMaker mailMsgMaker;\n\n    public MailMsgSender() {\n        mailMsgMaker = new MailMsgMaker();\n        mailAccount = getMailAccount();\n    }\n\n    @Override\n    public SendResult send(String[] msgData) {\n        SendResult sendResult = new SendResult();\n\n        try {\n            MailMsg mailMsg = mailMsgMaker.makeMsg(msgData);\n            List<String> tos = Lists.newArrayList();\n            tos.add(msgData[0]);\n            if (PushControl.dryRun) {\n                sendResult.setSuccess(true);\n                return sendResult;\n            } else {\n                List<String> ccList = null;\n                if (StringUtils.isNotBlank(mailMsg.getMailCc())) {\n                    ccList = Lists.newArrayList();\n                    ccList.add(mailMsg.getMailCc());\n                }\n                if (CollectionUtils.isEmpty(mailMsg.getMailFiles())) {\n                    MailUtil.send(mailAccount, tos, ccList, null, mailMsg.getMailTitle(), mailMsg.getMailContent(), true);\n                } else {\n                    MailUtil.send(mailAccount, tos, ccList, null, mailMsg.getMailTitle(), mailMsg.getMailContent(), true, mailMsg.getMailFiles().toArray(new File[0]));\n                }\n                sendResult.setSuccess(true);\n            }\n        } catch (Exception e) {\n            sendResult.setSuccess(false);\n            sendResult.setInfo(e.getMessage());\n            log.error(ExceptionUtils.getStackTrace(e));\n        }\n\n        return sendResult;\n    }\n\n    @Override\n    public SendResult asyncSend(String[] msgData) {\n        return null;\n    }\n\n    public SendResult sendTestMail(String tos) {\n        SendResult sendResult = new SendResult();\n\n        try {\n            MailUtil.send(mailAccount, tos, \"这是一封来自WePush的测试邮件\",\n                    \"<h1>恭喜，配置正确，邮件发送成功！</h1><p>来自WePush，一款专注于批量推送的小而美的工具。</p>\", true);\n            sendResult.setSuccess(true);\n        } catch (Exception e) {\n            sendResult.setSuccess(false);\n            sendResult.setInfo(e.getMessage());\n            log.error(e.toString());\n        }\n\n<｜fim▁hole｜>     * 发送推送结果\n     *\n     * @param tos\n     * @return\n     */\n    public SendResult sendPushResultMail(List<String> tos, String title, String content, File[] files) {\n        SendResult sendResult = new SendResult();\n\n        try {\n            MailUtil.send(mailAccount, tos, title, content, true, files);\n            sendResult.setSuccess(true);\n        } catch (Exception e) {\n            sendResult.setSuccess(false);\n            sendResult.setInfo(e.getMessage());\n            log.error(e.toString());\n        }\n\n        return sendResult;\n    }\n\n    /**\n     * 获取E-Mail发送客户端\n     *\n     * @return MailAccount\n     */\n    private static MailAccount getMailAccount() {\n        if (mailAccount == null) {\n            synchronized (MailMsgSender.class) {\n                if (mailAccount == null) {\n                    String mailHost = App.config.getMailHost();\n                    String mailPort = App.config.getMailPort();\n                    String mailFrom = App.config.getMailFrom();\n                    String mailUser = App.config.getMailUser();\n                    String mailPassword = App.config.getMailPassword();\n\n                    mailAccount = new MailAccount();\n                    mailAccount.setHost(mailHost);\n                    mailAccount.setPort(Integer.valueOf(mailPort));\n                    mailAccount.setAuth(true);\n                    mailAccount.setFrom(mailFrom);\n                    mailAccount.setUser(mailUser);\n                    mailAccount.setPass(mailPassword);\n                    mailAccount.setSslEnable(App.config.isMailUseSSL());\n                    mailAccount.setStarttlsEnable(App.config.isMailUseStartTLS());\n                }\n            }\n        }\n        return mailAccount;\n    }\n}<｜fim▁end｜>",
    "response": "        return sendResult;\n    }\n\n    /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.cloud.tools.eclipse.appengine.validation;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertTrue;\n\nimport com.google.cloud.tools.eclipse.test.util.project.TestProjectCreator;\nimport com.google.cloud.tools.eclipse.ui.util.WorkbenchUtil;\nimport java.io.IOException;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport org.eclipse.core.resources.IFile;\nimport org.eclipse.core.resources.IMarker;\nimport org.eclipse.core.resources.IProject;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.core.runtime.NullProgressMonitor;\nimport org.eclipse.jface.text.IDocument;\nimport org.eclipse.ui.IEditorPart;\nimport org.eclipse.ui.IWorkbench;\nimport org.eclipse.ui.PlatformUI;\nimport org.junit.Before;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.mockito.Mockito;\nimport org.w3c.dom.Document;\nimport org.xml.sax.SAXException;\n\npublic class XsltQuickFixPluginTest {\n\n  private static final String APPLICATION_XML =\n      \"<appengine-web-app xmlns='http://appengine.google.com/ns/1.0'>\"\n      + \"<application>\"\n      + \"</application>\"\n      + \"</appengine-web-app>\";\n  private static final String VERSION_XML =\n      \"<appengine-web-app xmlns='http://appengine.google.com/ns/1.0'>\"\n      + \"<version>\"\n      + \"</version>\"\n      + \"</appengine-web-app>\";\n\n  private IFile file;\n\n  @Rule public TestProjectCreator projectCreator = new TestProjectCreator();\n\n  @Before\n  public void setup() {\n    IProject project = projectCreator.getProject();\n    file = project.getFile(\"testdata.xml\");\n  }\n\n  @Test\n  public void testRun_removeApplicationElement() throws IOException, ParserConfigurationException,\n      SAXException, CoreException {\n    file.create(ValidationTestUtils.stringToInputStream(APPLICATION_XML), IFile.FORCE, null);\n\n    IMarker marker = Mockito.mock(IMarker.class);\n    Mockito.when(marker.getResource()).thenReturn(file);\n\n    XsltQuickFix fix = new XsltQuickFix(\"/xslt/removeApplication.xsl\",\n        Messages.getString(\"remove.application.element\"));\n    fix.run(marker);\n\n    DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n    builderFactory.setNamespaceAware(true);\n    DocumentBuilder builder = builderFactory.newDocumentBuilder();\n    Document transformed = builder.parse(file.getContents());\n    assertEquals(0, transformed.getDocumentElement().getChildNodes().getLength());\n  }\n\n  @Test\n  public void testRun_removeVersionElement() throws IOException, ParserConfigurationException,\n      SAXException, CoreException {\n    file.create(ValidationTestUtils.stringToInputStream(\n        VERSION_XML), IFile.FORCE, null);\n    IMarker marker = Mockito.mock(IMarker.class);\n    Mockito.when(marker.getResource()).thenReturn(file);\n\n    XsltQuickFix fix = new XsltQuickFix(\"/xslt/removeVersion.xsl\",\n        Messages.getString(\"remove.version.element\"));\n    fix.run(marker);\n\n    DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n    builderFactory.setNamespaceAware(true);\n    DocumentBuilder builder = builderFactory.newDocumentBuilder();\n    Document transformed = builder.parse(file.getContents());\n    assertEquals(0, transformed.getDocumentElement().getChildNodes().getLength());\n\n    assertTrue(file.isSynchronized(0));\n    assertEquals(1, file.getHistory(null).length);\n  }\n\n  @Test\n  public void testRun_existingEditor() throws CoreException {\n    file.create(ValidationTestUtils.stringToInputStream(APPLICATION_XML), IFile.FORCE, null);\n\n    IWorkbench workbench = PlatformUI.getWorkbench();\n    IEditorPart editor = WorkbenchUtil.openInEditor(workbench, file);\n\n    IDocument preDocument = XsltQuickFix.getCurrentDocument(file);\n    String preContents = preDocument.get();\n    assertTrue(preContents.contains(\"application\"));\n\n    IMarker marker = Mockito.mock(IMarker.class);\n    Mockito.when(marker.getResource()).thenReturn(file);\n    XsltQuickFix fix = new XsltQuickFix(\"/xslt/removeApplication.xsl\",\n        Messages.getString(\"remove.application.element\"));\n    fix.run(marker);\n\n    IDocument document = XsltQuickFix.getCurrentDocument(file);\n    String contents = document.get();\n    assertFalse(contents.contains(\"application\"));\n\n    // https://github.com/GoogleCloudPlatform/google-cloud-eclipse/issues/1527\n    editor.doSave(new NullProgressMonitor());\n  }\n\n  @Test\n  public void testGetCurrentDocument_existingEditor() throws CoreException {\n    file.create(ValidationTestUtils.stringToInputStream(APPLICATION_XML), IFile.FORCE, null);\n\n    IWorkbench workbench = PlatformUI.getWorkbench();\n    IEditorPart editor = WorkbenchUtil.openInEditor(workbench, file);\n\n<｜fim▁hole｜>\n  @Test\n  public void testGetCurrentDocument_noEditor() throws CoreException {\n    file.create(ValidationTestUtils.stringToInputStream(APPLICATION_XML), IFile.FORCE, null);\n    assertNull(XsltQuickFix.getCurrentDocument(file));\n  }\n\n}<｜fim▁end｜>",
    "response": "    assertNotNull(XsltQuickFix.getCurrentDocument(file));\n\n    // https://github.com/GoogleCloudPlatform/google-cloud-eclipse/issues/1527\n    editor.doSave(new NullProgressMonitor());\n  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.g43riko.object;\n\nimport com.g43riko.rendering.RenderingEngine;\n\n<｜fim▁hole｜>    private GVector3f scale;\n\n    public GameObject(){\n        pos = new GVector3f();\n        rot = new GVector3f();\n        scale = new GVector3f(1);\n    }\n\n    public void input(){\n\n    }\n\n    public void render(RenderingEngine renderingEngine){\n\n    }\n\n    public void update(){\n\n    }\n}<｜fim▁end｜>",
    "response": "import glib.util.vector.GVector3f;\n\npublic abstract class GameObject {\n    private GVector3f pos;\n    private GVector3f rot;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.cassandra.concurrent;\n\nimport java.util.EnumMap;\nimport java.util.concurrent.*;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.apache.cassandra.net.MessagingService;\nimport org.apache.cassandra.tracing.TraceState;\nimport org.apache.cassandra.utils.FBUtilities;\n\nimport static org.apache.cassandra.config.DatabaseDescriptor.*;\n\npublic class StageManager\n{\n    private static final Logger logger = LoggerFactory.getLogger(StageManager.class);\n\n    private static final EnumMap<Stage, TracingAwareExecutorService> stages = new EnumMap<Stage, TracingAwareExecutorService>(Stage.class);\n\n    public static final long KEEPALIVE = 60; // seconds to keep \"extra\" threads alive for when idle\n\n    static\n    {\n        stages.put(Stage.MUTATION, multiThreadedLowSignalStage(Stage.MUTATION, getConcurrentWriters()));\n        stages.put(Stage.COUNTER_MUTATION, multiThreadedLowSignalStage(Stage.COUNTER_MUTATION, getConcurrentCounterWriters()));\n        stages.put(Stage.READ, multiThreadedLowSignalStage(Stage.READ, getConcurrentReaders()));\n        stages.put(Stage.REQUEST_RESPONSE, multiThreadedLowSignalStage(Stage.REQUEST_RESPONSE, FBUtilities.getAvailableProcessors()));\n        stages.put(Stage.INTERNAL_RESPONSE, multiThreadedStage(Stage.INTERNAL_RESPONSE, FBUtilities.getAvailableProcessors()));\n        // the rest are all single-threaded\n        stages.put(Stage.GOSSIP, new JMXEnabledThreadPoolExecutor(Stage.GOSSIP));\n        stages.put(Stage.ANTI_ENTROPY, new JMXEnabledThreadPoolExecutor(Stage.ANTI_ENTROPY));\n        stages.put(Stage.MIGRATION, new JMXEnabledThreadPoolExecutor(Stage.MIGRATION));\n        stages.put(Stage.MISC, new JMXEnabledThreadPoolExecutor(Stage.MISC));\n        stages.put(Stage.READ_REPAIR, multiThreadedStage(Stage.READ_REPAIR, FBUtilities.getAvailableProcessors()));\n        stages.put(Stage.TRACING, tracingExecutor());\n\n        stages.put(Stage.READ_REMOVE, new JMXEnabledThreadPoolExecutor(Stage.READ_REMOVE));\n    }\n\n    private static ExecuteOnlyExecutor tracingExecutor()\n    {\n        RejectedExecutionHandler reh = new RejectedExecutionHandler()\n        {\n            public void rejectedExecution(Runnable r, ThreadPoolExecutor executor)\n            {\n                MessagingService.instance().incrementDroppedMessages(MessagingService.Verb._TRACE);\n            }\n        };\n        return new ExecuteOnlyExecutor(1,\n                                       1,\n                                       KEEPALIVE,\n                                       TimeUnit.SECONDS,\n                                       new ArrayBlockingQueue<Runnable>(1000),\n                                       new NamedThreadFactory(Stage.TRACING.getJmxName()),\n                                       reh);\n    }\n\n    private static JMXEnabledThreadPoolExecutor multiThreadedStage(Stage stage, int numThreads)\n    {\n        return new JMXEnabledThreadPoolExecutor(numThreads,\n                                                KEEPALIVE,\n                                                TimeUnit.SECONDS,\n                                                new LinkedBlockingQueue<Runnable>(),\n                                                new NamedThreadFactory(stage.getJmxName()),\n                                                stage.getJmxType());\n    }\n\n    private static TracingAwareExecutorService multiThreadedLowSignalStage(Stage stage, int numThreads)\n    {\n        return JMXEnabledSharedExecutorPool.SHARED.newExecutor(numThreads, Integer.MAX_VALUE, stage.getJmxName(), stage.getJmxType());\n    }\n\n    /**\n     * Retrieve a stage from the StageManager\n     * @param stage name of the stage to be retrieved.\n     */\n    public static TracingAwareExecutorService getStage(Stage stage)\n    {\n        return stages.get(stage);\n    }\n\n    /**\n     * This method shuts down all registered stages.\n     */\n    public static void shutdownNow()\n    {\n        for (Stage stage : Stage.values())\n        {\n            StageManager.stages.get(stage).shutdownNow();\n        }\n    }\n\n    /**\n     * A TPE that disallows submit so that we don't need to worry about unwrapping exceptions on the\n     * tracing stage.  See CASSANDRA-1123 for background.\n     */\n    private static class ExecuteOnlyExecutor extends ThreadPoolExecutor implements TracingAwareExecutorService\n    {\n        public ExecuteOnlyExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)\n<｜fim▁hole｜>\n        public void execute(Runnable command, TraceState state)\n        {\n            assert state == null;\n            super.execute(command);\n        }\n\n        public void executeRemovable(Runnable command, TraceState state)\n        {\n            execute(command, state);\n        }\n\n        public void maybeExecuteImmediately(Runnable command)\n        {\n            execute(command);\n        }\n\n        public void maybeExecuteImmediatelyRemovable(Runnable command)\n        {\n            maybeExecuteImmediately(command);\n        }\n\n        public void removeCommand(Object command)\n        {\n            // nothing\n        }\n\n        @Override\n        public Future<?> submit(Runnable task)\n        {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public <T> Future<T> submit(Runnable task, T result)\n        {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public <T> Future<T> submit(Callable<T> task)\n        {\n            throw new UnsupportedOperationException();\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        {\n            super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package gui;\n\nimport java.awt.Graphics;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseMotionListener;\nimport java.awt.image.BufferedImage;\n\nimport javax.swing.JTextArea;\n\nimport network.Writable;\nimport main.MouseListener;\n\npublic class TextEnterField extends JTextArea{\n\n    private static final long serialVersionUID = 2515312573501882552L;\n\n    private final MouseListener mouse;\n    private final JTextArea me;\n\n    private BufferedImage ima;\n\n    private static final int xSize = 300;\n    private static final int ySize = 100;\n\n    private Writable write;\n\n    public TextEnterField(MouseListener m){\n        mouse = m;\n        me = this;\n\n        setLineWrap(true);\n        setWrapStyleWord(true);\n        setBounds(0, 0, xSize, ySize);\n        setFocusable(true);\n\n<｜fim▁hole｜>        addKeyListener(new KeyListener() {\n            @Override\n            public void keyTyped(KeyEvent e) {\n            }\n            @Override\n            public void keyReleased(KeyEvent e) {\n            }\n            @SuppressWarnings(\"deprecation\")\n            @Override\n            public void keyPressed(KeyEvent e) {\n                if(e.getKeyChar() == KeyEvent.VK_ENTER){\n                    if(e.isControlDown()){\n                        e.setModifiers(0);\n                    }else{\n                        System.out.println(getText()+\" OK\"); //TODO senden\n                        if(write != null)\n                            write.write(getText());\n                        e.consume();\n                        setText(\"\");\n                    }\n                }\n            }\n        });\n        addMouseListener(new java.awt.event.MouseListener() {\n            @Override\n            public void mouseReleased(MouseEvent e) {\n                if(e.getButton() == MouseEvent.BUTTON1)\n                    mouse.left = false;\n                if(e.getButton() == MouseEvent.BUTTON3)\n                    mouse.right = false;\n            }\n            @Override\n            public void mousePressed(MouseEvent e) {\n                if(e.getButton() == MouseEvent.BUTTON1)\n                    mouse.left = true;\n                if(e.getButton() == MouseEvent.BUTTON3)\n                    mouse.right = true;\n            }\n            @Override\n            public void mouseExited(MouseEvent e) {\n            }\n            @Override\n            public void mouseEntered(MouseEvent e) {\n            }\n            @Override\n            public void mouseClicked(MouseEvent e) {\n                if(e.getButton() == MouseEvent.BUTTON1)\n                    mouse.leftClicked = true;\n                if(e.getButton() == MouseEvent.BUTTON3)\n                    mouse.rightClicked = true;\n            }\n        });\n        addMouseMotionListener(new MouseMotionListener() {\n            @Override\n            public void mouseMoved(MouseEvent e) {\n                mouse.x = e.getX()+me.getX();\n                mouse.y = e.getY()+me.getY();\n            }\n\n            @Override\n            public void mouseDragged(MouseEvent e) {\n                mouse.x = e.getX()+me.getX();\n                mouse.y = e.getY()+me.getY();\n            }\n        });\n    }\n\n    public void paintTheImage(Graphics g){\n        if(isVisible())\n            super.paintAll(g);\n        else\n            g.drawImage(ima, 0, 0, null);\n    }\n\n    @Override\n    public void paint(Graphics g) {\n        if(isVisible())\n            super.paint(ima.getGraphics());\n        g.drawImage(ima, 0, 0, null);\n    }\n\n    public void setWriteChannel(Writable w){\n        write = w;\n    }\n\n}<｜fim▁end｜>",
    "response": "        ima = new BufferedImage(xSize, ySize, BufferedImage.TYPE_INT_ARGB);\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amazonaws.services.kms.model;\n\nimport java.io.Serializable;\nimport com.amazonaws.AmazonWebServiceRequest;\n\npublic class DisableKeyRequest extends AmazonWebServiceRequest implements\n        Serializable, Cloneable {\n\n    /**\n<｜fim▁hole｜>     * Use the CMK's unique identifier or its Amazon Resource Name (ARN). For\n     * example:\n     * </p>\n     * <ul>\n     * <li>\n     * <p>\n     * Unique ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n     * </p>\n     * </li>\n     * <li>\n     * <p>\n     * ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-\n     * 56ef-1234567890ab\n     * </p>\n     * </li>\n     * </ul>\n     */\n    private String keyId;\n\n    /**\n     * <p>\n     * A unique identifier for the CMK.\n     * </p>\n     * <p>\n     * Use the CMK's unique identifier or its Amazon Resource Name (ARN). For\n     * example:\n     * </p>\n     * <ul>\n     * <li>\n     * <p>\n     * Unique ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n     * </p>\n     * </li>\n     * <li>\n     * <p>\n     * ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-\n     * 56ef-1234567890ab\n     * </p>\n     * </li>\n     * </ul>\n     * \n     * @param keyId\n     *        A unique identifier for the CMK.</p>\n     *        <p>\n     *        Use the CMK's unique identifier or its Amazon Resource Name (ARN).\n     *        For example:\n     *        </p>\n     *        <ul>\n     *        <li>\n     *        <p>\n     *        Unique ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n     *        </p>\n     *        </li>\n     *        <li>\n     *        <p>\n     *        ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-\n     *        56ef-1234567890ab\n     *        </p>\n     *        </li>\n     */\n\n    public void setKeyId(String keyId) {\n        this.keyId = keyId;\n    }\n\n    /**\n     * <p>\n     * A unique identifier for the CMK.\n     * </p>\n     * <p>\n     * Use the CMK's unique identifier or its Amazon Resource Name (ARN). For\n     * example:\n     * </p>\n     * <ul>\n     * <li>\n     * <p>\n     * Unique ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n     * </p>\n     * </li>\n     * <li>\n     * <p>\n     * ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-\n     * 56ef-1234567890ab\n     * </p>\n     * </li>\n     * </ul>\n     * \n     * @return A unique identifier for the CMK.</p>\n     *         <p>\n     *         Use the CMK's unique identifier or its Amazon Resource Name\n     *         (ARN). For example:\n     *         </p>\n     *         <ul>\n     *         <li>\n     *         <p>\n     *         Unique ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n     *         </p>\n     *         </li>\n     *         <li>\n     *         <p>\n     *         ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-\n     *         56ef-1234567890ab\n     *         </p>\n     *         </li>\n     */\n\n    public String getKeyId() {\n        return this.keyId;\n    }\n\n    /**\n     * <p>\n     * A unique identifier for the CMK.\n     * </p>\n     * <p>\n     * Use the CMK's unique identifier or its Amazon Resource Name (ARN). For\n     * example:\n     * </p>\n     * <ul>\n     * <li>\n     * <p>\n     * Unique ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n     * </p>\n     * </li>\n     * <li>\n     * <p>\n     * ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-\n     * 56ef-1234567890ab\n     * </p>\n     * </li>\n     * </ul>\n     * \n     * @param keyId\n     *        A unique identifier for the CMK.</p>\n     *        <p>\n     *        Use the CMK's unique identifier or its Amazon Resource Name (ARN).\n     *        For example:\n     *        </p>\n     *        <ul>\n     *        <li>\n     *        <p>\n     *        Unique ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n     *        </p>\n     *        </li>\n     *        <li>\n     *        <p>\n     *        ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-\n     *        56ef-1234567890ab\n     *        </p>\n     *        </li>\n     * @return Returns a reference to this object so that method calls can be\n     *         chained together.\n     */\n\n    public DisableKeyRequest withKeyId(String keyId) {\n        setKeyId(keyId);\n        return this;\n    }\n\n    /**\n     * Returns a string representation of this object; useful for testing and\n     * debugging.\n     *\n     * @return A string representation of this object.\n     *\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (getKeyId() != null)\n            sb.append(\"KeyId: \" + getKeyId());\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n\n        if (obj instanceof DisableKeyRequest == false)\n            return false;\n        DisableKeyRequest other = (DisableKeyRequest) obj;\n        if (other.getKeyId() == null ^ this.getKeyId() == null)\n            return false;\n        if (other.getKeyId() != null\n                && other.getKeyId().equals(this.getKeyId()) == false)\n            return false;\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int hashCode = 1;\n\n        hashCode = prime * hashCode\n                + ((getKeyId() == null) ? 0 : getKeyId().hashCode());\n        return hashCode;\n    }\n\n    @Override\n    public DisableKeyRequest clone() {\n        return (DisableKeyRequest) super.clone();\n    }\n}<｜fim▁end｜>",
    "response": "     * <p>\n     * A unique identifier for the CMK.\n     * </p>\n     * <p>\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.thoughtworks.go.server.web;\n\nimport com.thoughtworks.go.server.web.i18n.ResolvableViewableStatus;\nimport com.thoughtworks.go.util.json.JsonUrl;\nimport org.jmock.Expectations;\nimport org.jmock.Mockery;\nimport org.jmock.lib.legacy.ClassImposteriser;\nimport org.json.JSONException;\nimport org.junit.Test;\nimport org.skyscreamer.jsonassert.JSONAssert;\nimport org.springframework.mock.web.MockHttpServletRequest;\nimport org.springframework.mock.web.MockHttpServletResponse;\n\nimport java.util.ArrayList;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.thoughtworks.go.server.web.JsonRenderer.render;\nimport static com.thoughtworks.go.server.web.JsonView.asMap;\nimport static com.thoughtworks.go.server.web.i18n.CurrentStatus.WAITING;\nimport static org.hamcrest.core.Is.is;\nimport static org.junit.Assert.assertThat;\n\npublic class JsonViewTest {\n\n    private Mockery mockContext = new Mockery() {\n        {\n            setImposteriser(ClassImposteriser.INSTANCE);\n        }\n    };\n    private GoRequestContext requestContext = mockContext.mock(GoRequestContext.class);\n\n    @Test\n    public void testShouldReturnOutputWithoutWhitespaceThatIsNotAllowedInHeaders() throws Exception {\n        JsonView view = new JsonView(requestContext);\n        MockHttpServletResponse response = new MockHttpServletResponse();\n        Map<String, Object> map = new LinkedHashMap<>();\n        map.put(\"key\", \"\\r\\t\\n\");\n        view.renderMergedOutputModel(asMap(map), new MockHttpServletRequest(), response);\n        String json = response.getContentAsString();\n        JSONAssert.assertEquals(\"{\\n  \\\"key\\\": \\\"\\\\r\\t\\n\\\"\\n}\", json, true);\n    }\n\n    @Test\n    public void testShouldRenderEmptyMap() throws Exception {\n        JsonView view = new JsonView();\n        String json = view.renderJson(new LinkedHashMap());\n        JSONAssert.assertEquals(\"{}\", json, true);\n    }\n\n    @Test\n    public void testShouldRenderAllKeyValuePairsFromMap() throws Exception {\n        Map<String, Object> map = new LinkedHashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n\n        String json = new JsonView().renderJson(map);\n        JSONAssert.assertEquals(\"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\", json, true);\n    }\n\n    @Test\n    public void testShouldRenderNestedMaps() throws Exception {\n        Map<String, Object> map = new LinkedHashMap<>();\n        Map<String, Object> nestedMap = new LinkedHashMap<>();\n        nestedMap.put(\"keyA\", \"valueA\");\n        map.put(\"key1\", nestedMap);\n        JsonView view = new JsonView();\n\n        String json = view.renderJson(map);\n        JSONAssert.assertEquals(\"{\\\"key1\\\":{\\\"keyA\\\":\\\"valueA\\\"}}\", json, true);\n    }\n\n    @Test\n    public void testShouldRenderArray() throws Exception {\n        List list = new ArrayList();\n        Map<String, Object> nestedMap = new LinkedHashMap<>();\n        nestedMap.put(\"key1\", \"value1\");\n        list.add(nestedMap);\n        list.add(\"value2\");\n        JsonView view = new JsonView();\n\n        String json = view.renderJson(list);\n        JSONAssert.assertEquals(\"[{\\\"key1\\\":\\\"value1\\\"},\\\"value2\\\"]\", json, true);\n    }\n\n    @Test\n    public void testShouldRenderFakeMapsWithoutTheSurroundingMap() throws Exception {\n        List list = new ArrayList();\n        Map<String, Object> nestedMap = new LinkedHashMap<>();\n        nestedMap.put(\"key1\", \"value1\");\n        list.add(nestedMap);\n        list.add(\"value2\");\n        JsonView view = new JsonView();\n\n        String json = view.renderJson(asMap(list));\n        JSONAssert.assertEquals(\"[{\\\"key1\\\":\\\"value1\\\"},\\\"value2\\\"]\", json, true);\n    }\n\n    @Test\n    public void testShouldRenderI18n() throws JSONException {\n        Map<String, Object> map = new LinkedHashMap<>();\n        final String i18nMessage = \"waiting(zh_CN)\";\n        final ResolvableViewableStatus resolvableViewableStatus = new ResolvableViewableStatus(WAITING);\n        map.put(\"key1\", resolvableViewableStatus);\n<｜fim▁hole｜>            {\n                one(requestContext).getMessage(with(equal(resolvableViewableStatus)));\n                will(returnValue(i18nMessage));\n            }\n        });\n\n        String json = view.renderJson(map);\n        mockContext.assertIsSatisfied();\n        JSONAssert.assertEquals(\"{\\\"key1\\\":\\\"waiting(zh_CN)\\\"}\", json, true);\n    }\n\n    @Test\n    public void testShouldRenderUrlsWithContext() {\n        JsonUrl url = new JsonUrl(\"/foo/bar/baz\");\n\n        mockContext.checking(new Expectations() {\n            {\n                one(requestContext).getFullRequestPath();\n                will(returnValue(\"http://something/context\"));\n            }\n        });\n\n        String json = render(url, requestContext);\n        assertThat(json, is(\"\\\"http://something/context/foo/bar/baz\\\"\"));\n    }\n\n}<｜fim▁end｜>",
    "response": "        JsonView view = new JsonView(requestContext);\n\n        mockContext.checking(new Expectations() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.hoteia.qalingo.core.dao;\n\nimport java.util.Date;\nimport java.util.List;\n\nimport org.hibernate.Criteria;\nimport org.hibernate.criterion.Order;\nimport org.hibernate.criterion.Restrictions;\nimport org.hoteia.qalingo.core.domain.AbstractPaymentGateway;\nimport org.hoteia.qalingo.core.domain.PaymentGatewayOption;\nimport org.hoteia.qalingo.core.fetchplan.FetchPlan;\nimport org.hoteia.qalingo.core.fetchplan.common.FetchPlanGraphCommon;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.stereotype.Repository;\n\n@Repository(\"paymentGatewayDao\")\npublic class PaymentGatewayDao extends AbstractGenericDao {\n\n    private final Logger logger = LoggerFactory.getLogger(getClass());\n\n    public AbstractPaymentGateway getPaymentGatewayById(final Long paymentGatewayId, Object... params) {\n        Criteria criteria = createDefaultCriteria(AbstractPaymentGateway.class);\n\n        FetchPlan fetchPlan = handleSpecificFetchMode(criteria, params);\n\n        criteria.add(Restrictions.eq(\"id\", paymentGatewayId));\n        AbstractPaymentGateway paymentGateway = (AbstractPaymentGateway) criteria.uniqueResult();\n        if(paymentGateway != null){\n            paymentGateway.setFetchPlan(fetchPlan);\n        }\n        return paymentGateway;\n    }\n\n    public AbstractPaymentGateway getPaymentGatewayByCode(final String paymentGatewayCode, Object... params) {\n        Criteria criteria = createDefaultCriteria(AbstractPaymentGateway.class);\n\n        FetchPlan fetchPlan = handleSpecificFetchMode(criteria, params);\n\n        criteria.add(Restrictions.eq(\"code\", handleCodeValue(paymentGatewayCode)));\n        AbstractPaymentGateway paymentGateway = (AbstractPaymentGateway) criteria.uniqueResult();\n        if(paymentGateway != null){\n            paymentGateway.setFetchPlan(fetchPlan);\n        }\n        return paymentGateway;\n    }\n\n    public List<AbstractPaymentGateway> findPaymentGateways(Object... params) {\n        Criteria criteria = createDefaultCriteria(AbstractPaymentGateway.class);\n\n        handleSpecificFetchMode(criteria, params);\n\n        criteria.addOrder(Order.asc(\"code\"));\n\n        @SuppressWarnings(\"unchecked\")\n        List<AbstractPaymentGateway> paymentGateways = criteria.list();\n        return paymentGateways;\n    }\n\n    public List<PaymentGatewayOption> findPaymentGatewayOptions() {\n        Criteria criteria = createDefaultCriteria(PaymentGatewayOption.class);\n\n        criteria.addOrder(Order.asc(\"code\"));\n\n        @SuppressWarnings(\"unchecked\")\n        List<PaymentGatewayOption> paymentGatewayOptions = criteria.list();\n        return paymentGatewayOptions;\n    }\n\n    public AbstractPaymentGateway saveOrUpdatePaymentGateway(AbstractPaymentGateway paymentGateway) {\n        if(paymentGateway.getDateCreate() == null){\n            paymentGateway.setDateCreate(new Date());\n        }\n        paymentGateway.setDateUpdate(new Date());\n        if (paymentGateway.getId() != null) {\n            if(em.contains(paymentGateway)){\n                em.refresh(paymentGateway);\n            }\n            AbstractPaymentGateway mergedPaymentGateway = em.merge(paymentGateway);\n            em.flush();\n            return mergedPaymentGateway;\n        } else {\n            em.persist(paymentGateway);\n            return paymentGateway;\n        }\n    }\n<｜fim▁hole｜>    protected FetchPlan handleSpecificFetchMode(Criteria criteria, Object... params) {\n        if (params != null && params.length > 0) {\n            return super.handleSpecificFetchMode(criteria, params);\n        } else {\n            return super.handleSpecificFetchMode(criteria, FetchPlanGraphCommon.defaultPaymentGatewayFetchPlan());\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    public void deletePaymentGateway(AbstractPaymentGateway paymentGateway) {\n        em.remove(paymentGateway);\n    }\n\n    @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package gr.iti.mklab.reveal.util;\n\nimport java.io.Serializable;\nimport java.util.HashSet;\nimport java.util.Set;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.annotations.Expose;\nimport com.google.gson.annotations.SerializedName;\nimport eu.socialsensor.framework.common.domain.*;\n\npublic class MediaCluster implements JSONable, Serializable {\n    /**\n     *\n     */\n    private static final long serialVersionUID = -7926531925761955502L;\n    public MediaCluster(String id) {\n        this.id = id;\n    }\n    // Unique id of a Media cluster\n    @Expose\n    @SerializedName(value = \"id\")\n    private String id;\n    @Expose\n    @SerializedName(value = \"members\")\n    private Set<String> members = new HashSet<String>();\n    @Expose\n    @SerializedName(value = \"count\")\n    private int count = 0;\n\n    @com.google.gson.annotations.Expose\n    @com.google.gson.annotations.SerializedName(\"item\")\n    public MediaItem item;\n\n    public String getId() {\n        return id;\n    }\n    public void setId(String id) {\n        this.id = id;\n    }\n    public Set<String> getMembers() {\n        return members;\n    }\n    public void addMembers(Set<String> members) {\n        this.members.addAll(members);\n        this.count = this.members.size();\n    }\n<｜fim▁hole｜>    }\n\n    public void setCount(int count) {\n        this.count = count;\n    }\n\n    @Override\n    public String toJSONString() {\n        Gson gson = new GsonBuilder()\n                .excludeFieldsWithoutExposeAnnotation()\n                .create();\n        return gson.toJson(this);\n    }\n}<｜fim▁end｜>",
    "response": "    public void addMember(String member) {\n        this.members.add(member);\n        this.count = this.members.size();\n    }\n    public int getCount() {\n        return count;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ru.sdroman.menu;\n\n<｜fim▁hole｜>     * Shows menu.\n     *\n     * @param nodes Node[]\n     */\n    public void showMenu(Node[] nodes) {\n        for (Node node : nodes) {\n            node.printNode();\n        }\n    }\n}<｜fim▁end｜>",
    "response": "public class Menu {\n\n    /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amazonaws.services.devicefarm.model.transform;\n\nimport java.math.*;\n\nimport javax.annotation.Generated;\n\nimport com.amazonaws.services.devicefarm.model.*;\nimport com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;\nimport com.amazonaws.transform.*;\n\nimport com.fasterxml.jackson.core.JsonToken;\nimport static com.fasterxml.jackson.core.JsonToken.*;\n\n@Generated(\"com.amazonaws:aws-java-sdk-code-generator\")\npublic class GetDevicePoolCompatibilityResultJsonUnmarshaller implements Unmarshaller<GetDevicePoolCompatibilityResult, JsonUnmarshallerContext> {\n\n    public GetDevicePoolCompatibilityResult unmarshall(JsonUnmarshallerContext context) throws Exception {\n        GetDevicePoolCompatibilityResult getDevicePoolCompatibilityResult = new GetDevicePoolCompatibilityResult();\n\n        int originalDepth = context.getCurrentDepth();\n        String currentParentElement = context.getCurrentParentElement();\n        int targetDepth = originalDepth + 1;\n\n        JsonToken token = context.getCurrentToken();\n        if (token == null)\n            token = context.nextToken();\n<｜fim▁hole｜>            return getDevicePoolCompatibilityResult;\n        }\n\n        while (true) {\n            if (token == null)\n                break;\n\n            if (token == FIELD_NAME || token == START_OBJECT) {\n                if (context.testExpression(\"compatibleDevices\", targetDepth)) {\n                    context.nextToken();\n                    getDevicePoolCompatibilityResult.setCompatibleDevices(new ListUnmarshaller<DevicePoolCompatibilityResult>(\n                            DevicePoolCompatibilityResultJsonUnmarshaller.getInstance()).unmarshall(context));\n                }\n                if (context.testExpression(\"incompatibleDevices\", targetDepth)) {\n                    context.nextToken();\n                    getDevicePoolCompatibilityResult.setIncompatibleDevices(new ListUnmarshaller<DevicePoolCompatibilityResult>(\n                            DevicePoolCompatibilityResultJsonUnmarshaller.getInstance()).unmarshall(context));\n                }\n            } else if (token == END_ARRAY || token == END_OBJECT) {\n                if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {\n                    if (context.getCurrentDepth() <= originalDepth)\n                        break;\n                }\n            }\n            token = context.nextToken();\n        }\n\n        return getDevicePoolCompatibilityResult;\n    }\n\n    private static GetDevicePoolCompatibilityResultJsonUnmarshaller instance;\n\n    public static GetDevicePoolCompatibilityResultJsonUnmarshaller getInstance() {\n        if (instance == null)\n            instance = new GetDevicePoolCompatibilityResultJsonUnmarshaller();\n        return instance;\n    }\n}<｜fim▁end｜>",
    "response": "        if (token == VALUE_NULL) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.specmate.emfrest.internal;\n\nimport org.glassfish.jersey.server.ResourceConfig;\n\nimport com.specmate.emfrest.internal.auth.AuthenticationFilter;\n<｜fim▁hole｜>import com.specmate.emfrest.internal.rest.JsonReader;\nimport com.specmate.emfrest.internal.rest.RootResource;\n\nclass EmfRestJerseyApplication extends ResourceConfig {\n\n    public EmfRestJerseyApplication() {\n        registerClasses(RootResource.class, JsonEObjectWriter.class, JsonListWriter.class, JsonReader.class,\n                AuthenticationFilter.class, MetricsDynamicFeature.class);\n\n    }\n}<｜fim▁end｜>",
    "response": "import com.specmate.emfrest.internal.metrics.MetricsDynamicFeature;\nimport com.specmate.emfrest.internal.rest.JsonEObjectWriter;\nimport com.specmate.emfrest.internal.rest.JsonListWriter;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.api.ads.dfp.jaxws.v201308;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlRootElement;\nimport javax.xml.bind.annotation.XmlType;\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"\", propOrder = {\n    \"labels\"\n})\n@XmlRootElement(name = \"createLabels\")\npublic class LabelServiceInterfacecreateLabels {\n\n    protected List<Label> labels;\n\n    /**\n     * Gets the value of the labels property.\n     * \n     * <p>\n     * This accessor method returns a reference to the live list,\n     * not a snapshot. Therefore any modification you make to the\n     * returned list will be present inside the JAXB object.\n     * This is why there is not a <CODE>set</CODE> method for the labels property.\n     * \n     * <p>\n     * For example, to add a new item, do as follows:\n     * <pre>\n     *    getLabels().add(newItem);\n     * </pre>\n     * \n     * \n     * <p>\n     * Objects of the following type(s) are allowed in the list\n     * {@link Label }\n     * \n     * \n     */\n    public List<Label> getLabels() {\n        if (labels == null) {\n<｜fim▁hole｜>    }\n\n}<｜fim▁end｜>",
    "response": "            labels = new ArrayList<Label>();\n        }\n        return this.labels;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package edu.dnu.androidopac.log;\n\nimport android.util.Log;\n\npublic class LogConfig {\n\n    /**\n     *  Whether the application should have all tags log at DEBUG level.\n     *  When this is true, all tags will log at DEBUG level.\n     *  When this is false, only tags that are explicitly enabled by the Android logging\n     *  properties mechanism (see android.util.Log.isLoggable()) will log at DEBUG level.<br/>\n     *  This should be false in release builds so that tags will only log at DEBUG\n     *  level when they have been explicitly told to through Android's logging properties.\n     *  Rather than checking this directly, classes should use LogConfig.isDebug(TAG) to\n     *  determine whether to log a DEBUG level.\n     */\n    private static final boolean DEBUG = true;\n\n    /**\n     * Whether the application should allow any tags to log at VERBOSE level.\n     * Make sure this is set this to false in release builds so the compiler will strip out\n     * VERBOSE log statements.<br/>\n     * In general, classes should check this constant rather than checking Log.isLoggable(TAG, Log.VERBOSE).\n     * The Java compiler is unable to strip out calls to Log.isLoggable()\n     * (although, maybe the Dalvik compiler, or the JIT can ???)\n<｜fim▁hole｜>    /**\n     * When DEBUG logging isn't globally enabled for the application, this method\n     * defers to Android's logging properties mechanism (see android.util.Log.isLoggable()).\n     * @param logTag the log tag\n     * @return whether the log tag should log at DEBUG level\n     */\n    @SuppressWarnings(\"unused\")\n    public static boolean isDebug(String logTag) {\n\n        return DEBUG || Log.isLoggable(logTag, Log.DEBUG);\n    }\n\n    public static String getLogTag(Class<?> clazz) {\n\n        String tag = clazz.getSimpleName();\n\n        if (tag.length() > MAX_LOG_TAG_LENGTH) {\n            // trim tag\n            StringBuilder trimmed = new StringBuilder(MAX_LOG_TAG_LENGTH);\n            trimmed.append(tag.substring(0, MAX_LOG_TAG_LENGTH - 2));\n            trimmed.append(\"..\");\n\n            tag = trimmed.toString();\n        }\n\n        return tag;\n    }\n}<｜fim▁end｜>",
    "response": "     */\n    public static final boolean VERBOSE = true;\n\n    private static final int MAX_LOG_TAG_LENGTH = 23;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.kloudtek.ktserializer;\n\nimport com.kloudtek.util.io.ByteArrayDataOutputStream;\nimport com.kloudtek.util.io.DataOutputStream;\nimport com.kloudtek.util.io.IOUtils;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.io.IOException;\nimport java.util.Collection;\n\npublic class SerializationStream extends DataOutputStream {\n    @NotNull\n    private SerializationEngine serializer;\n\n    public SerializationStream(@NotNull SerializationEngine serializer) throws IOException {\n        super(new ByteArrayDataOutputStream());\n        this.serializer = serializer;\n        // payload flags (nothing at the moment)\n        writeUnsignedNumber(0L);\n    }\n\n    @NotNull\n    public SerializationEngine getSerializer() {\n        return serializer;\n    }\n\n    public void writeObject(Serializable serializable) throws IOException {\n        writeObject(serializable, null);\n    }\n\n    public void writeObject(Serializable serializable, ClassMapper classMapper) throws IOException {\n        if (serializable instanceof CustomSerializable) {\n            writeObject(serializable, classMapper, false);\n        } else {\n            throw new IllegalArgumentException(\"Only CustomSerializable supported at this time\");\n<｜fim▁hole｜>    }\n\n    public void writeObjectList(Collection<? extends Serializable> collection) throws IOException {\n        writeObjectList(collection, serializer.getClassMapper());\n    }\n\n    public void writeObjectList(Collection<? extends Serializable> collection, ClassMapper classMapper) throws IOException {\n        writeObject(new SerializableList(collection), classMapper, true);\n    }\n\n    public void writeObject(Serializable serializable, ClassMapper classMapper, boolean specificClass) throws IOException {\n        final SerializedDataHeader metadata = new SerializedDataHeader(this,\n                ((CustomSerializable) serializable).getSerializationVersion(), serializable.getClass(), classMapper, specificClass);\n        metadata.write(this);\n        ((CustomSerializable) serializable).serialize(this);\n    }\n\n    public byte[] closeAndReturnData() {\n        ByteArrayDataOutputStream buffer = (ByteArrayDataOutputStream) this.out;\n        IOUtils.close(buffer);\n        return buffer.toByteArray();\n    }\n}<｜fim▁end｜>",
    "response": "        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.android.test.hierarchyviewer;\n\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Decoder {\n    // Prefixes for simple primitives. These match the JNI definitions.\n    public static final byte SIG_BOOLEAN = 'Z';\n    public static final byte SIG_BYTE = 'B';\n    public static final byte SIG_SHORT = 'S';\n    public static final byte SIG_INT = 'I';\n    public static final byte SIG_LONG = 'J';\n    public static final byte SIG_FLOAT = 'F';\n    public static final byte SIG_DOUBLE = 'D';\n\n    // Prefixes for some commonly used objects\n    public static final byte SIG_STRING = 'R';\n\n    public static final byte SIG_MAP = 'M'; // a map with an short key\n    public static final short SIG_END_MAP = 0;\n\n<｜fim▁hole｜>\n    public Decoder(byte[] buf) {\n        this(ByteBuffer.wrap(buf));\n    }\n\n    public Decoder(ByteBuffer buf) {\n        mBuf = buf;\n    }\n\n    public boolean hasRemaining() {\n        return mBuf.hasRemaining();\n    }\n\n    public Object readObject() {\n        byte sig = mBuf.get();\n\n        switch (sig) {\n            case SIG_BOOLEAN:\n                return mBuf.get() == 0 ? Boolean.FALSE : Boolean.TRUE;\n            case SIG_BYTE:\n                return mBuf.get();\n            case SIG_SHORT:\n                return mBuf.getShort();\n            case SIG_INT:\n                return mBuf.getInt();\n            case SIG_LONG:\n                return mBuf.getLong();\n            case SIG_FLOAT:\n                return mBuf.getFloat();\n            case SIG_DOUBLE:\n                return mBuf.getDouble();\n            case SIG_STRING:\n                return readString();\n            case SIG_MAP:\n                return readMap();\n            default:\n                throw new DecoderException(sig, mBuf.position() - 1);\n        }\n    }\n\n    private String readString() {\n        short len = mBuf.getShort();\n        byte[] b = new byte[len];\n        mBuf.get(b, 0, len);\n        return new String(b, Charset.forName(\"utf-8\"));\n    }\n\n    private Map<Short, Object> readMap() {\n        Map<Short, Object> m = new HashMap<Short, Object>();\n\n        while (true) {\n            Object o = readObject();\n            if (!(o instanceof Short)) {\n                throw new DecoderException(\"Expected short key, got \" + o.getClass());\n            }\n\n            Short key = (Short)o;\n            if (key == SIG_END_MAP) {\n                break;\n            }\n\n            m.put(key, readObject());\n        }\n\n        return m;\n    }\n\n    public static class DecoderException extends RuntimeException {\n        public DecoderException(byte seen, int pos) {\n            super(String.format(\"Unexpected byte %c seen at position %d\", (char)seen, pos));\n        }\n\n        public DecoderException(String msg) {\n            super(msg);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    private final ByteBuffer mBuf;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.example.drock.n_corder.units;\n\n<｜fim▁hole｜>\npublic class UnitFormatter implements IUnitFormatter {\n    protected int mUnit;\n    protected int mSystemUnit;\n    protected String mSuffix;\n    protected String mUnitName;\n    protected String mUnitSystemName;\n    protected UnitConverter mUnitConverter;\n    protected int mSignificantDigits;\n\n    //this probably should be turned into a factor for turning out textual unit information\n    public UnitFormatter(int unit) {\n        init(unit);\n    }\n\n    public void init(int unit) {\n        mUnit = unit;\n        ISystemFactory systemFactory = SystemFactoryBroker.getSystemFactory();\n        UnitSystemTable unitSystemTable = systemFactory.getUnitSystemTable();\n        UnitSystemInfo unitSystemInfo = unitSystemTable.getUnitSystemInfo(mUnit);\n        UnitTypeInfo unitTypeInfo = unitSystemInfo.getUnitTypeInfo(unit);\n        mSuffix = unitTypeInfo.getSuffix();\n        mUnitName = unitTypeInfo.getName();\n        mUnitSystemName = unitSystemInfo.getUnitSystemName();\n        mUnitConverter = systemFactory.getUnitConverterFactory().createUnitConverter(unit);\n        mSystemUnit = unitSystemInfo.getSystemUnit();\n        mSignificantDigits = 3;\n    }\n\n    public void setSignificantDigits(int digits) {mSignificantDigits = digits;}\n\n    public String formatSystem(float v) {\n        return format(mUnitConverter.convert(mSystemUnit, v, mUnit));\n    }\n\n    @Override\n    public String format(float v) {\n        String str;\n        if(v == 0) { //can't use log function on 0\n            str = String.format(\"%.\" + (mSignificantDigits-1) +\"f %s\", v, mSuffix);\n        } else {\n            float original = v;\n            int power = (int) (Math.log10(Math.abs(v)));\n            float powerFactor = (float) Math.pow(10, -power + mSignificantDigits);\n            v = (float) (v * powerFactor);\n            v = Math.round(v);\n            v = (float) (v / powerFactor);\n            if (power >= 0) {\n                if (power <= 0)\n                    str = String.format(\"%.\" + (mSignificantDigits - power) + \"f %s\", v, mSuffix);\n                else if (power < mSignificantDigits) {\n                    str = String.format(\"%\" + (power + 1) + \".\" + (mSignificantDigits - power - 1) + \"f %s\", v, mSuffix);\n                } else\n                    str = String.format(\"%.\" + (mSignificantDigits - 1) + \"E %s\", v, mSuffix);\n            } else {\n                str = String.format(\"%.\" + (mSignificantDigits - 1) + \"E %s\", v, mSuffix);\n                //str = String.format(\"%.\"+(mSignificantDigits-power)+\"f %s\", v, mSuffix);\n            }\n        }\n\n        return str;\n    }\n\n    @Override\n    public String format(long v) {\n        return String.format(\"%d %s\", v, mSuffix);\n    }\n    public int getUnit() { return mUnit; }\n    public String getUnitName() { return mUnitName; }\n    public String getUnitSystemName() { return mUnitSystemName; }\n}<｜fim▁end｜>",
    "response": "import com.example.drock.n_corder.ISystemFactory;\nimport com.example.drock.n_corder.SystemFactoryBroker;\n\nimport java.util.HashMap;\nimport java.util.Map;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.ibm.ws.security.oauth20.fat;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport com.ibm.websphere.simplicity.log.Log;\nimport com.ibm.ws.security.oauth_oidc.fat.commonTest.Constants;\nimport com.meterware.httpunit.GetMethodWebRequest;\nimport com.meterware.httpunit.WebConversation;\nimport com.meterware.httpunit.WebForm;\n<｜fim▁hole｜>public class OAuth20WebClient04 extends OAuth20TestCommon {\n\n    private static final Class<?> thisClass = OAuth20WebClient04.class;\n\n    /**\n     * TestDescription:\n     *\n     * This test case performs a simple end-end OAuth flow, using httpunit to\n     * simulate browser requests. In this scenario, a Web client invokes a front\n     * end client application that obtains access token for the client using\n     * WebSphere authorization server. The test uses the authorization grant\n     * type \"resource owner password credentials\" . In this scenario, the client\n     * uses the authorization server as an intermediary to obtain the access\n     * token from the token endpoint by sending the resource owner's\n     * credentials. In this scenario, the autoauthz parameter is set to true, so\n     * the resource owner does not receive the consent form from the\n     * authorizarion server. The test verifies that the Oauth code flow, using\n     * the authorization grant type of \"resource owner password credentials\"\n     * works correctly.\n     *\n     */\n\n    @Before\n    public void setupBeforeTest() throws Exception {\n        commonSetup(\"com.ibm.ws.security.oauth-2.0.fat\");\n    }\n\n    @Test\n    public void testOAuthResourceOwnerCreds() throws Exception {\n\n        final String thisMethod = \"testOAuthResourceOwnerCreds\";\n        try {\n\n            sslSetup();\n\n            Log.info(thisClass, thisMethod, \"Begin\");\n\n            firstClientUrl = httpStart + \"/\" + Constants.OAUTHCLIENT_APP + \"/resourceowner.jsp\";\n            clientName = \"client04\";\n            clientID = \"client04\";\n            autoauthz = \"true\";\n\n            WebRequest request = null;\n            WebResponse response = null;\n            String respReceived = null;\n\n            // Create the conversation object which will maintain state for us\n            final WebConversation wc = new WebConversation();\n\n            Log.info(thisClass, thisMethod, \"First client URL: \"\n                                            + firstClientUrl);\n\n            // Start the OAuth request by invoking the client\n            request = new GetMethodWebRequest(firstClientUrl);\n\n            // Invoke the client\n            response = wc.getResponse(request);\n\n            // Read the response page from client jsp\n            respReceived = response.getText();\n            Log.info(thisClass, thisMethod, \"Response from OAuth client: \"\n                                            + respReceived);\n\n            WebForm form = fillClientForm2(response.getForms()[0]);\n\n            // Submit the request\n            response = form.submit();\n            respReceived = response.getText();\n            Log.info(thisClass, thisMethod,\n                     \"Response1 from Authorization server: \" + respReceived);\n\n            // Check if we received access token\n            assertTrue(\"Did not receive access token\", respReceived.contains(recvAccessToken));\n\n            // Check if protected app was invoked successfully\n\n            assertTrue(\"Could not invoke protected application:\", respReceived.contains(snoopServlet));\n\n            Log.info(thisClass, thisMethod, \"Test Passed!\");\n\n        } catch (Exception e) {\n\n            Log.info(thisClass, thisMethod, \"Exception occurred:\");\n            Log.error(thisClass, thisMethod, e, \"Exception: \");\n            throw e;\n        }\n\n    }\n\n}<｜fim▁end｜>",
    "response": "import com.meterware.httpunit.WebRequest;\nimport com.meterware.httpunit.WebResponse;\n\nimport componenttest.custom.junit.runner.FATRunner;\n\n@RunWith(FATRunner.class)\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.cth.backup.tree.Easy;\n\nimport com.cth.backup.tree.util.TreeNode;\n\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class BinaryTreePaths {\n\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n\n    }\n\n    public List<String> binaryTreePaths(TreeNode root) {\n        List<String> list = new ArrayList<>();\n        if (root == null) {\n            return list;\n        }\n        ;\n        getPath(root, \"\", list);\n        return list;\n    }\n<｜fim▁hole｜>        if (node.left == null && node.right == null) {\n            list.add(path + node.val);\n        }\n        if (node.left != null) {\n            getPath(node.left, path + node.val + \"->\", list);\n        }\n        if (node.right != null) {\n            getPath(node.right, path + node.val + \"->\", list);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "\n    public void getPath(TreeNode node, String path, List<String> list) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package LogHelp;\n\npublic class Message {\n\n    String message = null;\n    Exception exception= null;\n\n<｜fim▁hole｜>        this.message=message;\n        exception = e;\n    }\n\n    public boolean hasException(){ return (exception==null) ? true : false; }\n    public String getMessage(){ return message;}\n    public Exception getException() {return exception;}\n    public void print(){\n        System.out.println(message);\n        //if(hasException()) System.out.println(\"*Thrown by exception: *\"+ exception.toString());\n    }\n}<｜fim▁end｜>",
    "response": "    public Message(String message){this.message=message;}\n    public Message(String message, Exception e){\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import java.security.*;\n\npublic class TestRSAKeyLength extends PKCS11Test {\n    public static void main(String[] args) throws Exception {\n        main(new TestRSAKeyLength());\n    }\n    public void main(Provider p) throws Exception {\n        boolean isValidKeyLength[] = { true, true, false, false };\n        String algos[] = { \"SHA1withRSA\", \"SHA224withRSA\", \"SHA256withRSA\",\n                           \"SHA384withRSA\", \"SHA512withRSA\" };\n        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", p);\n        kpg.initialize(512);\n<｜fim▁hole｜>        PublicKey pubKey = kp.getPublic();\n\n        for (int i = 0; i < algos.length; i++) {\n            Signature sig = Signature.getInstance(algos[i], p);\n            System.out.println(\"Testing RSA signature \" + algos[i]);\n            try {\n                sig.initSign(privKey);\n                if (!isValidKeyLength[i]) {\n                    throw new Exception(\"initSign: Expected IKE not thrown!\");\n                }\n            } catch (InvalidKeyException ike) {\n                if (isValidKeyLength[i]) {\n                    throw new Exception(\"initSign: Unexpected \" + ike);\n                }\n            }\n            try {\n                sig.initVerify(pubKey);\n                if (!isValidKeyLength[i]) {\n                    throw new RuntimeException(\"initVerify: Expected IKE not thrown!\");\n                }\n                new SignedObject(\"Test string for getSignature test.\", privKey, sig);\n            } catch (InvalidKeyException ike) {\n                if (isValidKeyLength[i]) {\n                    throw new Exception(\"initSign: Unexpected \" + ike);\n                }\n            }\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        KeyPair kp = kpg.generateKeyPair();\n        PrivateKey privKey = kp.getPrivate();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.test.step.defintions;\n\nimport org.apache.log4j.Logger;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.support.ui.ExpectedConditions;\nimport org.openqa.selenium.support.ui.WebDriverWait;\n\nimport com.selenium.configure.environment.PropertiesHandler;\n\nimport cucumber.api.java.en.Then;\n\npublic class ProgressSteps {\n    static WebDriver driver;\n\n    /******** Log Attribute ********/\n    private static Logger log = Logger.getLogger(ProgressSteps.class);\n\n    public ProgressSteps(){\n         driver= Hooks.getDriver();\n    }\n\n    /** Wait for a specific period of time */\n    @Then(\"^I wait for (\\\\d+) seconds$\")\n    public static void wait(int seconds) {\n        log.info(\"Waiting for...\"+seconds + \" seconds.\");\n        new WebDriverWait(driver, seconds);\n    }\n\n    /** Wait for an element to be present for a specific period of time */\n    @Then(\"^I wait (\\\\d+) seconds for element having (.+) \\\"(.*?)\\\" to be present$\")\n    public void waitForElementPresent(int seconds, String type, String key) throws Exception\n    {\n        By element = PropertiesHandler.getCompleteElement(type, key);\n        WebDriverWait w = new WebDriverWait(driver, seconds);\n        log.info(\"Waiting for the element: \"+element + \" to be present\");\n        w.until(ExpectedConditions.presenceOfElementLocated(element));\n    }\n\n    /** Wait for an element to be visible for a specific period of time */\n    @Then(\"^I wait (\\\\d+) seconds for element having (.+) \\\"(.*?)\\\" to be visible$\")\n    public void waitForElementVisible(int seconds, String type, String key) throws Exception\n    {\n        By element = PropertiesHandler.getCompleteElement(type, key);\n        WebDriverWait w = new WebDriverWait(driver, seconds);\n        log.info(\"Waiting for the element: \"+element+ \" to be visible\");\n        w.until(ExpectedConditions.visibilityOfElementLocated(element));\n    }\n\n    /** Wait for an element to be enabled for a specific period of time */\n    @Then(\"^I wait (\\\\d+) seconds for element having (.+) \\\"(.*?)\\\" to be enabled$\")\n    public void waitForEnable(int seconds, String type, String key) throws Exception\n<｜fim▁hole｜>        WebDriverWait w = new WebDriverWait(driver, seconds);\n        log.info(\"Waiting for the element: \"+element + \" to be enabled\");\n        w.until(ExpectedConditions.elementSelectionStateToBe(element, enabled));\n    }\n\n    /** Wait for an element to be clickable for a specific period of time */\n    @Then(\"^I wait (\\\\d+) seconds for element having (.+) \\\"(.*?)\\\" to be clickable$\")\n    public void waitForClick(int seconds, String type, String key) throws Exception\n    {\n        By element = PropertiesHandler.getCompleteElement(type, key);\n        WebDriverWait w = new WebDriverWait(driver, seconds);\n        log.info(\"Waiting for the element: \"+element+ \" to be clickable\");\n        w.until(ExpectedConditions.elementToBeClickable(element));\n    }   \n}<｜fim▁end｜>",
    "response": "    {\n        By element = PropertiesHandler.getCompleteElement(type, key);\n        boolean enabled = driver.findElement(element).isEnabled();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package mushrooms.classifiers;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport mushrooms.data.Class_Label;\nimport mushrooms.models.Mushroom;\n\npublic class KNN {\n\n    List<Mushroom> trainingSet;\n    int k;\n\n    public KNN(List<Mushroom> trainingSet, int k) {\n        super();\n        this.trainingSet = trainingSet;\n        this.k = k;\n    }\n\n    public boolean isEdible(Mushroom mushroom){\n\n        Map<Mushroom, Float> kNearest = new HashMap<Mushroom, Float>(k);\n\n        for(Mushroom other : trainingSet){\n            float distance = distance(mushroom, other);\n            float longest = longestDistance(kNearest);\n            if (distance < longest || kNearest.size() < k){\n                if (kNearest.size() == k)\n                    removeWorst(kNearest, longest);\n                kNearest.put(other, distance);\n            }\n        }\n\n        return meanEdibleValue(kNearest) >= 0.5;\n\n    }\n\n    private float meanEdibleValue(Map<Mushroom, Float> kNearest) {\n<｜fim▁hole｜>    }\n\n    private Mushroom removeWorst(Map<Mushroom, Float> mushrooms, float longest) {\n        for(Mushroom mushroom : mushrooms.keySet()){\n            if (mushrooms.get(mushroom) == longest){\n                mushrooms.remove(mushroom);\n                return mushroom;\n            }   \n        }\n        return null;\n    }\n\n    private float longestDistance(Map<Mushroom, Float> mushrooms) {\n        float longest = 0f;\n        for(Mushroom mushroom : mushrooms.keySet()){\n            float distance = mushrooms.get(mushroom);\n            if (distance > longest)\n                longest = distance;\n        }\n        return longest;\n    }\n\n    private float distance(Mushroom mushroom, Mushroom other) {\n\n        float distance = 0f;\n\n        for(int i = 0; i<Mushroom.getAttributeList().size(); i++){\n            Object attr = Mushroom.getAttributeList().get(i);\n            if (!mushroom.getAttributeValue(attr).equals(other.getAttributeValue(attr)))\n                distance += 1f;\n        }\n\n        return distance;\n    }\n\n}<｜fim▁end｜>",
    "response": "        float edible = 0f;\n        for(Mushroom mushroom : kNearest.keySet()){\n            edible += mushroom.m_Class == Class_Label.edible ? 1 : 0;\n        }\n        return edible / kNearest.size();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.test.conductor.conductortest.views;\n\n<｜fim▁hole｜>\npublic class TestAttachView extends FrameLayout {\n\n    private static final String TAG = \"TestAttachView\";\n\n    public TestAttachView(Context context) {\n        super(context);\n        init();\n    }\n\n    public TestAttachView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public TestAttachView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    public TestAttachView(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {\n        super(context, attrs, defStyleAttr, defStyleRes);\n        init();\n    }\n\n    private void init() {\n        addOnAttachStateChangeListener(new OnAttachStateChangeListener() {\n            @Override\n            public void onViewAttachedToWindow(View v) {\n                Log.d(TAG, \"onViewAttachedToWindow\");\n            }\n\n            @Override\n            public void onViewDetachedFromWindow(View v) {\n                Log.d(TAG, \"onViewDetachedFromWindow\");\n            }\n        });\n    }\n}<｜fim▁end｜>",
    "response": "import android.content.Context;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.FrameLayout;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.libreworks.stellarbase.orm.hibernate;\n\nimport static org.junit.Assert.*;\n\nimport java.util.Collection;\nimport java.util.Date;\n\nimport com.google.common.collect.ImmutableMap;\nimport com.libreworks.messageboardsample.dao.Person;\n\nimport org.hibernate.criterion.Restrictions;\nimport org.junit.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.orm.hibernate4.HibernateTemplate;\nimport org.springframework.transaction.annotation.Transactional;\n\npublic class HibernateRemovableDaoTest extends AbstractHibernateTestSupport\n{\n    @Autowired\n    private HibernatePersonDao object;\n\n    @Test\n    @Transactional(rollbackFor=Throwable.class)\n    public void testGetAllNotRemoved()\n    {\n        Person p1 = getFixture(10);\n        Person p2 = getFixture(11);\n        Person p3 = getFixture(12);\n        object.remove(p2, \"foo\");\n        HibernateTemplate ht = getHibernateTemplate();\n        ht.flush();\n        ht.refresh(p2);\n        Collection<Person> ps = object.getAllNotRemoved();\n        assertTrue(ps.contains(p1));\n        assertFalse(ps.contains(p2));\n        assertTrue(ps.contains(p3));\n    }\n\n    @Test\n    @Transactional(rollbackFor=Throwable.class)\n    public void testGetByNaturalIdNotRemoved()\n    {\n        Person p = getFixture(2);\n        Person entity = object.getByNaturalIdNotRemoved(Restrictions.naturalId().set(\"username\", p.getUsername()));\n        assertSame(p, entity);\n        object.remove(entity, \"me\");\n        HibernateTemplate ht = getHibernateTemplate();\n        ht.flush();\n        ht.refresh(entity);\n        assertNull(object.getByNaturalIdNotRemoved(Restrictions.naturalId().set(\"username\", entity.getUsername())));\n    }\n\n    @Test\n    @Transactional(rollbackFor=Throwable.class)\n    public void testRemove()\n    {\n        Person p = getFixture(1);\n        assertFalse(p.isRemoved());\n        assertNull(p.getRemovedOn());\n        assertNull(p.getRemovedBy());\n        object.remove(p, \"foo\");\n        HibernateTemplate ht = getHibernateTemplate();\n        ht.flush();\n        ht.refresh(p);\n        assertTrue(p.isRemoved());\n        assertNotNull(p.getRemovedOn());\n        assertEquals(\"foo\", p.getRemovedBy());\n    }\n\n    @Test\n    @Transactional(rollbackFor=Throwable.class)\n    public void testUnremove()\n    {\n        Person p = getFixture(23);\n        assertFalse(p.isRemoved());\n        assertNull(p.getRemovedOn());\n        assertNull(p.getRemovedBy());\n        object.remove(p, \"foo\");\n        HibernateTemplate ht = getHibernateTemplate();\n        ht.flush();\n        ht.refresh(p);\n        assertTrue(p.isRemoved());\n        assertNotNull(p.getRemovedOn());\n        assertEquals(\"foo\", p.getRemovedBy());\n        object.unremove(p, \"foo2\");\n        ht.flush();\n        ht.refresh(p);\n        assertFalse(p.isRemoved());\n        assertNull(p.getRemovedOn());\n        assertNull(p.getRemovedBy());\n    }\n\n    @Test(expected=IllegalArgumentException.class)\n    public void testUnremoveBad()\n    {\n        Person p = new Person();\n        object.unremove(p, \"foo\");\n    }\n\n    public Person getFixture(int seed)\n<｜fim▁hole｜>            .put(\"username\", \"foobar\" + seed)\n            .put(\"createdOn\", new Date())\n            .put(\"createdBy\", \"foobar\")\n            .put(\"modifiedOn\", new Date())\n            .put(\"modifiedBy\", \"foobar\").build());\n    }\n}<｜fim▁end｜>",
    "response": "    {\n        return create(Person.class, ImmutableMap.<String,Object>builder()\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.camel.component.aws.s3;\n\nimport com.amazonaws.services.s3.model.ObjectListing;\nimport org.apache.camel.EndpointInject;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.ExchangePattern;\nimport org.apache.camel.ProducerTemplate;\nimport org.apache.camel.component.mock.MockEndpoint;\nimport org.apache.camel.test.spring.junit5.CamelSpringTestSupport;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class S3ComponentListObjectsSpringTest extends CamelSpringTestSupport {\n\n    @EndpointInject(\"direct:listBuckets\")\n    private ProducerTemplate template;\n\n    @EndpointInject(\"mock:result\")\n    private MockEndpoint result;\n\n    @Test\n    public void sendIn() throws Exception {\n        result.expectedMessageCount(1);\n\n        template.sendBody(\"direct:listObjects\", ExchangePattern.InOnly, \"\");\n        assertMockEndpointsSatisfied();\n\n        assertResultExchange(result.getExchanges().get(0));\n\n    }\n\n<｜fim▁hole｜>\n    @Override\n    protected ClassPathXmlApplicationContext createApplicationContext() {\n        return new ClassPathXmlApplicationContext(\"org/apache/camel/component/aws/s3/S3ComponentSpringTest-context.xml\");\n    }\n}<｜fim▁end｜>",
    "response": "    private void assertResultExchange(Exchange resultExchange) {\n        ObjectListing list = resultExchange.getIn().getBody(ObjectListing.class);\n        assertEquals(1, list.getObjectSummaries().size());\n        assertEquals(\"Myfile\", list.getObjectSummaries().get(0).getKey());\n        assertEquals(\"test\", list.getObjectSummaries().get(0).getBucketName());\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.nifi.processors.script;\n\nimport org.apache.nifi.util.MockFlowFile;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.HashMap;\nimport java.util.List;\n\nimport static org.junit.Assert.assertEquals;\n\npublic class TestExecuteClojure extends BaseScriptTest {\n\n    public final String TEST_CSV_DATA = \"gender,title,first,last\\n\"\n            + \"female,miss,marlene,shaw\\n\"\n            + \"male,mr,todd,graham\";\n\n    @Before\n    public void setup() throws Exception {\n        super.setupExecuteScript();\n    }\n\n    /**\n     * Tests a script file that has provides the body of an onTrigger() function.\n     *\n     * @throws Exception Any error encountered while testing\n     */\n    @Test\n    public void testReadFlowFileContentAndStoreInFlowFileAttributeWithScriptFile() throws Exception {\n        runner.setValidateExpressionUsage(false);\n        runner.setProperty(scriptingComponent.getScriptingComponentHelper().SCRIPT_ENGINE, \"Clojure\");\n        runner.setProperty(ScriptingComponentUtils.SCRIPT_FILE, TEST_RESOURCE_LOCATION + \"clojure/test_onTrigger.clj\");\n        runner.setProperty(ScriptingComponentUtils.MODULES, \"target/test/resources/clojure\");\n\n        runner.assertValid();\n        runner.enqueue(\"test content\".getBytes(StandardCharsets.UTF_8));\n        runner.run();\n\n        runner.assertAllFlowFilesTransferred(ExecuteScript.REL_SUCCESS, 1);\n        final List<MockFlowFile> result = runner.getFlowFilesForRelationship(ExecuteScript.REL_SUCCESS);\n        result.get(0).assertAttributeEquals(\"from-content\", \"test content\");\n    }\n\n    /**\n     * Tests a script file that has provides the body of an onTrigger() function.\n     *\n     * @throws Exception Any error encountered while testing\n     */\n    @Test\n    public void testNoIncomingFlowFile() throws Exception {\n        runner.setValidateExpressionUsage(false);\n        runner.setProperty(scriptingComponent.getScriptingComponentHelper().SCRIPT_ENGINE, \"Clojure\");\n        runner.setProperty(ScriptingComponentUtils.SCRIPT_FILE, TEST_RESOURCE_LOCATION + \"clojure/test_onTrigger.clj\");\n        runner.setProperty(ScriptingComponentUtils.MODULES, \"target/test/resources/clojure\");\n\n        runner.assertValid();\n        runner.run();\n\n        runner.assertTransferCount(ExecuteScript.REL_SUCCESS, 0);\n        runner.assertTransferCount(ExecuteScript.REL_FAILURE, 0);\n    }\n\n    /**\n     * Tests a script file that creates and transfers a new flow file.\n     *\n     * @throws Exception Any error encountered while testing\n     */\n    @Test\n    public void testCreateNewFlowFileWithScriptFile() throws Exception {\n        runner.setValidateExpressionUsage(false);\n        runner.setProperty(scriptingComponent.getScriptingComponentHelper().SCRIPT_ENGINE, \"Clojure\");\n        runner.setProperty(ScriptingComponentUtils.SCRIPT_FILE, TEST_RESOURCE_LOCATION + \"clojure/test_onTrigger_newFlowFile.clj\");\n        runner.setProperty(ScriptingComponentUtils.MODULES, TEST_RESOURCE_LOCATION + \"clojure\");\n\n        runner.assertValid();\n        runner.enqueue(TEST_CSV_DATA.getBytes(StandardCharsets.UTF_8));\n        runner.run();\n\n        // The script removes the original file and transfers only the new one\n        assertEquals(1, runner.getRemovedCount());\n        runner.assertAllFlowFilesTransferred(ExecuteScript.REL_SUCCESS, 1);\n        final List<MockFlowFile> result = runner.getFlowFilesForRelationship(ExecuteScript.REL_SUCCESS);\n        result.get(0).assertAttributeEquals(\"selected.columns\", \"title,first\");\n        result.get(0).assertAttributeEquals(\"filename\", \"split_cols.txt\");\n    }\n\n<｜fim▁hole｜>    public void testDynamicProperties() throws Exception {\n        runner.setValidateExpressionUsage(true);\n        runner.setProperty(scriptingComponent.getScriptingComponentHelper().SCRIPT_ENGINE, \"Clojure\");\n        runner.setProperty(ScriptingComponentUtils.SCRIPT_FILE, TEST_RESOURCE_LOCATION + \"clojure/test_dynamicProperties.clj\");\n        runner.setProperty(\"myProp\", \"${myAttr}\");\n\n        runner.assertValid();\n        runner.enqueue(TEST_CSV_DATA.getBytes(StandardCharsets.UTF_8),\n                new HashMap<String, String>(1) {{\n                    put(\"myAttr\", \"testValue\");\n                }});\n        runner.run();\n\n        runner.assertAllFlowFilesTransferred(ExecuteScript.REL_SUCCESS, 1);\n        final List<MockFlowFile> result = runner.getFlowFilesForRelationship(ExecuteScript.REL_SUCCESS);\n        result.get(0).assertAttributeEquals(\"from-content\", \"testValue\");\n    }\n}<｜fim▁end｜>",
    "response": "    /**\n     * Tests a script file that uses dynamic properties defined on the processor.\n     *\n     * @throws Exception Any error encountered while testing\n     */\n    @Test\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.boydti.fawe.jnbt.anvil.filters;\n\nimport com.boydti.fawe.jnbt.anvil.MCAFilterCounter;\n<｜fim▁hole｜>\n    public DeleteOldFilter(long time) {\n        this.time = time;\n        if (time < 1) {\n            throw new IllegalArgumentException(\"Time must be positive\");\n        }\n    }\n\n    @Override\n    public boolean appliesFile(Path path, BasicFileAttributes attr) {\n        long modified = attr.lastModifiedTime().toMillis();\n        long access = attr.lastAccessTime().toMillis();\n        long last = Math.max(modified, access);\n        if (last != 0 && System.currentTimeMillis() - last > this.time) {\n            path.toFile().delete();\n            get().add(512 * 512 * 256);\n        }\n        return false;\n    }\n}<｜fim▁end｜>",
    "response": "import java.nio.file.Path;\nimport java.nio.file.attribute.BasicFileAttributes;\n\npublic class DeleteOldFilter extends MCAFilterCounter {\n    private final long time;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.hdweiss.morgand.synchronizer.git;\n\nimport android.content.Context;\nimport android.content.SharedPreferences;\nimport android.os.Build;\nimport android.preference.PreferenceManager;\nimport android.util.Log;\n\nimport com.hdweiss.morgand.Application;\nimport com.hdweiss.morgand.events.SyncEvent;\nimport com.hdweiss.morgand.gui.SynchronizerNotification;\nimport com.hdweiss.morgand.synchronizer.parser.SyncParserTask;\nimport com.hdweiss.morgand.utils.SafeAsyncTask;\nimport com.hdweiss.morgand.utils.Utils;\n\nimport org.eclipse.jgit.lib.ProgressMonitor;\n\npublic class SyncGitTask extends SafeAsyncTask<Void, SyncEvent, Void> {\n\n    private JGitWrapper jGitWrapper;\n\n    public SyncGitTask(Context context) {\n        super(context, ReportMode.Toast);\n    }\n\n    @Override\n    protected Void safeDoInBackground(Void... params) throws Exception {\n        Log.d(\"Git\", \"Started synchronization\");\n\n        if (Utils.isNetworkOnline(context) == false) {\n            Log.d(\"Git\", \"Network is offline, aborting git synchronization\");\n            return null;\n        }\n\n        publishProgress(new SyncEvent(SyncEvent.State.Intermediate));\n\n        SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(context);\n        jGitWrapper = new JGitWrapper(preferences);\n        jGitWrapper.commitAllChanges(Build.MODEL + \": Automatic commit\");\n        jGitWrapper.updateChanges(monitor);\n\n        Log.d(\"Git\", \"Ended synchronization\");\n        return null;\n    }\n\n    @Override\n    protected void onProgressUpdate(SyncEvent... events) {\n        super.onProgressUpdate(events);\n        for(SyncEvent event: events)\n            Application.getBus().post(event);\n    }\n\n    @Override\n    protected void onSuccess(Void aVoid) {\n        Application.getBus().post(new SyncEvent(SyncEvent.State.SecondaryProgress, 100));\n        new SyncParserTask(context).execute();\n    }\n\n    @Override\n    protected void onError() {\n        Application.getBus().post(new SyncEvent(SyncEvent.State.Done));\n        SynchronizerNotification notification = new SynchronizerNotification(context);\n        notification.errorNotification(exception.getLocalizedMessage() + \"\\n\" + Utils.ExceptionTraceToString(exception));\n    }\n\n<｜fim▁hole｜>        if (jGitWrapper != null)\n            jGitWrapper.cleanup();\n    }\n\n    private ProgressMonitor monitor = new ProgressMonitor() {\n\n        private int progress = 0;\n        private int totalWork = 0;\n        private int workCompleted = 0;\n\n        public void start(int totalTasks) {\n        }\n\n        public void beginTask(String title, int totalWork) {\n            this.totalWork = totalWork;\n            this.workCompleted = 0;\n            publishProgress(new SyncEvent(SyncEvent.State.SecondaryProgress, 0));\n        }\n\n        public void update(int completed) {\n            this.workCompleted += completed;\n            int newProgress = getProgress();\n\n            if(this.progress != newProgress) {\n                this.progress = newProgress;\n                publishProgress(new SyncEvent(SyncEvent.State.SecondaryProgress, newProgress));\n            }\n        }\n\n        private int getProgress() {\n            if(totalWork == 0)\n                return 0;\n\n            final int taskWorkProgress = (int) ((100.0 / totalWork)\n                    * workCompleted);\n            return taskWorkProgress;\n        }\n\n        public void endTask() {\n        }\n\n        public boolean isCancelled() {\n            return false;\n        }\n    };\n}<｜fim▁end｜>",
    "response": "    @Override\n    protected void onCleanup() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.tectonica.jonix.onix2;\n\nimport java.io.Serializable;\n\nimport com.tectonica.jonix.JPU;\nimport com.tectonica.jonix.OnixElement;\nimport com.tectonica.jonix.codelist.LanguageCodes;\nimport com.tectonica.jonix.codelist.RecordSourceTypes;\nimport com.tectonica.jonix.codelist.TextCaseFlags;\nimport com.tectonica.jonix.codelist.TextFormats;\nimport com.tectonica.jonix.codelist.TransliterationSchemes;\n\n@SuppressWarnings(\"serial\")\npublic class SentDate implements OnixElement, Serializable\n{\n    public static final String refname = \"SentDate\";\n    public static final String shortname = \"m182\";\n\n<｜fim▁hole｜>    public TextCaseFlags textcase;\n\n    public LanguageCodes language;\n\n    public TransliterationSchemes transliteration;\n\n    /**\n     * (type: DateOrDateTime)\n     */\n    public String datestamp;\n\n    public RecordSourceTypes sourcetype;\n\n    public String sourcename;\n\n    /**\n     * (type: NonEmptyString)\n     */\n    public String value;\n\n    public SentDate()\n    {}\n\n    public SentDate(org.w3c.dom.Element element)\n    {\n        textformat = TextFormats.byValue(JPU.getAttribute(element, \"textformat\"));\n        textcase = TextCaseFlags.byValue(JPU.getAttribute(element, \"textcase\"));\n        language = LanguageCodes.byValue(JPU.getAttribute(element, \"language\"));\n        transliteration = TransliterationSchemes.byValue(JPU.getAttribute(element, \"transliteration\"));\n        datestamp = JPU.getAttribute(element, \"datestamp\");\n        sourcetype = RecordSourceTypes.byValue(JPU.getAttribute(element, \"sourcetype\"));\n        sourcename = JPU.getAttribute(element, \"sourcename\");\n\n        value = JPU.getContentAsString(element);\n    }\n}<｜fim▁end｜>",
    "response": "    public TextFormats textformat;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package apps.mathpadapp.networkmanager.messages.fromcontroller.unicast.totable;\n\nimport synergynetframework.appsystem.services.net.localpresence.TableIdentity;\n\npublic class RequestUserIdsFromTableMessage extends ControllerToTableMessage {\n\n    /** The Constant serialVersionUID. */\n    private static final long serialVersionUID = 6448601837962845275L;\n\n    /**\n     * Instantiates a new request user ids from table message.\n     *\n     * @param targetClass\n     *            the target class\n<｜fim▁hole｜>    public RequestUserIdsFromTableMessage(Class<?> targetClass,\n            TableIdentity tableId) {\n        super(targetClass);\n        this.setRecipient(tableId);\n    }\n\n}<｜fim▁end｜>",
    "response": "     * @param tableId\n     *            the table id\n     */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.fenixedu.start.service;\n\n<｜fim▁hole｜>import java.util.Comparator;\nimport java.util.List;\nimport java.util.Map;\n\npublic class FenixEduStartExtension extends AbstractExtension {\n\n    @Override\n    public Map<String, Filter> getFilters() {\n        return ImmutableMap.of(\"path\", new Filter() {\n            @Override\n            public Object apply(Object input, Map<String, Object> args) {\n                if (input instanceof String) {\n                    return ((String) input).replace('.', '/');\n                }\n                return input;\n            }\n\n            @Override\n            public List<String> getArgumentNames() {\n                return null;\n            }\n        }, \"latest\", new Filter() {\n            @Override\n            public Object apply(Object input, Map<String, Object> args) {\n                if(input instanceof List) {\n                    List<? extends Comparable> list = (List<? extends Comparable>) input;\n                    Collections.sort(list, Comparator.<Comparable> reverseOrder());\n                    return list.isEmpty() ? null : list.get(0);\n                }\n                return input;\n            }\n\n            @Override\n            public List<String> getArgumentNames() {\n                return null;\n            }\n        });\n    }\n}<｜fim▁end｜>",
    "response": "import com.google.common.collect.ImmutableMap;\nimport com.mitchellbosecke.pebble.extension.AbstractExtension;\nimport com.mitchellbosecke.pebble.extension.Filter;\n\nimport java.util.Collections;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.springframework.richclient.dialog;\n\nimport java.awt.Image;\nimport java.awt.Window;\nimport java.beans.PropertyChangeEvent;\nimport java.beans.PropertyChangeListener;\n\nimport javax.swing.JComponent;\n\nimport org.springframework.richclient.core.DefaultMessage;\nimport org.springframework.richclient.core.Message;\nimport org.springframework.richclient.form.Form;\nimport org.springframework.util.Assert;\nimport org.springframework.util.StringUtils;\n\npublic abstract class TitledPageApplicationDialog extends TitledApplicationDialog {\n\n    private DialogPage dialogPage;\n\n    private PropertyChangeListener dialogPagePropertyChangeHandler = new PropertyChangeListener() {\n        public void propertyChange(PropertyChangeEvent evt) {\n            if (Messagable.MESSAGE_PROPERTY.equals(evt.getPropertyName())) {\n                update();\n            }\n            else if (DialogPage.PAGE_COMPLETE_PROPERTY.equals(evt.getPropertyName())) {\n                setEnabled(dialogPage.isPageComplete());\n            }\n            else {\n                update();\n            }\n        }\n    };\n\n    private Image titlePaneImage;\n\n    private String titlePaneTitle;\n\n    /**\n     * Default constructor. Make sure to call {@link #setDialogPage(DialogPage)}\n     * prior to using this dialog.\n     */\n    public TitledPageApplicationDialog() {\n        super();\n    }\n\n    public TitledPageApplicationDialog(DialogPage dialogPage) {\n        super();\n        setDialogPage(dialogPage);\n    }\n<｜fim▁hole｜>    }\n\n    public TitledPageApplicationDialog(DialogPage dialogPage, Window parent) {\n        super(dialogPage.getTitle(), parent);\n        setDialogPage(dialogPage);\n    }\n\n    public TitledPageApplicationDialog(DialogPage dialogPage, Window parent, CloseAction closeAction) {\n        super(dialogPage.getTitle(), parent, closeAction);\n        setDialogPage(dialogPage);\n    }\n\n    protected void setDialogPage(DialogPage dialogPage) {\n        Assert.notNull(dialogPage, \"The single dialog page to display is required\");\n        this.dialogPage = dialogPage;\n    }\n\n    protected DialogPage getDialogPage() {\n        return dialogPage;\n    }\n\n    protected JComponent createTitledDialogContentPane() {\n        dialogPage.addPropertyChangeListener(dialogPagePropertyChangeHandler);\n        update();\n        return dialogPage.getControl();\n    }\n\n    protected Message getDescription() {\n        return new DefaultMessage(dialogPage.getDescription());\n    }\n\n    protected void update() {\n        if (!StringUtils.hasText(getTitle())) {\n            setTitle(dialogPage.getTitle());\n        }\n        updateTitlePane();\n        updateMessagePane();\n    }\n\n    protected void updateTitlePane() {\n        super.setTitlePaneTitle(titlePaneTitle != null ? titlePaneTitle : dialogPage.getTitle());\n        super.setTitlePaneImage(titlePaneImage != null ? titlePaneImage : dialogPage.getImage());\n        setDescription(dialogPage.getDescription());\n    }\n\n    protected void updateMessagePane() {\n        setMessage(dialogPage.getMessage());\n    }\n\n    /**\n     * Sets the image to use in the title pane. Normally the image is provided\n     * by the current dialog page, but this method allows for overriding this.\n     * <p>\n     * If the image passed is null, the image of the dialog page will be used.\n     * @param image the image\n     * @see TitledApplicationDialog#setTitlePaneImage(Image)\n     */\n    public void setTitlePaneImage(Image image) {\n        titlePaneImage = image;\n        super.setTitlePaneImage(image);\n    }\n\n    /**\n     * Sets the title to use in the title pane. Normally the title is provided\n     * by the current dialog page, but this method allows for overriding this.\n     * <p>\n     * If the title passed is null, the title of the dialog page will be used.\n     * @param title the title\n     * @see TitledApplicationDialog#setTitlePaneTitle(String)\n     */\n    public void setTitlePaneTitle(String title) {\n        titlePaneTitle = title;\n        super.setTitlePaneTitle(title);\n    }\n}<｜fim▁end｜>",
    "response": "\n    public TitledPageApplicationDialog(Form form, Window parent) {\n        this(new FormBackedDialogPage(form), parent);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.camel.component.olingo2.api;\n\nimport java.io.InputStream;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.apache.camel.component.olingo2.api.batch.Olingo2BatchResponse;\nimport org.apache.olingo.odata2.api.commons.HttpStatusCodes;\nimport org.apache.olingo.odata2.api.edm.Edm;\n\npublic interface Olingo2App {\n\n    /**\n     * Sets Service base URI.\n     * @param serviceUri\n     */\n    void setServiceUri(String serviceUri);\n\n    /**\n     * Returns Service base URI.\n     * @return service base URI.\n     */\n    String getServiceUri();\n\n    /**\n     * Sets custom Http headers to add to every service request.\n     * @param httpHeaders custom Http headers.\n     */\n    void setHttpHeaders(Map<String, String> httpHeaders);\n\n    /**\n     * Returns custom Http headers.\n     * @return custom Http headers.\n     */\n    Map<String, String> getHttpHeaders();\n\n    /**\n     * Returns content type for service calls. Defaults to <code>application/json;charset=utf-8</code>.\n     * @return content type.\n     */\n    String getContentType();\n\n    /**\n     * Set default service call content type.\n     * @param contentType content type.\n     */\n    void setContentType(String contentType);\n\n    /**\n     * Closes resources.\n     */\n    void close();\n\n    /**\n     * Reads an OData resource and invokes callback with appropriate result.\n     * @param edm Service Edm, read from calling <code>read(null, \"$metdata\", null, responseHandler)</code>\n     * @param resourcePath OData Resource path\n     * @param queryParams OData query params\n     *                    from http://www.odata.org/documentation/odata-version-2-0/uri-conventions#SystemQueryOptions\n     * @param responseHandler callback handler\n     */\n    <T> void read(Edm edm, String resourcePath, Map<String, String> queryParams,\n                  Olingo2ResponseHandler<T> responseHandler);\n\n    /**\n     * Reads an OData resource and invokes callback with the unparsed input stream.\n     * @param edm Service Edm, read from calling <code>read(null, \"$metdata\", null, responseHandler)</code>\n     * @param resourcePath OData Resource path\n     * @param queryParams OData query params\n     *                    from http://www.odata.org/documentation/odata-version-2-0/uri-conventions#SystemQueryOptions\n     * @param responseHandler callback handler\n     */\n    void uread(Edm edm, String resourcePath, Map<String, String> queryParams,\n               Olingo2ResponseHandler<InputStream> responseHandler);\n\n    /**\n     * Deletes an OData resource and invokes callback\n     * with {@link org.apache.olingo.odata2.api.commons.HttpStatusCodes} on success, or with exception on failure.\n     * @param resourcePath resource path for Entry\n     * @param responseHandler {@link org.apache.olingo.odata2.api.commons.HttpStatusCodes} callback handler\n     */\n    void delete(String resourcePath, Olingo2ResponseHandler<HttpStatusCodes> responseHandler);\n\n    /**\n     * Creates a new OData resource.\n     * @param edm service Edm\n     * @param resourcePath resource path to create\n<｜fim▁hole｜>     * @param responseHandler callback handler\n     */\n    <T> void create(Edm edm, String resourcePath, Object data, Olingo2ResponseHandler<T> responseHandler);\n\n    /**\n     * Updates an OData resource.\n     * @param edm service Edm\n     * @param resourcePath resource path to update\n     * @param data updated data\n     * @param responseHandler {@link org.apache.olingo.odata2.api.ep.entry.ODataEntry} callback handler\n     */\n    <T> void update(Edm edm, String resourcePath, Object data, Olingo2ResponseHandler<T> responseHandler);\n\n    /**\n     * Patches/merges an OData resource using HTTP PATCH.\n     * @param edm service Edm\n     * @param resourcePath resource path to update\n     * @param data patch/merge data\n     * @param responseHandler {@link org.apache.olingo.odata2.api.ep.entry.ODataEntry} callback handler\n     */\n    <T> void patch(Edm edm, String resourcePath, Object data, Olingo2ResponseHandler<T> responseHandler);\n\n    /**\n     * Patches/merges an OData resource using HTTP MERGE.\n     * @param edm service Edm\n     * @param resourcePath resource path to update\n     * @param data patch/merge data\n     * @param responseHandler {@link org.apache.olingo.odata2.api.ep.entry.ODataEntry} callback handler\n     */\n    <T> void merge(Edm edm, String resourcePath, Object data, Olingo2ResponseHandler<T> responseHandler);\n\n    /**\n     * Executes a batch request.\n     * @param edm service Edm\n     * @param data ordered {@link org.apache.camel.component.olingo2.api.batch.Olingo2BatchRequest} list\n     * @param responseHandler callback handler\n     */\n    void batch(Edm edm, Object data, Olingo2ResponseHandler<List<Olingo2BatchResponse>> responseHandler);\n}<｜fim▁end｜>",
    "response": "     * @param data request data\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apereo.cas.support.saml;\n\nimport org.cryptacular.util.CertUtil;\nimport org.opensaml.core.xml.io.Marshaller;\nimport org.opensaml.saml.common.SAMLObject;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.core.io.Resource;\nimport org.w3c.dom.Element;\n\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\n<｜fim▁hole｜>    private static Logger LOGGER = LoggerFactory.getLogger(SamlUtils.class);\n\n    private SamlUtils() {}\n\n    /**\n     * Read certificate x 509 certificate.\n     *\n     * @param resource the resource\n     * @return the x 509 certificate\n     */\n    public static X509Certificate readCertificate(final Resource resource) {\n        try(InputStream in = resource.getInputStream()) {\n            return CertUtil.readCertificate(in);\n        } catch (final Exception e) {\n            throw new RuntimeException(\"Error reading certificate \" + resource, e);\n        }\n    }\n\n    /**\n     * Transform saml object to String.\n     *\n     * @param configBean the config bean\n     * @param samlObject the saml object\n     * @return the string\n     * @throws SamlException the saml exception\n     */\n    public static StringWriter transformSamlObject(final OpenSamlConfigBean configBean, final SAMLObject samlObject) throws SamlException {\n        final StringWriter writer = new StringWriter();\n        try {\n            final Marshaller marshaller = configBean.getMarshallerFactory().getMarshaller(samlObject.getElementQName());\n            if (marshaller != null) {\n                final Element element = marshaller.marshall(samlObject);\n                final DOMSource domSource = new DOMSource(element);\n\n                final StreamResult result = new StreamResult(writer);\n                final TransformerFactory tf = TransformerFactory.newInstance();\n                final Transformer transformer = tf.newTransformer();\n                transformer.transform(domSource, result);\n            }\n        } catch (final Exception e) {\n            throw new SamlException(e.getMessage(), e);\n        }\n        return writer;\n    }\n\n    /**\n     * Log saml object.\n     *\n     * @param configBean the config bean\n     * @param samlObject the saml object\n     * @throws SamlException the saml exception\n     */\n    public static void logSamlObject(final OpenSamlConfigBean configBean, final SAMLObject samlObject) throws SamlException {\n        LOGGER.debug(\"Logging [{}]\\n{}\", samlObject.getClass().getName(), transformSamlObject(configBean, samlObject));\n    }\n}<｜fim▁end｜>",
    "response": "import javax.xml.transform.stream.StreamResult;\nimport java.io.InputStream;\nimport java.io.StringWriter;\nimport java.security.cert.X509Certificate;\n\npublic final class SamlUtils {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import vtk.vtkActor;\nimport vtk.vtkNamedColors;\nimport vtk.vtkNativeLibrary;\nimport vtk.vtkPolyDataMapper;\nimport vtk.vtkRenderWindow;\nimport vtk.vtkRenderWindowInteractor;\nimport vtk.vtkRenderer;\nimport vtk.vtkPoints;\nimport vtk.vtkLine;\nimport vtk.vtkCellArray;\nimport vtk.vtkRuledSurfaceFilter;\nimport vtk.vtkPolyData;\n\npublic class RuledSurfaceFilter \n{\n  // -----------------------------------------------------------------\n  // Load VTK library and print which library was not properly loaded\n  static \n  {\n    if (!vtkNativeLibrary.LoadAllNativeLibraries()) \n    {\n      for (vtkNativeLibrary lib : vtkNativeLibrary.values()) \n      {\n        if (!lib.IsLoaded()) \n        {\n          System.out.println(lib.GetLibraryName() + \" not loaded\");\n        }\n      }\n    }\n    vtkNativeLibrary.DisableOutputWindow(null);\n  }\n  // -----------------------------------------------------------------\n\n<｜fim▁hole｜>   double actorColor[] = new double[4];\n   //Renderer Background Color\n   double Bgcolor[] = new double[4];\n\n   colors.GetColor(\"Khaki\", actorColor);\n   colors.GetColor(\"LightSlateGray\", Bgcolor);\n   // Create first line.\n   vtkPoints points = new vtkPoints();\n   points.InsertPoint(0, 0, 0, 1);\n   points.InsertPoint(1, 1, 0, 0);\n   points.InsertPoint(2, 0, 1, 0);\n   points.InsertPoint(3, 1, 1, 1);\n\n   vtkLine line1 = new vtkLine();\n   line1.GetPointIds().SetId(0, 0);\n   line1.GetPointIds().SetId(1, 1);\n\n   vtkLine line2 = new vtkLine();\n   line2.GetPointIds().SetId(0, 2);\n   line2.GetPointIds().SetId(1, 3);\n\n   vtkCellArray lines = new vtkCellArray();\n   lines.InsertNextCell(line1);\n   lines.InsertNextCell(line2);\n\n   vtkPolyData polydata = new vtkPolyData();\n   polydata.SetPoints(points);\n   polydata.SetLines(lines);\n\n   vtkRuledSurfaceFilter ruledSurfaceFilter = new vtkRuledSurfaceFilter();\n   ruledSurfaceFilter.SetInputData(polydata);\n   ruledSurfaceFilter.SetResolution(21, 21);\n   ruledSurfaceFilter.SetRuledModeToResample();\n\n   // Create the renderer, render window and interactor.\n   vtkRenderer ren = new vtkRenderer();\n   vtkRenderWindow renWin = new vtkRenderWindow();\n   renWin.AddRenderer(ren);\n   vtkRenderWindowInteractor iren = new vtkRenderWindowInteractor();\n   iren.SetRenderWindow(renWin);\n\n   vtkPolyDataMapper mapper = new vtkPolyDataMapper();\n   mapper.SetInputConnection(ruledSurfaceFilter.GetOutputPort());\n\n   vtkActor actor = new vtkActor();\n   actor.SetMapper(mapper);\n   actor.GetProperty().SetColor(actorColor);\n\n   // Add the actors to the renderer, set the background and size\n   ren.AddActor(actor);\n\n   ren.ResetCamera();\n   ren.GetActiveCamera().Azimuth(60);\n   ren.GetActiveCamera().Elevation(60);\n   ren.GetActiveCamera().Dolly(1.2);\n   ren.ResetCameraClippingRange();\n\n   ren.SetBackground(Bgcolor);\n\n   renWin.SetSize(400, 400);\n   renWin.Render();\n\n   iren.Initialize();\n   iren.Start();\n  }\n}<｜fim▁end｜>",
    "response": "  public static void main(String args[]) \n  {\n   vtkNamedColors colors = new vtkNamedColors();\n   //For Actor Color\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package handling.world.guild;\n\nimport handling.world.WorldGuildService;\nimport java.util.Map;\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport org.apache.log4j.Logger;\n\npublic class GuildLoad {\n\n    public static final int NumSavingThreads = 6;\n    private static Map<Integer, Map<Integer, MapleBBSReply>> replies = null;\n    private static final TimingThread[] Threads = new TimingThread[6];\n    private static final Logger log = Logger.getLogger(GuildLoad.class);\n    private static final AtomicInteger Distribute;\n\n    public static void QueueGuildForLoad(int hm, Map<Integer, Map<Integer, MapleBBSReply>> replie) {\n        int Current = Distribute.getAndIncrement() % 6;\n        Threads[Current].getRunnable().Queue(hm);\n        if (replies == null) {\n<｜fim▁hole｜>    public static void Execute(Object ToNotify) {\n        for (TimingThread Thread : Threads) {\n            Thread.getRunnable().SetToNotify(ToNotify);\n        }\n        for (TimingThread Thread : Threads) {\n            Thread.start();\n        }\n    }\n\n    static {\n        for (int i = 0; i < Threads.length; i++) {\n            Threads[i] = new TimingThread(new GuildLoadRunnable());\n        }\n\n        Distribute = new AtomicInteger(0);\n    }\n\n    private static class TimingThread extends Thread {\n\n        private final GuildLoad.GuildLoadRunnable ext;\n\n        public TimingThread(GuildLoad.GuildLoadRunnable r) {\n            super();\n            this.ext = r;\n        }\n\n        public GuildLoad.GuildLoadRunnable getRunnable() {\n            return this.ext;\n        }\n    }\n\n    private static class GuildLoadRunnable\n            implements Runnable {\n\n        private Object ToNotify;\n        private final ArrayBlockingQueue<Integer> Queue = new ArrayBlockingQueue(1000);\n\n        @Override\n        public void run() {\n            try {\n                while (!this.Queue.isEmpty()) {\n                    WorldGuildService.getInstance().addLoadedGuild(new MapleGuild((this.Queue.take()), GuildLoad.replies));\n                }\n                synchronized (this.ToNotify) {\n                    this.ToNotify.notify();\n                }\n            } catch (InterruptedException ex) {\n                GuildLoad.log.error(\"[GuildLoad] 加载家族信息出错.\" + ex);\n            }\n        }\n\n        private void Queue(Integer hm) {\n            this.Queue.add(hm);\n        }\n\n        private void SetToNotify(Object o) {\n            if (this.ToNotify == null) {\n                this.ToNotify = o;\n            }\n        }\n    }\n}<｜fim▁end｜>",
    "response": "            replies = replie;\n        }\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package agent.dbgeng.model.impl;\n\nimport java.math.BigInteger;\nimport java.util.*;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.stream.Collectors;\n\nimport agent.dbgeng.manager.*;\nimport agent.dbgeng.manager.impl.DbgRegister;\nimport agent.dbgeng.model.iface2.*;\nimport ghidra.async.AsyncUtils;\nimport ghidra.dbg.error.DebuggerRegisterAccessException;\nimport ghidra.dbg.target.TargetObject;\nimport ghidra.dbg.target.TargetRegisterBank;\nimport ghidra.dbg.target.schema.*;\nimport ghidra.dbg.target.schema.TargetObjectSchema.ResyncMode;\nimport ghidra.dbg.util.ConversionUtils;\n\n@TargetObjectSchemaInfo(\n    name = \"RegisterContainer\",\n    elements = {\n<｜fim▁hole｜>            type = DbgModelTargetRegisterContainerImpl.class),\n        @TargetAttributeType(type = Void.class) },\n    canonicalContainer = true)\npublic class DbgModelTargetRegisterContainerImpl extends DbgModelTargetObjectImpl\n        implements DbgModelTargetRegisterContainerAndBank {\n\n    protected final DbgThread thread;\n\n    protected final Map<String, DbgModelTargetRegister> registersByName = new HashMap<>();\n\n    private Map<String, byte[]> values = new HashMap<>();\n\n    public DbgModelTargetRegisterContainerImpl(DbgModelTargetThread thread) {\n        super(thread.getModel(), thread, \"Registers\", \"RegisterContainer\");\n        this.thread = thread.getThread();\n\n        requestElements(false);\n        changeAttributes(List.of(), List.of(), Map.of( //\n            TargetRegisterBank.DESCRIPTIONS_ATTRIBUTE_NAME, this //\n        ), \"Initialized\");\n    }\n\n    @Override\n    public CompletableFuture<Void> requestElements(boolean refresh) {\n        return thread.listRegisters().thenAccept(regs -> {\n            if (regs.size() != registersByName.size()) {\n                DbgModelImpl impl = (DbgModelImpl) model;\n                for (DbgRegister reg : regs) {\n                    impl.deleteModelObject(reg);\n                }\n                registersByName.clear();\n\n            }\n            List<TargetObject> registers;\n            synchronized (this) {\n                registers = regs.stream().map(this::getTargetRegister).collect(Collectors.toList());\n            }\n            setElements(registers, Map.of(), \"Refreshed\");\n            if (!getCachedElements().isEmpty()) {\n                readRegistersNamed(getCachedElements().keySet());\n            }\n        });\n    }\n\n    public void threadStateChangedSpecific(DbgState state, DbgReason reason) {\n        if (!state.equals(DbgState.RUNNING)) {\n            readRegistersNamed(getCachedElements().keySet());\n        }\n    }\n\n    @Override\n    public synchronized DbgModelTargetRegister getTargetRegister(DbgRegister register) {\n        DbgModelImpl impl = (DbgModelImpl) model;\n        TargetObject modelObject = impl.getModelObject(register);\n        if (modelObject != null) {\n            return (DbgModelTargetRegister) modelObject;\n        }\n        DbgModelTargetRegister reg = new DbgModelTargetRegisterImpl(this, register);\n        registersByName.put(register.getName(), reg);\n        return reg;\n    }\n\n    @Override\n    public CompletableFuture<? extends Map<String, byte[]>> readRegistersNamed(\n            Collection<String> names) {\n        return model.gateFuture(thread.listRegisters().thenCompose(regs -> {\n            if (regs.size() != registersByName.size() || getCachedElements().isEmpty()) {\n                return requestElements(false);\n            }\n            return AsyncUtils.NIL;\n        }).thenCompose(__ -> {\n            Set<DbgRegister> toRead = new LinkedHashSet<>();\n            for (String regname : names) {\n                DbgModelTargetRegister reg = registersByName.get(regname);\n                if (reg != null) {\n                    DbgRegister register = reg.getRegister();\n                    //if (register.isBaseRegister()) {\n                    toRead.add(register);\n                    //}\n                    //throw new DebuggerRegisterAccessException(\"No such register: \" + regname);\n                }\n            }\n            return thread.readRegisters(toRead);\n        }).thenApply(vals -> {\n            Map<String, byte[]> result = new LinkedHashMap<>();\n            for (DbgRegister dbgReg : vals.keySet()) {\n                DbgModelTargetRegister reg = getTargetRegister(dbgReg);\n                String oldval = (String) reg.getCachedAttributes().get(VALUE_ATTRIBUTE_NAME);\n                BigInteger value = vals.get(dbgReg);\n                byte[] bytes = ConversionUtils.bigIntegerToBytes(dbgReg.getSize(), value);\n                result.put(dbgReg.getName(), bytes);\n                reg.changeAttributes(List.of(), Map.of( //\n                    VALUE_ATTRIBUTE_NAME, value.toString(16) //\n                ), \"Refreshed\");\n                if (value.longValue() != 0) {\n                    String newval = reg.getName() + \" : \" + value.toString(16);\n                    reg.changeAttributes(List.of(), Map.of( //\n                        DISPLAY_ATTRIBUTE_NAME, newval //\n                    ), \"Refreshed\");\n                    reg.setModified(!value.toString(16).equals(oldval));\n                }\n            }\n            this.values = result;\n            listeners.fire.registersUpdated(getProxy(), result);\n            return result;\n        }));\n    }\n\n    @Override\n    public CompletableFuture<Void> writeRegistersNamed(Map<String, byte[]> values) {\n        return model.gateFuture(thread.listRegisters().thenCompose(regs -> {\n            return requestElements(false);\n        }).thenCompose(__ -> {\n            Map<String, ? extends TargetObject> regs = getCachedElements();\n            Map<DbgRegister, BigInteger> toWrite = new LinkedHashMap<>();\n            for (Map.Entry<String, byte[]> ent : values.entrySet()) {\n                String regname = ent.getKey();\n                DbgModelTargetRegister reg = (DbgModelTargetRegister) regs.get(regname);\n                if (reg == null) {\n                    throw new DebuggerRegisterAccessException(\"No such register: \" + regname);\n                }\n                BigInteger val = new BigInteger(1, ent.getValue());\n                toWrite.put(reg.getRegister(), val);\n            }\n            return thread.writeRegisters(toWrite);\n            // TODO: Should probably filter only effective and normalized writes in the callback\n        }).thenAccept(__ -> {\n            listeners.fire.registersUpdated(getProxy(), values);\n        }));\n    }\n\n    public Map<String, byte[]> getCachedRegisters() {\n        return values;\n    }\n\n}<｜fim▁end｜>",
    "response": "        @TargetElementType(type = DbgModelTargetRegisterImpl.class) },\n    elementResync = ResyncMode.ONCE, //\n    attributes = {\n        @TargetAttributeType(\n            name = TargetRegisterBank.DESCRIPTIONS_ATTRIBUTE_NAME,\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.example.android.wearable.timer.util;\n\npublic final class TimerFormat {\n\n    private static final String TWO_DIGITS = \"%02d\";\n\n    private static final String ONE_DIGIT = \"%01d\";\n\n    private static final String NEG_TWO_DIGITS = \"-%02d\";\n\n    private static final String NEG_ONE_DIGIT = \"-%01d\";\n\n    private static String mHours;\n\n    private static String mMinutes;\n\n    private static String mSeconds;\n\n    private TimerFormat() {\n\n    }\n\n    /**\n     * Update the time to display. Separates that time into the hours, minutes, seconds.\n     * Copied and shortened from com.android.deskclock.timer.CountingTimerView.\n     *\n     * @param time new time to display - in milliseconds\n     */\n    private static void setTime(long time) {\n        boolean neg = false;\n        boolean showNeg = false;\n        String format;\n        if (time < 0) {\n            time = -time;\n            neg = showNeg = true;\n        }\n        long seconds = time / 1000;\n        long hundreds = (time - seconds * 1000) / 10;\n        long minutes = seconds / 60;\n        seconds = seconds - minutes * 60;\n<｜fim▁hole｜>        }\n        // The time  can be between 0 and -1 seconds, but the \"truncated\" equivalent time of hours\n        // and minutes and seconds could be zero, so since we do not show fractions of seconds\n        // when counting down, do not show the minus sign.\n        if (hours == 0 && minutes == 0 && seconds == 0) {\n            showNeg = false;\n        }\n\n        // Normalize and check if it is 'time' to invalidate\n        if (!neg && hundreds != 0) {\n            seconds++;\n            if (seconds == 60) {\n                seconds = 0;\n                minutes++;\n                if (minutes == 60) {\n                    minutes = 0;\n                    hours++;\n                }\n            }\n        }\n\n        // Hours may be empty\n        if (hours >= 10) {\n            format = showNeg ? NEG_TWO_DIGITS : TWO_DIGITS;\n            mHours = String.format(format, hours);\n        } else if (hours > 0) {\n            format = showNeg ? NEG_ONE_DIGIT : ONE_DIGIT;\n            mHours = String.format(format, hours);\n        } else {\n            mHours = null;\n        }\n\n        // Minutes are never empty and when hours are non-empty, must be two digits\n        if (minutes >= 10 || hours > 0) {\n            format = (showNeg && hours == 0) ? NEG_TWO_DIGITS : TWO_DIGITS;\n            mMinutes = String.format(format, minutes);\n        } else {\n            format = (showNeg && hours == 0) ? NEG_ONE_DIGIT : ONE_DIGIT;\n            mMinutes = String.format(format, minutes);\n        }\n\n        // Seconds are always two digits\n        mSeconds = String.format(TWO_DIGITS, seconds);\n    }\n\n    /**\n     * Based on com.android.deskclock.timer.CountingTimerView.\n     *\n     * @param time the time to format.\n     * @return nicely formatted time.\n     */\n    public static String getTimeString(long time) {\n        setTime(time);\n        if (mHours == null) {\n            return String.format(\"%s:%s\", mMinutes, mSeconds);\n        }\n        return String.format(\"%s:%s:%s\", mHours, mMinutes, mSeconds);\n\n    }\n}<｜fim▁end｜>",
    "response": "        long hours = minutes / 60;\n        minutes = minutes - hours * 60;\n        if (hours > 999) {\n            hours = 0;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.elasticsearch.script;\n\nimport org.apache.lucene.index.LeafReaderContext;\nimport org.apache.lucene.util.ArrayUtil;\nimport org.elasticsearch.search.lookup.SearchLookup;\n\nimport java.util.Map;\nimport java.util.function.LongConsumer;\n\npublic abstract class AbstractLongFieldScript extends AbstractFieldScript {\n    private long[] values = new long[1];\n    private int count;\n\n    public AbstractLongFieldScript(String fieldName, Map<String, Object> params, SearchLookup searchLookup, LeafReaderContext ctx) {\n        super(fieldName, params, searchLookup, ctx);\n    }\n\n    /**\n     * Execute the script for the provided {@code docId}.\n     */\n    public final void runForDoc(int docId) {\n        count = 0;\n        setDocument(docId);\n        execute();\n    }\n\n    /**\n     * Execute the script for the provided {@code docId}, passing results to the {@code consumer}\n     */\n    public final void runForDoc(int docId, LongConsumer consumer) {\n        runForDoc(docId);\n        for (int i = 0; i < count; i++) {\n            consumer.accept(values[i]);\n        }\n    }\n\n    /**\n     * Values from the last time {@link #runForDoc(int)} was called. This array\n     * is mutable and will change with the next call of {@link #runForDoc(int)}.\n     * It is also oversized and will contain garbage at all indices at and\n     * above {@link #count()}.\n     */\n    public final long[] values() {\n        return values;\n<｜fim▁hole｜>     */\n    public final int count() {\n        return count;\n    }\n\n    public final void emit(long v) {\n        checkMaxSize(count);\n        if (values.length < count + 1) {\n            values = ArrayUtil.grow(values, count + 1);\n        }\n        values[count++] = v;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    /**\n     * The number of results produced the last time {@link #runForDoc(int)} was called.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.nubits.nubot.tests;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.logging.Logger;\n\npublic class TestQuick {\n\n    private static final Logger LOG = Logger.getLogger(TestQuick.class.getName());\n\n    public static void main(String[] a) {\n        String date = \"2014-12-22T17:55:25.107Z\";\n        String pattern = \"yyyy-MM-dd'T'HH:mm:ss\";\n\n        SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n        try {\n            Date d = sdf.parse(date);\n        } catch (java.text.ParseException pe1) {\n            LOG.severe(pe1.toString());\n        }\n\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "        System.out.println(\"done\");\n\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.elasticsearch.xpack.analytics.movingPercentiles;\n\nimport org.HdrHistogram.DoubleHistogram;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.LongPoint;\nimport org.apache.lucene.document.NumericDocValuesField;\nimport org.apache.lucene.document.SortedNumericDocValuesField;\nimport org.apache.lucene.index.DirectoryReader;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.RandomIndexWriter;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.util.NumericUtils;\nimport org.elasticsearch.index.mapper.DateFieldMapper;\nimport org.elasticsearch.index.mapper.MappedFieldType;\nimport org.elasticsearch.index.mapper.NumberFieldMapper;\nimport org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;\nimport org.elasticsearch.search.aggregations.bucket.histogram.InternalDateHistogram;\nimport org.elasticsearch.search.aggregations.metrics.InternalHDRPercentiles;\nimport org.elasticsearch.search.aggregations.metrics.PercentilesConfig;\n\nimport java.io.IOException;\n\npublic class MovingPercentilesHDRAggregatorTests extends MovingPercentilesAbstractAggregatorTests {\n\n    @Override\n    protected PercentilesConfig getPercentileConfig() {\n        return new PercentilesConfig.Hdr(1);\n    }\n\n    @Override\n    protected  void executeTestCase(int window, int shift, Query query,\n                                 DateHistogramAggregationBuilder aggBuilder) throws IOException {\n\n        DoubleHistogram[] states = new DoubleHistogram[datasetTimes.size()];\n        try (Directory directory = newDirectory()) {\n            try (RandomIndexWriter indexWriter = new RandomIndexWriter(random(), directory)) {\n                Document document = new Document();\n                int counter = 0;\n                for (String date : datasetTimes) {\n                    states[counter] = new DoubleHistogram(1);\n                    final int numberDocs = randomIntBetween(5, 50);\n                    long instant = asLong(date);\n                    for (int i =0; i < numberDocs; i++) {\n                        if (frequently()) {\n                            indexWriter.commit();\n                        }\n                        double value = randomDoubleBetween(0, 10, true);\n                        states[counter].recordValue(value);\n                        document.add(new SortedNumericDocValuesField(DATE_FIELD, instant));\n                        document.add(new LongPoint(INSTANT_FIELD, instant));\n                        document.add(new NumericDocValuesField(VALUE_FIELD, NumericUtils.doubleToSortableLong(value)));\n                        indexWriter.addDocument(document);\n                        document.clear();\n                    }\n                    counter++;\n                }\n            }\n\n            try (IndexReader indexReader = DirectoryReader.open(directory)) {\n                IndexSearcher indexSearcher = newSearcher(indexReader, true, true);\n\n                DateFieldMapper.DateFieldType fieldType = new DateFieldMapper.DateFieldType(aggBuilder.field());\n                MappedFieldType valueFieldType\n                    = new NumberFieldMapper.NumberFieldType(\"value_field\", NumberFieldMapper.NumberType.DOUBLE);\n\n                InternalDateHistogram histogram;\n                histogram = searchAndReduce(indexSearcher, query, aggBuilder, 1000,\n                    new MappedFieldType[]{fieldType, valueFieldType});\n                for (int i = 0; i < histogram.getBuckets().size(); i++) {\n                    InternalDateHistogram.Bucket bucket = histogram.getBuckets().get(i);\n                    InternalHDRPercentiles values = bucket.getAggregations().get(\"MovingPercentiles\");\n                    DoubleHistogram expected = reduce(i, window, shift, states);\n                    if (values == null) {\n                        assertNull(expected);\n                    } else {\n                        DoubleHistogram agg = values.getState();\n<｜fim▁hole｜>                        assertEquals(expected.getMinValue(), agg.getMinValue(), 0d);\n                    }\n                }\n            }\n        }\n    }\n\n    private DoubleHistogram reduce(int index, int window, int shift, DoubleHistogram[] buckets) {\n        int fromIndex = clamp(index - window + shift, buckets.length);\n        int toIndex = clamp(index + shift, buckets.length);\n        if (fromIndex == toIndex) {\n            return null;\n        }\n        DoubleHistogram result = new DoubleHistogram(buckets[0].getNumberOfSignificantValueDigits());\n        for (int i = fromIndex; i < toIndex; i++) {\n            result.add(buckets[i]);\n        }\n        return result;\n    }\n}<｜fim▁end｜>",
    "response": "                        assertEquals(expected.getTotalCount(), agg.getTotalCount());\n                        assertEquals(expected.getMaxValue(), agg.getMaxValue(), 0d);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.nightcode.common.base;\n\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\n\npublic final class EmptyIterator<E> extends ReadOnlyIterator<E> {\n\n  private static final Iterator<?> INSTANCE = new EmptyIterator<>();\n\n  private EmptyIterator() {\n    // do nothing\n  }\n\n  /**\n   * Returns false always.\n   *\n   * @return false\n   */\n  @Override public boolean hasNext() {\n    return false;\n  }\n\n  /**\n   * Guaranteed to throw an exception.\n   *\n   * @throws NoSuchElementException always\n   */\n  @Override public E next() {\n<｜fim▁hole｜>\n  /**\n   * Returns INSTANCE of empty iterator.\n   *\n   * @param <E> an element's type\n   * @return instance of empty iterator\n   */\n  @SuppressWarnings(\"unchecked\")\n  public static <E> Iterator<E> instance() {\n    return (Iterator<E>) INSTANCE;\n  }\n}<｜fim▁end｜>",
    "response": "    throw new NoSuchElementException();\n  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.syndesis.runtime;\n\nimport io.fabric8.kubernetes.client.KubernetesClient;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\nimport static org.junit.Assert.assertNotNull;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n\n@SpringBootTest(classes = { KubernetesClient.class })\npublic class KubernetesClientITCase {\n\n    @Autowired\n    private KubernetesClient client;\n\n    @Test\n    public void clientShouldNotBeNull() {\n        assertNotNull(client);\n<｜fim▁hole｜>\n}<｜fim▁end｜>",
    "response": "    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.xandrev.jdorg.organizers.service;\n\nimport com.xandrev.jdorg.configuration.Configuration;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.log4j.LogManager;\nimport org.apache.log4j.Logger;\n\nimport com.xandrev.jdorg.i18n.TextLocalizerManager;\nimport com.xandrev.jdorg.organizers.Organizer;\nimport java.util.Collections;\n\npublic class OrganizerManager {\n\n    private static OrganizerManager instance;\n    private List<Organizer> organizerList;\n    private Logger logger;\n\n    private static final String ORGANIZER_SEPARATOR = \",\";\n    private static final String PACKAGE_NAME = \"com.xandrev.jdorg.organizers.impl.\";\n    private static final Object LOCK = new Object();\n\n    public static OrganizerManager getInstance(String configurationList) {\n        synchronized (LOCK) {\n            if (instance == null) {\n                instance = new OrganizerManager(configurationList);\n            }\n        }\n        return instance;\n    }\n\n    protected OrganizerManager(String configurationList) {\n        TextLocalizerManager i18n = TextLocalizerManager.getInstance(null);\n        logger = LogManager.getLogger(OrganizerManager.class);\n        organizerList = new ArrayList<Organizer>();\n        logger.debug(i18n.getLocalizerText(\"init.organizermanager\"));\n        if (configurationList != null) {\n            logger.debug(i18n.getLocalizerText(\"organizermanager.read.list\") + configurationList);\n            String[] listString = configurationList.split(ORGANIZER_SEPARATOR);\n            for (String str : listString) {\n                logger.debug(i18n.getLocalizerText(\"organizermanager.process.item\") + str);\n                Organizer organizerTarget = generateOrganizer(str);\n                if (organizerTarget != null) {\n                    logger.debug(i18n.getLocalizerText(\"organizermanager.item.added\") + str);\n                    organizerList.add(organizerTarget);\n                }\n            }\n        }\n\n        Collections.sort(organizerList);\n        for(Organizer org: organizerList){\n            logger.debug(\"Organizer: \"+org.getRootFolder() + \" Priority: \"+ org.getPriority());\n        }\n\n        logger.debug(i18n.getLocalizerText(\"organizermanager.finish\"));\n\n    }\n\n    private Organizer generateOrganizer(String str) {\n        if (str != null) {\n            String normalClass = PACKAGE_NAME + str;\n            try {\n                Object classObject = Class.forName(normalClass).newInstance();\n                if (classObject instanceof Organizer) {\n                    return (Organizer) classObject;\n                }\n\n            } catch (Exception ex) {\n                logger.error(ex);\n            }\n        }\n        return null;\n    }\n<｜fim▁hole｜>    }\n}<｜fim▁end｜>",
    "response": "\n    public List<Organizer> getOrganizerList() {\n        return organizerList;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package Teste;\n\nimport java.awt.BorderLayout;\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.awt.EventQueue;\nimport java.awt.Graphics;\nimport java.awt.Graphics2D;\nimport java.awt.Point;\nimport java.awt.Rectangle;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.swing.JFrame;\nimport javax.swing.JPanel;\nimport javax.swing.UIManager;\nimport javax.swing.UnsupportedLookAndFeelException;\n\npublic class Teste {\n\n    public static void main(String[] args) {\n        new Teste();\n    }\n\n    public Teste() {\n        EventQueue.invokeLater(new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n                } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {\n                }\n\n                JFrame frame = new JFrame(\"Testing\");\n                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n                frame.setLayout(new BorderLayout());\n                frame.add(new TestPane());\n                frame.pack();\n                frame.setLocationRelativeTo(null);\n                frame.setVisible(true);\n            }\n        });\n    }\n\n    public class TestPane extends JPanel {\n\n        private int columnCount = 5;\n        private int rowCount = 5;\n        private List<Rectangle> cells;\n        private Point selectedCell;\n\n        public TestPane() {\n<｜fim▁hole｜>                    Point point = e.getPoint();\n\n                    int width = getWidth();\n                    int height = getHeight();\n\n                    int cellWidth = width / columnCount;\n                    int cellHeight = height / rowCount;\n\n                    int column = e.getX() / cellWidth;\n                    int row = e.getY() / cellHeight;\n\n                    selectedCell = new Point(column, row);\n                    repaint();\n\n                }\n            };\n            addMouseMotionListener(mouseHandler);\n        }\n\n        @Override\n        public Dimension getPreferredSize() {\n            return new Dimension(200, 200);\n        }\n\n        @Override\n        public void invalidate() {\n            cells.clear();\n            selectedCell = null;\n            super.invalidate();\n        }\n\n        @Override\n        protected void paintComponent(Graphics g) {\n            super.paintComponent(g);\n            Graphics2D g2d = (Graphics2D) g.create();\n\n            int width = getWidth();\n            int height = getHeight();\n\n            int cellWidth = width / columnCount;\n            int cellHeight = height / rowCount;\n\n            int xOffset = (width - (columnCount * cellWidth)) / 2;\n            int yOffset = (height - (rowCount * cellHeight)) / 2;\n\n            if (cells.isEmpty()) {\n                for (int row = 0; row < rowCount; row++) {\n                    for (int col = 0; col < columnCount; col++) {\n                        Rectangle cell = new Rectangle(\n                                xOffset + (col * cellWidth),\n                                yOffset + (row * cellHeight),\n                                cellWidth,\n                                cellHeight);\n                        cells.add(cell);\n                    }\n                }\n            }\n\n            if (selectedCell != null) {\n\n                int index = selectedCell.x + (selectedCell.y * columnCount);\n                Rectangle cell = cells.get(index);\n                g2d.setColor(Color.BLUE);\n                g2d.fill(cell);\n\n            }\n\n            g2d.setColor(Color.GRAY);\n            for (Rectangle cell : cells) {\n                g2d.draw(cell);\n            }\n\n            g2d.dispose();\n        }\n    }\n}<｜fim▁end｜>",
    "response": "            cells = new ArrayList<>(columnCount * rowCount);\n            MouseAdapter mouseHandler;\n            mouseHandler = new MouseAdapter() {\n                @Override\n                public void mouseMoved(MouseEvent e) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.datastax.driver.core.exceptions;\n\nimport com.beust.jcommander.internal.Maps;\nimport org.testng.annotations.Test;\n\nimport java.io.PrintWriter;\n<｜fim▁hole｜>\npublic class NoHostAvailableExceptionTest {\n    @Test(groups = \"unit\")\n    public void should_build_default_message_when_less_than_3_errors() {\n        NoHostAvailableException e = new NoHostAvailableException(buildMockErrors(3));\n        String message = e.getMessage();\n        assertThat(message).startsWith(\"All host(s) tried for query failed\");\n        assertThat(message).contains(\"/127.0.0.1:9042 (com.datastax.driver.core.exceptions.NoHostAvailableExceptionTest$MockError: mock error 1)\");\n        assertThat(message).contains(\"/127.0.0.2:9042 (com.datastax.driver.core.exceptions.NoHostAvailableExceptionTest$MockError: mock error 2)\");\n        assertThat(message).contains(\"/127.0.0.3:9042 (com.datastax.driver.core.exceptions.NoHostAvailableExceptionTest$MockError: mock error 3)\");\n    }\n\n    @Test(groups = \"unit\")\n    public void should_build_default_message_when_more_than_3_errors() {\n        NoHostAvailableException e = new NoHostAvailableException(buildMockErrors(4));\n        String message = e.getMessage();\n        assertThat(message).startsWith(\"All host(s) tried for query failed\");\n        assertThat(message).contains(\"/127.0.0.1:9042 (com.datastax.driver.core.exceptions.NoHostAvailableExceptionTest$MockError: mock error 1)\");\n        assertThat(message).contains(\"/127.0.0.2:9042 (com.datastax.driver.core.exceptions.NoHostAvailableExceptionTest$MockError: mock error 2)\");\n        assertThat(message).contains(\"/127.0.0.3:9042 (com.datastax.driver.core.exceptions.NoHostAvailableExceptionTest$MockError: mock error 3)\");\n        assertThat(message).contains(\"only showing errors of first 3 hosts, use getErrors() for more details\");\n    }\n\n    @Test(groups = \"unit\")\n    public void should_build_formatted_message_without_stack_traces() {\n        NoHostAvailableException e = new NoHostAvailableException(buildMockErrors(3));\n        String message = e.getCustomMessage(3, true, false);\n        assertThat(message).startsWith(\"All host(s) tried for query failed (tried:\\n\");\n        assertThat(message).contains(\"/127.0.0.1:9042 (com.datastax.driver.core.exceptions.NoHostAvailableExceptionTest$MockError: mock error 1)\\n\");\n        assertThat(message).contains(\"/127.0.0.2:9042 (com.datastax.driver.core.exceptions.NoHostAvailableExceptionTest$MockError: mock error 2)\\n\");\n        assertThat(message).contains(\"/127.0.0.3:9042 (com.datastax.driver.core.exceptions.NoHostAvailableExceptionTest$MockError: mock error 3)\\n\");\n    }\n\n    @Test(groups = \"unit\")\n    public void should_build_formatted_message_with_stack_traces() {\n        NoHostAvailableException e = new NoHostAvailableException(buildMockErrors(3));\n        String message = e.getCustomMessage(3, true, true);\n        assertThat(message).startsWith(\"All host(s) tried for query failed (tried:\\n\");\n        assertThat(message).contains(\"/127.0.0.1:9042\\nmock stack trace 1\\n\");\n        assertThat(message).contains(\"/127.0.0.3:9042\\nmock stack trace 3\\n\");\n        assertThat(message).contains(\"/127.0.0.2:9042\\nmock stack trace 2\\n\");\n    }\n\n    private static Map<InetSocketAddress, Throwable> buildMockErrors(int count) {\n        Map<InetSocketAddress, Throwable> errors = Maps.newHashMap();\n        for (int i = 1; i <= count; i++) {\n            errors.put(new InetSocketAddress(\"127.0.0.\" + i, 9042), new MockError(i));\n        }\n        return errors;\n    }\n\n    static class MockError extends Exception {\n        private final int i;\n\n        MockError(int i) {\n            super(\"mock error \" + i);\n            this.i = i;\n        }\n\n        @Override\n        public void printStackTrace(PrintWriter writer) {\n            writer.printf(\"mock stack trace %d\", i);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "import java.net.InetSocketAddress;\nimport java.util.Map;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import com.pi4j.io.gpio.GpioController;\nimport com.pi4j.io.gpio.GpioFactory;\nimport com.pi4j.io.gpio.GpioPinDigitalOutput;\nimport com.pi4j.io.gpio.PinPullResistance;\nimport com.pi4j.io.gpio.PinState;\nimport com.pi4j.io.gpio.RaspiPin;\n\npublic class ShutdownGpioExample {\n\n    public static void main(String[] args) throws InterruptedException {\n\n        System.out.println(\"<--Pi4J--> GPIO Shutdown Example ... started.\");\n\n        // create gpio controller\n        final GpioController gpio = GpioFactory.getInstance();\n\n        // provision gpio pin #01 as an output pin and turn on\n        final GpioPinDigitalOutput pin = gpio.provisionDigitalOutputPin(RaspiPin.GPIO_01, PinState.HIGH);\n\n<｜fim▁hole｜>\n        System.out.println(\"--> GPIO state should be: ON\");\n        System.out.println(\"    This program will automatically terminate in 10 seconds,\");\n        System.out.println(\"    or you can use the CTRL-C keystroke to terminate at any time.\");\n        System.out.println(\"    When the program terminates, the GPIO state should be shutdown and set to: OFF\");\n\n        // wait 10 seconds\n        Thread.sleep(10000);\n\n        System.out.println(\" .. shutting down now ...\");\n\n        // stop all GPIO activity/threads by shutting down the GPIO controller\n        // (this method will forcefully shutdown all GPIO monitoring threads and scheduled tasks)\n        gpio.shutdown();\n    }\n}<｜fim▁end｜>",
    "response": "        // configure the pin shutdown behavior; these settings will be \n        // automatically applied to the pin when the application is terminated\n        pin.setShutdownOptions(true, PinState.LOW, PinPullResistance.OFF);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.sfm.reflect.primitive;\n\nimport org.sfm.reflect.Getter;\n\npublic class BoxedDoubleGetter<T> implements DoubleGetter<T>, Getter<T, Double> {\n\n    private final Getter<? super T, Double> delegate;\n\n    public BoxedDoubleGetter(Getter<? super T, Double> delegate) {\n        this.delegate = delegate;\n    }\n\n    @Override\n    public double getDouble(T target) throws Exception {\n        final Double value = get(target);\n        if (value != null) {\n            return value.doubleValue();\n        }\n<｜fim▁hole｜>        return delegate.get(target);\n    }\n}<｜fim▁end｜>",
    "response": "        return 0;\n    }\n\n    @Override\n    public Double get(T target) throws Exception {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package suite.lp.doer;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\nimport java.util.HashMap;\n\nimport org.junit.jupiter.api.Test;\n\nimport suite.node.Atom;\nimport suite.node.Dict;\nimport suite.node.Int;\nimport suite.node.Node;\nimport suite.node.Reference;\nimport suite.node.Tree;\n\npublic class BinderTest {\n\n    @Test\n    public void testOkay() {\n        assertTrue(bind(Atom.NIL, Atom.NIL));\n\n        var key0 = Atom.of(\"k0\");\n        var key1 = Atom.of(\"k1\");\n        var ref0 = new Reference();\n        var ref1 = new Reference();\n\n        var map0 = new HashMap<Node, Reference>();\n        map0.put(key0, ref0);\n<｜fim▁hole｜>        System.out.println(map0);\n        System.out.println(map1);\n\n        bind(ref0, Atom.NIL);\n        assertEquals(Atom.NIL, map1.get(key0).finalNode());\n    }\n\n    @Test\n    public void testRecurse() {\n        var ref0 = new Reference();\n        var ref1 = new Reference();\n        ref0.bound(Tree.ofAnd(Int.of(0), ref0));\n        ref1.bound(Tree.ofAnd(Int.of(0), ref1));\n        assertTrue(bind(ref0, ref1));\n    }\n\n    @Test\n    public void testFail() {\n        assertFalse(bind(Atom.NIL, Int.of(0)));\n\n        var key = Atom.of(\"key\");\n\n        var map0 = new HashMap<Node, Reference>();\n        map0.put(key, Reference.of(Atom.of(\"A\")));\n\n        var map1 = new HashMap<Node, Reference>();\n        map1.put(key, Reference.of(Atom.of(\"B\")));\n\n        assertFalse(bind(Dict.of(map0), Dict.of(map1)));\n    }\n\n    private boolean bind(Node n0, Node n1) {\n        return Binder.bind(n0, n1);\n    }\n\n}<｜fim▁end｜>",
    "response": "\n        var map1 = new HashMap<Node, Reference>();\n        map1.put(key1, ref1);\n\n        assertTrue(bind(Dict.of(map0), Dict.of(map1)));\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.github.mthli.Bitocle.WebView;\n\npublic class GetImage {\n    public static String getImageUrl(String base64, String imageType) {\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(\"data:image/\");\n        stringBuilder.append(imageType);\n        stringBuilder.append(\";base64,\");\n        stringBuilder.append(base64);\n\n        return stringBuilder.toString();\n    }\n\n    public static String getImage(String imageUrl) {\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(\"<html>\\n\");\n        stringBuilder.append(\"<body style=\\\"background-color:#dddddd;margin:auto\\\">\\n\");\n        stringBuilder.append(\"<span class=\\\"border:solid 1px #333333;\\\">\\n\");\n        stringBuilder.append(\"<img src=\\\"\");\n        stringBuilder.append(imageUrl);\n        stringBuilder.append(\"\\\" style=\\\"\\\"/>\\n\");\n        stringBuilder.append(\"</span>\\n\");\n        stringBuilder.append(\"</body>\\n\");\n<｜fim▁hole｜>\n        return stringBuilder.toString();\n    }\n}<｜fim▁end｜>",
    "response": "        stringBuilder.append(\"</html>\");\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.biglybt.core.util.protocol;\n\n<｜fim▁hole｜>    /**\n     * Determines if an URL can be processed without {@link URL#openConnection()}\n     * or {@link URL#openStream()}\n     *\n     * @param checkUrl URL to check\n     * @param processUrlNow If URL can be processed without a connection, true will process the URL\n     * @return\n     */\n    boolean canProcessWithoutConnection(URL checkUrl, boolean processUrlNow);\n}<｜fim▁end｜>",
    "response": "import java.net.URL;\n\npublic interface AzURLStreamHandlerSkipConnection {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import edu.princeton.cs.algs4.StdDraw;\nimport edu.princeton.cs.algs4.StdOut;\n\npublic class InteractivePercolationVisualizer {\n\n    public static void main(String[] args) {\n        // n-by-n percolation system (read from command-line, default = 10)\n        int n = 10;\n        if (args.length == 1) n = Integer.parseInt(args[0]);\n\n        // repeatedly open site specified my mouse click and draw resulting system\n        StdOut.println(n);\n\n        StdDraw.enableDoubleBuffering();\n        Percolation perc = new Percolation(n);\n        PercolationVisualizer.draw(perc, n);\n        StdDraw.show();\n\n        while (true) {\n\n            // detected mouse click\n            if (StdDraw.mousePressed()) {\n\n                // screen coordinates\n                double x = StdDraw.mouseX();\n                double y = StdDraw.mouseY();\n\n                // convert to row i, column j\n                int i = (int) (n - Math.floor(y));\n                int j = (int) (1 + Math.floor(x));\n\n<｜fim▁hole｜>                }\n\n                // draw n-by-n percolation system\n                PercolationVisualizer.draw(perc, n);\n                StdDraw.show();\n            }\n\n            StdDraw.pause(20);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "                // open site (i, j) provided it's in bounds\n                if (i >= 1 && i <= n && j >= 1 && j <= n) {\n                    if (!perc.isOpen(i, j)) {\n                        StdOut.println(i + \" \" + j);\n                    }\n                    perc.open(i, j);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>import javax.annotation.Resource;\n\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport alien4cloud.exception.NotFoundException;\nimport alien4cloud.paas.IPaaSProviderFactory;\nimport alien4cloud.paas.PaaSProviderFactoriesService;\nimport alien4cloud.plugin.model.PluginComponentDescriptor;\nimport alien4cloud.plugin.model.PluginDescriptor;\nimport alien4cloud.plugin.PluginManager;\nimport alien4cloud.rest.model.RestResponse;\nimport alien4cloud.rest.model.RestResponseBuilder;\n\nimport com.google.common.collect.Lists;\nimport com.wordnik.swagger.annotations.ApiOperation;\n\n@RestController\n@RequestMapping(\"/rest/passprovider\")\npublic class PaaSProviderController {\n    @Resource\n    private PaaSProviderFactoriesService paaSProviderFactoriesService;\n    @Resource\n    private PluginManager pluginManager;\n\n    @ApiOperation(value = \"Retrieve a list of available PaaSProvider .\", notes = \"\")\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    @PreAuthorize(\"hasAuthority('ADMIN')\")\n    public RestResponse<List<PaaSProviderDTO>> listPaaSProviders() {\n        RestResponse<List<PaaSProviderDTO>> response = RestResponseBuilder.<List<PaaSProviderDTO>> builder().build();\n        Map<String, Map<String, IPaaSProviderFactory>> instancesByPlugins = paaSProviderFactoriesService.getInstancesByPlugins();\n\n        if (MapUtils.isEmpty(instancesByPlugins)) {\n            return response;\n        }\n\n        List<PaaSProviderDTO> paasDeployers = Lists.newArrayList();\n        for (Entry<String, Map<String, IPaaSProviderFactory>> entry : instancesByPlugins.entrySet()) {\n            if (!MapUtils.isEmpty(entry.getValue())) {\n                PluginDescriptor pluginDescriptor = pluginManager.getPluginDescriptor(entry.getKey());\n                for (Entry<String, IPaaSProviderFactory> providerEntry : entry.getValue().entrySet()) {\n                    PaaSProviderDTO providerDTO = new PaaSProviderDTO();\n                    providerDTO.setPluginId(entry.getKey());\n                    providerDTO.setPluginName(pluginDescriptor.getName());\n                    providerDTO.setVersion(pluginDescriptor.getVersion());\n                    providerDTO.setComponentDescriptor(getDescriptorFor(pluginDescriptor, providerEntry.getKey()));\n                    paasDeployers.add(providerDTO);\n                }\n            }\n        }\n\n        response.setData(paasDeployers);\n\n        return response;\n    }\n\n    private PluginComponentDescriptor getDescriptorFor(PluginDescriptor pluginDescriptor, String beanName) {\n        PluginComponentDescriptor[] componentDescriptors = pluginDescriptor.getComponentDescriptors();\n        if (!ArrayUtils.isEmpty(componentDescriptors)) {\n            for (PluginComponentDescriptor pluginComponentDescriptor : componentDescriptors) {\n                if (pluginComponentDescriptor.getBeanName().equals(beanName)) {\n                    return pluginComponentDescriptor;\n                }\n            }\n        }\n        throw new NotFoundException(\"Component [\" + beanName + \"] cannot be found in plugin [\" + pluginDescriptor.getId() + \"]\");\n    }\n}<｜fim▁end｜>",
    "response": "package alien4cloud.rest.paasprovider;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.mycat.web.task.server;\n\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.hx.rainbow.common.core.SpringApplicationContext; \n<｜fim▁hole｜>import org.mycat.web.service.ShowService;\nimport org.mycat.web.task.common.ITask;\nimport org.mycat.web.task.common.SqliteStore;\nimport org.mycat.web.util.DataSourceUtils;\nimport org.mycat.web.util.DataSourceUtils.MycatPortType;\n\npublic class SyncSysSqlslow implements ITask {\n\n    private static final String NAMESPACE = \"SYSSQLSLOW\";\n\n    private static final String SYSPARAM_NAMESPACE = \"SYSSHOW\";\n\n    @Override\n    public void excute(String dbName, Date nowDate) {  \n\n        ShowService showService = (ShowService)SpringApplicationContext.getBean(\"showService\"); \n        List<Map<String,Object>> list = showService.getDao().query(dbName + MycatPortType.MYCAT_MANGER, SYSPARAM_NAMESPACE, \"sqlslow\"); \n        for(Map<String,Object> entry : list){\n            //entry.put(\"START_TM\", new Date((long) entry.get(\"START_TIME\")));\n            entry.put(\"START_TM\", DateUtil.toDateTimeString(new Date((long) entry.get(\"START_TIME\"))));\n            entry.put(\"DB_NAME\", DataSourceUtils.getInstance().getDbName(dbName));\n            //Map<String,Object> entity = showService.getDao().get(NAMESPACE, \"query\",entry);\n            //if(entity == null){ \n            SqliteStore.getInstance().insert(showService.getDao(), NAMESPACE, \"insert\", entry);\n            //}\n        } \n\n    }\n\n}<｜fim▁end｜>",
    "response": "import org.hx.rainbow.common.util.DateUtil;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.jmb.springfactory.model.factory.group;\n\nimport static com.jmb.springfactory.model.factory.group.GroupSamples.FINISH_HOUR_GROUP_TEST_1;\nimport static com.jmb.springfactory.model.factory.group.GroupSamples.FINISH_HOUR_GROUP_TEST_2;\nimport static com.jmb.springfactory.model.factory.group.GroupSamples.ID_GROUP_TEST_1;\nimport static com.jmb.springfactory.model.factory.group.GroupSamples.ID_GROUP_TEST_2;\nimport static com.jmb.springfactory.model.factory.group.GroupSamples.NAME_GROUP_TEST_1;\nimport static com.jmb.springfactory.model.factory.group.GroupSamples.NAME_GROUP_TEST_2;\nimport static com.jmb.springfactory.model.factory.group.GroupSamples.START_HOUR_GROUP_TEST_1;\nimport static com.jmb.springfactory.model.factory.group.GroupSamples.START_HOUR_GROUP_TEST_2;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n<｜fim▁hole｜>\npublic final class GroupDtoFactory {\n\n  private GroupDtoFactory() {}\n\n  public static WorkGroupDto createGroup(Integer id, String name, String startHour, String finishHour) {\n\n    final WorkGroupDto group = new WorkGroupDto();\n    group.setId(id);\n    group.setName(name);\n    group.setStartHour(startHour);\n    group.setFinishHour(finishHour);\n\n    return group;\n  }\n\n  public static WorkGroupDto createSampleDefaultGroupDto() {\n    return createGroup(ID_GROUP_TEST_1, NAME_GROUP_TEST_1, START_HOUR_GROUP_TEST_1, FINISH_HOUR_GROUP_TEST_1);\n  }\n\n  public static Stream<WorkGroupDto> createStreamSampleDefaultGroup() {\n    return Stream.of(createGroup(ID_GROUP_TEST_1, NAME_GROUP_TEST_1, START_HOUR_GROUP_TEST_1, FINISH_HOUR_GROUP_TEST_1),\n        createGroup(ID_GROUP_TEST_2, NAME_GROUP_TEST_2, START_HOUR_GROUP_TEST_2, FINISH_HOUR_GROUP_TEST_2),\n        createGroup(ID_GROUP_TEST_2, NAME_GROUP_TEST_2, START_HOUR_GROUP_TEST_2, FINISH_HOUR_GROUP_TEST_2));\n  }\n\n  public static List<WorkGroupDto> createListSampleDefaultGroup() {\n    return createStreamSampleDefaultGroup().collect(Collectors.toList());\n  }\n}<｜fim▁end｜>",
    "response": "import com.jmb.springfactory.model.dto.WorkGroupDto;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package lambdacalc;\n\nimport lambdacalc.Expr.Visitor;\n\npublic abstract class ExprPredicate implements Visitor<Boolean> {\n\n        public static class True extends ExprPredicate {\n            @Override public Boolean abstraction(Symbol sym, Expr arg) { return true; }\n            @Override public Boolean application(Expr fun, Expr arg) { return true; }\n<｜fim▁hole｜>            @Override public Boolean abstraction(Symbol sym, Expr arg) { return false; }\n            @Override public Boolean application(Expr fun, Expr arg) { return false; }\n            @Override public Boolean variable(Symbol s) { return false; }\n        }\n\n        public static final ExprPredicate IsAbstraction = new False() {\n            @Override\n            public final Boolean abstraction(final Symbol sym, final Expr arg) {\n                return true;\n            }\n        };\n\n        public static final ExprPredicate IsApplication = new False() {\n            @Override\n            public final Boolean application(final Expr fun, final Expr arg) {\n                return true;\n            }\n        };\n\n        public static final ExprPredicate IsVariable = new False() {\n            @Override\n            public final Boolean variable(final Symbol s) {\n                return true;\n            }\n        };\n    }<｜fim▁end｜>",
    "response": "            @Override public Boolean variable(Symbol s) { return true; }\n        }\n\n        public static class False extends ExprPredicate {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.cmwp.dramad.connection;\n<｜fim▁hole｜>import akka.actor.Props;\nimport akka.actor.ActorSystem;\nimport akka.actor.ActorRef;\nimport akka.actor.ActorRefFactory;\nimport akka.io.Tcp; \nimport akka.io.TcpMessage; \nimport akka.io.Inet;\n\npublic class ConnectionWorker extends OurActor {\n\n    @Override\n    protected boolean dispatchByType( Object msg ) {\n        // TODO: replace with Typed Actors or other akka feature if possible\n        // if not, move to OurActor and use introspection/annotations\n        if( msg instanceof Tcp.Received )               onTcpReceived( (Tcp.Received) msg );\n        else return false;\n        return true;\n    }\n\n    protected void onTcpReceived( Tcp.Received msg ) {\n        System.out.println( \"We are receiving now\");\n    }\n}<｜fim▁end｜>",
    "response": "\nimport com.cmwp.dramad.framework.OurActor;\n\nimport java.util.*;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package proguard.classfile.constant.visitor;\n\nimport proguard.classfile.Clazz;\nimport proguard.classfile.constant.*;\nimport proguard.classfile.util.SimplifiedVisitor;\n\npublic class ConstantTagFilter\nextends      SimplifiedVisitor\nimplements   ConstantVisitor\n{\n    private final int             constantTagMask;\n    private final ConstantVisitor constantVisitor;\n\n    /**\n     * Creates a new ConstantTagFilter.\n     * @param constantTag     the type of constants for which visits will be\n     *                        delegated.\n     * @param constantVisitor the <code>ConstantVisitor</code> to which visits\n     *                        will be delegated.\n     */\n    public ConstantTagFilter(int             constantTag,\n                             ConstantVisitor constantVisitor)\n    {\n        this.constantTagMask = 1 << constantTag;\n        this.constantVisitor = constantVisitor;\n    }\n\n    /**\n     * Creates a new ConstantTagFilter.\n     * @param constantTags    the types of constants for which visits will be\n     *                        delegated.\n     * @param constantVisitor the <code>ConstantVisitor</code> to which visits\n     *                        will be delegated.\n     */\n    public ConstantTagFilter(int[]           constantTags,\n                             ConstantVisitor constantVisitor)\n    {\n        int constantTagMask = 0;\n        for (int index = 0; index < constantTags.length; index++)\n<｜fim▁hole｜>        }\n\n        this.constantTagMask = constantTagMask;\n        this.constantVisitor = constantVisitor;\n    }\n\n    // Implementations for ConstantVisitor.\n\n    public void visitAnyConstant(Clazz clazz, Constant constant)\n    {\n        if (((1 << constant.getTag()) & constantTagMask) != 0)\n        {\n            constant.accept(clazz, constantVisitor);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        {\n            constantTagMask |= 1 << constantTags[index];\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.webfirmframework.wffweb.tag.html.tables;\n\nimport java.io.Serial;\nimport java.util.logging.Logger;\n\nimport com.webfirmframework.wffweb.settings.WffConfiguration;\nimport com.webfirmframework.wffweb.tag.html.AbstractHtml;\nimport com.webfirmframework.wffweb.tag.html.attribute.core.AbstractAttribute;\nimport com.webfirmframework.wffweb.tag.html.core.PreIndexedTagName;\nimport com.webfirmframework.wffweb.tag.html.identifier.ColGroupAttributable;\nimport com.webfirmframework.wffweb.tag.html.identifier.GlobalAttributable;\n\npublic class ColGroup extends AbstractHtml {\n\n    @Serial\n    private static final long serialVersionUID = 1_0_0L;\n\n    private static final Logger LOGGER = Logger.getLogger(ColGroup.class.getName());\n\n    private static final PreIndexedTagName PRE_INDEXED_TAG_NAME;\n\n    static {\n\n        PRE_INDEXED_TAG_NAME = (PreIndexedTagName.COLGROUP);\n\n    }\n<｜fim▁hole｜>\n    /**\n     *\n     * @param base       i.e. parent tag of this tag\n     * @param attributes An array of {@code AbstractAttribute}\n     *\n     * @since 1.0.0\n     */\n    public ColGroup(final AbstractHtml base, final AbstractAttribute... attributes) {\n        super(PRE_INDEXED_TAG_NAME, base, attributes);\n        if (WffConfiguration.isDirectionWarningOn()) {\n            warnForUnsupportedAttributes(attributes);\n        }\n    }\n\n    private static void warnForUnsupportedAttributes(final AbstractAttribute... attributes) {\n        for (final AbstractAttribute abstractAttribute : attributes) {\n            if (!(abstractAttribute != null && (abstractAttribute instanceof ColGroupAttributable\n                    || abstractAttribute instanceof GlobalAttributable))) {\n                LOGGER.warning(abstractAttribute + \" is not an instance of ColGroupAttribute\");\n            }\n        }\n    }\n\n    /**\n     * invokes only once per object\n     *\n     * @author WFF\n     * @since 1.0.0\n     */\n    protected void init() {\n        // to override and use this method\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    {\n\n        init();\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amazonaws.services.eventbridge.model.transform;\n\nimport java.math.*;\n\nimport javax.annotation.Generated;\n\nimport com.amazonaws.services.eventbridge.model.*;\nimport com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;\nimport com.amazonaws.transform.*;\n\nimport com.fasterxml.jackson.core.JsonToken;\nimport static com.fasterxml.jackson.core.JsonToken.*;\n\n@Generated(\"com.amazonaws:aws-java-sdk-code-generator\")\npublic class DeleteConnectionResultJsonUnmarshaller implements Unmarshaller<DeleteConnectionResult, JsonUnmarshallerContext> {\n\n    public DeleteConnectionResult unmarshall(JsonUnmarshallerContext context) throws Exception {\n        DeleteConnectionResult deleteConnectionResult = new DeleteConnectionResult();\n\n        int originalDepth = context.getCurrentDepth();\n<｜fim▁hole｜>        JsonToken token = context.getCurrentToken();\n        if (token == null)\n            token = context.nextToken();\n        if (token == VALUE_NULL) {\n            return deleteConnectionResult;\n        }\n\n        while (true) {\n            if (token == null)\n                break;\n\n            if (token == FIELD_NAME || token == START_OBJECT) {\n                if (context.testExpression(\"ConnectionArn\", targetDepth)) {\n                    context.nextToken();\n                    deleteConnectionResult.setConnectionArn(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n                if (context.testExpression(\"ConnectionState\", targetDepth)) {\n                    context.nextToken();\n                    deleteConnectionResult.setConnectionState(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n                if (context.testExpression(\"CreationTime\", targetDepth)) {\n                    context.nextToken();\n                    deleteConnectionResult.setCreationTime(DateJsonUnmarshallerFactory.getInstance(\"unixTimestamp\").unmarshall(context));\n                }\n                if (context.testExpression(\"LastModifiedTime\", targetDepth)) {\n                    context.nextToken();\n                    deleteConnectionResult.setLastModifiedTime(DateJsonUnmarshallerFactory.getInstance(\"unixTimestamp\").unmarshall(context));\n                }\n                if (context.testExpression(\"LastAuthorizedTime\", targetDepth)) {\n                    context.nextToken();\n                    deleteConnectionResult.setLastAuthorizedTime(DateJsonUnmarshallerFactory.getInstance(\"unixTimestamp\").unmarshall(context));\n                }\n            } else if (token == END_ARRAY || token == END_OBJECT) {\n                if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {\n                    if (context.getCurrentDepth() <= originalDepth)\n                        break;\n                }\n            }\n            token = context.nextToken();\n        }\n\n        return deleteConnectionResult;\n    }\n\n    private static DeleteConnectionResultJsonUnmarshaller instance;\n\n    public static DeleteConnectionResultJsonUnmarshaller getInstance() {\n        if (instance == null)\n            instance = new DeleteConnectionResultJsonUnmarshaller();\n        return instance;\n    }\n}<｜fim▁end｜>",
    "response": "        String currentParentElement = context.getCurrentParentElement();\n        int targetDepth = originalDepth + 1;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.bcel.generic;\n\nimport org.apache.bcel.Const;\n\npublic class ReturnaddressType extends Type {\n\n    public static final ReturnaddressType NO_TARGET = new ReturnaddressType();\n    private InstructionHandle returnTarget;\n\n    /**\n     * A Returnaddress [that doesn't know where to return to].\n     */\n    private ReturnaddressType() {\n        super(Const.T_ADDRESS, \"<return address>\");\n    }\n\n    /**\n     * Creates a ReturnaddressType object with a target.\n     */\n    public ReturnaddressType(final InstructionHandle returnTarget) {\n        super(Const.T_ADDRESS, \"<return address targeting \" + returnTarget + \">\");\n        this.returnTarget = returnTarget;\n    }\n\n    /** @return a hash code value for the object.\n     */\n    @Override\n    public int hashCode() {\n        if (returnTarget == null) {\n            return 0;\n        }\n        return returnTarget.hashCode();\n    }\n\n    /**\n     * Returns if the two Returnaddresses refer to the same target.\n     */\n    @Override\n    public boolean equals( final Object rat ) {\n        if (!(rat instanceof ReturnaddressType)) {\n            return false;\n        }\n        final ReturnaddressType that = (ReturnaddressType) rat;\n        if (this.returnTarget == null || that.returnTarget == null) {\n<｜fim▁hole｜>        }\n        return that.returnTarget.equals(this.returnTarget);\n    }\n\n    /**\n     * @return the target of this ReturnaddressType\n     */\n    public InstructionHandle getTarget() {\n        return returnTarget;\n    }\n}<｜fim▁end｜>",
    "response": "            return that.returnTarget == this.returnTarget;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package no.nordicsemi.android.dfu.internal.exception;\n\npublic class UnknownResponseException extends Exception {\n    private static final long serialVersionUID = -8716125467309979289L;\n    private static final char[] HEX_ARRAY = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n\n    private final byte[] mResponse;\n    private final int mExpectedOpCode;\n\n    public UnknownResponseException(final String message, final byte[] response, final int expectedOpCode) {\n        super(message);\n\n        mResponse = response != null ? response : new byte[0];\n        mExpectedOpCode = expectedOpCode;\n    }\n\n    @Override\n    public String getMessage() {\n        return String.format(\"%s (response: %s, expected: 0x10%02X..)\", super.getMessage(), bytesToHex(mResponse, 0, mResponse.length), mExpectedOpCode);\n    }\n\n    public static String bytesToHex(final byte[] bytes, final int start, final int length) {\n        if (bytes == null || bytes.length <= start || length <= 0)\n<｜fim▁hole｜>        final char[] hexChars = new char[maxLength * 2];\n        for (int j = 0; j < maxLength; j++) {\n            final int v = bytes[start + j] & 0xFF;\n            hexChars[j * 2] = HEX_ARRAY[v >>> 4];\n            hexChars[j * 2 + 1] = HEX_ARRAY[v & 0x0F];\n        }\n        return \"0x\" + new String(hexChars);\n    }\n}<｜fim▁end｜>",
    "response": "            return \"\";\n\n        final int maxLength = Math.min(length, bytes.length - start);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.esa.nest.gpf;\n<｜fim▁hole｜>\nimport javax.swing.*;\nimport java.util.Map;\n\npublic class EllipsoidCorrectionRDOpUI extends RangeDopplerGeocodingOpUI {\n\n    public EllipsoidCorrectionRDOpUI() {\n        useAvgSceneHeight = true;\n    }\n\n    @Override\n    public JComponent CreateOpTab(String operatorName, Map<String, Object> parameterMap, AppContext appContext) {\n\n        final JComponent pane = super.CreateOpTab(operatorName, parameterMap, appContext);\n\n        return pane;\n    }\n\n    @Override\n    public void initParameters() {\n        super.initParameters();\n    }\n\n    @Override\n    public void updateParameters() {\n\n        super.updateParameters();\n    }\n\n}<｜fim▁end｜>",
    "response": "\nimport org.esa.beam.framework.ui.AppContext;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.intellij.openapi.vcs.changes.committed;\n\nimport com.intellij.openapi.options.ConfigurationException;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.ui.DialogWrapper;\nimport com.intellij.openapi.vcs.VcsBundle;\nimport com.intellij.openapi.vcs.VcsConfiguration;\n\nimport javax.swing.*;\n\npublic class CacheSettingsDialog extends DialogWrapper {\n  private final CacheSettingsPanel myPanel;\n  private final Project myProject;\n\n  public CacheSettingsDialog(Project project) {\n    super(project, false);\n    myProject = project;\n<｜fim▁hole｜>    myPanel.initPanel(project);\n    myPanel.reset();\n    init();\n  }\n  protected JComponent createCenterPanel() {\n    return myPanel.getPanel();\n  }\n\n  protected void doOKAction() {\n    try {\n      if (myPanel.isCachingEnabled()) {\n        VcsConfiguration.getInstance(myProject).ENABLE_BACKGROUND_PROCESSES = true;\n      }\n      myPanel.apply();\n    }\n    catch (ConfigurationException e) {\n      //ignore\n    }\n    super.doOKAction();\n  }\n\n  public static boolean showSettingsDialog(final Project project) {\n    CacheSettingsDialog dialog = new CacheSettingsDialog(project);\n    dialog.show();\n    if (!dialog.isOK()) {\n      return false;\n    }\n    return true;\n  }\n}<｜fim▁end｜>",
    "response": "    setTitle(VcsBundle.message(\"cache.settings.dialog.title\"));\n    myPanel = new CacheSettingsPanel();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>\nimport java.util.function.Function;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static java.util.regex.Pattern.quote;\n\npublic class PatternCollection {\n    public static final Pattern\n        HTML_TO_PLAIN = Pattern.compile(\"(?s)<[^>]*>(\\\\s*<[^>]*>)*\"),\n        MULTIPLE_LINES = Pattern.compile(\"\\\"(?m)^[ \\\\t]*\\\\r?\\\\n\\\"\"),\n        UNNECESSARY_NEWLINE_END = Pattern.compile(\"(\\\\r?\\\\n)+$\"),\n        UNNECESSARY_NEWLINE_START = Pattern.compile(\"^(\\\\r?\\\\n)+\");\n\n    public static Pattern compileForHTMLTag(String tag) {\n        tag = quote(tag);\n        return Pattern.compile(\"<\\\\/?\" + tag + \"[^>]*>\");\n    }\n\n    public static Pattern compileForHTMLContents(String tag) {\n        tag = quote(tag);\n        return Pattern.compile(\"<\" + tag + \"[^>]*>[\\\\S\\\\s]+?<\\\\/\" + tag + \">\");\n    }\n\n    public static Function<String, String> compileReplace(Pattern pattern, String replace) {\n        return s -> pattern.matcher(s).replaceAll(replace);\n    }\n\n    public static Function<String, String> compileReplace(Pattern pattern, Function<Matcher, String> replace) {\n        return s -> replace.apply(pattern.matcher(s));\n    }\n}<｜fim▁end｜>",
    "response": "package br.com.brjdevs.miyuki.lib;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package feihua.generator.enums;\n\npublic enum PathPre{\n    FILE(\"file:\"),\n    CLASSPATH(\"classpath:\"),\n    PROJECT(\"project:\");\n    private String value;\n\n<｜fim▁hole｜>\n    public String getValue() {\n        return value;\n    }\n}<｜fim▁end｜>",
    "response": "    PathPre(String value) {\n        this.value = value;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jdmp.core.script.jdmp.node;\n\nimport org.jdmp.core.script.jdmp.analysis.Analysis;\n\n@SuppressWarnings(\"nls\")\npublic final class ALevel0Level1 extends PLevel1 {\n    private PLevel0 _level0_;\n\n    public ALevel0Level1() {\n        // Constructor\n    }\n\n    public ALevel0Level1(@SuppressWarnings(\"hiding\") PLevel0 _level0_) {\n        // Constructor\n        setLevel0(_level0_);\n\n    }\n\n    public Object clone() {\n        return new ALevel0Level1(cloneNode(this._level0_));\n    }\n\n    public void apply(Switch sw) {\n        ((Analysis) sw).caseALevel0Level1(this);\n    }\n\n    public PLevel0 getLevel0() {\n        return this._level0_;\n    }\n\n    public void setLevel0(PLevel0 node) {\n        if (this._level0_ != null) {\n            this._level0_.parent(null);\n        }\n\n        if (node != null) {\n            if (node.parent() != null) {\n                node.parent().removeChild(node);\n            }\n\n            node.parent(this);\n        }\n\n        this._level0_ = node;\n    }\n\n    public String toString() {\n        return \"\" + toString(this._level0_);\n    }\n\n    void removeChild(@SuppressWarnings(\"unused\") Node child) {\n<｜fim▁hole｜>\n        throw new RuntimeException(\"Not a child.\");\n    }\n\n    void replaceChild(@SuppressWarnings(\"unused\") Node oldChild,\n            @SuppressWarnings(\"unused\") Node newChild) {\n        // Replace child\n        if (this._level0_ == oldChild) {\n            setLevel0((PLevel0) newChild);\n            return;\n        }\n\n        throw new RuntimeException(\"Not a child.\");\n    }\n}<｜fim▁end｜>",
    "response": "        // Remove child\n        if (this._level0_ == child) {\n            this._level0_ = null;\n            return;\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.deeplearning4j.examples.dataexamples;\n\nimport javafx.application.Application;\nimport javafx.application.Platform;\nimport javafx.scene.Scene;\nimport javafx.scene.image.*;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.paint.Color;\nimport javafx.stage.Stage;\nimport org.deeplearning4j.api.storage.StatsStorage;\nimport org.deeplearning4j.nn.api.OptimizationAlgorithm;\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration;\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration;\nimport org.deeplearning4j.nn.conf.Updater;\nimport org.deeplearning4j.nn.conf.layers.DenseLayer;\nimport org.deeplearning4j.nn.conf.layers.OutputLayer;\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork;\nimport org.deeplearning4j.nn.weights.WeightInit;\nimport org.deeplearning4j.ui.api.UIServer;\nimport org.deeplearning4j.ui.stats.StatsListener;\nimport org.deeplearning4j.ui.storage.InMemoryStatsStorage;\nimport org.nd4j.linalg.activations.Activation;\nimport org.nd4j.linalg.api.ndarray.INDArray;\nimport org.nd4j.linalg.dataset.DataSet;\nimport org.nd4j.linalg.factory.Nd4j;\nimport org.nd4j.linalg.lossfunctions.LossFunctions;\n\npublic class ImageDrawer extends Application {\n\n    private Image originalImage; //The source image displayed on the left.\n    private WritableImage composition; // Destination image generated by the NN.\n    private MultiLayerNetwork nn; // THE nn.\n    private DataSet ds; //Training data generated (only once) from the Original, used to train.\n    private INDArray xyOut; //x,y grid to calculate the output image. Needs to be calculated once, then re-used.\n\n    /**\n     * Training the NN and updating the current graphical output.\n     */\n    private void onCalc(){\n        nn.fit(ds);\n        drawImage();\n        Platform.runLater(this::onCalc);\n    }\n\n    @Override\n    public void init(){\n        originalImage = new Image(\"/DataExamples/Mona_Lisa.png\");\n\n        final int w = (int) originalImage.getWidth();\n<｜fim▁hole｜>        boolean fUseUI = false; // set to false if you do not want the web ui to track learning progress.\n        if(fUseUI) {\n            UIServer uiServer = UIServer.getInstance();\n            StatsStorage statsStorage = new InMemoryStatsStorage();\n            uiServer.attach(statsStorage);\n            nn.setListeners(new StatsListener(statsStorage));\n        }\n\n        // The x,y grid to calculate the NN output only needs to be calculated once.\n        int numPoints = h * w;\n        xyOut = Nd4j.zeros(numPoints, 2);\n        for (int i = 0; i < w; i++) {\n            double xp = scaleXY(i,w);\n            for (int j = 0; j < h; j++) {\n                int index = i + w * j;\n                double yp = scaleXY(j,h);\n\n                xyOut.put(index, 0, xp); //2 inputs. x and y.\n                xyOut.put(index, 1, yp);\n            }\n        }\n        drawImage();\n    }\n    /**\n     * Standard JavaFX start: Build the UI, display\n     */\n    @Override\n    public void start(Stage primaryStage) {\n\n        final int w = (int) originalImage.getWidth();\n        final int h = (int) originalImage.getHeight();\n        final int zoom = 5; // Our images are a tad small, display them enlarged to have something to look at.\n\n        ImageView iv1 = new ImageView(); //Left image\n        iv1.setImage(originalImage);\n        iv1.setFitHeight( zoom* h);\n        iv1.setFitWidth(zoom*w);\n\n        ImageView iv2 = new ImageView();\n        iv2.setImage(composition);\n        iv2.setFitHeight( zoom* h);\n        iv2.setFitWidth(zoom*w);\n\n        HBox root = new HBox(); //build the scene.\n        Scene scene = new Scene(root);\n        root.getChildren().addAll(iv1, iv2);\n\n        primaryStage.setTitle(\"Neural Network Drawing Demo.\");\n        primaryStage.setScene(scene);\n        primaryStage.show();\n\n        Platform.setImplicitExit(true);\n\n        //Allow JavaFX do to it's thing, Initialize the Neural network when it feels like it.\n        Platform.runLater(this::onCalc);\n    }\n\n    public static void main( String[] args )\n    {\n        launch(args);\n    }\n\n    /**\n     * Build the Neural network.\n     */\n    private static MultiLayerNetwork createNN() {\n        int seed = 2345;\n        int iterations = 25; //<-- Just the one iteration per call to fit.\n        double learningRate = 0.1;\n        int numInputs = 2;   // x and y.\n        int numHiddenNodes = 25;\n        int numOutputs = 3 ; //R, G and B value.\n\n        MultiLayerConfiguration conf = new NeuralNetConfiguration.Builder()\n            .seed(seed)\n            .iterations(iterations)\n            .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)\n            .learningRate(learningRate)\n            .weightInit(WeightInit.RELU)\n            .updater(Updater.NESTEROVS).momentum(0.9)\n            .list()\n            .layer(0, new DenseLayer.Builder().nIn(numInputs).nOut(numHiddenNodes)\n                .activation(Activation.LEAKYRELU)\n                .build())\n            .layer(1, new DenseLayer.Builder().nIn(numHiddenNodes).nOut(numHiddenNodes)\n                .activation(Activation.LEAKYRELU)\n                .build())\n            .layer(2, new DenseLayer.Builder().nIn(numHiddenNodes).nOut(numHiddenNodes)\n                .activation(Activation.LEAKYRELU)\n                .build())\n            .layer(3, new DenseLayer.Builder().nIn(numHiddenNodes).nOut(numHiddenNodes)\n                .activation(Activation.LEAKYRELU)\n                .build())\n            .layer(4, new OutputLayer.Builder(LossFunctions.LossFunction.L2)\n                .activation(Activation.IDENTITY)\n                .nIn(numHiddenNodes).nOut(numOutputs).build())\n            .pretrain(false).backprop(true).build();\n\n        MultiLayerNetwork net = new MultiLayerNetwork(conf);\n        net.init();\n\n        return net;\n    }\n\n    /**\n     * Process a javafx Image to be consumed by DeepLearning4J\n     *\n     * @param img Javafx image to process\n     * @return DeepLearning4J DataSet.\n     */\n    private static DataSet generateDataSet(Image img) {\n        int w = (int) img.getWidth();\n        int h = (int) img.getHeight();\n        int numPoints = h * w;\n\n        PixelReader reader = img.getPixelReader();\n\n        INDArray xy = Nd4j.zeros(numPoints, 2);\n        INDArray out = Nd4j.zeros(numPoints, 3);\n\n        //Simplest implementation first.\n        for (int i = 0; i < w; i++) {\n            double xp = scaleXY(i,w);\n            for (int j = 0; j < h; j++) {\n                Color c = reader.getColor(i, j);\n                int index = i + w * j;\n                double yp = scaleXY(j,h);\n\n                xy.put(index, 0, xp); //2 inputs. x and y.\n                xy.put(index, 1, yp);\n\n                out.put(index, 0, c.getRed());  //3 outputs. the RGB values.\n                out.put(index, 1, c.getGreen());\n                out.put(index, 2, c.getBlue());\n            }\n        }\n        return new DataSet(xy, out);\n    }\n\n    /**\n     * Make the Neural network draw the image.\n     */\n    private void drawImage() {\n        int w = (int) composition.getWidth();\n        int h = (int) composition.getHeight();\n\n        INDArray out = nn.output(xyOut);\n        PixelWriter writer = composition.getPixelWriter();\n\n        for (int i = 0; i < w; i++) {\n            for (int j = 0; j < h; j++) {\n                int index = i + w * j;\n                double red = capNNOutput(out.getDouble(index, 0));\n                double green = capNNOutput(out.getDouble(index, 1));\n                double blue = capNNOutput(out.getDouble(index, 2));\n\n                Color c = new Color(red, green, blue, 1.0);\n                writer.setColor(i, j, c);\n            }\n        }\n    }\n\n    /**\n     * Make sure the color values are >=0 and <=1\n     */\n    private static double capNNOutput(double x) {\n        double tmp = (x<0.0) ? 0.0 : x;\n        return (tmp > 1.0) ? 1.0 : tmp;\n    }\n\n    /**\n     * scale x,y points\n     */\n    private static double scaleXY(int i, int maxI){\n        return (double) i / (double) (maxI - 1) -0.5;\n    }\n}<｜fim▁end｜>",
    "response": "        final int h = (int) originalImage.getHeight();\n        composition = new WritableImage(w, h); //Right image.\n\n        ds = generateDataSet(originalImage);\n        nn = createNN();\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.dreamfinity.party.network.packets.manage;\n\nimport org.dreamfinity.party.Core;\nimport org.dreamfinity.party.utils.Localization;\nimport io.netty.buffer.ByteBuf;\nimport io.netty.channel.ChannelHandlerContext;\nimport net.minecraft.entity.player.EntityPlayer;\nimport net.minecraft.util.ChatComponentText;\nimport org.dreamfinity.party.elements.Party;\nimport org.dreamfinity.party.network.packets.AbstractPacket;\n\npublic class KickPlayerFromPartyPacket extends AbstractPacket {\n\n    private String playerNameToKick;\n    public KickPlayerFromPartyPacket(){}\n\n    public KickPlayerFromPartyPacket(String playerToKick){\n        this.playerNameToKick = playerToKick;\n    }\n    @Override\n    public void encodeInto(ChannelHandlerContext var1, ByteBuf var2) {\n        var2.writeBytes(playerNameToKick.getBytes());\n    }\n\n    @Override\n    public void decodeInto(ChannelHandlerContext var1, ByteBuf var2) {\n        this.playerNameToKick = new String(var2.array()).substring(1);\n    }\n\n    @Override\n<｜fim▁hole｜>\n    @Override\n    public void handleServerSide(EntityPlayer player) {\n        Party party = Core.getPartyManager().getPartyWithLeader(player);\n        if(party == null){\n            player.addChatComponentMessage(new ChatComponentText(Localization.NOT_A_PARTY_LEADER));\n            return;\n        }\n        EntityPlayer playerToKick = party.getPlayerWithNickname(playerNameToKick);\n        if(playerToKick == null){\n            player.addChatComponentMessage(new ChatComponentText(String.format(Localization.PLAYER_NOT_IN_YOUR_PARTY, playerNameToKick)));\n            return;\n        }\n        party.removePlayer(playerToKick);\n        party.sendMessageToMembers(new ChatComponentText(String.format(Localization.PLAYER_KICKED_BY_LEADER, playerToKick.getDisplayName())));\n        Core.getPartyManager().cleanPlayerClientParty(playerToKick); //This will destroy party inside player's client \n        Core.getPartyManager().sendSyncPartyPackets(party);\n\n    }\n\n}<｜fim▁end｜>",
    "response": "    public void handleClientSide(EntityPlayer var1) {}\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.romainpiel.lib.utils;\n\nimport android.content.Context;\n\nimport java.util.Date;\n\npublic class DateUtils extends android.text.format.DateUtils {\n\n    public static String formatTime(Context context, Date date) {\n        return android.text.format.DateUtils.formatDateTime(context, date.getTime(),\n                android.text.format.DateUtils.FORMAT_SHOW_TIME\n<｜fim▁hole｜>        );\n    }\n}<｜fim▁end｜>",
    "response": "                        | android.text.format.DateUtils.FORMAT_NO_NOON\n                        | android.text.format.DateUtils.FORMAT_NO_MIDNIGHT\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>\n@GraphQLObject(\"Root\")\npublic class RootObjectType {\n\n    @GraphQLField\n    public Viewer viewer(@GraphQLIn(\"token\") final String token) {\n        return new Viewer(token);\n    }\n\n    @GraphQLField\n    public Talk talk(@GraphQLIn(\"title\") final String title) {\n        for (Talk talk : StaticData.talks) {\n            if (talk.getTitle().equals(title)) {\n                return talk;\n            }\n        }\n        return null;\n    }\n}<｜fim▁end｜>",
    "response": "package jfall.graphql.demo.schema.objecttype;\n\nimport com.oembedler.moon.graphql.engine.stereotype.*;\nimport jfall.graphql.demo.schema.StaticData;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.microsoft.azure.management.appservice.v2019_08_01;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\npublic class ArmIdWrapper {\n    /**\n     * The id property.\n     */\n    @JsonProperty(value = \"id\", access = JsonProperty.Access.WRITE_ONLY)\n    private String id;\n\n    /**\n     * Get the id value.\n     *\n<｜fim▁hole｜>        return this.id;\n    }\n\n}<｜fim▁end｜>",
    "response": "     * @return the id value\n     */\n    public String id() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package hex.genmodel;\n\nimport java.io.File;\nimport java.io.IOException;\n\npublic class TmpMojoReaderBackend extends ZipfileMojoReaderBackend {\n<｜fim▁hole｜>  public TmpMojoReaderBackend(File tempZipFile) throws IOException {\n    super(tempZipFile.getPath());\n    _tempZipFile = tempZipFile;\n  }\n\n  @Override\n  public void close() throws IOException {\n    super.close();\n    if (_tempZipFile != null) {\n      File f = _tempZipFile;\n      _tempZipFile = null; // we don't want to attempt to delete the file twice (even if the first attempt fails)\n      if (! f.delete())\n        throw new IOException(\"Failed to delete temporary file \" + f);\n    }\n  }\n\n}<｜fim▁end｜>",
    "response": "\n  File _tempZipFile;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.traccar.protocol;\n\nimport org.traccar.StringProtocolEncoder;\nimport org.traccar.model.Command;\nimport org.traccar.Protocol;\n\npublic class WondexProtocolEncoder extends StringProtocolEncoder {\n\n    public WondexProtocolEncoder(Protocol protocol) {\n        super(protocol);\n    }\n\n    @Override\n<｜fim▁hole｜>            case Command.TYPE_REBOOT_DEVICE:\n                return formatCommand(command, \"$WP+REBOOT=%s\", Command.KEY_DEVICE_PASSWORD);\n            case Command.TYPE_GET_DEVICE_STATUS:\n                return formatCommand(command, \"$WP+TEST=%s\", Command.KEY_DEVICE_PASSWORD);\n            case Command.TYPE_GET_MODEM_STATUS:\n                return formatCommand(command, \"$WP+GSMINFO=%s\", Command.KEY_DEVICE_PASSWORD);\n            case Command.TYPE_IDENTIFICATION:\n                return formatCommand(command, \"$WP+IMEI=%s\", Command.KEY_DEVICE_PASSWORD);\n            case Command.TYPE_POSITION_SINGLE:\n                return formatCommand(command, \"$WP+GETLOCATION=%s\", Command.KEY_DEVICE_PASSWORD);\n            case Command.TYPE_GET_VERSION:\n                return formatCommand(command, \"$WP+VER=%s\", Command.KEY_DEVICE_PASSWORD);\n            default:\n                return null;\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "    protected Object encodeCommand(Command command) {\n\n        initDevicePassword(command, \"0000\");\n\n        switch (command.getType()) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.oracle.graal.hotspot.amd64;\n\nimport static com.oracle.graal.amd64.AMD64.*;\nimport static com.oracle.graal.asm.NumUtil.*;\nimport static com.oracle.graal.compiler.common.GraalOptions.*;\n\nimport com.oracle.graal.api.code.*;\nimport com.oracle.graal.api.meta.*;\nimport com.oracle.graal.asm.amd64.*;\nimport com.oracle.graal.hotspot.*;\nimport com.oracle.graal.hotspot.meta.HotSpotCodeCacheProvider.MarkId;\nimport com.oracle.graal.lir.*;\nimport com.oracle.graal.lir.amd64.*;\nimport com.oracle.graal.lir.asm.*;\nimport com.oracle.graal.nodes.spi.*;\n\n@Opcode(\"SAFEPOINT\")\npublic class AMD64HotSpotSafepointOp extends AMD64LIRInstruction {\n\n    @State protected LIRFrameState state;\n    @Temp({OperandFlag.REG, OperandFlag.ILLEGAL}) private AllocatableValue temp;\n\n    private final HotSpotVMConfig config;\n\n    public AMD64HotSpotSafepointOp(LIRFrameState state, HotSpotVMConfig config, NodeLIRBuilderTool tool) {\n        this.state = state;\n        this.config = config;\n        if (isPollingPageFar(config) || ImmutableCode.getValue()) {\n            temp = tool.getLIRGeneratorTool().newVariable(LIRKind.value(tool.getLIRGeneratorTool().target().wordKind));\n        } else {\n            // Don't waste a register if it's unneeded\n            temp = Value.ILLEGAL;\n        }\n    }\n\n    @Override\n    public void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler asm) {\n        emitCode(crb, asm, config, false, state, temp instanceof RegisterValue ? ((RegisterValue) temp).getRegister() : null);\n    }\n\n    /**\n     * Tests if the polling page address can be reached from the code cache with 32-bit\n     * displacements.\n     */\n<｜fim▁hole｜>        final long pollingPageAddress = config.safepointPollingAddress;\n        return config.forceUnreachable || !isInt(pollingPageAddress - config.codeCacheLowBoundary()) || !isInt(pollingPageAddress - config.codeCacheHighBoundary());\n    }\n\n    public static void emitCode(CompilationResultBuilder crb, AMD64MacroAssembler asm, HotSpotVMConfig config, boolean atReturn, LIRFrameState state, Register scratch) {\n        assert !atReturn || state == null : \"state is unneeded at return\";\n        if (ImmutableCode.getValue()) {\n            Kind hostWordKind = HotSpotGraalRuntime.getHostWordKind();\n            int alignment = hostWordKind.getBitCount() / Byte.SIZE;\n            JavaConstant pollingPageAddress = JavaConstant.forIntegerKind(hostWordKind, config.safepointPollingAddress);\n            // This move will be patched to load the safepoint page from a data segment\n            // co-located with the immutable code.\n            asm.movq(scratch, (AMD64Address) crb.recordDataReferenceInCode(pollingPageAddress, alignment));\n            final int pos = asm.position();\n            MarkId.recordMark(crb, atReturn ? MarkId.POLL_RETURN_FAR : MarkId.POLL_FAR);\n            if (state != null) {\n                crb.recordInfopoint(pos, state, InfopointReason.SAFEPOINT);\n            }\n            asm.testl(rax, new AMD64Address(scratch));\n        } else if (isPollingPageFar(config)) {\n            asm.movq(scratch, config.safepointPollingAddress);\n            MarkId.recordMark(crb, atReturn ? MarkId.POLL_RETURN_FAR : MarkId.POLL_FAR);\n            final int pos = asm.position();\n            if (state != null) {\n                crb.recordInfopoint(pos, state, InfopointReason.SAFEPOINT);\n            }\n            asm.testl(rax, new AMD64Address(scratch));\n        } else {\n            MarkId.recordMark(crb, atReturn ? MarkId.POLL_RETURN_NEAR : MarkId.POLL_NEAR);\n            final int pos = asm.position();\n            if (state != null) {\n                crb.recordInfopoint(pos, state, InfopointReason.SAFEPOINT);\n            }\n            // The C++ code transforms the polling page offset into an RIP displacement\n            // to the real address at that offset in the polling page.\n            asm.testl(rax, new AMD64Address(rip, 0));\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    private static boolean isPollingPageFar(HotSpotVMConfig config) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.herac.tuxguitar.gui.actions.system;\n\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.events.ShellEvent;\nimport org.eclipse.swt.events.TypedEvent;\nimport org.herac.tuxguitar.gui.TuxGuitar;\nimport org.herac.tuxguitar.gui.actions.Action;\nimport org.herac.tuxguitar.gui.actions.file.FileActionUtils;\nimport org.herac.tuxguitar.gui.marker.MarkerList;\nimport org.herac.tuxguitar.gui.system.config.TGConfigKeys;\nimport org.herac.tuxguitar.gui.system.config.TGConfigManager;\nimport org.herac.tuxguitar.gui.table.TGTableViewer;\nimport org.herac.tuxguitar.gui.util.ConfirmDialog;\nimport org.herac.tuxguitar.util.TGSynchronizer;\n<｜fim▁hole｜>    public DisposeAction() {\n        super(NAME, AUTO_LOCK);\n    }\n\n    protected int execute(TypedEvent e){\n        if(e instanceof ShellEvent){\n            TuxGuitar.instance().getPlayer().reset();\n\n            if(TuxGuitar.instance().getFileHistory().isUnsavedFile()){\n                ConfirmDialog confirm = new ConfirmDialog(TuxGuitar.getProperty(\"file.save-changes-question\"));\n                confirm.setDefaultStatus( ConfirmDialog.STATUS_CANCEL );\n                int status = confirm.confirm(ConfirmDialog.BUTTON_YES | ConfirmDialog.BUTTON_NO | ConfirmDialog.BUTTON_CANCEL, ConfirmDialog.BUTTON_YES);\n                if(status == ConfirmDialog.STATUS_CANCEL){\n                    return AUTO_UNLOCK;\n                }\n                if(status == ConfirmDialog.STATUS_YES){\n                    final String fileName = FileActionUtils.getFileName();\n                    if(fileName == null){\n                        return AUTO_UNLOCK;\n                    }\n                    TuxGuitar.instance().loadCursor(SWT.CURSOR_WAIT);\n                    new Thread(new Runnable() {\n                        public void run() {\n                            if(!TuxGuitar.isDisposed()){\n                                FileActionUtils.save(fileName);\n                                TuxGuitar.instance().loadCursor(SWT.CURSOR_ARROW);\n\n                                exit();\n                            }\n                        }\n                    }).start();\n                    return 0;\n                }\n            }\n            exit();\n        }\n        return 0;\n    }\n\n    protected void exit(){\n        try {\n            TGSynchronizer.instance().runLater(new TGSynchronizer.TGRunnable() {\n                public void run() throws Throwable {\n                    TuxGuitar.instance().lock();\n                    closeModules();\n                    saveConfig();\n                    dispose();\n                    TuxGuitar.instance().unlock();\n                }\n            });\n        } catch (Throwable throwable) {\n            throwable.printStackTrace();\n        }\n    }\n\n    protected void saveConfig(){\n        TGConfigManager config = TuxGuitar.instance().getConfig();\n\n        config.setProperty(TGConfigKeys.LAYOUT_MODE,getEditor().getTablature().getViewLayout().getMode());\n        config.setProperty(TGConfigKeys.LAYOUT_STYLE,getEditor().getTablature().getViewLayout().getStyle());\n        config.setProperty(TGConfigKeys.SHOW_PIANO,!TuxGuitar.instance().getPianoEditor().isDisposed());\n        config.setProperty(TGConfigKeys.SHOW_MATRIX,!TuxGuitar.instance().getMatrixEditor().isDisposed());\n        config.setProperty(TGConfigKeys.SHOW_FRETBOARD,TuxGuitar.instance().getFretBoardEditor().isVisible());\n        config.setProperty(TGConfigKeys.SHOW_MIXER,!TuxGuitar.instance().getMixer().isDisposed());\n        config.setProperty(TGConfigKeys.SHOW_TRANSPORT,!TuxGuitar.instance().getTransport().isDisposed());\n        config.setProperty(TGConfigKeys.SHOW_MARKERS,!MarkerList.instance().isDisposed());\n        config.setProperty(TGConfigKeys.MAXIMIZED,TuxGuitar.instance().getShell().getMaximized());\n        config.setProperty(TGConfigKeys.WIDTH,TuxGuitar.instance().getShell().getClientArea().width);\n        config.setProperty(TGConfigKeys.HEIGHT,TuxGuitar.instance().getShell().getClientArea().height);\n        config.setProperty(TGConfigKeys.EDITOR_MOUSE_MODE,getEditor().getTablature().getEditorKit().getMouseMode());\n        config.setProperty(TGConfigKeys.MATRIX_GRIDS,TuxGuitar.instance().getMatrixEditor().getGrids());\n\n        TuxGuitar.instance().getConfig().save();\n    }\n\n    protected void closeModules(){\n        TuxGuitar.instance().getPlayer().close();\n        TuxGuitar.instance().getPluginManager().closePlugins();\n    }\n\n    protected void dispose(){\n        TGTableViewer.disposeColors();\n        TuxGuitar.instance().getSongManager().clearSong();\n        TuxGuitar.instance().getFretBoardEditor().dispose();\n        TuxGuitar.instance().getTablatureEditor().getTablature().dispose();\n        TuxGuitar.instance().getIconManager().disposeIcons();\n        TuxGuitar.instance().getShell().dispose();\n    }\n}<｜fim▁end｜>",
    "response": "\npublic class DisposeAction extends Action {\n    public static final String NAME = \"action.system.dispose\";\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.example.users.grpc.server;\n\nimport io.grpc.Server;\nimport io.grpc.ServerBuilder;\nimport io.grpc.ServerInterceptors;\nimport org.example.utils.requesthandler.ServerGrpcInterceptor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\n\nimport java.io.IOException;\n\nabstract public class AbstractUsersGrpcServer {\n\n    private static final Logger LOG = LoggerFactory.getLogger(AbstractUsersGrpcServer.class);\n\n    @Value(\"${org.example.users.grpcPort:7071}\")\n    private int port;\n\n    @Autowired\n    private ServerGrpcInterceptor interceptor;\n\n    private Server server;\n\n    public void start() throws IOException, InterruptedException {\n        server = ServerBuilder //\n                .forPort(port) //\n                .addService(ServerInterceptors.intercept(new UsersGrpcServiceImpl(), interceptor)) //\n                .build().start();\n        // blockUntilShutdown();\n\n        Runtime.getRuntime().addShutdownHook(new Thread() {\n            @Override\n            public void run() {\n                AbstractUsersGrpcServer.this.shutdown();\n<｜fim▁hole｜>    public void shutdown() {\n        if (server != null) {\n            server.shutdown();\n        }\n    }\n\n    private void blockUntilShutdown() throws InterruptedException {\n        if (server != null) {\n            server.awaitTermination();\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "            }\n        });\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.sonar.javascript.checks;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.sonar.check.Rule;\nimport org.sonar.plugins.javascript.api.EslintBasedCheck;\nimport org.sonar.plugins.javascript.api.JavaScriptRule;\nimport org.sonar.plugins.javascript.api.TypeScriptRule;\n\n@JavaScriptRule\n@TypeScriptRule\n@Rule(key = \"S2814\")\npublic class RedeclaredSymbolCheck implements EslintBasedCheck {\n<｜fim▁hole｜>  }\n\n  @Override\n  public String eslintKey() {\n    return \"no-redeclare\";\n  }\n\n  private static class Config {\n    boolean builtinGlobals = false;\n    boolean ignoreDeclarationMerge = true;\n  }\n}<｜fim▁end｜>",
    "response": "\n  @Override\n  public List<Object> configurations() {\n    return Collections.singletonList(new Config());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package util;\n\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class DateUtil {\n<｜fim▁hole｜>    public static Date stringToDateHour(String data) throws ParseException {\n        return (new SimpleDateFormat(\"dd/MM/yyyy HH:mm\").parse(data));\n    }\n\n    public static String dateToString(Date data) {\n        return (new SimpleDateFormat(\"dd/MM/yyyy\").format(data));\n    }\n\n    public static String dateHourToString(Date data) {\n        SimpleDateFormat formatador = new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");\n        String dataString = formatador.format(data);\n        return (dataString);\n    }\n\n    public static boolean verificaData(String data) {\n        return (data.matches(\"\\\\d{2}/\\\\d{2}/\\\\d{4}\"));\n    }\n\n    public static boolean verificaDataHora(String data) {\n        return (data.matches(\"\\\\d{2}/\\\\d{2}/\\\\d{4} \\\\d{2}:\\\\d{2}\"));\n    }\n}<｜fim▁end｜>",
    "response": "\n    public static Date stringToDate(String data) throws ParseException {\n        return (new SimpleDateFormat(\"dd/MM/yyyy\").parse(data));\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.sf.hajdbc.management;\n\nimport java.util.Hashtable;\n\nimport javax.management.JMException;\nimport javax.management.MBeanServer;\nimport javax.management.MalformedObjectNameException;\nimport javax.management.ObjectName;\n\nimport net.sf.hajdbc.Database;\nimport net.sf.hajdbc.DatabaseCluster;\nimport net.sf.hajdbc.logging.Level;\nimport net.sf.hajdbc.logging.Logger;\nimport net.sf.hajdbc.logging.LoggerFactory;\n\npublic class DefaultMBeanRegistrar<Z, D extends Database<Z>> implements MBeanRegistrar<Z, D>\n{\n    private static final String TYPE_ATTRIBUTE = \"type\";\n    private static final String CLUSTER_ATTRIBUTE = \"cluster\";\n    private static final String DATABASE_ATTRIBUTE = \"database\";\n\n    private static final String CLUSTER_TYPE = \"DatabaseCluster\";\n    private static final String DATABASE_TYPE = \"Database\";\n\n    private static final Logger logger = LoggerFactory.getLogger(DefaultMBeanRegistrar.class);\n\n    private final MBeanServer server;\n    private String domain = DatabaseCluster.class.getPackage().getName();\n\n    public DefaultMBeanRegistrar(MBeanServer server)\n    {\n        this.server = server;\n    }\n\n    public void setDomain(String domain)\n    {\n        this.domain = domain;\n    }\n\n    /**\n     * {@inheritDoc}\n     * @see net.sf.hajdbc.management.MBeanRegistrar#register(net.sf.hajdbc.DatabaseCluster)\n     */\n    @Override\n    public void register(DatabaseCluster<Z, D> cluster) throws JMException\n    {\n        this.register(cluster, this.createAttributes(cluster));\n    }\n\n    /**\n     * {@inheritDoc}\n     * @see net.sf.hajdbc.management.MBeanRegistrar#register(net.sf.hajdbc.DatabaseCluster, net.sf.hajdbc.Database)\n     */\n    @Override\n    public void register(DatabaseCluster<Z, D> cluster, D database) throws JMException\n    {\n        this.register(database, this.createAttributes(cluster, database));\n    }\n\n    private void register(Object object, Hashtable<String, String> attributes) throws JMException\n    {\n        ObjectName name = this.createObjectName(attributes);\n\n        this.server.registerMBean(new AnnotatedMBean(object), name);\n    }\n\n    /**\n<｜fim▁hole｜>    public void unregister(DatabaseCluster<Z, D> cluster)\n    {\n        this.unregister(this.createAttributes(cluster));\n    }\n\n    /**\n     * {@inheritDoc}\n     * @see net.sf.hajdbc.management.MBeanRegistrar#unregister(net.sf.hajdbc.DatabaseCluster, net.sf.hajdbc.Database)\n     */\n    @Override\n    public void unregister(DatabaseCluster<Z, D> cluster, D database)\n    {\n        this.unregister(this.createAttributes(cluster, database));\n    }\n\n    private void unregister(Hashtable<String, String> attributes)\n    {\n        try\n        {\n            ObjectName name = this.createObjectName(attributes);\n\n            if (this.server.isRegistered(name))\n            {\n                this.server.unregisterMBean(name);\n            }\n        }\n        catch (Exception e)\n        {\n            logger.log(Level.WARN, e);\n        }\n    }\n\n    private Hashtable<String, String> createAttributes(DatabaseCluster<Z, D> cluster)\n    {\n        Hashtable<String, String> attributes = new Hashtable<>();\n        attributes.put(TYPE_ATTRIBUTE, CLUSTER_TYPE);\n        attributes.put(CLUSTER_ATTRIBUTE, cluster.getId());\n        return attributes;\n    }\n\n    private Hashtable<String, String> createAttributes(DatabaseCluster<Z, D> cluster, D database)\n    {\n        Hashtable<String, String> attributes = new Hashtable<>();\n        attributes.put(TYPE_ATTRIBUTE, DATABASE_TYPE);\n        attributes.put(CLUSTER_ATTRIBUTE, cluster.getId());\n        attributes.put(DATABASE_ATTRIBUTE, database.getId());\n        return attributes;\n    }\n\n    private ObjectName createObjectName(Hashtable<String, String> attributes) throws MalformedObjectNameException\n    {\n        return ObjectName.getInstance(this.domain, attributes);\n    }\n}<｜fim▁end｜>",
    "response": "     * {@inheritDoc}\n     * @see net.sf.hajdbc.management.MBeanRegistrar#unregister(net.sf.hajdbc.DatabaseCluster)\n     */\n    @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>\npublic interface Terminal extends Closeable\n{\n   /**\n    * Initializes this terminal\n    */\n   void initialize();\n\n   /**\n    * Returns the width of the terminal (in pixels)\n    */\n   int getWidth();\n\n   /**\n    * Returns the height of the terminal (in pixels)\n    */\n   int getHeight();\n}<｜fim▁end｜>",
    "response": "package org.jboss.forge.addon.shell.spi;\n\nimport java.io.Closeable;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.cloud.user.dao;\n\nimport java.util.List;\n\nimport com.cloud.user.UserVO;\nimport com.cloud.utils.db.GenericDao;\n\npublic interface UserDao extends GenericDao<UserVO, Long> {\n    UserVO getUser(String username, String password);\n\n    UserVO getUserByName(String username, Long domainId);\n\n    UserVO getUser(String username);\n\n    UserVO getUser(long userId);\n\n    List<UserVO> findUsersLike(String username);\n\n    List<UserVO> listByAccount(long accountId);\n\n    /**\n<｜fim▁hole｜>     */\n    UserVO findUserBySecretKey(String secretKey);\n\n    /**\n     * Finds a user based on the registration token provided.\n     * @param registrationToken\n     * @return\n     */\n    UserVO findUserByRegistrationToken(String registrationToken);\n\n    List<UserVO> findUsersByName(String username);\n\n}<｜fim▁end｜>",
    "response": "     * Finds a user based on the secret key provided.\n     * @param secretKey\n     * @return\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.koch.ambeth.query.inmemory.bool;\n\nimport com.koch.ambeth.ioc.config.Property;\nimport com.koch.ambeth.query.inmemory.AbstractOperator;\nimport com.koch.ambeth.query.inmemory.IInMemoryBooleanOperand;\nimport com.koch.ambeth.util.collections.IMap;\n\npublic class AndOperator extends AbstractOperator implements IInMemoryBooleanOperand {\n    @Property\n    protected IInMemoryBooleanOperand[] operands;\n\n    @Override\n    public Boolean evaluate(IMap<Object, Object> nameToValueMap) {\n        for (IInMemoryBooleanOperand operand : operands) {\n<｜fim▁hole｜>            if (value == null) {\n                return null;\n            }\n            else if (!value.booleanValue()) {\n                return Boolean.FALSE;\n            }\n        }\n        return Boolean.TRUE;\n    }\n}<｜fim▁end｜>",
    "response": "            Boolean value = operand.evaluate(nameToValueMap);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.minexf.prgmone.listeners;\n\nimport org.bukkit.event.EventHandler;\nimport org.bukkit.event.Listener;\nimport org.bukkit.event.entity.*;\n\n<｜fim▁hole｜>    @EventHandler\n    public void onEntityBreedEvent(EntityBreedEvent ev)\n    {\n\n    }\n}<｜fim▁end｜>",
    "response": "public class EntityListener implements Listener {\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.n52.matlab.control.demo.gui;\n\nimport java.awt.EventQueue;\n\nimport javax.swing.WindowConstants;\n\npublic class RemoteMain\n{\n    public static void main(String[] args)\n    {   \n        OSXAppearance.applyIfApplicable();\n\n        final String matlabLocation = (args.length == 1 ? args[0] : null);\n\n        EventQueue.invokeLater(new Runnable()\n        {\n            @Override\n<｜fim▁hole｜>            {\n                DemoFrame frame = new DemoFrame(\"matlabcontrol demo - Running Outside MATLAB\", matlabLocation);\n                frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n                frame.setVisible(true);\n            }\n        });\n    }\n}<｜fim▁end｜>",
    "response": "            public void run()\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.eclipse.xtext.parser.terminalrules.hiddenTerminalsTestLanguage.impl;\n\nimport org.eclipse.emf.common.notify.Notification;\nimport org.eclipse.emf.common.notify.NotificationChain;\n\nimport org.eclipse.emf.ecore.EClass;\nimport org.eclipse.emf.ecore.InternalEObject;\n\nimport org.eclipse.emf.ecore.impl.ENotificationImpl;\n\nimport org.eclipse.xtext.parser.terminalrules.hiddenTerminalsTestLanguage.HiddenTerminalsTestLanguagePackage;\nimport org.eclipse.xtext.parser.terminalrules.hiddenTerminalsTestLanguage.OverridingHiddens;\n<｜fim▁hole｜>\npublic class OverridingHiddensImpl extends ModelImpl implements OverridingHiddens\n{\n  /**\n   * The cached value of the '{@link #getCalled() <em>Called</em>}' containment reference.\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @see #getCalled()\n   * @generated\n   * @ordered\n   */\n  protected OverridingHiddensCall called;\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  protected OverridingHiddensImpl()\n  {\n    super();\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  protected EClass eStaticClass()\n  {\n    return HiddenTerminalsTestLanguagePackage.Literals.OVERRIDING_HIDDENS;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public OverridingHiddensCall getCalled()\n  {\n    return called;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public NotificationChain basicSetCalled(OverridingHiddensCall newCalled, NotificationChain msgs)\n  {\n    OverridingHiddensCall oldCalled = called;\n    called = newCalled;\n    if (eNotificationRequired())\n    {\n      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, HiddenTerminalsTestLanguagePackage.OVERRIDING_HIDDENS__CALLED, oldCalled, newCalled);\n      if (msgs == null) msgs = notification; else msgs.add(notification);\n    }\n    return msgs;\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  public void setCalled(OverridingHiddensCall newCalled)\n  {\n    if (newCalled != called)\n    {\n      NotificationChain msgs = null;\n      if (called != null)\n        msgs = ((InternalEObject)called).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - HiddenTerminalsTestLanguagePackage.OVERRIDING_HIDDENS__CALLED, null, msgs);\n      if (newCalled != null)\n        msgs = ((InternalEObject)newCalled).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - HiddenTerminalsTestLanguagePackage.OVERRIDING_HIDDENS__CALLED, null, msgs);\n      msgs = basicSetCalled(newCalled, msgs);\n      if (msgs != null) msgs.dispatch();\n    }\n    else if (eNotificationRequired())\n      eNotify(new ENotificationImpl(this, Notification.SET, HiddenTerminalsTestLanguagePackage.OVERRIDING_HIDDENS__CALLED, newCalled, newCalled));\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)\n  {\n    switch (featureID)\n    {\n      case HiddenTerminalsTestLanguagePackage.OVERRIDING_HIDDENS__CALLED:\n        return basicSetCalled(null, msgs);\n    }\n    return super.eInverseRemove(otherEnd, featureID, msgs);\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public Object eGet(int featureID, boolean resolve, boolean coreType)\n  {\n    switch (featureID)\n    {\n      case HiddenTerminalsTestLanguagePackage.OVERRIDING_HIDDENS__CALLED:\n        return getCalled();\n    }\n    return super.eGet(featureID, resolve, coreType);\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public void eSet(int featureID, Object newValue)\n  {\n    switch (featureID)\n    {\n      case HiddenTerminalsTestLanguagePackage.OVERRIDING_HIDDENS__CALLED:\n        setCalled((OverridingHiddensCall)newValue);\n        return;\n    }\n    super.eSet(featureID, newValue);\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public void eUnset(int featureID)\n  {\n    switch (featureID)\n    {\n      case HiddenTerminalsTestLanguagePackage.OVERRIDING_HIDDENS__CALLED:\n        setCalled((OverridingHiddensCall)null);\n        return;\n    }\n    super.eUnset(featureID);\n  }\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  @Override\n  public boolean eIsSet(int featureID)\n  {\n    switch (featureID)\n    {\n      case HiddenTerminalsTestLanguagePackage.OVERRIDING_HIDDENS__CALLED:\n        return called != null;\n    }\n    return super.eIsSet(featureID);\n  }\n\n} //OverridingHiddensImpl<｜fim▁end｜>",
    "response": "import org.eclipse.xtext.parser.terminalrules.hiddenTerminalsTestLanguage.OverridingHiddensCall;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package freemind.modes.mindmapmode.actions;\n\nimport freemind.modes.MindMap;\nimport freemind.modes.MindMapNode;\nimport freemind.modes.mindmapmode.actions.xml.ActionPair;\n<｜fim▁hole｜>    /**\n     * Returns the action pair to set the node @param selected to the current values.\n     * @param model\n     * @param selected\n     */\n    ActionPair apply(MindMap model, MindMapNode selected);\n\n}<｜fim▁end｜>",
    "response": "import freemind.modes.mindmapmode.actions.xml.ActorXml;\n\npublic interface NodeActorXml extends ActorXml {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.thoughtworks.go.apiv1.internalpipelines;\n\nimport com.thoughtworks.go.api.ApiController;\nimport com.thoughtworks.go.api.ApiVersion;\nimport com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\nimport com.thoughtworks.go.api.util.MessageJson;\nimport com.thoughtworks.go.apiv1.internalpipelines.representers.PipelineConfigsWithMinimalAttributesRepresenter;\nimport com.thoughtworks.go.config.PipelineConfigs;\nimport com.thoughtworks.go.config.exceptions.HttpException;\nimport com.thoughtworks.go.domain.PipelineGroups;\nimport com.thoughtworks.go.server.newsecurity.utils.SessionUtils;\nimport com.thoughtworks.go.server.service.EntityHashingService;\nimport com.thoughtworks.go.server.service.PipelineConfigService;\nimport com.thoughtworks.go.spark.Routes;\nimport com.thoughtworks.go.spark.spring.SparkSpringController;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Component;\n<｜fim▁hole｜>import java.util.List;\n\nimport static spark.Spark.*;\n\n@Component\npublic class InternalPipelinesControllerV1 extends ApiController implements SparkSpringController {\n\n    private final ApiAuthenticationHelper apiAuthenticationHelper;\n    private PipelineConfigService pipelineConfigService;\n    private EntityHashingService entityHashingService;\n\n    @Autowired\n    public InternalPipelinesControllerV1(ApiAuthenticationHelper apiAuthenticationHelper, PipelineConfigService pipelineConfigService, EntityHashingService entityHashingService) {\n        super(ApiVersion.v1);\n        this.apiAuthenticationHelper = apiAuthenticationHelper;\n        this.pipelineConfigService = pipelineConfigService;\n        this.entityHashingService = entityHashingService;\n    }\n\n    @Override\n    public String controllerBasePath() {\n        return Routes.Pipeline.INTERNAL_BASE;\n    }\n\n    @Override\n    public void setupRoutes() {\n        path(controllerBasePath(), () -> {\n            before(\"\", mimeType, this::setContentType);\n            before(\"/*\", mimeType, this::setContentType);\n\n            before(\"\", mimeType, this.apiAuthenticationHelper::checkAdminUserOrGroupAdminUserAnd403);\n\n            get(\"\", mimeType, this::index);\n        });\n    }\n\n    public String index(Request request, Response response) throws IOException {\n        List<PipelineConfigs> pipelineConfigs = pipelineConfigService.viewableOrOperatableGroupsFor(SessionUtils.currentUsername());\n        String etag = entityHashingService.md5ForEntity(new PipelineGroups(pipelineConfigs));\n\n        if (fresh(request, etag)) {\n            return notModified(response);\n        }\n\n        setEtagHeader(response, etag);\n        return writerForTopLevelObject(request, response, outputWriter -> PipelineConfigsWithMinimalAttributesRepresenter.toJSON(outputWriter, pipelineConfigs));\n    }\n\n}<｜fim▁end｜>",
    "response": "import spark.Request;\nimport spark.Response;\n\nimport java.io.IOException;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.github.stephenc.javaisotools.udflib.structures;\n\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\n\npublic class VolumeRecognitionSequence {\n\n    public enum NSRVersion {\n\n        NSR02,\n        NSR03\n    }\n\n    private NSRVersion nsrVersion;\n\n    public VolumeRecognitionSequence(NSRVersion nsrVersion) {\n        this.nsrVersion = nsrVersion;\n    }\n\n    public void write(RandomAccessFile myRandomAccessFile)\n            throws IOException {\n        VolumeStructureDescriptor beginningExtendedAreaDescriptor = new VolumeStructureDescriptor();\n        beginningExtendedAreaDescriptor.StructureType = 0;\n        beginningExtendedAreaDescriptor.StandardIdentifier = new byte[]{'B', 'E', 'A', '0', '1'};\n        beginningExtendedAreaDescriptor.StructureVersion = 1;\n        beginningExtendedAreaDescriptor.write(myRandomAccessFile);\n\n        VolumeStructureDescriptor NSRDescriptor = new VolumeStructureDescriptor();\n        NSRDescriptor.StructureType = 0;\n        NSRDescriptor.StructureVersion = 1;\n\n        if (nsrVersion == NSRVersion.NSR02) {\n            NSRDescriptor.StandardIdentifier = new byte[]{'N', 'S', 'R', '0', '2'};\n        } else if (nsrVersion == NSRVersion.NSR03) {\n            NSRDescriptor.StandardIdentifier = new byte[]{'N', 'S', 'R', '0', '3'};\n        }\n\n        NSRDescriptor.write(myRandomAccessFile);\n\n        VolumeStructureDescriptor terminatingExtendedAreaDescriptor = new VolumeStructureDescriptor();\n        terminatingExtendedAreaDescriptor.StructureType = 0;\n        terminatingExtendedAreaDescriptor.StandardIdentifier = new byte[]{'T', 'E', 'A', '0', '1'};\n        terminatingExtendedAreaDescriptor.StructureVersion = 1;\n        terminatingExtendedAreaDescriptor.write(myRandomAccessFile);\n    }\n\n    public byte[] getBytes() {\n        VolumeStructureDescriptor beginningExtendedAreaDescriptor = new VolumeStructureDescriptor();\n        beginningExtendedAreaDescriptor.StructureType = 0;\n        beginningExtendedAreaDescriptor.StandardIdentifier = new byte[]{'B', 'E', 'A', '0', '1'};\n        beginningExtendedAreaDescriptor.StructureVersion = 1;\n\n        byte[] beginningExtendedAreaDescriptorBytes = beginningExtendedAreaDescriptor.getBytes();\n\n        VolumeStructureDescriptor NSRDescriptor = new VolumeStructureDescriptor();\n        NSRDescriptor.StructureType = 0;\n        NSRDescriptor.StructureVersion = 1;\n\n        if (nsrVersion == NSRVersion.NSR02) {\n            NSRDescriptor.StandardIdentifier = new byte[]{'N', 'S', 'R', '0', '2'};\n        } else if (nsrVersion == NSRVersion.NSR03) {\n            NSRDescriptor.StandardIdentifier = new byte[]{'N', 'S', 'R', '0', '3'};\n        }\n\n<｜fim▁hole｜>        terminatingExtendedAreaDescriptor.StructureVersion = 1;\n\n        byte[] terminatingExtendedAreaDescriptorBytes = terminatingExtendedAreaDescriptor.getBytes();\n\n        byte[] rawBytes = new byte[beginningExtendedAreaDescriptorBytes.length\n                + NSRDescriptorBytes.length\n                + terminatingExtendedAreaDescriptorBytes.length];\n\n        int pos = 0;\n\n        System.arraycopy(beginningExtendedAreaDescriptorBytes, 0, rawBytes, pos,\n                beginningExtendedAreaDescriptorBytes.length);\n        pos += beginningExtendedAreaDescriptorBytes.length;\n\n        System.arraycopy(NSRDescriptorBytes, 0, rawBytes, pos, NSRDescriptorBytes.length);\n        pos += NSRDescriptorBytes.length;\n\n        System.arraycopy(terminatingExtendedAreaDescriptorBytes, 0, rawBytes, pos,\n                terminatingExtendedAreaDescriptorBytes.length);\n        pos += terminatingExtendedAreaDescriptorBytes.length;\n\n        return rawBytes;\n    }\n\n}<｜fim▁end｜>",
    "response": "        byte[] NSRDescriptorBytes = NSRDescriptor.getBytes();\n\n        VolumeStructureDescriptor terminatingExtendedAreaDescriptor = new VolumeStructureDescriptor();\n        terminatingExtendedAreaDescriptor.StructureType = 0;\n        terminatingExtendedAreaDescriptor.StandardIdentifier = new byte[]{'T', 'E', 'A', '0', '1'};\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.toe.plain.chat;\n\nimport android.content.Context;\nimport android.os.AsyncTask;\nimport android.util.Log;\n\n<｜fim▁hole｜>    String password;\n\n    public ConnectionAsync(Context context, String key1, String key2) {\n\n        ctx = context;\n        username = key1;\n        password = key2;\n        // TODO Auto-generated constructor stub\n    }\n\n    @Override\n    protected String doInBackground(String... params) {\n\n        connector.createConnection(ctx, username, password);\n        return null;\n    }\n\n    @Override\n    protected void onPostExecute(String result) {\n\n        super.onPostExecute(result);\n\n        Log.d(\"done connected\", \"connected\");\n\n    }\n\n    @Override\n    protected void onPreExecute() {\n\n        super.onPreExecute();\n\n    }\n\n}<｜fim▁end｜>",
    "response": "public class ConnectionAsync extends AsyncTask<String, Void, String> {\n    XmppConnection connector = new XmppConnection();\n    Context ctx;\n    String username;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package me.parozzz.hopeclanv2.Commands.PlayerCommand;\n\nimport me.parozzz.hopeclanv2.CommandManager.CommandMessageEnum;\nimport me.parozzz.hopeclanv2.CommandManager.CommandType;\nimport me.parozzz.hopeclanv2.Events.ClanDisbandEvent;\nimport me.parozzz.hopeclanv2.HopeClan;\nimport me.parozzz.hopeclanv2.Players.HPlayer;\nimport me.parozzz.hopeclanv2.ClanEnumManager.Rank;\nimport me.parozzz.hopeclanv2.Utils;\nimport net.md_5.bungee.api.chat.ClickEvent;\nimport net.md_5.bungee.api.chat.TextComponent;\nimport org.bukkit.plugin.java.JavaPlugin;\nimport org.bukkit.scheduler.BukkitRunnable;\n\npublic class DeleteCommand implements PlayerCommand\n{\n\n<｜fim▁hole｜>\n    @Override\n    public String getCommand() \n    {\n        return CommandType.DELETE.getName();\n    }\n\n    @Override\n    public void sendHelp(HPlayer hp) \n    {\n        CommandMessageEnum.DELETEHELP.chat(hp);\n    }\n\n    @Override\n    public boolean canBeUsed(HPlayer hp, final boolean muted) \n    {\n        if(hp.getClan()==null)\n        {\n            CommandMessageEnum.PLAYERNOTINCLAN.chat(hp, muted);\n            return false;\n        }\n        else if(hp.getClan().getRank(hp)!=Rank.OWNER)\n        {\n            CommandMessageEnum.COMMANDOWNERONLY.chat(hp, muted);\n            return false;\n        }\n        return true;\n    }\n\n    @Override\n    public boolean onCommand(HPlayer hp, String[] val) \n    {\n        if(hp.hasMetadata(\"DELETE\"))\n        {\n            Utils.callEvent(new ClanDisbandEvent(hp, hp.getClan()));\n            hp.removeMetadata(\"DELETE\");\n        }\n        else\n        {\n            hp.addMetadata(\"DELETE\", true);\n            if(hp.isOnline())\n            {\n                hp.getPlayer().spigot().sendMessage(text);\n            }\n\n            new BukkitRunnable()\n            {\n                @Override\n                public void run() \n                {\n                    hp.removeMetadata(\"DELETE\");\n                }\n            }.runTaskLater(JavaPlugin.getPlugin(HopeClan.class), 200L);\n        }\n        return true;\n    }\n\n}<｜fim▁end｜>",
    "response": "    private final TextComponent text;\n    public DeleteCommand()\n    {\n        text=new TextComponent(CommandMessageEnum.DELETECONFIRM.get());\n        text.setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, \"/clan \"+getCommand()));\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.devtools.build.lib.analysis.config;\n\npublic final class HostTransition implements PatchTransition {\n  public static final HostTransition INSTANCE = new HostTransition();\n\n  private HostTransition() {}\n\n  @Override\n  public BuildOptions apply(BuildOptions options) {\n    if (options.get(BuildConfiguration.Options.class).isHost) {\n      // If the input already comes from the host configuration, just return the existing values.\n      //\n      // We don't do this just for convenience: if an\n      // {@link com.google.devtools.build.lib.runtime.proto.InvocationPolicyOuterClass.InvocationPolicy}\n      // overrides option defaults, {@link FragmentOptions#getHost} won't honor that policy. That's\n      // because it uses its own options parser that's not aware of the policy. This can create\n<｜fim▁hole｜>      // --foo flags. That works the first time you do it (since both of the original values\n      // were policy-processed). But not subsequent times.\n      //\n      // There are various ways to solve this problem (pass the policy to host options computation,\n      // manually set host.hostFoo = original.hostFoo). But those raise larger questions about the\n      // nature of host/target relationships, so for the time being this is a straightforward\n      // and practical fix.\n      return options.clone();\n    } else {\n      return options.createHostOptions();\n    }\n  }\n}<｜fim▁end｜>",
    "response": "      // problems for, e.g., {@link JavaOptions#getHost}, which promotes --host_foo flags to\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.github.pomona.domain.model;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.OneToOne;\nimport javax.validation.constraints.DecimalMin;\nimport javax.validation.constraints.NotNull;\n\nimport com.github.common.domain.model.ConcurrencySafeEntity;\n\n@Entity\npublic class ItemCardapio extends ConcurrencySafeEntity {\n\n    private static final long serialVersionUID = -2525537354397729187L;\n\n    @NotNull\n    @ManyToOne\n    @JoinColumn(nullable = false)   \n    private RefeicaoCardapio refeicaoCardapio;\n    @NotNull\n    @OneToOne\n    @JoinColumn(nullable = false)\n    private EnergiaAlimento energiaAlimento;\n    @NotNull\n    @DecimalMin(value = \"0.01\")\n    @Column(nullable = false, precision = 10, scale = 2)\n    private float quantidade;\n    @OneToOne\n    private TipoApresentacao tipoApresentacao;\n\n    // private Map<Substancia, Float> proporcoes;\n\n    public EnergiaAlimento getEnergiaAlimento() {\n        return energiaAlimento;\n    }\n\n    public void setEnergiaAlimento(EnergiaAlimento energiaAlimento) {\n<｜fim▁hole｜>    public float getQuantidade() {\n        return quantidade;\n    }\n\n    public void setQuantidade(float quantidade) {\n        this.quantidade = quantidade;\n    }\n\n    public TipoApresentacao getTipoApresentacao() {\n        return tipoApresentacao;\n    }\n\n    public void setTipoApresentacao(TipoApresentacao tipoApresentacao) {\n        this.tipoApresentacao = tipoApresentacao;\n    }\n\n    public float getEnergia() {\n        return this.getEnergiaAlimento().getEnergia()\n                / energiaAlimento.getAlimento().fatorProporcao(this.quantidade);\n    }\n\n    public RefeicaoCardapio getRefeicaoCardapio() {\n        return refeicaoCardapio;\n    }\n\n    public void setRefeicaoCardapio(RefeicaoCardapio refeicaoCardapio) {\n        this.refeicaoCardapio = refeicaoCardapio;\n    }\n\n    public Map<Substancia, Float> getSubstancias() {\n        Map<Substancia, Float> resultado = new HashMap<Substancia, Float>();\n        for (ComponenteAlimentar componenteAlimentar : energiaAlimento\n                .getAlimento().getComposicaoAlimentar()) {\n            resultado.put(\n                    componenteAlimentar.getSubstancia(),\n                    componenteAlimentar.getQuantidade()\n                            / energiaAlimento.getAlimento().fatorProporcao(\n                                    this.quantidade));\n        }\n        return resultado;\n    }\n}<｜fim▁end｜>",
    "response": "        this.energiaAlimento = energiaAlimento;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.apple.itunes.com  ;\n\nimport com4j.*;\n\n@IID(\"{206479C9-FE32-4F9B-A18A-475AC939B479}\")\npublic interface IITOperationStatus extends Com4jObject {\n  // Methods:\n  /**\n   * <p>\n   * True if the operation is still in progress.\n   * </p>\n   * <p>\n   * Getter method for the COM property \"InProgress\"\n   * </p>\n   * @return  Returns a value of type boolean\n   */\n\n  @DISPID(1610743808) //= 0x60020000. The runtime will prefer the VTID if present\n  @VTID(7)\n  boolean inProgress();\n\n  /**\n   * <p>\n   * Returns a collection containing the tracks that were generated by the operation.\n   * </p>\n   * <p>\n   * Getter method for the COM property \"Tracks\"\n   * </p>\n   * @return  Returns a value of type com.apple.itunes.com.IITTrackCollection\n   */\n\n  @DISPID(1610743809) //= 0x60020001. The runtime will prefer the VTID if present\n  @VTID(8)\n  com.apple.itunes.com.IITTrackCollection tracks();\n\n  @VTID(8)\n  @ReturnValue(defaultPropertyThrough={com.apple.itunes.com.IITTrackCollection.class})\n<｜fim▁hole｜>  // Properties:\n}<｜fim▁end｜>",
    "response": "  com.apple.itunes.com.IITTrack tracks(\n    int index);\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.compiere.images;\n\nimport java.awt.*;\nimport java.awt.image.*;\nimport java.net.*;\nimport javax.swing.*;\nimport javax.swing.plaf.*;\nimport org.compiere.plaf.*;\nimport java.util.logging.*;\nimport org.compiere.util.*;\n\npublic class WebImageFactory\n{\n    /**\n     *  Get Image Icon or null if not exists\n     *  @param name     file name in org.compiere.images\n     *  @return image\n     */\n    public static ImageIcon getImageIcon (String name)\n    {\n        URL url = org.compiere.Adempiere.class.getResource(\"images/\" + name);\n        if (url == null)\n        {\n            log.log(Level.SEVERE, \"ImageFactory.getImageIcon - not found: \" + name);\n            return null;\n        }\n        return new ImageIcon(url);\n    }   //  getImageIcon\n\n    /** Home Icon ************************************************************/\n    private static Icon s_HomeIcon = null;\n    /** Logger          */\n    private static CLogger log = CLogger.getCLogger(WebImageFactory.class);\n\n    /**\n     *  Get Home Icon (little house) 18*18\n     *  @return image\n     */\n    public static Icon getHomeIcon()\n    {\n        if (s_HomeIcon == null)\n            s_HomeIcon = new HomeIcon();\n        return s_HomeIcon;\n    }   //  getHomeIcon\n\n    /**\n     *  18*18 Home Icon\n     */\n    private static class HomeIcon implements Icon, UIResource\n    {\n        public void paintIcon(Component c, Graphics g, int x, int y)\n        {\n            g.translate(x, y);\n            // Draw outside edge of house\n            g.setColor(CompiereLookAndFeel.getControlInfo());           //  black\n            g.drawLine(8,1, 1,8);           // left edge of roof\n            g.drawLine(8,1, 15,8);          // right edge of roof\n            g.drawLine(11,2, 11,3);         // left edge of chimney\n            g.drawLine(12,2, 12,4);         // right edge of chimney\n            g.drawLine(3,7, 3,15);          // left edge of house\n            g.drawLine(13,7, 13,15);        // right edge of house\n            g.drawLine(4,15, 12,15);        // bottom edge of house\n            // Draw door frame\n            //     same color as edge of house\n            g.drawLine( 6,9,  6,14); // left\n            g.drawLine(10,9, 10,14); // right\n            g.drawLine( 7,9,  9, 9); // top\n            // Draw roof body\n            g.setColor(CompiereLookAndFeel.getControlDarkShadow());     //  secondary1\n            g.fillRect(8,2, 1,1);           //top toward bottom\n            g.fillRect(7,3, 3,1);\n            g.fillRect(6,4, 5,1);\n            g.fillRect(5,5, 7,1);\n            g.fillRect(4,6, 9,2);\n            // Draw doornob\n            //     same color as roof body\n            g.drawLine(9,12, 9,12);\n            // Paint the house\n            g.setColor(CompiereLookAndFeel.getPrimaryControl());        //  primary3\n            g.drawLine(4,8, 12,8);          // above door\n<｜fim▁hole｜>            g.translate(-x, -y);\n        }\n        public int getIconWidth()\n        {\n            return 18;\n        }\n        public int getIconHeight()\n        {\n            return 18;\n        }\n    }   //  HomeIcon\n\n    /** Folder Icon **********************************************************/\n    private static Icon s_FolderIcon = null;\n    /** 16*16 dimension     */\n    private static final Dimension s_icon16Size = new Dimension(16, 16);\n\n    /**\n     *  Folder Icon\n     *  @return icon\n     */\n    public static Icon getFolderIcon()\n    {\n        if (s_FolderIcon == null)\n            s_FolderIcon = new FolderIcon();\n        return s_FolderIcon;\n    }   //  getFolderIcon\n\n    /**\n     *  FolderIcon usable for Tree (18*16) spacing\n     */\n    private static class FolderIcon extends FolderIcon16\n    {\n        public int getShift()\n        {\n            return -1;\n        }\n        public int getAdditionalHeight()\n        {\n            return 2;\n        }\n    }   //  FolderIcon\n\n    /**\n     *  Scaleable 16*16 Folder Icon\n     */\n    public static class FolderIcon16 implements Icon\n    {\n        transient Image image;\n\n        public void paintIcon (Component c, Graphics g, int x, int y)\n        {\n            if (image == null)\n            {\n                image = new BufferedImage(getIconWidth(), getIconHeight(),\n                    BufferedImage.TYPE_INT_ARGB);\n                Graphics imageG = image.getGraphics();\n                paintMe (c,imageG);\n                imageG.dispose();\n            }\n            g.drawImage(image, x, y+getShift(), null);\n        }\n        private void paintMe(Component c, Graphics g)\n        {\n            int right = s_icon16Size.width - 1;\n            int bottom = s_icon16Size.height - 1;\n            // Draw tab top\n            g.setColor(CompiereLookAndFeel.getPrimaryControlDarkShadow());  //  primary1\n            g.drawLine(right - 5, 3, right, 3);\n            g.drawLine(right - 6, 4, right, 4);\n            // Draw folder front\n            g.setColor(CompiereLookAndFeel.getPrimaryControl());            //  primary3\n            g.fillRect(2, 7, 13, 8);\n            // Draw tab bottom\n            g.setColor(CompiereLookAndFeel.getPrimaryControlShadow());      //  primary2\n            g.drawLine(right - 6, 5, right - 1, 5);\n            // Draw outline\n            g.setColor(CompiereLookAndFeel.getPrimaryControlInfo());        //  black\n            g.drawLine(0, 6, 0, bottom);            // left side\n            g.drawLine(1, 5, right - 7, 5);         // first part of top\n            g.drawLine(right - 6, 6, right - 1, 6); // second part of top\n            g.drawLine(right, 5, right, bottom);    // right side\n            g.drawLine(0, bottom, right, bottom);   // bottom\n            // Draw highlight\n            g.setColor(CompiereLookAndFeel.getPrimaryControlHighlight());   //  white\n            g.drawLine(1, 6, 1, bottom - 1);\n            g.drawLine(1, 6, right - 7, 6);\n            g.drawLine(right - 6, 7, right - 1, 7);\n        }\n        public int getShift()\n        {\n            return 0;\n        }\n        public int getAdditionalHeight()\n        {\n            return 0;\n        }\n        public int getIconWidth()\n        {\n            return s_icon16Size.width;\n        }\n        public int getIconHeight()\n        {\n            return s_icon16Size.height + getAdditionalHeight();\n        }\n    }   //  FolderIcon16\n\n}   //  ImageFactory<｜fim▁end｜>",
    "response": "            g.fillRect(4,9, 2,6);           // left of door\n            g.fillRect(11,9, 2,6);          // right of door\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.locationtech.geowave.analytic.extract;\n\n<｜fim▁hole｜>import org.opengis.feature.simple.SimpleFeature;\n\npublic class SimpleFeatureInteriorPointExtractor extends SimpleFeatureCentroidExtractor implements\n    CentroidExtractor<SimpleFeature> {\n  @Override\n  public Point getCentroid(final SimpleFeature anObject) {\n    final Geometry geometry = (Geometry) anObject.getDefaultGeometry();\n    final int srid = SimpleFeatureGeometryExtractor.getSRID(anObject);\n    final Point point = geometry.getInteriorPoint();\n    point.setSRID(srid);\n    return point;\n  }\n}<｜fim▁end｜>",
    "response": "import org.locationtech.jts.geom.Geometry;\nimport org.locationtech.jts.geom.Point;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.md2k.phonesensor;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.net.Uri;\nimport android.os.Build;\nimport android.provider.Settings;\n\nimport org.md2k.mcerebrum.core.access.MCerebrum;\nimport org.md2k.mcerebrum.core.access.MCerebrumInfo;\nimport org.md2k.phonesensor.plot.ActivityPlotChoice;\n\npublic class MyMCerebrumInit extends MCerebrumInfo {\n    /**\n     * Updates variables in the <code>MCerebrum</code> core and common libraries.\n     *\n<｜fim▁hole｜>        MCerebrum.setBackgroundService(context, ServicePhoneSensor.class);\n        MCerebrum.setConfigureActivity(context, ActivitySettings.class);\n        MCerebrum.setPermissionActivity(context, ActivityPermission.class);\n        MCerebrum.setConfigured(context, Configuration.isConfigured());\n        MCerebrum.setConfigureExact(context, Configuration.isEqualDefault(MyApplication.getContext()));\n\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            if (!Settings.canDrawOverlays(context)) {\n                Intent myIntent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);\n                myIntent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n                context.startActivity(myIntent);\n            }\n        }\n        if(!MCerebrum.getPermission(context)) {\n            Intent intent = new Intent(context, ActivityPermission.class);\n            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(intent);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "     * @param context Android context\n     */\n    @Override\n    public void update(final Context context){\n        MCerebrum.setReportActivity(context, ActivityPlotChoice.class);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.telegram.api.bot.inlinemessage;\n\nimport org.telegram.api.keyboard.replymarkup.TLAbsReplyMarkup;\nimport org.telegram.tl.StreamingUtils;\nimport org.telegram.tl.TLContext;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\n\npublic class TLBotInlineMessageMediaContact extends TLAbsBotInlineMessage {\n    public static final int CLASS_ID = 0x35edb4d4;\n\n    private static final int FLAG_UNUSED0        = 0x00000001; // 0\n    private static final int FLAG_UNUSED1        = 0x00000002; // 1\n    private static final int FLAG_REPLY_MARKUP   = 0x00000004; // 2\n\n    private int flags;\n    private String phoneNumber;\n    private String firstName;\n    private String lastName;\n    private TLAbsReplyMarkup replyMarkup;\n\n    public TLBotInlineMessageMediaContact() {\n        super();\n    }\n\n    public int getFlags() {\n        return flags;\n    }\n\n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n\n    public TLAbsReplyMarkup getReplyMarkup() {\n        return replyMarkup;\n    }\n\n    @Override\n    public int getClassId() {\n        return CLASS_ID;\n    }\n\n<｜fim▁hole｜>        StreamingUtils.writeTLString(phoneNumber, stream);\n        StreamingUtils.writeTLString(firstName, stream);\n        StreamingUtils.writeTLString(lastName, stream);\n        if ((flags & FLAG_REPLY_MARKUP) != 0) {\n            StreamingUtils.writeTLObject(replyMarkup, stream);\n        }\n    }\n\n    @Override\n    public void deserializeBody(InputStream stream, TLContext context) throws IOException {\n        this.flags = StreamingUtils.readInt(stream);\n        this.phoneNumber = StreamingUtils.readTLString(stream);\n        this.firstName = StreamingUtils.readTLString(stream);\n        this.lastName = StreamingUtils.readTLString(stream);\n        if ((flags & FLAG_REPLY_MARKUP) != 0) {\n            replyMarkup = (TLAbsReplyMarkup) StreamingUtils.readTLObject(stream, context);\n        }\n    }\n\n    @Override\n    public String toString() {\n        return \"botInlineMessageMediaContact#35edb4d4\";\n    }\n}<｜fim▁end｜>",
    "response": "    @Override\n    public void serializeBody(OutputStream stream) throws IOException {\n        StreamingUtils.writeInt(flags, stream);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.uberfire.workbench.model.impl;\n\nimport static org.uberfire.commons.validation.PortablePreconditions.checkNotNull;\nimport static org.uberfire.workbench.model.ContextDisplayMode.SHOW;\nimport static org.uberfire.workbench.model.impl.PanelTypeHelper.isRoot;\n\nimport org.jboss.errai.common.client.api.annotations.Portable;\nimport org.uberfire.workbench.model.ContextDefinition;\nimport org.uberfire.workbench.model.ContextDisplayMode;\nimport org.uberfire.workbench.model.PanelDefinition;\nimport org.uberfire.workbench.model.PanelType;\nimport org.uberfire.workbench.model.PerspectiveDefinition;\n\n@Portable\npublic class PerspectiveDefinitionImpl\n        implements\n        PerspectiveDefinition {\n\n    private String name;\n\n    private boolean isTransient = false;\n\n    private PanelDefinition root;\n    private ContextDefinition contextDefinition;\n    private ContextDisplayMode contextDisplayMode = SHOW;\n\n    public PerspectiveDefinitionImpl() {\n        this.root = new PanelDefinitionImpl( PanelType.ROOT_TAB );\n    }\n\n    public PerspectiveDefinitionImpl( final PanelType type ) {\n        checkNotNull( \"type\", type );\n        if ( !isRoot( type ) ) {\n            throw new IllegalArgumentException( \"Panel type must named '\" + name + \"' should be not null!\" );\n        }\n\n        this.root = new PanelDefinitionImpl( type );\n    }\n\n    @Override\n    public boolean isTransient() {\n        return isTransient;\n<｜fim▁hole｜>\n    @Override\n    public String getName() {\n        return name;\n    }\n\n    @Override\n    public void setName( final String name ) {\n        this.name = name;\n    }\n\n    @Override\n    public PanelDefinition getRoot() {\n        return root;\n    }\n\n    @Override\n    public void setContextDefinition( final ContextDefinition contextDefinition ) {\n        this.contextDefinition = contextDefinition;\n    }\n\n    @Override\n    public ContextDefinition getContextDefinition() {\n        return contextDefinition;\n    }\n\n    @Override\n    public ContextDisplayMode getContextDisplayMode() {\n        return contextDisplayMode;\n    }\n\n    @Override\n    public void setContextDisplayMode( final ContextDisplayMode contextDisplayMode ) {\n        this.contextDisplayMode = contextDisplayMode;\n    }\n\n    @Override\n    public String toString() {\n      return \"PerspectiveDefinitionImpl [name=\" + name + \", contextDefinition=\" + contextDefinition\n              + \", contextDisplayMode=\" + contextDisplayMode + \"]\";\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    @Override\n    public void setTransient( boolean isTransient ) {\n        this.isTransient = isTransient;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.springframework.cloud.dataflow.shell.command;\n\nimport static org.junit.Assert.assertThat;\nimport static org.junit.Assert.assertTrue;\nimport static org.mockito.Mockito.when;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.hamcrest.Matchers;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\n\nimport org.springframework.cloud.dataflow.rest.client.DataFlowOperations;\nimport org.springframework.cloud.dataflow.rest.client.RuntimeOperations;\nimport org.springframework.cloud.dataflow.rest.resource.AppInstanceStatusResource;\nimport org.springframework.cloud.dataflow.rest.resource.AppStatusResource;\nimport org.springframework.cloud.dataflow.shell.config.DataFlowShell;\nimport org.springframework.hateoas.PagedResources;\nimport org.springframework.shell.table.TableModel;\n\npublic class RuntimeCommandsTests {\n\n    private RuntimeCommands runtimeCommands;\n\n    @Mock\n    private DataFlowOperations dataFlowOperations;\n\n    @Mock\n    private RuntimeOperations runtimeOperations;\n\n    private AppStatusResource appStatusResource1;\n\n    private AppStatusResource appStatusResource2;\n\n    private AppStatusResource appStatusResource3;\n\n<｜fim▁hole｜>        this.runtimeCommands = new RuntimeCommands(dataFlowShell);\n        appStatusResource1 = new AppStatusResource(\"1\", \"deployed\");\n        Map<String, String> properties = new HashMap<>();\n        properties.put(\"key1\", \"value1\");\n        properties.put(\"key2\", \"value1\");\n        AppInstanceStatusResource instanceStatusResource1 = new AppInstanceStatusResource(\"10\", \"deployed\", properties);\n        AppInstanceStatusResource instanceStatusResource2 = new AppInstanceStatusResource(\"20\", \"deployed\", null);\n        List<AppInstanceStatusResource> instanceStatusResources1 = new ArrayList<>();\n        instanceStatusResources1.add(instanceStatusResource1);\n        instanceStatusResources1.add(instanceStatusResource2);\n        PagedResources.PageMetadata metadata1 = new PagedResources.PageMetadata(instanceStatusResources1.size(), 1, instanceStatusResources1.size(), 1);\n        PagedResources<AppInstanceStatusResource> resources = new PagedResources<>(instanceStatusResources1, metadata1);\n        appStatusResource1.setInstances(resources);\n        appStatusResource2 = new AppStatusResource(\"2\", \"undeployed\");\n        AppInstanceStatusResource instanceStatusResource3 = new AppInstanceStatusResource(\"30\", \"undeployed\", null);\n        AppInstanceStatusResource instanceStatusResource4 = new AppInstanceStatusResource(\"40\", \"undeployed\", null);\n        List<AppInstanceStatusResource> instanceStatusResources2 = new ArrayList<>();\n        instanceStatusResources1.add(instanceStatusResource3);\n        instanceStatusResources1.add(instanceStatusResource4);\n        PagedResources.PageMetadata metadata3 = new PagedResources.PageMetadata(instanceStatusResources2.size(), 1, instanceStatusResources2.size(), 1);\n        PagedResources<AppInstanceStatusResource> resources2 = new PagedResources<>(instanceStatusResources2, metadata3);\n        appStatusResource2.setInstances(resources2);\n        appStatusResource3 = new AppStatusResource(\"3\", \"failed\");\n        AppInstanceStatusResource instanceStatusResource5 = new AppInstanceStatusResource(\"50\", \"failed\", null);\n        AppInstanceStatusResource instanceStatusResource6 = new AppInstanceStatusResource(\"60\", \"deployed\", null);\n        List<AppInstanceStatusResource> instanceStatusResources3 = new ArrayList<>();\n        instanceStatusResources1.add(instanceStatusResource5);\n        instanceStatusResources1.add(instanceStatusResource6);\n        PagedResources.PageMetadata metadata4 = new PagedResources.PageMetadata(instanceStatusResources3.size(), 1, instanceStatusResources3.size(), 1);\n        PagedResources<AppInstanceStatusResource> resources3 = new PagedResources<>(instanceStatusResources3, metadata4);\n        appStatusResource3.setInstances(resources3);\n    }\n\n    @Test\n    public void testStatusWithSummary() {\n        Collection<AppStatusResource> data = new ArrayList<>();\n        data.add(appStatusResource1);\n        data.add(appStatusResource2);\n        data.add(appStatusResource3);\n        PagedResources.PageMetadata metadata = new PagedResources.PageMetadata(data.size(), 1, data.size(), 1);\n        PagedResources<AppStatusResource> result = new PagedResources<>(data, metadata);\n        when(runtimeOperations.status()).thenReturn(result);\n        Object[][] expected = new String[][] {\n                {\"1\", \"deployed\", \"2\"},\n                {\"2\", \"undeployed\", \"0\"},\n                {\"3\", \"failed\", \"0\"}\n        };\n        TableModel model = runtimeCommands.list(true, null).getModel();\n        for (int row = 0; row < expected.length; row++) {\n            for (int col = 0; col < expected[row].length; col++) {\n                assertThat(String.valueOf(model.getValue(row + 1, col)), Matchers.is(expected[row][col]));\n            }\n        }\n    }\n\n    @Test\n    public void testStatusWithoutSummary() {\n        Collection<AppStatusResource> data = new ArrayList<>();\n        data.add(appStatusResource1);\n        data.add(appStatusResource2);\n        PagedResources.PageMetadata metadata = new PagedResources.PageMetadata(data.size(), 1, data.size(), 1);\n        PagedResources<AppStatusResource> result = new PagedResources<>(data, metadata);\n        when(runtimeOperations.status()).thenReturn(result);\n        Object[][] expected = new String[][] {\n                {\"1\", \"deployed\", \"2\"},\n                {\"10\", \"deployed\"},\n                {\"20\", \"deployed\"},\n                {\"2\", \"undeployed\", \"0\"}\n        };\n        TableModel model = runtimeCommands.list(false, null).getModel();\n        for (int row = 0; row < expected.length; row++) {\n            for (int col = 0; col < expected[row].length; col++) {\n                assertThat(String.valueOf(model.getValue(row + 1, col)), Matchers.is(expected[row][col]));\n            }\n        }\n    }\n\n    @Test\n    public void testStatusByModuleId() {\n        when(runtimeOperations.status(\"1\")).thenReturn(appStatusResource1);\n        Object[][] expected = new String[][] {\n                {\"1\", \"deployed\", \"2\"},\n                {\"10\", \"deployed\"},\n                {\"20\", \"deployed\"}\n        };\n        TableModel model = runtimeCommands.list(false, new String[] {\"1\"}).getModel();\n        assertTrue(model.getRowCount() == 4);\n        for (int row = 0; row < expected.length; row++) {\n            for (int col = 0; col < expected[row].length; col++) {\n                assertThat(String.valueOf(model.getValue(row + 1, col)), Matchers.is(expected[row][col]));\n            }\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        when(dataFlowOperations.runtimeOperations()).thenReturn(runtimeOperations);\n        DataFlowShell dataFlowShell = new DataFlowShell();\n        dataFlowShell.setDataFlowOperations(dataFlowOperations);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package delaunayrefinement.main;\n\nimport galois.objects.MethodFlag;\nimport galois.objects.graph.GNode;\nimport galois.objects.graph.MorphGraph;\nimport galois.objects.graph.ObjectGraph;\nimport galois.objects.graph.ObjectUndirectedEdge;\nimport galois.runtime.Features;\nimport galois.runtime.ForeachContext;\nimport galois.runtime.GaloisRuntime;\nimport galois.runtime.ReplayFeature;\nimport galois.runtime.WorkNotUsefulException;\nimport galois.runtime.wl.ChunkedFIFO;\nimport galois.runtime.wl.LIFO;\nimport galois.runtime.wl.Priority;\nimport galois_scj.GaloisSCJComputation;\nimport galois_scj.GaloisSCJProcess;\nimport galois_scj.ReducedGaloisRuntime;\nimport galois_scj.UnorderedGaloisSCJComputation;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport scj.Task;\nimport util.Launcher;\n\npublic class SCJMain {\n\n    public void run(String args[]) throws Exception {\n        //FullGaloisRuntime.initialize(2, false, false, ReplayFeature.Type.NO, false, false);\n        ReducedGaloisRuntime.initialize(false, false);\n        Features.initialize(GaloisRuntime.getRuntime().getMaxThreads(), ReplayFeature.Type.NO);\n\n        if (args.length < 1) {\n            System.err.println(\"Arguments: <input file> \");\n            System.exit(1);\n        }\n        if (Launcher.getLauncher().isFirstRun()) {\n            System.err.println();\n            System.err.println(\"Lonestar Benchmark Suite v3.0\");\n            System.err.println(\"Copyright (C) 2007, 2008, 2009, 2010 The University of Texas at Austin\");\n            System.err.println(\"http://iss.ices.utexas.edu/lonestar/\");\n            System.err.println();\n            System.err.printf(\"application: Delaunay Mesh Refinement (SCJ version)\\n\");\n            System.err.println(\"Refines a Delaunay triangulation mesh such that no angle\");\n            System.err.println(\"in the mesh is less than 30 degrees\");\n            System.err.println(\"http://iss.ices.utexas.edu/lonestar/delaunayrefinement.html\");\n            System.err.println();\n        }\n<｜fim▁hole｜>            System.err.printf(\"configuration: %d total triangles, %d bad triangles\\n\", mesh.size(), badNodes.size());\n            System.err.println(\"number of threads: \" + GaloisRuntime.getRuntime().getMaxThreads());\n            System.err.println();\n        }\n\n        Launcher.getLauncher().startTiming();       \n        this.scjMainTask_refine(new Task<Void>(), mesh, badNodes);\n        Launcher.getLauncher().stopTiming();\n\n        if (Launcher.getLauncher().isFirstRun()) {\n            verify(mesh);\n        }\n    }\n\n    public void scjMainTask_refine(Task<Void> now, final ObjectGraph<Element, Element.Edge> mesh, Collection<GNode<Element>> badNodes)\n    throws Exception {\n\n        GaloisSCJComputation<GNode<Element>> computation = new UnorderedGaloisSCJComputation<GNode<Element>>(badNodes, Priority.first(ChunkedFIFO.class).thenLocally(LIFO.class));\n\n        for(int i = 0; i < computation.getNumTasks(); i++) {\n            GaloisSCJProcess<GNode<Element>> process = new GaloisSCJProcess<GNode<Element>>(computation, i){\n\n                @Override\n                protected void body(GNode<Element> item,\n                        ForeachContext<GNode<Element>> ctx) {\n                    if (!mesh.contains(item, MethodFlag.CHECK_CONFLICT)) {\n                        WorkNotUsefulException.throwException();\n                    }\n                    Cavity cavity = new Cavity(mesh);\n                    cavity.initialize(item);\n                    cavity.build();\n                    cavity.update();\n                    //remove the old data\n                    List<GNode<Element>> preNodes = cavity.getPre().getNodes();\n                    for (int i = 0; i < preNodes.size(); i++) {\n                        mesh.remove(preNodes.get(i), MethodFlag.NONE);\n                    }\n                    //add new data\n                    Subgraph postSubgraph = cavity.getPost();\n                    List<GNode<Element>> postNodes = postSubgraph.getNodes();\n                    for (int i = 0; i < postNodes.size(); i++) {\n                        GNode<Element> node = postNodes.get(i);\n                        mesh.add(node, MethodFlag.NONE);\n                        Element element = node.getData(MethodFlag.NONE);\n                        if (element.isBad()) {\n                            ctx.add(node, MethodFlag.NONE);\n                        }\n                    }\n                    List<ObjectUndirectedEdge<Element, Element.Edge>> postEdges = postSubgraph.getEdges();\n                    for (int i = 0; i < postEdges.size(); i++) {\n                        ObjectUndirectedEdge<Element, Element.Edge> edge = postEdges.get(i);\n                        boolean ret = mesh.addEdge(edge.getSrc(), edge.getDst(), edge.getData(), MethodFlag.NONE);\n                        assert ret;\n                    }\n                    if (mesh.contains(item, MethodFlag.NONE)) {\n                        ctx.add(item, MethodFlag.NONE);\n                    }\n                }\n\n            };\n\n            Task<Void> procTask = new Task<Void>();\n            process.scjTask_process(procTask);\n        }       \n    }\n\n    private void verify(ObjectGraph<Element, Element.Edge> result) {\n        if (!Mesh.verify(result)) {\n            throw new IllegalStateException(\"refinement failed.\");\n        }\n        int size = Mesh.getBad(result).size();\n        if (size != 0) {\n            throw new IllegalStateException(\"refinement failed\\n\" + \"still have \" + size + \" bad triangles left.\\n\");\n        }\n        System.out.println(\"Refinement OK\");\n    }\n\n    public static void main(String[] args) throws Exception {\n        new SCJMain().run(args);\n    }\n}<｜fim▁end｜>",
    "response": "        final MorphGraph.ObjectGraphBuilder builder = new MorphGraph.ObjectGraphBuilder();\n        final ObjectGraph<Element, Element.Edge> mesh = builder.backedByVector(true).create();\n        new Mesh().read(mesh, args[0]);\n        Collection<GNode<Element>> badNodes = Mesh.getBad(mesh);\n\n        if (Launcher.getLauncher().isFirstRun()) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package bjmi.derivedresources.folder;\n\nimport org.eclipse.core.resources.IResource;\nimport org.eclipse.core.resources.IResourceVisitor;\nimport org.eclipse.core.runtime.CoreException;\nimport org.eclipse.core.runtime.IStatus;\n\nfinal class CancelableVisitor extends ForwardingResourceVisitor {\n\n  private IStatus status;\n\n  public CancelableVisitor(final IResourceVisitor delegate) {\n    super(delegate);\n  }\n\n  public void cancelWith(final IStatus status) {\n    this.status = status;\n  }\n<｜fim▁hole｜>  public String toString() {\n    return getClass().getSimpleName();\n  }\n\n  @Override\n  public boolean visit(final IResource resource) throws CoreException {\n    if (status != null) {\n      throw new CoreException(status);\n    }\n    return delegate.visit(resource);\n  }\n\n}<｜fim▁end｜>",
    "response": "\n  @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.koushikdutta.async.http.libcore;\n\nimport java.io.FileDescriptor;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\n\npublic final class Memory {\n    private Memory() { }\n\n    public static int peekInt(byte[] src, int offset, ByteOrder order) {\n        if (order == ByteOrder.BIG_ENDIAN) {\n            return (((src[offset++] & 0xff) << 24) |\n                    ((src[offset++] & 0xff) << 16) |\n                    ((src[offset++] & 0xff) <<  8) |\n                    ((src[offset  ] & 0xff) <<  0));\n        } else {\n            return (((src[offset++] & 0xff) <<  0) |\n                    ((src[offset++] & 0xff) <<  8) |\n                    ((src[offset++] & 0xff) << 16) |\n                    ((src[offset  ] & 0xff) << 24));\n        }\n    }\n\n    public static long peekLong(byte[] src, int offset, ByteOrder order) {\n        if (order == ByteOrder.BIG_ENDIAN) {\n            int h = ((src[offset++] & 0xff) << 24) |\n<｜fim▁hole｜>                    ((src[offset++] & 0xff) <<  0);\n            int l = ((src[offset++] & 0xff) << 24) |\n                    ((src[offset++] & 0xff) << 16) |\n                    ((src[offset++] & 0xff) <<  8) |\n                    ((src[offset  ] & 0xff) <<  0);\n            return (((long) h) << 32L) | ((long) l) & 0xffffffffL;\n        } else {\n            int l = ((src[offset++] & 0xff) <<  0) |\n                    ((src[offset++] & 0xff) <<  8) |\n                    ((src[offset++] & 0xff) << 16) |\n                    ((src[offset++] & 0xff) << 24);\n            int h = ((src[offset++] & 0xff) <<  0) |\n                    ((src[offset++] & 0xff) <<  8) |\n                    ((src[offset++] & 0xff) << 16) |\n                    ((src[offset  ] & 0xff) << 24);\n            return (((long) h) << 32L) | ((long) l) & 0xffffffffL;\n        }\n    }\n\n    public static short peekShort(byte[] src, int offset, ByteOrder order) {\n        if (order == ByteOrder.BIG_ENDIAN) {\n            return (short) ((src[offset] << 8) | (src[offset + 1] & 0xff));\n        } else {\n            return (short) ((src[offset + 1] << 8) | (src[offset] & 0xff));\n        }\n    }\n\n    public static void pokeInt(byte[] dst, int offset, int value, ByteOrder order) {\n        if (order == ByteOrder.BIG_ENDIAN) {\n            dst[offset++] = (byte) ((value >> 24) & 0xff);\n            dst[offset++] = (byte) ((value >> 16) & 0xff);\n            dst[offset++] = (byte) ((value >>  8) & 0xff);\n            dst[offset  ] = (byte) ((value >>  0) & 0xff);\n        } else {\n            dst[offset++] = (byte) ((value >>  0) & 0xff);\n            dst[offset++] = (byte) ((value >>  8) & 0xff);\n            dst[offset++] = (byte) ((value >> 16) & 0xff);\n            dst[offset  ] = (byte) ((value >> 24) & 0xff);\n        }\n    }\n\n    public static void pokeLong(byte[] dst, int offset, long value, ByteOrder order) {\n        if (order == ByteOrder.BIG_ENDIAN) {\n            int i = (int) (value >> 32);\n            dst[offset++] = (byte) ((i >> 24) & 0xff);\n            dst[offset++] = (byte) ((i >> 16) & 0xff);\n            dst[offset++] = (byte) ((i >>  8) & 0xff);\n            dst[offset++] = (byte) ((i >>  0) & 0xff);\n            i = (int) value;\n            dst[offset++] = (byte) ((i >> 24) & 0xff);\n            dst[offset++] = (byte) ((i >> 16) & 0xff);\n            dst[offset++] = (byte) ((i >>  8) & 0xff);\n            dst[offset  ] = (byte) ((i >>  0) & 0xff);\n        } else {\n            int i = (int) value;\n            dst[offset++] = (byte) ((i >>  0) & 0xff);\n            dst[offset++] = (byte) ((i >>  8) & 0xff);\n            dst[offset++] = (byte) ((i >> 16) & 0xff);\n            dst[offset++] = (byte) ((i >> 24) & 0xff);\n            i = (int) (value >> 32);\n            dst[offset++] = (byte) ((i >>  0) & 0xff);\n            dst[offset++] = (byte) ((i >>  8) & 0xff);\n            dst[offset++] = (byte) ((i >> 16) & 0xff);\n            dst[offset  ] = (byte) ((i >> 24) & 0xff);\n        }\n    }\n\n    public static void pokeShort(byte[] dst, int offset, short value, ByteOrder order) {\n        if (order == ByteOrder.BIG_ENDIAN) {\n            dst[offset++] = (byte) ((value >> 8) & 0xff);\n            dst[offset  ] = (byte) ((value >> 0) & 0xff);\n        } else {\n            dst[offset++] = (byte) ((value >> 0) & 0xff);\n            dst[offset  ] = (byte) ((value >> 8) & 0xff);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "                    ((src[offset++] & 0xff) << 16) |\n                    ((src[offset++] & 0xff) <<  8) |\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.kylin.job.common;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.hadoop.mapreduce.Counters;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.TaskCounter;\nimport org.apache.kylin.job.constant.ExecutableConstants;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class HadoopCmdOutput {\n\n    protected static final Logger log = LoggerFactory.getLogger(HadoopCmdOutput.class);\n\n    private final StringBuilder output;\n    private final Job job;\n\n    public HadoopCmdOutput(Job job, StringBuilder output) {\n        super();\n        this.job = job;\n        this.output = output;\n    }\n\n    public String getMrJobId() {\n        return getInfo().get(ExecutableConstants.MR_JOB_ID);\n    }\n\n    public Map<String, String> getInfo() {\n        if (job != null) {\n            Map<String, String> status = new HashMap<String, String>();\n            if (null != job.getJobID()) {\n                status.put(ExecutableConstants.MR_JOB_ID, job.getJobID().toString());\n            }\n            if (null != job.getTrackingURL()) {\n                status.put(ExecutableConstants.YARN_APP_URL, job.getTrackingURL().toString());\n            }\n            return status;\n        } else {\n            return Collections.emptyMap();\n        }\n    }\n\n<｜fim▁hole｜>    public String getMapInputRecords() {\n        return mapInputRecords;\n    }\n\n    public String getHdfsBytesWritten() {\n        return hdfsBytesWritten;\n    }\n\n    public String getHdfsBytesRead() {\n        return hdfsBytesRead;\n    }\n\n    public void updateJobCounter() {\n        try {\n            Counters counters = job.getCounters();\n            if (counters == null) {\n                String errorMsg = \"no counters for job \" + getMrJobId();\n                log.warn(errorMsg);\n                output.append(errorMsg);\n                return;\n            }\n            this.output.append(counters.toString()).append(\"\\n\");\n            log.debug(counters.toString());\n\n            mapInputRecords = String.valueOf(counters.findCounter(TaskCounter.MAP_INPUT_RECORDS).getValue());\n            hdfsBytesWritten = String.valueOf(counters.findCounter(\"FileSystemCounters\", \"HDFS_BYTES_WRITTEN\").getValue());\n            hdfsBytesRead = String.valueOf(counters.findCounter(\"FileSystemCounters\", \"HDFS_BYTES_READ\").getValue());\n        } catch (Exception e) {\n            log.error(e.getLocalizedMessage(), e);\n            output.append(e.getLocalizedMessage());\n\n            mapInputRecords = \"0\";\n            hdfsBytesWritten = \"0\";\n            hdfsBytesRead = \"0\";\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "    private String mapInputRecords;\n    private String hdfsBytesWritten;\n    private String hdfsBytesRead;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package scala.tools.eclipse.contribution.weaving.jdt.ui.javaeditor.formatter;\n\nimport scala.tools.eclipse.contribution.weaving.jdt.util.AbstractProviderRegistry;\n\npublic class FormatterCleanUpRegistry extends AbstractProviderRegistry<IFormatterCleanUpProvider> {\n\n  public static String FORMATTER_CLEAN_UP_PROVIDERS_EXTENSION_POINT = \"org.scala-ide.sdt.aspects.formatterCleanUp\"; //$NON-NLS-1$\n\n  private static final FormatterCleanUpRegistry INSTANCE = new FormatterCleanUpRegistry();\n\n<｜fim▁hole｜>    return INSTANCE;\n  }\n\n  @Override\n  protected String getExtensionPointId() {\n    return FORMATTER_CLEAN_UP_PROVIDERS_EXTENSION_POINT;\n  }\n}<｜fim▁end｜>",
    "response": "  public static FormatterCleanUpRegistry getInstance() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.alibaba.nacos.core.distributed.distro.task.verify;\n\nimport com.alibaba.nacos.common.task.AbstractExecuteTask;\nimport com.alibaba.nacos.core.distributed.distro.component.DistroCallback;\nimport com.alibaba.nacos.core.distributed.distro.component.DistroTransportAgent;\nimport com.alibaba.nacos.core.distributed.distro.entity.DistroData;\nimport com.alibaba.nacos.core.distributed.distro.monitor.DistroRecord;\nimport com.alibaba.nacos.core.distributed.distro.monitor.DistroRecordsHolder;\nimport com.alibaba.nacos.core.utils.Loggers;\n\nimport java.util.List;\n\npublic class DistroVerifyExecuteTask extends AbstractExecuteTask {\n\n    private final DistroTransportAgent transportAgent;\n\n<｜fim▁hole｜>    private final String targetServer;\n\n    private final String resourceType;\n\n    public DistroVerifyExecuteTask(DistroTransportAgent transportAgent, List<DistroData> verifyData,\n            String targetServer, String resourceType) {\n        this.transportAgent = transportAgent;\n        this.verifyData = verifyData;\n        this.targetServer = targetServer;\n        this.resourceType = resourceType;\n    }\n\n    @Override\n    public void run() {\n        for (DistroData each : verifyData) {\n            try {\n                if (transportAgent.supportCallbackTransport()) {\n                    doSyncVerifyDataWithCallback(each);\n                } else {\n                    doSyncVerifyData(each);\n                }\n            } catch (Exception e) {\n                Loggers.DISTRO\n                        .error(\"[DISTRO-FAILED] verify data for type {} to {} failed.\", resourceType, targetServer, e);\n            }\n        }\n    }\n\n    private void doSyncVerifyDataWithCallback(DistroData data) {\n        transportAgent.syncVerifyData(data, targetServer, new DistroVerifyCallback());\n    }\n\n    private void doSyncVerifyData(DistroData data) {\n        transportAgent.syncVerifyData(data, targetServer);\n    }\n\n    private class DistroVerifyCallback implements DistroCallback {\n\n        @Override\n        public void onSuccess() {\n            if (Loggers.DISTRO.isDebugEnabled()) {\n                Loggers.DISTRO.debug(\"[DISTRO] verify data for type {} to {} success\", resourceType, targetServer);\n            }\n        }\n\n        @Override\n        public void onFailed(Throwable throwable) {\n            DistroRecord distroRecord = DistroRecordsHolder.getInstance().getRecord(resourceType);\n            distroRecord.verifyFail();\n            if (Loggers.DISTRO.isDebugEnabled()) {\n                Loggers.DISTRO\n                        .debug(\"[DISTRO-FAILED] verify data for type {} to {} failed.\", resourceType, targetServer,\n                                throwable);\n            }\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    private final List<DistroData> verifyData;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package bank.ui.graphic.action;\n\nimport java.awt.event.ActionEvent;\nimport java.awt.event.KeyEvent;\n\nimport javax.swing.Action;\nimport javax.swing.JOptionPane;\nimport javax.swing.KeyStroke;\n\nimport bank.ui.TextManager;\nimport bank.ui.graphic.BankGraphicInterface;\n\npublic class LogoutAction extends BankAction {\n\n    private static final long serialVersionUID = 5090183202921964451L;\n\n    public LogoutAction(BankGraphicInterface bankInterface,\n            TextManager textManager) {\n        super(bankInterface, textManager);\n\n        super.putValue(Action.ACCELERATOR_KEY,\n                KeyStroke.getKeyStroke(KeyEvent.VK_C, ActionEvent.CTRL_MASK));\n<｜fim▁hole｜>    @Override\n    public void execute() throws Exception {\n        int answer = JOptionPane.showConfirmDialog(bankInterface.getFrame()\n                .getContentPane(), textManager\n                .getText(\"message.confirm.cancel\"), bankInterface.getFrame()\n                .getTitle(), JOptionPane.WARNING_MESSAGE);\n\n        if (JOptionPane.YES_OPTION == answer) {\n            bankInterface.logout();\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "        super.putValue(Action.NAME, textManager.getText(\"action.logout\"));\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package uk.me.krupa.wwa.config;\n\nimport org.springframework.beans.factory.config.PropertyPlaceholderConfigurer;\nimport org.springframework.context.MessageSource;\nimport org.springframework.context.annotation.*;\nimport org.springframework.context.support.ResourceBundleMessageSource;\nimport org.springframework.core.io.FileSystemResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.data.neo4j.aspects.support.node.Neo4jNodeBacking;\nimport org.springframework.data.neo4j.aspects.support.relationship.Neo4jRelationshipBacking;\nimport org.springframework.web.servlet.config.annotation.EnableWebMvc;\nimport uk.me.krupa.wwa.entity.EntityConfig;\nimport uk.me.krupa.wwa.fgs.FgsConfig;\nimport uk.me.krupa.wwa.lifecycle.LifecycleConfig;\nimport uk.me.krupa.wwa.repository.RepositoryConfig;\nimport uk.me.krupa.wwa.service.ServiceConfig;\nimport uk.me.krupa.wwa.ui.controller.ControllerConfig;\nimport uk.me.krupa.wwa.ui.security.SecurityConfig;\nimport uk.me.krupa.wwa.ui.security.SpringSocialConfig;\nimport uk.me.krupa.wwa.ui.sockets.WebSocketConfig;\n\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport java.io.File;\n\n@Configuration\n@Import({\n        EntityConfig.class,\n        RepositoryConfig.class,\n        ControllerConfig.class,\n        SecurityConfig.class,\n        FgsConfig.class,\n        ServiceConfig.class,\n        SpringSocialConfig.class,\n        WebSocketConfig.class,\n        LifecycleConfig.class\n})\n@PropertySource(\"file:${java:global/wwa/config/dir}/wwa.properties\")\n@EnableAspectJAutoProxy\n@EnableLoadTimeWeaving(aspectjWeaving = EnableLoadTimeWeaving.AspectJWeaving.ENABLED)\n@EnableWebMvc\npublic class MasterConfig {\n<｜fim▁hole｜>    }\n\n    @Bean\n    public Neo4jRelationshipBacking neo4jRelationshipBacking() {\n        return new Neo4jRelationshipBacking();\n    }\n\n    @Bean(name = \"applicationProperties\")\n    public PropertyPlaceholderConfigurer propertyPlaceholderConfigurer() throws NamingException {\n        PropertyPlaceholderConfigurer placeholderConfigurer = new PropertyPlaceholderConfigurer();\n        final String configDir = (String) new InitialContext().lookup(\"java:global/wwa/config/dir\");\n        placeholderConfigurer.setLocations(new Resource[] {\n                new FileSystemResource(new File(new File(configDir), \"wwa.properties\"))\n        });\n        return placeholderConfigurer;\n    }\n\n    @Bean(name = \"springMessages\")\n    public MessageSource messageSource() {\n        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n        messageSource.setBasename(\"/uk/me/krupa/wwa/ui/messages\");\n        messageSource.setUseCodeAsDefaultMessage(true);\n        return messageSource;\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    @Bean\n    public Neo4jNodeBacking neo4jNodeBacking() {\n        return new Neo4jNodeBacking();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package utils;\n\nimport org.elasticsearch.common.io.Streams;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\n<｜fim▁hole｜>import java.util.Base64;\n\nfinal public class Base64Utils {\n\n    public static byte[] encodeToBase64(Path path) throws IOException {\n        Base64.Encoder encoder = Base64.getEncoder();\n        InputStream buffer1 = Files.newInputStream(path);\n        long size = Files.size(path);\n        byte[] bytes = new byte[Long.valueOf(size).intValue()];\n\n        Streams.readFully(buffer1, bytes);\n        return encoder.encode(bytes);\n    }\n\n    public static byte[] decodeToBytes(String base64String) throws IOException {\n        Base64.Decoder decoder = Base64.getDecoder();\n        return decoder.decode(base64String);\n    }\n\n    public static String decodeToString(String base64String) throws IOException {\n        return new String(decodeToBytes(base64String));\n    }\n\n    public static void main(String[] args) throws IOException {\n        Path path = Paths.get(\"/home/lyz/workspace/elasticsearch-definitive-guide-cn/010_Intro/05_What_is_it.md\");\n        String base64str = new String(encodeToBase64(path));\n\n        System.out.println(base64str);\n\n        byte[] output = decodeToBytes(base64str);\n        System.out.println(new String(output));\n\n    }\n\n}<｜fim▁end｜>",
    "response": "import java.nio.file.Paths;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ayizan.support.zeromq;\n\nimport ayizan.message.Messages.Packet;\nimport ayizan.message.Messages.PacketOrBuilder;\nimport org.zeromq.ZMQ;\n\nimport java.io.Closeable;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\n\nimport static ayizan.util.Exceptions.swallow;\n\npublic class ZmqConnector implements Closeable\n{\n    private static final byte[] ALL_TOPICS = new byte[0];\n    private static final int MAX_FRAME_SIZE = 1500;\n\n    private final ZMQ.Context context;\n\n    //TODO: pass in network configuration & wait policy\n    public ZmqConnector()\n    {\n        this.context = ZMQ.context(1);\n    }\n\n    public Subscription subscribe(final ZmqTopic topic)\n    {\n        final ZMQ.Socket socket = context.socket(ZMQ.SUB);\n        socket.bind(topic.getUri());\n        socket.subscribe(ALL_TOPICS);\n        return new Subscription(socket);\n    }\n\n    public Publication publish(final ZmqTopic topic)\n    {\n        final ZMQ.Socket socket = context.socket(ZMQ.PUB);\n        socket.connect(topic.getUri());\n        return new Publication(socket);\n    }\n\n    @Override\n    public void close() throws IOException\n    {\n        //TODO: close all open publications & subscriptions\n        context.term();\n    }\n\n    public static class Subscription implements Closeable\n    {\n        private final ZMQ.Socket socket;\n        private final Packet.Builder packet;\n        private final byte[] buffer;\n\n        public interface Notifier\n        {\n            boolean next(PacketOrBuilder packet);\n        }\n\n        private Subscription(final ZMQ.Socket socket)\n        {\n            this.buffer = new byte[MAX_FRAME_SIZE];\n            this.packet = Packet.newBuilder();\n            this.socket = socket;\n        }\n\n        public void receive(final Notifier notifier) throws IOException\n        {\n            int waitPolicy = 0;\n            do {\n                final int length = socket.recv(buffer, 0, MAX_FRAME_SIZE, waitPolicy);\n                if(length <= 0) break;\n                else {\n                    try {\n                        packet.mergeFrom(buffer, 0, length);\n                        waitPolicy = ZMQ.DONTWAIT;\n                    }\n                    catch(final Throwable throwable) {\n                        swallow(throwable);\n                        break;\n                    }\n                }\n            }\n<｜fim▁hole｜>        {\n            socket.close();\n        }\n    }\n\n    public static class Publication implements Closeable\n    {\n        private final ZMQ.Socket socket;\n        private final ByteBuffer buffer;\n\n        public Publication(final ZMQ.Socket socket)\n        {\n            this.buffer = ByteBuffer.allocate(MAX_FRAME_SIZE);\n            this.socket = socket;\n        }\n\n        public void publish(final Packet.Builder packet)\n        {\n            packet.build().toByteString().copyTo((ByteBuffer) buffer.clear());\n            //socket.sendZeroCopy(buffer, buffer.position(), 0); //Requires DirectByteBuffer\n            socket.send(buffer.array(), buffer.arrayOffset(), buffer.position(), 0);\n        }\n\n        @Override\n        public void close() throws IOException\n        {\n            socket.close();\n        }\n    }\n}<｜fim▁end｜>",
    "response": "            while(notifier.next(packet));\n        }\n\n        @Override\n        public void close() throws IOException\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.java.sip.communicator.impl.notification;\n\nimport static net.java.sip.communicator.service.notification.LogMessageNotificationAction.ERROR_LOG_TYPE;\nimport static net.java.sip.communicator.service.notification.LogMessageNotificationAction.INFO_LOG_TYPE;\nimport static net.java.sip.communicator.service.notification.LogMessageNotificationAction.TRACE_LOG_TYPE;\nimport net.java.sip.communicator.service.notification.*;\nimport net.java.sip.communicator.util.*;\n\npublic class LogMessageNotificationHandlerImpl\n    implements LogMessageNotificationHandler\n{\n    /**\n     * The logger that will be used to log messages.\n     */\n<｜fim▁hole｜>        = Logger.getLogger(LogMessageNotificationHandlerImpl.class);\n\n    /**\n     * {@inheritDoc}\n     */\n    public String getActionType()\n    {\n        return NotificationAction.ACTION_LOG_MESSAGE;\n    }\n\n    /**\n     * Logs a message through the sip communicator Logger.\n     *\n     * @param action the action to act upon\n     * @param message the message coming from the event\n     */\n    public void logMessage(LogMessageNotificationAction action, String message)\n    {\n        if (action.getLogType().equals(ERROR_LOG_TYPE))\n            logger.error(message);\n        else if(action.getLogType().equals(INFO_LOG_TYPE))\n            logger.info(message);\n        else if(action.getLogType().equals(TRACE_LOG_TYPE))\n            logger.trace(message);\n    }\n}<｜fim▁end｜>",
    "response": "    private Logger logger\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.sun.corba.se.PortableActivationIDL;\n\npublic final class NoSuchEndPointHolder implements org.omg.CORBA.portable.Streamable\n{\n  public com.sun.corba.se.PortableActivationIDL.NoSuchEndPoint value = null;\n\n  public NoSuchEndPointHolder ()\n  {\n  }\n\n  public NoSuchEndPointHolder (com.sun.corba.se.PortableActivationIDL.NoSuchEndPoint initialValue)\n  {\n    value = initialValue;\n  }\n\n  public void _read (org.omg.CORBA.portable.InputStream i)\n  {\n<｜fim▁hole｜>  }\n\n  public org.omg.CORBA.TypeCode _type ()\n  {\n    return com.sun.corba.se.PortableActivationIDL.NoSuchEndPointHelper.type ();\n  }\n\n}<｜fim▁end｜>",
    "response": "    value = com.sun.corba.se.PortableActivationIDL.NoSuchEndPointHelper.read (i);\n  }\n\n  public void _write (org.omg.CORBA.portable.OutputStream o)\n  {\n    com.sun.corba.se.PortableActivationIDL.NoSuchEndPointHelper.write (o, value);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package adams.data.conversion;\n\nimport junit.framework.Test;\nimport junit.framework.TestSuite;\nimport adams.env.Environment;\nimport adams.flow.container.SequencePlotterContainer;\n\npublic class ContainerToSpreadSheetTest\n  extends AbstractConversionTestCase {\n\n  /**\n   * Constructs the test case. Called by subclasses.\n   *\n<｜fim▁hole｜>  public ContainerToSpreadSheetTest(String name) {\n    super(name);\n  }\n\n  /**\n   * Returns the input data to use in the regression test.\n   *\n   * @return        the objects\n   */\n  @Override\n  protected Object[] getRegressionInput() {\n    SequencePlotterContainer[]  result;\n\n    result    = new SequencePlotterContainer[3];\n    result[0] = new SequencePlotterContainer();\n    result[1] = new SequencePlotterContainer(1.0, 2.0);\n    result[2] = new SequencePlotterContainer(\"blah\", 2.0, 3.0);\n\n    return result;\n  }\n\n  /**\n   * Returns the setups to use in the regression test.\n   *\n   * @return        the setups\n   */\n  @Override\n  protected Conversion[] getRegressionSetups() {\n    ContainerToSpreadSheet[]    result;\n\n    result = new ContainerToSpreadSheet[1];\n    result[0] = new ContainerToSpreadSheet();\n\n    return result;\n  }\n\n  /**\n   * Returns the ignored line indices to use in the regression test.\n   *\n   * @return        the setups\n   */\n  @Override\n  protected int[] getRegressionIgnoredLineIndices() {\n    return new int[0];\n  }\n\n  /**\n   * Returns the test suite.\n   *\n   * @return        the suite\n   */\n  public static Test suite() {\n    return new TestSuite(ContainerToSpreadSheetTest.class);\n  }\n\n  /**\n   * Runs the test from commandline.\n   *\n   * @param args    ignored\n   */\n  public static void main(String[] args) {\n    Environment.setEnvironmentClass(Environment.class);\n    runTest(suite());\n  }\n}<｜fim▁end｜>",
    "response": "   * @param name    the name of the test\n   */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.beanu.l2_recycleview.demo.support;\n\nimport android.content.Context;\nimport android.support.v4.view.PagerAdapter;\nimport android.text.TextUtils;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.Toast;\n\nimport com.bumptech.glide.Glide;\n\nimport java.util.List;\n\npublic class ViewPagerImageAdapter extends PagerAdapter {\n    private List<IndexImage> indexImages;\n    private Context mContext;\n\n    public ViewPagerImageAdapter(Context context, List<IndexImage> indexImages) {\n        this.indexImages = indexImages;\n        mContext = context;\n    }\n\n    @Override\n    public int getCount() {\n        return indexImages == null ? 0 : indexImages.size();\n    }\n\n    @Override\n    public boolean isViewFromObject(View view, Object object) {\n        return view == object;\n    }\n\n    @Override\n    public Object instantiateItem(ViewGroup container, final int position) {\n\n        LinearLayout linearLayout = new LinearLayout(mContext);\n        linearLayout.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));\n        ImageView iv = new ImageView(mContext);\n\n        if (!TextUtils.isEmpty(indexImages.get(position).getImgPath())) {\n            Glide.with(mContext).load(indexImages.get(position).getImgPath()).into(iv);\n        }\n        iv.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Toast.makeText(mContext, indexImages.get(position).getTitle(), Toast.LENGTH_SHORT).show();\n            }\n<｜fim▁hole｜>\n        linearLayout.addView(iv, LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT);\n        container.addView(linearLayout);\n        return linearLayout;\n    }\n\n    @Override\n    public void destroyItem(ViewGroup container, int position, Object object) {\n        container.removeView((ImageView) object);\n    }\n}<｜fim▁end｜>",
    "response": "        });\n\n        iv.setScaleType(ImageView.ScaleType.CENTER_CROP);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.pms.dlna;\n\nimport net.pms.dlna.virtual.VirtualFolder;\n\npublic class FolderLimitLevel extends VirtualFolder {\n    private int level;\n    private DLNAResource start;\n\n    public FolderLimitLevel(int level) {\n        super(\"Level \" + String.valueOf(level), null);\n        this.level = level;\n        this.start = null;\n    }\n\n    public int level() {\n        return level;\n    }\n\n    public void setStart(DLNAResource r) {\n        if (r.getParent() == null) {\n            start = r.clone();\n        } else {\n            start = r.getParent().clone();\n        }\n        resolve();\n    }\n\n    @Override\n    public void discoverChildren() {\n        if (start != null) {\n            addChild(start);\n        }\n<｜fim▁hole｜>    public synchronized void resolve() {\n        this.setDiscovered(false);\n        this.getChildren().clear();\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package tutorial.password_demo;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.Arrays;\n\npublic class PasswordDemo extends JPanel\n                          implements ActionListener {\n    private static String OK = \"ok\";\n    private static String HELP = \"help\";\n\n    private JFrame controllingFrame; //needed for dialogs\n    private JPasswordField passwordField;\n\n    public PasswordDemo(JFrame f) {\n        //Use the default FlowLayout.\n        controllingFrame = f;\n\n        //Create everything.\n        passwordField = new JPasswordField(10);\n        passwordField.setActionCommand(OK);\n        passwordField.addActionListener(this);\n\n        JLabel label = new JLabel(\"Enter the password: \");\n        label.setLabelFor(passwordField);\n\n        JComponent buttonPane = createButtonPanel();\n\n        //Lay out everything.\n        JPanel textPane = new JPanel(new FlowLayout(FlowLayout.TRAILING));\n        textPane.add(label);\n        textPane.add(passwordField);\n\n        add(textPane);\n        add(buttonPane);\n    }\n\n    protected JComponent createButtonPanel() {\n        JPanel p = new JPanel(new GridLayout(0,1));\n        JButton okButton = new JButton(\"OK\");\n        JButton helpButton = new JButton(\"Help\");\n\n        okButton.setActionCommand(OK);\n        helpButton.setActionCommand(HELP);\n        okButton.addActionListener(this);\n<｜fim▁hole｜>\n        return p;\n    }\n\n    public void actionPerformed(ActionEvent e) {\n        String cmd = e.getActionCommand();\n\n        if (OK.equals(cmd)) { //Process the password.\n            char[] input = passwordField.getPassword();\n            if (isPasswordCorrect(input)) {\n                JOptionPane.showMessageDialog(controllingFrame,\n                    \"Success! You typed the right password.\");\n            } else {\n                JOptionPane.showMessageDialog(controllingFrame,\n                    \"Invalid password. Try again.\",\n                    \"Error Message\",\n                    JOptionPane.ERROR_MESSAGE);\n            }\n\n            //Zero out the possible password, for security.\n            Arrays.fill(input, '0');\n\n            passwordField.selectAll();\n            resetFocus();\n        } else { //The user has asked for help.\n            JOptionPane.showMessageDialog(controllingFrame,\n                \"You can get the password by searching this example's\\n\"\n              + \"source code for the string \\\"correctPassword\\\".\\n\"\n              + \"Or look at the section How to Use Password Fields in\\n\"\n              + \"the components section of The Java Tutorial.\");\n        }\n    }\n\n    /**\n     * Checks the passed-in array against the correct password.\n     * After this method returns, you should invoke eraseArray\n     * on the passed-in array.\n     */\n    private static boolean isPasswordCorrect(char[] input) {\n        boolean isCorrect = true;\n        char[] correctPassword = { 'b', 'u', 'g', 'a', 'b', 'o', 'o' };\n\n        if (input.length != correctPassword.length) {\n            isCorrect = false;\n        } else {\n            isCorrect = Arrays.equals (input, correctPassword);\n        }\n\n        //Zero out the password.\n        Arrays.fill(correctPassword,'0');\n\n        return isCorrect;\n    }\n\n    //Must be called from the event dispatch thread.\n    protected void resetFocus() {\n        passwordField.requestFocusInWindow();\n    }\n\n    /**\n     * Create the GUI and show it.  For thread safety,\n     * this method should be invoked from the\n     * event dispatch thread.\n     */\n    private static void createAndShowGUI() {\n        //Create and set up the window.\n        JFrame frame = new JFrame(\"PasswordDemo\");\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\n        //Create and set up the content pane.\n        final PasswordDemo newContentPane = new PasswordDemo(frame);\n        newContentPane.setOpaque(true); //content panes must be opaque\n        frame.setContentPane(newContentPane);\n\n        //Make sure the focus goes to the right component\n        //whenever the frame is initially given the focus.\n        frame.addWindowListener(new WindowAdapter() {\n            public void windowActivated(WindowEvent e) {\n                newContentPane.resetFocus();\n            }\n        });\n\n        //Display the window.\n        frame.pack();\n        frame.setVisible(true);\n    }\n\n    public static void main() {\n        //Schedule a job for the event dispatch thread:\n        //creating and showing this application's GUI.\n        SwingUtilities.invokeLater(new Runnable() {\n            public void run() {\n                //Turn off metal's use of bold fonts\n        UIManager.put(\"swing.boldMetal\", Boolean.FALSE);\n        createAndShowGUI();\n            }\n        });\n    }\n}<｜fim▁end｜>",
    "response": "        helpButton.addActionListener(this);\n\n        p.add(okButton);\n        p.add(helpButton);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package oic.simulator.serviceprovider.view.dialogs;\n\nimport org.eclipse.jface.wizard.IWizardPage;\nimport org.eclipse.jface.wizard.WizardPage;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.events.ModifyEvent;\nimport org.eclipse.swt.events.ModifyListener;\nimport org.eclipse.swt.layout.GridData;\nimport org.eclipse.swt.layout.GridLayout;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Group;\nimport org.eclipse.swt.widgets.Label;\nimport org.eclipse.swt.widgets.Text;\n\nimport oic.simulator.serviceprovider.utils.Constants;\n\npublic class UpdateMultiInstanceCreationPropertiesPage extends WizardPage {\n\n    private Text   resNameTxt;\n    private Text   resTypeTxt;\n\n    private String resName;\n    private String resType;\n\n    protected UpdateMultiInstanceCreationPropertiesPage() {\n        super(\"Update Properties\");\n    }\n\n    @Override\n    public void createControl(Composite parent) {\n        setPageComplete(true);\n        setTitle(Constants.UPDATE_PROP_PAGE_TITLE);\n        setMessage(Constants.UPDATE_PROP_PAGE_MESSAGE);\n\n        Composite comp = new Composite(parent, SWT.NONE);\n        GridLayout gridLayout = new GridLayout();\n        comp.setLayout(gridLayout);\n        GridData gd = new GridData(SWT.FILL, SWT.FILL, true, true);\n        comp.setLayoutData(gd);\n\n        Group grp = new Group(comp, SWT.NONE);\n        gridLayout = new GridLayout(2, false);\n        grp.setLayout(gridLayout);\n        gd = new GridData(SWT.FILL, SWT.FILL, true, true);\n        grp.setLayoutData(gd);\n\n        Label resNameLbl = new Label(grp, SWT.NULL);\n        resNameLbl.setText(\"Resource Name\");\n        gd = new GridData();\n        gd.verticalIndent = 20;\n        resNameLbl.setLayoutData(gd);\n\n        resNameTxt = new Text(grp, SWT.BORDER);\n        resNameTxt.setFocus();\n        gd = new GridData();\n        gd.widthHint = 300;\n        gd.verticalIndent = 20;\n        resNameTxt.setLayoutData(gd);\n\n        Label resTypeLbl = new Label(grp, SWT.NULL);\n        resTypeLbl.setText(\"Resource Type\");\n        gd = new GridData();\n        gd.verticalIndent = 10;\n        resTypeLbl.setLayoutData(gd);\n\n        resTypeTxt = new Text(grp, SWT.BORDER);\n        gd = new GridData();\n        gd.widthHint = 300;\n        gd.verticalIndent = 10;\n        resTypeTxt.setLayoutData(gd);\n\n        Label descLbl = new Label(comp, SWT.NONE);\n        descLbl.setText(\"Description:\");\n        gd = new GridData();\n        descLbl.setLayoutData(gd);\n\n        final Text text = new Text(comp, SWT.MULTI | SWT.READ_ONLY | SWT.BORDER\n                | SWT.WRAP | SWT.V_SCROLL);\n        text.setText(\"All resource instances will be configured with the same resource name and type.\\n\"\n                + \"These properties can be changed later from properties view.\");\n        gd = new GridData(SWT.FILL, SWT.FILL, true, true);\n        text.setLayoutData(gd);\n\n        addUIListeners();\n\n        // Initialize data\n        if (resNameTxt.getText().length() < 1 && null != resName) {\n            resNameTxt.setText(resName);\n        }\n        if (resTypeTxt.getText().length() < 1 && null != resType) {\n            resTypeTxt.setText(resType);\n<｜fim▁hole｜>        setControl(comp);\n    }\n\n    private void addUIListeners() {\n        resNameTxt.addModifyListener(new ModifyListener() {\n            @Override\n            public void modifyText(ModifyEvent e) {\n                resName = resNameTxt.getText();\n                setPageComplete(isSelectionDone());\n            }\n        });\n\n        resTypeTxt.addModifyListener(new ModifyListener() {\n            @Override\n            public void modifyText(ModifyEvent e) {\n                resType = resTypeTxt.getText();\n                if (null == resType) {\n                    return;\n                }\n\n                setPageComplete(isSelectionDone());\n            }\n        });\n    }\n\n    @Override\n    public boolean canFlipToNextPage() {\n        return false;\n    }\n\n    public boolean isSelectionDone() {\n        boolean done = false;\n        if (null != resName && resName.trim().length() > 0 && null != resType\n                && resType.trim().length() > 0) {\n            done = true;\n        }\n        return done;\n    }\n\n    @Override\n    public IWizardPage getNextPage() {\n        return null;\n    }\n\n    public void setResName(String resName) {\n        if (null == resName) {\n            resName = \"\";\n        }\n\n        this.resName = resName;\n        if (null != resName && !resNameTxt.isDisposed())\n            resNameTxt.setText(resName);\n    }\n\n    public void setResType(String resType) {\n        if (null == resType) {\n            resType = \"\";\n        }\n\n        this.resType = resType;\n        if (null != resType && !resTypeTxt.isDisposed())\n            resTypeTxt.setText(resType);\n    }\n\n    public String getResName() {\n        return resName;\n    }\n\n    public String getResType() {\n        return resType;\n    }\n}<｜fim▁end｜>",
    "response": "        }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ummisco.gama.ui.viewers.html;\n\nimport java.net.MalformedURLException;\n\nimport org.eclipse.core.runtime.IProgressMonitor;\nimport org.eclipse.swt.SWT;\nimport org.eclipse.swt.browser.Browser;\nimport org.eclipse.swt.browser.ProgressEvent;\nimport org.eclipse.swt.browser.ProgressListener;\nimport org.eclipse.swt.events.SelectionAdapter;\n<｜fim▁hole｜>import org.eclipse.swt.widgets.ToolItem;\nimport org.eclipse.ui.IEditorInput;\nimport org.eclipse.ui.IEditorSite;\nimport org.eclipse.ui.PartInitException;\nimport org.eclipse.ui.ide.FileStoreEditorInput;\nimport org.eclipse.ui.part.EditorPart;\nimport org.eclipse.ui.part.FileEditorInput;\n\nimport msi.gama.common.interfaces.IGamaView;\nimport ummisco.gama.ui.utils.WebHelper;\nimport ummisco.gama.ui.views.toolbar.GamaToolbar2;\nimport ummisco.gama.ui.views.toolbar.GamaToolbarFactory;\nimport ummisco.gama.ui.views.toolbar.IToolbarDecoratedView;\n\npublic class HtmlViewer extends EditorPart implements IToolbarDecoratedView, IGamaView.Html {\n\n    Browser browser;\n    ToolItem back, forward, home;\n\n    public HtmlViewer() {}\n\n    @Override\n    public void doSave(final IProgressMonitor monitor) {}\n\n    @Override\n    public void doSaveAs() {}\n\n    @Override\n    public void init(final IEditorSite site, final IEditorInput in) throws PartInitException {\n        setSite(site);\n        setInput(in);\n        openInput();\n    }\n\n    private void openInput() {\n        if (browser == null)\n            return;\n        if (getEditorInput() instanceof FileEditorInput) {\n            final FileEditorInput input = (FileEditorInput) getEditorInput();\n            try {\n                this.setUrl(input.getURI().toURL().toString());\n            } catch (final MalformedURLException e) {\n                e.printStackTrace();\n            }\n        } else if (getEditorInput() instanceof FileStoreEditorInput) {\n            final FileStoreEditorInput input = (FileStoreEditorInput) getEditorInput();\n            try {\n                this.setUrl(input.getURI().toURL().toString());\n            } catch (final MalformedURLException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            }\n        }\n    }\n\n    @Override\n    public boolean isDirty() {\n        return false;\n    }\n\n    @Override\n    public boolean isSaveAsAllowed() {\n        return false;\n    }\n\n    @Override\n    public void createPartControl(final Composite parent) {\n        final Composite compo = GamaToolbarFactory.createToolbars(this, parent);\n        browser = new Browser(compo, SWT.NONE);\n        browser.addProgressListener(new ProgressListener() {\n\n            @Override\n            public void changed(final ProgressEvent arg0) {}\n\n            @Override\n            public void completed(final ProgressEvent event) {\n                checkButtons();\n            }\n        });\n        parent.layout();\n        openInput();\n    }\n\n    @Override\n    public void setUrl(final String url) {\n        browser.setUrl(url);\n        this.setPartName(url.substring(url.lastIndexOf('/') + 1));\n        checkButtons();\n    }\n\n    /**\n     *\n     */\n    private void checkButtons() {\n        back.setEnabled(browser.isBackEnabled());\n        forward.setEnabled(browser.isForwardEnabled());\n    }\n\n    @Override\n    public void setFocus() {\n        browser.setFocus();\n    }\n\n    public Control getSizableFontControl() {\n        return browser;\n    }\n\n    /**\n     * Method createToolItem()\n     * \n     * @see ummisco.gama.ui.views.toolbar.IToolbarDecoratedView#createToolItem(int,\n     *      ummisco.gama.ui.views.toolbar.GamaToolbar2)\n     */\n    @Override\n    public void createToolItems(final GamaToolbar2 tb) {\n\n        back = tb.button(\"browser/back\", \"Back\", \"Go to previous page in history\", new SelectionAdapter() {\n\n            @Override\n            public void widgetSelected(final SelectionEvent e) {\n                browser.back();\n                checkButtons();\n            }\n\n        }, SWT.RIGHT);\n        home = tb.button(\"browser/home\", \"Home\", \"Go back to the welcome page\", new SelectionAdapter() {\n\n            @Override\n            public void widgetSelected(final SelectionEvent e) {\n                browser.setUrl(WebHelper.getWelcomePageURL().toString());\n                checkButtons();\n            }\n\n        }, SWT.RIGHT);\n        forward = tb.button(\"browser/forward\", \"Forward\", \"Go to next page in history\", new SelectionAdapter() {\n\n            @Override\n            public void widgetSelected(final SelectionEvent e) {\n                browser.forward();\n                checkButtons();\n            }\n\n        }, SWT.RIGHT);\n        tb.sep(GamaToolbarFactory.TOOLBAR_SEP, SWT.RIGHT);\n        tb.button(\"browser/refresh\", \"Refresh\", \"Refresh current page\", new SelectionAdapter() {\n\n            @Override\n            public void widgetSelected(final SelectionEvent e) {\n                browser.refresh();\n            }\n\n        }, SWT.RIGHT);\n        tb.button(\"browser/stop\", \"Stop\", \"Stop loading page\", new SelectionAdapter() {\n\n            @Override\n            public void widgetSelected(final SelectionEvent e) {\n                browser.stop();\n            }\n\n        }, SWT.RIGHT);\n\n    }\n\n}<｜fim▁end｜>",
    "response": "import org.eclipse.swt.events.SelectionEvent;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Control;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.camunda.bpm.engine.impl.incident;\n\npublic interface IncidentHandler {\n\n  /**\n   * Returns the incident type this handler activates for.\n   */\n  public String getIncidentHandlerType();\n\n  /**\n   * Handle an incident that arose in the context of an execution.\n   */\n  public void handleIncident(String processDefinitionId, String activityId, String executionId, String configuration, String message);\n\n  /**\n   * Resolve an incident that arose in the context of an execution.\n   */\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "  public void resolveIncident(String processDefinitionId, String activityId, String executionId, String configuration);\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.intellij.sh.editing;\n\nimport com.intellij.testFramework.LightPlatformCodeInsightTestCase;\nimport com.intellij.testFramework.fixtures.BasePlatformTestCase;\n\npublic class ShTypingTest extends BasePlatformTestCase {\n  // @formatter:off\n  public void testString()              { doTypingTest(\"<caret>\", \"\\\"\", \"\\\"<caret>\\\"\");         }\n  public void testRawString()           { doTypingTest(\"<caret>\", \"'\", \"'<caret>'\");            }\n  public void testBackQuote()           { doTypingTest(\"<caret>\", \"`\", \"`<caret>`\");            }\n\n  public void testStringBeforeFoo()     { doTypingTest(\"<caret>foo\", \"\\\"\", \"\\\"<caret>foo\");     }\n  public void testRawStringBeforeFoo()  { doTypingTest(\"<caret>foo\", \"'\", \"'<caret>foo\");       }\n  public void testBackQuoteBeforeFoo()  { doTypingTest(\"<caret>foo\", \"`\", \"`<caret>foo\");       }\n\n  public void testQuoteAfterFoo()      { doTypingTest(\"\\\"foo<caret>\", \"\\\"\", \"\\\"foo\\\"<caret>\");   }\n  public void testRawStringAfterFoo()  { doTypingTest(\"'foo<caret>\", \"'\", \"'foo'<caret>\");       }\n  public void testBackQuoteAfterFoo()  { doTypingTest(\"`foo<caret>\", \"`\", \"`foo`<caret>\");       }\n\n  public void testStringAfter()         { doTypingTest(\"\\\"<caret>\\\"\", \"\\\"\", \"\\\"\\\"<caret>\");     }\n  public void testRawStringAfter()      { doTypingTest(\"'<caret>'\", \"'\", \"''<caret>\");          }\n  public void testBackQuoteAfter()      { doTypingTest(\"`<caret>`\", \"`\", \"``<caret>\");          }\n<｜fim▁hole｜>  private void doTypingTest(String before, String forType, String after) {\n    myFixture.configureByText(\"a.sh\", before);\n    myFixture.type(forType);\n    myFixture.checkResult(after);\n  }\n\n  private void doBackspaceTest(String before, String after) {\n    myFixture.configureByText(\"a.sh\", before);\n    LightPlatformCodeInsightTestCase.backspace(myFixture.getEditor(), getProject());\n    myFixture.checkResult(after);\n  }\n}<｜fim▁end｜>",
    "response": "\n  public void testStringBackspace()     { doBackspaceTest(\"\\\"<caret>\\\"\", \"<caret>\");            }\n  public void testRawStringBackspace()  { doBackspaceTest(\"'<caret>'\", \"<caret>\");              }\n  public void testQuoteBackspace()      { doBackspaceTest(\"`<caret>`\", \"<caret>\");              }\n  // @formatter:on\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.ovirt.engine.core.vdsbroker.irsbroker;\n\nimport org.ovirt.engine.core.compat.*;\nimport org.ovirt.engine.core.common.asynctasks.*;\nimport org.ovirt.engine.core.common.vdscommands.*;\n\npublic class DestroyImageVDSCommand<P extends DestroyImageVDSCommandParameters> extends IrsCreateCommand<P> {\n<｜fim▁hole｜>        super(parameters);\n    }\n\n    @Override\n    protected void ExecuteIrsBrokerCommand() {\n        // LINQ 29456\n        // uuidReturn =\n        // IrsProxy.deleteVolume(DestroyParameters.StorageDomainId.toString(),\n        // DestroyParameters.StoragePoolId.ToString(),\n        // DestroyParameters.ImageGroupId.toString(),\n        // DestroyParameters.ImageList.Select(a=>a.ToString()).ToArray(),\n        // DestroyParameters.PostZero.ToString().ToLower());\n\n        DestroyImageVDSCommandParameters params = getParameters();\n        int imageListSize = params.getImageList().size();\n        String[] volUUID = new String[imageListSize];\n        int i = 0;\n        for (Guid tempGuid : params.getImageList()) {\n            volUUID[i++] = tempGuid.toString();\n        }\n\n        uuidReturn = getIrsProxy().deleteVolume(params.getStorageDomainId().toString(),\n                                                params.getStoragePoolId().toString(),\n                                                params.getImageGroupId().toString(),\n                                                volUUID,\n                                                String.valueOf(params.getPostZero()),\n                                                String.valueOf(params.getForce()));\n\n        // LINQ 29456\n        ProceedProxyReturnValue();\n\n        Guid taskID = new Guid(uuidReturn.mUuid);\n\n        getVDSReturnValue()\n                .setCreationInfo(\n                        new AsyncTaskCreationInfo(taskID, AsyncTaskType.deleteVolume, getParameters()\n                                .getStoragePoolId()));\n    }\n}<｜fim▁end｜>",
    "response": "\n    public DestroyImageVDSCommand(P parameters) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package eu.europa.esig.dss.asic.xades.signature.asice;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport java.util.Date;\n\nimport org.junit.jupiter.api.BeforeEach;\n\nimport eu.europa.esig.dss.asic.xades.ASiCWithXAdESSignatureParameters;\nimport eu.europa.esig.dss.asic.xades.signature.ASiCWithXAdESService;\nimport eu.europa.esig.dss.asic.xades.signature.AbstractASiCXAdESCounterSignatureTest;\nimport eu.europa.esig.dss.diagnostic.DiagnosticData;\nimport eu.europa.esig.dss.enumerations.ASiCContainerType;\nimport eu.europa.esig.dss.enumerations.SignatureLevel;\nimport eu.europa.esig.dss.model.DSSDocument;\nimport eu.europa.esig.dss.model.InMemoryDocument;\nimport eu.europa.esig.dss.model.MimeType;\nimport eu.europa.esig.dss.signature.CounterSignatureService;\nimport eu.europa.esig.dss.signature.DocumentSignatureService;\nimport eu.europa.esig.dss.xades.XAdESTimestampParameters;\nimport eu.europa.esig.dss.xades.signature.XAdESCounterSignatureParameters;\n\npublic class ASiCEXAdESCounterSignatureLevelLTATest extends AbstractASiCXAdESCounterSignatureTest {\n\n    private ASiCWithXAdESService service;\n    private DSSDocument documentToSign;\n<｜fim▁hole｜>    @BeforeEach\n    public void init() throws Exception {\n        service = new ASiCWithXAdESService(getCompleteCertificateVerifier());\n        service.setTspSource(getGoodTsa());\n        documentToSign = new InMemoryDocument(\"Hello World !\".getBytes(), \"test.text\", MimeType.TEXT);\n        signingDate = new Date();\n    }\n\n    @Override\n    protected ASiCWithXAdESSignatureParameters getSignatureParameters() {\n        ASiCWithXAdESSignatureParameters signatureParameters = new ASiCWithXAdESSignatureParameters();\n        signatureParameters.bLevel().setSigningDate(signingDate);\n        signatureParameters.setSigningCertificate(getSigningCert());\n        signatureParameters.setCertificateChain(getCertificateChain());\n        signatureParameters.setSignatureLevel(SignatureLevel.XAdES_BASELINE_LTA);\n        signatureParameters.aSiC().setContainerType(ASiCContainerType.ASiC_E);\n        return signatureParameters;\n    }\n\n    @Override\n    protected XAdESCounterSignatureParameters getCounterSignatureParameters() {\n        XAdESCounterSignatureParameters signatureParameters = new XAdESCounterSignatureParameters();\n        signatureParameters.bLevel().setSigningDate(signingDate);\n        signatureParameters.setSigningCertificate(getSigningCert());\n        signatureParameters.setCertificateChain(getCertificateChain());\n        signatureParameters.setSignatureLevel(SignatureLevel.XAdES_BASELINE_LTA);\n        return signatureParameters;\n    }\n\n    @Override\n    protected void checkSignatureLevel(DiagnosticData diagnosticData) {\n        super.checkSignatureLevel(diagnosticData);\n\n        assertEquals(2, diagnosticData.getSignatureIdList().size());\n        for (String signatureId : diagnosticData.getSignatureIdList()) {\n            assertEquals(SignatureLevel.XAdES_BASELINE_LTA, diagnosticData.getSignatureFormat(signatureId));\n        }\n    }\n\n    @Override\n    protected DSSDocument getDocumentToSign() {\n        return documentToSign;\n    }\n\n    @Override\n    protected DocumentSignatureService<ASiCWithXAdESSignatureParameters, XAdESTimestampParameters> getService() {\n        return service;\n    }\n\n    @Override\n    protected CounterSignatureService<XAdESCounterSignatureParameters> getCounterSignatureService() {\n        return service;\n    }\n\n    @Override\n    protected String getSigningAlias() {\n        return GOOD_USER;\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    private Date signingDate;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ed2.aa.database;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.RandomAccessFile;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.util.Random;\n\nimport ed2.aa.model.Autor;\nimport ed2.aa.model.Editora;\nimport ed2.aa.model.Livro;\n\npublic class Consulta{\n\n    public static Map<String,Integer> buscarModelo(String tabela){\n        // Modelos Disponíveis para Consulta\n        switch(tabela){\n            case \"autor\": return new Autor().getModelo();\n            case \"editora\": return new Editora().getModelo();\n            case \"livro\": return new Livro().getModelo();\n            default:\n                System.out.println(\"Tabela: \"+tabela+\"\\tModelo não reconhecido.\\nFinalizando execução do Programa.\");\n                System.exit(1);\n            }\n        return null;\n    }\n\n    // σ - sigma\n    public static File selecao(String tabela, String coluna, String comparacao){\n        if(tabela.isEmpty() || coluna.isEmpty()){\n            System.out.println(\"Parâmetros de Seleção não preenchidos corretamente.\");\n            System.out.println(\"Utilização: selecao(tabela,coluna,comparacao).\");\n            System.out.println(\"Finalizando execução do Programa.\");\n            System.exit(1);\n        }\n        try{\n            String t = tabela.toLowerCase();\n            int random = new Random().nextInt(3000);\n            Map<String,Integer> modelo = buscarModelo(t);\n            File arquivoEscrita = new File(\"select_\"+t+\"_\"+random+\".dat\");\n\n            // Verifica se a Key existe no modelo, caso contrário encerra a execução.\n            if(!modelo.containsKey(coluna) && coluna.compareTo(\"*\") != 0){\n                System.out.println(\"A Coluna informada não existe na Tabela.\");\n                System.out.println(\"Finalizando execução do Programa.\");\n                System.exit(1);\n            }\n\n            // Ler ''tabela.dat'', onde tabela é informada pelo Usuário\n            RandomAccessFile leitura = new RandomAccessFile(t+\".dat\",\"r\");\n            // Criar e inserir dados em ''select_tabela_(random)'', onde tabela é informada pelo Usuário\n            // e (random) é um inteiro aleatório gerado pelo sistema.\n            RandomAccessFile escrita = new RandomAccessFile(arquivoEscrita,\"rw\");\n\n            // Leitura do Arquivo Completo\n            while(leitura.getFilePointer() < leitura.length()){\n                // Ler uma linha inteira, em UTF\n                String linha = leitura.readUTF();\n                // Remover '/n' do final da String\n                linha = linha.substring(0, linha.length()-1);\n\n                // Separar Colunas do Arquivo\n                String[] colunas = linha.split(\"\\t\");\n\n                // Escrever no Arquivo todos os elementos da tabela\n                if(coluna.compareTo(\"*\") == 0){ escrita.writeUTF(linha); continue; }\n\n                // Acessar coluna correta do modelo\n                String valor = colunas[modelo.get(coluna)];\n\n                // Escrever no Arquivo elementos que na Coluna X, tenham valores iguais ao comparador.\n                if(comparacao.compareTo(valor) == 0){ escrita.writeUTF(linha); continue; }\n            }\n\n            // Caso atinja o final do arquivo, sem resultados\n            if((leitura.getFilePointer() == leitura.length()) && escrita.length() < 1){\n                System.out.println(\"O Registro não foi encontrado.\");\n            }\n\n            leitura.close();\n            escrita.close();\n            return arquivoEscrita;\n        }\n        catch (IOException e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n    // π - pi\n    public static File projecao(String tabela, ArrayList<String> colunas){\n        if(tabela.isEmpty() || colunas.size() < 1){\n            System.out.println(\"Parâmetros de Projeção não preenchidos corretamente.\");\n            System.out.println(\"Utilização: projecao(tabela,coluna).\");\n            System.out.println(\"Finalizando execução do Programa.\");\n            System.exit(1);\n        }\n        try{\n            String t = tabela.toLowerCase();\n            int random = new Random().nextInt(3000);\n            Map<String,Integer> modelo = null;\n            if(t.contains(\"select\") || t.contains(\"project\")){\n                String[] m = t.split(\"_\");\n                modelo = buscarModelo(m[1]);\n            } else {\n                modelo = buscarModelo(t);\n            }\n\n            File arquivoEscrita = new File(\"project_\"+t+\"_\"+random+\".dat\");\n\n            for(String c: colunas){\n                // Verifica se a Key existe no modelo, caso contrário encerra a execução.\n                if(!modelo.containsKey(c)){\n                    System.out.println(\"A Coluna informada não existe na Tabela.\");\n                    System.out.println(\"Finalizando execução do Programa.\");\n                    System.exit(1);\n                }\n            }\n\n            // Ler ''tabela.dat'', onde tabela é informada pelo Usuário\n            RandomAccessFile leitura = new RandomAccessFile(t+\".dat\",\"r\");\n            // Criar e inserir dados em ''select_tabela_(random)'', onde tabela é informada pelo Usuário\n            // e (random) é um inteiro aleatório gerado pelo sistema.\n            RandomAccessFile escrita = new RandomAccessFile(arquivoEscrita,\"rw\");\n\n            // Leitura do Arquivo Completo\n            while(leitura.getFilePointer() < leitura.length()){\n                // Ler uma linha inteira, em UTF\n                String linha = leitura.readUTF();\n                // Remover '/n' do final da String\n                linha = linha.substring(0, linha.length()-1);\n                // Separar Colunas do Arquivo\n                String[] colunasTabela = linha.split(\"\\t\");\n                // Acessar coluna correta do modelo\n                StringBuilder valores = new StringBuilder();\n                for(String c: colunas){\n                    valores.append(colunasTabela[modelo.get(c)]);\n                    valores.append(\"\\t\");\n                }\n                String valoresTratados = valores.toString();\n                valoresTratados = valoresTratados.substring(0, valoresTratados.length()-1);\n                // Escrever no Arquivo elementos que na Coluna X, tenham valores iguais ao comparador.\n                escrita.writeUTF(valoresTratados);\n            }\n\n            // TODO: Remover Duplicatas\n\n            leitura.close();\n            escrita.close();\n            return arquivoEscrita;\n        }\n        catch (IOException e){\n            e.printStackTrace();\n        }\n        return null;\n    }\n\n<｜fim▁hole｜>    public static RandomAccessFile uniao(){\n        return null;\n    }\n\n    // −\n    public static RandomAccessFile diferencaConjuntos(){\n        return null;\n    }\n\n    // ×\n    public static RandomAccessFile produtoCartesiano(){\n        return null;\n    }\n\n    // ρ - ro\n    public static RandomAccessFile renomeacao(){\n        return null;\n    }\n\n}<｜fim▁end｜>",
    "response": "    public static File NestedLoop(){\n        return null;\n    }\n\n    // ⋃\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package generics; /* Added by Eclipse.py */\n\nimport generics.coffee.*;\nimport java.util.*;\nimport net.mindview.util.*;\n\npublic class Generators {\n  public static <T> Collection<T>\n  fill(Collection<T> coll, Generator<T> gen, int n) {\n    for(int i = 0; i < n; i++)\n      coll.add(gen.next());\n    return coll;\n  } \n  public static void main(String[] args) {\n    Collection<Coffee> coffee = fill(\n      new ArrayList<Coffee>(), new CoffeeGenerator(), 4);\n    for(Coffee c : coffee)\n      System.out.println(c);\n<｜fim▁hole｜>      new ArrayList<Integer>(), new Fibonacci(), 12);\n    for(int i : fnumbers)\n      System.out.print(i + \", \");\n  }\n} /* Output:\nAmericano 0\nLatte 1\nAmericano 2\nMocha 3\n1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\n*///:~<｜fim▁end｜>",
    "response": "    Collection<Integer> fnumbers = fill(\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.xtuml.bp.core.test;\n\nimport org.eclipse.jface.action.Action;\nimport org.eclipse.jface.viewers.IStructuredSelection;\nimport org.eclipse.jface.viewers.TreeViewer;\nimport org.eclipse.swt.widgets.Display;\nimport org.eclipse.ui.IWorkbenchPage;\nimport org.eclipse.ui.PlatformUI;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.xtuml.bp.core.ImportedClass_c;\nimport org.xtuml.bp.core.Package_c;\nimport org.xtuml.bp.core.common.ClassQueryInterface_c;\nimport org.xtuml.bp.core.ui.Selection;\nimport org.xtuml.bp.core.ui.actions.GenericPackageAssignClassOnO_IOBJAction;\nimport org.xtuml.bp.test.TestUtil;\nimport org.xtuml.bp.test.common.BaseTest;\nimport org.xtuml.bp.test.common.CanvasTestUtils;\nimport org.xtuml.bp.test.common.OrderedRunner;\nimport org.xtuml.bp.test.common.TestingUtilities;\nimport org.xtuml.bp.ui.canvas.Cl_c;\nimport org.xtuml.bp.ui.canvas.test.CanvasTest;\nimport org.xtuml.bp.ui.explorer.ExplorerView;\n\n@RunWith(OrderedRunner.class)\npublic class AssignClassTestGenerics extends CanvasTest {\n<｜fim▁hole｜>    String test_id = null;\n    private static boolean generateResults = false;\n    private static boolean initialized = false;\n    static String workspace_path = \"\";\n\n    private static Selection selection = Selection.getInstance();\n\n    public AssignClassTestGenerics() {\n        super(\"Delete Test\", null);\n    }\n\n    protected String getResultName() {\n        return \"AssignClass\" + \"_\" + test_id;\n    }\n\n    @Before\n    public void setUp() throws Exception {\n        super.setUp();\n        Display d = Display.getCurrent();\n        while (d.readAndDispatch());\n        if (!initialized) {\n            loadProject(\"AssignClassTests\");\n            initialized = true;\n        }\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        super.tearDown();\n    }\n    public void setGenerateResults() {\n        try {\n            generateResults = true;\n            this.setUp();\n            this.testAssignClassWithOneSubsystem();\n            this.testCheckTableItemForAssignClass();\n        } catch (Exception e) {\n            System.out.println(\"Exception encountered by test result creator: \"\n                    + e);\n        }\n\n    }\n\n    public class Package_by_name_c implements ClassQueryInterface_c {\n        public boolean evaluate(Object candidate) {\n            Package_c selected = (Package_c) candidate;\n            return (selected.getName().equals(m_name));\n        }\n        public Package_by_name_c(String name) {\n            m_name = name;\n        }\n        private String m_name;\n    }\n    public void openTestPKGDiagram(String title) {\n        Package_c uut = Package_c.PackageInstance(modelRoot,\n                new Package_by_name_c(title));\n        assertNotNull(uut);\n        CanvasTestUtils.openCanvasEditor(uut);\n    }\n\n    @Test\n    public void testAssignClassWithOneSubsystem() {\n        test_id = \"1\";\n        ImportedClass_c ic = ImportedClass_c.ImportedClassInstance(modelRoot);\n        Cl_c.Clearselection();\n        Selection.getInstance().addToSelection(ic);\n        GenericPackageAssignClassOnO_IOBJAction aca = new GenericPackageAssignClassOnO_IOBJAction();\n        Action a = new Action() {\n        };\n        aca.setActivePart(a, PlatformUI.getWorkbench()\n                .getActiveWorkbenchWindow().getActivePage().getActivePart());\n        IStructuredSelection structuredSelection = (IStructuredSelection) Selection\n                .getInstance().getSelection();\n        TestUtil.okToDialog(2000);\n        aca .O_IOBJ_GenericPackageAssignClass(structuredSelection);\n\n    }\n    @Test\n    public void testCheckTableItemForAssignClass() {\n        test_id = \"2\";\n        BaseTest.ensureFolderExists(m_workspace_path\n                + \"actual_results/AssignClassTestGenerics\");\n        String actualResultFilePath = m_workspace_path\n                + \"actual_results/AssignClassTestGenerics/TableContent1.txt\";\n        ImportedClass_c ic = ImportedClass_c.ImportedClassInstance(modelRoot);\n        Cl_c.Clearselection();\n        Selection.getInstance().addToSelection(ic);\n        GenericPackageAssignClassOnO_IOBJAction aca = new GenericPackageAssignClassOnO_IOBJAction();\n        Action a = new Action() {\n        };\n        aca.setActivePart(a, PlatformUI.getWorkbench()\n                .getActiveWorkbenchWindow().getActivePage().getActivePart());\n        IStructuredSelection structuredSelection = (IStructuredSelection) Selection\n        .getInstance().getSelection();\n\n        TestUtil.checkTableItems(2000, 0, false, actualResultFilePath  );\n        aca .O_IOBJ_GenericPackageAssignClass(structuredSelection);\n        TestingUtilities.fileContentsCompare(m_workspace_path\n                + \"expected_results/AssignClassTestGenerics/TableContent1.txt\",\n                actualResultFilePath);\n\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    IWorkbenchPage m_wp = PlatformUI.getWorkbench().getActiveWorkbenchWindow()\n            .getActivePage();\n    static ExplorerView m_bp_view = null;\n    static TreeViewer m_bp_tree = null;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.oa.dao.impl;\n\nimport java.util.List;\n\nimport javax.annotation.Resource;\n\nimport org.hibernate.SessionFactory;\nimport org.springframework.stereotype.Repository;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport com.oa.bean.User;\nimport com.oa.dao.UserDao;\n\n@Repository\n@Transactional\npublic class UserDaoimpl extends BaseDaoimpl<User> implements UserDao{\n\n    @Resource\n    private SessionFactory sessionfactory;\n    public User findByName(String name) {\n        System.out.println(\"name=\"+name);\n\n        return (User) sessionfactory.getCurrentSession().createQuery(//\n<｜fim▁hole｜>                .uniqueResult();\n    }\n    public List<User> findByDepartmentName(String DepartmentName){\n        return sessionfactory.getCurrentSession().createQuery(//\n                \"from User user where user.department.D_name=:DepartmentName\")//\n                .setParameter(\"DepartmentName\", DepartmentName)//\n                .list();\n    }\n    public List<User> findByRealName(String realname) {\n        // TODO Auto-generated method stub\n        return sessionfactory.getCurrentSession().createQuery(\"from User user WHERE user.U_name like :realname\").setParameter(\"realname\", \"%\"+realname+\"%\").list();\n    }\n\n    public List<User> findByRowAndPage(String rows, String page) {\n        int rowsize = (Integer.parseInt(page)-1)*Integer.parseInt(rows);\n        int row = Integer.parseInt(rows);\n        return sessionfactory.getCurrentSession().createQuery(//\n                \"from User\")//\n                .setFirstResult(rowsize)//\n                .setMaxResults(row)//\n                .list();\n    }\n    @Override\n    public List<User> findByRealNameByPage(String realname, int page, int rows) {\n        return sessionfactory.getCurrentSession().createQuery(\"from User user WHERE user.U_name like :realname\").setParameter(\"realname\", \"%\"+realname+\"%\").setFirstResult((page-1)*rows).setMaxResults(rows).list();\n\n    }\n\n}<｜fim▁end｜>",
    "response": "                \"from User user WHERE user.loginname=:loginname\")//\n                .setParameter(\"loginname\", name)//\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package nl.strohalm.cyclos.controls.members;\n\nimport nl.strohalm.cyclos.controls.elements.RemoveElementForm;\n\npublic class RemoveMemberForm extends RemoveElementForm {\n    private static final long serialVersionUID = -5685043060964974792L;\n\n    public long getMemberId() {\n        return getElementId();\n    }\n<｜fim▁hole｜>        setElementId(memberId);\n    }\n}<｜fim▁end｜>",
    "response": "\n    public void setMemberId(final long memberId) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.wesleyware.daowiz.fieldtypes;\n\n<｜fim▁hole｜>public class DateField extends Field\n{\n    /**\n     * Constructs an immutable representation of a DB field\n     * \n     * @param   nameIn          name of the field\n     * @param   constraintsIn   constraints on the field\n     */\n    public DateField(String nameIn, Constraints constraintsIn)\n    {\n        super(nameIn, constraintsIn);\n    }\n\n    /**\n         * Indicates if the value is valid acoording to the constraints.\n         *\n     * @param   value   the value to check\n     * @return  indicator if the given value is of the correct type and follows the constraints\n     */\n    public boolean isValid(Object value)\n    {\n        if (value == null || value instanceof java.util.Date)\n            return isValid((java.util.Date) value);\n\n        return false;\n    }\n\n    /**\n         * Indicates if the value is valid acoording to the constraints.\n         *\n     * @param   value   the value to check\n     * @return  indicator if the given value follows the constraints\n     */\n    public boolean isValid(java.util.Date value)\n    {\n        if (this.getContraints().isNotNull() && value == null)\n            return false;\n\n        return true;\n    }\n\n    /**\n         * Returns SQL type of this field\n         * The returned value cooresponds to those defined in java.sql.Types\n     * \n     * @return  the java class cooresponding to this field (DATE)\n     */\n    public int getSqlType()\n    {\n        return java.sql.Types.DATE;\n    }\n\n    /**\n     * Returns the java class cooresponding to the SQL type \n         *\n     * @return  the java class cooresponding to this field (Date)\n     */\n    public Class getJavaClass()\n    {\n        return java.sql.Date.class;\n    }\n\n}<｜fim▁end｜>",
    "response": "import com.wesleyware.daowiz.*;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.jeeeyul.eclipsejs.ui.queryview;\n\nimport org.eclipse.jface.preference.IPreferenceStore;\nimport org.eclipse.wst.jsdt.internal.ui.JavaScriptPlugin;\nimport org.eclipse.wst.jsdt.internal.ui.javaeditor.CompilationUnitEditor;\nimport org.eclipse.wst.jsdt.internal.ui.javaeditor.JavaSourceViewer;\nimport org.eclipse.wst.jsdt.ui.text.IJavaScriptPartitions;\nimport org.eclipse.wst.jsdt.ui.text.JavaScriptSourceViewerConfiguration;\nimport org.eclipse.wst.jsdt.ui.text.JavaScriptTextTools;\n\n@SuppressWarnings(\"restriction\")\npublic class EmbededJSDTEditor extends CompilationUnitEditor {\n    @Override\n    protected JavaScriptSourceViewerConfiguration createJavaSourceViewerConfiguration() {\n        JavaScriptTextTools textTools = JavaScriptPlugin.getDefault()\n                .getJavaTextTools();\n        return new EmbdedJSDTConfiguration(textTools.getColorManager(),\n                getPreferenceStore(), this,\n                IJavaScriptPartitions.JAVA_PARTITIONING);\n    }\n\n    /*\n     * @see\n     * org.eclipse.ui.texteditor.AbstractTextEditor#setPreferenceStore(org.eclipse\n     * .jface.preference.IPreferenceStore)\n     */\n    protected void setPreferenceStore(IPreferenceStore store) {\n        super.setPreferenceStore(store);\n<｜fim▁hole｜>        }\n        if (getSourceViewer() instanceof JavaSourceViewer)\n            ((JavaSourceViewer) getSourceViewer()).setPreferenceStore(store);\n    }\n\n}<｜fim▁end｜>",
    "response": "        if (getSourceViewerConfiguration() instanceof JavaScriptSourceViewerConfiguration) {\n            setSourceViewerConfiguration(createJavaSourceViewerConfiguration());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package deepDriver.dl.aml.cart;\n\nimport java.io.Serializable;\n\npublic class Gbdt implements Serializable {\n    int treeCnt = 10;\n    GbdtParameter [] cartParams = new GbdtParameter[treeCnt];\n\n    public double [] test(DataSet ds) {\n        double [] ys = new double[ds.dependentVars.length];\n        for (int i = 0; i < cartParams.length; i++) {\n            double [] ys1 = cartParams[i].getCart().predict(ds);\n            for (int j = 0; j < ys.length; j++) {\n                ys[j] = ys[j] + ys1[j] * cartParams[i].getR();\n            }\n        }\n        return ys;\n    }\n\n    public double [][] generateFeatures(DataSet trainingDs, DataSet testDs, boolean doesTraining) {\n        if (doesTraining) {\n            train(trainingDs, testDs);\n        }   \n        return generateFeatures(trainingDs);\n    }\n\n    public double [][] generateFeatures(DataSet ds0) {\n        DataSet ds = new DataSet();\n        ds.setDependentVars(ds0.getDependentVars());\n        for (int i = 0; i < cartParams.length; i++) {\n            double [][] features = cartParams[i].getCart().generateFeatures(ds);\n            ds.setDependentVars(features);\n        }\n        return ds.getDependentVars();\n    }\n\n    public double [][] generateFeatures(DataSet trainingDs, DataSet testDs) {\n        return generateFeatures(trainingDs, testDs, true);\n    }\n<｜fim▁hole｜>        double [] camTestYs = new double[testDs.independentVars.length];\n\n        for (int i = 0; i < cartParams.length; i++) {\n            System.out.println(\"Training the \"+(i + 1)+\" tree \");\n            Cart cart = new Cart(); \n            DataSet ds1 = new DataSet();\n            ds1.dependentVars = trainingDs.dependentVars;\n            ds1.independentVars = new double[trainingDs.independentVars.length];\n            ds1.labels = trainingDs.labels;\n            for (int j = 0; j < camTrainingYs.length; j++) {\n                ds1.independentVars[j] = trainingDs.independentVars[j] - camTrainingYs[j];\n            }\n\n            cart.trainTree(ds1);\n            //\n            DataSet ds2 = new DataSet();\n            ds2.dependentVars = testDs.dependentVars;\n            ds2.independentVars = new double[testDs.independentVars.length];\n            ds2.labels = testDs.labels;\n            for (int j = 0; j < camTestYs.length; j++) {\n                ds2.independentVars[j] = testDs.independentVars[j] - camTestYs[j];\n            }\n            System.out.println(\"Optimize the sub-tree.\");\n            cart.lookupBestTree(ds2);\n            //          \n            double [] yis = cart.predict(ds1);\n            double s1 = 0;\n            double s2 = 0;\n            double r = 1.0;\n            if (i != 0) {\n                for (int j = 0; j < yis.length; j++) {\n                    s1 = s1 + (trainingDs.independentVars[j] - camTrainingYs[j])*yis[j];\n                    s2 = s2+ yis[j] * yis[j];\n                }\n                if (s2 == 0) {\n                    r = 1;\n                } else {\n                    r = s1/s2;\n                }\n\n            }\n            for (int j = 0; j < yis.length; j++) {\n                camTrainingYs[j] = camTrainingYs[j] + r * yis[j];\n            }\n            double [] yis2 = cart.predict(ds2);\n            for (int j = 0; j < yis2.length; j++) {\n                camTestYs[j] = camTestYs[j] + r * yis2[j];               \n            }\n            cartParams[i] = new GbdtParameter();\n            cartParams[i].setCart(cart);\n            cartParams[i].setR(r);\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    public void train(DataSet trainingDs, DataSet testDs) {\n        double [] camTrainingYs = new double[trainingDs.independentVars.length];\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.gcscout.trackerdemo.controls;\n\nimport android.content.Context;\nimport android.content.res.TypedArray;\nimport android.util.AttributeSet;\nimport android.util.TypedValue;\nimport android.widget.TextView;\n\nimport com.gcscout.trackerdemo.Fonts;\nimport com.gcscout.trackerdemo.R;\n\npublic class ScalableTextView extends TextView {\n    private final float mTextSizePercent;\n\n    public ScalableTextView(Context context) {\n        this(context, null);\n    }\n\n    public ScalableTextView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public ScalableTextView(Context context, AttributeSet attrs, int defStyle) {\n        super(context, attrs, defStyle);\n        setTypeface(Fonts.RobotoRegular);\n\n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ScalableText, defStyle, 0);\n<｜fim▁hole｜>\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        int heightMode = MeasureSpec.getMode(heightMeasureSpec);\n        int height = MeasureSpec.getSize(heightMeasureSpec);\n\n        if (heightMode != MeasureSpec.UNSPECIFIED)\n            setTextSize(TypedValue.COMPLEX_UNIT_PX, (int) (mTextSizePercent * 0.8 * height));\n\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n    }\n}<｜fim▁end｜>",
    "response": "        mTextSizePercent = a.getFloat(R.styleable.ScalableText_textSizePercent, 1f);\n        a.recycle();\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.motechproject.event.domain;\n\nimport org.motechproject.event.MotechEvent;\n\npublic class BuggyListener extends TrackingListener {\n\n    private int times;\n\n    public BuggyListener(int numberOfTimesExceptionThrown) {\n        super(\"buggy-listener\");\n        times = numberOfTimesExceptionThrown;\n    }\n\n    @Override\n    public void handle(MotechEvent event) {\n        super.handle(event);\n        if (getCount() <= times) {\n<｜fim▁hole｜>    public String getIdentifier() {\n        return \"buggy-listener\";\n    }\n\n}<｜fim▁end｜>",
    "response": "            throw new TestListenerException();\n        }\n    }\n\n    @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.axelor.apps.sale.web;\n\nimport com.axelor.apps.sale.db.ConfiguratorCreator;\nimport com.axelor.apps.sale.db.ConfiguratorFormula;\nimport com.axelor.apps.sale.exception.IExceptionMessage;\n<｜fim▁hole｜>import com.axelor.inject.Beans;\nimport com.axelor.rpc.ActionRequest;\nimport com.axelor.rpc.ActionResponse;\nimport com.google.inject.Singleton;\n\n@Singleton\npublic class ConfiguratorFormulaController {\n\n  /**\n   * Check the groovy script in the context\n   *\n   * @param request\n   * @param response\n   */\n  public void checkGroovyFormula(ActionRequest request, ActionResponse response) {\n    ConfiguratorFormula configuratorFormula =\n        request.getContext().asType(ConfiguratorFormula.class);\n    ConfiguratorCreator creator =\n        request.getContext().getParent().asType(ConfiguratorCreator.class);\n    try {\n      Beans.get(ConfiguratorFormulaService.class).checkFormula(configuratorFormula, creator);\n      response.setAlert(I18n.get(IExceptionMessage.CONFIGURATOR_CREATOR_SCRIPT_WORKING));\n    } catch (Exception e) {\n      response.setError(e.getMessage());\n    }\n  }\n}<｜fim▁end｜>",
    "response": "import com.axelor.apps.sale.service.configurator.ConfiguratorFormulaService;\nimport com.axelor.i18n.I18n;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.couggi.javagraphviz;\n\npublic class SubGraph extends Digraph {\n\n    public SubGraph(String name) {\n<｜fim▁hole｜>\n    @Override\n    public String getType() {\n        return \"subgraph\";\n    }\n\n}<｜fim▁end｜>",
    "response": "        super(\"cluster_\" +name);\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package project.sudoku.board.scanner;\n\nimport org.opencv.core.Mat;\n\nimport project.sudoku.board.model.LikelyValue;\n\npublic interface IDigitClassifier\n{\n    /**\n     * It returns the most likely value for the Mat object\n     * (classifies binary pixels in Mat into a digit\n     * whose values can be one of the digit 1,2,...,9)\n     * @param thisMat mat containing the digit pixels\n     * @return likelyValue the most {@linkplain LikelyValue likely value}\n     * between [1, 9] or else returns -1 as the likely value\n     * (if classification is not possible)\n     */\n    public abstract LikelyValue getLikelyValue(Mat thisMat);\n<｜fim▁hole｜>     * It returns the digit corresponding to the maximum confidence value\n     * @param confidenceValues confidence values corresponding to digits [1, 9]\n     * @return likelyValue the {@linkplain LikelyValue likely value}\n     * with the digit corresponding to the maximum confidence value\n     * (digit starts from 1) or else returns -1 as the likely value\n     * if confidence values array is empty\n     */\n    public abstract LikelyValue getLikelyValueForMax(double[] confidenceValues);\n}<｜fim▁end｜>",
    "response": "\n    /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.devtools.clouderrorreporting.v1beta1;\n\npublic interface TimedCountOrBuilder\n    extends\n    // @@protoc_insertion_point(interface_extends:google.devtools.clouderrorreporting.v1beta1.TimedCount)\n    com.google.protobuf.MessageOrBuilder {\n\n  /**\n   *\n   *\n   * <pre>\n   * Approximate number of occurrences in the given time period.\n   * </pre>\n   *\n   * <code>int64 count = 1;</code>\n   */\n  long getCount();\n\n  /**\n   *\n   *\n   * <pre>\n   * Start of the time period to which `count` refers (included).\n   * </pre>\n   *\n   * <code>.google.protobuf.Timestamp start_time = 2;</code>\n   */\n  boolean hasStartTime();\n  /**\n   *\n   *\n   * <pre>\n   * Start of the time period to which `count` refers (included).\n   * </pre>\n   *\n   * <code>.google.protobuf.Timestamp start_time = 2;</code>\n   */\n  com.google.protobuf.Timestamp getStartTime();\n  /**\n   *\n   *\n   * <pre>\n<｜fim▁hole｜>   * <code>.google.protobuf.Timestamp start_time = 2;</code>\n   */\n  com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder();\n\n  /**\n   *\n   *\n   * <pre>\n   * End of the time period to which `count` refers (excluded).\n   * </pre>\n   *\n   * <code>.google.protobuf.Timestamp end_time = 3;</code>\n   */\n  boolean hasEndTime();\n  /**\n   *\n   *\n   * <pre>\n   * End of the time period to which `count` refers (excluded).\n   * </pre>\n   *\n   * <code>.google.protobuf.Timestamp end_time = 3;</code>\n   */\n  com.google.protobuf.Timestamp getEndTime();\n  /**\n   *\n   *\n   * <pre>\n   * End of the time period to which `count` refers (excluded).\n   * </pre>\n   *\n   * <code>.google.protobuf.Timestamp end_time = 3;</code>\n   */\n  com.google.protobuf.TimestampOrBuilder getEndTimeOrBuilder();\n}<｜fim▁end｜>",
    "response": "   * Start of the time period to which `count` refers (included).\n   * </pre>\n   *\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.siyeh.ig.naming;\n\nimport com.intellij.codeInspection.InspectionProfileEntry;\nimport com.siyeh.ig.LightJavaInspectionTestCase;\nimport com.siyeh.ig.junit.TestClassNamingConvention;\nimport com.siyeh.ig.junit.TestSuiteNamingConvention;\n\npublic class AbstractClassNamingConventionInspectionTest extends LightJavaInspectionTestCase {\n\n  public void testSimple() { doTest(); }\n\n  public void testSuiteNameConventionTest() {\n    addEnvironmentClass(\"package org.junit.runner;\\n\" +\n                        \"public @interface RunWith {Class<?> value();}\");\n    addEnvironmentClass(\"package org.junit.runners;\\n\" +\n                        \"public class Suite {}\");\n    addEnvironmentClass(\"package org.junit.runners;\\n\" +\n                        \"public class Parameterized extends Suite {}\");\n    addEnvironmentClass(\"package org.junit;\\n\" +\n                        \"public @interface Test{}\");\n    doTest();\n  }\n\n  @Override\n  protected InspectionProfileEntry getInspection() {\n    NewClassNamingConventionInspection conventionInspection = new NewClassNamingConventionInspection();\n    conventionInspection.setEnabled(true, AbstractClassNamingConvention.ABSTRACT_CLASS_NAMING_CONVENTION_SHORT_NAME);\n    conventionInspection.setEnabled(true, TestClassNamingConvention.TEST_CLASS_NAMING_CONVENTION_SHORT_NAME);\n    conventionInspection.setEnabled(true, TestSuiteNamingConvention.TEST_SUITE_NAMING_CONVENTION_SHORT_NAME);\n    return conventionInspection;\n  }\n<｜fim▁hole｜>  }\n}<｜fim▁end｜>",
    "response": "\n  @Override\n  protected Class<? extends InspectionProfileEntry> getInspectionClass() {\n    return NewClassNamingConventionInspection.class;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package eu.europa.esig.dss.tsl.function;\n\nimport eu.europa.esig.trustedlist.jaxb.tsl.OtherTSLPointerType;\n\n<｜fim▁hole｜>\n    /** The MimeType tage name */\n    private static final String EXPECTED_TAG_NAME = \"{http://uri.etsi.org/02231/v2/additionaltypes#}MimeType\";\n\n    /** Expected MimeType */\n    private final String expectedMimeType;\n\n    /**\n     * Default constructor\n     *\n     * @param expectedMimeType {@link String} MimeType to filter by\n     */\n    public MimetypeOtherTSLPointer(String expectedMimeType) {\n        Objects.requireNonNull(expectedMimeType, \"Expected MimeType must be defined\");\n        this.expectedMimeType = expectedMimeType;\n    }\n\n    @Override\n    public boolean test(OtherTSLPointerType o) {\n        Map<String, Object> extractAdditionalInformation = extractAdditionalInformation(o);\n        String mimeType = (String) extractAdditionalInformation.get(EXPECTED_TAG_NAME);\n        return expectedMimeType.equalsIgnoreCase(mimeType);\n    }\n\n}<｜fim▁end｜>",
    "response": "import java.util.Map;\nimport java.util.Objects;\n\npublic class MimetypeOtherTSLPointer extends AbstractOtherTSLPointerPredicate {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.azure.resourcemanager.databoxedge.models;\n\nimport com.azure.core.annotation.Fluent;\nimport com.azure.core.util.logging.ClientLogger;\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.fasterxml.jackson.annotation.JsonProperty;\n\n@Fluent\npublic final class RoleSinkInfo {\n    @JsonIgnore private final ClientLogger logger = new ClientLogger(RoleSinkInfo.class);\n\n    /*\n     * Compute role ID.\n     */\n    @JsonProperty(value = \"roleId\", required = true)\n    private String roleId;\n\n<｜fim▁hole｜>     */\n    public String roleId() {\n        return this.roleId;\n    }\n\n    /**\n     * Set the roleId property: Compute role ID.\n     *\n     * @param roleId the roleId value to set.\n     * @return the RoleSinkInfo object itself.\n     */\n    public RoleSinkInfo withRoleId(String roleId) {\n        this.roleId = roleId;\n        return this;\n    }\n\n    /**\n     * Validates the instance.\n     *\n     * @throws IllegalArgumentException thrown if the instance is not valid.\n     */\n    public void validate() {\n        if (roleId() == null) {\n            throw logger\n                .logExceptionAsError(\n                    new IllegalArgumentException(\"Missing required property roleId in model RoleSinkInfo\"));\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    /**\n     * Get the roleId property: Compute role ID.\n     *\n     * @return the roleId value.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package gb.saphoracle.calculator.listeners;\n\nimport android.view.View;\nimport android.widget.Button;\n\nimport gb.saphoracle.calculator.MainActivity;\n<｜fim▁hole｜>public class NumberButtonListener extends AbstractButtonListener {\n\n    private int number;\n\n    public NumberButtonListener(Button btObject, MainActivity ref, int number) {\n        super(btObject, ref);\n        this.number = number;\n    }\n\n    @Override\n    public void onClick(View v) {\n        Utility.updateValue(number, ref);\n\n        Utility.calculate(ref.number1, ref.operator, ref.number2, ref);\n    }\n}<｜fim▁end｜>",
    "response": "import gb.saphoracle.calculator.utils.Utility;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.reldb.rel.v0.values;\n\nimport java.io.PrintStream;\n\nimport org.reldb.rel.exceptions.ExceptionSemantic;\nimport org.reldb.rel.utilities.StringUtils;\nimport org.reldb.rel.v0.generator.Generator;\nimport org.reldb.rel.v0.types.Type;\nimport org.reldb.rel.v0.types.TypeAlpha;\nimport org.reldb.rel.v0.types.builtin.TypeCharacter;\nimport org.reldb.rel.v0.vm.Context;\n\npublic class ValueCharacter extends ValueAlpha implements Comparable<Value> {\n\n    private static final long serialVersionUID = 0;\n\n    private String internalValue;\n\n    /** Return a String given a quote-delimited source string.  Inverse of toParsableString(). */\n    public static String stripDelimitedString(String b) {\n        return StringUtils.unquote(b.substring(1, b.length() - 1));\n    }\n\n    /** Return a ValueCharacter given a quote-delimited source string. */\n    public static Value stripDelimited(Generator generator, String b) {\n        return new ValueCharacter(generator, stripDelimitedString(b));\n    }\n\n    public static ValueCharacter select(Generator generator, String x) {\n        return (ValueCharacter)generator.selectValue(TypeCharacter.getInstance(), new ValueCharacter(generator, x));\n    }\n\n    private ValueCharacter(Generator generator, String b) {\n        super(generator, TypeCharacter.getInstance(), new Value[1], 0);\n        internalValue = b;\n    }\n\n    public Value getComponentValue(int offsetInValue) {\n        return select(getGenerator(), internalValue);\n    }\n\n    public void setComponentValue(int offsetInValue, Value value) {\n        internalValue = value.stringValue();\n    }\n\n    public void toStream(Context context, Type contextualType, PrintStream p, int depth) {\n        Generator generator = getGenerator();\n        TypeAlpha type = (TypeAlpha)getType(context.getVirtualMachine().getRelDatabase());\n        setMST(generator.findMST(type, new ValueCharacter(generator, internalValue)));\n<｜fim▁hole｜>            p.print((depth > 0) ? toParsableString(contextualType) : toString());\n        else\n            p.print(typeSignature + \"(\" + toParsableString(contextualType) + \")\");\n    }\n\n    /** Convert this to a primitive boolean. */\n    public boolean booleanValue() {\n        return (internalValue.compareToIgnoreCase(\"true\")==0) ? true : false;\n    }\n\n    /** Convert this to a primitive long. */\n    public long longValue() {\n        try {\n            return (long)Double.parseDouble(internalValue);\n        } catch (NumberFormatException nfe) {\n            throw new ExceptionSemantic(\"RS0390: '\" + internalValue + \"' isn't a valid number.\");\n        }\n    }\n\n    /** Convert this to a primitive double. */\n    public double doubleValue() {\n        try {\n            return Double.parseDouble(internalValue);\n        } catch (NumberFormatException nfe) {\n            throw new ExceptionSemantic(\"RS0391: '\" + internalValue + \"' isn't a valid number.\");\n        }\n    }\n\n    /** Convert this to a primitive String. */\n    public String stringValue() {\n        return internalValue;\n    }\n\n    public int hashCode() {\n        return internalValue.hashCode();\n    }\n\n    public int compareTo(Value v) {\n        return internalValue.compareTo(v.stringValue());\n    }\n\n    public String toString() {\n        return internalValue;\n    }\n\n    public String toParsableString(Type type) {\n        return \"\\\"\" + StringUtils.quote(internalValue) + \"\\\"\";\n    }\n\n}<｜fim▁end｜>",
    "response": "        String typeSignature = getType(generator.getDatabase()).getSignature(); \n        if (typeSignature.equals(TypeCharacter.Name))\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.flink.runtime.checkpoint;\n\nimport org.apache.flink.runtime.state.RetrievableStateHandle;\nimport org.apache.flink.runtime.zookeeper.RetrievableStateStorageHelper;\n\nimport java.io.Serializable;\n\npublic final class TestingRetrievableStateStorageHelper<T extends Serializable> implements RetrievableStateStorageHelper<T> {\n\n    @Override\n    public RetrievableStateHandle<T> store(T state) {\n        return new TestingRetrievableStateHandle<>(state);\n    }\n\n    private static final class TestingRetrievableStateHandle<T extends Serializable> implements RetrievableStateHandle<T> {\n\n<｜fim▁hole｜>        }\n\n        @Override\n        public T retrieveState() {\n            return state;\n        }\n\n        @Override\n        public void discardState() {\n            // no op\n        }\n\n        @Override\n        public long getStateSize() {\n            return 0;\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        private static final long serialVersionUID = 137053380713794300L;\n\n        private final T state;\n\n        private TestingRetrievableStateHandle(T state) {\n            this.state = state;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.jingchen.pulltorefresh;\n\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport android.widget.ImageView;\n\npublic class PullableImageView extends ImageView implements Pullable\n{\n\n    public PullableImageView(Context context)\n    {\n        super(context);\n    }\n\n<｜fim▁hole｜>    public PullableImageView(Context context, AttributeSet attrs, int defStyle)\n    {\n        super(context, attrs, defStyle);\n    }\n\n    @Override\n    public boolean canPullDown()\n    {\n        return true;\n    }\n\n    @Override\n    public boolean canPullUp()\n    {\n        return true;\n    }\n\n}<｜fim▁end｜>",
    "response": "    public PullableImageView(Context context, AttributeSet attrs)\n    {\n        super(context, attrs);\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.tasktop.c2c.server.internal.profile.service;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.social.connect.Connection;\nimport org.springframework.social.connect.ConnectionData;\nimport org.springframework.social.connect.ConnectionRepository;\nimport org.springframework.social.connect.UsersConnectionRepository;\nimport org.springframework.social.connect.web.SignInAdapter;\nimport org.springframework.social.github.api.GitHub;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.context.request.NativeWebRequest;\n\nimport com.tasktop.c2c.server.auth.service.AuthUtils;\nimport com.tasktop.c2c.server.auth.service.AuthenticationServiceUser;\nimport com.tasktop.c2c.server.auth.service.AuthenticationToken;\n\n@Service(\"signInAdaptor\")\npublic class GitHubSignInAdapter implements SignInAdapter {\n\n    @Autowired\n    private UsersConnectionRepository usersConnRepo;\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Override\n    public String signIn(String username, Connection<?> connection, NativeWebRequest request) {\n        // Pull in this user's information\n        AuthenticationServiceUser user = (AuthenticationServiceUser) userDetailsService.loadUserByUsername(username);\n<｜fim▁hole｜>\n        if (apiConn == null) {\n            // No connection exists right now - that shouldn't happen since this is called from the GitHub connector\n            // code. Something's fishy - throw an exception to terminate this call.\n            throw new IllegalStateException(\"No GitHub connection exists for the given user!\");\n        }\n\n        // Get our connection data so that we can populate the authentication token.\n        ConnectionData connData = apiConn.createData();\n\n        // Create a token for this user and push it into our security context, using the access token as the\n        // credentials.\n        AuthenticationToken token = user.getToken();\n        AuthUtils.insertNewAuthToken(user, connData.getAccessToken(), token.getAuthorities(), token);\n        return null;\n    }\n\n}<｜fim▁end｜>",
    "response": "\n        // Get a GitHub connection for this user.\n        ConnectionRepository connRepo = this.usersConnRepo.createConnectionRepository(username);\n        Connection<GitHub> apiConn = connRepo.findPrimaryConnection(GitHub.class);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.eclipse.kapua.app.console.shared.model;\n\nimport java.io.Serializable;\n\npublic class GwtBrokerNodeCreator implements Serializable\n{\n    private static final long serialVersionUID = -3488683047161167451L;\n\n    private long brokerClusterId;\n    private long brokerNodeId;\n    private String iaasMachineImage;\n    private String iaasKeyName;\n    private String iaasInstanceType;\n    private String iaasAvailabilityZone;\n    private int numInstances = 1;\n\n    public GwtBrokerNodeCreator() {\n        super();\n    }\n\n    public GwtBrokerNodeCreator(long brokerClusterId) {\n        this.brokerClusterId = brokerClusterId;\n        this.brokerNodeId = -1;\n        this.iaasKeyName = \"\";\n        this.iaasInstanceType = \"\";\n        this.iaasAvailabilityZone = \"\";\n    }\n\n    public long getBrokerClusterId() {\n        return brokerClusterId;\n    }\n\n    public void setBrokerClusterId(long brokerClusterId) {\n        this.brokerClusterId = brokerClusterId;\n    }\n\n    public long getBrokerNodeId() {\n        return brokerNodeId;\n    }\n\n    public void setBrokerNodeId(long brokerNodeId) {\n        this.brokerNodeId = brokerNodeId;\n<｜fim▁hole｜>\n    public void setNumInstances(int numInstances) {\n        this.numInstances = numInstances;\n    }\n\n    public String getIaasMachineImage() {\n        return iaasMachineImage;\n    }\n\n    public void setIaasMachineImage(String iaasMachineImage) {\n        this.iaasMachineImage = iaasMachineImage;\n    }\n\n    public String getIaasKeyName() {\n        return iaasKeyName;\n    }\n\n    public void setIaasKeyName(String iaasKeyName) {\n        this.iaasKeyName = iaasKeyName;\n    }\n\n    public String getIaasInstanceType() {\n        return iaasInstanceType;\n    }\n\n    public void setIaasInstanceType(String iaasInstanceType) {\n        this.iaasInstanceType = iaasInstanceType;\n    }\n\n    public String getIaasAvailabilityZone() {\n        return iaasAvailabilityZone;\n    }\n\n    public void setIaasAvailabilityZone(String iaasAvailabilityZone) {\n        this.iaasAvailabilityZone = iaasAvailabilityZone;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    public long getNumInstances() {\n        return numInstances;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.api.services.healthcare.v1beta1.model;\n\n@SuppressWarnings(\"javadoc\")\npublic final class GoogleCloudHealthcareV1beta1FhirGcsSource extends com.google.api.client.json.GenericJson {\n\n  /**\n   * Points to a Cloud Storage URI containing file(s) to import. The URI must be in the following\n   * format: `gs://{bucket_id}/{object_id}`. The URI can include wildcards in `object_id` and thus\n   * identify multiple files. Supported wildcards: * `*` to match 0 or more non-separator characters\n   * * `**` to match 0 or more characters (including separators). Must be used at the end of a path\n<｜fim▁hole｜>   * `.ndjson` extensions in `my-directory/` and its sub-directories. * `?` to match 1 character\n   * Files matching the wildcard are expected to contain content only, no metadata.\n   * The value may be {@code null}.\n   */\n  @com.google.api.client.util.Key\n  private java.lang.String uri;\n\n  /**\n   * Points to a Cloud Storage URI containing file(s) to import. The URI must be in the following\n   * format: `gs://{bucket_id}/{object_id}`. The URI can include wildcards in `object_id` and thus\n   * identify multiple files. Supported wildcards: * `*` to match 0 or more non-separator characters\n   * * `**` to match 0 or more characters (including separators). Must be used at the end of a path\n   * and with no other wildcards in the path. Can also be used with a file extension (such as\n   * .ndjson), which imports all files with the extension in the specified directory and its sub-\n   * directories. For example, `gs://my-bucket/my-directory*.ndjson` imports all files with\n   * `.ndjson` extensions in `my-directory/` and its sub-directories. * `?` to match 1 character\n   * Files matching the wildcard are expected to contain content only, no metadata.\n   * @return value or {@code null} for none\n   */\n  public java.lang.String getUri() {\n    return uri;\n  }\n\n  /**\n   * Points to a Cloud Storage URI containing file(s) to import. The URI must be in the following\n   * format: `gs://{bucket_id}/{object_id}`. The URI can include wildcards in `object_id` and thus\n   * identify multiple files. Supported wildcards: * `*` to match 0 or more non-separator characters\n   * * `**` to match 0 or more characters (including separators). Must be used at the end of a path\n   * and with no other wildcards in the path. Can also be used with a file extension (such as\n   * .ndjson), which imports all files with the extension in the specified directory and its sub-\n   * directories. For example, `gs://my-bucket/my-directory*.ndjson` imports all files with\n   * `.ndjson` extensions in `my-directory/` and its sub-directories. * `?` to match 1 character\n   * Files matching the wildcard are expected to contain content only, no metadata.\n   * @param uri uri or {@code null} for none\n   */\n  public GoogleCloudHealthcareV1beta1FhirGcsSource setUri(java.lang.String uri) {\n    this.uri = uri;\n    return this;\n  }\n\n  @Override\n  public GoogleCloudHealthcareV1beta1FhirGcsSource set(String fieldName, Object value) {\n    return (GoogleCloudHealthcareV1beta1FhirGcsSource) super.set(fieldName, value);\n  }\n\n  @Override\n  public GoogleCloudHealthcareV1beta1FhirGcsSource clone() {\n    return (GoogleCloudHealthcareV1beta1FhirGcsSource) super.clone();\n  }\n\n}<｜fim▁end｜>",
    "response": "   * and with no other wildcards in the path. Can also be used with a file extension (such as\n   * .ndjson), which imports all files with the extension in the specified directory and its sub-\n   * directories. For example, `gs://my-bucket/my-directory*.ndjson` imports all files with\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.ignite.internal.processors.cache.distributed.dht;\n\nimport org.apache.ignite.configuration.*;\nimport org.apache.ignite.internal.processors.cache.distributed.near.*;\n<｜fim▁hole｜>\n        assertNotNull(ccfg.getNearConfiguration());\n\n        ccfg.setNearConfiguration(null);\n\n        return ccfg;\n    }\n\n    /** {@inheritDoc} */\n    @Override protected boolean isPartitioned() {\n        return false;\n    }\n\n    /** {@inheritDoc} */\n    @Override public void testLockReentrancy() throws Throwable {\n        fail(\"https://issues.apache.org/jira/browse/IGNITE-835\");\n    }\n}<｜fim▁end｜>",
    "response": "\npublic class GridCachePartitionedNearDisabledLockSelfTest extends GridCachePartitionedLockSelfTest {\n    /** {@inheritDoc} */\n    @Override protected CacheConfiguration cacheConfiguration() {\n        CacheConfiguration ccfg = super.cacheConfiguration();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.hibernate.ogm.utils;\n\nimport java.io.File;\n\nimport org.hibernate.ogm.util.impl.Log;\nimport org.hibernate.ogm.util.impl.LoggerFactory;\nimport java.lang.invoke.MethodHandles;\n\npublic class FileHelper {\n\n    private static final Log logger = LoggerFactory.make( MethodHandles.lookup() );\n\n    /**\n     * Attempts to delete a file. If the file is a directory delete recursively all content.\n     *\n     * @param file the file or directory to be deleted\n     * @return {@code false} if it wasn't possible to delete all content which is a common problem on Windows systems.\n     */\n    public static boolean delete(File file) {\n        if ( file == null ) {\n<｜fim▁hole｜>        }\n        boolean allok = true;\n        if ( file.isDirectory() ) {\n            for ( File subFile : file.listFiles() ) {\n                boolean deleted = delete( subFile );\n                allok = allok && deleted;\n            }\n        }\n        if ( allok && file.exists() ) {\n            if ( !file.delete() ) {\n                logger.warnf( \"File not deleted: %1\", file );\n                return false;\n            }\n        }\n        return allok;\n    }\n\n}<｜fim▁end｜>",
    "response": "            throw new IllegalArgumentException();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.oneops.transistor.ws.rest;\n\nimport java.io.IOException;\n\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.log4j.Logger;\nimport com.google.gson.Gson;\nimport com.oneops.cms.util.CmsError;\nimport com.oneops.transistor.util.ErrorResponse;\n\npublic class AbstractRestController {\n    protected Logger logger = Logger.getLogger(this.getClass());\n\n    private Gson gson = new Gson();\n\n    protected static final String ONEOPS_SYSTEM_USER = \"oneops-system\";\n<｜fim▁hole｜>            logger.error(\"Exception occurred while serving the request \"+ex.getErrorCode());\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    protected void sendError(HttpServletResponse response, int code, CmsError ex) throws IOException {\n            ErrorResponse error = new ErrorResponse(code, ex);\n            response.setStatus(error.getCode());\n            response.getWriter().write(gson.toJson(error));\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.robolectric.util;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport androidx.test.ext.junit.runners.AndroidJUnit4;\nimport java.io.IOException;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.robolectric.shadows.util.SQLiteLibraryLoader;\n\n@RunWith(AndroidJUnit4.class)\npublic class SQLiteLibraryLoaderTest {\n  /** Saved system properties. */\n  private String savedOs, savedArch;\n  private SQLiteLibraryLoader loader;\n\n  @Before\n  public void setUp() {\n    loader = new SQLiteLibraryLoader();\n  }\n\n  @Before\n  public void saveSystemProperties() {\n    savedOs = System.getProperty(\"os.name\");\n    savedArch = System.getProperty(\"os.arch\");\n  }\n\n  @After\n  public void restoreSystemProperties() {\n    System.setProperty(\"os.name\", savedOs);\n    System.setProperty(\"os.arch\", savedArch);\n  }\n\n  @Test\n  public void shouldExtractNativeLibrary() {\n    assertThat(loader.isLoaded()).isFalse();\n    loader.doLoad();\n    assertThat(loader.isLoaded()).isTrue();\n  }\n\n  @Test\n  public void shouldFindLibraryForWindowsXPX86() throws IOException {\n    assertThat(loadLibrary(new SQLiteLibraryLoader(WINDOWS), \"Windows XP\", \"x86\"))\n        .isEqualTo(\"windows-x86/sqlite4java.dll\");\n  }\n\n  @Test\n  public void shouldFindLibraryForWindows7X86() throws IOException {\n    assertThat(loadLibrary(new SQLiteLibraryLoader(WINDOWS), \"Windows 7\", \"x86\"))\n        .isEqualTo(\"windows-x86/sqlite4java.dll\");\n  }\n\n  @Test\n  public void shouldFindLibraryForWindowsXPAmd64() throws IOException {\n    assertThat(loadLibrary(new SQLiteLibraryLoader(WINDOWS), \"Windows XP\", \"amd64\"))\n        .isEqualTo(\"windows-x86_64/sqlite4java.dll\");\n  }\n\n  @Test\n  public void shouldFindLibraryForWindows7Amd64() throws IOException {\n    assertThat(loadLibrary(new SQLiteLibraryLoader(WINDOWS), \"Windows 7\", \"amd64\"))\n        .isEqualTo(\"windows-x86_64/sqlite4java.dll\");\n  }\n<｜fim▁hole｜>        .isEqualTo(\"linux-x86/libsqlite4java.so\");\n  }\n\n  @Test\n  public void shouldFindLibraryForLinuxx86() throws IOException {\n    assertThat(loadLibrary(new SQLiteLibraryLoader(LINUX), \"Some linux version\", \"x86\"))\n        .isEqualTo(\"linux-x86/libsqlite4java.so\");\n  }\n\n  @Test\n  public void shouldFindLibraryForLinuxAmd64() throws IOException {\n    assertThat(loadLibrary(new SQLiteLibraryLoader(LINUX), \"Some linux version\", \"amd64\"))\n        .isEqualTo(\"linux-x86_64/libsqlite4java.so\");\n  }\n\n  @Test\n  public void shouldFindLibraryForMacWithAnyArch() throws IOException {\n    assertThat(loadLibrary(new SQLiteLibraryLoader(MAC), \"Mac OS X\", \"any architecture\"))\n        .isEqualTo(\"mac-x86_64/libsqlite4java.jnilib\");\n  }\n\n  @Test\n  public void shouldFindLibraryForMacWithAnyArchAndDyLibMapping() throws IOException {\n    assertThat(loadLibrary(new SQLiteLibraryLoader(MAC_DYLIB), \"Mac OS X\", \"any architecture\"))\n        .isEqualTo(\"mac-x86_64/libsqlite4java.jnilib\");\n  }\n\n  @Test(expected = UnsupportedOperationException.class)\n  public void shouldThrowExceptionIfUnknownNameAndArch() throws Exception {\n    loadLibrary(new SQLiteLibraryLoader(LINUX), \"ACME Electronic\", \"FooBar2000\");\n  }\n\n  private String loadLibrary(SQLiteLibraryLoader loader, String name, String arch) throws IOException {\n    setNameAndArch(name, arch);\n    return loader.getLibClasspathResourceName();\n  }\n\n  private static class LibraryMapperTest implements SQLiteLibraryLoader.LibraryNameMapper {\n    private final String prefix;\n    private final String ext;\n\n    private LibraryMapperTest(String prefix, String ext) {\n      this.prefix = prefix;\n      this.ext = ext;\n    }\n\n    @Override\n    public String mapLibraryName(String name) {\n      return prefix + name + \".\" + ext;\n    }\n  }\n\n  private static void setNameAndArch(String name, String arch) {\n    System.setProperty(\"os.name\", name);\n    System.setProperty(\"os.arch\", arch);\n  }\n\n  private static final SQLiteLibraryLoader.LibraryNameMapper LINUX = new LibraryMapperTest(\"lib\", \"so\");\n  private static final SQLiteLibraryLoader.LibraryNameMapper WINDOWS = new LibraryMapperTest(\"\", \"dll\");\n  private static final SQLiteLibraryLoader.LibraryNameMapper MAC = new LibraryMapperTest(\"lib\", \"jnilib\");\n  private static final SQLiteLibraryLoader.LibraryNameMapper MAC_DYLIB = new LibraryMapperTest(\"lib\", \"dylib\");\n}<｜fim▁end｜>",
    "response": "\n  @Test\n  public void shouldFindLibraryForLinuxi386() throws IOException {\n    assertThat(loadLibrary(new SQLiteLibraryLoader(LINUX), \"Some linux version\", \"i386\"))\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.ibm.ws.security.mp.jwt12.fat.envVarsTests;\n\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport com.ibm.ws.security.fat.common.jwt.utils.JwtKeyTools;\nimport com.ibm.ws.security.fat.common.mp.jwt.MPJwt12FatConstants;\nimport com.ibm.ws.security.fat.common.mp.jwt.utils.MP12ConfigSettings;\nimport com.ibm.ws.security.mp.jwt12.fat.sharedTests.GenericEnvVarsAndSystemPropertiesTests;\n\nimport componenttest.annotation.Server;\nimport componenttest.custom.junit.runner.FATRunner;\nimport componenttest.custom.junit.runner.Mode;\nimport componenttest.custom.junit.runner.Mode.TestMode;\nimport componenttest.topology.impl.LibertyServer;\n\n@SuppressWarnings(\"restriction\")\n@Mode(TestMode.FULL)\n@RunWith(FATRunner.class)\npublic class MPJwtGoodMP12ConfigAsEnvVars_decryptKeyLoc_RS256File extends GenericEnvVarsAndSystemPropertiesTests {\n\n    public static Class<?> thisClass = MPJwtGoodMP12ConfigAsEnvVars_decryptKeyLoc_RS256File.class;\n\n    @Server(\"com.ibm.ws.security.mp.jwt.1.2.fat\")\n    public static LibertyServer envVarsResourceServer;\n\n    @BeforeClass\n    public static void setUp() throws Exception {\n\n        commonMpJwt12Setup(envVarsResourceServer, \"rs_server_AltConfigNotInApp_good12ServerXmlConfigNoAudiences.xml\", MPJwt12FatConstants.AUTHORIZATION,\n                           MPJwt12FatConstants.TOKEN_TYPE_BEARER, MP12ConfigSettings.AudiencesNotSet, MPJwt12FatConstants.SIGALG_RS256,\n                           JwtKeyTools.getDefaultKeyFileLoc(envVarsResourceServer) + JwtKeyTools.getPrivateKeyFileNameForAlg(MPJwt12FatConstants.SIGALG_RS256),\n                           MPConfigLocation.ENV_VAR);\n\n    }\n\n    @Test\n    public void MPJwtGoodMP12ConfigAsEnvVars_decryptKeyLoc_RS256File_test() throws Exception {\n        genericGoodTest(\"sign_RS256_enc_RS256\");\n<｜fim▁hole｜>    public void MPJwtGoodMP12ConfigAsEnvVars_decryptKeyLoc_RS256File_overriddenByServerXml_test() throws Exception {\n        genericBadTest(\"sign_RS256_enc_RS256\", \"rs_server_AltConfigNotInApp_Bad_DecryptKeyLoc.xml\", setEncryptMismatchKeyTypeExpectations(resourceServer, false));\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    @Test\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.sf.launch4j.formimpl;\n\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\nimport javax.swing.DefaultComboBoxModel;\nimport javax.swing.JFileChooser;\nimport javax.swing.JTextField;\n\nimport net.sf.launch4j.binding.Bindings;\nimport net.sf.launch4j.binding.Validator;\nimport net.sf.launch4j.form.JreForm;\n\npublic class JreFormImpl extends JreForm {\n\n    public JreFormImpl(Bindings bindings, JFileChooser fc) {\n        bindings    .add(\"jre.path\", _jrePathField)\n                .add(\"jre.minVersion\", _jreMinField)\n                .add(\"jre.maxVersion\", _jreMaxField)\n                .add(\"jre.dontUsePrivateJres\", _dontUsePrivateJresCheck)\n                .add(\"jre.initialHeapSize\", _initialHeapSizeField)\n                .add(\"jre.maxHeapSize\", _maxHeapSizeField)\n                .add(\"jre.options\", _jvmOptionsTextArea);\n\n        _varCombo.setModel(new DefaultComboBoxModel(new String[] {\n                \"EXEDIR\", \"EXEFILE\", \"PWD\", \"OLDPWD\",\n                \"HKEY_CLASSES_ROOT\", \"HKEY_CURRENT_USER\", \"HKEY_LOCAL_MACHINE\",\n                \"HKEY_USERS\", \"HKEY_CURRENT_CONFIG\" }));\n\n        _varCombo.addActionListener(new VarComboActionListener());\n        _varCombo.setSelectedIndex(0);\n\n        _propertyButton.addActionListener(new PropertyActionListener());\n        _optionButton.addActionListener(new OptionActionListener());\n\n        _envPropertyButton.addActionListener(new EnvPropertyActionListener(_envVarField));\n<｜fim▁hole｜>                    .startsWith(\"HKEY_\"));\n        }\n    }\n\n    private class PropertyActionListener implements ActionListener {\n        public void actionPerformed(ActionEvent e) {\n            final int pos = _jvmOptionsTextArea.getCaretPosition();\n            final String var = (String) _varCombo.getSelectedItem();\n            if (var.startsWith(\"HKEY_\")) {\n                _jvmOptionsTextArea.insert(\"-Dreg.key=\\\"%\"\n                        + var + \"\\\\\\\\...%\\\"\\n\", pos);\n            } else {\n                _jvmOptionsTextArea.insert(\"-Dlaunch4j.\" + var.toLowerCase()\n                        + \"=\\\"%\" + var + \"%\\\"\\n\", pos);\n            }\n        }\n    }\n\n    private class OptionActionListener implements ActionListener {\n        public void actionPerformed(ActionEvent e) {\n            final int pos = _jvmOptionsTextArea.getCaretPosition();\n            final String var = (String) _varCombo.getSelectedItem();\n            if (var.startsWith(\"HKEY_\")) {\n                _jvmOptionsTextArea.insert(\"%\" + var + \"\\\\\\\\...%\\n\", pos);\n            } else {\n                _jvmOptionsTextArea.insert(\"%\" + var + \"%\\n\", pos);\n            }\n        }\n    }\n\n    private abstract class EnvActionListener extends AbstractAcceptListener {\n        public EnvActionListener(JTextField f, boolean listen) {\n            super(f, listen);\n        }\n\n        public void actionPerformed(ActionEvent e) {\n            final int pos = _jvmOptionsTextArea.getCaretPosition();\n            final String var = getText()\n                    .replaceAll(\"\\\"\", \"\")\n                    .replaceAll(\"%\", \"\");\n            if (Validator.isEmpty(var)) {\n                signalViolation(Messages.getString(\"specifyVar\"));\n                return;\n            }\n            add(var, pos);\n            clear();\n        }\n\n        protected abstract void add(String var, int pos);\n    }\n\n    private class EnvPropertyActionListener extends EnvActionListener {\n        public EnvPropertyActionListener(JTextField f) {\n            super(f, true);\n        }\n\n        protected void add(String var, int pos) {\n            final String prop = var\n                    .replaceAll(\" \", \".\")\n                    .replaceAll(\"_\", \".\")\n                    .toLowerCase();\n            _jvmOptionsTextArea.insert(\"-Denv.\" + prop + \"=\\\"%\" + var\n                    + \"%\\\"\\n\", pos);\n        }\n    }\n\n    private class EnvOptionActionListener extends EnvActionListener {\n        public EnvOptionActionListener(JTextField f) {\n            super(f, false);\n        }\n\n        protected void add(String var, int pos) {\n            _jvmOptionsTextArea.insert(\"%\" + var + \"%\\n\", pos); \n        }\n    }\n}<｜fim▁end｜>",
    "response": "        _envOptionButton.addActionListener(new EnvOptionActionListener(_envVarField));\n    }\n\n    private class VarComboActionListener implements ActionListener {\n        public void actionPerformed(ActionEvent e) {\n            _optionButton.setEnabled(((String) _varCombo.getSelectedItem())\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package alluxio.client.file.cache.store;\n\nimport alluxio.client.file.cache.PageId;\nimport alluxio.client.file.cache.PageInfo;\nimport alluxio.client.file.cache.PageStore;\nimport alluxio.exception.PageNotFoundException;\nimport alluxio.proto.client.Cache;\n\nimport com.google.common.base.Preconditions;\nimport com.google.common.collect.Streams;\nimport org.rocksdb.Options;\nimport org.rocksdb.RocksDB;\nimport org.rocksdb.RocksDBException;\nimport org.rocksdb.RocksIterator;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.nio.charset.Charset;\nimport java.util.Iterator;\nimport java.util.NoSuchElementException;\nimport java.util.stream.Stream;\nimport javax.annotation.Nullable;\nimport javax.annotation.concurrent.NotThreadSafe;\n\n@NotThreadSafe\npublic class RocksPageStore implements PageStore {\n  private static final Logger LOG = LoggerFactory.getLogger(RocksPageStore.class);\n  private static final byte[] CONF_KEY = \"CONF\".getBytes();\n\n  private final long mCapacity;\n  private final RocksDB mDb;\n  private final RocksPageStoreOptions mPageStoreOptions;\n  private final Options mDbOptions;\n\n  /**\n   * @param pageStoreOptions options for the rocks page store\n   * @return a new instance of {@link PageStore} backed by RocksDB\n   * @throws IOException if I/O error happens\n   */\n  public static RocksPageStore open(RocksPageStoreOptions pageStoreOptions) throws IOException {\n    Preconditions.checkArgument(pageStoreOptions.getMaxPageSize() > 0);\n    RocksDB.loadLibrary();\n    // The RocksObject will be closed together with the RocksPageStore\n    Options rocksOptions = new Options()\n        .setCreateIfMissing(true)\n        .setWriteBufferSize(pageStoreOptions.getWriteBufferSize())\n        .setCompressionType(pageStoreOptions.getCompressionType());\n    RocksDB db = null;\n    try {\n      db = RocksDB.open(rocksOptions, pageStoreOptions.getRootDir());\n<｜fim▁hole｜>      if (confData != null) {\n        Cache.PRocksPageStoreOptions persistedOptions =\n            Cache.PRocksPageStoreOptions.parseFrom(confData);\n        if (!persistedOptions.equals(pOptions)) {\n          db.close();\n          throw new IOException(\"Inconsistent configuration for RocksPageStore\");\n        }\n      }\n      db.put(CONF_KEY, pOptions.toByteArray());\n    } catch (RocksDBException e) {\n      if (db != null) {\n        db.close();\n      }\n      rocksOptions.close();\n      throw new IOException(\"Couldn't open rocksDB database\", e);\n    }\n    return new RocksPageStore(pageStoreOptions, db, rocksOptions);\n  }\n\n  /**\n   * Creates a new instance of {@link PageStore} backed by RocksDB.\n   *\n   * @param pageStoreOptions options for the rocks page store\n   * @param rocksDB RocksDB instance\n   * @param dbOptions the RocksDB options\n   */\n  private RocksPageStore(RocksPageStoreOptions pageStoreOptions, RocksDB rocksDB,\n      Options dbOptions) {\n    mPageStoreOptions = pageStoreOptions;\n    mDbOptions = dbOptions;\n    mCapacity =\n        (long) (pageStoreOptions.getCacheSize() / (1 + pageStoreOptions.getOverheadRatio()));\n    mDb = rocksDB;\n  }\n\n  @Override\n  public void put(PageId pageId, byte[] page) throws IOException {\n    try {\n      byte[] key = getKeyFromPageId(pageId);\n      mDb.put(key, page);\n    } catch (RocksDBException e) {\n      throw new IOException(\"Failed to store page\", e);\n    }\n  }\n\n  @Override\n  public int get(PageId pageId, int pageOffset, int bytesToRead, byte[] buffer, int bufferOffset)\n      throws IOException, PageNotFoundException {\n    Preconditions.checkArgument(pageOffset >= 0, \"page offset should be non-negative\");\n    try {\n      byte[] page = mDb.get(getKeyFromPageId(pageId));\n      if (page == null) {\n        throw new PageNotFoundException(new String(getKeyFromPageId(pageId)));\n      }\n      Preconditions.checkArgument(pageOffset <= page.length,\n          \"page offset %s exceeded page size %s\", pageOffset, page.length);\n      try (ByteArrayInputStream bais = new ByteArrayInputStream(page)) {\n        int bytesSkipped = (int) bais.skip(pageOffset);\n        if (pageOffset != bytesSkipped) {\n          throw new IOException(\n              String.format(\"Failed to read page %s from offset %s: %s bytes skipped\", pageId,\n                  pageOffset, bytesSkipped));\n        }\n        int bytesRead = 0;\n        int bytesLeft = Math.min(page.length - pageOffset, buffer.length - bufferOffset);\n        bytesLeft = Math.min(bytesLeft, bytesToRead);\n        while (bytesLeft >= 0) {\n          int bytes = bais.read(buffer, bufferOffset + bytesRead, bytesLeft);\n          if (bytes <= 0) {\n            break;\n          }\n          bytesRead += bytes;\n          bytesLeft -= bytes;\n        }\n        return bytesRead;\n      }\n    } catch (RocksDBException e) {\n      throw new IOException(\"Failed to retrieve page\", e);\n    }\n  }\n\n  @Override\n  public void delete(PageId pageId) throws PageNotFoundException {\n    try {\n      byte[] key = getKeyFromPageId(pageId);\n      mDb.delete(key);\n    } catch (RocksDBException e) {\n      throw new PageNotFoundException(\"Failed to remove page\", e);\n    }\n  }\n\n  @Override\n  public void close() {\n    LOG.info(\"Closing RocksPageStore and recycling all RocksDB JNI objects\");\n    mDb.close();\n    mDbOptions.close();\n    LOG.info(\"RocksPageStore closed\");\n  }\n\n  private static byte[] getKeyFromPageId(PageId pageId) {\n    byte[] fileId = pageId.getFileId().getBytes();\n    ByteBuffer buf = ByteBuffer.allocate(Long.BYTES + fileId.length);\n    buf.putLong(pageId.getPageIndex());\n    buf.put(fileId);\n    return buf.array();\n  }\n\n  /**\n   * @param key key of a record\n   * @return the corresponding page id, or null if the key does not match the pattern\n   */\n  @Nullable\n  private static PageId getPageIdFromKey(byte[] key) {\n    if (key.length < Long.BYTES) {\n      return null;\n    }\n    ByteBuffer buf = ByteBuffer.wrap(key);\n    long pageIndex = buf.getLong();\n    String fileId = Charset.defaultCharset().decode(buf).toString();\n    return new PageId(fileId, pageIndex);\n  }\n\n  @Override\n  public Stream<PageInfo> getPages() {\n    RocksIterator iter = mDb.newIterator();\n    iter.seekToFirst();\n    return Streams.stream(new PageIterator(iter)).onClose(iter::close);\n  }\n\n  @Override\n  public long getCacheSize() {\n    return mCapacity;\n  }\n\n  private class PageIterator implements Iterator<PageInfo> {\n    private final RocksIterator mIter;\n    private PageInfo mValue;\n\n    PageIterator(RocksIterator iter) {\n      mIter = iter;\n    }\n\n    @Override\n    public boolean hasNext() {\n      return ensureValue() != null;\n    }\n\n    @Override\n    public PageInfo next() {\n      PageInfo value = ensureValue();\n      if (value == null) {\n        throw new NoSuchElementException();\n      }\n      mIter.next();\n      mValue = null;\n      return value;\n    }\n\n    @Nullable\n    private PageInfo ensureValue() {\n      if (mValue == null) {\n        for (; mIter.isValid(); mIter.next()) {\n          PageId id = getPageIdFromKey(mIter.key());\n          long size = mIter.value().length;\n          if (id != null) {\n            mValue = new PageInfo(id, size);\n            break;\n          }\n        }\n      }\n      return mValue;\n    }\n  }\n}<｜fim▁end｜>",
    "response": "      byte[] confData = db.get(CONF_KEY);\n      Cache.PRocksPageStoreOptions pOptions = pageStoreOptions.toProto();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package model;\n\nimport java.text.SimpleDateFormat;\nimport java.util.Date;\n\npublic class Note {\n\n    private String description;\n    private boolean error = false;\n    private Date creationDate;\n\n    private Note() {\n        setCreationDate(new Date());\n    }\n\n    protected Note(String description) {\n        this();\n        setDescription(description);\n    }\n\n    protected Note(String description, boolean error) {\n        this(description);\n        setError(error);\n    }\n\n    // Getters and setters\n    public String getDescription() {\n        return description;\n    }\n\n    private void setDescription(String description) {\n        this.description = description;\n<｜fim▁hole｜>        return error;\n    }\n\n    public void setError(boolean error) {\n        this.error = error;\n    }\n\n    public Date getCreationDate() {\n        return creationDate;\n    }\n\n    private void setCreationDate(Date creationDate) {\n        this.creationDate = creationDate;\n    }\n\n    // Helper method\n    public String toHTML() {\n        SimpleDateFormat shortFormat = new SimpleDateFormat(\"HH:mm:ss\");\n        SimpleDateFormat msFormat = new SimpleDateFormat(\"SSS\");\n        String locale = shortFormat.format(getCreationDate());\n        String milliseconds = msFormat.format(getCreationDate());\n\n        if (isError()) {\n            return String.format(\"%s<font color=\\\"#BBBBBB\\\">.%s</font>: <font color=\\\"red\\\">%s</font><br/>\",\n                    locale, milliseconds, getDescription());\n        } else {\n            return String.format(\"%s<font color=\\\"#BBBBBB\\\">.%s</font>: %s<br/>\", locale, milliseconds,\n                    getDescription());\n        }\n    }\n\n    public String toString() {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n        String timeLocale = dateFormat.format(getCreationDate());\n\n        return String.format(\"%s: %s\\n\", timeLocale, getDescription());\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    public boolean isError() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.hisp.dhis.dataitem.query.shared;\n\nimport static org.apache.commons.lang3.StringUtils.EMPTY;\nimport static org.hisp.dhis.dataitem.query.shared.ParamPresenceChecker.hasIntegerPresence;\nimport static org.hisp.dhis.dataitem.query.shared.QueryParam.MAX_LIMIT;\n\nimport org.springframework.jdbc.core.namedparam.MapSqlParameterSource;\n\npublic class LimitStatement\n{\n    private LimitStatement()\n    {\n<｜fim▁hole｜>     * @return the limit SQL statement\n     */\n    public static String maxLimit( final MapSqlParameterSource paramsMap )\n    {\n        if ( hasIntegerPresence( paramsMap, MAX_LIMIT ) )\n        {\n            return \" limit :\" + MAX_LIMIT;\n        }\n\n        return EMPTY;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    /**\n     * Adds a SQL limit statement if one is set in the given paramsMap.\n     *\n     * @param paramsMap\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.sshd.agent.unix;\n\nimport java.io.File;\nimport java.io.IOException;\n\nimport org.apache.sshd.common.util.OsUtils;\nimport org.apache.tomcat.jni.Library;\nimport org.apache.tomcat.jni.Pool;\n\nclass AprLibrary {\n\n    // is APR library was initialized (load of native libraries)\n    private static AprLibrary library = null;\n\n    /**\n     * get the shared instance of APR library, if none, initialize one\n     * @return the current APR library singleton\n     */\n    static synchronized AprLibrary getInstance() {\n        if (!isInitialized())\n            initialize();\n        return library;\n    }\n\n    /**\n     * initialize the APR Library by loading the associated native libraries\n     * and creating the associated singleton\n     */\n    private static synchronized void initialize() {\n        if (library == null)\n            library = new AprLibrary();\n    }\n\n    /**\n     * is the APR library was initialized.\n     * @return true if the Library is initialized, false otherwise\n     */\n    static synchronized boolean isInitialized() {\n        return library != null;\n    }\n\n    // APR memory pool (package wide mother pool)\n    private final long pool;\n\n    /**\n     * APR library singleton constructor. Called only when accessing the\n     * singleton the first time.\n     * It's initializing an APR memory pool for the whole package (a.k.a mother or root pool).\n     */\n    private AprLibrary() {\n        try {\n            Library.initialize(null);\n        } catch (Exception e) {\n            throw new RuntimeException(\n                    \"Error loading Apache Portable Runtime (APR).\", e);\n        }\n        pool = Pool.create(0);\n    }\n\n    @Override\n    protected void finalize() throws Throwable {\n        library = null;\n        Pool.destroy(pool);\n        Library.terminate();\n        super.finalize();\n    }\n\n    /**\n     * get the package wide root pool, the mother of all the pool created\n     * in APR transport module.\n     * @return number identifying the root pool\n     */\n    long getRootPool() {\n        return pool;\n    }\n\n    static String createLocalSocketAddress() throws IOException {\n        initialize();\n\n        String name;\n        if (OsUtils.isUNIX()) {\n            // Since there is a race condition between bind and when\n            // we can mark the socket readable only by its owner, make\n            // the socket in a temporary directory that is visible only\n            // to the owner.\n            //\n            File dir = File.createTempFile(\"mina\", \"apr\");\n            if (!dir.delete() || !dir.mkdir()) {\n                throw new IOException(\"Cannot create secure temp directory\");\n            }\n            chmodOwner(dir.getAbsolutePath(), true);\n\n            File socket = File.createTempFile(\"mina\",\"apr\", dir);\n            socket.delete();\n            name = socket.getAbsolutePath();\n        } else {\n            File socket = File.createTempFile(\"mina\", \"apr\");\n            socket.delete();\n            name = \"\\\\\\\\.\\\\pipe\\\\\" + socket.getName();\n        }\n        return name;\n    }\n\n    static void secureLocalSocket(String authSocket, long handle) throws IOException {\n        if (OsUtils.isUNIX()) {\n            chmodOwner(authSocket, false);\n\n        } else {\n            // should be ok on windows\n        }\n    }\n\n    private static void chmodOwner(String authSocket, boolean execute) throws IOException {\n<｜fim▁hole｜>            throw new IOException(\"Unable to secure local socket\");\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        int perms = org.apache.tomcat.jni.File.APR_FPROT_UREAD\n                  | org.apache.tomcat.jni.File.APR_FPROT_UWRITE;\n        if (execute) {\n            perms |= org.apache.tomcat.jni.File.APR_FPROT_UEXECUTE;\n        }\n        if (org.apache.tomcat.jni.File.permsSet(authSocket, perms) != org.apache.tomcat.jni.Status.APR_SUCCESS) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jetbrains.plugins.groovy.lang.psi.impl.statements.typedef;\n\nimport com.intellij.lang.ASTNode;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.plugins.groovy.lang.parser.GroovyElementTypes;\nimport org.jetbrains.plugins.groovy.lang.psi.api.statements.typedef.GrClassDefinition;\nimport org.jetbrains.plugins.groovy.lang.psi.stubs.GrTypeDefinitionStub;\n\npublic class GrClassDefinitionImpl extends GrTypeDefinitionImpl implements GrClassDefinition {\n\n  public GrClassDefinitionImpl(@NotNull ASTNode node) {\n    super(node);\n  }\n\n<｜fim▁hole｜>  public String toString() {\n    return \"Class definition\";\n  }\n}<｜fim▁end｜>",
    "response": "  public GrClassDefinitionImpl(final GrTypeDefinitionStub stub) {\n    super(stub, GroovyElementTypes.CLASS_DEFINITION);\n  }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.esa.nest.gpf;\n\nimport org.esa.beam.framework.datamodel.MetadataElement;\nimport org.esa.beam.framework.gpf.ui.BaseOperatorUI;\nimport org.esa.beam.framework.gpf.ui.UIValidation;\nimport org.esa.beam.framework.ui.AppContext;\nimport org.esa.nest.datamodel.AbstractMetadata;\nimport org.esa.nest.util.DialogUtils;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.Map;\n\npublic class Sentinel1DeburstTOPSAROpUI extends BaseOperatorUI {\n\n    private final JList<String> polList = new JList<String>();\n\n    @Override\n    public JComponent CreateOpTab(String operatorName, Map<String, Object> parameterMap, AppContext appContext) {\n\n        initializeOperatorUI(operatorName, parameterMap);\n        final JComponent panel = createPanel();\n<｜fim▁hole｜>\n        if(sourceProducts != null && sourceProducts.length > 0) {\n            final MetadataElement absRoot = AbstractMetadata.getAbstractedMetadata(sourceProducts[0]);\n            final String acquisitionMode = absRoot.getAttributeString(AbstractMetadata.ACQUISITION_MODE);\n            final String[] polarisations = Sentinel1DeburstTOPSAROp.getProductPolarizations(\n                    absRoot, acquisitionMode);\n            polList.setListData(polarisations);\n\n            OperatorUIUtils.initParamList(polList, polarisations);\n        }\n    }\n\n    @Override\n    public UIValidation validateParameters() {\n        return new UIValidation(UIValidation.State.OK, \"\");\n    }\n\n    @Override\n    public void updateParameters() {\n\n        OperatorUIUtils.updateParamList(polList, paramMap, \"selectedPolarisations\");\n    }\n\n    private JComponent createPanel() {\n\n        final JPanel contentPane = new JPanel(new GridBagLayout());\n        final GridBagConstraints gbc = DialogUtils.createGridBagConstraints();\n\n        DialogUtils.addComponent(contentPane, gbc, \"Polarisations:\", polList);\n\n        DialogUtils.fillPanel(contentPane, gbc);\n\n        return contentPane;\n    }\n}<｜fim▁end｜>",
    "response": "        initParameters();\n        return new JScrollPane(panel);\n    }\n\n    @Override\n    public void initParameters() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.openmrs.module.kenyaemr.util;\n\nimport org.openmrs.api.context.Context;\nimport org.openmrs.module.Module;\nimport org.openmrs.module.ModuleFactory;\nimport org.openmrs.module.kenyaemr.EmrConstants;\nimport org.openmrs.util.OpenmrsConstants;\n\nimport java.util.Calendar;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.Properties;\n\npublic class ServerInformation {\n\n    /**\n     * Gets a map of all information sections\n     * @return the information sections\n     */\n    public static Map<String, Object> getAllInformation() {\n        return map(\n                \"system\", getSystemInformation(),\n                \"runtime\", getRuntimeInformation(),\n                \"openmrs\", getOpenmrsInformation(),\n                \"kenyaemr\", getKenyaemrInformation()\n        );\n    }\n\n    /**\n     * Gets system information\n     * @return the data points\n     */\n    public static Map<String, Object> getSystemInformation() {\n        Properties properties = System.getProperties();\n        return map(\n                \"os\", map(\n                        \"name\", properties.getProperty(\"os.name\"),\n                        \"arch\", properties.getProperty(\"os.arch\"),\n                        \"version\", properties.getProperty(\"os.version\")\n                ),\n                \"java\", map(\n                        \"vendor\", properties.getProperty(\"java.vendor\"),\n                        \"version\", properties.getProperty(\"java.version\")\n                ),\n                \"user\", map(\n                    \"language\", properties.getProperty(\"user.language\"),\n                    \"timezone\", properties.getProperty(\"user.timezone\")\n                )\n        );\n    }\n\n    /**\n     * Gets runtime information\n     * @return the data points\n     */\n    public static Map<String, Object> getRuntimeInformation() {\n        Runtime runtime = Runtime.getRuntime();\n        return map(\n                \"freememory\", runtime.freeMemory(),\n                \"totalmemory\", runtime.totalMemory(),\n                \"maxmemory\", runtime.maxMemory(),\n                \"processors\", runtime.availableProcessors()\n        );\n    }\n\n    /**\n     * Gets OpenMRS information\n     * @return the data points\n     */\n    public static Map<String, Object> getOpenmrsInformation() {\n        return map(\n                \"version\", OpenmrsConstants.OPENMRS_VERSION\n        );\n    }\n\n<｜fim▁hole｜>        return map(\n                \"version\", build.getVersion(),\n                \"buildDate\", build.getBuildDate()\n        );\n    }\n\n    /**\n     * Helper method for constructing maps\n     * @param keyValPairs key-value pairs\n     * @return the map\n     */\n    protected static Map<String, Object> map(Object... keyValPairs) {\n        Map<String, Object> map = new LinkedHashMap<String, Object>();\n        for (int p = 0; p < keyValPairs.length; p += 2) {\n            String key = (String) keyValPairs[p];\n            Object val = keyValPairs[p + 1];\n            map.put(key, val);\n        }\n        return map;\n    }\n}<｜fim▁end｜>",
    "response": "    /**\n     * Gets KenyaEMR information\n     * @return the data points\n     */\n    public static Map<String, Object> getKenyaemrInformation() {\n        BuildProperties build = Context.getRegisteredComponents(BuildProperties.class).get(0);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package dk.sample.rest.common.rs.error;\n\nimport java.net.URI;\nimport java.util.Date;\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\nimport javax.ws.rs.core.UriBuilderException;\n\nimport dk.nykredit.jackson.dataformat.hal.HALLink;\nimport dk.nykredit.jackson.dataformat.hal.annotation.Link;\nimport dk.nykredit.jackson.dataformat.hal.annotation.Resource;\nimport dk.sample.rest.common.core.diagnostic.DiagnosticContext;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n@Resource\n@ApiModel(value = \"Error\", description = \"a simple error representation\")\npublic class ErrorRepresentation {\n    private static final String TIME_SUBSTITUTION_KEY = \"time\";\n    private static final String LOG_TOKEN_SUBSTITUTION_KEY = \"logToken\";\n    private static final String DETAILS_KEY = \"details\";\n\n    private String msg;\n    private String sid;\n    @Link\n    private HALLink resource;\n    @Link\n    private Map<String, Object> values;\n\n    public ErrorRepresentation() {\n    }\n\n    private ErrorRepresentation(Builder builder) {\n        if (builder.error == null) {\n            throw new IllegalArgumentException(\"An error code must be supplied\");\n        } else {\n            this.values = new LinkedHashMap<>();\n            String logToken = DiagnosticContext.getLogToken();\n            this.values.put(\"time\", builder.time);\n            this.values.put(\"logToken\", logToken);\n            this.values.putAll(builder.values);\n            this.sid = builder.error;\n            if (builder.details != null) {\n                this.values.put(\"details\", builder.details);\n            }\n<｜fim▁hole｜>    @ApiModelProperty(\n            access = \"public\",\n            name = \"message\",\n            example = \"this error happened due to this situation\",\n            value = \"the contents of an error in the body as information til API consumer(s).\")\n    public String getMessage() {\n        return this.msg;\n    }\n\n    @ApiModelProperty(\n            access = \"public\",\n            name = \"sid\",\n            value = \"the semantic id of the error.\")\n    public String getSid() {\n        return this.sid;\n    }\n\n    @ApiModelProperty(\n            access = \"public\",\n            name = \"values\",\n            value = \"a collection of validation issues which caused the error.\")\n    public Map<String, Object> getValues() {\n        return this.values;\n    }\n\n    @ApiModelProperty(\n            access = \"public\",\n            name = \"resource\",\n            notes = \"link to the origin of the cause of the error.\")\n    public HALLink getResource() {\n        return this.resource;\n    }\n\n    private HALLink createResourceLink(URI uri) throws IllegalArgumentException, UriBuilderException {\n        return (new dk.nykredit.jackson.dataformat.hal.HALLink.Builder(uri)).title(\"Link to failed resource\").build();\n    }\n\n    /**\n     * a simple builder for errors representation\n     */\n    public static class Builder {\n\n        private String msg;\n        private URI resourceUri;\n        private Map<String, Object> values = new LinkedHashMap<>();\n        private Date time = new Date();\n        private String error;\n        private Object details;\n\n        public Builder msg(String msg) {\n            this.msg = msg;\n            return this;\n        }\n\n        public Builder time(Date time) {\n            this.time = new Date(time.getTime());\n            return this;\n        }\n\n        public Builder resource(URI uri) {\n            this.resourceUri = uri;\n            return this;\n        }\n\n        public Builder value(String key, Object value) {\n            this.values.put(key, value);\n            return this;\n        }\n\n        public Builder details(Object details) {\n            this.details = details;\n            return this;\n        }\n\n        public ErrorRepresentation build() {\n            return new ErrorRepresentation(this);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "\n            this.resource = builder.resourceUri == null ? null : this.createResourceLink(builder.resourceUri);\n            this.msg = builder.msg;\n        }\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.athena.chameleon.engine.entity.xml.ejbjar.weblogic.v8_1;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlRootElement;\nimport javax.xml.bind.annotation.XmlType;\nimport javax.xml.bind.annotation.XmlValue;\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"\", propOrder = {\n    \"value\"\n})\n@XmlRootElement(name = \"run-as-principal-name\")\npublic class RunAsPrincipalName {\n\n    @XmlValue\n    protected String value;\n\n    /**\n     * value 속성의 값을 가져옵니다.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n    public String getvalue() {\n<｜fim▁hole｜>    }\n\n    /**\n     * value 속성의 값을 설정합니다.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n    public void setvalue(String value) {\n        this.value = value;\n    }\n\n}<｜fim▁end｜>",
    "response": "        return value;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.rivetlogic.services.model.impl;\n\nimport aQute.bnd.annotation.ProviderType;\n\nimport com.liferay.portal.kernel.model.CacheModel;\nimport com.liferay.portal.kernel.util.HashUtil;\nimport com.liferay.portal.kernel.util.StringBundler;\nimport com.liferay.portal.kernel.util.StringPool;\n\nimport com.rivetlogic.services.model.TipsOfTheDayCategories;\n\nimport java.io.Externalizable;\nimport java.io.IOException;\nimport java.io.ObjectInput;\nimport java.io.ObjectOutput;\n\n@ProviderType\npublic class TipsOfTheDayCategoriesCacheModel implements CacheModel<TipsOfTheDayCategories>,\n    Externalizable {\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n\n        if (!(obj instanceof TipsOfTheDayCategoriesCacheModel)) {\n            return false;\n        }\n\n        TipsOfTheDayCategoriesCacheModel tipsOfTheDayCategoriesCacheModel = (TipsOfTheDayCategoriesCacheModel)obj;\n\n        if (groupId == tipsOfTheDayCategoriesCacheModel.groupId) {\n            return true;\n        }\n\n        return false;\n    }\n\n    @Override\n    public int hashCode() {\n        return HashUtil.hash(0, groupId);\n    }\n\n    @Override\n    public String toString() {\n        StringBundler sb = new StringBundler(5);\n\n        sb.append(\"{groupId=\");\n        sb.append(groupId);\n        sb.append(\", categories=\");\n<｜fim▁hole｜>\n    @Override\n    public TipsOfTheDayCategories toEntityModel() {\n        TipsOfTheDayCategoriesImpl tipsOfTheDayCategoriesImpl = new TipsOfTheDayCategoriesImpl();\n\n        tipsOfTheDayCategoriesImpl.setGroupId(groupId);\n\n        if (categories == null) {\n            tipsOfTheDayCategoriesImpl.setCategories(StringPool.BLANK);\n        }\n        else {\n            tipsOfTheDayCategoriesImpl.setCategories(categories);\n        }\n\n        tipsOfTheDayCategoriesImpl.resetOriginalValues();\n\n        return tipsOfTheDayCategoriesImpl;\n    }\n\n    @Override\n    public void readExternal(ObjectInput objectInput) throws IOException {\n        groupId = objectInput.readLong();\n        categories = objectInput.readUTF();\n    }\n\n    @Override\n    public void writeExternal(ObjectOutput objectOutput)\n        throws IOException {\n        objectOutput.writeLong(groupId);\n\n        if (categories == null) {\n            objectOutput.writeUTF(StringPool.BLANK);\n        }\n        else {\n            objectOutput.writeUTF(categories);\n        }\n    }\n\n    public long groupId;\n    public String categories;\n}<｜fim▁end｜>",
    "response": "        sb.append(categories);\n        sb.append(\"}\");\n\n        return sb.toString();\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.s4game.core;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Map;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SpringApplicationContext implements ApplicationContextAware {\n\n    private static ApplicationContext applicationContext;\n\n    public SpringApplicationContext() {\n    }\n\n    public void setApplicationContext(ApplicationContext ctx) throws BeansException {\n        applicationContext = ctx;\n    }\n<｜fim▁hole｜>        return applicationContext.getBeansWithAnnotation(annotationType);\n    }\n\n    public <T> T getBean(Class<T> requiredType) throws BeansException {\n        return applicationContext.getBean(requiredType);\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    public Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import junit.framework.Assert;\nimport org.junit.Test;\nimport org.openqa.selenium.By;\nimport org.openqa.selenium.WebElement;\n\npublic class LiteCardItem extends TestBase {\n\n    private String adress = \"http://localhost/litecart/en/\";\n    private String itemName;\n\n    public static String[] getStrArray(String item) {\n        String[] colors = item.replace(\"rgba(\", \"\").replace(\")\", \"\").split(\",\");\n        int r = Integer.parseInt(colors[0].trim());\n        int g = Integer.parseInt(colors[1].trim());\n        int b = Integer.parseInt(colors[2].trim());\n        return colors;\n    }\n\n    @Test\n    public void checkItemName() {\n        driver.get(adress);\n        WebElement element = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[@class='name']\"));\n        String itemName1 = element.getText();\n        element.click();\n        String itemName2 = driver.findElement(By.xpath(\"//h1\")).getText();\n        Assert.assertEquals(itemName1, itemName2);\n    }\n\n    @Test\n    public void checkItemPrice() {\n        driver.get(adress);\n        WebElement element = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[@class='name']\"));\n        String itemPrice = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[4]/s\")).getText();\n        String itemSale = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[4]/strong\")).getText();\n        element.click();\n        String itemPriceNew = driver.findElement(By.xpath(\"//div[@class='price-wrapper']/s\")).getText();\n        String itemSaleNew = driver.findElement(By.xpath(\"//div[@class='price-wrapper']/strong\")).getText();\n        Assert.assertEquals(itemPrice, itemPriceNew);\n        Assert.assertEquals(itemSale, itemSaleNew);\n    }\n\n    @Test\n    public void checkItemPriceStyle() {\n        driver.get(adress);\n        WebElement element = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[@class='name']\"));\n        String itemPrice = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[4]/s\")).getTagName();\n        String itemSale = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[4]/strong\")).getTagName();\n        element.click();\n        String itemPriceNew = driver.findElement(By.xpath(\"//div[@class='price-wrapper']/s\")).getTagName();\n        String itemSaleNew = driver.findElement(By.xpath(\"//div[@class='price-wrapper']/strong\")).getTagName();\n        Assert.assertEquals(itemPrice, itemPriceNew);\n        Assert.assertEquals(itemPriceNew, \"s\");\n        Assert.assertEquals(itemSale, itemSaleNew);\n        Assert.assertEquals(itemSaleNew, \"strong\");\n    }\n\n    @Test\n    public void checkItemPriceHeight() {\n        driver.get(adress);\n        WebElement element = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[@class='name']\"));\n        int itemPrice = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[4]/s\")).getSize().getHeight();\n        int itemSale = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[4]/strong\")).getSize().getHeight();\n        Assert.assertTrue(itemPrice < itemSale);\n        element.click();\n        int itemPriceNew = driver.findElement(By.xpath(\"//div[@class='price-wrapper']/s\")).getSize().getHeight();\n        int itemSaleNew = driver.findElement(By.xpath(\"//div[@class='price-wrapper']/strong\")).getSize().getHeight();\n        Assert.assertTrue(itemPriceNew < itemSaleNew);\n    }\n\n    @Test\n    public void checkItemPriceColor() {\n        driver.get(adress);\n        WebElement element = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[@class='name']\"));\n        String itemPrice = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[4]/s\")).getCssValue(\"color\");\n        String[] colors = itemPrice.replace(\"rgba(\", \"\").replace(\")\", \"\").split(\",\");\n        int r1 = Integer.parseInt(colors[0].trim());\n        int g1 = Integer.parseInt(colors[1].trim());\n        int b1 = Integer.parseInt(colors[2].trim());\n        System.out.println(\"red \" + r1 + \" green \" + g1 + \" blue \" + b1);\n        Assert.assertEquals(r1, g1);\n        Assert.assertEquals(g1, b1);\n        element.click();\n        String itemPriceNew = driver.findElement(By.xpath(\"//div[@class='price-wrapper']/s\")).getCssValue(\"color\");\n        String[] colorsNew = itemPrice.replace(\"rgba(\", \"\").replace(\")\", \"\").split(\",\");\n        int r2 = Integer.parseInt(colorsNew[0].trim());\n        int g2 = Integer.parseInt(colorsNew[1].trim());\n        int b2 = Integer.parseInt(colorsNew[2].trim());\n        System.out.println(\"red \" + r2 + \" green \" + g2 + \" blue \" + b2);\n        Assert.assertEquals(r2, g2);\n        Assert.assertEquals(g2, b2);\n    }\n\n<｜fim▁hole｜>        String[] colors = itemSale.replace(\"rgba(\", \"\").replace(\")\", \"\").split(\",\");\n        int r1 = Integer.parseInt(colors[0].trim());\n        int g1 = Integer.parseInt(colors[1].trim());\n        int b1 = Integer.parseInt(colors[2].trim());\n        System.out.println(\"red \" + r1 + \" green \" + g1 + \" blue \" + b1);\n        Assert.assertEquals(0, g1);\n        Assert.assertEquals(g1, b1);\n        element.click();\n        String itemSaleNew = driver.findElement(By.xpath(\"//div[@class='price-wrapper']/strong\")).getCssValue(\"color\");\n        String[] colorsNew = itemSaleNew.replace(\"rgba(\", \"\").replace(\")\", \"\").split(\",\");\n        int r2 = Integer.parseInt(colorsNew[0].trim());\n        int g2 = Integer.parseInt(colorsNew[1].trim());\n        int b2 = Integer.parseInt(colorsNew[2].trim());\n        System.out.println(\"red \" + r2 + \" green \" + g2 + \" blue \" + b2);\n        Assert.assertEquals(0, g2);\n        Assert.assertEquals(g2, b2);\n    }\n\n}<｜fim▁end｜>",
    "response": "    @Test\n    public void checkItemSaleColor() {\n        driver.get(adress);\n        WebElement element = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[@class='name']\"));\n        String itemSale = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[4]/strong\")).getCssValue(\"color\");\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.cobraparser.util;\n\nimport java.util.ArrayList;\nimport java.util.EventListener;\nimport java.util.EventObject;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\n\npublic class LRUCache implements java.io.Serializable {\n  private static final long serialVersionUID = 940427225784212823L;\n  private int approxMaxSize;\n\n  private final Map<Object, OrderedValue> cacheMap = new HashMap<>();\n  private volatile transient EventDispatch2 removalEvent;\n\n  /**\n   * Ascending timestamp order. First is least recently used.\n   */\n  private final TreeSet<OrderedValue> timedSet = new TreeSet<>();\n  private int currentSize = 0;\n\n  public LRUCache(final int approxMaxSize) {\n<｜fim▁hole｜>    in.defaultReadObject();\n    // Need to initialize transient fields here.\n    this.removalEvent = new RemovalDispatch();\n  }\n\n  public int getApproxMaxSize() {\n    return approxMaxSize;\n  }\n\n  public void setApproxMaxSize(final int approxMaxSize) {\n    this.approxMaxSize = approxMaxSize;\n  }\n\n  public void put(final Object key, final Object value, final int approxSize) {\n    if (approxSize > this.approxMaxSize) {\n      // Can't be inserted.\n      return;\n    }\n    OrderedValue ordVal = this.cacheMap.get(key);\n    if (ordVal != null) {\n      if (ordVal.value != value) {\n        this.removalEvent.fireEvent(new RemovalEvent(this, ordVal.value));\n      }\n      this.currentSize += (approxSize - ordVal.approximateSize);\n      this.timedSet.remove(ordVal);\n      ordVal.approximateSize = approxSize;\n      ordVal.value = value;\n      ordVal.touch();\n      this.timedSet.add(ordVal);\n    } else {\n      ordVal = new OrderedValue(key, value, approxSize);\n      this.cacheMap.put(key, ordVal);\n      this.timedSet.add(ordVal);\n      this.currentSize += approxSize;\n    }\n    while (this.currentSize > this.approxMaxSize) {\n      this.removeLRU();\n    }\n  }\n\n  private void removeLRU() {\n    final OrderedValue ordVal = this.timedSet.first();\n    if (ordVal != null) {\n      this.removalEvent.fireEvent(new RemovalEvent(this, ordVal.value));\n      if (this.timedSet.remove(ordVal)) {\n        this.cacheMap.remove(ordVal.key);\n        this.currentSize -= ordVal.approximateSize;\n      } else {\n        throw new IllegalStateException(\"Could not remove existing tree node.\");\n      }\n    } else {\n      throw new IllegalStateException(\"Cannot remove LRU since the cache is empty.\");\n    }\n  }\n\n  public Object get(final Object key) {\n    final OrderedValue ordVal = this.cacheMap.get(key);\n    if (ordVal != null) {\n      this.timedSet.remove(ordVal);\n      ordVal.touch();\n      this.timedSet.add(ordVal);\n      return ordVal.value;\n    } else {\n      return null;\n    }\n  }\n\n  public Object remove(final Object key) {\n    final OrderedValue ordVal = this.cacheMap.get(key);\n    if (ordVal != null) {\n      this.removalEvent.fireEvent(new RemovalEvent(this, ordVal.value));\n      this.currentSize -= ordVal.approximateSize;\n      this.timedSet.remove(ordVal);\n      return ordVal.value;\n    } else {\n      return null;\n    }\n  }\n\n  public void addRemovalListener(final RemovalListener listener) {\n    this.removalEvent.addListener(listener);\n  }\n\n  public void removeRemovalListener(final RemovalListener listener) {\n    this.removalEvent.removeListener(listener);\n  }\n\n  public int getApproxSize() {\n    return this.currentSize;\n  }\n\n  public int getNumEntries() {\n    return this.cacheMap.size();\n  }\n\n  public List<EntryInfo> getEntryInfoList() {\n    final List<EntryInfo> list = new ArrayList<>();\n    final Iterator<OrderedValue> i = this.cacheMap.values().iterator();\n    while (i.hasNext()) {\n      final OrderedValue ov = i.next();\n      final Object value = ov.value;\n      final Class<? extends Object> vc = value == null ? null : value.getClass();\n      list.add(new EntryInfo(vc, ov.approximateSize));\n    }\n    return list;\n  }\n\n  public static class EntryInfo {\n    public final Class<? extends Object> valueClass;\n    public final int approximateSize;\n\n    public EntryInfo(final Class<? extends Object> valueClass, final int approximateSize) {\n      super();\n      this.valueClass = valueClass;\n      this.approximateSize = approximateSize;\n    }\n\n    @Override\n    public String toString() {\n      final Class<? extends Object> vc = this.valueClass;\n      final String vcName = vc == null ? \"<none>\" : vc.getName();\n      return \"[class=\" + vcName + \",approx-size=\" + this.approximateSize + \"]\";\n    }\n  }\n\n  private class OrderedValue implements Comparable<OrderedValue>, java.io.Serializable {\n    private static final long serialVersionUID = 340227625744215821L;\n    private long timestamp;\n    private int approximateSize;\n    private Object value;\n    private final Object key;\n\n    private OrderedValue(final Object key, final Object value, final int approxSize) {\n      this.key = key;\n      this.value = value;\n      this.approximateSize = approxSize;\n      this.touch();\n    }\n\n    private final void touch() {\n      this.timestamp = System.currentTimeMillis();\n    }\n\n    public int compareTo(final OrderedValue arg0) {\n      if (this == arg0) {\n        return 0;\n      }\n      final OrderedValue other = arg0;\n      final long diff = this.timestamp - other.timestamp;\n      if (diff > 0) {\n        return +1;\n      } else if (diff < 0) {\n        return -1;\n      }\n      int hc1 = System.identityHashCode(this);\n      int hc2 = System.identityHashCode(other);\n      if (hc1 == hc2) {\n        hc1 = System.identityHashCode(this.value);\n        hc2 = System.identityHashCode(other.value);\n      }\n      return hc1 - hc2;\n    }\n  }\n\n  private class RemovalDispatch extends EventDispatch2 {\n    @Override\n    protected void dispatchEvent(final EventListener listener, final EventObject event) {\n      ((RemovalListener) listener).removed((RemovalEvent) event);\n    }\n  }\n}<｜fim▁end｜>",
    "response": "    this.approxMaxSize = approxMaxSize;\n    this.removalEvent = new RemovalDispatch();\n  }\n\n  private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.hl7.fhir.instance.model.valuesets;\n\nimport org.hl7.fhir.instance.model.EnumFactory;\n\npublic class V3SpecialArrangementEnumFactory implements EnumFactory<V3SpecialArrangement> {\n\n  public V3SpecialArrangement fromCode(String codeString) throws IllegalArgumentException {\n    if (codeString == null || \"\".equals(codeString))\n      return null;\n    throw new IllegalArgumentException(\"Unknown V3SpecialArrangement code '\"+codeString+\"'\");\n  }\n\n  public String toCode(V3SpecialArrangement code) {\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "    return \"?\";\n  }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.hsjawanda.gaeobjectify.models;\n\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static com.hsjawanda.gaeobjectify.repackaged.commons.lang3.StringUtils.isNotBlank;\nimport static com.hsjawanda.gaeobjectify.repackaged.commons.lang3.StringUtils.normalizeSpace;\nimport static com.hsjawanda.gaeobjectify.repackaged.commons.lang3.StringUtils.trimToNull;\n\nimport java.util.logging.Logger;\n\nimport com.google.common.base.Optional;\nimport com.googlecode.objectify.annotation.Id;\nimport com.googlecode.objectify.annotation.Index;\nimport com.hsjawanda.gaeobjectify.data.GaeDataUtil;\nimport com.hsjawanda.gaeobjectify.repackaged.commons.lang3.tuple.Triple;\nimport com.hsjawanda.gaeobjectify.util.Constants;\nimport com.hsjawanda.gaeobjectify.util.SplitJoin;\n\nimport lombok.AccessLevel;\nimport lombok.Data;\nimport lombok.Setter;\nimport lombok.experimental.Accessors;\n\n@Data\n@Accessors(chain = true)\npublic class UniqueIndex {\n\n    @SuppressWarnings(\"unused\")\n    private static final Logger log = Logger.getLogger(UniqueIndex.class.getName());\n\n    @Id\n    @Setter(AccessLevel.NONE)\n    private String              id;\n\n    @Index\n    @Setter(AccessLevel.NONE)\n    private String              namespace;\n\n    @Setter(AccessLevel.NONE)\n    private String              value;\n\n    private String              refWebKey;\n\n    private UniqueIndex() {\n    }\n\n    public static UniqueIndex instance(String namespace, String value)\n            throws IllegalArgumentException {\n        Triple<String, String, String> triad = getTriple(namespace, value);\n        UniqueIndex ui = new UniqueIndex();\n        ui.id           = triad.getLeft();\n        ui.namespace    = triad.getMiddle();\n        ui.value        = triad.getRight();\n        return ui;\n    }\n<｜fim▁hole｜>        checkArgument(isNotBlank(refWebKey), \"refWebKey\" + Constants.NOT_BLANK);\n        this.refWebKey = refWebKey;\n        return this;\n    }\n\n    public <T> Optional<T> getReferenced() throws ClassCastException {\n        if (null == this.refWebKey)\n            return Optional.absent();\n        return GaeDataUtil.getByWebKey(this.refWebKey);\n    }\n\n    public static String genIdFor(String namespace, String value) {\n        Triple<String, String, String> triad = getTriple(namespace, value);\n        return triad.getLeft();\n    }\n\n    private static Triple<String, String, String> getTriple(String namespace, String value) {\n        checkArgument(isNotBlank(value), \"value\" + Constants.NOT_BLANK);\n        namespace = trimToNull(normalizeSpace(namespace));\n        value = normalizeSpace(value);\n        String id = SplitJoin.join(namespace, value); // TODO: slug-ify value??\n        return Triple.of(id, namespace, value);\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    public UniqueIndex setRefWebKey(String refWebKey) throws IllegalArgumentException {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.jabook.commute.controller;\n\nimport java.io.IOException;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport com.jabook.common.ControllerClassInfo;\nimport com.jabook.common.ControllerMethodInfo;\n\n@ControllerClassInfo(name = \"CommuteController\")\npublic class CommuteController {\n\n<｜fim▁hole｜>    public String index(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String login = (String) request.getSession().getAttribute(\"login\");\n        if (login != null && login.equals(\"\")) {\n            return \"redirect:\" + \"/myPage.do\";\n        } else {\n            return \"redirect:\" + \"/loginMemberForm.do\";\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    private String myDir = \"/commute\";\n\n    @ControllerMethodInfo(controllerPage = \"index.do\", template = \"main\" )\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ru.arsich.messenger;\n\nimport android.content.Context;\nimport android.support.test.InstrumentationRegistry;\nimport android.support.test.runner.AndroidJUnit4;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\n\nimport static org.junit.Assert.*;\n\n@RunWith(AndroidJUnit4.class)\npublic class ExampleInstrumentedTest {\n    @Test\n    public void useAppContext() throws Exception {\n        // Context of the app under test.\n<｜fim▁hole｜>    }\n}<｜fim▁end｜>",
    "response": "        Context appContext = InstrumentationRegistry.getTargetContext();\n\n        assertEquals(\"ru.arsich.messenger\", appContext.getPackageName());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package pax.TrainsSchedule.Util;\n\nimport java.text.DateFormat;\nimport java.text.DateFormatSymbols;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Locale;\n\npublic class Util {\n\n    public static String todayStr() {\n        Calendar calendar = Calendar.getInstance();\n        String sb = String.valueOf(calendar.get(Calendar.YEAR)) +\n                \"-\" +\n                (calendar.get(Calendar.MONTH) + 1) +\n                \"-\" +\n                calendar.get(Calendar.DAY_OF_MONTH);\n        return sb;\n    }\n\n    public static String tomorrowStr() {\n        Calendar calendar = Calendar.getInstance();\n        calendar.add(Calendar.DAY_OF_MONTH, 1);\n\n        String sb = String.valueOf(calendar.get(Calendar.YEAR)) +\n                \"-\" +\n                (calendar.get(Calendar.MONTH) + 1) +\n                \"-\" +\n                calendar.get(Calendar.DAY_OF_MONTH);\n        return sb;\n    }\n\n    public static String todayDayOfWeek() {\n        Calendar calendar = Calendar.getInstance();\n        return \"\" + calendar.get(Calendar.DAY_OF_WEEK);\n    }\n\n    public static String tomorrowDayOfWeek() {\n        Calendar calendar = Calendar.getInstance();\n        calendar.add(Calendar.DAY_OF_MONTH, 1);\n        return \"\" + calendar.get(Calendar.DAY_OF_WEEK);\n    }\n\n    public static boolean notEmpty(Object o) {\n        if (o == null) return false;\n        return !(o instanceof String && ((String) o).isEmpty());\n\n    }\n\n    public static String getDateRepresentation(long date) {\n\n        GregorianCalendar cur = new GregorianCalendar();\n        GregorianCalendar c = new GregorianCalendar();\n        c.setTimeInMillis(date);\n<｜fim▁hole｜>            return Multilanguage.onToday;\n        }\n\n        cur.add(Calendar.DAY_OF_MONTH, 1);\n        if (c.get(Calendar.YEAR) == cur.get(Calendar.YEAR) &&\n                c.get(Calendar.MONTH) == cur.get(Calendar.MONTH) &&\n                c.get(Calendar.DAY_OF_MONTH) == cur.get(Calendar.DAY_OF_MONTH)) {\n            return Multilanguage.onTomorrow;\n        }\n\n        Date dDate = new Date(date);\n        SimpleDateFormat df = new SimpleDateFormat(\"dd MMMM\", Locale.getDefault());\n        return Multilanguage.on + \" \" + df.format(dDate);\n    }\n\n    public static String getDateRepresentation(int year, int month, int day) {\n        GregorianCalendar c = new GregorianCalendar();\n        c.set(Calendar.YEAR, year);\n        c.set(Calendar.MONTH, month);\n        c.set(Calendar.DAY_OF_MONTH, day);\n\n        return getDateRepresentation(c.getTimeInMillis());\n    }\n\n    public static String getDateForSearch(long date) {\n        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.US);\n        return df.format(new Date(date));\n    }\n\n    public static int getDayOfWeek(String date) {\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.ENGLISH);\n        Calendar c = Calendar.getInstance();\n        try {\n            c.setTime(format.parse(date));\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n        return c.get(Calendar.DAY_OF_WEEK);\n    }\n\n    public static int getDayOfWeek(long date) {\n        Calendar c = Calendar.getInstance();\n        c.setTimeInMillis(date);\n        return c.get(Calendar.DAY_OF_WEEK);\n    }\n}<｜fim▁end｜>",
    "response": "        if (c.get(Calendar.YEAR) == cur.get(Calendar.YEAR) &&\n                c.get(Calendar.MONTH) == cur.get(Calendar.MONTH) &&\n                c.get(Calendar.DAY_OF_MONTH) == cur.get(Calendar.DAY_OF_MONTH)) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.rejasupotaro.android.kvs.internal;\n<｜fim▁hole｜>import java.lang.reflect.Type;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class TypeUtilsTest {\n    @Test\n    public void getGenericsTypesByClass() {\n        Class<? extends Serializer> clazz = SerializerImpl.class;\n        Type[] types = TypeUtils.getGenericsTypesByClass(clazz, Serializer.class);\n        assertThat(types.length).isEqualTo(2);\n        assertThat(types[0].getTypeName()).isEqualTo(\"java.lang.String\");\n        assertThat(types[1].getTypeName()).isEqualTo(\"java.lang.Integer\");\n    }\n\n    private interface Serializer<A, B> {\n    }\n\n    private class SerializerImpl implements Serializer<String, Integer> {\n    }\n}<｜fim▁end｜>",
    "response": "\nimport org.junit.Test;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.minecloud.db.redis.pubsub;\n\nimport io.minecloud.MineCloudException;\nimport io.minecloud.db.redis.RedisDatabase;\nimport io.minecloud.db.redis.msg.Message;\n\nimport java.io.IOException;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class SimpleRedisChannel extends RedisChannel {\n    private List<ChannelCallback> callbacks = new LinkedList<>();\n\n    private SimpleRedisChannel(String channel, RedisDatabase database) {\n        super(channel, database);\n    }\n\n    public static SimpleRedisChannel create(String channel, RedisDatabase database) {\n        return new SimpleRedisChannel(channel, database);\n    }\n\n    public SimpleRedisChannel addCallback(ChannelCallback callback) {\n        callbacks.add(callback);\n        return this;\n    }\n\n    public void removeCallback(int index) {\n        callbacks.remove(index);\n    }\n\n    public void removeCallback(ChannelCallback callback) {\n        callbacks.remove(callback);\n    }\n\n    @Override\n    public void handle(Message message) {\n        callbacks.forEach((c) -> {\n            try {\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "                c.call(message);\n            } catch (Exception ex) {\n                new MineCloudException(ex).printStackTrace();\n            }\n        });\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.codefupanda.instamojo.service.impl;\n\nimport static com.codefupanda.instamojo.constant.Constants.GET_OFFER_DETAILS_REST_URL;\nimport static com.codefupanda.instamojo.constant.Constants.GET_USER_OFFERS_REST_URL;\nimport static com.codefupanda.instamojo.constant.Constants.X_APP_ID;\nimport static com.codefupanda.instamojo.constant.Constants.X_APP_ID_VALUE;\nimport static com.codefupanda.instamojo.constant.Constants.X_AUTH_TOKEN;\n\nimport java.io.IOException;\n\nimport com.codefupanda.instamojo.exception.InstamojoException;\nimport com.codefupanda.instamojo.model.OfferDetail;\nimport com.codefupanda.instamojo.model.Offers;\nimport com.codefupanda.instamojo.model.User;\nimport com.codefupanda.instamojo.service.OfferService;\nimport com.codefupanda.instamojo.service.rest.RestCallBuilder;\nimport com.codefupanda.instamojo.service.util.JsonUtil;\n\npublic class OfferServiceImpl implements OfferService {\n\n    /**\n     * Get all offers of the logged in user\n     * \n     * @param user user object containing auth token\n     * @return all the offers of the user.\n     * @throws InstamojoException if not connected to Internet or some other network issues \n     */\n    @Override\n    public Offers getAllOffers(User user) throws InstamojoException {\n        RestCallBuilder builder = new RestCallBuilder(GET_USER_OFFERS_REST_URL);\n        builder.addHeader(X_APP_ID, X_APP_ID_VALUE);\n        builder.addHeader(X_AUTH_TOKEN, user.getToken());\n\n        try {\n            builder.doGet();\n            Offers offers = JsonUtil.toObject(builder.getResponse(), Offers.class);\n            return offers;\n        } catch (IOException e) {\n            // log error!\n            throw new InstamojoException();\n        }\n    }\n\n    /**\n     * Get details of the offer\n     * \n     * @param slug the slug of the offer whose details are required \n     * @param user the logged in user\n     * @return details of the offer\n     * @throws InstamojoException if not connected to Internet or some other network issues \n     */\n    @Override\n    public OfferDetail getOfferDetail(User user, String slug) throws InstamojoException {\n        RestCallBuilder builder = new RestCallBuilder(String.format(GET_OFFER_DETAILS_REST_URL, slug));\n        builder.addHeader(X_APP_ID, X_APP_ID_VALUE);\n<｜fim▁hole｜>        try {\n            builder.doGet();\n            return JsonUtil.toObject(builder.getResponse(), OfferDetail.class);\n        } catch (IOException e) {\n            // log error!\n            throw new InstamojoException();\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        builder.addHeader(X_AUTH_TOKEN, user.getToken());\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package abi38_0_0.expo.modules.camera.events;\n\nimport android.os.Bundle;\nimport androidx.core.util.Pools;\n\nimport java.util.List;\n\nimport abi38_0_0.org.unimodules.core.interfaces.services.EventEmitter;\nimport abi38_0_0.expo.modules.camera.CameraViewManager;\n\npublic class FacesDetectedEvent extends EventEmitter.BaseEvent {\n  private static final Pools.SynchronizedPool<FacesDetectedEvent> EVENTS_POOL =\n      new Pools.SynchronizedPool<>(3);\n\n  private List<Bundle> mFaces;\n  private int mViewTag;\n\n  private FacesDetectedEvent() {}\n\n  public static FacesDetectedEvent obtain(int viewTag, List<Bundle> faces) {\n    FacesDetectedEvent event = EVENTS_POOL.acquire();\n    if (event == null) {\n      event = new FacesDetectedEvent();\n    }\n    event.init(viewTag, faces);\n    return event;\n  }\n\n  private void init(int viewTag, List<Bundle> faces) {\n    mViewTag = viewTag;\n    mFaces = faces;\n  }\n\n<｜fim▁hole｜>  @Override\n  public short getCoalescingKey() {\n    if (mFaces.size() > Short.MAX_VALUE) {\n      return Short.MAX_VALUE;\n    }\n\n    return (short) mFaces.size();\n  }\n\n  @Override\n  public String getEventName() {\n    return CameraViewManager.Events.EVENT_ON_FACES_DETECTED.toString();\n  }\n\n  @Override\n  public Bundle getEventBody() {\n    Bundle event = new Bundle();\n    event.putString(\"type\", \"face\");\n    Bundle[] bundle = new Bundle[mFaces.size()];\n    mFaces.toArray(bundle);\n    event.putParcelableArray(\"faces\", bundle);\n    event.putInt(\"target\", mViewTag);\n    return event;\n  }\n}<｜fim▁end｜>",
    "response": "  /**\n   * note(@sjchmiela)\n   * Should events about detected faces coalesce, the best strategy will be\n   * to ensure that events with different faces count are always being transmitted.\n   */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.speakingfish.swing.util;\n\nimport java.io.IOException;\n\nimport javax.swing.text.Document;\n\nimport static javax.swing.SwingUtilities.*;\n\npublic class SynchronizedTextDocumentWriter extends TextDocumentWriter {\n\n<｜fim▁hole｜>        final char[] value = new char[len];\n        System.arraycopy(\n            cbuf, off,\n            value, 0,\n            len\n            );\n        invokeLater(new Runnable() {\n            public void run() {\n                try {\n                    SynchronizedTextDocumentWriter.super.write(value, 0, value.length);\n                } catch(IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n\n}<｜fim▁end｜>",
    "response": "    public SynchronizedTextDocumentWriter(Document document) {\n        super(document);\n    }\n\n    @Override public void write(char[] cbuf, int off, int len) throws IOException {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package datareader;\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.TimeUnit;\n\nimport deviceManager.DeviceManager;\nimport riskAssessment.RiskCalculatorGeNIe;\n\npublic class OpenICEMonitor {\n\n    private static OpenICEMonitor singleton = null;\n\n    private OpenICEListener listener;\n\n    private ExecutorService executor = null;\n\n    private RiskCalculatorGeNIe riskCalculator;\n\n    private OpenICEMonitor() {\n        listener = new OpenICEListener();\n        listener.setDeviceManager(DeviceManager.getInstance());\n        riskCalculator = new RiskCalculatorGeNIe();\n        executor = Executors.newFixedThreadPool(1);\n        executor.submit(listener);\n        executor.shutdown();\n        System.out.println(\"all tasks subitted...\");\n\n        try {\n            executor.awaitTermination(2, TimeUnit.DAYS);\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    public static OpenICEMonitor getInstance() {\n        if (singleton == null) {\n            singleton = new OpenICEMonitor();\n        }\n        return singleton;\n    }\n\n    public static void main(String[] args) {\n        licenceSMILE();\n        System.out.println(\"OpenICEMonitor.main() - creating the monitor...\");\n        OpenICEMonitor monitor = OpenICEMonitor.getInstance();\n        System.out.println(\"all monitors subitted...\");\n        DynamicLineChart.main(null);\n\n        System.out.println(\"OpenICEMonitor.main() - monitor created ...\");\n\n        // Pause for 30 seconds and force quitting the app (because we're\n        // looping infinitely)\n        try {\n            Thread.sleep(30000000);\n        } catch (InterruptedException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n        System.exit(0);\n\n    }\n\n    public RiskCalculatorGeNIe getRiskCalculator() {\n        return riskCalculator;\n    }\n\n    public void setRiskCalculator(RiskCalculatorGeNIe riskCalculator) {\n        this.riskCalculator = riskCalculator;\n    }\n\n    public static void licenceSMILE() {\n        // License issued by BayesFusion Licensing Server\n        // This code must be executed before any other jSMILE object is created\n        new smile.License(\n            \"SMILE LICENSE a7362980 fc745f9d d3f0336c \" +\n            \"THIS IS AN ACADEMIC LICENSE AND CAN BE USED \" +\n            \"SOLELY FOR ACADEMIC RESEARCH AND TEACHING, \" +\n<｜fim▁hole｜>            \"Issued by BayesFusion activation server\",\n            new byte[] {\n            -63,-54,118,-73,-20,-6,-14,-105,-83,-105,-60,-52,-51,123,-103,-10,\n            -95,-88,21,-103,-41,-47,2,98,65,-7,61,99,-61,-87,-90,118,\n            0,-63,65,-52,0,109,-70,-127,119,-110,-15,93,-110,-11,-5,35,\n            7,-15,-110,1,104,42,-58,76,56,59,-14,-85,75,93,116,-40\n            }\n        );\n    }\n\n}<｜fim▁end｜>",
    "response": "            \"AS DEFINED IN THE BAYESFUSION ACADEMIC \" +\n            \"SOFTWARE LICENSING AGREEMENT. \" +\n            \"Serial #: 4ovxzxnfrsl1jb5f4e2ffk6fh \" +\n            \"Issued for: Fabio Luiz Leite J\\u00fanior (fabioleite@gmail.com) \" +\n            \"Academic institution: TU Kaisrslautern \" +\n            \"Valid until: 2019-01-25 \" +\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package javax.faces.application;\n\nimport java.io.IOException;\nimport javax.faces.component.UIViewRoot;\nimport javax.faces.context.FacesContext;\nimport javax.faces.FacesWrapper;\n\npublic abstract class StateManagerWrapper extends StateManager implements FacesWrapper<StateManager>\n{\n\n    public abstract StateManager getWrapped();\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    public StateManager.SerializedView saveSerializedView(FacesContext context)\n    {\n        return getWrapped().saveSerializedView(context);\n    }\n\n    @Override\n    public Object saveView(FacesContext context)\n    {\n        return getWrapped().saveView(context);\n    }\n\n    @Override\n    public boolean isSavingStateInClient(FacesContext context)\n    {\n        return getWrapped().isSavingStateInClient(context);\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    protected Object getTreeStructureToSave(FacesContext context)\n    {\n        return getWrapped().getTreeStructureToSave(context);\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    protected Object getComponentStateToSave(FacesContext context)\n    {\n        return getWrapped().getComponentStateToSave(context);\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    public void writeState(FacesContext context, StateManager.SerializedView state) throws IOException\n    {\n        getWrapped().writeState(context, state);\n    }\n<｜fim▁hole｜>    }\n\n    @Override\n    public UIViewRoot restoreView(FacesContext context, String viewId, String renderKitId)\n    {\n        return getWrapped().restoreView(context, viewId, renderKitId);\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    protected UIViewRoot restoreTreeStructure(FacesContext context, String viewId, String renderKitId)\n    {\n        return getWrapped().restoreTreeStructure(context, viewId, renderKitId);\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    protected void restoreComponentState(FacesContext context, UIViewRoot viewRoot, String renderKitId)\n    {\n        getWrapped().restoreComponentState(context, viewRoot, renderKitId);\n    }\n\n    @Override\n    public String getViewState(FacesContext context)\n    {\n        return getWrapped().getViewState(context);\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    @Override\n    public void writeState(FacesContext context, Object state) throws IOException\n    {\n        getWrapped().writeState(context, state);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.silverpeas.core.security;\n\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.silverpeas.core.admin.user.model.User;\nimport org.silverpeas.core.cache.model.SimpleCache;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.*;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\nimport static org.silverpeas.core.cache.service.CacheServiceProvider.getRequestCacheService;\n\npublic class SecurableRequestCacheTest {\n\n  private static final String ENTITY_A_UUID = \"entity_A_uuid\";\n  private static final String ENTITY_B_UUID = \"entity_B_uuid\";\n  private static final User USER_26 = createUser(\"26\");\n  private static final User USER_38 = createUser(\"38\");\n\n  private List<String> authorizedSupplierCallCount;\n\n  private static User createUser(String userId) {\n    User user = mock(User.class);\n<｜fim▁hole｜>  }\n\n  @BeforeEach\n  public void setup() {\n    authorizedSupplierCallCount = new ArrayList<>();\n  }\n\n  @AfterEach\n  public void clear() {\n    getRequestCacheService().clearAllCaches();\n  }\n\n  @Test\n  public void canBeAccessedByShouldBeCached() throws Exception {\n    final String cacheKey = SecurableRequestCache\n        .getCacheKey(USER_26, ENTITY_A_UUID, SecurableRequestCache.CAN_BE_ACCESSED_BY_KEY_SUFFIX);\n    assertThat(getRequestCache().get(cacheKey), nullValue());\n    for (int i = 0; i < 10; i++) {\n      boolean canBeAccessedBy =\n          SecurableRequestCache.canBeAccessedBy(USER_26, ENTITY_A_UUID, (u) -> {\n            authorizedSupplierCallCount.add(\"ACCESSION CONTEXT CALL\");\n            return true;\n          });\n      assertThat(canBeAccessedBy, is(true));\n      assertThat(getRequestCache().get(cacheKey), notNullValue());\n    }\n    assertThat(authorizedSupplierCallCount, hasSize(1));\n  }\n\n  @Test\n  public void canBeModifiedByShouldBeCached() throws Exception {\n    final String cacheKey = SecurableRequestCache\n        .getCacheKey(USER_38, ENTITY_B_UUID, SecurableRequestCache.CAN_BE_MODIFIED_BY_KEY_SUFFIX);\n    assertThat(getRequestCache().get(cacheKey), nullValue());\n    for (int i = 0; i < 10; i++) {\n      boolean canBeModifiedBy =\n          SecurableRequestCache.canBeModifiedBy(USER_38, ENTITY_B_UUID, (u) -> {\n            authorizedSupplierCallCount.add(\"MODIFICATION CONTEXT CALL\");\n            return false;\n          });\n      assertThat(canBeModifiedBy, is(false));\n      assertThat(getRequestCache().get(cacheKey), notNullValue());\n    }\n    assertThat(authorizedSupplierCallCount, hasSize(1));\n  }\n\n  @Test\n  public void canBeDeletedByShouldBeCached() throws Exception {\n    final String cacheKey = SecurableRequestCache\n        .getCacheKey(USER_26, ENTITY_A_UUID, SecurableRequestCache.CAN_BE_DELETED_BY_KEY_SUFFIX);\n    assertThat(getRequestCache().get(cacheKey), nullValue());\n    for (int i = 0; i < 10; i++) {\n      boolean canBeDeletedBy = SecurableRequestCache.canBeDeletedBy(USER_26, ENTITY_A_UUID, (u) -> {\n        authorizedSupplierCallCount.add(\"DELETION CONTEXT CALL\");\n        return false;\n      });\n      assertThat(canBeDeletedBy, is(false));\n      assertThat(getRequestCache().get(cacheKey), notNullValue());\n    }\n    assertThat(authorizedSupplierCallCount, hasSize(1));\n  }\n\n  @Test\n  public void canBeXxxByShouldBeCachedAndIsolated() throws Exception {\n    callAllVerificationSeveralTimes(USER_26, ENTITY_A_UUID);\n    assertThat(authorizedSupplierCallCount, hasSize(3));\n  }\n\n  @Test\n  public void clearShouldRemoveOnlyAimedData() throws Exception {\n    // Not yet cached\n    callAllVerificationSeveralTimes(USER_38, ENTITY_B_UUID);\n    assertThat(authorizedSupplierCallCount, hasSize(3));\n    // Cache cleared\n    SecurableRequestCache.clear(ENTITY_B_UUID);\n    // Cache again\n    callAllVerificationSeveralTimes(USER_38, ENTITY_B_UUID);\n    assertThat(authorizedSupplierCallCount, hasSize(6));\n    // Call the clear about an other entity, no data cleared from cache\n    SecurableRequestCache.clear(ENTITY_A_UUID);\n    callAllVerificationSeveralTimes(USER_38, ENTITY_B_UUID);\n    // So already cached\n    assertThat(authorizedSupplierCallCount, hasSize(6));\n    // Cache with an other user (same entity)\n    callAllVerificationSeveralTimes(USER_26, ENTITY_B_UUID);\n    assertThat(authorizedSupplierCallCount, hasSize(9));\n    // Cache 2 other cases (the 2 others are already cached\n    callAllVerificationSeveralTimes(USER_38, ENTITY_A_UUID);\n    callAllVerificationSeveralTimes(USER_26, ENTITY_A_UUID);\n    callAllVerificationSeveralTimes(USER_38, ENTITY_B_UUID);\n    callAllVerificationSeveralTimes(USER_26, ENTITY_B_UUID);\n    assertThat(authorizedSupplierCallCount, hasSize(15));\n    // Clear cache about entity B\n    SecurableRequestCache.clear(ENTITY_B_UUID);\n    // Data about entity A have not been cleared otherwise authorizedSupplierCallCount size\n    // should be 27 instead of 21\n    callAllVerificationSeveralTimes(USER_38, ENTITY_A_UUID);\n    callAllVerificationSeveralTimes(USER_26, ENTITY_A_UUID);\n    callAllVerificationSeveralTimes(USER_38, ENTITY_B_UUID);\n    callAllVerificationSeveralTimes(USER_26, ENTITY_B_UUID);\n    assertThat(authorizedSupplierCallCount, hasSize(21));\n  }\n\n  private void callAllVerificationSeveralTimes(final User user, final String uuid) {\n    final String suffix = user.getId() + \"_\" + uuid;\n    for (int i = 0; i < 10; i++) {\n      SecurableRequestCache.canBeAccessedBy(user, uuid, (u) -> {\n        authorizedSupplierCallCount.add(\"ACCESSION CONTEXT CALL_\" + suffix);\n        return true;\n      });\n      SecurableRequestCache.canBeModifiedBy(user, uuid, (u) -> {\n        authorizedSupplierCallCount.add(\"MODIFICATION CONTEXT CALL_\" + suffix);\n        return true;\n      });\n      SecurableRequestCache.canBeDeletedBy(user, uuid, (u) -> {\n        authorizedSupplierCallCount.add(\"DELETION CONTEXT CALL_\" + suffix);\n        return true;\n      });\n    }\n  }\n\n  private SimpleCache getRequestCache() {\n    return getRequestCacheService().getCache();\n  }\n}<｜fim▁end｜>",
    "response": "    when(user.getId()).thenReturn(userId);\n    return user;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package de.spqrinfo.vppserver.schema.ippclient;\n\nimport javax.xml.bind.annotation.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"\", propOrder = {\"attributeValue\"})\n@XmlRootElement(name = \"attribute\")\npublic class Attribute {\n\n    @XmlElement(name = \"attribute-value\")\n    protected List<AttributeValue> attributeValue;\n    @XmlAttribute(required = true)\n<｜fim▁hole｜>    /**\n     * Gets the value of the attributeValue property.\n     * <p>\n     * <p>\n     * This accessor method returns a reference to the live list, not a snapshot.\n     * Therefore any modification you make to the returned list will be present\n     * inside the JAXB object. This is why there is not a <CODE>set</CODE> method\n     * for the attributeValue property.\n     * <p>\n     * <p>\n     * For example, to add a new item, do as follows:\n     * <p>\n     * <pre>\n     * getAttributeValue().add(newItem);\n     * </pre>\n     * <p>\n     * <p>\n     * <p>\n     * Objects of the following type(s) are allowed in the list\n     * {@link AttributeValue }\n     */\n    public List<AttributeValue> getAttributeValue() {\n        if (attributeValue == null) {\n            attributeValue = new ArrayList<AttributeValue>();\n        }\n        return this.attributeValue;\n    }\n\n    /**\n     * Gets the value of the name property.\n     *\n     * @return possible object is {@link String }\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * Sets the value of the name property.\n     *\n     * @param value allowed object is {@link String }\n     */\n    public void setName(String value) {\n        this.name = value;\n    }\n\n    /**\n     * Gets the value of the description property.\n     *\n     * @return possible object is {@link String }\n     */\n    public String getDescription() {\n        return description;\n    }\n\n    /**\n     * Sets the value of the description property.\n     *\n     * @param value allowed object is {@link String }\n     */\n    public void setDescription(String value) {\n        this.description = value;\n    }\n\n}<｜fim▁end｜>",
    "response": "    protected String name;\n    @XmlAttribute\n    protected String description;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package gov.nasa.arc.spife.ui.timeline.action;\n\nimport gov.nasa.arc.spife.ui.timeline.Timeline;\nimport gov.nasa.arc.spife.ui.timeline.ToolImpl;\nimport gov.nasa.arc.spife.ui.timeline.ToolImpl.IToolListener;\nimport gov.nasa.arc.spife.ui.timeline.ZoomSweepTool;\nimport gov.nasa.arc.spife.ui.timeline.model.ZoomManager;\n\nimport org.eclipse.core.commands.ExecutionEvent;\nimport org.eclipse.core.commands.ExecutionException;\nimport org.eclipse.core.commands.HandlerEvent;\nimport org.eclipse.gef.editparts.ZoomListener;\nimport org.eclipse.swt.widgets.Display;\nimport org.eclipse.ui.commands.ICommandService;\nimport org.eclipse.ui.handlers.HandlerUtil;\n\npublic class ZoomSweepToolHandler extends ZoomTimelineCommandHandler implements IToolListener {\n\n    public static final String COMMAND_ID = \"gov.nasa.arc.spife.ui.timeline.zoom.sweep\";\n\n    public static final String PARAMETER_TOOL = \"gov.nasa.arc.spife.ui.timeline.tool\";\n\n    private static final String VALUE_ZOOM_SWEEP = \"zoom.sweep\";\n\n    public static final String ZOOM_SWEEP_TOOGLE_STATE = \"org.eclipse.ui.commands.toggleState\";\n\n    private static final ToolImpl TOOL_ZOOM_SWEEP = new ZoomSweepTool();    \n\n    private ToolImpl tool = null;\n\n    public ZoomSweepToolHandler() {\n        TOOL_ZOOM_SWEEP.setUnloadWhenFinished(true);\n        TOOL_ZOOM_SWEEP.addToolListener(this);\n    }\n\n    @Override\n    public void dispose() {\n        super.dispose();\n        tool = null;\n    }\n\n    /**\n     * @throws ExecutionException\n     */\n    @Override\n    public Object execute(ExecutionEvent event) throws ExecutionException {\n        ((ZoomSweepTool) TOOL_ZOOM_SWEEP).changeButtonState(true);\n\n        String value = event.getParameter(PARAMETER_TOOL);\n        ToolImpl tool = null;\n\n        Timeline timeline = getTimeline(event);\n\n        if (VALUE_ZOOM_SWEEP.equalsIgnoreCase(value)) {\n            if(TOOL_ZOOM_SWEEP.isActive()) {\n                TOOL_ZOOM_SWEEP.deactivate();\n            }\n\n            else {\n                tool = TOOL_ZOOM_SWEEP;\n            }\n        } else {\n            return null;\n        }\n\n        if (tool == null || tool.isActive()) {\n            return null;\n        }\n\n        this.tool = tool;\n\n        if (timeline != null) {\n            timeline.getEditDomain().setActiveTool(tool);\n        }\n\n        // update our radio button states ... get the service from a place\n        // that's most appropriate\n        ICommandService service = (ICommandService) HandlerUtil\n                .getActiveWorkbenchWindowChecked(event).getService(\n                        ICommandService.class);\n        service.refreshElements(event.getCommand().getId(), null);\n        return null;\n    }\n\n    @Override\n    public void handleEvent(ToolListenerEvent event) {\n        if (this.tool == event.getTool()\n                && event.getType() == ToolListenerEvent.TYPE.DEACTIVATED) {\n            fireHandlerChanged(new HandlerEvent(this, false, true));\n        }\n    }\n\n    @Override\n    public String getCommandId() {\n        return COMMAND_ID;\n    }\n\n    @Override\n    public void updateEnablement() {\n        if (Display.getCurrent() != null) {\n            if (isTimelineActive()) {\n                ZoomManager zoomManager = ZoomTimelineCommandHandler.getZoomManager();\n                boolean enabled = false;\n                if(zoomManager != null) {\n                    ZoomListener zoomListener = zoomManagerToZoomListenerMap.get(zoomManager);\n                    if(zoomListener == null) {\n                        zoomManager.addZoomListener(this);\n                        zoomManagerToZoomListenerMap.put(zoomManager, this);\n                    }\n                    enabled = zoomManager.canZoomIn();\n<｜fim▁hole｜>    }\n\n}<｜fim▁end｜>",
    "response": "                }\n                setBaseEnabled(enabled);\n            } else {\n                setBaseEnabled(false);\n            }\n        } \n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.shadowsocks.zirco.ui.activities;\n\nimport org.shadowsocks.R;\nimport org.shadowsocks.zirco.controllers.Controller;\nimport org.shadowsocks.zirco.utils.Constants;\n\nimport android.app.TabActivity;\nimport android.content.Intent;\nimport android.content.res.Configuration;\nimport android.content.res.Resources;\nimport android.os.Bundle;\nimport android.preference.PreferenceManager;\nimport android.view.Window;\n<｜fim▁hole｜>    @Override\n    public void onConfigurationChanged(Configuration newConfig) {\n        super.onConfigurationChanged(newConfig);\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        if (Controller.getInstance().getPreferences()\n                .getBoolean(Constants.PREFERENCES_SHOW_FULL_SCREEN, false)) {\n            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\n                    WindowManager.LayoutParams.FLAG_FULLSCREEN);\n        }\n\n        if (Controller\n                .getInstance()\n                .getPreferences()\n                .getBoolean(Constants.PREFERENCES_GENERAL_HIDE_TITLE_BARS, true)) {\n            requestWindowFeature(Window.FEATURE_NO_TITLE);\n        }\n\n        setContentView(R.layout.bookmarks_history_activity);\n\n        setTitle(R.string.BookmarksListActivity_Title);\n\n        Resources res = getResources();\n        TabHost tabHost = getTabHost();\n        TabHost.TabSpec spec;\n        Intent intent;\n\n        // Bookmarks\n        intent = new Intent().setClass(this, BookmarksListActivity.class);\n\n        spec = tabHost\n                .newTabSpec(\"bookmarks\")\n                .setIndicator(res.getString(R.string.Main_MenuShowBookmarks),\n                        res.getDrawable(R.drawable.ic_tab_bookmarks))\n                .setContent(intent);\n        tabHost.addTab(spec);\n\n        // History\n        intent = new Intent().setClass(this, HistoryListActivity.class);\n\n        spec = tabHost\n                .newTabSpec(\"history\")\n                .setIndicator(res.getString(R.string.Main_MenuShowHistory),\n                        res.getDrawable(R.drawable.ic_tab_history))\n                .setContent(intent);\n        tabHost.addTab(spec);\n\n        if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean(\n                Constants.PREFERENCE_USE_WEAVE, false)) {\n            // Weave bookmarks\n            intent = new Intent().setClass(this,\n                    WeaveBookmarksListActivity.class);\n\n            spec = tabHost\n                    .newTabSpec(\"weave\")\n                    .setIndicator(\n                            res.getString(R.string.WeaveBookmarksListActivity_Title),\n                            res.getDrawable(R.drawable.ic_tab_weave))\n                    .setContent(intent);\n            tabHost.addTab(spec);\n        }\n\n        tabHost.setCurrentTab(0);\n\n        tabHost.setOnTabChangedListener(new OnTabChangeListener() {\n            @Override\n            public void onTabChanged(String tabId) {\n                if (tabId.equals(\"bookmarks\")) {\n                    setTitle(R.string.BookmarksListActivity_Title);\n                } else if (tabId.equals(\"history\")) {\n                    setTitle(R.string.HistoryListActivity_Title);\n                } else if (tabId.equals(\"weave\")) {\n                    setTitle(R.string.WeaveBookmarksListActivity_Title);\n                } else {\n                    setTitle(R.string.ApplicationName);\n                }\n            }\n        });\n    }\n}<｜fim▁end｜>",
    "response": "import android.view.WindowManager;\nimport android.widget.TabHost;\nimport android.widget.TabHost.OnTabChangeListener;\n\npublic class BookmarksHistoryActivity extends TabActivity {\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.doordeck.simplegpio.gpio.io;\n\nimport com.doordeck.simplegpio.gpio.event.PollResult;\nimport com.doordeck.simplegpio.spi.InputPoller;\nimport com.doordeck.simplegpio.util.BulldogUtil;\n\nimport java.nio.file.Path;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicBoolean;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic abstract class AbstractInputPoller implements InputPoller, Runnable {\n\n    private static final AtomicInteger THREAD_COUNT = new AtomicInteger();\n\n    private final Thread listenerThread = new Thread(this, \"GPIO-Poller-\" + THREAD_COUNT);\n    private final AtomicBoolean running = new AtomicBoolean(false);\n    private final Path filename;\n\n    private List<InputPollListener> listeners = new ArrayList<>();\n\n    public AbstractInputPoller(Path filename) {\n        listenerThread.setDaemon(true);\n\n        if (filename == null) {\n            throw new IllegalArgumentException(\"Filename cannot be null\");\n        }\n\n        this.filename = filename;\n    }\n\n    public abstract void setup();\n\n    public void start() {\n        setup();\n        if (running.compareAndSet(false, true) && !listenerThread.isAlive()) {\n            listenerThread.start();\n        }\n    }\n\n    public void stop() {\n        if (running.compareAndSet(true, false)) {\n            //block until thread is dead\n            while (listenerThread.isAlive()) {\n                BulldogUtil.sleepMs(10);\n            }\n\n            teardown();\n        }\n    }\n\n    public abstract void teardown();\n\n    protected Path getFilename() {\n        return filename;\n    }\n\n    protected AtomicBoolean getRunning() {\n        return running;\n    }\n\n<｜fim▁hole｜>    }\n\n    public void addListener(InputPollListener listener) {\n        this.listeners.add(listener);\n    }\n\n    public void removeListener(InputPollListener listener) {\n        this.listeners.remove(listener);\n    }\n\n    public void clearListeners() {\n        this.listeners.clear();\n    }\n\n    protected void fireEpollEvent(PollResult[] results) {\n        for (InputPollListener listener : this.listeners) {\n            listener.processEpollResults(results);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    public boolean isRunning() {\n        return listenerThread.isAlive();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.example.restapi.Database;\n\nimport com.example.restapi.Model.Challenge;\nimport org.skife.jdbi.v2.SQLStatement;\nimport org.skife.jdbi.v2.StatementContext;\nimport org.skife.jdbi.v2.sqlobject.*;\nimport org.skife.jdbi.v2.sqlobject.customizers.Mapper;\nimport org.skife.jdbi.v2.tweak.ResultSetMapper;\n\nimport java.lang.annotation.*;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\n\npublic interface Challenges {\n    String ID = \"id\";\n    String SENDER = \"sender\";\n    String RECEIVER = \"receiver\";\n    String CREATED_AT = \"createdat\";\n    String SENDER_SCORE = \"senderscore\";\n    String RECEIVER_SCORE = \"receiverscore\";\n    String STATUS = \"status\";\n\n    @Mapper(ChallengeMapper.class)\n    @SqlQuery(\"SELECT * FROM challenges WHERE \" + ID + \" = :id\")\n    Challenge getById(@Bind(\"id\") String id);\n\n    @Mapper(ChallengeMapper.class)\n    @SqlQuery(\"SELECT * FROM challenges WHERE \" + SENDER + \" = :me OR \" + RECEIVER + \" = :me\")\n    List<Challenge> getFor(@Bind(\"me\") String me);\n\n    @SqlUpdate(\"INSERT INTO challenges (\" + ID + \",\" + SENDER + \",\" + RECEIVER + \",\" + CREATED_AT + \",\"\n            + SENDER_SCORE + \",\" + RECEIVER_SCORE + \",\" + STATUS + \") VALUES (:\" + ID + \",:\" + SENDER + \",:\" + RECEIVER\n            + \",:\" + CREATED_AT  + \",:\" + SENDER_SCORE + \",:\" + RECEIVER_SCORE + \",:\" + STATUS + \")\")\n    void insertChallenge(@BindChallenge Challenge challenge);\n\n    @SqlUpdate(\"UPDATE challenges SET \" + STATUS + \" = :status WHERE \" + ID + \" = :id\")\n    void setStatus(@Bind(\"status\") int status, @Bind(\"id\") String id);\n\n    @SqlUpdate(\"UPDATE challenges SET \" + SENDER_SCORE + \" = :score WHERE \" + ID + \" = :id\")\n    void setSenderScore(@Bind(\"id\") String id, @Bind(\"score\") int score);\n\n    @SqlUpdate(\"UPDATE challenges SET \" + RECEIVER_SCORE + \" = :score WHERE \" + ID + \" = :id\")\n    void setReceiverScore(@Bind(\"id\") String id, @Bind(\"score\") int score);\n\n    class ChallengeMapper implements ResultSetMapper<Challenge> {\n        @Override\n        public Challenge map(int i, ResultSet resultSet, StatementContext statementContext) throws SQLException {\n            return new Challenge(resultSet.getString(ID),\n                    resultSet.getString(SENDER),\n                    resultSet.getString(RECEIVER),\n                    resultSet.getString(CREATED_AT),\n                    resultSet.getInt(SENDER_SCORE),\n                    resultSet.getInt(RECEIVER_SCORE),\n                    resultSet.getInt(STATUS));\n        }\n    }\n\n    @BindingAnnotation(Challenges.BindChallenge.ChallengeBinderFactory.class)\n    @Retention(RetentionPolicy.RUNTIME)\n    @Target({ElementType.PARAMETER})\n    @interface BindChallenge {\n        class ChallengeBinderFactory implements BinderFactory {\n            public Binder build(Annotation annotation) {\n                return new Binder<Challenges.BindChallenge, Challenge>() {\n                    public void bind(SQLStatement q, Challenges.BindChallenge bind, Challenge arg) {\n                        q.bind(ID, arg.getId());\n<｜fim▁hole｜>                        q.bind(STATUS, arg.getStatus());\n                    }\n                };\n            }\n        }\n    }\n}<｜fim▁end｜>",
    "response": "                        q.bind(SENDER, arg.getSender());\n                        q.bind(RECEIVER, arg.getReceiver());\n                        q.bind(CREATED_AT, arg.getCreatedAt());\n                        q.bind(SENDER_SCORE, arg.getSenderScore());\n                        q.bind(RECEIVER_SCORE, arg.getRecieverScore());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.n52.io.response.dataset.profile;\n\nimport java.math.BigDecimal;\nimport java.util.Comparator;\nimport java.util.Objects;\n\nimport com.fasterxml.jackson.annotation.JsonFormat;\nimport com.fasterxml.jackson.annotation.JsonPropertyOrder;\n\n@JsonPropertyOrder({ \"verticalFrom\", \"verticalTo\", \"vertical\", \"value\" })\npublic class ProfileDataItem<T> implements Comparable<ProfileDataItem<T>> {\n\n    private BigDecimal verticalFrom;\n\n    // serves also as verticalTo\n    private BigDecimal vertical;\n\n    private T value;\n\n    public ProfileDataItem() {\n    }\n\n    public ProfileDataItem(BigDecimal vertical, T value) {\n        this(null, vertical, value);\n    }\n\n    public ProfileDataItem(BigDecimal verticalFrom, BigDecimal verticalTo, T value) {\n        this.verticalFrom = verticalFrom;\n        this.vertical = verticalTo;\n        this.value = value;\n    }\n\n    public BigDecimal getVerticalFrom() {\n        return verticalFrom;\n    }\n\n    @JsonFormat(shape = JsonFormat.Shape.NUMBER_FLOAT)\n    public void setVerticalFrom(BigDecimal verticalFrom) {\n<｜fim▁hole｜>    }\n\n    private boolean isSetVerticalFrom() {\n        return this.verticalFrom != null;\n    }\n\n    @JsonFormat(shape = JsonFormat.Shape.NUMBER_FLOAT)\n    public BigDecimal getVerticalTo() {\n        return isSetVerticalFrom()\n                ? this.vertical\n                : null;\n    }\n\n    @JsonFormat(shape = JsonFormat.Shape.NUMBER_FLOAT)\n    public BigDecimal getVertical() {\n        return !isSetVerticalFrom()\n                ? this.vertical\n                : null;\n    }\n\n    public void setVertical(BigDecimal vertical) {\n        this.vertical = vertical;\n    }\n\n    public T getValue() {\n        return value;\n    }\n\n    public void setValue(T value) {\n        this.value = value;\n    }\n\n    @Override\n    public int compareTo(ProfileDataItem<T> o) {\n        if (getVertical() != null && o.getVertical() != null) {\n            return Comparator.comparing(ProfileDataItem<T>::getVertical)\n                             .compare(this, o);\n        } else {\n            return Comparator.comparing(ProfileDataItem<T>::getVerticalFrom)\n                             .thenComparing(ProfileDataItem<T>::getVertical)\n                             .compare(this, o);\n        }\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(value, vertical, verticalFrom, vertical);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj == null || !(obj instanceof ProfileDataItem)) {\n            return false;\n        }\n\n        @SuppressWarnings(\"rawtypes\")\n        ProfileDataItem< ? > other = (ProfileDataItem) obj;\n        return Objects.equals(this.value, other.value)\n                && Objects.equals(this.vertical, other.vertical)\n                && Objects.equals(this.verticalFrom, other.verticalFrom)\n                && Objects.equals(this.vertical, other.vertical);\n    }\n\n}<｜fim▁end｜>",
    "response": "        this.verticalFrom = verticalFrom;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.github.guillaumenargeot.ngramsfrequency.selection;\n\nimport org.junit.Test;\n\nimport java.util.List;\n\nimport static com.github.guillaumenargeot.ngramsfrequency.selection.QuickSelect.selectTopK;\nimport static java.util.Arrays.asList;\nimport static org.junit.Assert.assertEquals;\n\npublic final class QuickSelectTest {\n    @Test\n    public final void testSelect1() {\n        final List<Integer> list = asList(11, 3, 2, 5, 19, 7, 23, 13, 17);\n\n        assertEquals(asList(23), selectTopK(list, 1));\n        assertEquals(asList(23, 19), selectTopK(list, 2));\n        assertEquals(asList(23, 19, 17), selectTopK(list, 3));\n        assertEquals(asList(23, 19, 17, 13), selectTopK(list, 4));\n        assertEquals(asList(23, 19, 17, 13, 11), selectTopK(list, 5));\n        assertEquals(asList(23, 19, 17, 13, 11, 7), selectTopK(list, 6));\n        assertEquals(asList(23, 19, 17, 13, 11, 7, 5), selectTopK(list, 7));\n        assertEquals(asList(23, 19, 17, 13, 11, 7, 5, 3), selectTopK(list, 8));\n        assertEquals(asList(23, 19, 17, 13, 11, 7, 5, 3, 2), selectTopK(list, 9));\n<｜fim▁hole｜>\n    @Test\n    public final void testSelect2() {\n        final List<Integer> list = asList(11, 3, 19, 11, 11, 19, 2, 5, 17, 3, 19, 7, 5, 23, 3, 13, 11, 17);\n\n        assertEquals(asList(23), selectTopK(list, 1));\n        assertEquals(asList(23, 19), selectTopK(list, 2));\n        assertEquals(asList(23, 19, 19), selectTopK(list, 3));\n        assertEquals(asList(23, 19, 19, 19), selectTopK(list, 4));\n        assertEquals(asList(23, 19, 19, 19, 17), selectTopK(list, 5));\n        assertEquals(asList(23, 19, 19, 19, 17, 17), selectTopK(list, 6));\n        assertEquals(asList(23, 19, 19, 19, 17, 17, 13), selectTopK(list, 7));\n    }\n}<｜fim▁end｜>",
    "response": "    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.siyeh.ig.serialization;\n\nimport com.intellij.codeInsight.daemon.impl.analysis.HighlightControlFlowUtil;\nimport com.intellij.psi.*;\nimport com.intellij.psi.util.PsiTreeUtil;\nimport com.intellij.psi.util.PsiUtil;\nimport com.siyeh.InspectionGadgetsBundle;\nimport com.siyeh.ig.BaseInspection;\nimport com.siyeh.ig.BaseInspectionVisitor;\nimport com.siyeh.ig.psiutils.SerializationUtils;\nimport org.jetbrains.annotations.Nls;\nimport org.jetbrains.annotations.NotNull;\n\npublic class SerializableStoresNonSerializableInspection extends BaseInspection {\n  @Nls\n  @NotNull\n  @Override\n  public String getDisplayName() {\n    return InspectionGadgetsBundle.message(\"serializable.stores.non.serializable.display.name\");\n  }\n\n  @NotNull\n  @Override\n  protected String buildErrorString(Object... infos) {\n    final PsiElement classOrLambda = (PsiElement)infos[0];\n    final PsiType type = (PsiType)infos[1];\n    if (classOrLambda instanceof PsiClass) {\n      final PsiClass aClass = (PsiClass)classOrLambda;\n      if (aClass instanceof PsiAnonymousClass) {\n        return InspectionGadgetsBundle.message(\"serializable.anonymous.class.stores.non.serializable.problem.descriptor\",\n                                               type.getPresentableText());\n      }\n      else {\n        return InspectionGadgetsBundle.message(\"serializable.local.class.stores.non.serializable.problem.descriptor\",\n                                               type.getPresentableText(), aClass.getName());\n      }\n    }\n    return InspectionGadgetsBundle.message(\"serializable.lambda.stores.non.serializable.problem.descriptor\", type.getPresentableText());\n  }\n\n  @Override\n  public BaseInspectionVisitor buildVisitor() {\n    return new SerializableStoresNonSerializableVisitor();\n  }\n\n  private static class SerializableStoresNonSerializableVisitor extends BaseInspectionVisitor {\n\n    @Override\n    public void visitClass(PsiClass aClass) {\n      super.visitClass(aClass);\n      final PsiElement parent = aClass.getParent();\n      if (!(parent instanceof PsiDeclarationStatement) && !(aClass instanceof PsiAnonymousClass)) {\n        return;\n      }\n      if (!SerializationUtils.isSerializable(aClass)) {\n        return;\n      }\n      final LocalVariableReferenceFinder visitor = new LocalVariableReferenceFinder(aClass);\n      PsiElement child = aClass.getLBrace();\n      while (child != null) {\n        child.accept(visitor);\n        child = child.getNextSibling();\n      }\n    }\n\n    @Override\n    public void visitLambdaExpression(PsiLambdaExpression lambda) {\n      super.visitLambdaExpression(lambda);\n      final PsiType type = lambda.getFunctionalInterfaceType();\n      final PsiClass aClass = PsiUtil.resolveClassInClassTypeOnly(type);\n<｜fim▁hole｜>\n    private class LocalVariableReferenceFinder extends JavaRecursiveElementWalkingVisitor {\n      @NotNull\n      private final PsiElement myClassOrLambda;\n\n      LocalVariableReferenceFinder(@NotNull PsiElement classOrLambda) {\n        myClassOrLambda = classOrLambda;\n      }\n\n      @Override\n      public void visitReferenceExpression(PsiReferenceExpression expression) {\n        super.visitReferenceExpression(expression);\n        if (expression.getQualifierExpression() != null) {\n          return;\n        }\n        final PsiType type = expression.getType();\n        if (SerializationUtils.isProbablySerializable(type)) {\n          return;\n        }\n        final PsiElement target = expression.resolve();\n        if (!(target instanceof PsiLocalVariable) && !(target instanceof PsiParameter)) {\n          return;\n        }\n        final PsiVariable variable = (PsiVariable)target;\n        if (!variable.hasModifierProperty(PsiModifier.FINAL)) {\n          if (!PsiUtil.isLanguageLevel8OrHigher(variable) ||\n              !HighlightControlFlowUtil.isEffectivelyFinal(variable, myClassOrLambda, expression)) {\n            // don't warn on uncompilable code.\n            return;\n          }\n        }\n        if (PsiTreeUtil.isAncestor(myClassOrLambda, variable, true)) {\n          return;\n        }\n        registerError(expression, myClassOrLambda, type);\n      }\n    }\n  }\n}<｜fim▁end｜>",
    "response": "      if (!SerializationUtils.isSerializable(aClass)) {\n        return;\n      }\n      lambda.accept(new LocalVariableReferenceFinder(lambda));\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.area515.resinprinter.stl;\n\nimport org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\n\npublic class Point3d implements Shape3d {\n    public double x;\n    public double y;\n    public double z;\n    private Point3d normal;\n    private Face3d originatingShape;\n\n    public Point3d(double x, double y, double z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n\n    public Point3d(Vector3D point, Face3d originatingShape) {\n        this.x = point.getX();\n        this.y = point.getY();\n        this.z = point.getZ();\n        this.originatingShape = originatingShape;\n    }\n\n    public Point3d(double x, double y, double z, Point3d normal, Face3d originatingShape) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.normal = normal;\n        this.originatingShape = originatingShape;\n    }\n\n    public Point3d getNormal() {\n        return normal;\n    }\n\n    public Face3d getOriginatingShape() {\n        return originatingShape;\n    }\n\n    @Override\n    public String toString() {\n        return \"(x:\" + x + \",y:\" + y + \",z:\" + z + (normal != null?(\"@x:\" + normal.x + \",y:\" + normal.y + \",z:\" + normal.z):\"\") + \")\";\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime\n                * result\n                + ((originatingShape == null) ? 0 : originatingShape.hashCode());\n        long temp;\n        temp = Double.doubleToLongBits(x);\n        result = prime * result + (int) (temp ^ (temp >>> 32));\n        temp = Double.doubleToLongBits(y);\n        result = prime * result + (int) (temp ^ (temp >>> 32));\n        temp = Double.doubleToLongBits(z);\n        result = prime * result + (int) (temp ^ (temp >>> 32));\n        return result;\n    }\n<｜fim▁hole｜>            Math.ceil(z) == Math.ceil(otherPoint.z);\n    }\n\n    //Does this point belong to a horizontal line?\n    public boolean isInfiniteInverseSlopeOnIntegerBoundry() {\n        return Double.isNaN(this.x) && Double.isNaN(this.y) && Double.isNaN(this.z);\n    }\n\n    public int pointCompare(Point3d other) {\n        boolean thisInfiniteSlopeOnIntegerBoundry = isInfiniteInverseSlopeOnIntegerBoundry();\n        boolean otherInfiniteSlopeOnIntegerBoundry =  other.isInfiniteInverseSlopeOnIntegerBoundry();\n        if (thisInfiniteSlopeOnIntegerBoundry) {\n            if (otherInfiniteSlopeOnIntegerBoundry) {\n                return 0;\n            }\n\n            return 1;\n        } else if (otherInfiniteSlopeOnIntegerBoundry){\n            return -1;\n        }\n\n        double xdiff = this.x - other.x;\n        double ydiff = this.y - other.y;\n        double zdiff = this.z - other.z;\n\n        if (xdiff > Triangle3d.EQUAL_TOLERANCE) {\n            return -1;\n        }\n        if (xdiff < -Triangle3d.EQUAL_TOLERANCE) {\n            return 1;\n        }\n        if (ydiff > Triangle3d.EQUAL_TOLERANCE) {\n            return -1;\n        }\n        if (ydiff < -Triangle3d.EQUAL_TOLERANCE) {\n            return 1;\n        }\n        if (zdiff > Triangle3d.EQUAL_TOLERANCE) {\n            return -1;\n        }\n        if (zdiff < -Triangle3d.EQUAL_TOLERANCE) {\n            return 1;\n        }\n        return 0;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        Point3d other = (Point3d) obj;\n        if (originatingShape == null) {\n            if (other.originatingShape != null)\n                return false;\n        } else if (!originatingShape.equals(other.originatingShape))\n            return false;\n        if (Double.doubleToLongBits(x) != Double.doubleToLongBits(other.x))\n            return false;\n        if (Double.doubleToLongBits(y) != Double.doubleToLongBits(other.y))\n            return false;\n        if (Double.doubleToLongBits(z) != Double.doubleToLongBits(other.z) || \n            (other.z < z - Triangle3d.EQUAL_TOLERANCE && other.z > z + Triangle3d.EQUAL_TOLERANCE))\n            return false;\n        return true;\n    }\n\n    @Override\n    public double getMinX() {\n        return x;\n    }\n    @Override\n    public double getMinY() {\n        return y;\n    }\n    public double getMaxX() {\n        return x;\n    }\n    public double getMaxY() {\n        return y;\n    }\n}<｜fim▁end｜>",
    "response": "\n    @Deprecated\n    public boolean ceilingEquals(Point3d otherPoint) {\n    return Math.ceil(x) == Math.ceil(otherPoint.x) &&\n            Math.ceil(y) == Math.ceil(otherPoint.y) &&\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package fr.ens.transcriptome.nividic.om.io;\n\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.util.Arrays;\n\nimport junit.framework.TestCase;\nimport fr.ens.transcriptome.nividic.om.BioAssay;\nimport fr.ens.transcriptome.nividic.om.BioAssayFactory;\nimport fr.ens.transcriptome.nividic.om.ExpressionMatrix;\nimport fr.ens.transcriptome.nividic.om.ExpressionMatrixDimension;\nimport fr.ens.transcriptome.nividic.om.ExpressionMatrixFactory;\nimport fr.ens.transcriptome.nividic.om.ExpressionMatrixUtils;\nimport fr.ens.transcriptome.nividic.om.impl.ExpressionMatrixImpl;\nimport fr.ens.transcriptome.nividic.om.io.SimpleExpressionMatrixReader;\nimport fr.ens.transcriptome.nividic.om.io.SimpleExpressionMatrixWriter;\nimport fr.ens.transcriptome.nividic.om.translators.DummyTranslator;\nimport fr.ens.transcriptome.nividic.om.translators.Translator;\nimport fr.ens.transcriptome.nividic.util.NividicUtils;\n\npublic class ExpressionMatrixIOTest extends TestCase {\n\n  String[] ids1 = {\"id1\", \"id2\", \"id3\", \"id4\", \"id5\"};\n  String[] ids2 = {\"id1\", \"id4\", \"id5\", \"id7\"};\n  String[] ids3 = {\"id6\", \"id8\", \"id1\", \"id3\"};\n\n  double[] double1 = {1.1, 2.2, 3.3, 4.4, 5.5};\n  double[] double2 = {11.1, 44.4, Double.NaN, 77.7};\n  double[] double3 = {666.6, 888.8, 111.1, 333.3};\n\n  private BioAssay makeBioAssay(String[] ids, double[] m) {\n\n    BioAssay b = BioAssayFactory.createBioAssay();\n    b.setIds(ids);\n    b.setMs(m);\n\n    return b;\n  }\n\n  private void printValues(ExpressionMatrixDimension em) {\n\n    String[] ids = em.getRowNames();\n    String[] columnNames = em.getColumnNames();\n\n    System.out.print(\"id/M\");\n\n    for (int i = 0; i < columnNames.length; i++) {\n\n      String colName = columnNames[i];\n\n      System.out.print(\"\\t\\t\" + colName);\n\n    }\n    System.out.println();\n\n    for (int i = 0; i < ids.length; i++) {\n\n      String id = ids[i];\n      System.out.print(id);\n\n      for (int j = 0; j < columnNames.length; j++) {\n        String colName = columnNames[j];\n        System.out.print(\"\\t\\t\");\n        System.out.print(em.getValue(id, colName));\n\n      }\n      System.out.println();\n    }\n    System.out.println();\n  }\n\n  private ExpressionMatrix makeExpressionMatrix() {\n\n    ExpressionMatrix em = ExpressionMatrixFactory.createExpressionMatrix(\"em\");\n    BioAssay b1 = makeBioAssay(ids1, double1);\n    b1.setName(\"b1\");\n    BioAssay b2 = makeBioAssay(ids2, double2);\n    b2.setName(\"b2\");\n    BioAssay b3 = makeBioAssay(ids3, double3);\n    b3.setName(\"b3\");\n\n    em.addBioAssay(b1);\n    em.addBioAssay(b2);\n    em.addBioAssay(b3);\n\n    return em;\n  }\n\n  public void testWriteAndReadExpressionMatrix() throws NividicIOException,\n      IOException {\n\n    ExpressionMatrix em = makeExpressionMatrix();\n    assertNotNull(em);\n\n    String outputFile = \"/tmp/testExpressionMatrix.txt\";\n\n    OutputStream os = new FileOutputStream(outputFile);\n\n    SimpleExpressionMatrixWriter emw = new SimpleExpressionMatrixWriter(os);\n\n    emw.write(em);\n    os.close();\n\n    InputStream is = new FileInputStream(outputFile);\n    SimpleExpressionMatrixReader emr = new SimpleExpressionMatrixReader(is);\n    ExpressionMatrix em2 = emr.read();\n    is.close();\n\n    assertTrue(em2.dataEquals(em));\n\n  }\n\n  public void testReadWriteExistingMatrix() throws NividicIOException,\n      IOException {\n<｜fim▁hole｜>    InputStream is = this.getClass().getResourceAsStream(file1);\n    SimpleExpressionMatrixReader reader = new SimpleExpressionMatrixReader(is);\n\n    ExpressionMatrix matrix = reader.read();\n\n    Translator t = new DummyTranslator(3);\n\n    String outputFile = \"/tmp/testExpressionMatrix2.txt\";\n\n    OutputStream os = new FileOutputStream(outputFile);\n\n    SimpleExpressionMatrixWriter emw = new SimpleExpressionMatrixWriter(os);\n    emw.setTranslator(t);\n\n    emw.write(matrix);\n    os.close();\n\n    is = new FileInputStream(outputFile);\n    SimpleExpressionMatrixReader emr = new SimpleExpressionMatrixReader(is, 4);\n    ExpressionMatrix em2 = emr.read();\n    is.close();\n\n    Translator t2 = emr.getTranslator();\n    assertNotNull(t2);\n\n    assertTrue(em2.dataEquals(matrix));\n\n    String outputFile2 = \"/tmp/testExpressionMatrix3.txt\";\n\n    os = new FileOutputStream(outputFile2);\n\n    emw = new SimpleExpressionMatrixWriter(os);\n    emw.setTranslator(t2);\n\n    emw.write(em2);\n    os.close();\n\n    assertTrue(NividicUtils.compareFile(outputFile, outputFile2));\n\n  }\n\n}<｜fim▁end｜>",
    "response": "\n    String file1 = \"/files/PDR1gal_ctrred.txt\";\n    //String file1 = \"/files/PDR1_huge.txt\";\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.techcode.logbulk.net;\n\nimport io.vertx.core.eventbus.impl.codecs.JsonArrayMessageCodec;\nimport io.vertx.core.json.JsonArray;\n\npublic class FastJsonArrayCodec extends JsonArrayMessageCodec {\n\n    public static final String CODEC_NAME = FastJsonArrayCodec.class.getSimpleName();\n\n    @Override public JsonArray transform(JsonArray evt) {\n        // Avoid copy when we use it as event schema\n        return evt;\n    }\n\n<｜fim▁hole｜>    @Override public byte systemCodecID() {\n        return -1;\n    }\n\n}<｜fim▁end｜>",
    "response": "    @Override public String name() {\n        return CODEC_NAME;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.intellij.plugins.markdown.parser;\n\nimport com.intellij.lang.LanguageASTFactory;\nimport com.intellij.lang.html.HTMLParserDefinition;\nimport com.intellij.lang.xml.XMLLanguage;\nimport com.intellij.lang.xml.XmlASTFactory;\nimport com.intellij.lang.xml.XmlTemplateTreePatcher;\nimport com.intellij.lexer.EmbeddedTokenTypesProvider;\nimport com.intellij.psi.LanguageFileViewProviders;\nimport com.intellij.psi.templateLanguages.TemplateDataElementType;\nimport com.intellij.psi.xml.StartTagEndTokenProvider;\nimport com.intellij.testFramework.ParsingTestCase;\nimport org.intellij.plugins.markdown.MarkdownTestingUtil;\nimport org.intellij.plugins.markdown.highlighting.MarkdownColorSettingsPage;\nimport org.intellij.plugins.markdown.lang.MarkdownFileViewProviderFactory;\nimport org.intellij.plugins.markdown.lang.MarkdownLanguage;\nimport org.intellij.plugins.markdown.lang.parser.MarkdownParserDefinition;\nimport org.intellij.plugins.markdown.lang.psi.MarkdownASTFactory;\n\nimport java.io.IOException;\n\npublic class MarkdownParserTest extends ParsingTestCase {\n\n  public MarkdownParserTest() {\n    super(\"parser\", \"md\", true, new MarkdownParserDefinition(), new HTMLParserDefinition());\n  }\n\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    registerExtensionPoint(EmbeddedTokenTypesProvider.EXTENSION_POINT_NAME, EmbeddedTokenTypesProvider.class);\n    registerExtensionPoint(StartTagEndTokenProvider.EP_NAME, StartTagEndTokenProvider.class);\n\n    addExplicitExtension(LanguageFileViewProviders.INSTANCE, MarkdownLanguage.INSTANCE, new MarkdownFileViewProviderFactory());\n\n    addExplicitExtension(LanguageASTFactory.INSTANCE, MarkdownLanguage.INSTANCE, new MarkdownASTFactory());\n    addExplicitExtension(LanguageASTFactory.INSTANCE, XMLLanguage.INSTANCE, new XmlASTFactory());\n<｜fim▁hole｜>\n  @Override\n  protected String getTestDataPath() {\n    return MarkdownTestingUtil.TEST_DATA_PATH;\n  }\n\n  public void testColorsAndFontsSample() throws IOException {\n    final MarkdownColorSettingsPage colorSettingsPage = new MarkdownColorSettingsPage();\n    String demoText = colorSettingsPage.getDemoText();\n    for (String tag : colorSettingsPage.getAdditionalHighlightingTagToDescriptorMap().keySet()) {\n      demoText = demoText.replaceAll(\"<\" + tag + \">\", \"\");\n      demoText = demoText.replaceAll(\"</\" + tag + \">\", \"\");\n    }\n    doCodeTest(demoText);\n  }\n\n  public void testCodeBlock() {\n    doTest(true);\n  }\n\n  public void testComment() {\n    doTest(true);\n  }\n}<｜fim▁end｜>",
    "response": "\n    addExplicitExtension(TemplateDataElementType.TREE_PATCHER, XMLLanguage.INSTANCE, new XmlTemplateTreePatcher());\n  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.reldb.rel.v0.values;\n\nimport java.io.PrintStream;\n\nimport org.reldb.rel.exceptions.ExceptionSemantic;\nimport org.reldb.rel.utilities.StringUtils;\nimport org.reldb.rel.v0.generator.Generator;\nimport org.reldb.rel.v0.types.Type;\nimport org.reldb.rel.v0.types.TypeAlpha;\nimport org.reldb.rel.v0.types.builtin.TypeCharacter;\nimport org.reldb.rel.v0.vm.Context;\n\npublic class ValueCharacter extends ValueAlpha implements Comparable<Value> {\n\n    private static final long serialVersionUID = 0;\n\n    private String internalValue;\n\n    /** Return a String given a quote-delimited source string.  Inverse of toParsableString(). */\n    public static String stripDelimitedString(String b) {\n        return StringUtils.unquote(b.substring(1, b.length() - 1));\n    }\n\n    /** Return a ValueCharacter given a quote-delimited source string. */\n    public static Value stripDelimited(Generator generator, String b) {\n        return new ValueCharacter(generator, stripDelimitedString(b));\n    }\n\n    public static ValueCharacter select(Generator generator, String x) {\n        return (ValueCharacter)generator.selectValue(TypeCharacter.getInstance(), new ValueCharacter(generator, x));\n    }\n\n    private ValueCharacter(Generator generator, String b) {\n        super(generator, TypeCharacter.getInstance(), new Value[1], 0);\n        internalValue = b;\n    }\n\n    public Value getComponentValue(int offsetInValue) {\n        return select(getGenerator(), internalValue);\n    }\n\n    public void setComponentValue(int offsetInValue, Value value) {\n        internalValue = value.stringValue();\n    }\n\n    public void toStream(Context context, Type contextualType, PrintStream p, int depth) {\n        Generator generator = getGenerator();\n        TypeAlpha type = (TypeAlpha)getType(context.getVirtualMachine().getRelDatabase());\n        setMST(generator.findMST(type, new ValueCharacter(generator, internalValue)));\n        String typeSignature = getType(generator.getDatabase()).getSignature(); \n        if (typeSignature.equals(TypeCharacter.Name))\n            p.print((depth > 0) ? toParsableString(contextualType) : toString());\n        else\n            p.print(typeSignature + \"(\" + toParsableString(contextualType) + \")\");\n    }\n\n    /** Convert this to a primitive boolean. */\n    public boolean booleanValue() {\n        return (internalValue.compareToIgnoreCase(\"true\")==0) ? true : false;\n    }\n\n    /** Convert this to a primitive long. */\n    public long longValue() {\n        try {\n            return (long)Double.parseDouble(internalValue);\n        } catch (NumberFormatException nfe) {\n            throw new ExceptionSemantic(\"RS0390: '\" + internalValue + \"' isn't a valid number.\");\n        }\n<｜fim▁hole｜>            return Double.parseDouble(internalValue);\n        } catch (NumberFormatException nfe) {\n            throw new ExceptionSemantic(\"RS0391: '\" + internalValue + \"' isn't a valid number.\");\n        }\n    }\n\n    /** Convert this to a primitive String. */\n    public String stringValue() {\n        return internalValue;\n    }\n\n    public int hashCode() {\n        return internalValue.hashCode();\n    }\n\n    public int compareTo(Value v) {\n        return internalValue.compareTo(v.stringValue());\n    }\n\n    public String toString() {\n        return internalValue;\n    }\n\n    public String toParsableString(Type type) {\n        return \"\\\"\" + StringUtils.quote(internalValue) + \"\\\"\";\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    /** Convert this to a primitive double. */\n    public double doubleValue() {\n        try {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.chromium.chrome.browser.banners;\n\nimport android.content.Context;\nimport android.text.TextUtils;\n\nimport org.chromium.base.ApplicationStatus;\nimport org.chromium.base.VisibleForTesting;\nimport org.chromium.base.annotations.CalledByNative;\nimport org.chromium.base.annotations.JNINamespace;\nimport org.chromium.chrome.R;\nimport org.chromium.chrome.browser.ShortcutHelper;\nimport org.chromium.chrome.browser.tab.EmptyTabObserver;\nimport org.chromium.chrome.browser.tab.Tab;\nimport org.chromium.content_public.browser.WebContents;\n\n@JNINamespace(\"banners\")\npublic class AppBannerManager extends EmptyTabObserver {\n    private static final String TAG = \"AppBannerManager\";\n\n    /** Retrieves information about a given package. */\n    private static AppDetailsDelegate sAppDetailsDelegate;\n\n    /** Whether the banners are enabled. */\n    private static Boolean sIsEnabled;\n\n    /** Pointer to the native side AppBannerManager. */\n    private long mNativePointer;\n\n    /** Tab that the AppBannerView/AppBannerManager is owned by. */\n    private final Tab mTab;\n\n    /**\n     * Checks if app banners are enabled.\n     * @return True if banners are enabled, false otherwise.\n     */\n    public static boolean isEnabled() {\n        if (sIsEnabled == null) {\n            Context context = ApplicationStatus.getApplicationContext();\n            sIsEnabled = nativeIsEnabled() && ShortcutHelper.isAddToHomeIntentSupported(context);\n        }\n        return sIsEnabled;\n    }\n\n    /**\n     * Sets the delegate that provides information about a given package.\n     * @param delegate Delegate to use.  Previously set ones are destroyed.\n     */\n    public static void setAppDetailsDelegate(AppDetailsDelegate delegate) {\n        if (sAppDetailsDelegate != null) sAppDetailsDelegate.destroy();\n        sAppDetailsDelegate = delegate;\n    }\n<｜fim▁hole｜>        int iconSizePx = context.getResources().getDimensionPixelSize(R.dimen.app_banner_icon_size);\n        float density = context.getResources().getDisplayMetrics().density;\n        int iconSizeDp = (int) (iconSizePx / density);\n\n        mNativePointer = nativeInit(iconSizeDp);\n        mTab = tab;\n        updatePointers();\n    }\n\n    @Override\n    public void onWebContentsSwapped(Tab tab, boolean didStartLoad,\n            boolean didFinishLoad) {\n        updatePointers();\n    }\n\n    @Override\n    public void onContentChanged(Tab tab) {\n        updatePointers();\n    }\n\n    /**\n     * Destroys the native AppBannerManager.\n     */\n    public void destroy() {\n        nativeDestroy(mNativePointer);\n        mNativePointer = 0;\n    }\n\n    /**\n     * Updates which WebContents the native AppBannerManager is monitoring.\n     */\n    private void updatePointers() {\n        nativeReplaceWebContents(mNativePointer, mTab.getWebContents());\n    }\n\n    /**\n     * Grabs package information for the banner asynchronously.\n     * @param url         URL for the page that is triggering the banner.\n     * @param packageName Name of the package that is being advertised.\n     */\n    @CalledByNative\n    private void fetchAppDetails(String url, String packageName, String referrer, int iconSize) {\n        if (sAppDetailsDelegate == null) return;\n        sAppDetailsDelegate.getAppDetailsAsynchronously(\n                createAppDetailsObserver(), url, packageName, referrer, iconSize);\n    }\n\n    private AppDetailsDelegate.Observer createAppDetailsObserver() {\n        return new AppDetailsDelegate.Observer() {\n            /**\n             * Called when data about the package has been retrieved, which includes the url for the\n             * app's icon but not the icon Bitmap itself.\n             * @param data Data about the app.  Null if the task failed.\n             */\n            @Override\n            public void onAppDetailsRetrieved(AppData data) {\n                if (data == null || mNativePointer == 0) return;\n\n                String imageUrl = data.imageUrl();\n                if (TextUtils.isEmpty(imageUrl)) return;\n\n                nativeOnAppDetailsRetrieved(\n                        mNativePointer, data, data.title(), data.packageName(), data.imageUrl());\n            }\n        };\n    }\n\n    /** Enables or disables the app banners for testing. */\n    @VisibleForTesting\n    static void setIsEnabledForTesting(boolean state) {\n        sIsEnabled = state;\n    }\n\n    /** Sets a constant (in days) that gets added to the time when the current time is requested. */\n    @VisibleForTesting\n    static void setTimeDeltaForTesting(int days) {\n        nativeSetTimeDeltaForTesting(days);\n    }\n\n    /** Disables the HTTPS scheme requirement for testing. */\n    @VisibleForTesting\n    static void disableSecureSchemeCheckForTesting() {\n        nativeDisableSecureSchemeCheckForTesting();\n    }\n\n    /** Sets the weights of direct and indirect page navigations for testing. */\n    @VisibleForTesting\n    static void forceEngagementWeightsForTesting(double directEngagement,\n            double indirectEngagement) {\n        nativeForceEngagementWeightsForTesting(directEngagement, indirectEngagement);\n    }\n\n    /** Returns whether a AppBannerDataFetcher is actively retrieving data. */\n    @VisibleForTesting\n    public boolean isFetcherActiveForTesting() {\n        return nativeIsFetcherActive(mNativePointer);\n    }\n\n    private static native boolean nativeIsEnabled();\n    private native long nativeInit(int iconSize);\n    private native void nativeDestroy(long nativeAppBannerManagerAndroid);\n    private native void nativeReplaceWebContents(long nativeAppBannerManagerAndroid,\n            WebContents webContents);\n    private native boolean nativeOnAppDetailsRetrieved(long nativeAppBannerManagerAndroid,\n            AppData data, String title, String packageName, String imageUrl);\n\n    // Testing methods.\n    private static native void nativeSetTimeDeltaForTesting(int days);\n    private static native void nativeDisableSecureSchemeCheckForTesting();\n    private static native void nativeForceEngagementWeightsForTesting(\n            double directEngagement, double indirectEngagement);\n    private native boolean nativeIsFetcherActive(long nativeAppBannerManagerAndroid);\n}<｜fim▁end｜>",
    "response": "\n    /**\n     * Constructs an AppBannerManager for the given tab.\n     * @param tab Tab that the AppBannerManager will be attached to.\n     */\n    public AppBannerManager(Tab tab, Context context) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.kafka.common;\n\nimport org.apache.kafka.common.internals.KafkaFutureImpl;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Timeout;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\nimport static org.junit.jupiter.api.Assertions.assertNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\n@Timeout(120)\npublic class KafkaFutureTest {\n\n    @Test\n    public void testCompleteFutures() throws Exception {\n        KafkaFutureImpl<Integer> future123 = new KafkaFutureImpl<>();\n        assertTrue(future123.complete(123));\n        assertEquals(Integer.valueOf(123), future123.get());\n        assertFalse(future123.complete(456));\n        assertTrue(future123.isDone());\n        assertFalse(future123.isCancelled());\n        assertFalse(future123.isCompletedExceptionally());\n\n        KafkaFuture<Integer> future456 = KafkaFuture.completedFuture(456);\n        assertEquals(Integer.valueOf(456), future456.get());\n\n        KafkaFutureImpl<Integer> futureFail = new KafkaFutureImpl<>();\n        futureFail.completeExceptionally(new RuntimeException(\"We require more vespene gas\"));\n        ExecutionException e = assertThrows(ExecutionException.class, futureFail::get);\n        assertEquals(RuntimeException.class, e.getCause().getClass());\n        assertEquals(\"We require more vespene gas\", e.getCause().getMessage());\n    }\n\n    @Test\n    public void testCompletingFutures() throws Exception {\n        final KafkaFutureImpl<String> future = new KafkaFutureImpl<>();\n        CompleterThread<String> myThread = new CompleterThread<>(future, \"You must construct additional pylons.\");\n        assertFalse(future.isDone());\n        assertFalse(future.isCompletedExceptionally());\n        assertFalse(future.isCancelled());\n        assertEquals(\"I am ready\", future.getNow(\"I am ready\"));\n        myThread.start();\n        String str = future.get(5, TimeUnit.MINUTES);\n        assertEquals(\"You must construct additional pylons.\", str);\n        assertEquals(\"You must construct additional pylons.\", future.getNow(\"I am ready\"));\n        assertTrue(future.isDone());\n        assertFalse(future.isCompletedExceptionally());\n        assertFalse(future.isCancelled());\n        myThread.join();\n        assertNull(myThread.testException);\n    }\n\n    @Test\n    public void testThenApply() throws Exception {\n        KafkaFutureImpl<Integer> future = new KafkaFutureImpl<>();\n        KafkaFuture<Integer> doubledFuture = future.thenApply(integer -> 2 * integer);\n        assertFalse(doubledFuture.isDone());\n        KafkaFuture<Integer> tripledFuture = future.thenApply(integer -> 3 * integer);\n        assertFalse(tripledFuture.isDone());\n        future.complete(21);\n        assertEquals(Integer.valueOf(21), future.getNow(-1));\n        assertEquals(Integer.valueOf(42), doubledFuture.getNow(-1));\n        assertEquals(Integer.valueOf(63), tripledFuture.getNow(-1));\n        KafkaFuture<Integer> quadrupledFuture = future.thenApply(integer -> 4 * integer);\n        assertEquals(Integer.valueOf(84), quadrupledFuture.getNow(-1));\n\n        KafkaFutureImpl<Integer> futureFail = new KafkaFutureImpl<>();\n        KafkaFuture<Integer> futureAppliedFail = futureFail.thenApply(integer -> 2 * integer);\n        futureFail.completeExceptionally(new RuntimeException());\n        assertTrue(futureFail.isCompletedExceptionally());\n        assertTrue(futureAppliedFail.isCompletedExceptionally());\n    }\n\n    private static class CompleterThread<T> extends Thread {\n\n        private final KafkaFutureImpl<T> future;\n        private final T value;\n        Throwable testException = null;\n\n        CompleterThread(KafkaFutureImpl<T> future, T value) {\n            this.future = future;\n            this.value = value;\n        }\n\n        @Override\n        public void run() {\n            try {\n                try {\n                    Thread.sleep(0, 200);\n                } catch (InterruptedException e) {\n<｜fim▁hole｜>            } catch (Throwable testException) {\n                this.testException = testException;\n            }\n        }\n    }\n\n    private static class WaiterThread<T> extends Thread {\n\n        private final KafkaFutureImpl<T> future;\n        private final T expected;\n        Throwable testException = null;\n\n        WaiterThread(KafkaFutureImpl<T> future, T expected) {\n            this.future = future;\n            this.expected = expected;\n        }\n\n        @Override\n        public void run() {\n            try {\n                T value = future.get();\n                assertEquals(expected, value);\n            } catch (Throwable testException) {\n                this.testException = testException;\n            }\n        }\n    }\n\n    @Test\n    public void testAllOfFutures() throws Exception {\n        final int numThreads = 5;\n        final List<KafkaFutureImpl<Integer>> futures = new ArrayList<>();\n        for (int i = 0; i < numThreads; i++) {\n            futures.add(new KafkaFutureImpl<>());\n        }\n        KafkaFuture<Void> allFuture = KafkaFuture.allOf(futures.toArray(new KafkaFuture[0]));\n        final List<CompleterThread> completerThreads = new ArrayList<>();\n        final List<WaiterThread> waiterThreads = new ArrayList<>();\n        for (int i = 0; i < numThreads; i++) {\n            completerThreads.add(new CompleterThread<>(futures.get(i), i));\n            waiterThreads.add(new WaiterThread<>(futures.get(i), i));\n        }\n        assertFalse(allFuture.isDone());\n        for (int i = 0; i < numThreads; i++) {\n            waiterThreads.get(i).start();\n        }\n        for (int i = 0; i < numThreads - 1; i++) {\n            completerThreads.get(i).start();\n        }\n        assertFalse(allFuture.isDone());\n        completerThreads.get(numThreads - 1).start();\n        allFuture.get();\n        assertTrue(allFuture.isDone());\n        for (int i = 0; i < numThreads; i++) {\n            assertEquals(Integer.valueOf(i), futures.get(i).get());\n        }\n        for (int i = 0; i < numThreads; i++) {\n            completerThreads.get(i).join();\n            waiterThreads.get(i).join();\n            assertNull(completerThreads.get(i).testException);\n            assertNull(waiterThreads.get(i).testException);\n        }\n    }\n\n    @Test\n    public void testAllOfFuturesHandlesZeroFutures() throws Exception {\n        KafkaFuture<Void> allFuture = KafkaFuture.allOf();\n        assertTrue(allFuture.isDone());\n        assertFalse(allFuture.isCancelled());\n        assertFalse(allFuture.isCompletedExceptionally());\n        allFuture.get();\n    }\n\n    @Test\n    public void testFutureTimeoutWithZeroWait() {\n        final KafkaFutureImpl<String> future = new KafkaFutureImpl<>();\n        assertThrows(TimeoutException.class, () -> future.get(0, TimeUnit.MILLISECONDS));\n    }\n\n}<｜fim▁end｜>",
    "response": "                }\n                future.complete(value);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.github.vcbr.bidr.profile.domain;\n\npublic interface UserAddress {\n\n<｜fim▁hole｜>\n    public String getAddressName();\n\n    public void setAddressName(String addressName);\n\n    public User getUser();\n\n    public void setUser(User user);\n\n    public Address getAddress();\n\n    public void setAddress(Address address);\n\n}<｜fim▁end｜>",
    "response": "    public Integer getId();\n\n    public void setId(Integer id);  \n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.knowm.xchange.examples.gatecoin.account;\n\nimport java.io.IOException;\nimport java.math.BigDecimal;\n\nimport org.knowm.xchange.Exchange;\nimport org.knowm.xchange.currency.Currency;\nimport org.knowm.xchange.examples.gatecoin.GatecoinDemoUtils;\nimport org.knowm.xchange.gatecoin.dto.account.Results.GatecoinWithdrawResult;\nimport org.knowm.xchange.gatecoin.service.polling.GatecoinAccountServiceRaw;\nimport org.knowm.xchange.service.polling.account.PollingAccountService;\n\npublic class GatecoinWithdrawFundsDemo {\n  public static void main(String[] args) throws IOException {\n\n    Exchange gatecoin = GatecoinDemoUtils.createExchange();\n    PollingAccountService accountService = gatecoin.getPollingAccountService();\n\n    generic(accountService);\n    raw((GatecoinAccountServiceRaw) accountService);\n  }\n\n  private static void generic(PollingAccountService accountService) throws IOException {\n\n    String result = accountService.withdrawFunds(Currency.BTC, BigDecimal.valueOf(0.1), \"AddresssName\");\n    System.out.println(\"WithdrawResult: \" + result);\n  }\n\n<｜fim▁hole｜>    System.out.println(\"GatecoinDepositAddess: \" + gatecoinDepositAddressResult.getResponseStatus());\n  }\n}<｜fim▁end｜>",
    "response": "  private static void raw(GatecoinAccountServiceRaw accountService) throws IOException {\n\n    // Get the account information\n    GatecoinWithdrawResult gatecoinDepositAddressResult = accountService.withdrawGatecoinFunds(\"BTC\", BigDecimal.valueOf(0.1), \"BATMAN\");\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.api.services.androiddeviceprovisioning.v1.model;\n\n@SuppressWarnings(\"javadoc\")\npublic final class ClaimDeviceRequest extends com.google.api.client.json.GenericJson {\n\n  /**\n   * Required. The ID of the customer for whom the device is being claimed.\n   * The value may be {@code null}.\n   */\n  @com.google.api.client.util.Key @com.google.api.client.json.JsonString\n  private java.lang.Long customerId;\n\n  /**\n   * Required. The device identifier of the device to claim.\n   * The value may be {@code null}.\n   */\n  @com.google.api.client.util.Key\n  private DeviceIdentifier deviceIdentifier;\n\n  /**\n   * Optional. The metadata to attach to the device.\n   * The value may be {@code null}.\n   */\n  @com.google.api.client.util.Key\n  private DeviceMetadata deviceMetadata;\n\n  /**\n   * Required. The section type of the device's provisioning record.\n   * The value may be {@code null}.\n   */\n  @com.google.api.client.util.Key\n<｜fim▁hole｜>  /**\n   * Required. The ID of the customer for whom the device is being claimed.\n   * @return value or {@code null} for none\n   */\n  public java.lang.Long getCustomerId() {\n    return customerId;\n  }\n\n  /**\n   * Required. The ID of the customer for whom the device is being claimed.\n   * @param customerId customerId or {@code null} for none\n   */\n  public ClaimDeviceRequest setCustomerId(java.lang.Long customerId) {\n    this.customerId = customerId;\n    return this;\n  }\n\n  /**\n   * Required. The device identifier of the device to claim.\n   * @return value or {@code null} for none\n   */\n  public DeviceIdentifier getDeviceIdentifier() {\n    return deviceIdentifier;\n  }\n\n  /**\n   * Required. The device identifier of the device to claim.\n   * @param deviceIdentifier deviceIdentifier or {@code null} for none\n   */\n  public ClaimDeviceRequest setDeviceIdentifier(DeviceIdentifier deviceIdentifier) {\n    this.deviceIdentifier = deviceIdentifier;\n    return this;\n  }\n\n  /**\n   * Optional. The metadata to attach to the device.\n   * @return value or {@code null} for none\n   */\n  public DeviceMetadata getDeviceMetadata() {\n    return deviceMetadata;\n  }\n\n  /**\n   * Optional. The metadata to attach to the device.\n   * @param deviceMetadata deviceMetadata or {@code null} for none\n   */\n  public ClaimDeviceRequest setDeviceMetadata(DeviceMetadata deviceMetadata) {\n    this.deviceMetadata = deviceMetadata;\n    return this;\n  }\n\n  /**\n   * Required. The section type of the device's provisioning record.\n   * @return value or {@code null} for none\n   */\n  public java.lang.String getSectionType() {\n    return sectionType;\n  }\n\n  /**\n   * Required. The section type of the device's provisioning record.\n   * @param sectionType sectionType or {@code null} for none\n   */\n  public ClaimDeviceRequest setSectionType(java.lang.String sectionType) {\n    this.sectionType = sectionType;\n    return this;\n  }\n\n  @Override\n  public ClaimDeviceRequest set(String fieldName, Object value) {\n    return (ClaimDeviceRequest) super.set(fieldName, value);\n  }\n\n  @Override\n  public ClaimDeviceRequest clone() {\n    return (ClaimDeviceRequest) super.clone();\n  }\n\n}<｜fim▁end｜>",
    "response": "  private java.lang.String sectionType;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.wso2.developerstudio.eclipse.gmf.esb.provider;\n\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.eclipse.emf.common.notify.AdapterFactory;\nimport org.eclipse.emf.common.notify.Notification;\n\nimport org.eclipse.emf.ecore.EStructuralFeature;\n\nimport org.eclipse.emf.edit.provider.IEditingDomainItemProvider;\nimport org.eclipse.emf.edit.provider.IItemLabelProvider;\nimport org.eclipse.emf.edit.provider.IItemPropertyDescriptor;\nimport org.eclipse.emf.edit.provider.IItemPropertySource;\nimport org.eclipse.emf.edit.provider.IStructuredItemContentProvider;\nimport org.eclipse.emf.edit.provider.ITreeItemContentProvider;\nimport org.eclipse.emf.edit.provider.ViewerNotification;\n\nimport org.wso2.developerstudio.eclipse.gmf.esb.EsbFactory;\nimport org.wso2.developerstudio.eclipse.gmf.esb.EsbPackage;\nimport org.wso2.developerstudio.eclipse.gmf.esb.InboundEndpointOnErrorSequenceContainer;\n\npublic class InboundEndpointOnErrorSequenceContainerItemProvider\n    extends EsbNodeItemProvider {\n    /**\n     * This constructs an instance from a factory and a notifier.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    public InboundEndpointOnErrorSequenceContainerItemProvider(AdapterFactory adapterFactory) {\n        super(adapterFactory);\n    }\n\n    /**\n     * This returns the property descriptors for the adapted class.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    @Override\n    public List<IItemPropertyDescriptor> getPropertyDescriptors(Object object) {\n        if (itemPropertyDescriptors == null) {\n            super.getPropertyDescriptors(object);\n\n        }\n        return itemPropertyDescriptors;\n    }\n\n    /**\n     * This specifies how to implement {@link #getChildren} and is used to deduce an appropriate feature for an\n     * {@link org.eclipse.emf.edit.command.AddCommand}, {@link org.eclipse.emf.edit.command.RemoveCommand} or\n     * {@link org.eclipse.emf.edit.command.MoveCommand} in {@link #createCommand}.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    @Override\n    public Collection<? extends EStructuralFeature> getChildrenFeatures(Object object) {\n        if (childrenFeatures == null) {\n            super.getChildrenFeatures(object);\n            childrenFeatures.add(EsbPackage.Literals.INBOUND_ENDPOINT_ON_ERROR_SEQUENCE_CONTAINER__MEDIATOR_FLOW);\n        }\n        return childrenFeatures;\n    }\n\n    /**\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    @Override\n    protected EStructuralFeature getChildFeature(Object object, Object child) {\n        // Check the type of the specified child object and return the proper feature to use for\n        // adding (see {@link AddCommand}) it as a child.\n\n        return super.getChildFeature(object, child);\n    }\n\n    /**\n     * This returns InboundEndpointOnErrorSequenceContainer.gif.\n<｜fim▁hole｜>    @Override\n    public Object getImage(Object object) {\n        return overlayImage(object, getResourceLocator().getImage(\"full/obj16/InboundEndpointOnErrorSequenceContainer\"));\n    }\n\n    /**\n     * This returns the label text for the adapted class.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    @Override\n    public String getText(Object object) {\n        return getString(\"_UI_InboundEndpointOnErrorSequenceContainer_type\");\n    }\n\n    /**\n     * This handles model notifications by calling {@link #updateChildren} to update any cached\n     * children and by creating a viewer notification, which it passes to {@link #fireNotifyChanged}.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    @Override\n    public void notifyChanged(Notification notification) {\n        updateChildren(notification);\n\n        switch (notification.getFeatureID(InboundEndpointOnErrorSequenceContainer.class)) {\n            case EsbPackage.INBOUND_ENDPOINT_ON_ERROR_SEQUENCE_CONTAINER__MEDIATOR_FLOW:\n                fireNotifyChanged(new ViewerNotification(notification, notification.getNotifier(), true, false));\n                return;\n        }\n        super.notifyChanged(notification);\n    }\n\n    /**\n     * This adds {@link org.eclipse.emf.edit.command.CommandParameter}s describing the children\n     * that can be created under this object.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    @Override\n    protected void collectNewChildDescriptors(Collection<Object> newChildDescriptors, Object object) {\n        super.collectNewChildDescriptors(newChildDescriptors, object);\n\n        newChildDescriptors.add\n            (createChildParameter\n                (EsbPackage.Literals.INBOUND_ENDPOINT_ON_ERROR_SEQUENCE_CONTAINER__MEDIATOR_FLOW,\n                 EsbFactory.eINSTANCE.createMediatorFlow()));\n    }\n\n}<｜fim▁end｜>",
    "response": "     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.fincatto.documentofiscal.nfe400.classes.evento;\n\nimport java.util.List;\n\nimport org.simpleframework.xml.Attribute;\nimport org.simpleframework.xml.Element;\nimport org.simpleframework.xml.ElementList;\nimport org.simpleframework.xml.Root;\nimport org.simpleframework.xml.convert.Convert;\n\nimport com.fincatto.documentofiscal.DFAmbiente;\nimport com.fincatto.documentofiscal.DFBase;\nimport com.fincatto.documentofiscal.DFUnidadeFederativa;\nimport com.fincatto.documentofiscal.nfe400.converters.StringNullConverter;\n\n@Root(name = \"retEnvEvento\")\npublic class NFEnviaEventoRetorno extends DFBase {\n    private static final long serialVersionUID = 8581761565026410859L;\n\n    @Attribute(name = \"versao\", required = true)\n    private String versao;\n\n    // O Converter StringNullConverter esta sendo utilizado para resolver um problema da autorizadora SVAN, que esta retornandoo atributo idLote vazio.\n    @Element(name = \"idLote\", required = true)\n    @Convert(StringNullConverter.class)\n    private String idLote;\n\n    @Element(name = \"tpAmb\", required = true)\n    private DFAmbiente ambiente;\n\n    @Element(name = \"verAplic\", required = true)\n    private String versaoAplicativo;\n\n    @Element(name = \"cOrgao\", required = true)\n    private DFUnidadeFederativa orgao;\n\n    @Element(name = \"cStat\", required = true)\n    private Integer codigoStatusReposta;\n\n    @Element(name = \"xMotivo\", required = true)\n    private String motivo;\n\n    @ElementList(entry = \"retEvento\", inline = true, required = true)\n    private List<NFEventoRetorno> eventoRetorno;\n\n    public String getVersao() {\n        return this.versao;\n    }\n\n    public String getIdLote() {\n        return this.idLote;\n    }\n\n    public DFAmbiente getAmbiente() {\n        return this.ambiente;\n    }\n\n    public String getVersaoAplicativo() {\n        return this.versaoAplicativo;\n    }\n\n    public DFUnidadeFederativa getOrgao() {\n        return this.orgao;\n    }\n\n    public Integer getCodigoStatusReposta() {\n        return this.codigoStatusReposta;\n    }\n\n    public String getMotivo() {\n        return this.motivo;\n    }\n\n    public List<NFEventoRetorno> getEventoRetorno() {\n        return this.eventoRetorno;\n    }\n\n    public void setVersao(final String versao) {\n        this.versao = versao;\n    }\n\n    public void setIdLote(final String idLote) {\n        this.idLote = idLote;\n    }\n\n    public void setAmbiente(final DFAmbiente ambiente) {\n        this.ambiente = ambiente;\n    }\n\n    public void setVersaoAplicativo(final String versaoAplicativo) {\n        this.versaoAplicativo = versaoAplicativo;\n    }\n\n    public void setOrgao(final DFUnidadeFederativa orgao) {\n        this.orgao = orgao;\n    }\n\n    public void setCodigoStatusReposta(final Integer codigoStatusReposta) {\n        this.codigoStatusReposta = codigoStatusReposta;\n<｜fim▁hole｜>\n    public void setEventoRetorno(final List<NFEventoRetorno> eventoRetorno) {\n        this.eventoRetorno = eventoRetorno;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    public void setMotivo(final String motivo) {\n        this.motivo = motivo;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.activityinfo.legacy.client.state;\n\nimport com.extjs.gxt.ui.client.state.Provider;\nimport com.google.gwt.storage.client.Storage;\nimport com.google.gwt.storage.client.StorageMap;\nimport com.google.inject.Singleton;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n@Singleton\npublic final class SafeStateProvider extends Provider {\n\n    private static final Logger LOGGER = Logger.getLogger(SafeStateProvider.class.getName());\n\n    private Map<String, String> stateMap = new HashMap<String, String>();\n\n    public SafeStateProvider() {\n        if (Storage.isLocalStorageSupported()) {\n            stateMap = new StorageMap(Storage.getLocalStorageIfSupported());\n        } else {\n            stateMap = new HashMap<String, String>();\n<｜fim▁hole｜>            stateMap.put(name, value);\n        } catch(Exception e) {\n            LOGGER.log(Level.WARNING, \"setValue() failed\", e);\n        }\n    }\n\n    @Override\n    protected String getValue(String name) {\n        try {\n            return stateMap.get(name);\n        } catch(Exception e) {\n            LOGGER.log(Level.WARNING, \"getValue() failed\", e);\n            return null;\n        }\n    }\n\n    @Override\n    protected void clearKey(String name) {\n        stateMap.remove(name);\n    }\n}<｜fim▁end｜>",
    "response": "        }\n    }\n\n    @Override\n    protected void setValue(String name, String value) {\n        try {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.smartreaction.battletechdomination.model.cards.abilities.unit;\n\nimport org.smartreaction.battletechdomination.model.TurnPhase;\nimport org.smartreaction.battletechdomination.model.cards.Unit;\nimport org.smartreaction.battletechdomination.model.cards.actions.ScrapOpponentUnitMaxCost;\nimport org.smartreaction.battletechdomination.model.players.Player;\n\npublic class DeathFromAbove extends UnitAbility {\n    //DEATH FROM ABOVE: You may damage this unit at the start of your Combat phase. If you do, choose an opposing unit costing 5 Industry or less for your opponent to scrap.\n\n    public DeathFromAbove(Unit unit) {\n        super(unit);\n    }\n<｜fim▁hole｜>        player.addAction(new ScrapOpponentUnitMaxCost(5, \"Scrap an opponent's unit costing 5 Industry or less\"));\n    }\n\n    @Override\n    public boolean isAbilityAvailable(Player player) {\n        return player.getTurnPhase() == TurnPhase.COMBAT_START;\n    }\n}<｜fim▁end｜>",
    "response": "\n    @Override\n    public void useAbility(Player player) {\n        player.cardDamaged(unit);\n        player.addGameLog(player.getPlayerName() + \" gets to scrap an opponent's unit costing 5 Industry or less due to damaging \" + unit.getName() + \" with Death From Above ability\");\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package pax.TrainsSchedule.Util;\n\nimport java.text.DateFormat;\nimport java.text.DateFormatSymbols;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.GregorianCalendar;\nimport java.util.Locale;\n\npublic class Util {\n\n    public static String todayStr() {\n        Calendar calendar = Calendar.getInstance();\n        String sb = String.valueOf(calendar.get(Calendar.YEAR)) +\n                \"-\" +\n                (calendar.get(Calendar.MONTH) + 1) +\n                \"-\" +\n                calendar.get(Calendar.DAY_OF_MONTH);\n        return sb;\n    }\n\n    public static String tomorrowStr() {\n        Calendar calendar = Calendar.getInstance();\n        calendar.add(Calendar.DAY_OF_MONTH, 1);\n\n        String sb = String.valueOf(calendar.get(Calendar.YEAR)) +\n                \"-\" +\n                (calendar.get(Calendar.MONTH) + 1) +\n                \"-\" +\n                calendar.get(Calendar.DAY_OF_MONTH);\n        return sb;\n    }\n\n    public static String todayDayOfWeek() {\n        Calendar calendar = Calendar.getInstance();\n        return \"\" + calendar.get(Calendar.DAY_OF_WEEK);\n    }\n\n    public static String tomorrowDayOfWeek() {\n        Calendar calendar = Calendar.getInstance();\n        calendar.add(Calendar.DAY_OF_MONTH, 1);\n        return \"\" + calendar.get(Calendar.DAY_OF_WEEK);\n    }\n\n    public static boolean notEmpty(Object o) {\n        if (o == null) return false;\n        return !(o instanceof String && ((String) o).isEmpty());\n\n    }\n\n    public static String getDateRepresentation(long date) {\n\n        GregorianCalendar cur = new GregorianCalendar();\n        GregorianCalendar c = new GregorianCalendar();\n        c.setTimeInMillis(date);\n        if (c.get(Calendar.YEAR) == cur.get(Calendar.YEAR) &&\n                c.get(Calendar.MONTH) == cur.get(Calendar.MONTH) &&\n                c.get(Calendar.DAY_OF_MONTH) == cur.get(Calendar.DAY_OF_MONTH)) {\n            return Multilanguage.onToday;\n        }\n\n        cur.add(Calendar.DAY_OF_MONTH, 1);\n        if (c.get(Calendar.YEAR) == cur.get(Calendar.YEAR) &&\n                c.get(Calendar.MONTH) == cur.get(Calendar.MONTH) &&\n                c.get(Calendar.DAY_OF_MONTH) == cur.get(Calendar.DAY_OF_MONTH)) {\n            return Multilanguage.onTomorrow;\n        }\n\n        Date dDate = new Date(date);\n        SimpleDateFormat df = new SimpleDateFormat(\"dd MMMM\", Locale.getDefault());\n        return Multilanguage.on + \" \" + df.format(dDate);\n    }\n\n    public static String getDateRepresentation(int year, int month, int day) {\n        GregorianCalendar c = new GregorianCalendar();\n        c.set(Calendar.YEAR, year);\n        c.set(Calendar.MONTH, month);\n<｜fim▁hole｜>        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.US);\n        return df.format(new Date(date));\n    }\n\n    public static int getDayOfWeek(String date) {\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.ENGLISH);\n        Calendar c = Calendar.getInstance();\n        try {\n            c.setTime(format.parse(date));\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n        return c.get(Calendar.DAY_OF_WEEK);\n    }\n\n    public static int getDayOfWeek(long date) {\n        Calendar c = Calendar.getInstance();\n        c.setTimeInMillis(date);\n        return c.get(Calendar.DAY_OF_WEEK);\n    }\n}<｜fim▁end｜>",
    "response": "        c.set(Calendar.DAY_OF_MONTH, day);\n\n        return getDateRepresentation(c.getTimeInMillis());\n    }\n\n    public static String getDateForSearch(long date) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.geocentral.geometria.view;\n\nimport java.awt.Frame;\n\nimport javax.swing.BoxLayout;\nimport javax.swing.JDialog;\nimport javax.swing.JPanel;\nimport javax.swing.JTextField;\nimport javax.swing.WindowConstants;\n\nimport net.geocentral.geometria.action.GDrawLineAction;\nimport net.geocentral.geometria.util.GDictionary;\nimport net.geocentral.geometria.util.GGraphicsFactory;\nimport net.geocentral.geometria.util.GGraphicsFactory.LocationType;\n\nimport org.apache.log4j.Logger;\n\npublic class GDrawLineDialog extends JDialog implements GHelpOkCancelDialog {\n\n    private int option = CANCEL_OPTION;\n\n    private GDrawLineAction action;\n\n    private JTextField p1TextField;\n\n    private JTextField p2TextField;\n\n    private boolean result = false;\n\n    private static Logger logger = Logger.getLogger(\"net.geocentral.geometria\");\n\n    public GDrawLineDialog(Frame ownerFrame, GDrawLineAction action) {\n        super(ownerFrame, true);\n        logger.info(\"\");\n        this.action = action;\n        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n        setResizable(false);\n        layoutComponents();\n        pack();\n        GGraphicsFactory.getInstance().setLocation(this, ownerFrame, LocationType.CENTER);\n        setTitle(GDictionary.get(\"DrawLine\"));\n    }\n\n    private void layoutComponents() {\n        logger.info(\"\");\n        getContentPane().setLayout(\n                new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));\n        JPanel topPane = GGraphicsFactory.getInstance().createTitledBorderPane(\n                GDictionary.get(\"ReferencePoints\"));\n        topPane.setLayout(new BoxLayout(topPane, BoxLayout.X_AXIS));\n        p1TextField = GGraphicsFactory.getInstance().createLabelInput(null);\n        JPanel leftInputPane = GGraphicsFactory.getInstance()\n            .createContainerAdjustBottom(p1TextField);\n        topPane.add(leftInputPane);\n        JPanel centerInputPane = GGraphicsFactory.getInstance()\n            .createImagePane(\"/images/DrawLine.png\");\n        topPane.add(centerInputPane);\n        p2TextField = GGraphicsFactory.getInstance().createLabelInput(null);\n        JPanel rightInputPane = GGraphicsFactory.getInstance()\n            .createContainerAdjustBottom(p2TextField);\n        topPane.add(rightInputPane);\n        getContentPane().add(topPane);\n        JPanel helpOkCancelPane = GGraphicsFactory.getInstance()\n            .createHelpOkCancelPane(this, action.getHelpId());\n        getContentPane().add(helpOkCancelPane);\n    }\n\n    public void prefill(String p1Label, String p2Label) {\n        logger.info(p1Label + \", \" + p2Label);\n        p1TextField.setText(p1Label);\n        p2TextField.setText(p2Label);\n    }\n\n    public void ok() {\n        logger.info(\"\");\n        action.setInput(p1TextField.getText().trim(),\n                p2TextField.getText().trim());\n        try {\n            action.validateApply();\n        }\n        catch (Exception exception) {\n            GGraphicsFactory.getInstance().showErrorDialog(\n                    this, exception.getMessage());\n            return;\n<｜fim▁hole｜>\n    public void cancel() {\n        logger.info(\"\");\n        dispose();\n    }\n\n    public int getOption() {\n        return option;\n    }\n\n    public boolean getResult() {\n        return result;\n    }\n\n    private static final long serialVersionUID = 1L;\n}<｜fim▁end｜>",
    "response": "        }\n        option = OK_OPTION;\n        result = true;\n        dispose();\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.action.jdxchxjs.ch03.stack_2_old;\n\npublic class P {\n\n    private MyStack myStack;\n\n    public P(MyStack myStack) {\n<｜fim▁hole｜>    public void pushService(){\n        myStack.push();\n\n    }\n}<｜fim▁end｜>",
    "response": "        this.myStack = myStack;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.ujmp.core.util.io;\n\nimport java.io.BufferedInputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.LineNumberReader;\nimport java.io.Reader;\nimport java.net.URL;\nimport java.net.URLConnection;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport java.util.zip.GZIPInputStream;\nimport java.util.zip.ZipInputStream;\n\nimport org.ujmp.core.util.MathUtil;\nimport org.ujmp.core.util.VerifyUtil;\n\npublic class IntelligentFileReader extends Reader {\n\n    private static final Logger logger = Logger.getLogger(IntelligentFileReader.class.getName());\n\n    private FileReader fr = null;\n\n    private InputStream is = null;\n\n    private LineNumberReader lr = null;\n\n    private String encoding = \"UTF-8\";\n\n    public IntelligentFileReader(String file) {\n        this(new File(file));\n    }\n\n    public IntelligentFileReader(InputStream inputStream) {\n        try {\n            lr = new LineNumberReader(new InputStreamReader(inputStream, encoding));\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"could not open stream\", e);\n        }\n    }\n\n    public IntelligentFileReader(Reader reader) {\n        try {\n            lr = new LineNumberReader(reader);\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"could not open stream\", e);\n        }\n    }\n\n    public IntelligentFileReader(File file) {\n        this(file, \"UTF-8\");\n    }\n\n    public IntelligentFileReader(File file, String encoding) {\n        this.encoding = encoding;\n        if (file != null && file.exists()) {\n            if (file.getAbsolutePath().toLowerCase().endsWith(\".gz\")) {\n                try {\n                    is = new GZIPInputStream(new FileInputStream(file));\n                    lr = new LineNumberReader(new InputStreamReader(is, encoding));\n                } catch (Exception e) {\n                    logger.log(Level.WARNING, \"could not open file \" + file, e);\n                }\n            } else if (file.getAbsolutePath().toLowerCase().endsWith(\".z\")) {\n                try {\n                    is = new ZipInputStream(new FileInputStream(file));\n                    lr = new LineNumberReader(new InputStreamReader(is, encoding));\n                } catch (Exception e) {\n                    logger.log(Level.WARNING, \"could not open file \" + file, e);\n                }\n            } else {\n                try {\n<｜fim▁hole｜>                } catch (Exception e) {\n                    logger.log(Level.WARNING, \"could not open file \" + file, e);\n                }\n            }\n        } else {\n            logger.log(Level.WARNING, \"cannot open file: \" + file);\n        }\n    }\n\n    public IntelligentFileReader(URLConnection connection) throws IOException {\n        this(connection.getInputStream());\n    }\n\n    public String readLine() {\n        if (lr == null)\n            return null;\n        try {\n            return lr.readLine();\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"could not read line\", e);\n        }\n        return null;\n    }\n\n    public void close() {\n        try {\n            if (lr != null)\n                lr.close();\n        } catch (Exception e) {\n        }\n        try {\n            if (fr != null)\n                fr.close();\n        } catch (Exception e) {\n        }\n        try {\n            if (is != null)\n                is.close();\n        } catch (Exception e) {\n        }\n    }\n\n    public int getLineNumber() {\n        if (lr != null)\n            return lr.getLineNumber();\n        else\n            return -1;\n    }\n\n    public int read(char[] cbuf, int off, int len) throws IOException {\n        return lr.read(cbuf, off, len);\n    }\n\n    public static String load(String filename) {\n        StringBuilder s = new StringBuilder();\n        IntelligentFileReader fr = new IntelligentFileReader(filename);\n        String line = null;\n        while ((line = fr.readLine()) != null) {\n            s.append(line + \"\\n\");\n        }\n        fr.close();\n        return s.toString();\n    }\n\n    public static String load(File filename) {\n        StringBuilder s = new StringBuilder();\n        IntelligentFileReader fr = new IntelligentFileReader(filename);\n        String line = null;\n        while ((line = fr.readLine()) != null) {\n            s.append(line + \"\\n\");\n        }\n        fr.close();\n        return s.toString();\n    }\n\n    public static String load(InputStream stream) {\n        StringBuilder s = new StringBuilder();\n        IntelligentFileReader fr = new IntelligentFileReader(stream);\n        String line = null;\n        while ((line = fr.readLine()) != null) {\n            s.append(line + \"\\n\");\n        }\n        fr.close();\n        return s.toString();\n    }\n\n    public static String load(Reader reader) {\n        StringBuilder s = new StringBuilder();\n        IntelligentFileReader fr = new IntelligentFileReader(reader);\n        String line = null;\n        while ((line = fr.readLine()) != null) {\n            s.append(line + \"\\n\");\n        }\n        fr.close();\n        return s.toString();\n    }\n\n    public static byte[] readBytes(File file) {\n        return readBytes(file, MathUtil.longToInt(file.length()));\n    }\n\n    public static byte[] readBytes(File file, int length) {\n        try {\n            VerifyUtil.verifyNotNull(file, \"file is null\");\n            VerifyUtil.verifyFalse(file.isDirectory(), \"file is a directory\");\n            VerifyUtil.verifyTrue(file.canRead(), \"cannot read from file\");\n            final byte[] data = new byte[MathUtil.longToInt(Math.min(file.length(), length))];\n            FileInputStream fi = new FileInputStream(file);\n            BufferedInputStream bi = new BufferedInputStream(fi);\n            bi.read(data);\n            bi.close();\n            fi.close();\n            return data;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n\n    public static String load(URL url) throws IOException {\n        URLConnection connection = url.openConnection();\n        connection.setRequestProperty(\"User-Agent\",\n                \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)\");\n        connection.setUseCaches(false);\n        connection.setDoInput(true);\n        connection.setDoOutput(true);\n        connection.setConnectTimeout(3000);\n        return load(connection.getInputStream());\n    }\n}<｜fim▁end｜>",
    "response": "                    is = new FileInputStream(file);\n                    lr = new LineNumberReader(new InputStreamReader(is, encoding));\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.tetsuyanh.esandroid.fragment;\n\nimport android.content.Context;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.support.v7.widget.LinearLayoutManager;\nimport android.support.v7.widget.RecyclerView;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;\n\nimport com.tetsuyanh.esandroid.R;\nimport com.tetsuyanh.esandroid.entity.Post;\nimport com.tetsuyanh.esandroid.service.BookmarkService;\nimport com.tetsuyanh.esandroid.service.HistoryService;\n\nimport java.util.List;\n\npublic class PostListFragment extends Fragment {\n    private static final String TAG = PostListFragment.class.getSimpleName();\n    public enum Kind {\n        UNDEFINED(0),\n        BOOKMARK(1),\n        HISTORY(2);\n\n        private final int id;\n        Kind(final int id) {\n            this.id = id;\n        }\n        public int getInt() {\n            return this.id;\n        }\n    }\n    public static Kind getKind(final int id) {\n        Kind[] kinds = Kind.values();\n        for (Kind kind : kinds) {\n            if (kind.getInt() == id) {\n                return kind;\n            }\n        }\n        return null;\n    }\n\n    private String mTeam;\n    private Kind mKind;\n    private OnPostListFragmentInteractionListener mListener;\n\n    private BookmarkService mBookmarkService;\n    private HistoryService mHistoryService;\n    private PostListDivider mDivider;\n\n    public PostListFragment() {\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        Log.d(TAG, \"//////// onCreate:\");\n        super.onCreate(savedInstanceState);\n\n        Context context = getActivity().getApplicationContext();\n        mBookmarkService = new BookmarkService(context);\n        mHistoryService = new HistoryService(context);\n        mDivider = new PostListDivider(context);\n\n        setRetainInstance(true);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        Log.d(TAG, \"//////// onCreateView:\");\n        View view = inflater.inflate(R.layout.fragment_postlist, container, false);\n        RecyclerView recyclerView = (RecyclerView)view.findViewById(R.id.postlist);\n        TextView emptyText = (TextView)view.findViewById(R.id.empty);\n\n        List<Post> list = null;\n        switch (mKind) {\n            case BOOKMARK:\n                list = mBookmarkService.getList(mTeam);\n                break;\n            case HISTORY:\n                list = mHistoryService.getList(mTeam);\n                break;\n        }\n\n        if (mKind != Kind.UNDEFINED && recyclerView != null && list != null && list.size() > 0) {\n            Context context = recyclerView.getContext();\n            recyclerView.setLayoutManager(new LinearLayoutManager(context));\n            recyclerView.setAdapter(new PostListRecyclerViewAdapter(list, mListener));\n<｜fim▁hole｜>        } else {\n            recyclerView.setVisibility(View.GONE);\n            emptyText.setVisibility(View.VISIBLE);\n        }\n        return view;\n    }\n\n    @Override\n    public void onAttach(Context context) {\n        Log.d(TAG, \"//////// onAttach:\");\n        super.onAttach(context);\n        if (context instanceof OnPostListFragmentInteractionListener) {\n            mListener = (OnPostListFragmentInteractionListener) context;\n        } else {\n            throw new RuntimeException(context.toString()\n                    + \" must implement OnPostListFragmentInteractionListener\");\n        }\n    }\n\n    @Override\n    public void onDetach() {\n        Log.d(TAG, \"//////// onDetach:\");\n        super.onDetach();\n        mListener = null;\n    }\n\n    public void setTeam(String team) {\n        mTeam = team;\n    }\n\n    public void setKind(Kind kind) {\n        mKind = kind;\n    }\n\n    public interface OnPostListFragmentInteractionListener {\n        void onSelectPost(Post post);\n    }\n}<｜fim▁end｜>",
    "response": "            recyclerView.addItemDecoration(mDivider);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.ambari.server.api.stomp;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.event.EventListener;\nimport org.springframework.messaging.MessageHeaders;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.socket.messaging.SessionDisconnectEvent;\nimport org.springframework.web.socket.messaging.SessionSubscribeEvent;\nimport org.springframework.web.socket.messaging.SessionUnsubscribeEvent;\n\n@Component\npublic class NamedTasksSubscribeListener {\n  private static Logger LOG = LoggerFactory.getLogger(NamedTasksSubscribeListener.class);\n\n  @Autowired\n  private NamedTasksSubscriptions namedTasksSubscriptions;\n\n  @EventListener\n  public void subscribe(SessionSubscribeEvent sse)\n  {\n    MessageHeaders msgHeaders = sse.getMessage().getHeaders();\n    String sessionId  = (String) msgHeaders.get(\"simpSessionId\");\n    String destination  = (String) msgHeaders.get(\"simpDestination\");\n    String id  = (String) msgHeaders.get(\"simpSubscriptionId\");\n    if (sessionId != null && destination != null && id != null) {\n      namedTasksSubscriptions.addDestination(sessionId, destination, id);\n    }\n    LOG.info(String.format(\"API subscribe was arrived with sessionId = %s, destination = %s and id = %s\",\n        sessionId, destination, id));\n  }\n\n  @EventListener\n  public void unsubscribe(SessionUnsubscribeEvent suse)\n  {\n    MessageHeaders msgHeaders = suse.getMessage().getHeaders();\n    String sessionId  = (String) msgHeaders.get(\"simpSessionId\");\n    String id  = (String) msgHeaders.get(\"simpSubscriptionId\");\n    if (sessionId != null && id != null) {\n      namedTasksSubscriptions.removeId(sessionId, id);\n    }\n    LOG.info(String.format(\"API unsubscribe was arrived with sessionId = %s and id = %s\",\n        sessionId, id));\n  }\n\n  @EventListener\n  public void disconnect(SessionDisconnectEvent sde)\n  {\n    MessageHeaders msgHeaders = sde.getMessage().getHeaders();\n    String sessionId  = (String) msgHeaders.get(\"simpSessionId\");\n    if (sessionId != null) {\n      namedTasksSubscriptions.removeSession(sessionId);\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "    }\n    LOG.info(String.format(\"API disconnect was arrived with sessionId = %s\",\n        sessionId));\n  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package cn.xishan.oftenporter.porter.core.base;\n\nimport java.util.Map;\n\npublic interface WRequest\n{\n    /**\n     * 得到参数(路径参数优先)，例如地址参数和表单参数等。\n     *\n     * @param name 参数名称\n     */\n    Object getParameter(String name);\n\n    /**\n     * 得到所有参数的map。\n     *\n     * @return\n     */\n    Map<String, Object> getParameterMap();\n\n    String getPath();\n\n    PortMethod getMethod();\n\n    /**\n     * 获得最原始的响应对象，例如在servlet中可能需要HttpServletResponse.\n     *\n     * @return\n<｜fim▁hole｜>     *\n     * @return\n     */\n    <T> T getOriginalRequest();\n\n    WObject getOriginalWObject();\n\n}<｜fim▁end｜>",
    "response": "     */\n    <T> T getOriginalResponse();\n\n    /**\n     * 获得最原始的请求对象，例如在servlet中可能需要HttpServletRequest.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.empowerhack.hub.controller.advice;\n\nimport io.empowerhack.hub.domain.User;\nimport io.empowerhack.hub.service.UserService;\nimport org.springframework.beans.factory.annotation.Autowired;\n<｜fim▁hole｜>\nimport java.security.Principal;\n\n@ControllerAdvice\npublic final class CurrentUserAdvice {\n\n    @Autowired\n    private UserService userService;\n\n    @ModelAttribute(\"currentUser\")\n    public User getCurrentUser(Principal principal) {\n\n        if (principal == null) {\n            return new User(null);\n        }\n\n        return userService.findByCurrentUser();\n    }\n}<｜fim▁end｜>",
    "response": "import org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ModelAttribute;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.openhab.binding.solaredge.internal.callback;\n\nimport static org.openhab.binding.solaredge.internal.SolarEdgeBindingConstants.*;\n\nimport java.net.CookieStore;\nimport java.net.HttpCookie;\nimport java.net.SocketTimeoutException;\nimport java.net.URI;\nimport java.net.UnknownHostException;\nimport java.nio.ByteBuffer;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\nimport org.eclipse.jdt.annotation.NonNullByDefault;\nimport org.eclipse.jdt.annotation.Nullable;\nimport org.eclipse.jetty.client.HttpClient;\nimport org.eclipse.jetty.client.api.Request;\nimport org.eclipse.jetty.client.api.Response;\nimport org.eclipse.jetty.client.util.BufferingResponseListener;\nimport org.eclipse.jetty.http.HttpStatus;\nimport org.eclipse.jetty.http.HttpStatus.Code;\nimport org.openhab.binding.solaredge.internal.command.SolarEdgeCommand;\nimport org.openhab.binding.solaredge.internal.config.SolarEdgeConfiguration;\nimport org.openhab.binding.solaredge.internal.connector.CommunicationStatus;\nimport org.openhab.binding.solaredge.internal.connector.StatusUpdateListener;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonSyntaxException;\n\n@NonNullByDefault\npublic abstract class AbstractCommandCallback extends BufferingResponseListener implements SolarEdgeCommand {\n\n    /**\n     * logger\n     */\n    protected final Logger logger = LoggerFactory.getLogger(AbstractCommandCallback.class);\n\n    /**\n     * the configuration\n     */\n    protected final SolarEdgeConfiguration config;\n\n    /**\n     * JSON deserializer\n     */\n    private final Gson gson;\n\n    /**\n     * status code of fulfilled request\n     */\n<｜fim▁hole｜>\n    /**\n     * the constructor\n     *\n     * @param config\n     */\n    public AbstractCommandCallback(SolarEdgeConfiguration config) {\n        this.communicationStatus = new CommunicationStatus();\n        this.config = config;\n        this.gson = new Gson();\n    }\n\n    /**\n     * the constructor\n     *\n     * @param config\n     */\n    public AbstractCommandCallback(SolarEdgeConfiguration config, StatusUpdateListener listener) {\n        this(config);\n        this.listener = listener;\n    }\n\n    /**\n     * Log request success\n     */\n    @Override\n    public final void onSuccess(@Nullable Response response) {\n        super.onSuccess(response);\n        if (response != null) {\n            communicationStatus.setHttpCode(HttpStatus.getCode(response.getStatus()));\n            logger.debug(\"HTTP response {}\", response.getStatus());\n        }\n    }\n\n    /**\n     * Log request failure\n     */\n    @Override\n    public final void onFailure(@Nullable Response response, @Nullable Throwable failure) {\n        super.onFailure(response, failure);\n        if (failure != null) {\n            logger.debug(\"Request failed: {}\", failure.toString());\n            communicationStatus.setError((Exception) failure);\n\n            if (failure instanceof SocketTimeoutException || failure instanceof TimeoutException) {\n                communicationStatus.setHttpCode(Code.REQUEST_TIMEOUT);\n            } else if (failure instanceof UnknownHostException) {\n                communicationStatus.setHttpCode(Code.BAD_GATEWAY);\n            } else {\n                communicationStatus.setHttpCode(Code.INTERNAL_SERVER_ERROR);\n            }\n        } else {\n            logger.debug(\"Request failed\");\n        }\n    }\n\n    @Override\n    public void onContent(@Nullable Response response, @Nullable ByteBuffer content) {\n        super.onContent(response, content);\n        logger.debug(\"received content, length: {}\", getContentAsString().length());\n    }\n\n    @Override\n    public void performAction(HttpClient asyncclient) {\n        Request request = asyncclient.newRequest(getURL()).timeout(config.getAsyncTimeout(), TimeUnit.SECONDS);\n\n        // add authentication data for every request. Handling this here makes it obsolete to implement for each and\n        // every command\n        if (config.isUsePrivateApi()) {\n            // token cookie is only used by private API therefore this can be skipped when using public API\n            CookieStore cookieStore = asyncclient.getCookieStore();\n            HttpCookie c = new HttpCookie(PRIVATE_API_TOKEN_COOKIE_NAME, config.getTokenOrApiKey());\n            c.setDomain(PRIVATE_API_TOKEN_COOKIE_DOMAIN);\n            c.setPath(PRIVATE_API_TOKEN_COOKIE_PATH);\n            cookieStore.add(URI.create(getURL()), c);\n        } else {\n            // this is only relevant when using public API\n            request.param(PUBLIC_DATA_API_KEY_FIELD, config.getTokenOrApiKey());\n\n        }\n\n        prepareRequest(request).send(this);\n    }\n\n    /**\n     * @return returns Http Status Code\n     */\n    public CommunicationStatus getCommunicationStatus() {\n        return communicationStatus;\n    }\n\n    @Override\n    public void updateListenerStatus() {\n        if (listener != null) {\n            listener.update(communicationStatus);\n        }\n    }\n\n    /**\n     * concrete implementation has to prepare the requests with additional parameters, etc\n     *\n     * @param requestToPrepare the request to prepare\n     * @return prepared Request object\n     */\n    protected abstract Request prepareRequest(Request requestToPrepare);\n\n    /**\n     * concrete implementation has to provide the URL\n     *\n     * @return Url\n     */\n    protected abstract String getURL();\n\n    @Override\n    public final void setListener(StatusUpdateListener listener) {\n        this.listener = listener;\n    }\n\n    /**\n     * just a wrapper as fromJson could return null. This will avoid warnings as eclipse otherwise assumes unnecessary\n     * null checks which are not unnecessary\n     *\n     * @param <T>\n     * @param json\n     * @param classOfT\n     * @return\n     * @throws JsonSyntaxException\n     */\n    protected <T> @Nullable T fromJson(String json, Class<T> classOfT) throws JsonSyntaxException {\n        return gson.fromJson(json, classOfT);\n    }\n}<｜fim▁end｜>",
    "response": "    private final CommunicationStatus communicationStatus;\n\n    /**\n     * listener to provide updates to the WebInterface class\n     */\n    private @Nullable StatusUpdateListener listener;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package br.org.scadabr.db.dao.mocks;\n\nimport com.serotonin.mango.db.dao.ViewDao;\nimport com.serotonin.mango.view.View;\nimport com.serotonin.util.SerializationHelper;\n\npublic class MockViewDao extends ViewDao {\n\n    public View createView(String xid, int id, int userId) {\n        View vo = new View();\n\n        /*vo.setId(doInsert(\n                \"insert into mangoViews (xid, id, name, userId, anonymousAccess, data) values (?,?,?,?,?,?)\",\n                new Object[] { xid, id, xid, userId, 0,\n                        SerializationHelper.writeObjectToArray(vo) }));\n\n        vo.setXid(xid);\n        vo.setName(xid);\n        vo.setUserId(userId);\n        vo.setId(id);\n        return vo;*/\n<｜fim▁hole｜>\n}<｜fim▁end｜>",
    "response": "        return null;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.jking31cs.trianglehalving;\n\npublic class Edge {\n    public final Point p1;\n    public final Point p2;\n\n    public Edge(Point p1, Point p2) {\n        this.p1 = p1;\n        this.p2 = p2;\n    }\n\n    public Vector asVec() {\n        return new Vector(p2.x-p1.x, p2.y-p1.y);\n    }\n\n    public float length() {\n        return asVec().getMag();\n    }\n\n    /**\n     * Taken from the wikipedia page on line-line intersection.\n     * @param e\n     * @return null if parallel, else the intersection point.\n     */\n    public Point intersectionPoint(Edge e) {\n        float xTop = (p1.asVec().vectorProduct(p2.asVec())*(e.p1.x - e.p2.x)) - \n                ((p1.x-p2.x)*e.p1.asVec().vectorProduct(e.p2.asVec()));\n        float bot = ((p1.x -p2.x)*(e.p1.y-e.p2.y)) - ((p1.y-p2.y)*(e.p1.x-e.p2.x));\n        float yTop = (p1.asVec().vectorProduct(p2.asVec())*(e.p1.y - e.p2.y)) - \n                ((p1.y-p2.y)*e.p1.asVec().vectorProduct(e.p2.asVec()));\n\n        if (bot == 0) {\n            return null;\n<｜fim▁hole｜>    }\n\n    /**\n     * Finds the midpoint of the edge.\n     * @return\n     */\n    public Point midPoint() {\n        Vector v = p1.asVec().add(p2.asVec()).mul(.5f);\n        return new Point(v.x,v.y);\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((p1 == null) ? 0 : p1.hashCode());\n        result = prime * result + ((p2 == null) ? 0 : p2.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        Edge other = (Edge) obj;\n        if (p1 == null) {\n            if (other.p1 != null)\n                return false;\n        } else if (!p1.equals(other.p1))\n            return false;\n        if (p2 == null) {\n            if (other.p2 != null)\n                return false;\n        } else if (!p2.equals(other.p2))\n            return false;\n        return true;\n    }\n\n    @Override\n    public String toString() {\n        return \"Edge [p1=\" + p1 + \", p2=\" + p2 + \"]\";\n    }\n\n}<｜fim▁end｜>",
    "response": "        }\n        return new Point(xTop/bot, yTop/bot);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package xreliquary.entities.shot;\n\nimport net.minecraft.entity.EntityLivingBase;\nimport net.minecraft.entity.effect.EntityLightningBolt;\nimport net.minecraft.entity.monster.EntityCreeper;\nimport net.minecraft.entity.player.EntityPlayer;\nimport net.minecraft.util.MovingObjectPosition;\nimport net.minecraft.world.World;\n\npublic class EntityStormShot extends EntityShotBase {\n    public EntityStormShot(World par1World) {\n        super(par1World);\n    }\n\n    public EntityStormShot(World par1World, double par2, double par4, double par6) {\n        super(par1World, par2, par4, par6);\n    }\n\n    public EntityStormShot(World par1World, EntityPlayer par2EntityPlayer) {\n        super(par1World, par2EntityPlayer);\n    }\n\n    @Override\n    void doFiringEffects() {\n        worldObj.spawnParticle(\"mobSpellAmbient\", posX + smallGauss(0.1D), posY + smallGauss(0.1D), posZ + smallGauss(0.1D), 0.5D, 0.5D, 0.5D);\n        worldObj.spawnParticle(\"flame\", posX, posY, posZ, gaussian(motionX), gaussian(motionY), gaussian(motionZ));\n    }\n\n    @Override\n    void doFlightEffects() {\n        // does nothing\n    }\n\n    @Override\n    void onImpact(MovingObjectPosition mop) {\n        if (mop.typeOfHit == MovingObjectPosition.MovingObjectType.ENTITY && mop.entityHit != null) {\n            if (mop.entityHit == shootingEntity)\n                return;\n            if (!(mop.entityHit instanceof EntityLivingBase))\n                return;\n            this.onImpact((EntityLivingBase)mop.entityHit);\n        } else if (mop.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {\n            if (worldObj.canLightningStrikeAt(mop.blockX, mop.blockY, mop.blockZ) && worldObj.getWorldInfo().isRaining() && worldObj.getWorldInfo().isThundering())\n                worldObj.addWeatherEffect(new EntityLightningBolt(worldObj, mop.blockX, mop.blockY, mop.blockZ));\n            this.groundImpact(mop.sideHit);\n        }\n    }\n\n    @Override\n    void doBurstEffect(int sideHit) {\n        // does nothing\n    }\n\n    @Override\n    void onImpact(EntityLivingBase mop) {\n        if (mop != shootingEntity || ticksInAir > 3)\n            doDamage(mop);\n        spawnHitParticles(\"bubble\", 18);\n        this.setDead();\n    }\n\n    @Override\n    void spawnHitParticles(String string, int i) {\n        for (int particles = 0; particles < i; particles++)\n            worldObj.spawnParticle(string, posX, posY - (string == \"portal\" ? 1 : 0), posZ, gaussian(motionX), rand.nextFloat() + motionY, gaussian(motionZ));\n<｜fim▁hole｜>    @Override\n    int getRicochetMax() {\n        return 1;\n    }\n\n    @Override\n    int getDamageOfShot(EntityLivingBase mop) {\n        if (mop instanceof EntityCreeper)\n            ((EntityCreeper) mop).onStruckByLightning(new EntityLightningBolt(worldObj, mop.posX, mop.posY, mop.posZ));\n        if (worldObj.canLightningStrikeAt((int) (mop.posX + 0.5F), (int) (mop.posY + 0.5F), (int) (mop.posZ + 0.5F)) && worldObj.getWorldInfo().isRaining() && worldObj.getWorldInfo().isThundering())\n            worldObj.addWeatherEffect(new EntityLightningBolt(worldObj, (int) (mop.posX + 0.5F), (int) (mop.posY + 0.5F), (int) (mop.posZ + 0.5F)));\n        float f = 1F + (worldObj.isRaining() ? 0.5F : 0F) + (worldObj.isThundering() ? 0.5F : 0F);\n        return Math.round(9F * f) + d6();\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.k2crypto.keyversions;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\n<｜fim▁hole｜>import com.google.k2crypto.exceptions.EncryptionException;\n\nimport org.junit.Test;\n\npublic class DSAPrivateKeyVersionTest {\n\n  /**\n   * Method to test digital signing and verification. Can be slow to run due to use of SecureRandom\n   *\n   * @throws EncryptionException\n   * @throws BuilderException\n   */\n  @Test\n  public void testSignVerify() throws EncryptionException, BuilderException {\n    // create a DSAPrivateKeyVersion using the builder object\n    DSAPrivateKeyVersion keyversion1 = new DSAPrivateKeyVersion.Builder().build();\n\n    // test data to sign\n    byte[] data = \"Get swole or die trying\".getBytes();\n    // make the digital signature\n    byte[] digitalSignature = keyversion1.signData(data);\n\n    // now verify using the public key\n    boolean verified = keyversion1.getPublic().verifySig(data, digitalSignature);\n    System.out.println(verified);\n    assertTrue(verified);\n\n    // now check that the signature does not verify using a different public key\n    DSAPrivateKeyVersion keyversion2 = new DSAPrivateKeyVersion.Builder().build();\n    verified = keyversion2.getPublic().verifySig(data, digitalSignature);\n    System.out.println(verified);\n    assertFalse(verified);\n  }\n\n}<｜fim▁end｜>",
    "response": "\nimport com.google.k2crypto.exceptions.BuilderException;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.indiarose.indiarosetimebar.fragments;\n\nimport java.util.*;\n\nimport org.indiarose.indiarosetimebar.R;\nimport org.indiarose.indiarosetimebar.calendrier.CalendrierAndroidTimesSquare;\nimport org.indiarose.indiarosetimebar.calendrier.core.Calendrier;\nimport org.indiarose.indiarosetimebar.calendrier.core.Calendrier.DateChoisieDelegate;\nimport org.indiarose.indiarosetimebar.fragments.core.BarreDeTempsFragmentNormal;\nimport org.indiarose.indiarosetimebar.model.Jour;\nimport org.indiarose.indiarosetimebar.model.Periode;\nimport org.indiarose.indiarosetimebar.parametres.Parametres;\nimport org.indiarose.indiarosetimebar.utils.JourManager;\n\nimport android.os.Bundle;\nimport android.view.*;\n\npublic class ModifierJoursFragment extends BarreDeTempsFragmentNormal implements\n        DateChoisieDelegate, View.OnClickListener {\n    Bundle savedInstanceState = null;\n    Parametres parametres;\n\n    ViewGroup mainLayout;\n    Calendrier calendar;\n    List<Jour> joursChoisis;\n    View bouton_valider;\n    View bouton_retour;\n    View bouton_creer_recurrences;\n\n<｜fim▁hole｜>        if (super.onCreateView(inflater, container, savedInstanceState,\n                R.layout.modifier_jours_layout)) {\n\n            this.parametres = Parametres.getInstance(getActivity());\n\n            ajouterVues();\n            chargerVues();\n            ajouterListener();\n\n        }\n\n        return getFragmentView();\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        ajouterVues();\n        chargerVues();\n        ajouterListener();\n    }\n\n    private void ajouterListener() {\n        bouton_retour.setOnClickListener(this);\n        bouton_valider.setOnClickListener(this);\n        bouton_creer_recurrences.setOnClickListener(this);\n    }\n\n    private void chargerVues() {\n        this.calendar = new CalendrierAndroidTimesSquare(getActivity(), this,\n                mainLayout);\n        bouton_valider.setVisibility(View.GONE);\n\n        this.calendar.afficherJours(JourManager.joursNonVides(getDonnees().getJours()),\n                parametres.getCouleurJoursAvecBarreDeTemps());\n    }\n\n    private void ajouterVues() {\n        mainLayout = (ViewGroup) findViewById(R.id.modifier_jours_main_layout);\n        bouton_valider = findViewById(R.id.modifier_jours_valider);\n        bouton_retour = findViewById(R.id.modifier_bouton_retour);\n        bouton_creer_recurrences = findViewById(R.id.modifier_jours_creer_recurrences);\n    }\n\n    @Override\n    public void onDateChoisie(List<Date> selectedDates) {\n        if (selectedDates.size() == 0) {\n            joursChoisis = null;\n            bouton_valider.setVisibility(View.GONE);\n        } else {\n            joursChoisis = JourManager.getLesJours(getDonnees(), selectedDates);\n            bouton_valider.setVisibility(View.VISIBLE);\n        }\n\n    }\n\n    public void lancerActionPeriodique() {\n        ajouterFragment(new ActionPeriodiqueFragment());\n    }\n\n    @Override\n    public void onClick(View v) {\n        int id = v.getId();\n        if (id == R.id.modifier_bouton_retour) {\n            retirerFragment();\n        } else if (id == R.id.modifier_jours_valider && joursChoisis != null) {\n            // c'ets la qu'on regarde, si tous les jours sont egaux, ou tous\n            // vides\n            // si oui , on envoi sur BarreDeTempsFragments, pour modifier un\n            // ensemble de jours,\n            // sinon, on lance un fragment qui va permettre de garder certaines\n            // periodes et fusionner les jours\n            if (JourManager.tousEgaux(joursChoisis)\n                    || JourManager.tousVides(joursChoisis)) {\n                if (joursChoisis.get(0).getPeriodes() == null) {\n                    joursChoisis.get(0).setPeriodes(new ArrayList<Periode>());\n                }\n                ajouterFragment(new BarreDeTempsModifiableFragment(\n                        joursChoisis, joursChoisis.get(0).getPeriodes()));\n\n            } else\n                ajouterFragment(new SelectionnerPeriodesFragment(joursChoisis));\n        } else if (id == R.id.modifier_jours_creer_recurrences) {\n            lancerActionPeriodique();\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState) {\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.antlr.runtime3_4_0.tree;\n\nimport java.util.List;\n\nimport org.antlr.runtime3_4_0.Token;\n\npublic class RewriteRuleTokenStream extends RewriteRuleElementStream {\n\n    public RewriteRuleTokenStream(TreeAdaptor adaptor, String elementDescription) {\n        super(adaptor, elementDescription);\n<｜fim▁hole｜>    /** Create a stream with one element */\n    public RewriteRuleTokenStream(TreeAdaptor adaptor,\n                                  String elementDescription,\n                                  Object oneElement)\n    {\n        super(adaptor, elementDescription, oneElement);\n    }\n\n    /** Create a stream, but feed off an existing list */\n    public RewriteRuleTokenStream(TreeAdaptor adaptor,\n                                  String elementDescription,\n                                  List elements)\n    {\n        super(adaptor, elementDescription, elements);\n    }\n\n    /** Get next token from stream and make a node for it */\n    public Object nextNode() {\n        Token t = (Token)_next();\n        return adaptor.create(t);\n    }\n\n    public Token nextToken() {\n        return (Token)_next();\n    }\n\n    /** Don't convert to a tree unless they explicitly call nextTree.\n     *  This way we can do hetero tree nodes in rewrite.\n     */\n    protected Object toTree(Object el) {\n        return el;\n    }\n\n    protected Object dup(Object el) {\n        throw new UnsupportedOperationException(\"dup can't be called for a token stream.\");\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package edu.bu.sbahr;\n\nimport java.util.Map;\n\npublic class Document {\n\n    /** Name of the document without the .txt format */\n    protected String documentName;\n    /** Map of terms to frequency */\n    protected Map<String, Integer> termFrequency;\n\n    /**\n     * Construct a new document\n     * \n<｜fim▁hole｜>     */\n    public Document(String name, Map<String, Integer> termFreq) {\n        this.documentName = name;\n        this.termFrequency = termFreq;\n    }\n}<｜fim▁end｜>",
    "response": "     * @param name - the document name\n     * @param termFreq - the map of term frequencies\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.intellij.java.refactoring;\n\nimport com.intellij.JavaTestUtil;\nimport com.intellij.codeInsight.CodeInsightUtil;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiExpression;\nimport com.intellij.psi.codeStyle.CodeStyleSettings;\nimport com.intellij.psi.codeStyle.CodeStyleSettingsManager;\nimport com.intellij.refactoring.extractMethodObject.ExtractMethodObjectHandler;\nimport com.intellij.refactoring.extractMethodObject.ExtractMethodObjectProcessor;\nimport org.jetbrains.annotations.NotNull;\n\npublic class ExtractMethodObjectWithMultipleExitPointsTest extends LightRefactoringTestCase {\n  @NotNull\n  @Override\n  protected String getTestDataPath() {\n    return JavaTestUtil.getJavaTestDataPath();\n  }\n\n  private void doTest() throws Exception {\n    doTest(true);\n  }\n\n  private void doTest(final boolean createInnerClass) throws Exception {\n    final String testName = getTestName(false);\n    configureByFile(\"/refactoring/extractMethodObject/multipleExitPoints/\" + testName + \".java\");\n    int startOffset = myEditor.getSelectionModel().getSelectionStart();\n    int endOffset = myEditor.getSelectionModel().getSelectionEnd();\n\n    final PsiElement[] elements;\n    PsiExpression expr = CodeInsightUtil.findExpressionInRange(myFile, startOffset, endOffset);\n    if (expr != null) {\n      elements = new PsiElement[]{expr};\n    }\n    else {\n      elements = CodeInsightUtil.findStatementsInRange(myFile, startOffset, endOffset);\n    }\n\n    final ExtractMethodObjectProcessor processor =\n      new ExtractMethodObjectProcessor(getProject(), getEditor(), elements, \"Inner\");\n    final ExtractMethodObjectProcessor.MyExtractMethodProcessor extractProcessor = processor.getExtractProcessor();\n    extractProcessor.setShowErrorDialogs(false);\n    extractProcessor.prepare();\n    extractProcessor.testPrepare();\n    processor.setCreateInnerClass(createInnerClass);\n\n    ExtractMethodObjectHandler.run(getProject(), getEditor(), processor, extractProcessor);\n\n    checkResultByFile(\"/refactoring/extractMethodObject/multipleExitPoints/\" + testName + \".java\" + \".after\");\n  }\n\n  public void testStaticInner() throws Exception {\n    doTest();\n  }\n\n  public void testInputOutput() throws Exception {\n    doTest();\n  }\n\n  public void testOutputVarsReferences() throws Exception {\n    doTest();\n  }\n\n  public void testMultilineDeclarations() throws Exception {\n    doTest();\n  }\n\n  public void testMultilineDeclarationsWithReturn() throws Exception {\n    doTest();\n  }\n\n  public void testConditionalExit() throws Exception {\n    doTest();\n  }\n\n  public void testOutputVariable() throws Exception {\n    doTest();\n  }\n\n  public void testUniqueObjectName() throws Exception {\n    doTest();\n  }\n\n  public void testExtractedAssignmentExpression() throws Exception {\n    doTest();\n  }\n\n  public void testExtractedIncExpression() throws Exception {\n    doTest();\n  }\n\n  public void testWithInnerClasses() throws Exception {\n    doTest();\n  }\n\n  public void testNonCanonicalNaming() throws Exception {\n    doTest();\n  }\n\n<｜fim▁hole｜>\n  public void testExtractFromIfStatementInsideAnonymous() throws Exception {\n    doTest();\n  }\n\n  public void testConditionalExitWithoutCodeBlock() throws Exception {\n    doTest();\n  }\n\n  public void testReturnExitStatement() throws Exception {\n    doTest();\n  }\n\n  public void testFromStaticContext() throws Exception {\n    doTest();\n  }\n\n  public void testBatchUpdateCausedByFormatter() throws Exception {\n    doTest();\n  }\n\n  public void testFormattingInside() throws Exception {\n    doTest();\n  }\n\n  public void testAssignReturnValueToForeachParameter() throws Exception {\n    doTest();\n  }\n\n  public void testRenameInInitializer() throws Exception {\n    doTestWithIdeaCodeStyleSettings();\n  }\n\n  public void testSameFieldsWithPrefix() throws Exception {\n    doTestWithIdeaCodeStyleSettings();\n  }\n\n  public void testOutputVariablesUsedInLoop1() throws Exception {\n    doTest();\n  }\n\n  public void testOutputVariablesUsedInLoop2() throws Exception {\n    doTest();\n  }\n\n  private void doTestWithIdeaCodeStyleSettings() throws Exception {\n    final CodeStyleSettings settings = CodeStyleSettingsManager.getSettings(getProject());\n    String oldPrefix = settings.FIELD_NAME_PREFIX;\n    settings.FIELD_NAME_PREFIX = \"my\";\n    boolean oldPrefer = settings.PREFER_LONGER_NAMES;\n    settings.PREFER_LONGER_NAMES = false;\n    try {\n      doTest();\n    }\n    finally {\n      settings.FIELD_NAME_PREFIX = oldPrefix;\n      settings.PREFER_LONGER_NAMES = oldPrefer;\n    }\n  }\n}<｜fim▁end｜>",
    "response": "  public void testExtractFromAnonymous() throws Exception {\n    doTest();\n  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.opencms.search.extractors;\n\nimport org.opencms.test.OpenCmsTestProperties;\n\nimport junit.framework.Test;\nimport junit.framework.TestSuite;\n\npublic final class AllTests {\n\n    /**\n     * Hide constructor to prevent generation of class instances.<p>\n     */\n    private AllTests() {\n\n        // empty\n<｜fim▁hole｜>    /**\n     * Returns the JUnit test suite for this package.<p>\n     *\n     * @return the JUnit test suite for this package\n     */\n    public static Test suite() {\n\n        TestSuite suite = new TestSuite(\"Tests for package \" + AllTests.class.getPackage().getName());\n        OpenCmsTestProperties.initialize(org.opencms.test.AllTests.TEST_PROPERTIES_PATH);\n        //$JUnit-BEGIN$\n        suite.addTest(new TestSuite(TestHtmllExtraction.class));\n        suite.addTest(new TestSuite(TestMsPowerPointExtraction.class));\n        suite.addTest(new TestSuite(TestRtfExtraction.class));\n        suite.addTest(new TestSuite(TestMsWordExtraction.class));\n        suite.addTest(new TestSuite(TestPdfExtraction.class));\n        suite.addTest(new TestSuite(TestMsExcelExtraction.class));\n        suite.addTest(TestXmlDocumentExtraction.suite());\n        //$JUnit-END$\n        return suite;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.guodong.activity;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.Window;\nimport android.widget.AdapterView;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\nimport com.android.volley.RequestQueue;\nimport com.android.volley.Response;\nimport com.android.volley.VolleyError;\nimport com.android.volley.toolbox.JsonObjectRequest;\nimport com.android.volley.toolbox.Volley;\nimport com.guodong.R;\nimport com.guodong.model.Gym;\nimport com.guodong.util.GymAdapter;\nimport com.guodong.util.JsonParse;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class GymListActivity extends Activity\n{\n    private List<Gym> gymList = new ArrayList<>();\n    private RequestQueue requestQueue;\n    private Context context = GymListActivity.this;\n    private GymAdapter gymAdapter;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        setContentView(R.layout.sport_venue_lists);\n\n        TextView sportNameText = (TextView) findViewById(R.id.sport_name);\n        Intent intent = getIntent();\n        String category = intent.getStringExtra(\"category\");\n        sportNameText.setText(category);\n\n<｜fim▁hole｜>                detailUrl.append(this.getString(R.string.pingpongUrl));\n                break;\n            case \"游泳馆\":\n                detailUrl.append(this.getString(R.string.swimmingUrl));\n                break;\n            case \"健身馆\":\n                detailUrl.append(this.getString(R.string.gymUrl));\n                break;\n            case \"台球厅\":\n                detailUrl.append(this.getString(R.string.billiardUrl));\n                break;\n        }\n        requestQueue = Volley.newRequestQueue(context);\n        sendRequest(detailUrl.toString(), requestQueue);\n\n        gymAdapter = new GymAdapter(GymListActivity.this, R.layout.sport_venue_lists_item, gymList);\n\n        ListView gym_list = (ListView) findViewById(R.id.sport_venue_listView);\n        gym_list.setAdapter(gymAdapter);\n        gym_list.setOnItemClickListener(new AdapterView.OnItemClickListener()\n        {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view, int position, long id)\n            {\n                Gym gym = gymList.get(position);\n                SportVenueDetailActivity.actionStart(context, gym.getGymId(), gym.getGymName());\n            }\n        });\n\n    }\n\n    private void initGyms()\n    {\n        Gym gym1 = new Gym(\"合肥市奥体中心\", 12, 3.3f);\n        gymList.add(gym1);\n\n        Gym gym2 = new Gym(\"合肥市奥体中心\", 12, 3.3f);\n        gymList.add(gym2);\n\n        Gym gym3 = new Gym(\"合肥市奥体中心\", 12, 3.3f);\n        gymList.add(gym3);\n\n        Gym gym4 = new Gym(\"合肥市奥体中心\", 12, 3.3f);\n        gymList.add(gym4);\n\n        Gym gym5 = new Gym(\"合肥市奥体中心\", 12, 3.3f);\n        gymList.add(gym5);\n    }\n\n    public static void actionStart(Context context, String category) {\n        Intent intent = new Intent(context, GymListActivity.class);\n        intent.putExtra(\"category\", category);\n        context.startActivity(intent);\n    }\n\n    private void sendRequest(String url, RequestQueue requestQueue) {\n\n        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(url, null,\n                new Response.Listener<JSONObject>() {\n                    @Override\n                    public void onResponse(JSONObject response) {\n                        try {\n                            gymList.clear();\n                            Log.d(\"YE\", \"01 \" + response.toString());\n                            gymList.addAll(JsonParse.ParseBriefGymInfo(response.toString()));\n                            gymAdapter.notifyDataSetChanged();\n                        } catch (JSONException e) {\n                            e.printStackTrace();\n                        }\n                        //\n                        /*Message message = new Message();\n                        message.what = Constant.SHOW_RESPONSE;\n                        message.obj = response.toString();\n                        viewHandler.sendMessage(message);*/\n                    }\n                }, new Response.ErrorListener() {\n            @Override\n            public  void onErrorResponse(VolleyError error) {\n                Log.d(\"YE\", \"gymlist 返回错误信息\" + error.toString());\n            }\n        });\n        requestQueue.add(jsonObjectRequest);\n    }\n\n}<｜fim▁end｜>",
    "response": "        StringBuilder detailUrl = new StringBuilder();\n        switch (category) {\n            case \"羽毛球场\":\n                detailUrl.append(this.getString(R.string.badmintonUrl));\n                break;\n            case \"乒乓球馆\":\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package de.jdufner.microservice.konto.beauskunftung;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class KontoBeauskunftungApplicationTest {\n<｜fim▁hole｜>  public void contextLoads() {\n  }\n\n}<｜fim▁end｜>",
    "response": "\n  @Test\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package gov.nih.nci.lv.domain;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.OneToMany;\n\n@Entity\npublic class Investigator extends AbstractDate {\n\n    private String nciIdentifier;\n    private String firstName;\n    private String lastName;\n<｜fim▁hole｜>    private List<StudyInvestigator> studyInvestigators = new ArrayList<StudyInvestigator>();\n\n    /**\n     *\n     * @return nciIdentifier\n     */\n    @Column(name = \"NCI_IDENTIFIER\")\n    public String getNciIdentifier() {\n        return nciIdentifier;\n    }\n    /**\n     *\n     * @param nciIdentifier nciIdentifier\n     */\n    public void setNciIdentifier(String nciIdentifier) {\n        this.nciIdentifier = nciIdentifier;\n    }\n\n    /**\n     *\n     * @return firstName\n     */\n    @Column(name = \"FIRST_NAME\")\n    public String getFirstName() {\n        return firstName;\n    }\n    /**\n     *\n     * @param firstName  firstName\n     */\n    public void setFirstName(String firstName) {\n        this.firstName = firstName;\n    }\n    /**\n     *\n     * @return lastName\n     */\n    @Column(name = \"LAST_NAME\")\n    public String getLastName() {\n        return lastName;\n    }\n    /**\n     *\n     * @param lastName lastName\n     */\n    public void setLastName(String lastName) {\n        this.lastName = lastName;\n    }\n\n    /**\n     *\n     * @return streetAddress\n     */\n    @Column(name = \"STREET_ADDRESS\")\n    public String getStreetAddress() {\n        return streetAddress;\n    }\n    /**\n     *\n     * @param streetAddress streetAddress\n     */\n    public void setStreetAddress(String streetAddress) {\n        this.streetAddress = streetAddress;\n    }\n    /**\n     *\n     * @return city\n     */\n    public String getCity() {\n        return city;\n    }\n    /**\n     *\n     * @param city city\n     */\n    public void setCity(String city) {\n        this.city = city;\n    }\n    /**\n     *\n     * @return stateCode\n     */\n    @Column(name = \"STATE\")\n    public String getStateCode() {\n        return stateCode;\n    }\n    /**\n     *\n     * @param stateCode stateCode\n     */\n     public void setStateCode(String stateCode) {\n        this.stateCode = stateCode;\n    }\n    /**\n     *\n     * @return postalCode\n     */\n    @Column(name = \"ZIP_CODE\")\n    public String getPostalCode() {\n        return postalCode;\n    }\n    /**\n     *\n     * @param postalCode postalCode\n     */\n    public void setPostalCode(String postalCode) {\n        this.postalCode = postalCode;\n    }\n    /**\n     *\n     * @return countryCode\n     */\n    @Column(name = \"COUNTRY_CODE\")\n    public String getCountryCode() {\n        return countryCode;\n    }\n    /**\n     *\n     * @param countryCode countryCode\n     */\n    public void setCountryCode(String countryCode) {\n        this.countryCode = countryCode;\n    }\n\n    /**\n     *\n     * @return telecomAddress\n     */\n    @Column(name = \"TELECOM_ADDRESS\")\n    public String getTelecomAddress() {\n        return telecomAddress;\n    }\n\n    /**\n     *\n     * @param telecomAddress telecomAddress\n     */\n    public void setTelecomAddress(String telecomAddress) {\n        this.telecomAddress = telecomAddress;\n    }\n    /**\n     *\n     * @return studyInvestigators\n     */\n    @OneToMany(mappedBy = \"investigator\")\n    public List<StudyInvestigator> getStudyInvestigators() {\n        return studyInvestigators;\n    }\n    /**\n     *\n     * @param studyInvestigators studyInvestigators\n     */\n    public void setStudyInvestigators(List<StudyInvestigator> studyInvestigators) {\n        this.studyInvestigators = studyInvestigators;\n    }\n\n}<｜fim▁end｜>",
    "response": "    private String streetAddress;\n    private String city;\n    private String stateCode;\n    private String postalCode;\n    private String countryCode;\n    private String telecomAddress;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.eclipse.gemini.blueprint.config.internal.util;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Set;\n\nimport org.eclipse.gemini.blueprint.config.internal.adapter.ToStringClassAdapter;\nimport org.springframework.beans.factory.config.TypedStringValue;\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\nimport org.springframework.beans.factory.support.ManagedSet;\nimport org.springframework.util.CollectionUtils;\nimport org.springframework.util.ObjectUtils;\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.Element;\nimport org.w3c.dom.NamedNodeMap;\n\npublic abstract class ParserUtils {\n\n    private static final AttributeCallback STANDARD_ATTRS_CALLBACK = new StandardAttributeCallback();\n    private static final AttributeCallback BLUEPRINT_ATTRS_CALLBACK = new BlueprintAttributeCallback();\n    private static final AttributeCallback PROPERTY_REF_ATTRS_CALLBACK = new PropertyRefAttributeCallback();\n    private static final AttributeCallback PROPERTY_CONV_ATTRS_CALLBACK = new ConventionsCallback();\n\n    public static final String REFERENCE_LISTENER_REF_ATTR =\n            \"org.eclipse.gemini.blueprint.config.internal.reference.listener.ref.attr\";\n\n    /**\n     * Generic attribute callback. Will parse the given callback array, w/o any standard callback.\n     * \n     * @param element XML element\n     * @param builder current bean definition builder\n     * @param callbacks array of callbacks (can be null/empty)\n     */\n    public static void parseAttributes(Element element, BeanDefinitionBuilder builder, AttributeCallback[] callbacks) {\n        NamedNodeMap attributes = element.getAttributes();\n\n        for (int x = 0; x < attributes.getLength(); x++) {\n            Attr attr = (Attr) attributes.item(x);\n\n            boolean shouldContinue = true;\n            if (!ObjectUtils.isEmpty(callbacks))\n                for (int i = 0; i < callbacks.length && shouldContinue; i++) {\n                    AttributeCallback callback = callbacks[i];\n                    shouldContinue = callback.process(element, attr, builder);\n                }\n        }\n    }\n\n    /**\n     * Dedicated parsing method that uses the following stack:\n     * \n     * <ol> <li>user given {@link AttributeCallback}s</li> <li>{@link StandardAttributeCallback}</li> <li>\n     * {@link PropertyRefAttributeCallback}</li> <li>{@link ConventionCallback}</li> </ol> </pre>\n     * \n     * @param element XML element\n     * @param builder current bean definition builder\n     * @param callbacks array of callbacks (can be null/empty)\n     */\n    public static void parseCustomAttributes(Element element, BeanDefinitionBuilder builder,\n            AttributeCallback[] callbacks) {\n        List list = new ArrayList(8);\n\n        if (!ObjectUtils.isEmpty(callbacks))\n            CollectionUtils.mergeArrayIntoCollection(callbacks, list);\n        // add standard callback\n        list.add(STANDARD_ATTRS_CALLBACK);\n        list.add(BLUEPRINT_ATTRS_CALLBACK);\n        list.add(PROPERTY_REF_ATTRS_CALLBACK);\n        list.add(PROPERTY_CONV_ATTRS_CALLBACK);\n\n        AttributeCallback[] cbacks = (AttributeCallback[]) list.toArray(new AttributeCallback[list.size()]);\n        parseAttributes(element, builder, cbacks);\n    }\n\n    /**\n     * Derivative for\n     * {@link #parseCustomAttributes(Element, BeanDefinitionBuilder, org.eclipse.gemini.blueprint.internal.config.ParserUtils.AttributeCallback[])}\n     * accepting only one {@link AttributeCallback}.\n     * \n     * @param element XML element\n     * @param builder current bean definition builder\n     * @param callback attribute callback, can be null\n     */\n    public static void parseCustomAttributes(Element element, BeanDefinitionBuilder builder, AttributeCallback callback) {\n        AttributeCallback[] callbacks =\n                (callback == null ? new AttributeCallback[0] : new AttributeCallback[] { callback });\n        parseCustomAttributes(element, builder, callbacks);\n    }\n\n    public static AttributeCallback[] mergeCallbacks(AttributeCallback[] callbacksA, AttributeCallback[] callbacksB) {\n        if (ObjectUtils.isEmpty(callbacksA))\n            if (ObjectUtils.isEmpty(callbacksB))\n                return new AttributeCallback[0];\n            else\n                return callbacksB;\n        if (ObjectUtils.isEmpty(callbacksB))\n            return callbacksA;\n\n        AttributeCallback[] newCallbacks = new AttributeCallback[callbacksA.length + callbacksB.length];\n        System.arraycopy(callbacksA, 0, newCallbacks, 0, callbacksA.length);\n        System.arraycopy(callbacksB, 0, newCallbacks, callbacksA.length, callbacksB.length);\n        return newCallbacks;\n    }\n\n    /**\n     * Utility method used for maintaining backwards compatibility by converting Class objects to String (using their\n     * class names). Used by importer and exporter parsing to set the 'interfaces' property.\n     * \n     * @param parsedClasses collection of parsed classes\n     * @return a collection of converted (if necessary) metadata\n     */\n    public static Set<?> convertClassesToStrings(Set<?> parsedClasses) {\n        Set<Object> interfaces = new ManagedSet<Object>(parsedClasses.size());\n\n        for (Object clazz : parsedClasses) {\n            if (clazz instanceof TypedStringValue || clazz instanceof String) {\n                interfaces.add(clazz);\n<｜fim▁hole｜>        }\n\n        return interfaces;\n    }\n}<｜fim▁end｜>",
    "response": "            } else {\n                // add adapter definition for bean references (which can be classes)\n                interfaces.add(BeanDefinitionBuilder.genericBeanDefinition(ToStringClassAdapter.class)\n                        .addConstructorArgValue(clazz).getBeanDefinition());\n            }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.dresdenocl.language.ocl;\n\npublic interface VariableDeclarationWithInitCS extends VariableDeclarationCS {\n    /**\n     * Returns the value of the '<em><b>Type Name</b></em>' containment reference.\n     * <!-- begin-user-doc -->\n     * <p>\n     * If the meaning of the '<em>Type Name</em>' reference isn't clear,\n     * there really should be more of a description here...\n     * </p>\n     * <!-- end-user-doc -->\n     * @return the value of the '<em>Type Name</em>' containment reference.\n     * @see #setTypeName(TypeCS)\n     * @see org.dresdenocl.language.ocl.OclPackage#getVariableDeclarationWithInitCS_TypeName()\n     * @model containment=\"true\"\n     * @generated\n     */\n    TypeCS getTypeName();\n\n    /**\n     * Sets the value of the '{@link org.dresdenocl.language.ocl.VariableDeclarationWithInitCS#getTypeName <em>Type Name</em>}' containment reference.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @param value the new value of the '<em>Type Name</em>' containment reference.\n     * @see #getTypeName()\n     * @generated\n     */\n    void setTypeName(TypeCS value);\n\n    /**\n     * Returns the value of the '<em><b>Initialization</b></em>' containment reference.\n     * <!-- begin-user-doc -->\n     * <p>\n     * If the meaning of the '<em>Initialization</em>' containment reference isn't clear,\n     * there really should be more of a description here...\n     * </p>\n     * <!-- end-user-doc -->\n     * @return the value of the '<em>Initialization</em>' containment reference.\n     * @see #setInitialization(OclExpressionCS)\n     * @see org.dresdenocl.language.ocl.OclPackage#getVariableDeclarationWithInitCS_Initialization()\n     * @model containment=\"true\" required=\"true\"\n     * @generated\n     */\n    OclExpressionCS getInitialization();\n\n    /**\n     * Sets the value of the '{@link org.dresdenocl.language.ocl.VariableDeclarationWithInitCS#getInitialization <em>Initialization</em>}' containment reference.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @param value the new value of the '<em>Initialization</em>' containment reference.\n     * @see #getInitialization()\n     * @generated\n     */\n    void setInitialization(OclExpressionCS value);\n\n    /**\n     * Returns the value of the '<em><b>Equal</b></em>' attribute.\n     * <!-- begin-user-doc -->\n     * <p>\n     * If the meaning of the '<em>Equal</em>' attribute isn't clear,\n     * there really should be more of a description here...\n     * </p>\n     * <!-- end-user-doc -->\n     * @return the value of the '<em>Equal</em>' attribute.\n     * @see #setEqual(String)\n     * @see org.dresdenocl.language.ocl.OclPackage#getVariableDeclarationWithInitCS_Equal()\n     * @model required=\"true\"\n     * @generated\n     */\n    String getEqual();\n<｜fim▁hole｜>     * @see #getEqual()\n     * @generated\n     */\n    void setEqual(String value);\n\n} // VariableDeclarationWithInitCS<｜fim▁end｜>",
    "response": "\n    /**\n     * Sets the value of the '{@link org.dresdenocl.language.ocl.VariableDeclarationWithInitCS#getEqual <em>Equal</em>}' attribute.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @param value the new value of the '<em>Equal</em>' attribute.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package textgen;\n\nimport java.util.Arrays;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.ListIterator;\nimport java.util.Random;\n\npublic class MarkovTextGeneratorLoL implements MarkovTextGenerator {\n\n    // The list of words with their next words\n    private List<ListNode> wordList; \n\n    // The starting \"word\"\n    private String starter;\n\n    // The random number generator\n    private Random rnGenerator;\n\n    public MarkovTextGeneratorLoL(Random generator)\n    {\n        wordList = new LinkedList<ListNode>();\n        starter = \"\";\n        rnGenerator = generator;\n    }\n\n    /** Train the generator by adding the sourceText */\n    @Override\n    public void train(String sourceText)\n    {\n        // TODO: Implement this method\n\n        String[] theWords = sourceText.split(\"[ ]+\");\n        this.starter = theWords[0];\n        String prevWord = this.starter;\n        int nodeIndex;\n        for (String nextWord : Arrays.copyOfRange(theWords, 1, theWords.length)) {\n            nodeIndex = findWordNode(prevWord);\n            if (nodeIndex < 0) {\n                ListNode newNode = new ListNode(prevWord);\n                newNode.addNextWord(nextWord);\n                wordList.add(newNode);\n            } else {\n                wordList.get(nodeIndex).addNextWord(nextWord);\n            }\n            prevWord = nextWord;\n        }\n\n        nodeIndex = findWordNode(prevWord);\n        if (nodeIndex < 0) {\n            ListNode newNode = new ListNode(prevWord);\n            newNode.addNextWord(this.starter);\n            wordList.add(newNode);\n        } else {\n            wordList.get(nodeIndex).addNextWord(this.starter);\n        }\n    }\n\n    /** \n     * Generate the number of words requested.\n     */\n    @Override\n    public String generateText(int numWords) {\n        // TODO: Implement this method\n        String returnText = \"\";\n        int nextNodeIndex;\n\n        String currentWord = starter;\n        for (int i = 0; i < numWords; i++) {\n            returnText += (currentWord + \" \");\n            nextNodeIndex = findWordNode(currentWord);\n            if (nextNodeIndex >=0) {\n                currentWord = wordList.get(nextNodeIndex).getRandomNextWord(this.rnGenerator);\n            } else {\n                currentWord = \"FAILURE!!!\";\n            }\n        }\n        return returnText;\n    }\n\n    // Can be helpful for debugging\n    @Override\n    public String toString()\n    {\n        String toReturn = \"\";\n        for (ListNode n : wordList)\n        {\n            toReturn += n.toString();\n        }\n        return toReturn;\n    }\n\n    /** Retrain the generator from scratch on the source text */\n    @Override\n    public void retrain(String sourceText)\n    {\n        // TODO: Implement this method.\n        wordList = new LinkedList<ListNode>();\n\n        String[] theWords = sourceText.split(\"[ ]+\");\n        this.starter = theWords[0];\n        String prevWord = this.starter;\n        int nodeIndex;\n\n        for (String nextWord : Arrays.copyOfRange(theWords, 1, theWords.length)) {\n            nodeIndex = findWordNode(prevWord);\n            if (nodeIndex < 0) {\n                ListNode newNode = new ListNode(prevWord);\n                newNode.addNextWord(nextWord);\n                wordList.add(newNode);\n            } else {\n                wordList.get(nodeIndex).addNextWord(nextWord);\n            }\n            prevWord = nextWord;\n\n        }\n\n        nodeIndex = findWordNode(prevWord);\n        if (nodeIndex < 0) {\n            ListNode newNode = new ListNode(prevWord);\n            newNode.addNextWord(starter);\n            wordList.add(newNode);\n        } else {\n            wordList.get(nodeIndex).addNextWord(this.starter);\n        }\n    }\n\n    // TODO: Add any private helper methods you need here.\n    private int findWordNode(String word) {\n        int wordIndex = -1;\n        int i = 0;\n        for (ListNode eachNode : wordList) {\n            if (eachNode.getWord().equals(word)) {\n                wordIndex = i;\n                break;\n            } else {\n                i++;\n            }\n        }\n        return wordIndex;\n    }\n\n    /**\n     * This is a minimal set of tests.  Note that it can be difficult\n     * to test methods/classes with randomized behavior.   \n     * @param args\n     */\n    public static void main(String[] args)\n    {\n        // feed the generator a fixed random value for repeatable behavior\n        MarkovTextGeneratorLoL gen = new MarkovTextGeneratorLoL(new Random(42));\n        String textString = \"Hello.  Hello there.  This is a test.  Hello there.  Hello Bob.  Test again.\";\n        System.out.println(textString);\n        gen.train(textString);\n        System.out.println(gen);\n        System.out.println(gen.generateText(20));\n        String textString2 = \"You say yes, I say no, \"+\n                \"You say stop, and I say go, go, go, \"+\n                \"Oh no. You say goodbye and I say hello, hello, hello, \"+\n                \"I don't know why you say goodbye, I say hello, hello, hello, \"+\n                \"I don't know why you say goodbye, I say hello. \"+\n                \"I say high, you say low, \"+\n                \"You say why, and I say I don't know. \"+\n                \"Oh no. \"+\n                \"You say goodbye and I say hello, hello, hello. \"+\n                \"I don't know why you say goodbye, I say hello, hello, hello, \"+\n                \"I don't know why you say goodbye, I say hello. \"+\n                \"Why, why, why, why, why, why, \"+\n                \"Do you say goodbye. \"+\n                \"Oh no. \"+\n                \"You say goodbye and I say hello, hello, hello. \"+\n                \"I don't know why you say goodbye, I say hello, hello, hello, \"+\n                \"I don't know why you say goodbye, I say hello. \"+\n                \"You say yes, I say no, \"+\n                \"You say stop and I say go, go, go. \"+\n                \"Oh, oh no. \"+\n                \"You say goodbye and I say hello, hello, hello. \"+\n                \"I don't know why you say goodbye, I say hello, hello, hello, \"+\n                \"I don't know why you say goodbye, I say hello, hello, hello, \"+\n                \"I don't know why you say goodbye, I say hello, hello, hello,\";\n        System.out.println(textString2);\n        gen.retrain(textString2);\n        System.out.println(gen);\n        System.out.println(gen.generateText(20));\n    }\n\n}\n\nclass ListNode\n{\n    // The word that is linking to the next words\n    private String word;\n\n    // The next words that could follow it\n    private List<String> nextWords;\n\n    ListNode(String word)\n    {\n        this.word = word;\n        nextWords = new LinkedList<String>();\n    }\n\n<｜fim▁hole｜>    }\n\n    public void addNextWord(String nextWord)\n    {\n        nextWords.add(nextWord);\n    }\n\n    public String getRandomNextWord(Random generator)\n    {\n        // TODO: Implement this method\n        // The random number generator should be passed from \n        // the MarkovTextGeneratorLoL class\n        int randomWord = generator.nextInt(nextWords.size());\n        return nextWords.get(randomWord);\n    }\n\n    public String toString()\n    {\n        String toReturn = word + \": \";\n        for (String s : nextWords) {\n            toReturn += s + \"->\";\n        }\n        toReturn += \"\\n\";\n        return toReturn;\n    }\n\n}<｜fim▁end｜>",
    "response": "    public String getWord()\n    {\n        return word;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package pitt.libhigh.utils;\n\nimport org.w3c.dom.Attr;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Element;\nimport org.xml.sax.SAXException;\nimport pitt.libhigh.bean.Group;\n\nimport javax.xml.XMLConstants;\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.ParserConfigurationException;\nimport javax.xml.transform.Source;\nimport javax.xml.transform.Transformer;\nimport javax.xml.transform.TransformerException;\nimport javax.xml.transform.TransformerFactory;\nimport javax.xml.transform.dom.DOMSource;\nimport javax.xml.transform.stream.StreamResult;\nimport javax.xml.transform.stream.StreamSource;\nimport javax.xml.validation.Schema;\nimport javax.xml.validation.SchemaFactory;\nimport javax.xml.validation.Validator;\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.UUID;\n\npublic class XmlUtils {\n\n<｜fim▁hole｜>        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\");\n        try {\n            DocumentBuilderFactory df = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = df.newDocumentBuilder();\n            Document doc = db.newDocument();\n            Element rootElement = doc.createElement(\"subscription\");\n            this.addAttribute(doc, rootElement, \"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n            if (userId != null) {\n                this.addAttribute(doc, rootElement, \"createdBy\", userId.toString());\n            }\n            doc.appendChild(rootElement);\n\n            subscription.forEach(group -> {\n                Element groupNode = doc.createElement(\"group\");\n                addChildElement(doc, groupNode, \"groupId\", group.getGroupId().toString());\n                addChildElement(doc, groupNode, \"createdBy\", group.getCreatedBy().toString());\n                addChildElement(doc, groupNode, \"groupName\", group.getGroupName());\n                if (!group.getLatestPost().equals(\"\")) {\n                    addChildElement(doc, groupNode, \"latestPost\", group.getLatestPost());\n                }\n                addChildElement(doc, groupNode, \"hasBgImg\", group.isHasBgImg() ? \"true\" : \"false\");\n                String time = sdf.format(group.getCreatedAt());\n                addChildElement(doc, groupNode, \"createdAtString\", time.substring(0,22)+\":\"+time.substring(22));\n                addChildElement(doc, groupNode, \"status\", String.valueOf(group.getStatus()));\n                addChildElement(doc, groupNode, \"memberCount\", String.valueOf(group.getMemberCount()));\n\n                rootElement.appendChild(groupNode);\n            });\n\n            try {\n                TransformerFactory tf = TransformerFactory.newInstance();\n                Transformer transformer = tf.newTransformer();\n                StringWriter writer = new StringWriter();\n                transformer.transform(new DOMSource(doc), new StreamResult(writer));\n                xmlDoc = writer.getBuffer().toString().replaceAll(\"\\n|\\r\", \"\");\n                xmlDoc = writer.getBuffer().toString();\n            } catch (TransformerException e) {\n                e.printStackTrace();\n            }\n        } catch (ParserConfigurationException pce) {\n            pce.printStackTrace();\n        }\n        try {\n            this.validate(xmlDoc, \"src/main/Java/pitt/libhigh/utils/subscription.xsd\");\n        } catch (SAXException e) {\n            e.printStackTrace();\n        }\n        return xmlDoc;\n    }\n\n    private void addAttribute(Document doc, Element targetElement, String attrName, String attrValue) {\n        Attr attr = doc.createAttribute(attrName);\n        attr.setValue(attrValue);\n        targetElement.setAttributeNode(attr);\n    }\n\n    private void addChildElement(Document doc, Element targetElement, String tagName, String tagValue) {\n        Element tag = doc.createElement(tagName);\n        tag.appendChild(doc.createTextNode(tagValue));\n        targetElement.appendChild(tag);\n    }\n\n    private boolean validate(String xmlDoc, String schemaPath) throws SAXException {\n\n        SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n        Source schemaFile = new StreamSource(new File(schemaPath));\n        Source xmlFile = new StreamSource(new StringReader(xmlDoc));\n        Schema schema = schemaFactory.newSchema(schemaFile);\n        Validator validator = schema.newValidator();\n\n        try {\n            validator.validate(xmlFile);\n            return true;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n\n    }\n\n}<｜fim▁end｜>",
    "response": "    public String buildGroupXML(UUID userId, ArrayList<Group> subscription) {\n        String xmlDoc = \"\";\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package generics; /* Added by Eclipse.py */\n\nclass Manipulator<T> {\n  private T obj;\n<｜fim▁hole｜>  // Error: cannot find symbol: method f():\n  //public void manipulate() { obj.f(); }\n}\n\npublic class Manipulation {\n  public static void main(String[] args) {\n    HasF hf = new HasF();\n    Manipulator<HasF> manipulator =\n      new Manipulator<HasF>(hf);\n    //manipulator.manipulate();\n  }\n} ///:~<｜fim▁end｜>",
    "response": "  public Manipulator(T x) { obj = x; }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package magic.yuyong.activity;\n\nimport magic.yuyong.R;\nimport magic.yuyong.adapter.ShowPicAdapter;\nimport magic.yuyong.adapter.ShowPicAdapter.ViewInfo;\nimport magic.yuyong.app.AppConstant;\nimport magic.yuyong.util.ICoDir;\nimport magic.yuyong.view.JazzyViewPager;\nimport magic.yuyong.view.JazzyViewPager.TransitionEffect;\nimport android.os.Bundle;\nimport android.os.Handler;\nimport android.os.Message;\nimport android.support.v4.view.ViewPager.OnPageChangeListener;\nimport android.text.TextUtils;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\npublic class ShowPics extends BaseActivity {\n\n    private JazzyViewPager mJazzy;\n\n    private TextView pageIndicator;\n\n    private ShowPicAdapter adapter;\n    private String[] pics;\n    private String url;\n\n    private Handler mHandler = new Handler() {\n\n        @Override\n        public void handleMessage(Message msg) {\n            switch (msg.what) {\n            case AppConstant.MSG_SAVE_PIC_SUCCEED:\n                String path = (String) msg.obj;\n                Toast.makeText(\n                        getApplicationContext(),\n                        getResources()\n                                .getString(R.string.text_pic_save_success)\n                                + \" : \" + path, Toast.LENGTH_SHORT).show();\n                break;\n\n            case AppConstant.MSG_SAVE_PIC_FAILD:\n                Toast.makeText(getApplicationContext(),\n                        R.string.text_pic_save_faild, Toast.LENGTH_SHORT)\n                        .show();\n                break;\n            }\n        }\n    };\n\n    /*\n     * (non-Javadoc)\n     * \n     * @see magic.yuyong.activity.BaseActivity#onCreate(android.os.Bundle)\n     */\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // TODO Auto-generated method stub\n        super.onCreate(savedInstanceState);\n\n        actionBar.setDisplayHomeAsUpEnabled(true);\n        actionBar.setDisplayShowCustomEnabled(true);\n        actionBar.setCustomView(R.layout.page_indicator);\n\n        pageIndicator = (TextView) actionBar.getCustomView().findViewById(R.id.page_indicator);\n\n        setContentView(R.layout.show_pics);\n        mJazzy = (JazzyViewPager) findViewById(R.id.jazzy_pager);\n        mJazzy.setTransitionEffect(TransitionEffect.Standard);\n        mJazzy.setOffscreenPageLimit(2);\n        adapter = new ShowPicAdapter();\n        adapter.setJazzy(mJazzy);\n\n        pics = getIntent().getStringArrayExtra(\"pics\");\n        url = getIntent().getStringExtra(\"url\");\n\n        for (int i = 0; i < pics.length; i++) {\n            pics[i] = url.substring(0, url.lastIndexOf(\"/\"))\n                    + pics[i].substring(pics[i].lastIndexOf(\"/\"));\n        }\n\n        adapter.setPics(pics);\n        mJazzy.setAdapter(adapter);\n        mJazzy.setPageMargin(30);\n\n        OnPageChangeListener listener = new OnPageChangeListener() {\n\n            @Override\n<｜fim▁hole｜>            }\n\n            @Override\n            public void onPageScrolled(int arg0, float arg1, int arg2) {\n\n            }\n\n            @Override\n            public void onPageScrollStateChanged(int arg0) {\n\n            }\n        };\n\n        mJazzy.setOnPageChangeListener(listener);\n        listener.onPageSelected(0);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        MenuInflater inflater = getMenuInflater();\n        inflater.inflate(R.menu.show_pic, menu);\n        return super.onCreateOptionsMenu(menu);\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n        case android.R.id.home:\n            finish();\n            break;\n        case R.id.save:\n            int currentIndex = mJazzy.getCurrentItem();\n            ViewInfo info = null;\n            for (int i = 0; i < mJazzy.getChildCount(); i++) {\n                View child = mJazzy.getChildAt(i);\n                ViewInfo temp = (ViewInfo) child.getTag();\n                if (temp.position == currentIndex) {\n                    info = temp;\n                }\n            }\n\n            if (!TextUtils.isEmpty(info.img_path)) {\n                final String path = info.img_path;\n                final String format = info.img_format;\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        saveToAlbum(path, format);\n                    }\n                }).start();\n            } else {\n                mHandler.sendEmptyMessage(AppConstant.MSG_SAVE_PIC_FAILD);\n            }\n            break;\n        }\n        return true;\n    }\n\n    private void saveToAlbum(String path, String format) {\n        String newPath = ICoDir.saveToAlbum(path, format, getApplicationContext());\n        mHandler.sendMessage(mHandler.obtainMessage(\n                AppConstant.MSG_SAVE_PIC_SUCCEED, newPath));\n    }\n\n}<｜fim▁end｜>",
    "response": "            public void onPageSelected(int pos) {\n                pageIndicator.setText((pos+1)+\"/\"+adapter.getCount());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.kencochrane.raven.event.interfaces;\n\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletRequest;\nimport java.util.*;\n\npublic class HttpInterface implements SentryInterface {\n    /**\n     * Name of the HTTP interface in Sentry.\n     */\n    public static final String HTTP_INTERFACE = \"sentry.interfaces.Http\";\n    private final String requestUrl;\n    private final String method;\n    private final Map<String, Collection<String>> parameters;\n    private final String queryString;\n    private final Map<String, String> cookies;\n    private final String remoteAddr;\n    private final String serverName;\n    private final int serverPort;\n    private final String localAddr;\n    private final String localName;\n    private final int localPort;\n    private final String protocol;\n    private final boolean secure;\n    private final boolean asyncStarted;\n    private final String authType;\n    private final String remoteUser;\n    private final Map<String, Collection<String>> headers;\n\n    /**\n     * Creates a an HTTP element for an {@link net.kencochrane.raven.event.Event}.\n     *\n     * @param request Captured HTTP request to send to Sentry.\n     */\n    public HttpInterface(HttpServletRequest request) {\n        this.requestUrl = request.getRequestURL().toString();\n        this.method = request.getMethod();\n        this.parameters = new HashMap<>();\n        for (Map.Entry<String, String[]> parameterMapEntry : request.getParameterMap().entrySet())\n            this.parameters.put(parameterMapEntry.getKey(), Arrays.asList(parameterMapEntry.getValue()));\n        this.queryString = request.getQueryString();\n        if (request.getCookies() != null) {\n            this.cookies = new HashMap<>();\n            for (Cookie cookie : request.getCookies())\n                this.cookies.put(cookie.getName(), cookie.getValue());\n        } else {\n            this.cookies = Collections.emptyMap();\n        }\n        this.remoteAddr = request.getRemoteAddr();\n        this.serverName = request.getServerName();\n        this.serverPort = request.getServerPort();\n<｜fim▁hole｜>        this.localPort = request.getLocalPort();\n        this.protocol = request.getProtocol();\n        this.secure = request.isSecure();\n        this.asyncStarted = request.isAsyncStarted();\n        this.authType = request.getAuthType();\n        this.remoteUser = request.getRemoteUser();\n        this.headers = new HashMap<>();\n        for (String headerName : Collections.list(request.getHeaderNames()))\n            this.headers.put(headerName, Collections.list(request.getHeaders(headerName)));\n    }\n\n    @Override\n    public String getInterfaceName() {\n        return HTTP_INTERFACE;\n    }\n\n    public String getRequestUrl() {\n        return requestUrl;\n    }\n\n    public String getMethod() {\n        return method;\n    }\n\n    public Map<String, Collection<String>> getParameters() {\n        return Collections.unmodifiableMap(parameters);\n    }\n\n    public String getQueryString() {\n        return queryString;\n    }\n\n    public Map<String, String> getCookies() {\n        return cookies;\n    }\n\n    public String getRemoteAddr() {\n        return remoteAddr;\n    }\n\n    public String getServerName() {\n        return serverName;\n    }\n\n    public int getServerPort() {\n        return serverPort;\n    }\n\n    public String getLocalAddr() {\n        return localAddr;\n    }\n\n    public String getLocalName() {\n        return localName;\n    }\n\n    public int getLocalPort() {\n        return localPort;\n    }\n\n    public String getProtocol() {\n        return protocol;\n    }\n\n    public boolean isSecure() {\n        return secure;\n    }\n\n    public boolean isAsyncStarted() {\n        return asyncStarted;\n    }\n\n    public String getAuthType() {\n        return authType;\n    }\n\n    public String getRemoteUser() {\n        return remoteUser;\n    }\n\n    public Map<String, Collection<String>> getHeaders() {\n        return Collections.unmodifiableMap(headers);\n    }\n\n    @Override\n    public String toString() {\n        return \"HttpInterface{\"\n                + \"requestUrl='\" + requestUrl + '\\''\n                + \", method='\" + method + '\\''\n                + \", queryString='\" + queryString + '\\''\n                + \", parameters=\" + parameters\n                + '}';\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        HttpInterface that = (HttpInterface) o;\n\n        if (asyncStarted != that.asyncStarted) return false;\n        if (localPort != that.localPort) return false;\n        if (secure != that.secure) return false;\n        if (serverPort != that.serverPort) return false;\n        if (authType != null ? !authType.equals(that.authType) : that.authType != null) return false;\n        if (!cookies.equals(that.cookies)) return false;\n        if (!headers.equals(that.headers)) return false;\n        if (localAddr != null ? !localAddr.equals(that.localAddr) : that.localAddr != null) return false;\n        if (localName != null ? !localName.equals(that.localName) : that.localName != null) return false;\n        if (method != null ? !method.equals(that.method) : that.method != null) return false;\n        if (!parameters.equals(that.parameters)) return false;\n        if (protocol != null ? !protocol.equals(that.protocol) : that.protocol != null) return false;\n        if (queryString != null ? !queryString.equals(that.queryString) : that.queryString != null) return false;\n        if (remoteAddr != null ? !remoteAddr.equals(that.remoteAddr) : that.remoteAddr != null) return false;\n        if (remoteUser != null ? !remoteUser.equals(that.remoteUser) : that.remoteUser != null) return false;\n        if (!requestUrl.equals(that.requestUrl)) return false;\n        if (serverName != null ? !serverName.equals(that.serverName) : that.serverName != null) return false;\n\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = requestUrl.hashCode();\n        result = 31 * result + (method != null ? method.hashCode() : 0);\n        result = 31 * result + parameters.hashCode();\n        return result;\n    }\n}<｜fim▁end｜>",
    "response": "        this.localAddr = request.getLocalAddr();\n        this.localName = request.getLocalName();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>class Diamond{\n<｜fim▁hole｜>          for(i=0;i<size;i++){\n                for(j=0;j<size-i;j++){\n                  System.out.print(\" \");\n                }\n                System.out.print(\"*\");\n                for(k=0;k<2*i-1;k++)System.out.print(\" \");\n                if(i!=0)System.out.print(\"*\");\n                System.out.println(\"\");\n          }\n          for(i=0;i<size-1;i++){\n                System.out.print(\" \");\n                for(j=0;j<=i;j++){\n                    System.out.print(\" \");\n                  }\n                System.out.print(\"*\");\n                for(k=0;k<2*size-5-2*i;k++)System.out.print(\" \");\n                if(i!=size-2)System.out.print(\"*\");\n                System.out.println();\n          }\n    }\n}<｜fim▁end｜>",
    "response": "          public static void main(String[] args){\n          int size= 9;\n          int i,j,k;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.servinglynk.hmis.warehouse.domain;\n\nimport org.apache.commons.lang.builder.EqualsBuilder;\nimport org.apache.commons.lang.builder.HashCodeBuilder;\nimport org.apache.commons.lang.builder.ToStringBuilder;\n\npublic class ExtendedCriterion extends Criterion\n{\n    private static final long serialVersionUID = 7608441012044500866L;\n\n    private String alias;\n    private String associationPath;\n\n    public String getAlias() {\n        return alias;\n    }\n\n    public void setAlias(String alias) {\n        this.alias = alias;\n    }\n\n    public String getAssociationPath() {\n        return associationPath;\n    }\n<｜fim▁hole｜>\n    @Override\n    public boolean equals(final Object other) {\n        if (!(other instanceof ExtendedCriterion))\n            return false;\n        ExtendedCriterion castOther = (ExtendedCriterion) other;\n        return new EqualsBuilder()\n            .append(getName(), castOther.getName())\n            .append(getOperation(), castOther.getOperation())\n            .append(getValue(), castOther.getValue())\n            .append(getAlias(), castOther.getAlias())\n            .append(getAssociationPath(), castOther.getAssociationPath())\n            .isEquals();\n    }\n\n    @Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(getName())\n            .append(getOperation())\n            .append(getValue())\n            .append(getAlias())\n            .append(getAssociationPath())\n            .toHashCode();\n    }\n\n    @Override\n    public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"name\", getName())\n            .append(\"operation\", getOperation())\n            .append(\"value\", getValue())\n            .append(\"alias\", getAlias())\n            .append(\"associationPath\", getAssociationPath())\n                .toString();\n    }   \n}<｜fim▁end｜>",
    "response": "\n    public void setAssociationPath(String associationPath) {\n        this.associationPath = associationPath;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package chemlab.core.controls.experiment;\n\nimport chemlab.core.chemical.ChemConsts;\nimport java.io.Serializable;\n\npublic abstract class Environment implements Serializable\n{\n    protected final ExperimentParams fParams;\n    protected double fPressure;\n    protected double fTemperature;\n\n    public Environment()\n    {\n        this.fParams = new ExperimentParams();\n        this.fPressure = ChemConsts.STD_ATMOSPHERIC_PRESSURE;\n        this.fTemperature = ChemConsts.ROOM_TEMP;\n    }\n\n    public Environment(double pressure, double temperature)\n    {\n        this.fParams = new ExperimentParams();\n        this.fPressure = pressure;\n        this.fTemperature = temperature;\n    }\n\n    /**\n     * @return the pressure\n<｜fim▁hole｜>\n    /**\n     * @param pressure the pressure to set\n     */\n    public void setPressure(double pressure)\n    {\n        this.fPressure = pressure;\n    }\n\n    /**\n     * @return the temperature\n     */\n    public double getTemperature()\n    {\n        return fTemperature;\n    }\n\n    /**\n     * @param temperature the temperature to set\n     */\n    public void setTemperature(double temperature)\n    {\n        this.fTemperature = temperature;\n    }\n}<｜fim▁end｜>",
    "response": "     */\n    public double getPressure()\n    {\n        return fPressure;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.kie.workbench.common.dmn.client.widgets.layer;\n\nimport com.ait.lienzo.client.core.Context2D;\nimport com.ait.lienzo.client.core.types.Point2D;\nimport com.ait.lienzo.test.LienzoMockitoTestRunner;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.kie.workbench.common.dmn.client.widgets.grid.BaseExpressionGridTheme;\nimport org.mockito.Mock;\nimport org.uberfire.ext.wires.core.grids.client.widget.grid.GridWidget;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n<｜fim▁hole｜>\n    private static final double OUTER_ABSOLUTE_X = 0.0;\n\n    private static final double OUTER_ABSOLUTE_Y = 0.0;\n\n    private static final double INNER_WIDTH = 200.0;\n\n    private static final double INNER_HEIGHT = 50.0;\n\n    private static final double INNER_ABSOLUTE_X = 100.0;\n\n    private static final double INNER_ABSOLUTE_Y = 75.0;\n\n    @Mock\n    private Context2D context2D;\n\n    @Mock\n    private GridWidget outer;\n\n    @Mock\n    private GridWidget inner;\n\n    private InverseGridWidgetClipper clipper;\n\n    @Before\n    public void setUp() throws Exception {\n        setupClipper(OUTER_WIDTH, OUTER_HEIGHT, OUTER_ABSOLUTE_X, OUTER_ABSOLUTE_Y,\n                     INNER_WIDTH, INNER_HEIGHT, INNER_ABSOLUTE_X, INNER_ABSOLUTE_Y);\n    }\n\n    @Test\n    public void testIsActive() {\n        clipper.setActive(true);\n\n        assertThat(clipper.isActive()).isTrue();\n\n        clipper.setActive(false);\n\n        assertThat(clipper.isActive()).isFalse();\n    }\n\n    @Test\n    public void testClip() {\n        clipper.clip(context2D);\n\n        verify(context2D).beginPath();\n\n        //Left edge\n        verify(context2D).rect(eq(OUTER_ABSOLUTE_X),\n                               eq(OUTER_ABSOLUTE_Y),\n                               eq(INNER_ABSOLUTE_X),\n                               eq(OUTER_HEIGHT + BaseExpressionGridTheme.STROKE_WIDTH));\n\n        //Top edge\n        verify(context2D).rect(eq(INNER_ABSOLUTE_X),\n                               eq(OUTER_ABSOLUTE_Y),\n                               eq(INNER_WIDTH + BaseExpressionGridTheme.STROKE_WIDTH),\n                               eq(INNER_ABSOLUTE_Y));\n\n        //Bottom edge\n        verify(context2D).rect(eq(INNER_ABSOLUTE_X),\n                               eq(INNER_ABSOLUTE_Y + INNER_HEIGHT + BaseExpressionGridTheme.STROKE_WIDTH),\n                               eq(INNER_WIDTH + BaseExpressionGridTheme.STROKE_WIDTH),\n                               eq(OUTER_ABSOLUTE_Y + OUTER_HEIGHT - (INNER_ABSOLUTE_Y + INNER_HEIGHT)));\n\n        //Right edge\n        verify(context2D).rect(eq(INNER_ABSOLUTE_X + INNER_WIDTH + BaseExpressionGridTheme.STROKE_WIDTH),\n                               eq(OUTER_ABSOLUTE_Y),\n                               eq(OUTER_ABSOLUTE_X + OUTER_WIDTH - (INNER_ABSOLUTE_X + INNER_WIDTH)),\n                               eq(OUTER_HEIGHT + BaseExpressionGridTheme.STROKE_WIDTH));\n\n        verify(context2D).clip();\n    }\n\n    private void setupClipper(final double outerWidth,\n                              final double outerHeight,\n                              final double outerAbsoluteX,\n                              final double outerAbsoluteY,\n                              final double innerWidth,\n                              final double innerHeight,\n                              final double innerAbsoluteX,\n                              final double innerAbsoluteY) {\n        when(outer.getWidth()).thenReturn(outerWidth);\n        when(outer.getHeight()).thenReturn(outerHeight);\n        final Point2D outerComputedLocation = new Point2D(outerAbsoluteX, outerAbsoluteY);\n        when(outer.getComputedLocation()).thenReturn(outerComputedLocation);\n\n        when(inner.getWidth()).thenReturn(innerWidth);\n        when(inner.getHeight()).thenReturn(innerHeight);\n        final Point2D innerComputedLocation = new Point2D(innerAbsoluteX, innerAbsoluteY);\n        when(inner.getComputedLocation()).thenReturn(innerComputedLocation);\n\n        clipper = new InverseGridWidgetClipper(outer, inner);\n    }\n}<｜fim▁end｜>",
    "response": "@RunWith(LienzoMockitoTestRunner.class)\npublic class InverseGridWidgetClipperTest {\n\n    private static final double OUTER_WIDTH = 1000.0;\n\n    private static final double OUTER_HEIGHT = 500.0;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package de.marcermarc.backup.controller;\n\npublic class ConfigController {\n\n    private PluginController controller;\n\n    private String startMessage, endMessage;\n    private int intervalInMin;\n\n    public ConfigController(PluginController controller) {\n        this.controller = controller;\n\n        setDefaultConfig();\n\n        load();\n<｜fim▁hole｜>        controller.getMain().getConfig().addDefault(\"startMessage\", \"Backup startet\");\n        controller.getMain().getConfig().addDefault(\"endMessage\", \"Backup finished\");\n\n        controller.getMain().getConfig().options().copyDefaults(true);\n        controller.getMain().saveDefaultConfig();\n\n    }\n\n    private void load() {\n        startMessage = controller.getMain().getConfig().getString(\"startMessage\");\n        endMessage = controller.getMain().getConfig().getString(\"endMessage\");\n        intervalInMin = controller.getMain().getConfig().getInt(\"intervalInMin\");\n\n    }\n\n    //region getters and setters\n\n    public String getStartMessage() {\n        return startMessage;\n    }\n\n    public void setStartMessage(String startMessage) {\n        this.startMessage = startMessage;\n    }\n\n    public String getEndMessage() {\n        return endMessage;\n    }\n\n    public void setEndMessage(String endMessage) {\n        this.endMessage = endMessage;\n    }\n\n    public int getIntervalInMin() {\n        return intervalInMin;\n    }\n\n    public void setIntervalInMi(int intervalInMin) {\n        this.intervalInMin = intervalInMin;\n    }\n\n    //endregion\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    private void setDefaultConfig() {\n\n        controller.getMain().getConfig().addDefault(\"intervalInMin\", 60);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.myunihome.myxapp.paas.util;\n\npublic abstract class Assert\n{\n  public static void notNull(Object obj, String message)\n  {\n<｜fim▁hole｜>      throw new IllegalArgumentException(message);\n    if (((obj instanceof String)) && (StringUtil.isBlank(obj.toString())))\n      throw new IllegalArgumentException(message);\n  }\n}<｜fim▁end｜>",
    "response": "    if (obj == null)\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.commonsware.cwac.mediarouter.media;\n\nimport android.os.Bundle;\n\npublic final class MediaRouteDiscoveryRequest {\n    private static final String KEY_SELECTOR = \"selector\";\n    private static final String KEY_ACTIVE_SCAN = \"activeScan\";\n\n    private final Bundle mBundle;\n    private MediaRouteSelector mSelector;\n\n    /**\n     * Creates a media route discovery request.\n     *\n     * @param selector The route selector that specifies the kinds of routes to discover.\n     * @param activeScan True if active scanning should be performed.\n     */\n    public MediaRouteDiscoveryRequest(MediaRouteSelector selector, boolean activeScan) {\n        if (selector == null) {\n            throw new IllegalArgumentException(\"selector must not be null\");\n        }\n\n        mBundle = new Bundle();\n        mSelector = selector;\n        mBundle.putBundle(KEY_SELECTOR, selector.asBundle());\n        mBundle.putBoolean(KEY_ACTIVE_SCAN, activeScan);\n    }\n\n    private MediaRouteDiscoveryRequest(Bundle bundle) {\n        mBundle = bundle;\n    }\n\n    /**\n     * Gets the route selector that specifies the kinds of routes to discover.\n     */\n<｜fim▁hole｜>        if (mSelector == null) {\n            mSelector = MediaRouteSelector.fromBundle(mBundle.getBundle(KEY_SELECTOR));\n            if (mSelector == null) {\n                mSelector = MediaRouteSelector.EMPTY;\n            }\n        }\n    }\n\n    /**\n     * Returns true if active scanning should be performed.\n     *\n     * @see MediaRouter#CALLBACK_FLAG_PERFORM_ACTIVE_SCAN\n     */\n    public boolean isActiveScan() {\n        return mBundle.getBoolean(KEY_ACTIVE_SCAN);\n    }\n\n    /**\n     * Returns true if the discovery request has all of the required fields.\n     */\n    public boolean isValid() {\n        ensureSelector();\n        return mSelector.isValid();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (o instanceof MediaRouteDiscoveryRequest) {\n            MediaRouteDiscoveryRequest other = (MediaRouteDiscoveryRequest)o;\n            return getSelector().equals(other.getSelector())\n                    && isActiveScan() == other.isActiveScan();\n        }\n        return false;\n    }\n\n    @Override\n    public int hashCode() {\n        return getSelector().hashCode() ^ (isActiveScan() ? 1 : 0);\n    }\n\n    @Override\n    public String toString() {\n        StringBuilder result = new StringBuilder();\n        result.append(\"DiscoveryRequest{ selector=\").append(getSelector());\n        result.append(\", activeScan=\").append(isActiveScan());\n        result.append(\", isValid=\").append(isValid());\n        result.append(\" }\");\n        return result.toString();\n    }\n\n    /**\n     * Converts this object to a bundle for serialization.\n     *\n     * @return The contents of the object represented as a bundle.\n     */\n    public Bundle asBundle() {\n        return mBundle;\n    }\n\n    /**\n     * Creates an instance from a bundle.\n     *\n     * @param bundle The bundle, or null if none.\n     * @return The new instance, or null if the bundle was null.\n     */\n    public static MediaRouteDiscoveryRequest fromBundle(Bundle bundle) {\n        return bundle != null ? new MediaRouteDiscoveryRequest(bundle) : null;\n    }\n}<｜fim▁end｜>",
    "response": "    public MediaRouteSelector getSelector() {\n        ensureSelector();\n        return mSelector;\n    }\n\n    private void ensureSelector() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amazonaws.services.amplify.model.transform;\n\nimport java.math.*;\n\nimport javax.annotation.Generated;\n\nimport com.amazonaws.services.amplify.model.*;\nimport com.amazonaws.transform.SimpleTypeJsonUnmarshallers.*;\nimport com.amazonaws.transform.*;\n\nimport com.fasterxml.jackson.core.JsonToken;\nimport static com.fasterxml.jackson.core.JsonToken.*;\n\n@Generated(\"com.amazonaws:aws-java-sdk-code-generator\")\npublic class AppJsonUnmarshaller implements Unmarshaller<App, JsonUnmarshallerContext> {\n\n    public App unmarshall(JsonUnmarshallerContext context) throws Exception {\n        App app = new App();\n\n<｜fim▁hole｜>        JsonToken token = context.getCurrentToken();\n        if (token == null)\n            token = context.nextToken();\n        if (token == VALUE_NULL) {\n            return null;\n        }\n\n        while (true) {\n            if (token == null)\n                break;\n\n            if (token == FIELD_NAME || token == START_OBJECT) {\n                if (context.testExpression(\"appId\", targetDepth)) {\n                    context.nextToken();\n                    app.setAppId(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n                if (context.testExpression(\"appArn\", targetDepth)) {\n                    context.nextToken();\n                    app.setAppArn(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n                if (context.testExpression(\"name\", targetDepth)) {\n                    context.nextToken();\n                    app.setName(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n                if (context.testExpression(\"tags\", targetDepth)) {\n                    context.nextToken();\n                    app.setTags(new MapUnmarshaller<String, String>(context.getUnmarshaller(String.class), context.getUnmarshaller(String.class))\n                            .unmarshall(context));\n                }\n                if (context.testExpression(\"description\", targetDepth)) {\n                    context.nextToken();\n                    app.setDescription(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n                if (context.testExpression(\"repository\", targetDepth)) {\n                    context.nextToken();\n                    app.setRepository(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n                if (context.testExpression(\"platform\", targetDepth)) {\n                    context.nextToken();\n                    app.setPlatform(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n                if (context.testExpression(\"createTime\", targetDepth)) {\n                    context.nextToken();\n                    app.setCreateTime(DateJsonUnmarshallerFactory.getInstance(\"unixTimestamp\").unmarshall(context));\n                }\n                if (context.testExpression(\"updateTime\", targetDepth)) {\n                    context.nextToken();\n                    app.setUpdateTime(DateJsonUnmarshallerFactory.getInstance(\"unixTimestamp\").unmarshall(context));\n                }\n                if (context.testExpression(\"iamServiceRoleArn\", targetDepth)) {\n                    context.nextToken();\n                    app.setIamServiceRoleArn(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n                if (context.testExpression(\"environmentVariables\", targetDepth)) {\n                    context.nextToken();\n                    app.setEnvironmentVariables(new MapUnmarshaller<String, String>(context.getUnmarshaller(String.class), context\n                            .getUnmarshaller(String.class)).unmarshall(context));\n                }\n                if (context.testExpression(\"defaultDomain\", targetDepth)) {\n                    context.nextToken();\n                    app.setDefaultDomain(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n                if (context.testExpression(\"enableBranchAutoBuild\", targetDepth)) {\n                    context.nextToken();\n                    app.setEnableBranchAutoBuild(context.getUnmarshaller(Boolean.class).unmarshall(context));\n                }\n                if (context.testExpression(\"enableBranchAutoDeletion\", targetDepth)) {\n                    context.nextToken();\n                    app.setEnableBranchAutoDeletion(context.getUnmarshaller(Boolean.class).unmarshall(context));\n                }\n                if (context.testExpression(\"enableBasicAuth\", targetDepth)) {\n                    context.nextToken();\n                    app.setEnableBasicAuth(context.getUnmarshaller(Boolean.class).unmarshall(context));\n                }\n                if (context.testExpression(\"basicAuthCredentials\", targetDepth)) {\n                    context.nextToken();\n                    app.setBasicAuthCredentials(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n                if (context.testExpression(\"customRules\", targetDepth)) {\n                    context.nextToken();\n                    app.setCustomRules(new ListUnmarshaller<CustomRule>(CustomRuleJsonUnmarshaller.getInstance())\n\n                    .unmarshall(context));\n                }\n                if (context.testExpression(\"productionBranch\", targetDepth)) {\n                    context.nextToken();\n                    app.setProductionBranch(ProductionBranchJsonUnmarshaller.getInstance().unmarshall(context));\n                }\n                if (context.testExpression(\"buildSpec\", targetDepth)) {\n                    context.nextToken();\n                    app.setBuildSpec(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n                if (context.testExpression(\"customHeaders\", targetDepth)) {\n                    context.nextToken();\n                    app.setCustomHeaders(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n                if (context.testExpression(\"enableAutoBranchCreation\", targetDepth)) {\n                    context.nextToken();\n                    app.setEnableAutoBranchCreation(context.getUnmarshaller(Boolean.class).unmarshall(context));\n                }\n                if (context.testExpression(\"autoBranchCreationPatterns\", targetDepth)) {\n                    context.nextToken();\n                    app.setAutoBranchCreationPatterns(new ListUnmarshaller<String>(context.getUnmarshaller(String.class))\n\n                    .unmarshall(context));\n                }\n                if (context.testExpression(\"autoBranchCreationConfig\", targetDepth)) {\n                    context.nextToken();\n                    app.setAutoBranchCreationConfig(AutoBranchCreationConfigJsonUnmarshaller.getInstance().unmarshall(context));\n                }\n                if (context.testExpression(\"repositoryCloneMethod\", targetDepth)) {\n                    context.nextToken();\n                    app.setRepositoryCloneMethod(context.getUnmarshaller(String.class).unmarshall(context));\n                }\n            } else if (token == END_ARRAY || token == END_OBJECT) {\n                if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {\n                    if (context.getCurrentDepth() <= originalDepth)\n                        break;\n                }\n            }\n            token = context.nextToken();\n        }\n\n        return app;\n    }\n\n    private static AppJsonUnmarshaller instance;\n\n    public static AppJsonUnmarshaller getInstance() {\n        if (instance == null)\n            instance = new AppJsonUnmarshaller();\n        return instance;\n    }\n}<｜fim▁end｜>",
    "response": "        int originalDepth = context.getCurrentDepth();\n        String currentParentElement = context.getCurrentParentElement();\n        int targetDepth = originalDepth + 1;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package xeed.xposed.cbppmod;\n\nimport java.util.ArrayList;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nimport com.android.vending.billing.IInAppBillingService;\n\nimport android.app.Activity;\nimport android.app.PendingIntent;\nimport android.content.ComponentName;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.ServiceConnection;\nimport android.os.Bundle;\nimport android.os.IBinder;\nimport android.os.RemoteException;\nimport android.widget.Toast;\n\npublic final class InAppMgmt implements ServiceConnection\n{\n    static final String ITEM_EXCHAIN = \"extraLenChains\";\n\n    private IInAppBillingService mService;\n\n    @Override\n    public final void onServiceDisconnected(final ComponentName cn)\n    {\n        mService = null;\n    }\n\n    @Override\n    public final void onServiceConnected(final ComponentName cn, final IBinder b)\n    {\n        mService = IInAppBillingService.Stub.asInterface(b);\n    }\n\n    public final void bindService(final Context c)\n    {\n        final Intent it = new Intent(\"com.android.vending.billing.InAppBillingService.BIND\");\n        it.setPackage(\"com.android.vending\");\n        c.bindService(it, this, Context.BIND_AUTO_CREATE);\n    }\n\n    public final void unbindService(final Context c)\n    {\n        c.unbindService(this);\n<｜fim▁hole｜>        try\n        {\n            final Bundle res = mService.getPurchases(3, \"xeed.xposed.cbppmod\", \"inapp\", null);\n            final int resp = res.getInt(\"RESPONSE_CODE\");\n            if (resp == 0)\n            {\n                final ArrayList<String> items = res.getStringArrayList(\"INAPP_PURCHASE_ITEM_LIST\");\n                if (items.contains(item)) return 1;\n            }\n            return 0;\n        }\n        catch (final RemoteException ex)\n        {\n            return -1;\n        }\n    }\n\n    public final int buyItem(final Activity a, final String item)\n    {\n        try\n        {\n            final Bundle res = mService.getBuyIntent(3, \"xeed.xposed.cbppmod\", item, \"inapp\", \"ilikepotatoes\");\n            final int resp = res.getInt(\"RESPONSE_CODE\");\n            if (resp == 0)\n            {\n                final PendingIntent pendingIntent = res.getParcelable(\"BUY_INTENT\");\n                a.startIntentSenderForResult(pendingIntent.getIntentSender(), PBMain.REQ_INAPP, new Intent(), 0, 0, 0);\n            }\n            return 0;\n        }\n        catch (final Exception ex)\n        {\n            return -1;\n        }\n    }\n\n    public final String buyResult(final Context c, final int resultCode, final Intent data)\n    {\n        final String purchaseData = data.getStringExtra(\"INAPP_PURCHASE_DATA\");\n        if (resultCode == Activity.RESULT_OK && data.getIntExtra(\"RESPONSE_CODE\", 0) == 0)\n        {\n            try\n            {\n                final JSONObject jo = new JSONObject(purchaseData);\n                return jo.getString(\"productId\");\n            }\n            catch (final JSONException ex)\n            {\n                Toast.makeText(c, ex.getLocalizedMessage(), Toast.LENGTH_LONG).show();\n                ex.printStackTrace();\n            }\n        }\n        // TODO: Messages...\n        else Toast.makeText(c, \"FAIL\", Toast.LENGTH_LONG).show();\n        return null;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    public final int getItemState(final String item)\n    {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.mijiaokj.sys.service;\n\nimport java.util.List;\n\nimport com.mijiaokj.sys.common.util.Result;\nimport com.mijiaokj.sys.domain.SysRole;\n\npublic interface SysRoleService {\n\n    /**\n     * 通过用户主键查询用户的所属角色\n     * @param userId\n<｜fim▁hole｜>    public Result<List<SysRole>> getRoleByUserId(Long userId);\n\n    /**\n     * 查询所有有效的定义角色\n     * @return\n     */\n    public Result<List<SysRole>> getAllRole();\n\n    /**\n     * 创建角色\n     * @param sysRole\n     * @return\n     */\n    public Result<Long> createRole(SysRole sysRole);\n\n    /**\n     * 修改角色\n     * @param sysRole\n     * @return\n     */\n    public Result<Integer> updateRole(SysRole sysRole);\n\n    /**\n     * 删除角色\n     * @param id\n     * @return\n     */\n    public Result<Integer> deleteRole(Long id);\n\n    /**\n     * 通过主键查询\n     * @param id\n     * @return\n     */\n    public Result<SysRole> findSysRoleById(Long id);\n}<｜fim▁end｜>",
    "response": "     * @return\n     */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.slack.api.methods.response.conversations;\n<｜fim▁hole｜>import com.slack.api.model.ResponseMetadata;\nimport lombok.Data;\n\n@Data\npublic class ConversationsMarkResponse implements SlackApiResponse {\n\n    private boolean ok;\n    private String warning;\n    private String error;\n    private String needed;\n    private String provided;\n    private ResponseMetadata responseMetadata;\n}<｜fim▁end｜>",
    "response": "\nimport com.slack.api.methods.SlackApiResponse;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.camel.tracing.decorators;\n\nimport org.apache.camel.Exchange;\n\npublic class NatsSpanDecorator extends AbstractMessagingSpanDecorator {\n\n<｜fim▁hole｜>    @Override\n    public String getComponent() {\n        return \"nats\";\n    }\n\n    @Override\n    public String getComponentClassName() {\n        return \"org.apache.camel.component.nats.NatsComponent\";\n    }\n\n    @Override\n    protected String getMessageId(Exchange exchange) {\n        return exchange.getIn().getHeader(NATS_SID, String.class);\n    }\n\n}<｜fim▁end｜>",
    "response": "    public static final String NATS_SID = \"CamelNatsSID\";\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.gradle.internal.component.external.model;\n\nimport org.gradle.api.artifacts.ArtifactIdentifier;\nimport org.gradle.api.artifacts.component.ComponentIdentifier;\nimport org.gradle.api.artifacts.component.ModuleComponentIdentifier;\nimport org.gradle.api.internal.artifacts.DefaultArtifactIdentifier;\nimport org.gradle.api.internal.tasks.TaskDependencyInternal;\nimport org.gradle.api.tasks.TaskDependency;\nimport org.gradle.internal.component.model.ComponentArtifactMetadata;\nimport org.gradle.internal.component.model.IvyArtifactName;\n\nimport javax.annotation.Nullable;\nimport java.util.Optional;\n\npublic class DefaultModuleComponentArtifactMetadata implements ModuleComponentArtifactMetadata {\n    private final DefaultModuleComponentArtifactIdentifier id;\n    private final ComponentArtifactMetadata alternativeArtifact;\n\n    public DefaultModuleComponentArtifactMetadata(ModuleComponentIdentifier componentIdentifier, IvyArtifactName artifact) {\n        this(componentIdentifier, artifact, null);\n    }\n\n    public DefaultModuleComponentArtifactMetadata(ModuleComponentIdentifier componentIdentifier, IvyArtifactName artifact, @Nullable ComponentArtifactMetadata alternativeArtifact) {\n<｜fim▁hole｜>        this(moduleComponentArtifactIdentifier, null);\n    }\n\n    public DefaultModuleComponentArtifactMetadata(ModuleComponentArtifactIdentifier moduleComponentArtifactIdentifier, @Nullable ComponentArtifactMetadata alternativeArtifact) {\n        this.id = (DefaultModuleComponentArtifactIdentifier) moduleComponentArtifactIdentifier;\n        this.alternativeArtifact = alternativeArtifact;\n    }\n\n    @Override\n    public String toString() {\n        return id.toString();\n    }\n\n    @Override\n    public ModuleComponentArtifactIdentifier getId() {\n        return id;\n    }\n\n    @Override\n    public ComponentIdentifier getComponentId() {\n        return id.getComponentIdentifier();\n    }\n\n    @Override\n    public ArtifactIdentifier toArtifactIdentifier() {\n        return new DefaultArtifactIdentifier(id);\n    }\n\n    @Override\n    public IvyArtifactName getName() {\n        return id.getName();\n    }\n\n    @Override\n    public TaskDependency getBuildDependencies() {\n        return TaskDependencyInternal.EMPTY;\n    }\n\n    @Override\n    public Optional<ComponentArtifactMetadata> getAlternativeArtifact() {\n        return Optional.ofNullable(alternativeArtifact);\n    }\n}<｜fim▁end｜>",
    "response": "        this(new DefaultModuleComponentArtifactIdentifier(componentIdentifier, artifact), alternativeArtifact);\n    }\n\n    public DefaultModuleComponentArtifactMetadata(ModuleComponentArtifactIdentifier moduleComponentArtifactIdentifier) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package javax.accessibility;\n\nimport java.util.*;\nimport java.awt.*;\nimport javax.swing.text.*;\n\npublic interface AccessibleHypertext extends AccessibleText {\n\n    /**\n     * Returns the number of links within this hypertext document.\n     *\n     * @return number of links in this hypertext doc.\n     */\n    public abstract int getLinkCount();\n\n    /**\n     * Returns the nth Link of this Hypertext document.\n     *\n<｜fim▁hole｜>\n    /**\n     * Returns the index into an array of hyperlinks that\n     * is associated with this character index, or -1 if there\n     * is no hyperlink associated with this index.\n     *\n     * @param charIndex index within the text\n     * @return index into the set of hyperlinks for this hypertext doc.\n     */\n    public abstract int getLinkIndex(int charIndex);\n}<｜fim▁end｜>",
    "response": "     * @param linkIndex within the links of this Hypertext\n     * @return Link object encapsulating the nth link(s)\n     */\n    public abstract AccessibleHyperlink getLink(int linkIndex);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package franks.math;\n\npublic class Pair<X, Y> {\n\n    /**\n     * Get the first item\n     */\n    private X first;\n\n    /**\n     * Get the second item\n     */\n    private Y second;\n\n    /**\n     * \n     * @param first\n     * @param second\n     */\n    public Pair(X first, Y second) {\n        this.first=first;\n        this.second=second;\n    }\n\n    /**\n     */\n    public Pair() {        \n    }\n\n    /**\n     * @param first the first to set\n     */\n    public void setFirst(X first) {\n        this.first = first;\n    }\n\n    /**\n     * @return the first\n     */\n    public X getFirst() {\n        return first;\n    }\n\n    /**\n     * @param second the second to set\n     */\n    public void setSecond(Y second) {\n        this.second = second;\n<｜fim▁hole｜>     * @return the second\n     */\n    public Y getSecond() {\n        return second;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package javax.swing.plaf.multi;\n\nimport java.util.Vector;\nimport javax.swing.plaf.ToolBarUI;\nimport javax.swing.plaf.ComponentUI;\nimport javax.swing.JComponent;\nimport java.awt.Graphics;\nimport java.awt.Dimension;\nimport javax.accessibility.Accessible;\n\npublic class MultiToolBarUI extends ToolBarUI {\n\n    /**\n     * The vector containing the real UIs.  This is populated\n     * in the call to <code>createUI</code>, and can be obtained by calling\n     * the <code>getUIs</code> method.  The first element is guaranteed to be the real UI\n     * obtained from the default look and feel.\n     */\n    protected Vector<ComponentUI> uis = new Vector<>();\n\n    /**\n     * Returns the list of UIs associated with this multiplexing UI.  This\n     * allows processing of the UIs by an application aware of multiplexing\n     * UIs on components.\n     *\n     * @return an array of the UI delegates\n     */\n    public ComponentUI[] getUIs() {\n        return MultiLookAndFeel.uisToArray(uis);\n    }\n\n    /**\n     * Invokes the <code>contains</code> method on each UI handled by this object.\n     *\n     * @return the value obtained from the first UI, which is\n     * the UI obtained from the default <code>LookAndFeel</code>\n     */\n    public boolean contains(JComponent a, int b, int c) {\n        boolean returnValue =\n            uis.elementAt(0).contains(a,b,c);\n        for (int i = 1; i < uis.size(); i++) {\n            uis.elementAt(i).contains(a,b,c);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Invokes the <code>update</code> method on each UI handled by this object.\n     */\n    public void update(Graphics a, JComponent b) {\n        for (int i = 0; i < uis.size(); i++) {\n            uis.elementAt(i).update(a,b);\n        }\n    }\n\n    /**\n     * Returns a multiplexing UI instance if any of the auxiliary\n     * <code>LookAndFeel</code>s supports this UI.  Otherwise, just returns the\n     * UI object obtained from the default <code>LookAndFeel</code>.\n     *\n     * @param  a the component to create the UI for\n     * @return the UI delegate created\n     */\n    public static ComponentUI createUI(JComponent a) {\n        MultiToolBarUI mui = new MultiToolBarUI();\n        return MultiLookAndFeel.createUIs(mui, mui.uis, a);\n    }\n\n    /**\n     * Invokes the <code>installUI</code> method on each UI handled by this object.\n<｜fim▁hole｜>    }\n\n    /**\n     * Invokes the <code>uninstallUI</code> method on each UI handled by this object.\n     */\n    public void uninstallUI(JComponent a) {\n        for (int i = 0; i < uis.size(); i++) {\n            uis.elementAt(i).uninstallUI(a);\n        }\n    }\n\n    /**\n     * Invokes the <code>paint</code> method on each UI handled by this object.\n     */\n    public void paint(Graphics a, JComponent b) {\n        for (int i = 0; i < uis.size(); i++) {\n            uis.elementAt(i).paint(a,b);\n        }\n    }\n\n    /**\n     * Invokes the <code>getPreferredSize</code> method on each UI handled by this object.\n     *\n     * @return the value obtained from the first UI, which is\n     * the UI obtained from the default <code>LookAndFeel</code>\n     */\n    public Dimension getPreferredSize(JComponent a) {\n        Dimension returnValue =\n            uis.elementAt(0).getPreferredSize(a);\n        for (int i = 1; i < uis.size(); i++) {\n            uis.elementAt(i).getPreferredSize(a);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Invokes the <code>getMinimumSize</code> method on each UI handled by this object.\n     *\n     * @return the value obtained from the first UI, which is\n     * the UI obtained from the default <code>LookAndFeel</code>\n     */\n    public Dimension getMinimumSize(JComponent a) {\n        Dimension returnValue =\n            uis.elementAt(0).getMinimumSize(a);\n        for (int i = 1; i < uis.size(); i++) {\n            uis.elementAt(i).getMinimumSize(a);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Invokes the <code>getMaximumSize</code> method on each UI handled by this object.\n     *\n     * @return the value obtained from the first UI, which is\n     * the UI obtained from the default <code>LookAndFeel</code>\n     */\n    public Dimension getMaximumSize(JComponent a) {\n        Dimension returnValue =\n            uis.elementAt(0).getMaximumSize(a);\n        for (int i = 1; i < uis.size(); i++) {\n            uis.elementAt(i).getMaximumSize(a);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Invokes the <code>getAccessibleChildrenCount</code> method on each UI handled by this object.\n     *\n     * @return the value obtained from the first UI, which is\n     * the UI obtained from the default <code>LookAndFeel</code>\n     */\n    public int getAccessibleChildrenCount(JComponent a) {\n        int returnValue =\n            uis.elementAt(0).getAccessibleChildrenCount(a);\n        for (int i = 1; i < uis.size(); i++) {\n            uis.elementAt(i).getAccessibleChildrenCount(a);\n        }\n        return returnValue;\n    }\n\n    /**\n     * Invokes the <code>getAccessibleChild</code> method on each UI handled by this object.\n     *\n     * @return the value obtained from the first UI, which is\n     * the UI obtained from the default <code>LookAndFeel</code>\n     */\n    public Accessible getAccessibleChild(JComponent a, int b) {\n        Accessible returnValue =\n            uis.elementAt(0).getAccessibleChild(a,b);\n        for (int i = 1; i < uis.size(); i++) {\n            uis.elementAt(i).getAccessibleChild(a,b);\n        }\n        return returnValue;\n    }\n}<｜fim▁end｜>",
    "response": "     */\n    public void installUI(JComponent a) {\n        for (int i = 0; i < uis.size(); i++) {\n            uis.elementAt(i).installUI(a);\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.arvinsichuan.general.configuration;\n\nimport org.apache.tomcat.jdbc.pool.DataSource;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter{\n    private final DataSource dataSource;\n\n    private String[] publicPath ={\"/\",\"/css/**\",\"/js/**\",\"/fonts/**\",\"/img/**\",\"/favicon.ico\",\"/auth/**\"};\n    private String[] usersPath ={};//{\"/editor/**\",\"/users/**\"};\n\n    @Autowired\n    public SecurityConfig(DataSource dataSource) {\n        this.dataSource = dataSource;\n    }\n\n    @Override\n    @Order(1)\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                .authorizeRequests()\n                    .antMatchers(publicPath)\n                    .permitAll()\n                    .and()\n<｜fim▁hole｜>                    .loginPage(\"/auth/login\")\n                    .successForwardUrl(\"/auth/status\")\n                    .failureForwardUrl(\"/auth/status\")\n                    .permitAll()\n                    .and()\n                .logout()\n                    .logoutUrl(\"/auth/logout\")\n                    .logoutSuccessUrl(\"/\")\n                    .invalidateHttpSession(true)\n                    .deleteCookies()\n                    .and()\n                .sessionManagement()\n                    .maximumSessions(1)\n                    .maxSessionsPreventsLogin(false)\n        ;// END HTTP CONFIG\n\n    }\n\n    @Bean(name = \"passEncoder\")\n    public BCryptPasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder(16);\n    }\n\n    @Autowired\n    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n        auth\n                .jdbcAuthentication()\n                .dataSource(dataSource)\n                .passwordEncoder(passwordEncoder())\n        ;// END AUTH CONFIG\n    }\n\n}<｜fim▁end｜>",
    "response": "                .formLogin()\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.android.exoplayer2.upstream;\n\nimport static java.lang.Math.min;\n\nimport androidx.annotation.Nullable;\nimport com.google.android.exoplayer2.C;\nimport com.google.android.exoplayer2.ParserException;\nimport com.google.android.exoplayer2.upstream.HttpDataSource.CleartextNotPermittedException;\nimport com.google.android.exoplayer2.upstream.HttpDataSource.InvalidResponseCodeException;\nimport com.google.android.exoplayer2.upstream.Loader.UnexpectedLoaderException;\nimport java.io.FileNotFoundException;\nimport java.io.IOException;\n\npublic class DefaultLoadErrorHandlingPolicy implements LoadErrorHandlingPolicy {\n\n  /** The default minimum number of times to retry loading data prior to propagating the error. */\n  public static final int DEFAULT_MIN_LOADABLE_RETRY_COUNT = 3;\n  /**\n   * The default minimum number of times to retry loading prior to failing for progressive live\n   * streams.\n   */\n  public static final int DEFAULT_MIN_LOADABLE_RETRY_COUNT_PROGRESSIVE_LIVE = 6;\n  /** The default duration for which a track is excluded in milliseconds. */\n  public static final long DEFAULT_TRACK_EXCLUSION_MS = 60_000;\n  /** @deprecated Use {@link #DEFAULT_TRACK_EXCLUSION_MS} instead. */\n  @Deprecated public static final long DEFAULT_TRACK_BLACKLIST_MS = DEFAULT_TRACK_EXCLUSION_MS;\n<｜fim▁hole｜>  private static final int DEFAULT_BEHAVIOR_MIN_LOADABLE_RETRY_COUNT = -1;\n\n  private final int minimumLoadableRetryCount;\n\n  /**\n   * Creates an instance with default behavior.\n   *\n   * <p>{@link #getMinimumLoadableRetryCount} will return {@link\n   * #DEFAULT_MIN_LOADABLE_RETRY_COUNT_PROGRESSIVE_LIVE} for {@code dataType} {@link\n   * C#DATA_TYPE_MEDIA_PROGRESSIVE_LIVE}. For other {@code dataType} values, it will return {@link\n   * #DEFAULT_MIN_LOADABLE_RETRY_COUNT}.\n   */\n  public DefaultLoadErrorHandlingPolicy() {\n    this(DEFAULT_BEHAVIOR_MIN_LOADABLE_RETRY_COUNT);\n  }\n\n  /**\n   * Creates an instance with the given value for {@link #getMinimumLoadableRetryCount(int)}.\n   *\n   * @param minimumLoadableRetryCount See {@link #getMinimumLoadableRetryCount}.\n   */\n  public DefaultLoadErrorHandlingPolicy(int minimumLoadableRetryCount) {\n    this.minimumLoadableRetryCount = minimumLoadableRetryCount;\n  }\n\n  /**\n   * Returns whether a loader should fall back to using another resource on encountering an error,\n   * and if so the duration for which the failing resource should be excluded.\n   *\n   * <ul>\n   *   <li>This policy will only specify a fallback if {@link #isEligibleForFallback} returns {@code\n   *       true} for the error.\n   *   <li>This policy will always specify a location fallback rather than a track fallback if both\n   *       {@link FallbackOptions#isFallbackAvailable(int) are available}.\n   *   <li>When a fallback is specified, the duration for which the failing resource will be\n   *       excluded is {@link #DEFAULT_LOCATION_EXCLUSION_MS} or {@link\n   *       #DEFAULT_TRACK_EXCLUSION_MS}, depending on the fallback type.\n   * </ul>\n   */\n  @Override\n  @Nullable\n  public FallbackSelection getFallbackSelectionFor(\n      FallbackOptions fallbackOptions, LoadErrorInfo loadErrorInfo) {\n    if (!isEligibleForFallback(loadErrorInfo.exception)) {\n      return null;\n    }\n    // Prefer location fallbacks to track fallbacks, when both are available.\n    if (fallbackOptions.isFallbackAvailable(FALLBACK_TYPE_LOCATION)) {\n      return new FallbackSelection(FALLBACK_TYPE_LOCATION, DEFAULT_LOCATION_EXCLUSION_MS);\n    } else if (fallbackOptions.isFallbackAvailable(FALLBACK_TYPE_TRACK)) {\n      return new FallbackSelection(FALLBACK_TYPE_TRACK, DEFAULT_TRACK_EXCLUSION_MS);\n    }\n    return null;\n  }\n\n  /**\n   * Retries for any exception that is not a subclass of {@link ParserException}, {@link\n   * FileNotFoundException}, {@link CleartextNotPermittedException} or {@link\n   * UnexpectedLoaderException}, and for which {@link\n   * DataSourceException#isCausedByPositionOutOfRange} returns {@code false}. The retry delay is\n   * calculated as {@code Math.min((errorCount - 1) * 1000, 5000)}.\n   */\n  @Override\n  public long getRetryDelayMsFor(LoadErrorInfo loadErrorInfo) {\n    IOException exception = loadErrorInfo.exception;\n    return exception instanceof ParserException\n            || exception instanceof FileNotFoundException\n            || exception instanceof CleartextNotPermittedException\n            || exception instanceof UnexpectedLoaderException\n            || DataSourceException.isCausedByPositionOutOfRange(exception)\n        ? C.TIME_UNSET\n        : min((loadErrorInfo.errorCount - 1) * 1000, 5000);\n  }\n\n  /**\n   * See {@link #DefaultLoadErrorHandlingPolicy()} and {@link #DefaultLoadErrorHandlingPolicy(int)}\n   * for documentation about the behavior of this method.\n   */\n  @Override\n  public int getMinimumLoadableRetryCount(int dataType) {\n    if (minimumLoadableRetryCount == DEFAULT_BEHAVIOR_MIN_LOADABLE_RETRY_COUNT) {\n      return dataType == C.DATA_TYPE_MEDIA_PROGRESSIVE_LIVE\n          ? DEFAULT_MIN_LOADABLE_RETRY_COUNT_PROGRESSIVE_LIVE\n          : DEFAULT_MIN_LOADABLE_RETRY_COUNT;\n    } else {\n      return minimumLoadableRetryCount;\n    }\n  }\n\n  /** Returns whether an error should trigger a fallback if possible. */\n  protected boolean isEligibleForFallback(IOException exception) {\n    if (!(exception instanceof InvalidResponseCodeException)) {\n      return false;\n    }\n    InvalidResponseCodeException invalidResponseCodeException =\n        (InvalidResponseCodeException) exception;\n    return invalidResponseCodeException.responseCode == 403 // HTTP 403 Forbidden.\n        || invalidResponseCodeException.responseCode == 404 // HTTP 404 Not Found.\n        || invalidResponseCodeException.responseCode == 410 // HTTP 410 Gone.\n        || invalidResponseCodeException.responseCode == 416 // HTTP 416 Range Not Satisfiable.\n        || invalidResponseCodeException.responseCode == 500 // HTTP 500 Internal Server Error.\n        || invalidResponseCodeException.responseCode == 503; // HTTP 503 Service Unavailable.\n  }\n}<｜fim▁end｜>",
    "response": "  /** The default duration for which a location is excluded in milliseconds. */\n  public static final long DEFAULT_LOCATION_EXCLUSION_MS = 5 * 60_000;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.glassfish.jersey.servlet;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.glassfish.jersey.internal.PropertiesDelegate;\n\nimport com.google.common.collect.Iterators;\nimport com.google.common.collect.Lists;\n\nclass ServletPropertiesDelegate implements PropertiesDelegate {\n    private final HttpServletRequest request;\n\n    public ServletPropertiesDelegate(HttpServletRequest request) {\n        this.request = request;\n    }\n\n    @Override\n    public Object getProperty(String name) {\n        return request.getAttribute(name);\n    }\n\n    @Override\n    public Collection<String> getPropertyNames() {\n        return Lists.newLinkedList(new Iterable<String>() {\n            @Override\n            @SuppressWarnings(\"unchecked\")\n            public Iterator<String> iterator() {\n                return Iterators.forEnumeration(request.getAttributeNames());\n            }\n        });\n    }\n\n    @Override\n    public void setProperty(String name, Object object) {\n        request.setAttribute(name, object);\n    }\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "\n    @Override\n    public void removeProperty(String name) {\n        request.removeAttribute(name);\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package edu.wpi.first.team66.math;\n\npublic class Math2{\n\n    private Math2() {}\n\n    public static double clamp(double min, double max, double v) {\n        return Math.min(max, Math.max(min, v));\n    }\n\n    public static double hat(double center, double width, double height, double x)\n<｜fim▁hole｜>    }\n}<｜fim▁end｜>",
    "response": "    {\n        return height * Math.max(0, width - Math.abs(center - x));\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package java.security;\n\nimport java.security.spec.AlgorithmParameterSpec;\n\npublic abstract class KeyPairGeneratorSpi {\n\n    /**\n     * Initializes the key pair generator for a certain keysize, using\n     * the default parameter set.\n     *\n     * @param keysize the keysize. This is an\n     * algorithm-specific metric, such as modulus length, specified in\n     * number of bits.\n     *\n     * @param random the source of randomness for this generator.\n     *\n     * @exception InvalidParameterException if the <code>keysize</code> is not\n     * supported by this KeyPairGeneratorSpi object.\n     */\n    public abstract void initialize(int keysize, SecureRandom random);\n\n    /**\n     * Initializes the key pair generator using the specified parameter\n     * set and user-provided source of randomness.\n     *\n     * <p>This concrete method has been added to this previously-defined\n     * abstract class. (For backwards compatibility, it cannot be abstract.)\n     * It may be overridden by a provider to initialize the key pair\n     * generator. Such an override\n     * is expected to throw an InvalidAlgorithmParameterException if\n     * a parameter is inappropriate for this key pair generator.\n     * If this method is not overridden, it always throws an\n     * UnsupportedOperationException.\n     *\n     * @param params the parameter set used to generate the keys.\n     *\n     * @param random the source of randomness for this generator.\n     *\n     * @exception InvalidAlgorithmParameterException if the given parameters\n     * are inappropriate for this key pair generator.\n     *\n     * @since 1.2\n     */\n    public void initialize(AlgorithmParameterSpec params,\n                           SecureRandom random)\n        throws InvalidAlgorithmParameterException {\n            throw new UnsupportedOperationException();\n    }\n\n<｜fim▁hole｜>     * @return the newly generated <tt>KeyPair</tt>\n     */\n    public abstract KeyPair generateKeyPair();\n}<｜fim▁end｜>",
    "response": "    /**\n     * Generates a key pair. Unless an initialization method is called\n     * using a KeyPairGenerator interface, algorithm-specific defaults\n     * will be used. This will generate a new key pair every time it\n     * is called.\n     *\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.telegram.ui.components;\n\nimport android.content.Context;\nimport android.graphics.Canvas;\nimport android.graphics.Paint;\nimport android.graphics.Typeface;\nimport android.util.TypedValue;\nimport android.view.Gravity;\nimport android.view.View;\nimport android.view.animation.DecelerateInterpolator;\nimport android.widget.LinearLayout;\nimport android.widget.TextView;\n\nimport org.telegram.android.AndroidUtilities;\nimport xyz.securegram.R;\n\npublic class SlidingTabView extends LinearLayout {\n\n  public interface SlidingTabViewDelegate {\n    void didSelectTab(int tab);\n  }\n\n  private SlidingTabViewDelegate delegate;\n<｜fim▁hole｜>  private int tabCount = 0;\n  private float tabWidth = 0;\n  private float tabX = 0;\n  private float animateTabXTo = 0;\n  private Paint paint = new Paint();\n  private long startAnimationTime = 0;\n  private long totalAnimationDiff = 0;\n  private float startAnimationX = 0;\n  private DecelerateInterpolator interpolator;\n\n  public SlidingTabView(Context context) {\n    super(context);\n    setOrientation(HORIZONTAL);\n    setWeightSum(100);\n    paint.setColor(0xffffffff);\n    setWillNotDraw(false);\n    interpolator = new DecelerateInterpolator();\n  }\n\n  public void addTextTab(final int position, String title) {\n    TextView tab = new TextView(getContext());\n    tab.setText(title);\n    tab.setFocusable(true);\n    tab.setGravity(Gravity.CENTER);\n    tab.setSingleLine();\n    tab.setTextColor(0xffffffff);\n    tab.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14);\n    tab.setTypeface(Typeface.DEFAULT_BOLD);\n    tab.setBackgroundResource(R.drawable.bar_selector_picker);\n\n    tab.setOnClickListener(\n        new OnClickListener() {\n          @Override\n          public void onClick(View v) {\n            didSelectTab(position);\n          }\n        });\n    addView(tab);\n    LayoutParams layoutParams = (LayoutParams) tab.getLayoutParams();\n    layoutParams.height = LayoutHelper.MATCH_PARENT;\n    layoutParams.width = 0;\n    layoutParams.weight = 50;\n    tab.setLayoutParams(layoutParams);\n\n    tabCount++;\n  }\n\n  public void setDelegate(SlidingTabViewDelegate delegate) {\n    this.delegate = delegate;\n  }\n\n  public int getSeletedTab() {\n    return selectedTab;\n  }\n\n  private void didSelectTab(int tab) {\n    if (selectedTab == tab) {\n      return;\n    }\n    selectedTab = tab;\n    animateToTab(tab);\n    if (delegate != null) {\n      delegate.didSelectTab(tab);\n    }\n  }\n\n  private void animateToTab(int tab) {\n    animateTabXTo = tab * tabWidth;\n    startAnimationX = tabX;\n    totalAnimationDiff = 0;\n    startAnimationTime = System.currentTimeMillis();\n    invalidate();\n  }\n\n  @Override\n  protected void onLayout(boolean changed, int l, int t, int r, int b) {\n    super.onLayout(changed, l, t, r, b);\n    tabWidth = (r - l) / (float) tabCount;\n    animateTabXTo = tabX = tabWidth * selectedTab;\n  }\n\n  @Override\n  protected void onDraw(Canvas canvas) {\n    if (tabX != animateTabXTo) {\n      long dt = System.currentTimeMillis() - startAnimationTime;\n      startAnimationTime = System.currentTimeMillis();\n      totalAnimationDiff += dt;\n      if (totalAnimationDiff > 200) {\n        totalAnimationDiff = 200;\n        tabX = animateTabXTo;\n      } else {\n        tabX =\n            startAnimationX\n                + interpolator.getInterpolation(totalAnimationDiff / 200.0f)\n                    * (animateTabXTo - startAnimationX);\n        invalidate();\n      }\n    }\n\n    canvas.drawRect(\n        tabX, getHeight() - AndroidUtilities.dp(2), (tabX + tabWidth), getHeight(), paint);\n  }\n}<｜fim▁end｜>",
    "response": "  private int selectedTab = 0;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.rya.kafka.connect.accumulo;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.rya.kafka.connect.api.sink.RyaSinkConfig;\nimport org.junit.Test;\n\npublic class AccumuloRyaSinkConfigTest {\n<｜fim▁hole｜>        properties.put(AccumuloRyaSinkConfig.ZOOKEEPERS, \"zoo1:2181,zoo2\");\n        properties.put(AccumuloRyaSinkConfig.CLUSTER_NAME, \"test\");\n        properties.put(AccumuloRyaSinkConfig.USERNAME, \"alice\");\n        properties.put(AccumuloRyaSinkConfig.PASSWORD, \"alice1234!@\");\n        properties.put(RyaSinkConfig.RYA_INSTANCE_NAME, \"rya_\");\n        new AccumuloRyaSinkConfig(properties);\n    }\n}<｜fim▁end｜>",
    "response": "\n    @Test\n    public void parses() {\n        final Map<String, String> properties = new HashMap<>();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.lucene.queryParser;\n\npublic class ParseException extends Exception {\n\n  /**\n   * The version identifier for this Serializable class.\n   * Increment only if the <i>serialized</i> form of the\n   * class changes.\n   */\n  private static final long serialVersionUID = 1L;\n\n  /**\n   * The end of line string for this machine.\n   */\n  protected static String EOL = System.getProperty(\"line.separator\", \"\\n\");\n\n  /**\n   * This constructor is used by the method \"generateParseException\"\n   * in the generated parser.  Calling this constructor generates\n   * a new object of this type with the fields \"currentToken\",\n   * \"expectedTokenSequences\", and \"tokenImage\" set.\n   */\n  public ParseException(Token currentTokenVal,\n                        int[][] expectedTokenSequencesVal,\n                        String[] tokenImageVal\n                       )\n  {\n    super(initialise(currentTokenVal, expectedTokenSequencesVal, tokenImageVal));\n    currentToken = currentTokenVal;\n    expectedTokenSequences = expectedTokenSequencesVal;\n    tokenImage = tokenImageVal;\n  }\n\n  /**\n   * The following constructors are for use by you for whatever\n   * purpose you can think of.  Constructing the exception in this\n   * manner makes the exception behave in the normal way - i.e., as\n   * documented in the class \"Throwable\".  The fields \"errorToken\",\n   * \"expectedTokenSequences\", and \"tokenImage\" do not contain\n   * relevant information.  The JavaCC generated code does not use\n   * these constructors.\n   */\n\n  public ParseException() {\n    super();\n  }\n\n  /** Constructor with message. */\n  public ParseException(String message) {\n    super(message);\n  }\n\n  /**\n   * This is the last token that has been consumed successfully.  If\n   * this object has been created due to a parse error, the token\n   * followng this token will (therefore) be the first error token.\n   */\n  public Token currentToken;\n\n  /**\n   * Each entry in this array is an array of integers.  Each array\n   * of integers represents a sequence of tokens (by their ordinal\n   * values) that is expected at this point of the parse.\n   */\n  public int[][] expectedTokenSequences;\n\n  /**\n   * This is a reference to the \"tokenImage\" array of the generated\n   * parser within which the parse error occurred.  This array is\n   * defined in the generated ...Constants interface.\n   */\n  public String[] tokenImage;\n\n  /**\n   * It uses \"currentToken\" and \"expectedTokenSequences\" to generate a parse\n   * error message and returns it.  If this object has been created\n   * due to a parse error, and you do not catch it (it gets thrown\n   * from the parser) the correct error message\n   * gets displayed.\n   */\n  private static String initialise(Token currentToken,\n                           int[][] expectedTokenSequences,\n                           String[] tokenImage) {\n\n    StringBuffer expected = new StringBuffer();\n    int maxSize = 0;\n    for (int i = 0; i < expectedTokenSequences.length; i++) {\n      if (maxSize < expectedTokenSequences[i].length) {\n        maxSize = expectedTokenSequences[i].length;\n<｜fim▁hole｜>      }\n      expected.append(EOL).append(\"    \");\n    }\n    String statement = \"Encountered \\\"\";\n    Token tok = currentToken.next;\n    for (int i = 0; i < maxSize; i++) {\n      if (i != 0) statement += \" \";\n      if (tok.kind == 0) {\n        statement += tokenImage[0];\n        break;\n      }\n      statement += \" \" + tokenImage[tok.kind];\n      statement += \" \\\"\";\n      statement += add_escapes(tok.image);\n      statement += \" \\\"\";\n      tok = tok.next;\n    }\n    statement += \"\\\" at line \" + currentToken.next.beginLine + \", column \" + currentToken.next.beginColumn;\n    statement += \".\" + EOL;\n\n    if (expectedTokenSequences.length == 0) {\n        // Nothing to add here\n    } else {\n        if (expectedTokenSequences.length == 1) {\n          statement += \"Was expecting:\" + EOL + \"    \";\n        } else {\n          statement += \"Was expecting one of:\" + EOL + \"    \";\n        }\n        statement += expected.toString();\n    }\n\n    return statement;\n  }\n\n  /**\n   * Used to convert raw characters to their escaped version\n   * when these raw version cannot be used as part of an ASCII\n   * string literal.\n   */\n  static String add_escapes(String str) {\n      StringBuffer statement = new StringBuffer();\n      char ch;\n      for (int i = 0; i < str.length(); i++) {\n        switch (str.charAt(i))\n        {\n           case '\\b':\n              statement.append(\"\\\\b\");\n              continue;\n           case '\\t':\n              statement.append(\"\\\\t\");\n              continue;\n           case '\\n':\n              statement.append(\"\\\\n\");\n              continue;\n           case '\\f':\n              statement.append(\"\\\\f\");\n              continue;\n           case '\\r':\n              statement.append(\"\\\\r\");\n              continue;\n           case '\\\"':\n              statement.append(\"\\\\\\\"\");\n              continue;\n           case '\\'':\n              statement.append(\"\\\\\\'\");\n              continue;\n           case '\\\\':\n              statement.append(\"\\\\\\\\\");\n              continue;\n           default:\n              if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {\n                 String s = \"0000\" + Integer.toString(ch, 16);\n                 statement.append(\"\\\\u\" + s.substring(s.length() - 4, s.length()));\n              } else {\n                 statement.append(ch);\n              }\n              continue;\n        }\n      }\n      return statement.toString();\n   }\n\n}<｜fim▁end｜>",
    "response": "      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.openhab.io.gpio.linux;\n\nimport java.util.Arrays;\nimport java.util.List;\n\nimport com.sun.jna.Structure;\n\npublic class pollfd extends Structure {\n\n    /** File descriptor to poll. */\n    public int fd;\n    /** Types of events poller cares about. */\n    public short events;\n    /** Types of events that actually occurred. */\n<｜fim▁hole｜>        this.events = 0;\n        this.revents = 0;\n    }\n\n    /**\n     * Initializes \"pollfd\" structure with supplied values.\n     * \n     * @param fd file descriptor to poll\n     * @param events types of events poller cares about\n     * @param revents types of events that actually occurred\n     */\n    public pollfd(int fd, short events, short revents) {\n        super();\n        this.fd = fd;\n        this.events = events;\n        this.revents = revents;\n    }\n\n    /**\n     * Specifies fields order.\n     * \n     * @see com.sun.jna.Structure#getFieldOrder()\n     */\n    @Override\n    protected List<?> getFieldOrder() {\n        return Arrays.asList(\"fd\", \"events\", \"revents\");\n    }\n}<｜fim▁end｜>",
    "response": "    public short revents;\n\n    /** Initializes \"pollfd\" structure with zeroes. */\n    public pollfd() {\n        super();\n        this.fd = 0;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.springframework.boot.actuate.metrics.web.servlet;\n\nimport java.io.IOException;\nimport java.lang.reflect.AnnotatedElement;\nimport java.util.Collections;\nimport java.util.Set;\n\nimport javax.servlet.FilterChain;\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport io.micrometer.core.annotation.Timed;\nimport io.micrometer.core.instrument.MeterRegistry;\nimport io.micrometer.core.instrument.Timer;\nimport io.micrometer.core.instrument.Timer.Builder;\nimport io.micrometer.core.instrument.Timer.Sample;\n\nimport org.springframework.boot.actuate.metrics.AutoTimer;\nimport org.springframework.core.annotation.MergedAnnotationCollectors;\nimport org.springframework.core.annotation.MergedAnnotations;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport org.springframework.web.method.HandlerMethod;\nimport org.springframework.web.servlet.DispatcherServlet;\nimport org.springframework.web.servlet.HandlerMapping;\nimport org.springframework.web.util.NestedServletException;\n\npublic class WebMvcMetricsFilter extends OncePerRequestFilter {\n\n    private final MeterRegistry registry;\n\n    private final WebMvcTagsProvider tagsProvider;\n\n    private final String metricName;\n\n    private final AutoTimer autoTimer;\n\n    /**\n     * Create a new {@link WebMvcMetricsFilter} instance.\n     * @param registry the meter registry\n     * @param tagsProvider the tags provider\n     * @param metricName the metric name\n     * @param autoTimer the auto-timers to apply or {@code null} to disable auto-timing\n     * @since 2.2.0\n     */\n    public WebMvcMetricsFilter(MeterRegistry registry, WebMvcTagsProvider tagsProvider, String metricName,\n            AutoTimer autoTimer) {\n        this.registry = registry;\n        this.tagsProvider = tagsProvider;\n        this.metricName = metricName;\n        this.autoTimer = autoTimer;\n    }\n\n    @Override\n    protected boolean shouldNotFilterAsyncDispatch() {\n        return false;\n    }\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n            throws ServletException, IOException {\n        TimingContext timingContext = TimingContext.get(request);\n        if (timingContext == null) {\n            timingContext = startAndAttachTimingContext(request);\n        }\n        try {\n            filterChain.doFilter(request, response);\n            if (!request.isAsyncStarted()) {\n                // Only record when async processing has finished or never been started.\n                // If async was started by something further down the chain we wait\n                // until the second filter invocation (but we'll be using the\n                // TimingContext that was attached to the first)\n                Throwable exception = (Throwable) request.getAttribute(DispatcherServlet.EXCEPTION_ATTRIBUTE);\n                record(timingContext, request, response, exception);\n            }\n        }\n        catch (NestedServletException ex) {\n            response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());\n            record(timingContext, request, response, ex.getCause());\n            throw ex;\n        }\n        catch (ServletException | IOException | RuntimeException ex) {\n            record(timingContext, request, response, ex);\n            throw ex;\n        }\n    }\n\n    private TimingContext startAndAttachTimingContext(HttpServletRequest request) {\n        Timer.Sample timerSample = Timer.start(this.registry);\n        TimingContext timingContext = new TimingContext(timerSample);\n        timingContext.attachTo(request);\n        return timingContext;\n    }\n\n    private void record(TimingContext timingContext, HttpServletRequest request, HttpServletResponse response,\n            Throwable exception) {\n        Object handler = getHandler(request);\n        Set<Timed> annotations = getTimedAnnotations(handler);\n        Timer.Sample timerSample = timingContext.getTimerSample();\n        if (annotations.isEmpty()) {\n            Builder builder = this.autoTimer.builder(this.metricName);\n            timerSample.stop(getTimer(builder, handler, request, response, exception));\n            return;\n        }\n        for (Timed annotation : annotations) {\n            Builder builder = Timer.builder(annotation, this.metricName);\n            timerSample.stop(getTimer(builder, handler, request, response, exception));\n        }\n    }\n\n    private Object getHandler(HttpServletRequest request) {\n        return request.getAttribute(HandlerMapping.BEST_MATCHING_HANDLER_ATTRIBUTE);\n    }\n\n    private Set<Timed> getTimedAnnotations(Object handler) {\n        if (!(handler instanceof HandlerMethod)) {\n            return Collections.emptySet();\n        }\n        return getTimedAnnotations((HandlerMethod) handler);\n    }\n\n    private Set<Timed> getTimedAnnotations(HandlerMethod handler) {\n        Set<Timed> methodAnnotations = findTimedAnnotations(handler.getMethod());\n        if (!methodAnnotations.isEmpty()) {\n            return methodAnnotations;\n        }\n        return findTimedAnnotations(handler.getBeanType());\n<｜fim▁hole｜>        if (!annotations.isPresent(Timed.class)) {\n            return Collections.emptySet();\n        }\n        return annotations.stream(Timed.class).collect(MergedAnnotationCollectors.toAnnotationSet());\n    }\n\n    private Timer getTimer(Builder builder, Object handler, HttpServletRequest request, HttpServletResponse response,\n            Throwable exception) {\n        return builder.tags(this.tagsProvider.getTags(request, response, handler, exception)).register(this.registry);\n    }\n\n    /**\n     * Context object attached to a request to retain information across the multiple\n     * filter calls that happen with async requests.\n     */\n    private static class TimingContext {\n\n        private static final String ATTRIBUTE = TimingContext.class.getName();\n\n        private final Timer.Sample timerSample;\n\n        TimingContext(Sample timerSample) {\n            this.timerSample = timerSample;\n        }\n\n        Timer.Sample getTimerSample() {\n            return this.timerSample;\n        }\n\n        void attachTo(HttpServletRequest request) {\n            request.setAttribute(ATTRIBUTE, this);\n        }\n\n        static TimingContext get(HttpServletRequest request) {\n            return (TimingContext) request.getAttribute(ATTRIBUTE);\n        }\n\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    private Set<Timed> findTimedAnnotations(AnnotatedElement element) {\n        MergedAnnotations annotations = MergedAnnotations.from(element);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>import java.util.Map;\n\nimport javax.inject.Inject;\nimport javax.servlet.ServletException;\n\nimport com.google.inject.Injector;\nimport com.sun.jersey.api.core.ResourceConfig;\nimport com.sun.jersey.guice.spi.container.servlet.GuiceContainer;\nimport com.sun.jersey.spi.container.servlet.WebConfig;\n\nimport edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n\npublic class DropwizardGuiceContainer extends GuiceContainer {\n  @SuppressFBWarnings(\"BAD_PRACTICE\")\n  private final Environment environment;\n\n  private static final long serialVersionUID = 1L;\n\n  @Inject\n  public DropwizardGuiceContainer(final Injector injector, final Environment environment) {\n    super(injector);\n    this.environment = checkNotNull(environment, \"environment is null\");\n  }\n\n  @Override\n  protected ResourceConfig getDefaultResourceConfig(final Map<String, Object> props, final WebConfig webConfig) throws ServletException {\n    return environment.jersey().getResourceConfig();\n  }\n}<｜fim▁end｜>",
    "response": "package com.hubspot.singularity.guice;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport io.dropwizard.setup.Environment;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.activiti.engine.test.api.nonpublic;\n\nimport java.util.List;\n\nimport org.activiti.engine.impl.EventSubscriptionQueryImpl;\nimport org.activiti.engine.impl.interceptor.Command;\nimport org.activiti.engine.impl.interceptor.CommandContext;\nimport org.activiti.engine.impl.persistence.entity.EventSubscriptionEntity;\nimport org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntity;\nimport org.activiti.engine.impl.persistence.entity.SignalEventSubscriptionEntity;\nimport org.activiti.engine.impl.test.PluggableActivitiTestCase;\nimport org.activiti.engine.runtime.Execution;\nimport org.activiti.engine.runtime.ProcessInstance;\nimport org.activiti.engine.test.Deployment;\n\npublic class EventSubscriptionQueryTest extends PluggableActivitiTestCase {\n\n  public void testQueryByEventName() {\n\n    processEngineConfiguration.getCommandExecutorTxRequired()\n      .execute(new Command<Void>() {\n        public Void execute(CommandContext commandContext) {\n\n          MessageEventSubscriptionEntity messageEventSubscriptionEntity1 = new MessageEventSubscriptionEntity();\n          messageEventSubscriptionEntity1.setEventName(\"messageName\");\n          messageEventSubscriptionEntity1.insert();\n\n          MessageEventSubscriptionEntity messageEventSubscriptionEntity2 = new MessageEventSubscriptionEntity();\n          messageEventSubscriptionEntity2.setEventName(\"messageName\");\n          messageEventSubscriptionEntity2.insert();\n\n          MessageEventSubscriptionEntity messageEventSubscriptionEntity3 = new MessageEventSubscriptionEntity();\n          messageEventSubscriptionEntity3.setEventName(\"messageName2\");\n          messageEventSubscriptionEntity3.insert();\n\n          return null;\n        }\n      });\n\n    List<EventSubscriptionEntity> list = newEventSubscriptionQuery()\n      .eventName(\"messageName\")\n      .list();\n    assertEquals(2, list.size());\n\n    list = newEventSubscriptionQuery()\n      .eventName(\"messageName2\")\n      .list();\n    assertEquals(1, list.size());\n\n    cleanDb();\n\n  }\n\n  public void testQueryByEventType() {\n\n    processEngineConfiguration.getCommandExecutorTxRequired()\n      .execute(new Command<Void>() {\n        public Void execute(CommandContext commandContext) {\n\n          MessageEventSubscriptionEntity messageEventSubscriptionEntity1 = new MessageEventSubscriptionEntity();\n          messageEventSubscriptionEntity1.setEventName(\"messageName\");          \n          messageEventSubscriptionEntity1.insert();\n\n          MessageEventSubscriptionEntity messageEventSubscriptionEntity2 = new MessageEventSubscriptionEntity();\n          messageEventSubscriptionEntity2.setEventName(\"messageName\");\n          messageEventSubscriptionEntity2.insert();\n\n          SignalEventSubscriptionEntity signalEventSubscriptionEntity3 = new SignalEventSubscriptionEntity();\n          signalEventSubscriptionEntity3.setEventName(\"messageName2\");\n          signalEventSubscriptionEntity3.insert();\n\n          return null;\n        }\n      });\n\n    List<EventSubscriptionEntity> list = newEventSubscriptionQuery()\n      .eventType(\"signal\")\n      .list();\n    assertEquals(1, list.size());\n\n    list = newEventSubscriptionQuery()\n      .eventType(\"message\")\n      .list();\n    assertEquals(2, list.size());\n\n    cleanDb();\n\n  }\n\n  public void testQueryByActivityId() {\n\n    processEngineConfiguration.getCommandExecutorTxRequired()\n      .execute(new Command<Void>() {\n        public Void execute(CommandContext commandContext) {\n\n          MessageEventSubscriptionEntity messageEventSubscriptionEntity1 = new MessageEventSubscriptionEntity();\n<｜fim▁hole｜>          messageEventSubscriptionEntity1.insert();\n\n          MessageEventSubscriptionEntity messageEventSubscriptionEntity2 = new MessageEventSubscriptionEntity();\n          messageEventSubscriptionEntity2.setEventName(\"messageName\");\n          messageEventSubscriptionEntity2.setActivityId(\"someActivity\");\n          messageEventSubscriptionEntity2.insert();\n\n          SignalEventSubscriptionEntity signalEventSubscriptionEntity3 = new SignalEventSubscriptionEntity();\n          signalEventSubscriptionEntity3.setEventName(\"messageName2\");\n          signalEventSubscriptionEntity3.setActivityId(\"someOtherActivity\");\n          signalEventSubscriptionEntity3.insert();\n\n          return null;\n        }\n      });\n\n    List<EventSubscriptionEntity> list = newEventSubscriptionQuery()\n      .activityId(\"someOtherActivity\")\n      .list();\n    assertEquals(1, list.size());\n\n    list = newEventSubscriptionQuery()\n      .activityId(\"someActivity\")\n      .eventType(\"message\")\n      .list();\n    assertEquals(2, list.size());\n\n    cleanDb();\n\n  }\n\n  @Deployment\n  public void testQueryByExecutionId() {\n\n    // starting two instances:\n    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(\"catchSignal\");\n    runtimeService.startProcessInstanceByKey(\"catchSignal\");\n\n    // test query by process instance id\n    EventSubscriptionEntity subscription = newEventSubscriptionQuery()\n      .processInstanceId(processInstance.getId())\n      .singleResult();\n    assertNotNull(subscription);\n\n    Execution executionWaitingForSignal = runtimeService.createExecutionQuery()\n      .activityId(\"signalEvent\")\n      .processInstanceId(processInstance.getId())\n      .singleResult();\n\n    // test query by execution id\n    EventSubscriptionEntity signalSubscription = newEventSubscriptionQuery()\n      .executionId(executionWaitingForSignal.getId())\n      .singleResult();\n    assertNotNull(signalSubscription);\n\n    assertEquals(signalSubscription, subscription);\n\n    cleanDb();\n\n  }\n\n  protected EventSubscriptionQueryImpl newEventSubscriptionQuery() {\n    return new EventSubscriptionQueryImpl(processEngineConfiguration.getCommandExecutorTxRequired());\n  }\n\n  protected void cleanDb() {    \n    processEngineConfiguration.getCommandExecutorTxRequired()\n    .execute(new Command<Void>() {\n      public Void execute(CommandContext commandContext) {\n        final List<EventSubscriptionEntity> subscriptions = new EventSubscriptionQueryImpl(commandContext).list();\n        for (EventSubscriptionEntity eventSubscriptionEntity : subscriptions) {\n          eventSubscriptionEntity.delete();\n        }\n        return null;\n      }\n    });\n\n  }\n\n}<｜fim▁end｜>",
    "response": "          messageEventSubscriptionEntity1.setEventName(\"messageName\");        \n          messageEventSubscriptionEntity1.setActivityId(\"someActivity\");          \n"
  },
  {
    "prompt": "<｜fim▁begin｜>package funciones;\n\nimport accesodatos.ConjuntoResultado;\nimport entidades.ContratoDocente;\nimport accesodatos.*;\nimport entidades.Docente;\nimport entidades.Periodo;\nimport java.sql.Date;\nimport java.util.ArrayList;\n\npublic class FContratoDocente {\n\n    public static ContratoDocente obtenerdadocodigo(int codigo) throws Exception {\n        ContratoDocente resp = new ContratoDocente();\n        try {\n            ArrayList<Parametro> lstp = new ArrayList<>();\n            String sql = \"Select * from contrato_docente where codigo = ?;\";\n            lstp.add(new Parametro(1, codigo));\n            ConjuntoResultado rs = AccesoDatos.ejecutaQuery(sql, lstp);\n            if (rs != null) {\n                resp = FContratoDocente.llenar(rs).get(0);\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());\n        }\n        return resp;\n    }\n\n    public static ArrayList<ContratoDocente> obtener() throws Exception {\n        ArrayList<ContratoDocente> resp = new ArrayList<>();\n        try {\n            String sql = \"Select * from contrato_docente order by fecha_ingreso;\";\n            ConjuntoResultado rs = AccesoDatos.ejecutaQuery(sql);\n            if (rs != null) {\n                resp = FContratoDocente.llenar(rs);\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());\n        }\n        return resp;\n    }\n\n    public static ArrayList<ContratoDocente> obteneractivos() throws Exception {\n        ArrayList<ContratoDocente> resp = new ArrayList<>();\n        try {\n            String sql = \"select * from contrato_docente where fecha_salida <= ?\";\n            ArrayList<Parametro> lstp = new ArrayList<>();\n            lstp.add(new Parametro(1, new Date(new java.util.Date().getTime())));\n            ConjuntoResultado rs = AccesoDatos.ejecutaQuery(sql, lstp);\n            if (rs != null) {\n                resp = FContratoDocente.llenar(rs);\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());\n        }\n        return resp;\n    }\n\n    private static ArrayList<ContratoDocente> llenar(ConjuntoResultado rs) throws Exception {\n        ArrayList<ContratoDocente> lstper = new ArrayList<>();\n        try {\n            while (rs.next()) {\n                ContratoDocente tmp = new ContratoDocente(rs.getInt(0), FDocente.obtenerdadocodigo(rs.getInt(1)), FTipoContrato.obtenerdadocodigo(rs.getInt(2)), rs.getDate(3), rs.getDate(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9));\n                lstper.add(tmp);\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());\n        }\n        return lstper;\n    }\n\n    public static boolean editar(ContratoDocente contrato_docente) {\n        try {\n            String sql = \"UPDATE public.contrato_docente\\n\"\n                    + \"   SET docente=?, tipo_contrato=?, fecha_ingreso=?, fecha_salida=?, \\n\"\n                    + \"       correo_personal=?, telefono=?, celular=?, curriculum=?, correo_institucional=?\\n\"\n                    + \" WHERE codigo = ?;\";\n            ArrayList<Parametro> lstp = new ArrayList<>();\n            lstp.add(new Parametro(1, contrato_docente.getDocente().getCodigo()));\n            lstp.add(new Parametro(2, contrato_docente.getTipocontrato().getCodigo()));\n            lstp.add(new Parametro(3, new java.sql.Date(contrato_docente.getFechaingreso().getTime())));\n            lstp.add(new Parametro(4, new java.sql.Date(contrato_docente.getFechasalida().getTime())));\n            lstp.add(new Parametro(5, contrato_docente.getCorreo_personal()));\n            lstp.add(new Parametro(6, contrato_docente.getTelefono()));\n            lstp.add(new Parametro(7, contrato_docente.getCelular()));\n            lstp.add(new Parametro(8, contrato_docente.getCurriculum()));\n            lstp.add(new Parametro(9, contrato_docente.getCorreoinstitucional()));\n            lstp.add(new Parametro(10, contrato_docente.getCodigo()));\n            try {\n                AccesoDatos.ejecutaComando(sql, lstp);\n            } catch (Exception e) {\n                return false;\n            }\n        } catch (Exception e) {\n            return false;\n        }\n        return true;\n    }\n\n    public static ArrayList<ContratoDocente> obtenercontratos(Docente docente) throws Exception {\n        ArrayList<ContratoDocente> resp = new ArrayList<>();\n        try {\n            String sql = \"select * from contrato_docente where fecha_salida <= '2016-12-12' and docente = ? order by fecha_ingreso desc\";\n            ArrayList<Parametro> lstp = new ArrayList<>();\n            lstp.add(new Parametro(1, docente.getCodigo()));\n            ConjuntoResultado rs = AccesoDatos.ejecutaQuery(sql, lstp);\n<｜fim▁hole｜>                ContratoDocente tmp = new ContratoDocente(rs.getInt(0), FDocente.obtenerdadocodigo(rs.getInt(1)), FTipoContrato.obtenerdadocodigo(rs.getInt(2)), rs.getDate(3), rs.getDate(4), rs.getString(5), rs.getString(6), rs.getString(7), rs.getString(8), rs.getString(9));\n                resp.add(tmp);\n            }\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());\n        }\n        return resp;\n    }\n}<｜fim▁end｜>",
    "response": "            while (rs.next()) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.company.professor;\n\nimport com.company.professor.DaoSession;\nimport de.greenrobot.dao.DaoException;\n\npublic class Experience {\n\n    private long GrowthRateId;\n    private long Level;\n    private long Experience;\n\n    /** Used to resolve relations */\n    private transient DaoSession daoSession;\n\n    /** Used for active entity operations. */\n    private transient ExperienceDao myDao;\n\n    private GrowthRates GrowthRates;\n    private Long GrowthRates__resolvedKey;\n\n    public Experience() {\n    }\n\n<｜fim▁hole｜>\n    public Experience(long GrowthRateId, long Level, long Experience) {\n        this.GrowthRateId = GrowthRateId;\n        this.Level = Level;\n        this.Experience = Experience;\n    }\n\n    /** called by internal mechanisms, do not call yourself. */\n    public void __setDaoSession(DaoSession daoSession) {\n        this.daoSession = daoSession;\n        myDao = daoSession != null ? daoSession.getExperienceDao() : null;\n    }\n\n    public long getGrowthRateId() {\n        return GrowthRateId;\n    }\n\n    public void setGrowthRateId(long GrowthRateId) {\n        this.GrowthRateId = GrowthRateId;\n    }\n\n    public long getLevel() {\n        return Level;\n    }\n\n    public void setLevel(long Level) {\n        this.Level = Level;\n    }\n\n    public long getExperience() {\n        return Experience;\n    }\n\n    public void setExperience(long Experience) {\n        this.Experience = Experience;\n    }\n\n    /** To-one relationship, resolved on first access. */\n    public GrowthRates getGrowthRates() {\n        long __key = this.GrowthRateId;\n        if (GrowthRates__resolvedKey == null || !GrowthRates__resolvedKey.equals(__key)) {\n            if (daoSession == null) {\n                throw new DaoException(\"Entity is detached from DAO context\");\n            }\n            GrowthRatesDao targetDao = daoSession.getGrowthRatesDao();\n            GrowthRates GrowthRatesNew = targetDao.load(__key);\n            synchronized (this) {\n                GrowthRates = GrowthRatesNew;\n                GrowthRates__resolvedKey = __key;\n            }\n        }\n        return GrowthRates;\n    }\n\n    public void setGrowthRates(GrowthRates GrowthRates) {\n        if (GrowthRates == null) {\n            throw new DaoException(\"To-one property 'GrowthRateId' has not-null constraint; cannot set to-one to null\");\n        }\n        synchronized (this) {\n            this.GrowthRates = GrowthRates;\n            GrowthRateId = GrowthRates.getId();\n            GrowthRates__resolvedKey = GrowthRateId;\n        }\n    }\n\n    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */\n    public void delete() {\n        if (myDao == null) {\n            throw new DaoException(\"Entity is detached from DAO context\");\n        }    \n        myDao.delete(this);\n    }\n\n    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */\n    public void update() {\n        if (myDao == null) {\n            throw new DaoException(\"Entity is detached from DAO context\");\n        }    \n        myDao.update(this);\n    }\n\n    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */\n    public void refresh() {\n        if (myDao == null) {\n            throw new DaoException(\"Entity is detached from DAO context\");\n        }    \n        myDao.refresh(this);\n    }\n\n}<｜fim▁end｜>",
    "response": "    public Experience(long GrowthRateId) {\n        this.GrowthRateId = GrowthRateId;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.bukkit.command.defaults;\n\n<｜fim▁hole｜>import org.bukkit.command.CommandSender;\nimport org.bukkit.command.defaults.VanillaCommand;\n\npublic class TeleportCommand extends VanillaCommand  {\n\n    public TeleportCommand() {\n        super(\"Teleport\");\n    }\n\n    public boolean execute(CommandSender sender, String currentAlias, String[] args) {\n        return false;\n    }\n\n    public List<String> tabComplete(CommandSender sender, String alias, String[] args) throws IllegalArgumentException {\n        return null;\n    }\n}<｜fim▁end｜>",
    "response": "import java.util.List;\nimport org.bukkit.command.Command;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package model.diagram.edit.policies;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.eclipse.draw2d.ColorConstants;\nimport org.eclipse.draw2d.Figure;\nimport org.eclipse.draw2d.FigureListener;\nimport org.eclipse.draw2d.Graphics;\nimport org.eclipse.draw2d.IFigure;\nimport org.eclipse.draw2d.Label;\nimport org.eclipse.draw2d.RectangleFigure;\nimport org.eclipse.draw2d.geometry.Rectangle;\nimport org.eclipse.gef.GraphicalEditPart;\nimport org.eclipse.gef.handles.MoveHandle;\nimport org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx;\nimport org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;\nimport org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;\nimport org.eclipse.gmf.tooling.runtime.edit.policies.labels.IRefreshableFeedbackEditPolicy;\n\npublic class ModelTextNonResizableEditPolicy extends NonResizableEditPolicyEx\n        implements IRefreshableFeedbackEditPolicy {\n\n    /**\n    * @generated\n    */\n    private IFigure selectionFeedbackFigure;\n\n    /**\n    * @generated\n    */\n    private IFigure focusFeedbackFigure;\n\n    /**\n    * @generated\n    */\n    private FigureListener hostPositionListener;\n\n    /**\n    * @generated\n    */\n    protected void showPrimarySelection() {\n        if (getHostFigure() instanceof WrappingLabel) {\n            ((WrappingLabel) getHostFigure()).setSelected(true);\n            ((WrappingLabel) getHostFigure()).setFocus(true);\n        } else {\n            showSelection();\n            showFocus();\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected void showSelection() {\n        if (getHostFigure() instanceof WrappingLabel) {\n            ((WrappingLabel) getHostFigure()).setSelected(true);\n            ((WrappingLabel) getHostFigure()).setFocus(false);\n        } else {\n            hideSelection();\n            addFeedback(selectionFeedbackFigure = createSelectionFeedbackFigure());\n            getHostFigure().addFigureListener(getHostPositionListener());\n            refreshSelectionFeedback();\n            hideFocus();\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected void hideSelection() {\n        if (getHostFigure() instanceof WrappingLabel) {\n            ((WrappingLabel) getHostFigure()).setSelected(false);\n            ((WrappingLabel) getHostFigure()).setFocus(false);\n<｜fim▁hole｜>                selectionFeedbackFigure = null;\n            }\n            hideFocus();\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected void showFocus() {\n        if (getHostFigure() instanceof WrappingLabel) {\n            ((WrappingLabel) getHostFigure()).setFocus(true);\n        } else {\n            hideFocus();\n            addFeedback(focusFeedbackFigure = createFocusFeedbackFigure());\n            refreshFocusFeedback();\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected void hideFocus() {\n        if (getHostFigure() instanceof WrappingLabel) {\n            ((WrappingLabel) getHostFigure()).setFocus(false);\n        } else {\n            if (focusFeedbackFigure != null) {\n                removeFeedback(focusFeedbackFigure);\n                focusFeedbackFigure = null;\n            }\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected Rectangle getFeedbackBounds() {\n        Rectangle bounds;\n        if (getHostFigure() instanceof Label) {\n            bounds = ((Label) getHostFigure()).getTextBounds();\n            bounds.intersect(getHostFigure().getBounds());\n        } else {\n            bounds = getHostFigure().getBounds().getCopy();\n        }\n        getHostFigure().getParent().translateToAbsolute(bounds);\n        getFeedbackLayer().translateToRelative(bounds);\n        return bounds;\n    }\n\n    /**\n    * @generated\n    */\n    protected IFigure createSelectionFeedbackFigure() {\n        if (getHostFigure() instanceof Label) {\n            Label feedbackFigure = new Label();\n            feedbackFigure.setOpaque(true);\n            feedbackFigure.setBackgroundColor(ColorConstants.menuBackgroundSelected);\n            feedbackFigure.setForegroundColor(ColorConstants.menuForegroundSelected);\n            return feedbackFigure;\n        } else {\n            RectangleFigure feedbackFigure = new RectangleFigure();\n            feedbackFigure.setFill(false);\n            return feedbackFigure;\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected IFigure createFocusFeedbackFigure() {\n        return new Figure() {\n\n            protected void paintFigure(Graphics graphics) {\n                graphics.drawFocus(getBounds().getResized(-1, -1));\n            }\n        };\n    }\n\n    /**\n    * @generated\n    */\n    protected void updateLabel(Label target) {\n        Label source = (Label) getHostFigure();\n        target.setText(source.getText());\n        target.setTextAlignment(source.getTextAlignment());\n        target.setFont(source.getFont());\n    }\n\n    /**\n    * @generated\n    */\n    protected void refreshSelectionFeedback() {\n        if (selectionFeedbackFigure != null) {\n            if (selectionFeedbackFigure instanceof Label) {\n                updateLabel((Label) selectionFeedbackFigure);\n                selectionFeedbackFigure.setBounds(getFeedbackBounds());\n            } else {\n                selectionFeedbackFigure.setBounds(getFeedbackBounds().expand(5, 5));\n            }\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected void refreshFocusFeedback() {\n        if (focusFeedbackFigure != null) {\n            focusFeedbackFigure.setBounds(getFeedbackBounds());\n        }\n    }\n\n    /**\n    * @generated\n    */\n    public void refreshFeedback() {\n        refreshSelectionFeedback();\n        refreshFocusFeedback();\n    }\n\n    /**\n    * @generated\n    */\n    private FigureListener getHostPositionListener() {\n        if (hostPositionListener == null) {\n            hostPositionListener = new FigureListener() {\n                public void figureMoved(IFigure source) {\n                    refreshFeedback();\n                }\n            };\n        }\n        return hostPositionListener;\n    }\n\n    /**\n    * @generated\n    */\n    protected List createSelectionHandles() {\n        MoveHandle moveHandle = new MoveHandle((GraphicalEditPart) getHost());\n        moveHandle.setBorder(null);\n        moveHandle.setDragTracker(new DragEditPartsTrackerEx(getHost()));\n        return Collections.singletonList(moveHandle);\n    }\n\n}<｜fim▁end｜>",
    "response": "        } else {\n            if (selectionFeedbackFigure != null) {\n                removeFeedback(selectionFeedbackFigure);\n                getHostFigure().removeFigureListener(getHostPositionListener());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.clearlyspam23.GLE.basic.layers.tile.gui;\n\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JList;\nimport javax.swing.JScrollPane;\n\nimport com.clearlyspam23.GLE.GUI.SubPanel;\nimport com.clearlyspam23.GLE.GUI.util.VectorComponent;\nimport com.clearlyspam23.GLE.util.Vector2;\nimport javax.swing.JComboBox;\n\npublic class TileLayerGUIOptions extends SubPanel {\n\n    private VectorComponent vectorPanel;\n    public TileLayerGUIOptions() {\n\n        JLabel lblGridWidth = new JLabel(\"Grid Dimensions\");\n        lblGridWidth.setToolTipText(\"The width of the grid for this Tile Layer, in pixel coordinates (or similar)\");\n        lblGridWidth.setBounds(10, 15, 75, 14);\n\n        JList list = new JList();\n        list.setBounds(0, 0, 0, 0);\n\n        JButton btnAdd = new JButton(\"Add\");\n        btnAdd.setBounds(189, 228, 51, 23);\n\n        JLabel lblConstraints = new JLabel(\"Constraints\");\n        lblConstraints.setBounds(10, 77, 55, 14);\n\n        JScrollPane scrollPane = new JScrollPane();\n<｜fim▁hole｜>        btnRemove.setBounds(250, 228, 71, 23);\n\n        JList list_1 = new JList();\n        scrollPane.setViewportView(list_1);\n        setLayout(null);\n        add(lblGridWidth);\n        add(list);\n        add(btnAdd);\n        add(lblConstraints);\n        add(scrollPane);\n        add(btnRemove);\n\n        vectorPanel = new VectorComponent();\n        vectorPanel.setBounds(106, 15, 215, 20);\n        vectorPanel.setXField(16);\n        vectorPanel.setYField(16);\n        add(vectorPanel);\n\n        JComboBox comboBox = new JComboBox();\n        comboBox.setBounds(107, 46, 214, 20);\n        add(comboBox);\n\n        JLabel lblExportFormat = new JLabel(\"Export Format\");\n        lblExportFormat.setBounds(10, 46, 87, 14);\n        add(lblExportFormat);\n    }\n\n    /**\n     * \n     */\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void reset() {\n        vectorPanel.setXField(0);\n        vectorPanel.setYField(0);\n    }\n\n    public Vector2 getGridDimensions(){\n        return vectorPanel.getVector();\n    }\n\n    public void setGridDimensions(Vector2 vec){\n        vectorPanel.setToVector(vec);\n    }\n}<｜fim▁end｜>",
    "response": "        scrollPane.setBounds(107, 75, 214, 142);\n\n        JButton btnRemove = new JButton(\"Remove\");\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package rest.controller;\n\nimport components.AuthHelper;\nimport config.Routes;\nimport core.domain.Account;\nimport core.exceptions.APIException;\nimport core.services.interfaces.AccountServiceInterface;\nimport core.services.interfaces.CustomerServiceInterface;\nimport java.util.List;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpHeaders;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.access.annotation.Secured;\nimport org.springframework.security.oauth2.provider.OAuth2Authentication;\nimport org.springframework.security.web.bind.annotation.AuthenticationPrincipal;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(Routes.ACCOUNTS)\n@Secured(\"ROLE_USER\")\npublic class AccountsController {\n\n    /** AccountServiceInterface instance from Bean on startup*/\n    @Autowired\n    private AccountServiceInterface accountService;\n\n    /** CustomerServiceInterface instance from Bean on startup */\n    @Autowired\n    private CustomerServiceInterface customerService;\n\n    /**\n     * When a user makes a GET request to this URL we want to return a list of\n     * all their accounts.\n     *\n     * @param auth the OAuth Authentication for a user's permissions\n     *\n     * @return All of this user's accounts.\n     */\n    @RequestMapping(method = RequestMethod.GET)\n    public ResponseEntity<List<Account>> getAllAccounts(@AuthenticationPrincipal OAuth2Authentication auth) throws APIException {\n\n        HttpHeaders headers = new HttpHeaders();\n        HttpStatus status = HttpStatus.OK;\n\n        //If the user has read permissions.\n        if (!AuthHelper.CAN_READ_FROM_AUTH(auth)) {\n            throw new APIException(\"No read permissions.\");\n        }\n\n        String customerId = AuthHelper.ID_FROM_AUTH(customerService, auth);\n        List<Account> accounts = accountService.requestAllAccounts(customerId);\n\n        return new ResponseEntity(accounts, headers, status);\n\n    }\n\n    /**\n     * When a user makes a GET request to this URL we want to return the details\n     * of a single customer account.\n     *\n     * @param auth the OAuth Authentication for a user's permissions\n<｜fim▁hole｜>     */\n    @RequestMapping(value = Routes.SINGLE_ACCOUNT, method = RequestMethod.GET)\n    public ResponseEntity<Account> getCustomerAccount(@AuthenticationPrincipal OAuth2Authentication auth,\n            @PathVariable(\"account_number\") String accountNumber) throws APIException {\n\n        HttpHeaders headers = new HttpHeaders();\n        HttpStatus status = HttpStatus.OK;\n\n        //If the user has read permissions.\n        if (!AuthHelper.CAN_READ_FROM_AUTH(auth)) {\n            throw new APIException(\"No read permissions.\");\n        }\n\n        //Get the customer ID from the auth request.\n        String customerId = AuthHelper.ID_FROM_AUTH(customerService, auth);\n        Account account = accountService.requestAccountDetailsFromNumber(accountNumber);\n        String accountCustomerId = account.getCustomerId();\n\n        //Check that the customer owns this account.\n        if (!accountCustomerId.equals(customerId)) {\n            throw new APIException(\"Customer does not own this account.\");\n        }\n\n        return new ResponseEntity(account, headers, status);\n    }\n}<｜fim▁end｜>",
    "response": "     * @param accountNumber the accountNumber that we want to retrieve\n     * @return The Account details as JSON.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.encog.util.normalize.output;\n\nimport org.encog.util.normalize.input.InputField;\n\npublic abstract class OutputFieldGrouped extends BasicOutputField {\n\n    /**\n     * The group that this field is a member of.\n     */\n    private OutputFieldGroup group;\n\n    /**\n     * The source field, this is the input field that provides data\n     * for this output field.\n<｜fim▁hole｜>    /**\n     * Default constructor, used mainly for reflection.\n     */\n    public OutputFieldGrouped() {\n    }\n\n    /**\n     * Construct a grouped output field.\n     * @param group The group that this field belongs to.\n     * @param sourceField The source field for this output field.\n     */\n    public OutputFieldGrouped(final OutputFieldGroup group,\n            final InputField sourceField) {\n        this.group = group;\n        this.sourceField = sourceField;\n        this.group.getGroupedFields().add(this);\n    }\n\n    /**\n     * @return The group that this field belongs to.\n     */\n    public OutputFieldGroup getGroup() {\n        return this.group;\n    }\n\n    /**\n     * @return The source field for this output field.\n     */\n    public InputField getSourceField() {\n        return this.sourceField;\n    }\n\n}<｜fim▁end｜>",
    "response": "     */\n    private InputField sourceField;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.openhab.action.pebble.internal;\n\npublic class PebbleInstance {\n\n    private String name;\n\n    private String token;\n\n    public PebbleInstance(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n<｜fim▁hole｜>        return token;\n    }\n\n    public void setToken(String token) {\n        this.token = token;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof PebbleInstance) {\n            return ((PebbleInstance) obj).getName().equals(getName());\n        }\n\n        return false;\n    }\n\n}<｜fim▁end｜>",
    "response": "        this.name = name;\n    }\n\n    public String getToken() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.astrofizzbizz.pixie;\n\npublic class Pixie \n{\n    /**\n     * @author mcginnis\n     *\n     */\n    private double  compVal = 0.0;\n    private static final int NUMBER_OF_COLORS = 3;\n    private double[]    colorVal  = new double[NUMBER_OF_COLORS];\n    private PixieCoord  coord = null;\n    /**\n     * flag for the composite value\n     */\n    public static final int COMP = -1;\n    /**\n     * g band\n     */\n    public static final int GBAND = 0;\n    /**\n     * r band\n     */\n    public static final int RBAND = 1;\n    /**\n     * i band\n     */\n    public static final int IBAND = 2;\n    /**\n     * \n     */\n    public Pixie()\n<｜fim▁hole｜>     * @param row\n     * @param col\n     * @param val\n     */\n  /**\n     * @param p\n     */\n    public Pixie(Pixie p)\n    {\n        coord = new PixieCoord(p.coord); \n        this.compVal = p.compVal;\n        for (int icolor = 0; icolor < NUMBER_OF_COLORS; ++icolor) \n        {\n            this.colorVal[icolor] = p.colorVal[icolor];\n        }\n    }\n    /**\n     * @param c\n     * @param val\n     */\n    public Pixie(PixieCoord c, double val)\n    {\n        coord = new PixieCoord(c); \n        this.compVal = val;\n        for (int icolor = 0; icolor < NUMBER_OF_COLORS; ++icolor) colorVal[icolor] = 0.0;\n    }\n    /**\n     * @return row\n     */\n    public int getRow()\n    {\n        return coord.getRow();\n    }\n    /**\n     * @return col\n     */\n    public int getCol()\n    {\n        return coord.getCol();\n    }\n    /**\n     * @return Coord\n     */\n    public PixieCoord getCoord()\n    {\n        return coord;\n    }\n    /**\n     * @return value\n     */\n    public double getCompVal()\n    {\n        return compVal;\n    }\n    /**\n     * @param icolor\n     * @return color value;\n     */\n    public double getColorVal(int icolor)\n    {\n        if ((icolor < 0) || (icolor >= NUMBER_OF_COLORS)) return 0.0;\n        return colorVal[icolor];\n    }\n    /**\n     * @param row\n     */\n    public void setRow(int row)\n    {\n        coord.setRow(row);\n    }\n    /**\n     * @param col\n     */\n    public void setCol(int col)\n    {\n        coord.setCol(col);\n    }\n    /**\n     * @param val\n     */\n    public void setCompVal(double val)\n    {\n        this.compVal = val;\n    }\n    /**\n     * @param icolor\n     * @param val\n     */\n    public void setColorVal(int icolor, double val)\n    {\n        if (icolor == COMP) compVal = val; \n        if (icolor == GBAND) colorVal[GBAND] = val; \n        if (icolor == RBAND) colorVal[RBAND] = val; \n        if (icolor == IBAND) colorVal[IBAND] = val; \n    }\n    /**\n     * @return Integer\n     */\n    public String getKey()\n    {\n        return coord.getKey();\n    }\n    /**\n     * @param skey\n     * @return boolean\n     */\n    public boolean checkKey(String skey)\n    {\n        return coord.checkKey(skey);\n    }\n}<｜fim▁end｜>",
    "response": "    {\n        coord = new PixieCoord(); \n        compVal = 0.0;\n        for (int icolor = 0; icolor < NUMBER_OF_COLORS; ++icolor) colorVal[icolor] = 0.0;\n    }\n    /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package flarestar.bdd.annotations;\n\nimport flarestar.bdd.assertions.ValueManipulator;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n<｜fim▁hole｜>@Target(ElementType.METHOD)\npublic @interface ChainableMethod {\n    String flag() default \"\";\n    String value() default \"\";\n    Class<? extends ValueManipulator> manipulator() default ValueManipulator.class;\n}<｜fim▁end｜>",
    "response": "\n@Retention(RetentionPolicy.RUNTIME)\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package pl.jojczykp.bookstore.assemblers;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport pl.jojczykp.bookstore.commands.books.UpdateBookCommand;\nimport pl.jojczykp.bookstore.entities.Book;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.hamcrest.Matchers.nullValue;\nimport static org.hamcrest.core.IsEqual.equalTo;\nimport static org.junit.Assert.assertThat;\n\npublic class UpdateBookAssemblerUnitTest {\n\n    private static final int ID = 67;\n    private static final int VERSION = 48;\n    private static final String TITLE = \"A Title\";\n\n    private UpdateBookAssembler testee;\n\n    @Before\n    public void setUpTestee() {\n        testee = new UpdateBookAssembler();\n    }\n\n    @Test\n    public void shouldAssemblySingleBookDomainObjectFromUpdateBookCommandObject() {\n        UpdateBookCommand command = anUpdateBookCommandWith(ID, VERSION, TITLE);\n\n        Book domain = testee.toDomain(command);\n\n        assertThatHaveEqualData(domain, command);\n    }\n\n    private UpdateBookCommand anUpdateBookCommandWith(int id, int version, String title) {\n        UpdateBookCommand command = new UpdateBookCommand();\n        command.setId(id);\n        command.setVersion(version);\n        command.setTitle(title);\n\n        return command;\n<｜fim▁hole｜>        assertThat(domain.getBookFile(), is(nullValue()));\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    private void assertThatHaveEqualData(Book domain, UpdateBookCommand command) {\n        assertThat(domain.getId(), equalTo(command.getId()));\n        assertThat(domain.getVersion(), equalTo(command.getVersion()));\n        assertThat(domain.getTitle(), equalTo(command.getTitle()));\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package edu.isi.karma.mapreduce.inputformat;\n\nimport java.io.IOException;\n\nimport org.apache.hadoop.classification.InterfaceAudience;\nimport org.apache.hadoop.classification.InterfaceStability;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.InputSplit;\nimport org.apache.hadoop.mapreduce.RecordReader;\nimport org.apache.hadoop.mapreduce.TaskAttemptContext;\nimport org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;\n\n@InterfaceAudience.Public\n@InterfaceStability.Stable\npublic class SequenceFileAsJSONInputBatchFormat\n  extends SequenceFileInputFormat<Text, Text> {\n\n<｜fim▁hole｜>    super();\n  }\n\n  public RecordReader<Text, Text> createRecordReader(InputSplit split,\n      TaskAttemptContext context) throws IOException {\n    context.setStatus(split.toString());\n    return new SequenceFileAsJSONRecordBatchReader();\n  }\n}<｜fim▁end｜>",
    "response": "  public SequenceFileAsJSONInputBatchFormat() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.sun.org.omg.CORBA;\n\npublic final class AttributeModeHelper\n{\n    private static String  _id = \"IDL:omg.org/CORBA/AttributeMode:1.0\";\n\n    public AttributeModeHelper()\n    {\n    }\n\n    public static void insert (org.omg.CORBA.Any a, com.sun.org.omg.CORBA.AttributeMode that)\n    {\n        org.omg.CORBA.portable.OutputStream out = a.create_output_stream ();\n        a.type (type ());\n        write (out, that);\n        a.read_value (out.create_input_stream (), type ());\n    }\n\n<｜fim▁hole｜>\n    private static org.omg.CORBA.TypeCode __typeCode = null;\n    synchronized public static org.omg.CORBA.TypeCode type ()\n    {\n        if (__typeCode == null)\n            {\n                __typeCode = org.omg.CORBA.ORB.init ().create_enum_tc (com.sun.org.omg.CORBA.AttributeModeHelper.id (), \"AttributeMode\", new String[] { \"ATTR_NORMAL\", \"ATTR_READONLY\"} );\n            }\n        return __typeCode;\n    }\n\n    public static String id ()\n    {\n        return _id;\n    }\n\n    public static com.sun.org.omg.CORBA.AttributeMode read (org.omg.CORBA.portable.InputStream istream)\n    {\n        return com.sun.org.omg.CORBA.AttributeMode.from_int (istream.read_long ());\n    }\n\n    public static void write (org.omg.CORBA.portable.OutputStream ostream, com.sun.org.omg.CORBA.AttributeMode value)\n    {\n        ostream.write_long (value.value ());\n    }\n\n}<｜fim▁end｜>",
    "response": "    public static com.sun.org.omg.CORBA.AttributeMode extract (org.omg.CORBA.Any a)\n    {\n        return read (a.create_input_stream ());\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.calcite.rel.metadata;\n\nimport org.apache.calcite.plan.hep.HepRelVertex;\nimport org.apache.calcite.plan.volcano.RelSubset;\nimport org.apache.calcite.rel.RelNode;\nimport org.apache.calcite.rel.core.Aggregate;\nimport org.apache.calcite.rel.core.Calc;\nimport org.apache.calcite.rel.core.Filter;\nimport org.apache.calcite.rel.core.Intersect;\nimport org.apache.calcite.rel.core.Join;\nimport org.apache.calcite.rel.core.Minus;\nimport org.apache.calcite.rel.core.Project;\nimport org.apache.calcite.rel.core.SemiJoin;\nimport org.apache.calcite.rel.core.Sort;\nimport org.apache.calcite.rel.core.TableScan;\nimport org.apache.calcite.rel.core.Union;\nimport org.apache.calcite.rel.core.Values;\nimport org.apache.calcite.util.BuiltInMethod;\nimport org.apache.calcite.util.Util;\n\nimport com.google.common.collect.ArrayListMultimap;\nimport com.google.common.collect.Multimap;\n\npublic class RelMdNodeTypes\n    implements MetadataHandler<BuiltInMetadata.NodeTypes> {\n  public static final RelMetadataProvider SOURCE =\n      ReflectiveRelMetadataProvider.reflectiveSource(\n          BuiltInMethod.NODE_TYPES.method, new RelMdNodeTypes());\n\n  //~ Methods ----------------------------------------------------------------\n\n  public MetadataDef<BuiltInMetadata.NodeTypes> getDef() {\n    return BuiltInMetadata.NodeTypes.DEF;\n  }\n\n  /** Catch-all implementation for\n   * {@link BuiltInMetadata.NodeTypes#getNodeTypes()},\n   * invoked using reflection.\n   *\n   * @see org.apache.calcite.rel.metadata.RelMetadataQuery#getNodeTypes(RelNode)\n   */\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(RelNode rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, RelNode.class, mq);\n  }\n<｜fim▁hole｜>      RelMetadataQuery mq) {\n    return mq.getNodeTypes(rel.getCurrentRel());\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(RelSubset rel,\n      RelMetadataQuery mq) {\n    return mq.getNodeTypes(Util.first(rel.getBest(), rel.getOriginal()));\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(Union rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, Union.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(Intersect rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, Intersect.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(Minus rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, Minus.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(Filter rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, Filter.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(Calc rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, Calc.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(Project rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, Project.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(Sort rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, Sort.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(Join rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, Join.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(SemiJoin rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, SemiJoin.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(Aggregate rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, Aggregate.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(TableScan rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, TableScan.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(Values rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, Values.class, mq);\n  }\n\n  private static Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(RelNode rel,\n      Class<? extends RelNode> c, RelMetadataQuery mq) {\n    final Multimap<Class<? extends RelNode>, RelNode> nodeTypeCount = ArrayListMultimap.create();\n    for (RelNode input : rel.getInputs()) {\n      Multimap<Class<? extends RelNode>, RelNode> partialNodeTypeCount =\n          mq.getNodeTypes(input);\n      if (partialNodeTypeCount == null) {\n        return null;\n      }\n      nodeTypeCount.putAll(partialNodeTypeCount);\n    }\n    nodeTypeCount.put(c, rel);\n    return nodeTypeCount;\n  }\n\n}<｜fim▁end｜>",
    "response": "\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(HepRelVertex rel,\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.bcel.generic;\n\n<｜fim▁hole｜>     * \n     */\n    private static final long serialVersionUID = 9184663422046843885L;\n\npublic LUSHR() {\n    super(org.apache.bcel.Constants.LUSHR);\n  }\n\n  /**\n   * Call corresponding visitor method(s). The order is:\n   * Call visitor methods of implemented interfaces first, then\n   * call methods according to the class hierarchy in descending order,\n   * i.e., the most specific visitXXX() call comes last.\n   *\n   * @param v Visitor object\n   */\n  public void accept(Visitor v) {\n    v.visitTypedInstruction(this);\n    v.visitStackProducer(this);\n    v.visitStackConsumer(this);\n    v.visitArithmeticInstruction(this);\n    v.visitLUSHR(this);\n  }\n}<｜fim▁end｜>",
    "response": "public class LUSHR extends ArithmeticInstruction {\n  /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.samples.apps.ourstreets.model;\n\nimport android.os.Parcel;\nimport android.os.Parcelable;\nimport androidx.annotation.NonNull;\n\nimport com.google.android.gms.maps.model.LatLng;\nimport com.google.maps.android.clustering.ClusterItem;\n\npublic class Detail implements Parcelable, ClusterItem {\n<｜fim▁hole｜>\n    public Detail(String title, String description, LatLng location, float tilt, float bearing) {\n        mTitle = title;\n        mDescription = description;\n        mLocation = location;\n        mTilt = tilt;\n        mBearing = bearing;\n    }\n\n    @Override\n    public LatLng getPosition() {\n        return mLocation;\n    }\n\n    public String getDescription() {\n        return mDescription;\n    }\n\n    public String getTitle() {\n        return mTitle;\n    }\n\n    public float getTilt() {\n        return mTilt;\n    }\n\n    public float getBearing() {\n        return mBearing;\n    }\n\n    protected Detail(Parcel in) {\n        mTitle = in.readString();\n        mDescription = in.readString();\n        mLocation = in.readParcelable(Detail.class.getClassLoader());\n        mTilt = in.readFloat();\n        mBearing = in.readFloat();\n    }\n\n    @Override\n    public int describeContents() {\n        return 0;\n    }\n\n    @Override\n    public void writeToParcel(@NonNull Parcel dest, int flags) {\n        dest.writeString(mTitle);\n        dest.writeString(mDescription);\n        dest.writeParcelable(mLocation, flags);\n        dest.writeFloat(mTilt);\n        dest.writeFloat(mBearing);\n    }\n\n    public static final Creator<Detail> CREATOR = new\n            Creator<Detail>() {\n                @Override\n                public Detail createFromParcel(Parcel in) {\n                    return new Detail(in);\n                }\n\n                @Override\n                public Detail[] newArray(int size) {\n                    return new Detail[size];\n                }\n            };\n}<｜fim▁end｜>",
    "response": "\n    private final String mTitle;\n    private final String mDescription;\n    private final LatLng mLocation;\n    private final float mTilt;\n    private final float mBearing;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package spittr.web;\n\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.Size;\n\nimport org.hibernate.validator.constraints.Email;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport spittr.Spitter;\n\npublic class SpitterForm {\n\n  @NotNull\n  @Size(min=5, max=16, message=\"{username.size}\")\n  private String username;\n\n  @NotNull\n  @Size(min=5, max=25, message=\"{password.size}\")\n  private String password;\n\n  @NotNull\n  @Size(min=2, max=30, message=\"{firstName.size}\")\n  private String firstName;\n\n  @NotNull\n  @Size(min=2, max=30, message=\"{lastName.size}\")\n  private String lastName;\n\n  @NotNull\n  @Email\n  private String email;\n\n  private MultipartFile profilePicture;\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public String getPassword() {\n    return password;\n  }\n\n  public void setPassword(String password) {\n    this.password = password;\n  }\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n  public String getLastName() {\n    return lastName;\n  }\n\n  public void setLastName(String lastName) {\n    this.lastName = lastName;\n  }\n\n  public String getEmail() {\n    return email;\n  }\n\n  public void setEmail(String email) {\n    this.email = email;\n<｜fim▁hole｜>\n  public void setProfilePicture(MultipartFile profilePicture) {\n    this.profilePicture = profilePicture;\n  }\n\n  public Spitter toSpitter() {\n    return new Spitter(username, password, firstName, lastName, email);\n  }\n\n}<｜fim▁end｜>",
    "response": "  }\n\n  public MultipartFile getProfilePicture() {\n    return profilePicture;\n  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.sldeditor.ui.attribute;\n\npublic class AttributeUtils {\n\n    /** The Constant ATTRIBUTE_START. */\n    private static final String ATTRIBUTE_START = \"<ogc:PropertyName>\";\n\n    /** The Constant ATTRIBUTE_END. */\n    private static final String ATTRIBUTE_END = \"</ogc:PropertyName>\";\n\n    /** Private default constructor */\n    private AttributeUtils() {\n        // Private default constructor\n<｜fim▁hole｜>     * @return true, if is attribute\n     */\n    public static boolean isAttribute(Object objValue) {\n        if (objValue instanceof String) {\n            String stringValue = (String) objValue;\n            if (stringValue.startsWith(ATTRIBUTE_START) && stringValue.endsWith(ATTRIBUTE_END)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Extract attribute name from string.\n     *\n     * @param value the value\n     * @return the string\n     */\n    public static String extract(String value) {\n        String extractedValue = value;\n\n        if (isAttribute(value)) {\n            extractedValue =\n                    value.substring(\n                            ATTRIBUTE_START.length(), value.length() - ATTRIBUTE_END.length());\n        }\n        return extractedValue;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    /**\n     * Checks if string is actually an attribute.\n     *\n     * @param objValue the obj value\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.bazaar.web;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Type;\n\nimport javax.json.Json;\nimport javax.json.JsonObject;\nimport javax.ws.rs.WebApplicationException;\nimport javax.ws.rs.core.MediaType;\nimport javax.ws.rs.core.MultivaluedMap;\nimport javax.ws.rs.ext.MessageBodyReader;\n\nimport org.apache.bazaar.version.Version;\n\npublic final class VersionMessageBodyReaderImpl implements MessageBodyReader<Version> {\n\n    // declare members\n\n    // declare constructors\n\n    /**\n<｜fim▁hole｜>    // declare methods\n\n    /*\n     * (non-Javadoc)\n     * @see javax.ws.rs.ext.MessageBodyReader#isReadable(java.lang.Class,\n     * java.lang.reflect.Type, java.lang.annotation.Annotation[],\n     * javax.ws.rs.core.MediaType)\n     */\n    @Override\n    public boolean isReadable(final Class<?> clazz, final Type type, final Annotation[] annotations,\n            final MediaType mediaType) {\n        boolean readable = false;\n        if (MediaType.APPLICATION_JSON_TYPE.equals(mediaType) && Version.class.isAssignableFrom(clazz)) {\n            readable = true;\n        }\n        return readable;\n    }\n\n    /*\n     * (non-Javadoc)\n     * @see javax.ws.rs.ext.MessageBodyReader#readFrom(java.lang.Class,\n     * java.lang.reflect.Type, java.lang.annotation.Annotation[],\n     * javax.ws.rs.core.MediaType, javax.ws.rs.core.MultivaluedMap,\n     * java.io.InputStream)\n     */\n    @Override\n    public Version readFrom(final Class<Version> clazz, final Type type, final Annotation[] annotations,\n            final MediaType mediaType, final MultivaluedMap<String, String> map, final InputStream inputStream)\n            throws IOException, WebApplicationException {\n        final Version version;\n        try (final BufferedReader reader = new BufferedReader(\n                new InputStreamReader(inputStream, org.apache.bazaar.config.Configuration.DEFAULT_ENCODING))) {\n            final JsonObject jsonObject = Json.createReader(reader).readObject().getJsonObject(JsonKeys.ITEM);\n            version = new VersionJsonReaderImpl().read(jsonObject);\n        }\n        return version;\n    }\n\n}<｜fim▁end｜>",
    "response": "     * Constructor for VersionMessageBodyReaderImpl\n     */\n    public VersionMessageBodyReaderImpl() {\n        super();\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package jpaoletti.jpm.core;\n\npublic interface OperationContext {\n\n    /**This method is executed at the very beginning of the process, before\n     * converterting or replace any data on objects.\n     * @param ctx The context\n     * @throws PMException\n     */\n    public void preConversion(PMContext ctx) throws PMException;\n\n    /**This method is executed before trying to execute the main method of the operation, that is\n     * before opening any transaction. \n     * @param ctx The context\n<｜fim▁hole｜>\n    /**This method is executed after the main method of the operation.\n     * @param ctx The context\n     * @throws PMException\n     */\n    public void postExecute(PMContext ctx) throws PMException;\n}<｜fim▁end｜>",
    "response": "     * @throws PMException\n     */\n    public void preExecute(PMContext ctx) throws PMException;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package by.orion.onlinertasks.data.datasource.profiles.remote;\n\nimport android.support.annotation.NonNull;\n\nimport javax.inject.Inject;\n\nimport by.orion.onlinertasks.common.network.services.BaseService;\nimport by.orion.onlinertasks.data.datasource.profiles.ProfilesDataSource;\nimport by.orion.onlinertasks.data.models.common.requests.ProfilesRequestParams;\nimport by.orion.onlinertasks.data.models.profile.ProfilesPage;\nimport io.reactivex.Completable;\nimport io.reactivex.Single;\n\npublic class RemoteProfilesDataSource implements ProfilesDataSource {\n\n    @NonNull\n    private final BaseService service;\n\n    @Inject\n    public RemoteProfilesDataSource(@NonNull BaseService service) {\n        this.service = service;\n    }\n\n    @Override\n    public Single getValue(@NonNull Object key) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Completable setValue(@NonNull Object key, @NonNull Object value) {\n<｜fim▁hole｜>    }\n\n    @Override\n    public Single<ProfilesPage> getAllProfiles(@NonNull ProfilesRequestParams params) {\n        return service.getAllProfiles(params.page());\n    }\n}<｜fim▁end｜>",
    "response": "        throw new UnsupportedOperationException();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jbpm.executor.ejb.impl.jpa;\n\nimport org.jbpm.executor.impl.jpa.JPAExecutorStoreService;\nimport org.kie.api.executor.ExecutorStoreService;\nimport org.kie.api.runtime.CommandExecutor;\n\nimport javax.ejb.EJB;\nimport javax.ejb.Stateless;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.PersistenceUnit;\n\n@Stateless\npublic class JPAExecutorStoreServiceEJBImpl extends JPAExecutorStoreService implements ExecutorStoreService {\n\n    public JPAExecutorStoreServiceEJBImpl() {\n        super(true);\n    }\n<｜fim▁hole｜>    public void setCommandService(CommandExecutor commandService ) {\n        super.setCommandService(commandService);\n    }\n\n    @PersistenceUnit(unitName=\"org.jbpm.domain\")\n    @Override\n    public void setEmf(EntityManagerFactory emf) {\n        super.setEmf(emf);\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    @EJB(beanInterface=TransactionalCommandServiceExecutorEJBImpl.class)\n    @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.redcanari.js.proxies;\n\n<｜fim▁hole｜>public class ExtensionStateListenerJSProxy extends JSProxy implements IExtensionStateListener {\n\n    public ExtensionStateListenerJSProxy(JSObject jsObject) {\n        super(jsObject);\n    }\n\n    @Override\n    public void extensionUnloaded() {\n        call(\"extensionUnloaded\");\n    }\n}<｜fim▁end｜>",
    "response": "import burp.IExtensionStateListener;\nimport netscape.javascript.JSObject;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package datos.pojos.adminuc;\n\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class PersonasJuridicas implements java.io.Serializable {\n\n    private String personId;\n    private Personas personas;\n    private String dedpjuId;\n    private String descripcion;\n    private short anioInicio;\n    private String estaactivo;\n    private String creado;\n    private Date fechaCreacion;\n    private String actualizado;\n    private Date fechaActualizacion;\n    /*Otro*/\n    private boolean _selected = false;\n    private boolean _guardado = false;\n    private boolean _delete = false;\n\n    public PersonasJuridicas() {\n    }\n\n    public String getPersonId() {\n        return this.personId;\n    }\n\n    public void setPersonId(String personId) {\n        this.personId = personId;\n    }\n\n    public Personas getPersonas() {\n        return this.personas;\n    }\n\n    public void setPersonas(Personas personas) {\n        this.personas = personas;\n    }\n\n    public String getDedpjuId() {\n        return this.dedpjuId;\n    }\n\n    public void setDedpjuId(String dedpjuId) {\n        this.dedpjuId = dedpjuId;\n    }\n\n    public String getDescripcion() {\n        return this.descripcion;\n    }\n\n    public void setDescripcion(String descripcion) {\n        this.descripcion = descripcion;\n    }\n\n    public short getAnioInicio() {\n        return this.anioInicio;\n    }\n\n    public void setAnioInicio(short anioInicio) {\n        this.anioInicio = anioInicio;\n    }\n\n    public String getEstaactivo() {\n        return this.estaactivo;\n    }\n\n    public void setEstaactivo(String estaactivo) {\n        this.estaactivo = estaactivo;\n    }\n\n    public String getCreado() {\n        return this.creado;\n    }\n\n    public void setCreado(String creado) {\n        this.creado = creado;\n    }\n\n    public Date getFechaCreacion() {\n        return this.fechaCreacion;\n    }\n\n    public void setFechaCreacion(Date fechaCreacion) {\n        this.fechaCreacion = fechaCreacion;\n    }\n\n    public String getActualizado() {\n        return this.actualizado;\n    }\n\n    public void setActualizado(String actualizado) {\n        this.actualizado = actualizado;\n    }\n<｜fim▁hole｜>    public void setFechaActualizacion(Date fechaActualizacion) {\n        this.fechaActualizacion = fechaActualizacion;\n    }\n\n    /**\n     * public String getCampo()throws NoSuchMethodException,\n     * IllegalAccessException, IllegalArgumentException,\n     * InvocationTargetException { Method getDescripcion =\n     * this.getClass().getMethod(\"get\" + campo, new Class[0]); String\n     * descripcion = (String) getDescripcion.invoke(this, new Object[0]); return\n     * descripcion; }\n     *\n     * public void setCampo(String campo) { this.campo = campo;\n    }\n     */\n    public String toString() {\n        return this.descripcion;\n\n    }\n\n    public boolean isSelected() {\n        return _selected;\n    }\n\n    public void setSelected(boolean _selected) {\n        this._selected = _selected;\n    }\n\n    public boolean isGuardado() {\n        return _guardado;\n    }\n\n    public void setGuardado(boolean _guardado) {\n        this._guardado = _guardado;\n    }\n\n    public boolean isDelete() {\n        return _delete;\n    }\n\n    public void setDelete(boolean _delete) {\n        this._delete = _delete;\n    }\n}<｜fim▁end｜>",
    "response": "\n    public Date getFechaActualizacion() {\n        return this.fechaActualizacion;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>\nimport org.springframework.boot.builder.SpringApplicationBuilder;\nimport org.springframework.boot.context.web.SpringBootServletInitializer;\n\npublic class ServletInitializer extends SpringBootServletInitializer {\n\n    @Override\n    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n        return application.sources(Application.class);\n    }\n\n}<｜fim▁end｜>",
    "response": "package serversidewebapp;\n\nimport javax.faces.application.Application;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package commands.strategies;\n\npublic class SpecificIntegerConfigurationStrategy extends IntegerConfigurationStrategy {\n    /**\n     * @param value\n<｜fim▁hole｜>     */\n    public SpecificIntegerConfigurationStrategy(int value){\n        super(\"\");\n        this.value = value;     \n    }\n    public SpecificIntegerConfigurationStrategy(int value, String a2m){\n        super(value, a2m);\n    }\n}<｜fim▁end｜>",
    "response": "     * Normal constructor\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package japicmp.filter;\n\nimport javassist.CtBehavior;\nimport javassist.CtClass;\nimport javassist.CtField;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class Filters {\n    private static final Logger LOGGER = Logger.getLogger(Filters.class.getName());\n    private final List<Filter> includes = new ArrayList<>();\n    private final List<Filter> excludes = new ArrayList<>();\n\n    public List<Filter> getIncludes() {\n        return includes;\n    }\n\n    public List<Filter> getExcludes() {\n        return excludes;\n    }\n\n    public boolean includeClass(CtClass ctClass) {\n        String name = ctClass.getName();\n        for (Filter filter : excludes) {\n            if (filter instanceof ClassFilter || filter instanceof PackageFilter) {\n                if (filter.matches(ctClass)) {\n                    if (LOGGER.isLoggable(Level.FINE)) {\n                        LOGGER.log(Level.FINE, \"Excluding class '\" + name + \"' because class filter '\" + filter + \"' matches.\");\n                    }\n                    return false;\n                }\n            }\n        }\n        int includeCount = 0;\n        for (Filter filter : includes) {\n            includeCount++;\n            if (filter.matches(ctClass)) {\n                if (LOGGER.isLoggable(Level.FINE)) {\n                    LOGGER.log(Level.FINE, \"Including class '\" + name + \"' because class filter '\" + filter + \"' matches.\");\n                }\n                return true;\n            }\n        }\n        if (includeCount > 0) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.log(Level.FINE, \"Excluding class '\" + name + \"' because no include matched.\");\n            }\n            return false;\n        }\n        return true;\n    }\n\n    public boolean includeBehavior(CtBehavior ctMethod) {\n        for (Filter filter : excludes) {\n            if (filter instanceof BehaviorFilter) {\n                if (filter.matches(ctMethod)) {\n                    if (LOGGER.isLoggable(Level.FINE)) {\n                        LOGGER.log(Level.FINE, \"Excluding method '\" + ctMethod.getLongName() + \"' because exclude method filter did match.\");\n                    }\n                    return false;\n                }\n            }\n        }\n        int includesCount = 0;\n        for (Filter filter : includes) {\n            includesCount++;\n            if (filter.matches(ctMethod)) {\n                if (LOGGER.isLoggable(Level.FINE)) {\n<｜fim▁hole｜>                }\n                return true;\n            }\n        }\n        if (includesCount > 0) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.log(Level.FINE, \"Excluding method '\" + ctMethod.getLongName() + \"' because no include matched.\");\n            }\n            return false;\n        }\n        return true;\n    }\n\n    public boolean includeField(CtField ctField) {\n        for (Filter filter : excludes) {\n            if (filter instanceof FieldFilter) {\n                if (filter.matches(ctField)) {\n                    if (LOGGER.isLoggable(Level.FINE)) {\n                        LOGGER.log(Level.FINE, \"Excluding field '\" + ctField.getName() + \"' because exclude field filter did match.\");\n                    }\n                    return false;\n                }\n            }\n        }\n        int includesCount = 0;\n        for (Filter filter : includes) {\n            includesCount++;\n            if (filter.matches(ctField)) {\n                if (LOGGER.isLoggable(Level.FINE)) {\n                    LOGGER.log(Level.FINE, \"Including field '\" + ctField.getName() + \"' because include field filter matched.\");\n                }\n                return true;\n            }\n        }\n        if (includesCount > 0) {\n            if (LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.log(Level.FINE, \"Excluding field '\" + ctField.getName() + \"' because no include matched.\");\n            }\n            return false;\n        }\n        return true;\n    }\n}<｜fim▁end｜>",
    "response": "                    LOGGER.log(Level.FINE, \"Including method '\" + ctMethod.getLongName() + \"' because include method filter matched.\");\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package de.cismet.cismap.commons.featureservice.style;\n\nimport javax.swing.DefaultComboBoxModel;\nimport javax.swing.JComboBox;\n\npublic class OperatorComboBox extends JComboBox {\n\n    //~ Instance fields --------------------------------------------------------\n\n    String[] arr = {\n            org.openide.util.NbBundle.getMessage(OperatorComboBox.class, \"OperatorComboBox.arr.lessThan\"),           // NOI18N\n            org.openide.util.NbBundle.getMessage(OperatorComboBox.class, \"OperatorComboBox.arr.lessThanOrEqual\"),    // NOI18N\n            org.openide.util.NbBundle.getMessage(OperatorComboBox.class, \"OperatorComboBox.arr.equal\"),              // NOI18N\n            org.openide.util.NbBundle.getMessage(OperatorComboBox.class, \"OperatorComboBox.arr.notEqual\"),           // NOI18N\n            org.openide.util.NbBundle.getMessage(OperatorComboBox.class, \"OperatorComboBox.arr.greaterThanOrEqual\"), // NOI18N\n            org.openide.util.NbBundle.getMessage(OperatorComboBox.class, \"OperatorComboBox.arr.greaterThan\"),        // NOI18N\n            org.openide.util.NbBundle.getMessage(OperatorComboBox.class, \"OperatorComboBox.arr.contains\"),           // NOI18N\n            org.openide.util.NbBundle.getMessage(OperatorComboBox.class, \"OperatorComboBox.arr.isLike\")\n<｜fim▁hole｜>\n    //~ Constructors -----------------------------------------------------------\n\n    /**\n     * Creates a new OperatorComboBox object.\n     */\n    public OperatorComboBox() {\n        super();\n        super.setModel(new DefaultComboBoxModel(arr));\n    }\n}<｜fim▁end｜>",
    "response": "        };                                                                                                           // NOI18N\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.michaelvescovo.android.itemreaper.settings;\n\nimport android.graphics.Typeface;\n<｜fim▁hole｜>\nimport com.michaelvescovo.android.itemreaper.R;\n\nimport butterknife.BindView;\nimport butterknife.ButterKnife;\n\npublic class SettingsActivity extends AppCompatActivity {\n\n    @BindView(R.id.toolbar)\n    Toolbar mToolbar;\n    @BindView(R.id.appbar_title)\n    TextView mAppbarTitle;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_settings);\n        ButterKnife.bind(this);\n        setSupportActionBar(mToolbar);\n        ActionBar actionBar = getSupportActionBar();\n        if (actionBar != null) {\n            actionBar.setDisplayHomeAsUpEnabled(true);\n            actionBar.setDisplayShowTitleEnabled(false);\n        }\n        Typeface appbarTitle = Typeface.createFromAsset(getAssets(), \"Nosifer-Regular.ttf\");\n        mAppbarTitle.setTypeface(appbarTitle);\n\n        getFragmentManager().beginTransaction()\n                .replace(R.id.contentFrame, new SettingsFragment())\n                .commit();\n    }\n}<｜fim▁end｜>",
    "response": "import android.os.Bundle;\nimport android.support.v7.app.ActionBar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.widget.TextView;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.github.windbender.chpcadscraper;\n\nimport java.io.File;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\nimport org.apache.commons.cli.BasicParser;\nimport org.apache.commons.cli.CommandLine;\nimport org.apache.commons.cli.CommandLineParser;\nimport org.apache.commons.cli.Options;\nimport org.apache.commons.cli.ParseException;\nimport org.geojson.Feature;\nimport org.joda.time.DateTime;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class RunIt {\n\n    static Logger logger = LoggerFactory.getLogger(RunIt.class);\n    static boolean keeprunning = true;\n    static Thread t;\n    private static Thread curt;\n    private static int lastNwsHash;\n    private static long lastRun;\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n        AlertListener email = null;\n        try {\n            CommandLine cmd = null;\n            try {\n                Options options = new Options();\n                options.addOption(\"t\", true, \"to email\");\n                options.addOption(\"f\", true, \"from email\");\n                options.addOption(\"k\", true, \"kml file\");\n                options.addOption(\"r\", true, \"region - 4 letter code\");\n                options.addOption(\"u\", true, \"SMTP username\");\n                options.addOption(\"p\", true, \"SMTP password\");\n                options.addOption(\"h\", true, \"SMTP host\");\n                CommandLineParser parser = new BasicParser();\n                cmd = parser.parse(options, args);\n            } catch (ParseException e1) {\n                logger.error(\"can't read CLI params \", e1);\n                return;\n            }\n            String fs = cmd.getOptionValue(\"k\");\n            File f = null;\n            if (fs == null) {\n                f = new File(\"/Users/chris/Desktop/TestArea.kml\");\n            } else {\n                f = new File(fs);\n            }\n\n            String r = cmd.getOptionValue(\"r\");\n            if (r == null) {\n                r = \"GGCC\";\n            }\n\n            String from = cmd.getOptionValue(\"f\");\n            String to = cmd.getOptionValue(\"t\");\n            CompoundAlertListener alerters = new CompoundAlertListener();\n\n            AlertListener print = new PrintAlertListener();\n            alerters.add(print);\n            String smtpHost = cmd.getOptionValue(\"h\");\n            String username = cmd.getOptionValue(\"u\");\n            String password = cmd.getOptionValue(\"p\");\n\n            if (smtpHost != null) {\n                email = new EmailAlertListener(from, to, smtpHost, username, password);\n                alerters.add(email);\n            }\n            LocationFilter lef = new LocationFilter();\n            lef.loadFromKML(f);\n\n            // Start the CAD Scraper\n            int period = 1000 * 60;\n            final ChpCadScraper ccs = new ChpCadScraper(r, period, alerters);\n            ccs.setDetailFilter(lef);\n            t = new Thread(ccs);\n            t.setName(\"cad scraper\");\n            t.start();\n            logger.info(\"emails will be \" + to);\n            logger.info(\"file will be \" + fs);\n            logger.info(\"scraper is started!\");\n            List<CHPEvent> state = new ArrayList<CHPEvent>();\n            curt = Thread.currentThread();\n\n            // Start the NEW scraper\n    // colorado\n    //      final NWSScrapper nwss = new NWSScrapper(\"COZ205\");\n            // north bay mountains\n            final NWSScrapper nwss = new NWSScrapper(\"CAZ507\");\n\n            Runtime.getRuntime().addShutdownHook(new Thread() {\n                @Override\n                public void run() {\n                    logger.info(\"I got a signal to stop!\");\n                    ccs.stop();\n                    t.interrupt();\n                    this.interrupt();\n                    curt.interrupt();\n                    keeprunning = false;\n                }\n            });\n\n            while (keeprunning) {\n                try {\n                    try {\n                        Thread.sleep(1000 * 60);\n                    } catch (InterruptedException e) {\n                    }\n                    List<CHPEvent> l = ccs.returnFiltered(lef);\n                    doCadChpDiff(l, state, alerters);\n                    doNwsDiff(nwss.scrape(), alerters);\n                    state = l;\n                } catch(Exception e) {\n                    logger.error(\"main run thread exception caught and ignored\",e);\n                }\n            }\n        }\n        catch(Exception e) {\n            if(email!=null) {\n                email.emailAdmin(\"TOP LEVEL EXCEPTION, will stop \"+e.getMessage());\n            }\n        }\n    }\n\n    private static Map<String, Feature> lastFeatures = new HashMap();\n<｜fim▁hole｜>        List<String> addedList = new ArrayList<String>();\n        Set<String> added = new HashSet(features.keySet());\n        features.remove(\"sent\");\n        Set<String> b = new HashSet(lastFeatures.keySet());\n        added.removeAll(b);\n\n        Set<String> a = new HashSet(features.keySet());\n        a.remove(\"sent\");\n        Set<String> removed = new HashSet(lastFeatures.keySet());\n        removed.removeAll(a);\n\n        added.stream().forEach(s-> {\n            alerters.alertNws(features.get(s));\n        });\n\n        removed.stream().forEach(s-> {\n            alerters.alertNwsRemoved(lastFeatures.get(s));\n        });\n\n        lastFeatures = features;\n        lastFeatures.remove(\"sent\");\n    }\n\n    private static void doCadChpDiff(List<CHPEvent> newlist, List<CHPEvent> currentList, AlertListener alerter) {\n        if(newlist == null) return;\n        if(currentList == null) return;\n\n        List<CHPEvent> addedList = new ArrayList<CHPEvent>();\n        {\n            Set<EventKey> current = new HashSet<EventKey>();\n\n            Set<EventKey> newset = new HashSet<EventKey>();\n            for(CHPEvent ce: currentList) {\n                current.add(ce.ev);\n            }\n            for(CHPEvent ce: newlist) {\n                newset.add(ce.ev);\n            }\n            // find new events\n            newset.removeAll(current);\n            for(CHPEvent ce: newlist) {\n                if(newset.contains(ce.ev)) {\n                    addedList.add(ce);\n                }\n            }\n        }\n        // find removed events\n        List<CHPEvent> removedList = new ArrayList<CHPEvent>();\n        {\n            Set<EventKey> current = new HashSet<EventKey>();\n            Set<EventKey> newset = new HashSet<EventKey>();\n            for(CHPEvent ce: currentList) {\n                current.add(ce.ev);\n            }\n            for(CHPEvent ce: newlist) {\n                newset.add(ce.ev);\n            }\n            // find new events\n            current.removeAll(newset);\n            for(CHPEvent ce: currentList) {\n                if(current.contains(ce.ev)) {\n                    removedList.add(ce);\n                }\n            }\n        }\n\n        DateTime dt = new DateTime();\n        if(addedList.size()> 0)\n            alerter.alertAdded(addedList);\n        if(removedList.size() > 0)\n            alerter.alertGone(removedList);\n\n    }\n\n}<｜fim▁end｜>",
    "response": "    private static void doNwsDiff(Map<String,Feature> features, CompoundAlertListener alerters) {\n\n        // find the id's that are new\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.minecraft.nbt;\n\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\nimport net.minecraft.nbt.NBTBase;\nimport net.minecraft.nbt.NBTSizeTracker;\n\npublic class NBTTagByte extends NBTBase.NBTPrimitive {\n\n   private byte field_74756_a;\n   private static final String __OBFID = \"CL_00001214\";\n\n   NBTTagByte() {}\n\n   public NBTTagByte(byte p_i45129_1_) {\n      this.field_74756_a = p_i45129_1_;\n   }\n\n   void func_74734_a(DataOutput p_74734_1_) throws IOException {\n      p_74734_1_.writeByte(this.field_74756_a);\n   }\n<｜fim▁hole｜>      p_152446_3_.func_152450_a(8L);\n      this.field_74756_a = p_152446_1_.readByte();\n   }\n\n   public byte func_74732_a() {\n      return (byte)1;\n   }\n\n   public String toString() {\n      return \"\" + this.field_74756_a + \"b\";\n   }\n\n   public NBTBase func_74737_b() {\n      return new NBTTagByte(this.field_74756_a);\n   }\n\n   public boolean equals(Object p_equals_1_) {\n      if(super.equals(p_equals_1_)) {\n         NBTTagByte var2 = (NBTTagByte)p_equals_1_;\n         return this.field_74756_a == var2.field_74756_a;\n      } else {\n         return false;\n      }\n   }\n\n   public int hashCode() {\n      return super.hashCode() ^ this.field_74756_a;\n   }\n\n   public long func_150291_c() {\n      return (long)this.field_74756_a;\n   }\n\n   public int func_150287_d() {\n      return this.field_74756_a;\n   }\n\n   public short func_150289_e() {\n      return (short)this.field_74756_a;\n   }\n\n   public byte func_150290_f() {\n      return this.field_74756_a;\n   }\n\n   public double func_150286_g() {\n      return (double)this.field_74756_a;\n   }\n\n   public float func_150288_h() {\n      return (float)this.field_74756_a;\n   }\n}<｜fim▁end｜>",
    "response": "\n   void func_152446_a(DataInput p_152446_1_, int p_152446_2_, NBTSizeTracker p_152446_3_) throws IOException {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.databene.benerator.wrapper;\n\nimport java.util.Collection;\nimport java.util.Iterator;\n\nimport org.databene.benerator.engine.BeneratorContext;\nimport org.databene.commons.CollectionUtil;\nimport org.databene.model.data.Entity;\nimport org.databene.model.data.EntitySource;\nimport org.databene.webdecs.DataContainer;\nimport org.databene.webdecs.DataIterator;\nimport org.databene.webdecs.util.AbstractDataIterator;\nimport org.databene.webdecs.util.AbstractDataSource;\n\npublic class EntityPartSource extends AbstractDataSource<Entity> implements EntitySource {\n\n    protected String productName;\n    protected String partName;\n    protected BeneratorContext context;\n\n    public EntityPartSource(String productName, String partName, BeneratorContext context) {\n        super(Entity.class);\n        this.productName = productName;\n        this.partName = partName;\n        this.context = context;\n    }\n\n    @Override\n<｜fim▁hole｜>    public class EntityPartIterator extends AbstractDataIterator<Entity> {\n\n        private Iterator<Entity> source;\n\n        @SuppressWarnings(\"unchecked\")\n        public EntityPartIterator() {\n            Entity entity = (Entity) context.get(productName);\n            Object part = entity.get(partName);\n            if (part instanceof Collection)\n                source = ((Collection<Entity>) part).iterator();\n            else\n                source = CollectionUtil.toList((Entity)part).iterator();\n        }\n\n        @Override\n        public DataContainer<Entity> next(DataContainer<Entity> container) {\n            if (source.hasNext())\n                return container.setData(source.next());\n            else\n                return null;\n        }\n\n    }\n\n}<｜fim▁end｜>",
    "response": "    public DataIterator<Entity> iterator() {\n        return new EntityPartIterator();\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package nokogiri;\n\nimport static nokogiri.internals.NokogiriHelpers.rubyStringToString;\nimport nokogiri.internals.SaveContextVisitor;\n\nimport org.jruby.Ruby;\nimport org.jruby.RubyClass;\nimport org.jruby.anno.JRubyClass;\nimport org.jruby.runtime.ThreadContext;\nimport org.jruby.runtime.builtin.IRubyObject;\nimport org.w3c.dom.Comment;\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\n\n@JRubyClass(name=\"Nokogiri::XML::Comment\", parent=\"Nokogiri::XML::CharacterData\")\npublic class XmlComment extends XmlNode {\n    public XmlComment(Ruby ruby, RubyClass rubyClass, Node node) {\n        super(ruby, rubyClass, node);\n    }\n\n    public XmlComment(Ruby runtime, RubyClass klass) {\n        super(runtime, klass);\n    }\n\n    @Override\n    protected void init(ThreadContext context, IRubyObject[] args) {\n        if (args.length < 2)\n            throw getRuntime().newArgumentError(args.length, 2);\n\n        IRubyObject doc = args[0];\n        IRubyObject text = args[1];\n\n        XmlDocument xmlDoc = null;\n        if (doc instanceof XmlDocument) {\n            xmlDoc = (XmlDocument) doc;\n\n        } else if (doc instanceof XmlNode) {\n            XmlNode xmlNode = (XmlNode) doc;\n            xmlDoc = (XmlDocument)xmlNode.document(context);\n        }\n        if (xmlDoc != null) {\n            Document document = xmlDoc.getDocument();\n            Node node = document.createComment(rubyStringToString(text));\n            setNode(context, node);\n        }\n<｜fim▁hole｜>\n    @Override\n    public boolean isComment() { return true; }\n\n    @Override\n    public void accept(ThreadContext context, SaveContextVisitor visitor) {\n        visitor.enter((Comment)node);\n        visitor.leave((Comment)node);\n    }\n}<｜fim▁end｜>",
    "response": "    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.ovirt.engine.api.model;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlSchemaType;\nimport javax.xml.bind.annotation.XmlType;\nimport javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"Snapshots\", propOrder = {\n    \"snapshots\",\n    \"collapseSnapshots\"\n})\npublic class Snapshots\n    extends BaseResources\n{\n\n    @XmlElement(name = \"snapshot\")\n    protected List<Snapshot> snapshots;\n    @XmlElement(name = \"collapse_snapshots\", type = String.class)\n    @XmlJavaTypeAdapter(Adapter3 .class)\n    @XmlSchemaType(name = \"boolean\")\n    protected Boolean collapseSnapshots;\n\n    /**\n     * Gets the value of the snapshots property.\n     * \n     * <p>\n     * This accessor method returns a reference to the live list,\n     * not a snapshot. Therefore any modification you make to the\n     * returned list will be present inside the JAXB object.\n     * This is why there is not a <CODE>set</CODE> method for the snapshots property.\n     * \n     * <p>\n     * For example, to add a new item, do as follows:\n     * <pre>\n     *    getSnapshots().add(newItem);\n     * </pre>\n     * \n     * \n     * <p>\n     * Objects of the following type(s) are allowed in the list\n     * {@link Snapshot }\n     * \n     * \n     */\n    public List<Snapshot> getSnapshots() {\n        if (snapshots == null) {\n            snapshots = new ArrayList<Snapshot>();\n        }\n        return this.snapshots;\n    }\n\n    public boolean isSetSnapshots() {\n        return ((this.snapshots!= null)&&(!this.snapshots.isEmpty()));\n    }\n\n    public void unsetSnapshots() {\n        this.snapshots = null;\n    }\n\n    /**\n     * Gets the value of the collapseSnapshots property.\n     * \n     * @return\n     *     possible object is\n     *     {@link String }\n     *     \n     */\n    public Boolean isCollapseSnapshots() {\n        return collapseSnapshots;\n    }\n\n    /**\n     * Sets the value of the collapseSnapshots property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n<｜fim▁hole｜>    }\n\n    public boolean isSetCollapseSnapshots() {\n        return (this.collapseSnapshots!= null);\n    }\n\n}<｜fim▁end｜>",
    "response": "     */\n    public void setCollapseSnapshots(Boolean value) {\n        this.collapseSnapshots = value;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.spockframework.mock.runtime;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport groovy.lang.Closure;\n\nimport org.spockframework.lang.SpreadWildcard;\nimport org.spockframework.lang.Wildcard;\nimport org.spockframework.mock.IArgumentConstraint;\nimport org.spockframework.mock.IInvocationConstraint;\nimport org.spockframework.mock.IMockInteraction;\nimport org.spockframework.mock.constraint.*;\nimport org.spockframework.mock.response.*;\nimport org.spockframework.runtime.InvalidSpecException;\n\npublic class InteractionBuilder {\n  private final int line;\n  private final int column;\n  private final String text;\n\n  private int minCount = 0;\n  private int maxCount = Integer.MAX_VALUE;\n  private List<IInvocationConstraint> invConstraints = new ArrayList<IInvocationConstraint>();\n  private List<Object> argNames;\n  private List<IArgumentConstraint> argConstraints;\n  private ResponseGeneratorChain responseGeneratorChain = new ResponseGeneratorChain();\n\n  public InteractionBuilder(int line, int column, String text) {\n    this.line = line;\n    this.column = column;\n    this.text = text;\n  }\n\n  public static final String SET_FIXED_COUNT = \"setFixedCount\";\n  public InteractionBuilder setFixedCount(Object count) {\n    if (count instanceof Wildcard) {\n      minCount = 0;\n      maxCount = Integer.MAX_VALUE;\n    } else\n      minCount = maxCount = convertCount(count, true);\n\n    return this;\n  }\n\n  public static final String SET_RANGE_COUNT = \"setRangeCount\";\n  public InteractionBuilder setRangeCount(Object minCount, Object maxCount, boolean inclusive) {\n    this.minCount = minCount instanceof Wildcard ? 0 : convertCount(minCount, true);\n    this.maxCount = maxCount instanceof Wildcard ? Integer.MAX_VALUE : convertCount(maxCount, inclusive);\n    if (this.minCount > this.maxCount)\n      throw new InvalidSpecException(\"lower bound of invocation count must come before upper bound\");\n    return this;\n  }\n\n  public static final String ADD_EQUAL_TARGET = \"addEqualTarget\";\n  public InteractionBuilder addEqualTarget(Object target) {\n    invConstraints.add(new TargetConstraint(target));\n    return this;\n  }\n\n  public static final String ADD_WILDCARD_TARGET = \"addWildcardTarget\";\n  public InteractionBuilder addWildcardTarget() {\n    invConstraints.add(new TargetConstraint(Wildcard.INSTANCE));\n    return this;\n  }\n\n  public static final String ADD_EQUAL_PROPERTY_NAME = \"addEqualPropertyName\";\n  public InteractionBuilder addEqualPropertyName(String name) {\n    if (name.equals(Wildcard.INSTANCE.toString())) {\n      invConstraints.add(WildcardMethodNameConstraint.INSTANCE);\n    } else {\n      invConstraints.add(new EqualPropertyNameConstraint(name));\n    }\n    return this;\n  }\n\n  public static final String ADD_REGEX_PROPERTY_NAME = \"addRegexPropertyName\";\n  public InteractionBuilder addRegexPropertyName(String regex) {\n    invConstraints.add(new RegexPropertyNameConstraint(regex));\n    return this;\n  }\n\n  public static final String ADD_EQUAL_METHOD_NAME = \"addEqualMethodName\";\n  public InteractionBuilder addEqualMethodName(String name) {\n    if (name.equals(Wildcard.INSTANCE.toString())) {\n      invConstraints.add(WildcardMethodNameConstraint.INSTANCE);\n    } else {\n      invConstraints.add(new EqualMethodNameConstraint(name));\n    }\n    return this;\n  }\n\n  public static final String ADD_REGEX_METHOD_NAME = \"addRegexMethodName\";\n  public InteractionBuilder addRegexMethodName(String regex) {\n    invConstraints.add(new RegexMethodNameConstraint(regex));\n    return this;\n<｜fim▁hole｜>  public static final String SET_ARG_LIST_KIND = \"setArgListKind\";\n  public InteractionBuilder setArgListKind(boolean isPositional) {\n    argConstraints = new ArrayList<IArgumentConstraint>();\n    if (isPositional) {\n      invConstraints.add(new PositionalArgumentListConstraint(argConstraints));\n    } else {\n      argNames = new ArrayList<Object>();\n      invConstraints.add(new NamedArgumentListConstraint(argNames, argConstraints));\n    }\n    return this;\n  }\n\n  public static final String ADD_ARG_NAME= \"addArgName\";\n  public InteractionBuilder addArgName(String name) {\n    argNames.add(name);\n    return this;\n  }\n\n  public static final String ADD_CODE_ARG = \"addCodeArg\";\n  public InteractionBuilder addCodeArg(Closure closure) {\n    argConstraints.add(new CodeArgumentConstraint(closure));\n    return this;\n  }\n\n  public static final String ADD_EQUAL_ARG = \"addEqualArg\";\n  public InteractionBuilder addEqualArg(Object arg) {\n    argConstraints.add(arg instanceof Wildcard ? WildcardArgumentConstraint.INSTANCE :\n        arg instanceof SpreadWildcard ? SpreadWildcardArgumentConstraint.INSTANCE :\n            new EqualArgumentConstraint(arg));\n    return this;\n  }\n\n  public static final String TYPE_LAST_ARG = \"typeLastArg\";\n  public InteractionBuilder typeLastArg(Class<?> type) {\n    IArgumentConstraint last = argConstraints.get(argConstraints.size() - 1);\n    argConstraints.set(argConstraints.size() - 1, new TypeArgumentConstraint(type, last));\n    return this;\n  }\n\n  public static final String NEGATE_LAST_ARG = \"negateLastArg\";\n  public InteractionBuilder negateLastArg() {\n    IArgumentConstraint last = argConstraints.get(argConstraints.size() - 1);\n    argConstraints.set(argConstraints.size() - 1, new NegatingArgumentConstraint(last));\n    return this;\n  }\n\n  public static final String ADD_CONSTANT_RESPONSE = \"addConstantResponse\";\n  public InteractionBuilder addConstantResponse(Object constant) {\n    responseGeneratorChain.addFirst(constant instanceof Wildcard ?\n        new WildcardResponseGenerator() : new ConstantResponseGenerator(constant));\n    return this;\n  }\n\n  public static final String ADD_CODE_RESPONSE = \"addCodeResponse\";\n  public InteractionBuilder addCodeResponse(Closure closure) {\n    responseGeneratorChain.addFirst(new CodeResponseGenerator(closure));\n    return this;\n  }\n\n  public static final String ADD_ITERABLE_RESPONSE = \"addIterableResponse\";\n  public InteractionBuilder addIterableResponse(Object iterable) {\n    responseGeneratorChain.addFirst(new IterableResponseGenerator(iterable));\n    return this;\n  }\n\n  public static final String BUILD = \"build\";\n  public IMockInteraction build() {\n    return new MockInteraction(line, column, text, minCount, maxCount, invConstraints,\n        responseGeneratorChain.isEmpty() ? new DefaultResponseGenerator() : responseGeneratorChain);\n  }\n\n  private static int convertCount(Object count, boolean inclusive) {\n    if (!(count instanceof Number))\n      throw new InvalidSpecException(\"invocation count must be a number\");\n\n    int intCount = ((Number)count).intValue();\n    if (!inclusive) intCount--;\n    if (intCount < 0)\n      throw new InvalidSpecException(\"invocation count must be >= 0\");\n    return intCount;\n  }\n}<｜fim▁end｜>",
    "response": "  }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package br.curso;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Principal{\n\n    public static void main(String[] args) {\n        ArrayList<Produto> listaProdutos = new ArrayList<>();\n        for(int i=0; i<100; i++){\n            Produto pAux = new Produto();\n            pAux.setId(i+1);\n            pAux.setNome(\"Produto - \"+String.valueOf(i+1));\n\n            listaProdutos.add(pAux);\n\n        }\n\n        for(int i=0; i<100; i++){\n<｜fim▁hole｜>\n        ArrayList<Produto> listaProdutos2 = new ArrayList<>();\n        Produto p1 = new Produto(10,  \"Wladimir\");\n        Produto p2 = new Produto(1,  \"Carla\");\n        Produto p3 = new Produto(8,  \"Almir\");\n\n        listaProdutos2.add(p1);\n        listaProdutos2.add(p2);\n        listaProdutos2.add(p3);\n\n        Collections.sort(listaProdutos2);\n\n        for (Produto p : listaProdutos2){\n            System.out.println(p.getNome());\n        }\n\n    }\n\n}<｜fim▁end｜>",
    "response": "            Produto pAux = listaProdutos.get(i);\n            //System.out.println(\"-----------\");\n            //System.out.println(\"ID :\" +pAux.getId());\n            //System.out.println(pAux.getNome());\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.unalsoft.elitefle.entity;\n\nimport java.io.File;\nimport java.util.ArrayList;\n<｜fim▁hole｜>\n    //@TODO Get text location from DB\n    //@TODO Change server location to ../applications/__internal/elite-fle-1.0-SNAPSHOT/\n    text1(\"Aider les handicapés dans le monde du travail\", new File(\"\").getAbsolutePath() + File.separator + \"texts\" + File.separator + \"texte_corefB101test.xml\", Level.delfB1),\n    text2(\"Les Thibault, tome 1, le cahier gris (fragment)\", new File(\"\").getAbsolutePath() + File.separator + \"texts\" + File.separator + \"texte_corefB105test.xml\", Level.delfB1),\n    text3(\"Une lueur d'espoir\", \"Url/Text/3\", Level.delfB1),\n    text4(\"Une génération inoxydable\", \"Url/Text/4\", Level.delfB2),\n    text5(\"Le compte à rebours\", \"Url/Text/5\", Level.delfB2),\n    text6(\"Surdoués : trop intelligents pour être heureux\", \"Url/Text/6\", Level.delfB2);\n\n    private final String text;\n    private final String url;\n    private final Level level;\n\n    /**\n     * Text constructor\n     *\n     * @param text\n     */\n\n    private Text(String text, String url, Level level) {\n        this.text = text;\n        this.url = url;\n        this.level = level;\n    }\n\n    /**\n     * get the text's name\n     *\n     * @return\n     */\n    public String getText() {\n        return text;\n    }\n\n    /**\n     * get the text's url\n     *\n     * @return\n     */\n    public String getUrl() {\n        return url;\n    }\n\n    /**\n     * get the text's level\n     *\n     * @return\n     */\n    public Level getLevel() {\n        return level;\n    }\n\n    public static List<Text> getByLevel(Level level) {\n        List<Text> list = new ArrayList<Text>();\n        for (Text t : Text.values()) {\n            if (t.getLevel().equals(level)){\n                list.add(t);\n            }\n        }        \n        return list;\n    }\n\n    public static Text getByTextName(String textName) {\n        for (Text text : Text.values()) {\n            if (text.getText().equals(textName)) {\n                return text;\n            }\n        }\n        return null;\n    }\n}<｜fim▁end｜>",
    "response": "import java.util.List;\n\npublic enum Text {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.ctrip.zeus.model.page;\n\npublic class PageContext {\n    private String m_title;\n\n    public PageContext() {\n    }\n\n    protected boolean equals(Object o1, Object o2) {\n        if (o1 == null) {\n            return o2 == null;\n        } else if (o2 == null) {\n            return false;\n        } else {\n            return o1.equals(o2);\n        }\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (obj instanceof PageContext) {\n            PageContext _o = (PageContext) obj;\n\n            if (!equals(m_title, _o.getTitle())) {\n                return false;\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    public String getTitle() {\n        return m_title;\n    }\n\n    @Override\n    public int hashCode() {\n        int hash = 0;\n<｜fim▁hole｜>\n    public PageContext setTitle(String title) {\n        m_title = title;\n        return this;\n    }\n\n}<｜fim▁end｜>",
    "response": "\n        hash = hash * 31 + (m_title == null ? 0 : m_title.hashCode());\n\n        return hash;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.drools.core.base.extractors;\n\npublic abstract class BaseClassFieldExtractorsTest {\n\n    public abstract void testGetBooleanValue();\n\n    public abstract void testGetByteValue();\n\n    public abstract void testGetCharValue();\n\n<｜fim▁hole｜>\n    public abstract void testGetFloatValue();\n\n    public abstract void testGetDoubleValue();\n\n    public abstract void testGetValue();\n\n    public abstract void testIsNullValue();\n\n}<｜fim▁end｜>",
    "response": "    public abstract void testGetShortValue();\n\n    public abstract void testGetIntValue();\n\n    public abstract void testGetLongValue();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.openapitools.model;\n\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport io.micronaut.test.extensions.junit5.annotation.MicronautTest;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.Assertions;\n\n@MicronautTest\npublic class DefaultCrumbIssuerTest {\n    private final DefaultCrumbIssuer model = null;\n\n    /**\n     * Model tests for DefaultCrumbIssuer\n     */\n    @Test\n    public void testDefaultCrumbIssuer() {\n        // TODO: test DefaultCrumbIssuer\n    }\n\n    /**\n     * Test the property 'propertyClass'\n     */\n    @Test\n    public void propertyClassTest() {\n        // TODO: test propertyClass\n    }\n\n    /**\n     * Test the property 'crumb'\n     */\n    @Test\n    public void crumbTest() {\n        // TODO: test crumb\n    }\n\n    /**\n     * Test the property 'crumbRequestField'\n     */\n<｜fim▁hole｜>\n}<｜fim▁end｜>",
    "response": "    @Test\n    public void crumbRequestFieldTest() {\n        // TODO: test crumbRequestField\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amazonaws.services.codecommit.model;\n\nimport java.io.Serializable;\nimport javax.annotation.Generated;\n\nimport com.amazonaws.AmazonWebServiceRequest;\n\n@Generated(\"com.amazonaws:aws-java-sdk-code-generator\")\npublic class PutRepositoryTriggersRequest extends com.amazonaws.AmazonWebServiceRequest implements Serializable, Cloneable {\n\n    /**\n     * <p>\n     * The name of the repository where you want to create or update the trigger.\n     * </p>\n     */\n    private String repositoryName;\n    /**\n     * <p>\n     * The JSON block of configuration information for each trigger.\n     * </p>\n     */\n    private java.util.List<RepositoryTrigger> triggers;\n\n    /**\n     * <p>\n     * The name of the repository where you want to create or update the trigger.\n     * </p>\n     * \n     * @param repositoryName\n     *        The name of the repository where you want to create or update the trigger.\n     */\n\n    public void setRepositoryName(String repositoryName) {\n        this.repositoryName = repositoryName;\n    }\n\n    /**\n     * <p>\n     * The name of the repository where you want to create or update the trigger.\n     * </p>\n     * \n     * @return The name of the repository where you want to create or update the trigger.\n     */\n\n    public String getRepositoryName() {\n        return this.repositoryName;\n    }\n\n    /**\n     * <p>\n     * The name of the repository where you want to create or update the trigger.\n     * </p>\n     * \n     * @param repositoryName\n     *        The name of the repository where you want to create or update the trigger.\n     * @return Returns a reference to this object so that method calls can be chained together.\n     */\n\n    public PutRepositoryTriggersRequest withRepositoryName(String repositoryName) {\n        setRepositoryName(repositoryName);\n        return this;\n    }\n\n    /**\n     * <p>\n     * The JSON block of configuration information for each trigger.\n     * </p>\n     * \n     * @return The JSON block of configuration information for each trigger.\n     */\n\n    public java.util.List<RepositoryTrigger> getTriggers() {\n        return triggers;\n    }\n\n    /**\n     * <p>\n     * The JSON block of configuration information for each trigger.\n     * </p>\n     * \n     * @param triggers\n     *        The JSON block of configuration information for each trigger.\n     */\n\n    public void setTriggers(java.util.Collection<RepositoryTrigger> triggers) {\n        if (triggers == null) {\n            this.triggers = null;\n            return;\n        }\n\n        this.triggers = new java.util.ArrayList<RepositoryTrigger>(triggers);\n    }\n\n    /**\n     * <p>\n     * The JSON block of configuration information for each trigger.\n     * </p>\n     * <p>\n     * <b>NOTE:</b> This method appends the values to the existing list (if any). Use\n     * {@link #setTriggers(java.util.Collection)} or {@link #withTriggers(java.util.Collection)} if you want to override\n     * the existing values.\n     * </p>\n     * \n     * @param triggers\n     *        The JSON block of configuration information for each trigger.\n     * @return Returns a reference to this object so that method calls can be chained together.\n     */\n\n    public PutRepositoryTriggersRequest withTriggers(RepositoryTrigger... triggers) {\n        if (this.triggers == null) {\n            setTriggers(new java.util.ArrayList<RepositoryTrigger>(triggers.length));\n        }\n        for (RepositoryTrigger ele : triggers) {\n            this.triggers.add(ele);\n        }\n<｜fim▁hole｜>\n    /**\n     * <p>\n     * The JSON block of configuration information for each trigger.\n     * </p>\n     * \n     * @param triggers\n     *        The JSON block of configuration information for each trigger.\n     * @return Returns a reference to this object so that method calls can be chained together.\n     */\n\n    public PutRepositoryTriggersRequest withTriggers(java.util.Collection<RepositoryTrigger> triggers) {\n        setTriggers(triggers);\n        return this;\n    }\n\n    /**\n     * Returns a string representation of this object. This is useful for testing and debugging. Sensitive data will be\n     * redacted from this string using a placeholder value.\n     *\n     * @return A string representation of this object.\n     *\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (getRepositoryName() != null)\n            sb.append(\"RepositoryName: \").append(getRepositoryName()).append(\",\");\n        if (getTriggers() != null)\n            sb.append(\"Triggers: \").append(getTriggers());\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n\n        if (obj instanceof PutRepositoryTriggersRequest == false)\n            return false;\n        PutRepositoryTriggersRequest other = (PutRepositoryTriggersRequest) obj;\n        if (other.getRepositoryName() == null ^ this.getRepositoryName() == null)\n            return false;\n        if (other.getRepositoryName() != null && other.getRepositoryName().equals(this.getRepositoryName()) == false)\n            return false;\n        if (other.getTriggers() == null ^ this.getTriggers() == null)\n            return false;\n        if (other.getTriggers() != null && other.getTriggers().equals(this.getTriggers()) == false)\n            return false;\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int hashCode = 1;\n\n        hashCode = prime * hashCode + ((getRepositoryName() == null) ? 0 : getRepositoryName().hashCode());\n        hashCode = prime * hashCode + ((getTriggers() == null) ? 0 : getTriggers().hashCode());\n        return hashCode;\n    }\n\n    @Override\n    public PutRepositoryTriggersRequest clone() {\n        return (PutRepositoryTriggersRequest) super.clone();\n    }\n\n}<｜fim▁end｜>",
    "response": "        return this;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.iron.ironmq.keystone;\n\npublic class KeystoneGetTokenPayload {\n    Auth auth;\n\n    public KeystoneGetTokenPayload(Auth auth) {\n        this.auth = auth;\n    }\n\n    public Auth getAuth() {\n        return auth;\n    }\n<｜fim▁hole｜>    }\n}<｜fim▁end｜>",
    "response": "\n    public void setAuth(Auth auth) {\n        this.auth = auth;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.utn.dds.tpprevio;\n\nimport static org.junit.Assert.*;\nimport org.junit.Test;\nimport com.utn.dds.tpprevio.repository.impl.ConnectionManager;\n\n<｜fim▁hole｜>    public void getConnection_conParametrosValidos_devuelveConexion() throws ClassNotFoundException {\n        assertEquals(\"com.mysql.jdbc.JDBC4Connection\",\n                ConnectionManager.getConnection().getClass().getName());\n    }\n\n    @Test(expected = ClassNotFoundException.class)\n    public void getConnection_conParametrosNoValidos_devuelveExcepcion() throws ClassNotFoundException {\n        assertNotNull(ConnectionManager.getConnection(\"url no valida\",\" driver no valido\"));\n    }\n}<｜fim▁end｜>",
    "response": "public class ConnectionManagerTest {    \n\n    @Test\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package flex.messaging.client;\n\nimport flex.messaging.MessageClient;\nimport flex.messaging.config.ConfigMap;\nimport flex.messaging.messages.Message;\n\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class FlexClientOutboundQueueProcessor \n{\n    //--------------------------------------------------------------------------\n<｜fim▁hole｜>    /**\n     * The associated FlexClient.\n     */\n    private FlexClient client;\n\n    /**\n     * The associated endpoint's Id.\n     */\n    private String endpointId;\n\n    //--------------------------------------------------------------------------\n    //\n    // Public Methods\n    //\n    //--------------------------------------------------------------------------\n\n    /**\n     * @exclude\n     * Stores the Id for the outbound queue's endpoint.\n     * \n     * @param value The Id for the outbound queue's endpoint.\n     */\n    public void setEndpointId(String value)\n    {\n        endpointId = value;\n    }\n\n    /**\n     * Returns the Id for the outbound queue's endpoint.\n     * \n     * @return The Id for the outbound queue's endpoint.\n     */    \n    public String getEndpointId()\n    {\n        return endpointId;\n    }\n\n    /**\n     * @exclude \n     * Sets the associated FlexClient.\n     * \n     * @param value The associated FlexClient.\n     */\n    public void setFlexClient(FlexClient value) \n    {\n        client = value;\n    }\n\n    /**\n     * Returns the associated FlexClient.\n     * \n     * @return The associated FlexClient.\n     */\n    public FlexClient getFlexClient()\n    {\n        return client;\n    }\n\n    /**\n     * No-op; this default implementation doesn't require custom initialization.\n     * Subclasses may override to process any custom initialization properties that have been \n     * defined in the server configuration.\n     * \n     * @param properties A ConfigMap containing any custom initialization properties.\n     */\n    public void initialize(ConfigMap properties) {}\n\n    /**\n     * Always adds a new message to the tail of the queue.\n     * \n     * @param outboundQueue The queue of outbound messages.\n     * @param message The new message to add to the queue.\n     */\n    public void add(List outboundQueue, Message message)\n    {\n        outboundQueue.add(message);\n    }\n\n    /**\n     * Always empties the queue and returns all messages to be sent to the client.\n     * \n     * @param outboundQueue The queue of outbound messages.\n     * @return A FlushResult containing the messages that have been removed from the outbound queue\n     *         to be written to the network and a wait time for the next flush of the outbound queue\n     *         that is the default for the underlying Channel/Endpoint.\n     */\n    public FlushResult flush(List outboundQueue)\n    {\n        FlushResult flushResult = new FlushResult();\n        ArrayList messagesToFlush = new ArrayList();\n        for (Iterator iter = outboundQueue.iterator(); iter.hasNext();)\n        {\n            Message message = (Message)iter.next();            \n            if (!isMessageExpired(message))\n                messagesToFlush.add(message);\n        }\n        flushResult.setMessages(messagesToFlush);\n        outboundQueue.clear();        \n        return flushResult;\n    }\n\n    /**\n     * Removes all messages in the queue targeted to this specific MessageClient subscription(s) and \n     * returns them to be sent to the client.\n     * Overrides should be careful to only return messages for the specified MessageClient.\n     * \n     * @param client The specific MessageClient to return messages for.\n     * @param outboundQueue The queue of outbound messages.\n     * @return A FlushResult containing the messages that have been removed from the outbound queue\n     *         to be written to the network for this MessageClient.\n     */\n    public FlushResult flush(MessageClient client, List outboundQueue)\n    {\n        FlushResult flushResult = new FlushResult();\n        List messagesForClient = new ArrayList();\n        Message message = null;\n        for (Iterator iter = outboundQueue.iterator(); iter.hasNext();)\n        {\n            message = (Message)iter.next();\n            if (message.getClientId().equals(client.getClientId()))\n            {\n                iter.remove();\n                if (!isMessageExpired(message))\n                    messagesForClient.add(message);\n            }\n        }\n        flushResult.setMessages(messagesForClient);\n        return flushResult;\n    }\n\n    /**\n     * Utility method to test whether a message has expired or not.\n     * Messages with a timeToLive value that is shorter than the timespan from the message's\n     * timestamp up to the current system time will cause this method to return true.\n     * If there are expired messages in the outbound queue, flush implementations\n     * should use this helper method to only process and return messages that have\n     * not yet expired.\n     * \n     * @param message The message to test for expiration.\n     * \n     * @return true if the message has a timeToLive value that has expired; otherwise false.\n     */\n    public boolean isMessageExpired(Message message)\n    {\n        if (message.getTimeToLive() > 0 && (System.currentTimeMillis() - message.getTimestamp()) >= message.getTimeToLive())\n            return true;\n        else\n            return false;\n    }\n}<｜fim▁end｜>",
    "response": "    //\n    // Variables\n    //\n    //--------------------------------------------------------------------------\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.example.no_one_fragment;\n\nimport java.util.ArrayList;\n\nimport com.example.webpage_game_platform.R;\nimport com.jauker.widget.BadgeView;\n\nimport android.content.Context;\nimport android.graphics.Bitmap;\nimport android.graphics.Color;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.BaseAdapter;\nimport android.widget.ImageView;\nimport android.widget.TextView;\n\npublic class No_One_Fragment_Adapter extends BaseAdapter {\n\n    private ArrayList<No_One_Fragment_Entity> list_Discuss_Entity;\n\n    private LayoutInflater inflater;\n    private String gameNameTemp;\n\n    public No_One_Fragment_Adapter(Context context,\n            ArrayList<No_One_Fragment_Entity> list_Discuss_Entity) {\n        this.list_Discuss_Entity = list_Discuss_Entity;\n        inflater = LayoutInflater.from(context);\n    }\n\n    @Override\n    public int getCount() {\n        return list_Discuss_Entity.size();\n    }\n\n    @Override\n    public Object getItem(int position) {\n        return null;\n    }\n\n    @Override\n    public long getItemId(int position) {\n        return 0;\n    }\n\n    @Override\n    public View getView(int position, View convertView, ViewGroup parent) {\n\n        No_One_Fragment_Entity entity = list_Discuss_Entity.get(position);\n\n        ViewHolder viewHolder;\n\n        if (convertView == null) {\n\n            viewHolder = new ViewHolder();\n\n            convertView = inflater.inflate(R.layout.item_listview_layout, null);\n\n            viewHolder.gameName = (TextView) convertView\n                    .findViewById(R.id.id_item_username);\n            viewHolder.LastestDiscuss = (TextView) convertView\n                    .findViewById(R.id.id_item_lastestdiscuss);\n            viewHolder.time = (TextView) convertView\n                    .findViewById(R.id.id_item_time);\n            viewHolder.gameAvatar = (ImageView) convertView\n                    .findViewById(R.id.id_item_imageview);\n            viewHolder.userName = (TextView) convertView\n                    .findViewById(R.id.id_item_userdiscussname);\n            viewHolder.badgeView = new BadgeView(convertView.getContext());\n\n            convertView.setTag(viewHolder);\n        } else {\n            viewHolder = (ViewHolder) convertView.getTag();\n        }\n\n        viewHolder.badgeView.setTargetView(viewHolder.gameAvatar);\n        viewHolder.badgeView.setTextColor(Color.RED);\n        viewHolder.badgeView.setTextSize(5);\n        viewHolder.badgeView.setBadgeCount(3);\n        viewHolder.badgeView.setVisibility(View.INVISIBLE);\n<｜fim▁hole｜>        }\n        Bitmap bitmap = entity.getNo_one_fragment_entity_img();\n        String AllplayName = entity.getNo_one_fragment_entity_user_name();\n        if (AllplayName == null) {\n            viewHolder.userName.setText(entity\n                    .getNo_one_fragment_entity_user_name());\n        } else {\n            viewHolder.userName.setText(entity\n                    .getNo_one_fragment_entity_user_name() + \":\");\n        }\n        viewHolder.gameAvatar.setImageBitmap(bitmap);\n        viewHolder.LastestDiscuss.setText(entity\n                .getNo_one_fragment_entity_user_discuss());\n        viewHolder.time.setText(entity.getNo_one_fragment_entity_time());\n        viewHolder.gameName.setText(entity\n                .getNo_one_fragment_entity_game_name());\n        return convertView;\n\n    }\n\n    class ViewHolder {\n        TextView userName;\n        ImageView gameAvatar;\n        TextView LastestDiscuss;\n        TextView gameName;\n        TextView time;\n        BadgeView badgeView;\n    }\n\n    public void setRefreshListView(ArrayList<No_One_Fragment_Entity> list) {\n\n        this.list_Discuss_Entity = list;\n        this.gameNameTemp = null;\n\n        notifyDataSetChanged();\n    }\n\n    public void setRefreshListView(\n            ArrayList<No_One_Fragment_Entity> myArrayList, String gameNameTemp) {\n\n        this.list_Discuss_Entity = myArrayList;\n        this.gameNameTemp = gameNameTemp;\n\n        notifyDataSetChanged();\n\n    }\n\n}<｜fim▁end｜>",
    "response": "        // Èç¹ûÖ¸¶¨¸üÐÂgameNameµÈÓÚÎÒÒªµÄgameNameµÄentity¾ÍÌí¼ÓÐ¡ºìµã\n        if (entity.getNo_one_fragment_entity_game_name().equals(gameNameTemp)) {\n            viewHolder.badgeView.setVisibility(View.VISIBLE);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.opengi.awtomation.client;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport javax.xml.namespace.QName;\nimport javax.xml.ws.Service;\nimport javax.xml.ws.WebEndpoint;\nimport javax.xml.ws.WebServiceClient;\nimport javax.xml.ws.WebServiceException;\nimport javax.xml.ws.WebServiceFeature;\n\n@WebServiceClient(name = \"RemoteControlService\", targetNamespace = \"http://awtomation.opengi.com/\", wsdlLocation = \"http://localhost:1970/RemoteService/RemoteControl?wsdl\")\npublic class RemoteControlService_Service\n    extends Service\n{\n\n    private final static URL REMOTECONTROLSERVICE_WSDL_LOCATION;\n    private final static WebServiceException REMOTECONTROLSERVICE_EXCEPTION;\n    private final static QName REMOTECONTROLSERVICE_QNAME = new QName(\"http://awtomation.opengi.com/\", \"RemoteControlService\");\n\n    static {\n        URL url = null;\n        WebServiceException e = null;\n        try {\n            url = new URL(\"http://localhost:1970/RemoteService/RemoteControl?wsdl\");\n        } catch (MalformedURLException ex) {\n            e = new WebServiceException(ex);\n        }\n        REMOTECONTROLSERVICE_WSDL_LOCATION = url;\n        REMOTECONTROLSERVICE_EXCEPTION = e;\n    }\n\n    public RemoteControlService_Service() {\n        super(__getWsdlLocation(), REMOTECONTROLSERVICE_QNAME);\n    }\n\n    public RemoteControlService_Service(WebServiceFeature... features) {\n        super(__getWsdlLocation(), REMOTECONTROLSERVICE_QNAME, features);\n    }\n\n    public RemoteControlService_Service(URL wsdlLocation) {\n        super(wsdlLocation, REMOTECONTROLSERVICE_QNAME);\n    }\n\n    public RemoteControlService_Service(URL wsdlLocation, WebServiceFeature... features) {\n        super(wsdlLocation, REMOTECONTROLSERVICE_QNAME, features);\n    }\n\n<｜fim▁hole｜>        super(wsdlLocation, serviceName);\n    }\n\n    public RemoteControlService_Service(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {\n        super(wsdlLocation, serviceName, features);\n    }\n\n    /**\n     * \n     * @return\n     *     returns RemoteControlService\n     */\n    @WebEndpoint(name = \"RemoteControlServicePort\")\n    public RemoteControlService getRemoteControlServicePort() {\n        return super.getPort(new QName(\"http://awtomation.opengi.com/\", \"RemoteControlServicePort\"), RemoteControlService.class);\n    }\n\n    /**\n     * \n     * @param features\n     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.\n     * @return\n     *     returns RemoteControlService\n     */\n    @WebEndpoint(name = \"RemoteControlServicePort\")\n    public RemoteControlService getRemoteControlServicePort(WebServiceFeature... features) {\n        return super.getPort(new QName(\"http://awtomation.opengi.com/\", \"RemoteControlServicePort\"), RemoteControlService.class, features);\n    }\n\n    private static URL __getWsdlLocation() {\n        if (REMOTECONTROLSERVICE_EXCEPTION!= null) {\n            throw REMOTECONTROLSERVICE_EXCEPTION;\n        }\n        return REMOTECONTROLSERVICE_WSDL_LOCATION;\n    }\n\n}<｜fim▁end｜>",
    "response": "    public RemoteControlService_Service(URL wsdlLocation, QName serviceName) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package loci.common.xml;\n\nimport java.io.IOException;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n<｜fim▁hole｜>import org.xml.sax.SAXException;\nimport org.xml.sax.helpers.DefaultHandler;\n\npublic class BaseHandler extends DefaultHandler {\n\n  private static final Logger LOGGER =\n    LoggerFactory.getLogger(BaseHandler.class);\n\n  // -- DefaultHandler API methods --\n\n  @Override\n  public InputSource resolveEntity(String publicId, String systemId)\n    throws IOException, SAXException\n  {\n    LOGGER.debug(\"Ignoring: {}, {}\", publicId, systemId);\n    return new InputSource(new java.io.StringReader(\"\"));\n  }\n\n}<｜fim▁end｜>",
    "response": "import org.xml.sax.InputSource;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package gui.models;\n\nimport java.math.BigDecimal;\n\nimport javax.swing.table.AbstractTableModel;\n\nimport qora.voting.Poll;\nimport qora.voting.PollOption;\n<｜fim▁hole｜>{\n    private static final int COLUMN_NAME = 0;\n    public static final int COLUMN_VOTES = 1;\n    public static final int COLUMN_PERCENTAGE = 2;\n\n    private String[] columnNames = {\"Name\", \"Votes\", \"% of Total\"};\n    private Poll poll;\n\n    public PollOptionsTableModel(Poll poll)\n    {\n        this.poll = poll;\n    }\n\n    public PollOption getPollOption(int row)\n    {\n        return this.poll.getOptions().get(row);\n    }\n\n    @Override\n    public int getColumnCount() \n    {\n        return this.columnNames.length;\n    }\n\n    @Override\n    public String getColumnName(int index) \n    {\n        return this.columnNames[index];\n    }\n\n    @Override\n    public int getRowCount() \n    {\n         return this.poll.getOptions().size();\n    }\n\n    @Override\n    public Object getValueAt(int row, int column) \n    {\n        if(this.poll.getOptions() == null || row > this.poll.getOptions().size() - 1 )\n        {\n            return null;\n        }\n\n        PollOption option = this.poll.getOptions().get(row);\n\n        switch(column)\n        {\n        case COLUMN_NAME:\n\n            String key = option.getName();\n\n            //CHECK IF ENDING ON A SPACE\n            if(key.endsWith(\" \"))\n            {\n                key = key.substring(0, key.length()-1);\n                key += \".\";\n            }\n\n            return key;\n\n        case COLUMN_VOTES:\n\n            return NumberAsString.getInstance().numberAsString(option.getVotes());\n\n        case COLUMN_PERCENTAGE:\n\n            BigDecimal total = this.poll.getTotalVotes();\n            BigDecimal votes = option.getVotes();\n\n            if(votes.compareTo(BigDecimal.ZERO) == 0)\n            {\n                return \"0 %\";\n            }\n\n            return votes.divide(total, BigDecimal.ROUND_UP).multiply(BigDecimal.valueOf(100)).toPlainString() + \" %\";\n\n        }\n\n        return null;\n    }\n}<｜fim▁end｜>",
    "response": "import utils.NumberAsString;\n\n@SuppressWarnings(\"serial\")\npublic class PollOptionsTableModel extends AbstractTableModel\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.chromium.chrome.browser.flags;\n\nimport androidx.annotation.VisibleForTesting;\n\nimport org.chromium.chrome.browser.preferences.SharedPreferencesManager;\n\npublic class BooleanCachedFieldTrialParameter extends CachedFieldTrialParameter {\n    private boolean mDefaultValue;\n\n    public BooleanCachedFieldTrialParameter(\n            String featureName, String variationName, boolean defaultValue) {\n        this(featureName, variationName, defaultValue, null);\n    }\n\n    public BooleanCachedFieldTrialParameter(String featureName, String variationName,\n            boolean defaultValue, String preferenceKeyOverride) {\n        super(featureName, variationName, FieldTrialParameterType.BOOLEAN, preferenceKeyOverride);\n        mDefaultValue = defaultValue;\n    }\n\n    /**\n     * @return the value of the field trial parameter that should be used in this run.\n     */\n    public boolean getValue() {\n        return CachedFeatureFlags.getConsistentBooleanValue(\n                getSharedPreferenceKey(), getDefaultValue());\n    }\n\n    public boolean getDefaultValue() {\n        return mDefaultValue;\n    }\n\n    @Override\n    void cacheToDisk() {\n<｜fim▁hole｜>     * Forces the parameter to return a specific value for testing.\n     *\n     * Caveat: this does not affect the value returned by native, only by\n     * {@link CachedFieldTrialParameter}.\n     *\n     * @param overrideValue the value to be returned\n     */\n    @VisibleForTesting\n    public void setForTesting(boolean overrideValue) {\n        CachedFeatureFlags.setOverrideTestValue(\n                getSharedPreferenceKey(), String.valueOf(overrideValue));\n    }\n}<｜fim▁end｜>",
    "response": "        boolean value = ChromeFeatureList.getFieldTrialParamByFeatureAsBoolean(\n                getFeatureName(), getParameterName(), getDefaultValue());\n        SharedPreferencesManager.getInstance().writeBoolean(getSharedPreferenceKey(), value);\n    }\n\n    /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.avro.util;\n\nimport java.nio.charset.StandardCharsets;\nimport java.util.Arrays;\n\nimport org.apache.avro.AvroRuntimeException;\nimport org.apache.avro.io.BinaryData;\nimport org.slf4j.LoggerFactory;\n\npublic class Utf8 implements Comparable<Utf8>, CharSequence {\n  private static final String MAX_LENGTH_PROPERTY = \"org.apache.avro.limits.string.maxLength\";\n  private static final int MAX_LENGTH;\n  private static final byte[] EMPTY = new byte[0];\n\n  static {\n    String o = System.getProperty(MAX_LENGTH_PROPERTY);\n    int i = Integer.MAX_VALUE;\n    if (o != null) {\n      try {\n        i = Integer.parseUnsignedInt(o);\n      } catch (NumberFormatException nfe) {\n        LoggerFactory.getLogger(Utf8.class).warn(\"Could not parse property \" + MAX_LENGTH_PROPERTY + \": \" + o, nfe);\n      }\n    }\n    MAX_LENGTH = i;\n  }\n\n  private byte[] bytes;\n  private int hash;\n  private int length;\n  private String string;\n\n  public Utf8() {\n    bytes = EMPTY;\n  }\n\n  public Utf8(String string) {\n    byte[] bytes = getBytesFor(string);\n    int length = bytes.length;\n    checkLength(length);\n    this.bytes = bytes;\n    this.length = length;\n    this.string = string;\n  }\n\n  public Utf8(Utf8 other) {\n    this.length = other.length;\n    this.bytes = Arrays.copyOf(other.bytes, other.length);\n    this.string = other.string;\n    this.hash = other.hash;\n  }\n\n  public Utf8(byte[] bytes) {\n    int length = bytes.length;\n    checkLength(length);\n    this.bytes = bytes;\n    this.length = length;\n  }\n\n  /**\n   * Return UTF-8 encoded bytes. Only valid through {@link #getByteLength()}.\n   */\n  public byte[] getBytes() {\n    return bytes;\n  }\n\n  /**\n   * Return length in bytes.\n   *\n   * @deprecated call {@link #getByteLength()} instead.\n   */\n  @Deprecated\n  public int getLength() {\n    return length;\n  }\n\n<｜fim▁hole｜>  }\n\n  /**\n   * Set length in bytes. Should called whenever byte content changes, even if the\n   * length does not change, as this also clears the cached String.\n   *\n   * @deprecated call {@link #setByteLength(int)} instead.\n   */\n  @Deprecated\n  public Utf8 setLength(int newLength) {\n    return setByteLength(newLength);\n  }\n\n  /**\n   * Set length in bytes. Should called whenever byte content changes, even if the\n   * length does not change, as this also clears the cached String.\n   */\n  public Utf8 setByteLength(int newLength) {\n    checkLength(newLength);\n    if (this.bytes.length < newLength) {\n      this.bytes = Arrays.copyOf(this.bytes, newLength);\n    }\n    this.length = newLength;\n    this.string = null;\n    this.hash = 0;\n    return this;\n  }\n\n  /** Set to the contents of a String. */\n  public Utf8 set(String string) {\n    byte[] bytes = getBytesFor(string);\n    int length = bytes.length;\n    checkLength(length);\n    this.bytes = bytes;\n    this.length = length;\n    this.string = string;\n    this.hash = 0;\n    return this;\n  }\n\n  public Utf8 set(Utf8 other) {\n    if (this.bytes.length < other.length) {\n      this.bytes = new byte[other.length];\n    }\n    this.length = other.length;\n    System.arraycopy(other.bytes, 0, bytes, 0, length);\n    this.string = other.string;\n    this.hash = other.hash;\n    return this;\n  }\n\n  @Override\n  public String toString() {\n    if (this.length == 0)\n      return \"\";\n    if (this.string == null) {\n      this.string = new String(bytes, 0, length, StandardCharsets.UTF_8);\n    }\n    return this.string;\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (o == this)\n      return true;\n    if (!(o instanceof Utf8))\n      return false;\n    Utf8 that = (Utf8) o;\n    if (!(this.length == that.length))\n      return false;\n    byte[] thatBytes = that.bytes;\n    for (int i = 0; i < this.length; i++)\n      if (bytes[i] != thatBytes[i])\n        return false;\n    return true;\n  }\n\n  @Override\n  public int hashCode() {\n    int h = hash;\n    if (h == 0) {\n      byte[] bytes = this.bytes;\n      int length = this.length;\n      for (int i = 0; i < length; i++) {\n        h = h * 31 + bytes[i];\n      }\n      this.hash = h;\n    }\n    return h;\n  }\n\n  @Override\n  public int compareTo(Utf8 that) {\n    return BinaryData.compareBytes(this.bytes, 0, this.length, that.bytes, 0, that.length);\n  }\n\n  // CharSequence implementation\n  @Override\n  public char charAt(int index) {\n    return toString().charAt(index);\n  }\n\n  @Override\n  public int length() {\n    return toString().length();\n  }\n\n  @Override\n  public CharSequence subSequence(int start, int end) {\n    return toString().subSequence(start, end);\n  }\n\n  private static void checkLength(int length) {\n    if (length > MAX_LENGTH) {\n      throw new AvroRuntimeException(\"String length \" + length + \" exceeds maximum allowed\");\n    }\n  }\n\n  /** Gets the UTF-8 bytes for a String */\n  public static byte[] getBytesFor(String str) {\n    return str.getBytes(StandardCharsets.UTF_8);\n  }\n}<｜fim▁end｜>",
    "response": "  /** Return length in bytes. */\n  public int getByteLength() {\n    return length;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jcrom.dao;\n<｜fim▁hole｜>\nimport org.jcrom.Jcrom;\nimport org.jcrom.dao.AbstractJcrDAO;\nimport org.jcrom.entities.Parent3;\n\npublic class ParentDAO3 extends AbstractJcrDAO<Parent3> {\n\n    private static final String[] MIXIN_TYPES = { NodeType.MIX_REFERENCEABLE };\n\n    public ParentDAO3(Session session, Jcrom jcrom) {\n        super(Parent3.class, session, jcrom, MIXIN_TYPES);\n    }\n\n}<｜fim▁end｜>",
    "response": "\nimport javax.jcr.Session;\nimport javax.jcr.nodetype.NodeType;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.boundlessgeo.spatialconnect.stores;\n\nimport android.content.Context;\nimport android.location.Location;\nimport android.util.Log;\n\nimport com.boundlessgeo.spatialconnect.SpatialConnect;\nimport com.boundlessgeo.spatialconnect.config.SCStoreConfig;\nimport com.boundlessgeo.spatialconnect.geometries.SCGeometry;\nimport com.boundlessgeo.spatialconnect.geometries.SCPoint;\nimport com.boundlessgeo.spatialconnect.geometries.SCSpatialFeature;\nimport com.boundlessgeo.spatialconnect.query.SCQueryFilter;\nimport com.boundlessgeo.spatialconnect.scutilities.Json.SCObjectMapper;\nimport com.boundlessgeo.spatialconnect.services.SCSensorService;\nimport com.boundlessgeo.spatialconnect.style.SCStyle;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.vividsolutions.jts.geom.Coordinate;\nimport com.vividsolutions.jts.geom.Geometry;\nimport com.vividsolutions.jts.geom.GeometryFactory;\nimport com.vividsolutions.jts.geom.PrecisionModel;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport rx.Observable;\nimport rx.functions.Action0;\nimport rx.functions.Action1;\n\npublic class LocationStore extends GeoPackageStore implements ISCSpatialStore, SCDataStoreLifeCycle {\n\n    private static final String LOG_TAG = LocationStore.class.getSimpleName();\n    private final String LAST_KNOWN_TABLE = \"last_known_location\";\n    private final String ACCURACY_COLUMN = \"accuracy\";\n    private final String TIMESTAMP_COLUMN = \"timestamp\";\n    public static final String NAME = \"LOCATION_STORE\";\n\n    public LocationStore(Context context, SCStoreConfig scStoreConfig) {\n        this(context, scStoreConfig, null);\n    }\n\n    public LocationStore(Context context, SCStoreConfig scStoreConfig, SCStyle style) {\n        super(context, scStoreConfig, style);\n    }\n\n    public Observable<SCSpatialFeature> create(final SCPoint point) {\n        point.setLayerId(\"last_known_location\");\n        point.setStoreId(getStoreId());\n        Log.d(LOG_TAG, \"writing new location row \" + point.toJson());\n        return super.create(point);\n    }\n\n    @Override\n    public Observable<SCStoreStatusEvent> start() {\n        Observable<SCStoreStatusEvent> storeStatusEvent;\n        storeStatusEvent = super.start();\n        return storeStatusEvent.doOnCompleted(new Action0() {\n            @Override\n            public void call() {\n                //when store started add default config\n                Map<String, String> typeDefs = new HashMap<>();\n                typeDefs.put(ACCURACY_COLUMN,\"TEXT\");\n                typeDefs.put(TIMESTAMP_COLUMN,\"INTEGER\");\n                addLayer(LAST_KNOWN_TABLE, typeDefs);\n\n                listenForLocationUpdate();\n            }\n        });\n    }\n\n    @Override\n<｜fim▁hole｜>    public Observable<SCSpatialFeature> queryById(final SCKeyTuple keyTuple) {\n        return Observable.empty();\n    }\n\n    @Override\n    public Observable<SCSpatialFeature> update(final SCSpatialFeature scSpatialFeature) {\n        return Observable.empty();\n    }\n\n    @Override\n    public Observable<Void> delete(final SCKeyTuple keyTuple) {\n        return Observable.empty();\n    }\n\n    @Override\n    public String syncChannel() {\n        return \"/store/tracking\";\n    }\n\n    @Override\n    public Map<String, Object> generateSendPayload(SCSpatialFeature scSpatialFeature) {\n        SCPoint point = (SCPoint) scSpatialFeature;\n        Map<String, Object> payload =\n                SCObjectMapper.getMapper().convertValue(point, new TypeReference<Object>() {});\n\n        return payload;\n    }\n\n    private void listenForLocationUpdate() {\n        SpatialConnect sc = SpatialConnect.getInstance();\n        SCSensorService ss = sc.getSensorService();\n        ss.isConnected().subscribe(new Action1<Boolean>() {\n            @Override\n            public void call(Boolean connected) {\n                if (connected) {\n                    SpatialConnect sc = SpatialConnect.getInstance();\n                    if (sc.getSensorService() != null) {\n                        SpatialConnect.getInstance()\n                                .getSensorService()\n                                .getLastKnownLocation()\n                                .subscribe(new Action1<Location>() {\n                                    @Override\n                                    public void call(Location location) {\n                                        GeometryFactory geometryFactory = new GeometryFactory(new PrecisionModel(), 0);\n                                        Geometry point = geometryFactory.createPoint(\n                                                new Coordinate(\n                                                        location.getLongitude(),\n                                                        location.getLatitude(),\n                                                        location.getAltitude()\n                                                )\n                                        );\n                                        SCGeometry scFeatureLocationUpdate = new SCGeometry(point);\n                                        scFeatureLocationUpdate.setLayerId(LAST_KNOWN_TABLE);\n                                        scFeatureLocationUpdate.getProperties().put(TIMESTAMP_COLUMN, System.currentTimeMillis());\n                                        scFeatureLocationUpdate.getProperties().put(ACCURACY_COLUMN, \"GPS\");\n\n                                        LocationStore locationStore = SpatialConnect.getInstance().getDataService().getLocationStore();\n                                        locationStore.create(scFeatureLocationUpdate).subscribe();\n                                    }\n                                });\n                    }\n                }\n            }\n        });\n    }\n\n}<｜fim▁end｜>",
    "response": "    public Observable<SCSpatialFeature> query(final SCQueryFilter scFilter) {\n        return Observable.empty();\n    }\n\n    @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.planet_ink.coffee_mud.Abilities.Diseases;\nimport com.planet_ink.coffee_mud.core.interfaces.*;\nimport com.planet_ink.coffee_mud.core.*;\nimport com.planet_ink.coffee_mud.core.collections.*;\nimport com.planet_ink.coffee_mud.Abilities.interfaces.*;\nimport com.planet_ink.coffee_mud.Areas.interfaces.*;\nimport com.planet_ink.coffee_mud.Behaviors.interfaces.*;\nimport com.planet_ink.coffee_mud.CharClasses.interfaces.*;\nimport com.planet_ink.coffee_mud.Commands.interfaces.*;\nimport com.planet_ink.coffee_mud.Common.interfaces.*;\nimport com.planet_ink.coffee_mud.Exits.interfaces.*;\nimport com.planet_ink.coffee_mud.Items.interfaces.*;\nimport com.planet_ink.coffee_mud.Libraries.interfaces.*;\nimport com.planet_ink.coffee_mud.Locales.interfaces.*;\nimport com.planet_ink.coffee_mud.MOBS.interfaces.*;\nimport com.planet_ink.coffee_mud.Races.interfaces.*;\n\nimport java.util.*;\n\npublic class Disease_Sleepwalking extends Disease\n{\n    @Override\n    public String ID()\n    {\n        return \"Disease_Sleepwalking\";\n    }\n\n    private final static String localizedName   = CMLib.lang().L(\"Sleepwalking\");\n\n    @Override\n    public String name()\n<｜fim▁hole｜>\n    private final static String localizedStaticDisplay  = \"\";\n\n    @Override\n    public String displayText()\n    {\n        return localizedStaticDisplay;\n    }\n\n    @Override\n    protected int canAffectCode()\n    {\n        return CAN_MOBS;\n    }\n\n    @Override\n    protected int canTargetCode()\n    {\n        return CAN_MOBS;\n    }\n\n    @Override\n    public int abstractQuality()\n    {\n        return Ability.QUALITY_MALICIOUS;\n    }\n\n    @Override\n    public boolean putInCommandlist()\n    {\n        return false;\n    }\n\n    @Override\n    protected int DISEASE_TICKS()\n    {\n        return 10;\n    }\n\n    @Override\n    protected int DISEASE_DELAY()\n    {\n        return 2;\n    }\n\n    @Override\n    protected String DISEASE_DONE()\n    {\n        return L(\"You feel more in control.\");\n    }\n\n    @Override\n    protected String DISEASE_START()\n    {\n        return \"\";\n    }\n\n    @Override\n    protected String DISEASE_AFFECT()\n    {\n        return L(\"\");\n    }\n\n    @Override\n    public int spreadBitmap()\n    {\n        return 0;\n    }\n\n    @Override\n    public int difficultyLevel()\n    {\n        return 2;\n    }\n\n    @Override\n    public boolean okMessage(Environmental myHost, CMMsg msg)\n    {\n        if(!super.okMessage(myHost, msg))\n            return false;\n        if((msg.source()==affected)\n        &&(CMLib.flags().isSleeping(affected))\n        &&((msg.sourceMinor()==CMMsg.TYP_ENTER)\n            ||(msg.sourceMinor()==CMMsg.TYP_LEAVE)))\n        {\n            if(msg.sourceMessage()!=null)\n                msg.setSourceMessage(null);\n        }\n        return true;\n    }\n\n    @Override\n    public boolean tick(Tickable ticking, int tickID)\n    {\n        if(!super.tick(ticking,tickID))\n            return false;\n        if(affected==null)\n            return false;\n        if(!(affected instanceof MOB))\n            return true;\n\n        final MOB mob=(MOB)affected;\n        if((!mob.amDead())&&((--diseaseTick)<=0)&&(CMLib.flags().isSleeping(mob)))\n        {\n            final Room R=mob.location();\n            if((R!=null)&&(CMLib.flags().isInTheGame(mob, true))&&(!CMLib.flags().isBoundOrHeld(mob)))\n            {\n                List<Integer> dirs=new ArrayList<Integer>(1);\n                for(int d : Directions.CODES())\n                {\n                    if((R.getRoomInDir(d)!=null)&&(R.getExitInDir(d)!=null)&&(R.getExitInDir(d).isOpen()))\n                        dirs.add(Integer.valueOf(d));\n                }\n                if(dirs.size()>0)\n                {\n                    int dir=dirs.get(CMLib.dice().roll(1, dirs.size(), -1)).intValue();\n                    CMLib.tracking().walk(mob, dir, false, true, true, true);\n                }\n            }\n            if(mob.location()==R)\n                diseaseTick=DISEASE_DELAY();\n            else\n                diseaseTick=CMLib.dice().roll(1, 3, -1);\n        }\n        return true;\n    }\n}<｜fim▁end｜>",
    "response": "    {\n        return localizedName;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package elki.math.statistics.tests;\n\nimport static org.junit.Assert.assertEquals;\n\nimport java.util.Random;\n\nimport org.junit.Test;\n\n<｜fim▁hole｜>    Random r = new Random(0L);\n    double[][] a = new double[3][size];\n    for(int j = 0; j < a.length; j++) {\n      for(int i = 0; i < size; i++) {\n        a[j][i] = r.nextDouble();\n      }\n    }\n    for(int j = 0; j < a.length; j++) {\n      assertEquals(\"t-test identical\", 0., WelchTTest.STATIC.deviation(a[0], a[0]), 0);\n    }\n    // These values are approximately uniform distributed if we sample\n    // differently, showing that you can only use the Welch T-Test to reject\n    assertEquals(\"t-test i.i.d.\", .612, WelchTTest.STATIC.deviation(a[0], a[1]), 1e-3);\n    assertEquals(\"t-test i.i.d.\", .541, WelchTTest.STATIC.deviation(a[0], a[2]), 1e-3);\n    // Now the values become much larger if we increate the offsets\n    VMath.plusEquals(a[1], .01);\n    assertEquals(\"t-test +.01\", .898, WelchTTest.STATIC.deviation(a[0], a[1]), 1e-3);\n    VMath.plusEquals(a[2], .1);\n    assertEquals(\"t-test +.1\", 1, WelchTTest.STATIC.deviation(a[0], a[2]), 0.);\n  }\n}<｜fim▁end｜>",
    "response": "import elki.math.linearalgebra.VMath;\n\npublic class WelchTTestTest {\n  @Test\n  public void basic() {\n    int size = 1000;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.kuali.rice.kew.api.rule;\n\nimport org.kuali.rice.core.api.mo.common.GloballyUnique;\nimport org.kuali.rice.core.api.mo.common.Identifiable;\nimport org.kuali.rice.core.api.mo.common.Versioned;\n\nimport java.util.List;\n\npublic interface RuleResponsibilityContract extends Identifiable, GloballyUnique, Versioned {\n\n    /**\n     * Unique Id for Responsibility.\n     *\n     * <p>\n     * This is the unique Id of the Responsibility\n     * </p>\n     *\n     * @return responsibilityId\n     */\n    String getResponsibilityId();\n\n    /**\n     * code for the Action Requested\n     *\n     * <p>\n     * This code matches the unique code for an ActionRequest\n     * </p>\n     *\n     * @return actionRequestedCd\n     */\n    String getActionRequestedCd();\n\n    /**\n     * integer representation of the priority of the RuleResponsibility\n     *\n     * @return priority\n     */\n    Integer getPriority();\n\n    /**\n     * approval policy for the RuleResponsibility\n     *\n     * @return approvalPolicy\n     */\n    String getApprovePolicy();\n\n    /**\n     * unique id of the Principal for the RuleResponsibility\n     *\n     * @return principalId\n     */\n    String getPrincipalId();\n\n    /**\n     * unique id of the Group for the RuleResponsibility\n     *\n     * @return groupId\n     */\n    String getGroupId();\n<｜fim▁hole｜>     * unique name of the Role for the RuleResponsibility\n     *\n     * @return groupId\n     */\n    String getRoleName();\n\n    /**\n     * list of RuleDelegations for the RuleResponsibility\n     *\n     * @return delegationRules\n     */\n    List<? extends RuleDelegationContract> getDelegationRules();\n\n    /**\n     * determines if the RuleResponsibiltity is using a kim Role\n     *\n     * @return boolean value representing if the RuleResponsibility is using a Role\n     */\n    boolean isUsingRole();\n\n    /**\n     * determines if the RuleResponsibiltity is using a kim Principal\n     *\n     * @return boolean value representing if the RuleResponsibility is using a Principal\n     */\n    boolean isUsingPrincipal();\n\n    /**\n     * determines if the RuleResponsibiltity is using a kim Group\n     *\n     * @return boolean value representing if the RuleResponsibility is using a Group\n     */\n    boolean isUsingGroup();\n}<｜fim▁end｜>",
    "response": "\n    /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.wx.sdk.mutikf.response;\n\nimport org.wx.sdk.base.Response;\n\npublic class KfSessionGetRespone extends Response {\n    /** 正在接待的客服，为空表示没有人在接待 */\n    private String kf_account;\n    /** 会话接入的时间 */\n    private Long createtime;\n\n    public String getKf_account() {\n        return kf_account;\n    }\n    public void setKf_account(String kf_account) {\n        this.kf_account = kf_account;\n    }\n\n    public Long getCreatetime() {\n<｜fim▁hole｜>    public void setCreatetime(Long createtime) {\n        this.createtime = createtime;\n    }\n\n}<｜fim▁end｜>",
    "response": "        return createtime;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.octagon.airships.block;\n\nimport com.octagon.airships.block.multiblock.BlockMultiblockPart;\nimport com.octagon.airships.reference.Reference;\nimport net.minecraft.block.material.Material;\nimport net.minecraft.client.renderer.texture.IIconRegister;\nimport net.minecraft.util.IIcon;\nimport net.minecraftforge.common.util.ForgeDirection;\n\npublic class BlockLaunchPadIO extends BlockMultiblockPart {\n    private static final class Icons {\n        public static IIcon endsIcon;\n    }\n\n    public BlockLaunchPadIO() {\n        super(Material.iron);\n    }\n\n    @Override\n    public void registerBlockIcons(IIconRegister registry) {\n        super.registerBlockIcons(registry);\n<｜fim▁hole｜>        setTexture(ForgeDirection.UP, Icons.endsIcon);\n        setTexture(ForgeDirection.DOWN, Icons.endsIcon);\n    }\n}<｜fim▁end｜>",
    "response": "\n        Icons.endsIcon = registry.registerIcon(Reference.MOD_ID + \":launchPadIO_ends\");\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package repackaged.com.sun.midp.ssl;\n\nimport java.io.InputStream;\nimport java.io.IOException;\nimport java.io.InterruptedIOException;\n\nclass In extends InputStream {\n    /** Indicates the input stream is closed. */\n<｜fim▁hole｜>    private Record rec;\n\n    /** Start of plain text in data buffer. */\n    private int start;\n    /** Count of unread bytes left in data buffer. */\n    private int cnt;\n    /** Handle for current SSL stream connection. */\n    private SSLStreamConnection ssc;\n    /** Signals end of stream. */\n    private boolean endOfStream = false;\n\n    /**\n     * Refills the internal store of decrypted bytes. Called when \n     * the byte count in the store reaches zero.\n     *\n     * @param block if true the method will not return until data is available,\n     *              or end of stream\n     *\n     * @exception IOException is thrown, if an I/O error occurs filling the\n     * the buffer\n     */\n    private void refill(boolean block) throws IOException {\n        if (endOfStream) {\n            return;\n        }\n\n        for (; ;) {\n            rec.rdRec(block, Record.APP);\n            if (rec.plainTextLength == -1) {\n                endOfStream = true;\n                return;\n            }\n\n            // Do not unblock on a zero byte record unless asked\n            if (!block || rec.plainTextLength > 0) {\n                break;\n            }\n        }\n\n        cnt = rec.plainTextLength;\n        start = 0;\n    }\n\n    /**\n     * Creates a new In object.\n     * <P />\n     * @param r Record layer object from which input bytes are read\n     * @param c SSLStreamConnection object this In object is a part of\n     */ \n    In(Record r, SSLStreamConnection c) {\n        rec = r;\n        ssc = c;\n    }\n\n    /**\n     * Reads a byte from this input stream. The method blocks if no\n     * input is available.\n     * <P />\n     * @return the next byte of data, or -1 if end of stream is reached\n     * @exception IOException if an I/O error occurs\n     */ \n    public int read() throws IOException {\n        int val;\n        if (isClosed) {\n            throw new InterruptedIOException(\"Stream closed\");\n        }\n\n        synchronized(rec) {\n            if (cnt == 0) {\n                refill(true);\n                if (cnt == 0) {\n                    return -1; // end of stream\n                }\n            }\n\n            val = rec.inputData[start++] & 0xff;\n            cnt--;\n        }\n\n        return val;\n    }\n\n    /**\n     * Reads up to <CODE>b.length</CODE> bytes of data from this\n     * input stream into the byte array <CODE>b</CODE>. Blocks until \n     * some input is available. This is equivalent to \n     * <CODE>read(b, 0, b.length)</CODE>.\n     * <P />\n     * @param b the buffer into which data is read\n     * @return the actual number of bytes read into the buffer, or -1\n     * if there is no more data and the end of input stream has been\n     * reached\n     * @exception IOException if an I/O error occurs\n     */ \n    public int read(byte[] b) throws IOException {\n        return read(b, 0, b.length);\n    }\n\n    /**\n     * Reads up to <CODE>len</CODE> bytes of data from this input stream\n     * into <CODE>b</CODE> starting at offset <CODE>off</CODE>.\n     * <P />\n     * @param b buffer into which data is read\n     * @param off starting offset where data is read\n     * @param len maximum number of bytes to be read\n     * return the actual number of bytes read into the buffer, or -1\n     * if there is no more data and the end of input stream has been\n     * reached\n     * @return number of bytes read\n     * @exception IOException if an I/O error occurs\n     */ \n    public int read(byte[] b, int off, int len) throws IOException {\n\n        int i = 0;\n        int numBytes;\n\n        if (isClosed) {\n            throw new InterruptedIOException(\"Stream closed\");\n        }\n\n        synchronized(rec) {\n            if (cnt == 0) {\n                // Record buffer empty, block until it is refilled.\n                refill(true);\n                if (cnt == 0) {\n                    return -1; // end of stream\n                }\n            }\n\n            if (len > cnt) {\n                numBytes = cnt;\n            } else {\n                numBytes = len;\n            }\n\n            System.arraycopy(rec.inputData, start, b, off, numBytes);\n            start += numBytes;\n            cnt -= numBytes;\n        }\n\n        return numBytes;\n    }\n\n    /**\n     * Close the stream connection.\n     *\n     * @exception IOException is thrown, if an I/O error occurs while\n     * shutting down the connection\n     */\n    synchronized public void close() throws IOException {\n        if (isClosed) {\n            return;\n        }\n\n        isClosed = true;\n        if (ssc != null) {\n            ssc.inputStreamState = SSLStreamConnection.CLOSED;\n            rec.closeInputStream();\n            ssc.cleanupIfNeeded();\n        }\n    }\n\n    /**\n     * Returns the number of bytes that can be read (or skipped over) from\n     * this input stream without blocking by the next caller of a method for\n     * this input stream.  The next caller might be the same thread or\n     * another thread.\n     *\n     * @return     the number of bytes that can be read from this input stream\n     *             without blocking.\n     *\n     * @exception  IOException  if an I/O error occurs.\n     */\n    public int available() throws IOException {\n        if (isClosed) {\n            throw new InterruptedIOException(\"Stream closed\");\n        }\n\n        synchronized(rec) {\n            if (cnt == 0) {\n                // The record buffer is empty, try to refill it without blocking.\n                refill(false);\n            }\n            return cnt;\n        }\n    }\n\n    /*\n     * The remaining methods: markSupported(), mark(int), \n     * reset() need not be overridden\n     */ \n}<｜fim▁end｜>",
    "response": "    private boolean isClosed = false;\n\n    /** Underlying SSL record layer from which bytes are read. */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>\nimport android.view.View;\n\nimport com.nineoldandroids.animation.ObjectAnimator;\n\nimport com.yostajsc.style.designs.animations.BaseViewAnimator;\n\npublic class FadeInRightAnimator extends BaseViewAnimator {\n    @Override\n    public void prepare(View target) {\n        getAnimatorAgent().playTogether(\n                ObjectAnimator.ofFloat(target, \"alpha\", 0, 1),\n                ObjectAnimator.ofFloat(target, \"translationX\", target.getWidth() / 4, 0)\n        );\n    }\n}<｜fim▁end｜>",
    "response": "package com.yostajsc.style.designs.animations.fading_entrances;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.plushware.alarmclock;\n\nimport android.content.BroadcastReceiver;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.util.Log;\n\npublic class WakeupReceiver extends BroadcastReceiver {\n    public static final String TAG = \"WakeupReceiver\";\n\n    @Override\n    public void onReceive(Context context, Intent intent) {\n<｜fim▁hole｜>        if (action == null) {\n            alarmOn(context);\n        } else if (action == AlarmClock.INTENT_ALARM_OFF) {\n            // TODO?\n        }\n    }\n\n    private void alarmOn(Context context) {\n        Log.d(TAG, \"Time to wake up!\");\n\n        Intent clockIntent = new Intent(context, ClockActivity.class);\n        clockIntent.putExtra(\"ALARM_IS_ON\", true);\n        clockIntent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION | Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(clockIntent);\n\n        context.sendBroadcast(new Intent(AlarmClock.INTENT_ALARM_ON));      \n        context.sendBroadcast(new Intent(AlarmClock.INTENT_SCREEN_ON));\n    }\n}<｜fim▁end｜>",
    "response": "        String action = intent.getAction();\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package syntax1;\n\nimport java.lang.annotation.*;\nimport java.util.*;\n\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD, ElementType.TYPE)\npublic @interface Syntax1\n<｜fim▁hole｜>    String elementName();\n}<｜fim▁end｜>",
    "response": "{\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.dbstar.crashcanary.model;\n\nimport java.io.Serializable;\n<｜fim▁hole｜>    private String stackTrace;\n\n    public CrashCause(String stackTrace) {\n        this.stackTrace = stackTrace;\n    }\n\n    public String getStackTrace() {\n        return stackTrace;\n    }\n\n    @Override\n    public String toString() {\n        return \"CrashCause{\" +\n                \"stackTrace='\" + stackTrace + '\\'' +\n                '}';\n    }\n}<｜fim▁end｜>",
    "response": "\npublic class CrashCause implements Serializable {\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package storm.starter;\n\nimport org.apache.storm.state.KeyValueState;\nimport org.apache.storm.state.OurCustomPair;\nimport org.apache.storm.task.OutputCollector;\nimport org.apache.storm.topology.base.BaseStatefulBolt;\nimport org.apache.storm.tuple.Tuple;\nimport org.apache.storm.tuple.Values;\nimport org.apache.storm.utils.DisruptorQueue;\nimport org.apache.storm.utils.Utils;\n\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.Serializable;\nimport java.util.*;\n\npublic abstract class OurStatefulBolt<T,V> extends BaseStatefulBolt<KeyValueState<T, V>> {\n    //FIXME: our declared vars start\n    boolean commitFlag=false,drainDone=false,passThrough=false;\n    private static final Object DRAIN_LOCK = new Object();\n\n<｜fim▁hole｜>    private List<Tuple> ourOutTuples = new ArrayList();\n\n    KeyValueState<T, V> kvstate;\n    OutputCollector collector;\n\n    //FIXME: inQueue\n\n    @Override\n    public void prePrepare(long txid) {\n        System.out.println(\"TEST:prePrepare\");\n\n        synchronized (DRAIN_LOCK) {\n            drainDone=false;\n\n            do {\n                try {\n                    DRAIN_LOCK.wait(5000); // race condition to be fixed (5 sec wait)\n                    drainDone=true;\n                    return;\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n\n            while(true);\n\n        }\n\n    }\n\n    public  boolean preExecute(Tuple in) // logic for checking commit flag thing accumulate msg\n\n    {\n\n        System.out.println(\"TEST:preExecute\");\n\n              ourPendingTuples.add(in);\n\n            synchronized (DRAIN_LOCK) {\n                if (!drainDone) {\n\n                    //FIXME: remove dummy\n\n                    System.out.println(\"TEST:preExecute written to dummy\");\n                    DRAIN_LOCK.notify();\n                    return false;\n                }\n            }\n        return true;\n    }\n\n    @Override\n    public void preCommit(long txid) {\n        kvstate.put((T)\"OUR_OUT_TUPLES\",(V)ourOutTuples);\n        kvstate.put((T)\"OUR_PENDING_TUPLES\",(V)ourPendingTuples);\n        System.out.println(\"TEST:preCommit\");\n\n    }\n\n    public  void emit(Tuple input, Values out) // used by user for emitting\n    {\n        System.out.println(\"TEST:emit\");\n\n        synchronized (DRAIN_LOCK) {\n            if (!drainDone) {\n\n                DRAIN_LOCK.notify();\n                return ;\n            }\n        }\n                collector.emit(input,out);\n                collector.ack(input);\n\n    }\n\n    @Override\n    public void initState(KeyValueState<T, V> state) {\n        System.out.println(\"TEST:initState start\");\n        System.out.println(state.getClass());\n        kvstate=state;\n        //FIXME: remove dummy code\n\n        ourOutTuples= (List<Tuple>) state.get((T) \"OUR_OUT_TUPLES\",  (V)new ArrayList<Tuple>());\n        ourPendingTuples= (List<Tuple>) state.get((T) \"OUR_PENDING_TUPLES\",(V) new ArrayList<Tuple>());\n\n        System.out.println(\"TEST: restored tuples from redis ourOutTuples:\"+ourOutTuples.size()+\"ourPendingTuples:\"+ourPendingTuples.size());\n\n        // send first\n\n        System.out.println(\"TEST:initState finish\");\n    }\n\n}<｜fim▁end｜>",
    "response": "    private List<Tuple> ourPendingTuples = new ArrayList();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.kneelawk.sortingpipes.network.packet;\n\nimport net.minecraft.nbt.NBTTagCompound;\n\npublic class SPLocationPacket extends SPNBTPacket {\n\n    protected int x, y, z, dimId;\n\n    public SPLocationPacket() {\n    }\n\n    public SPLocationPacket(int x, int y, int z, int dimId) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.dimId = dimId;\n    }\n\n    public void setLocation(int x, int y, int z, int dimId) {\n<｜fim▁hole｜>    }\n\n    public void setX(int x) {\n        this.x = x;\n    }\n\n    public void setY(int y) {\n        this.y = y;\n    }\n\n    public void setZ(int z) {\n        this.z = z;\n    }\n\n    public void setDimId(int dimId) {\n        this.dimId = dimId;\n    }\n\n    public int getX() {\n        return x;\n    }\n\n    public int getY() {\n        return y;\n    }\n\n    public int getZ() {\n        return z;\n    }\n\n    public int getDimId() {\n        return dimId;\n    }\n\n    @Override\n    public void readFromNBT(NBTTagCompound tag) {\n        x = tag.getInteger(\"x\");\n        y = tag.getInteger(\"y\");\n        z = tag.getInteger(\"z\");\n        dimId = tag.getInteger(\"dimId\");\n    }\n\n    @Override\n    public void writeToNBT(NBTTagCompound tag) {\n        tag.setInteger(\"x\", x);\n        tag.setInteger(\"y\", y);\n        tag.setInteger(\"z\", z);\n        tag.setInteger(\"dimId\", dimId);\n    }\n\n}<｜fim▁end｜>",
    "response": "        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.dimId = dimId;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.silverpeas.kmelia.updatechainhelpers;\n\nimport java.util.List;\n\nimport com.stratelia.webactiv.kmelia.control.KmeliaSessionController;\nimport com.stratelia.webactiv.kmelia.model.updatechain.FieldUpdateChainDescriptor;\nimport com.stratelia.webactiv.util.node.model.NodeDetail;\nimport com.stratelia.webactiv.util.publication.model.PublicationDetail;\n\npublic class UpdateChainHelperContext {\n\n  private PublicationDetail pubDetail;\n  private String[] topics;\n  private List<NodeDetail> allTopics;\n  private FieldUpdateChainDescriptor descriptor;\n  private KmeliaSessionController kmeliaScc;\n\n  public KmeliaSessionController getKmeliaScc() {\n    return kmeliaScc;\n  }\n\n  public UpdateChainHelperContext() {\n\n  }\n\n  public UpdateChainHelperContext(PublicationDetail pubDetail, KmeliaSessionController kmeliaScc) {\n    this.pubDetail = pubDetail;\n    this.kmeliaScc = kmeliaScc;\n  }\n\n  public UpdateChainHelperContext(PublicationDetail pubDetail) {\n    this.pubDetail = pubDetail;\n  }\n\n  public PublicationDetail getPubDetail() {\n    return pubDetail;\n  }\n\n  public void setPubDetail(PublicationDetail pubDetail) {\n    this.pubDetail = pubDetail;\n  }\n\n  public String[] getTopics() {\n    return topics;\n  }\n\n  public void setTopics(String[] topics) {\n    this.topics = topics;\n  }\n<｜fim▁hole｜>    this.descriptor = descriptor;\n  }\n\n  public List<NodeDetail> getAllTopics() {\n    return allTopics;\n  }\n\n  public void setAllTopics(List<NodeDetail> allTopics) {\n    this.allTopics = allTopics;\n  }\n\n}<｜fim▁end｜>",
    "response": "\n  public FieldUpdateChainDescriptor getDescriptor() {\n    return descriptor;\n  }\n\n  public void setDescriptor(FieldUpdateChainDescriptor descriptor) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import java.io.*;\nimport java.util.Scanner;\nimport java.io.FileNotFoundException;\n\npublic class FilereaderAscii\n{\n\n   private static File file;\n\n   private static Scanner in = new Scanner(System.in);\n   private static Scanner inFile;\n        public static void main(String[] args) throws FileNotFoundException\n        {\n            System.out.print(\"Nome del file da aprire?: \");\n            System.out.println();\n            file = new File(in.next());\n            inFile = new Scanner(file);\n\n            String token=\"\";\n\n            char subString;\n\n            int asciiCode = 0;\n\n            while (inFile.hasNext())\n            {\n\n<｜fim▁hole｜>                int index = 0;\n                for (int i=0; i<token.length(); i++)\n                {\n                    subString = token.charAt(index);\n                    System.out.println(subString);\n\n                    asciiCode = (int) subString; //cast da CHAR a INTEGER\n                    System.out.println(\"  --- Char's ASCII code is = \" + asciiCode);\n\n                    index++;\n                }\n\n                System.out.println();\n            }\n        }\n}<｜fim▁end｜>",
    "response": "                token = inFile.next();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.android.schoolshowtest.firststrat;\n\nimport android.support.v4.view.ViewPager;\nimport android.view.View;\n\nimport com.nineoldandroids.view.ViewHelper;\n\n<｜fim▁hole｜>\n        int pageWidth = view.getWidth();\n        if (position < -1) {\n            ViewHelper.setAlpha(view, 0);\n\n        } else if (position <= 0) {\n\n            ViewHelper.setAlpha(view, 1);\n            ViewHelper.setTranslationX(view, 0);\n            ViewHelper.setScaleX(view, 1);\n            ViewHelper.setScaleY(view, 1);\n\n        } else if (position <= 1) {\n            ViewHelper.setTranslationX(view, pageWidth * -position);\n            float scaleFactor = MIN_SCALE;\n            ViewHelper.setScaleX(view, scaleFactor);\n\n        } else {\n\n            ViewHelper.setAlpha(view, 0);\n\n        }\n\n    }\n}<｜fim▁end｜>",
    "response": "public class DepthPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.75f;\n    public void transformPage(View view, float position) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package multiagentes.jade.ticktacktoe;\n\nimport jade.core.AID;\nimport jade.core.Agent;\nimport jade.core.behaviours.CyclicBehaviour;\nimport jade.domain.FIPAException;\nimport jade.lang.acl.ACLMessage;\nimport java.util.HashMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport multiagentes.jade.utils.AgentHelper;\n\npublic class Player extends Agent {\n\n    public static final String SERVICE_NAME = \"player\";\n    public static final String SERVICE_TYPE = \"TTTplayer\";\n    protected HashMap<AID, Board> boards;\n    protected int wins;\n    protected int draws;\n    protected int loses;\n\n    /**\n     * Calls the AI to make a movement\n     * @param board game status' representation\n     * @return the movement to be made expressed as an integer\n     * @throws Exception if an invalid movement happens\n     */\n    protected int play(Board board) throws Exception {\n        Movement action = new Movement(board.getMatrix());\n        Integer square = action.getBestMovement();\n        board.doMovement(square, SquareStatus.FRIENDLY);\n        return square;\n    }\n\n    /**\n     * Revome the existing connection with the finished game\n     * @param game the game to be removed\n     */\n    protected void finishGame(AID game) {\n        boards.remove(game);\n    }\n\n    /**\n     * \n     * @return the number of winned games\n     */\n    public int getWins() {\n        return wins;\n    }\n\n    /**\n     * \n     * @return the number of drawed games\n     */\n    public int getDraws() {\n        return draws;\n    }\n\n    /**\n     * \n     * @return the number of lost games\n     */\n    public int getLoses() {\n        return loses;\n    }\n\n    /**\n     * \n     * @return the total number of games played\n     */\n    public int getPlayerGames() {\n        return wins + loses + draws;\n    }\n\n    @Override\n    protected void setup() {\n        super.setup();\n        wins = draws = loses = 0;\n        boards = new HashMap<>();\n        try {\n            AgentHelper.registerYellowPages(this, SERVICE_NAME, SERVICE_TYPE);\n        } catch (FIPAException ex) {\n            Logger.getLogger(Player.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        AgentHelper.log(this, \"Connected and successfully registered in the yellow pages\");\n\n        //first behaviour: manage boards' petitions\n        addBehaviour(new CyclicBehaviour() {\n            @Override\n            public void action() {\n                ACLMessage message = AgentHelper.receiveMessage(myAgent, ACLMessage.PROPOSE);\n                //we've got the board's message that wants we to play\n                if (message != null && !boards.containsKey(message.getSender())) {\n                    //AgentHelper.log(myAgent, \"new propose received from \" + message.getSender().getName());\n                    ACLMessage answer = message.createReply();\n                    answer.setPerformative(ACLMessage.ACCEPT_PROPOSAL);\n                    //all new petitions will be accepted\n                    boards.put(message.getSender(), new Board());\n                    myAgent.send(answer);\n                }\n            }\n        });\n\n        //second behaviour: manage movements\n        addBehaviour(new CyclicBehaviour() {\n<｜fim▁hole｜>                if (message != null)\n                    if (boards.containsKey(message.getSender()))\n                        try {\n                            AID sender = message.getSender();\n                            Board board = boards.get(message.getSender());\n                            Player owner = (Player) myAgent;\n                            final String content = message.getContent();\n                            AgentHelper.log(myAgent, \"new movement received from \" + sender.getName() + \" - \" + content);\n\n                            //Check every option in order to send a response or do something\n                            if (content == null || content.equals(\"\")) {\n                                int action = play(board);\n                                sendAction(sender, Integer.toString(action));\n                                //board.printBoard();\n                            } else if (content.equals(Game.LOSE)) {\n                                loses++;\n                                finishGame(sender);\n                            } else if (content.equals(Game.WIN)) {\n                                wins++;\n                                finishGame(sender);\n                            } else if (content.equals(Game.DRAW)) {\n                                draws++;\n                                finishGame(sender);\n                            } else {\n                                int actionReceived = Integer.parseInt(content);\n                                board.doMovement(actionReceived, SquareStatus.FOE);\n                                int myAction = owner.play(board);\n                                owner.sendAction(sender, Integer.toString(myAction));\n                                AgentHelper.log(myAgent, \"sending the movement \" + myAction);\n                                //board.printBoard();\n                            }\n                        } catch (Exception ex) {\n                            Logger.getLogger(Player.class.getName()).log(Level.SEVERE, null, ex);\n                        }\n            }\n        });\n    }\n\n    /**\n     * Sends an action to a game\n     * @param game the game as a message's receiver \n     * @param content the message to be sent\n     */\n    protected void sendAction(AID game, String content) {\n        AgentHelper.sendMessage(this, game, ACLMessage.INFORM, content);\n    }\n\n}<｜fim▁end｜>",
    "response": "            @Override\n            public void action() {\n                ACLMessage message = AgentHelper.receiveMessage(myAgent, ACLMessage.INFORM);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.elasticsearch.index.fielddata.plain;\n\nimport org.apache.lucene.document.LatLonDocValuesField;\nimport org.apache.lucene.index.DocValuesType;\nimport org.apache.lucene.index.FieldInfo;\nimport org.apache.lucene.index.LeafReader;\nimport org.apache.lucene.index.LeafReaderContext;\nimport org.apache.lucene.search.SortField;\nimport org.elasticsearch.core.Nullable;\nimport org.elasticsearch.common.util.BigArrays;\nimport org.elasticsearch.index.fielddata.IndexFieldData;\nimport org.elasticsearch.index.fielddata.IndexFieldData.XFieldComparatorSource.Nested;\nimport org.elasticsearch.index.fielddata.IndexFieldDataCache;\nimport org.elasticsearch.index.fielddata.IndexGeoPointFieldData;\nimport org.elasticsearch.index.fielddata.LeafGeoPointFieldData;\nimport org.elasticsearch.indices.breaker.CircuitBreakerService;\nimport org.elasticsearch.search.DocValueFormat;\n<｜fim▁hole｜>import org.elasticsearch.search.sort.BucketedSort;\nimport org.elasticsearch.search.sort.SortOrder;\n\npublic abstract class AbstractLatLonPointIndexFieldData implements IndexGeoPointFieldData {\n\n    protected final String fieldName;\n    protected final ValuesSourceType valuesSourceType;\n\n    AbstractLatLonPointIndexFieldData(String fieldName, ValuesSourceType valuesSourceType) {\n        this.fieldName = fieldName;\n        this.valuesSourceType = valuesSourceType;\n    }\n\n    @Override\n    public final String getFieldName() {\n        return fieldName;\n    }\n\n    @Override\n    public ValuesSourceType getValuesSourceType() {\n        return valuesSourceType;\n    }\n\n    @Override\n    public SortField sortField(@Nullable Object missingValue, MultiValueMode sortMode, XFieldComparatorSource.Nested nested,\n            boolean reverse) {\n        throw new IllegalArgumentException(\"can't sort on geo_point field without using specific sorting feature, like geo_distance\");\n    }\n\n    @Override\n    public BucketedSort newBucketedSort(BigArrays bigArrays, Object missingValue, MultiValueMode sortMode, Nested nested,\n            SortOrder sortOrder, DocValueFormat format, int bucketSize, BucketedSort.ExtraData extra) {\n        throw new IllegalArgumentException(\"can't sort on geo_point field without using specific sorting feature, like geo_distance\");\n    }\n\n    public static class LatLonPointIndexFieldData extends AbstractLatLonPointIndexFieldData {\n        public LatLonPointIndexFieldData(String fieldName, ValuesSourceType valuesSourceType) {\n            super(fieldName, valuesSourceType);\n        }\n\n        @Override\n        public LeafGeoPointFieldData load(LeafReaderContext context) {\n            LeafReader reader = context.reader();\n            FieldInfo info = reader.getFieldInfos().fieldInfo(fieldName);\n            if (info != null) {\n                checkCompatible(info);\n            }\n            return new LatLonPointDVLeafFieldData(reader, fieldName);\n        }\n\n        @Override\n        public LeafGeoPointFieldData loadDirect(LeafReaderContext context) throws Exception {\n            return load(context);\n        }\n\n        /** helper: checks a fieldinfo and throws exception if its definitely not a LatLonDocValuesField */\n        static void checkCompatible(FieldInfo fieldInfo) {\n            // dv properties could be \"unset\", if you e.g. used only StoredField with this same name in the segment.\n            if (fieldInfo.getDocValuesType() != DocValuesType.NONE\n                && fieldInfo.getDocValuesType() != LatLonDocValuesField.TYPE.docValuesType()) {\n                throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\" was indexed with docValuesType=\"\n                    + fieldInfo.getDocValuesType() + \" but this type has docValuesType=\"\n                    + LatLonDocValuesField.TYPE.docValuesType() + \", is the field really a LatLonDocValuesField?\");\n            }\n        }\n    }\n\n    public static class Builder implements IndexFieldData.Builder {\n        private final String name;\n        private final ValuesSourceType valuesSourceType;\n\n        public Builder(String name, ValuesSourceType valuesSourceType) {\n            this.name = name;\n            this.valuesSourceType =  valuesSourceType;\n        }\n\n        @Override\n        public IndexFieldData<?> build(IndexFieldDataCache cache, CircuitBreakerService breakerService) {\n            // ignore breaker\n            return new LatLonPointIndexFieldData(name, valuesSourceType);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "import org.elasticsearch.search.MultiValueMode;\nimport org.elasticsearch.search.aggregations.support.ValuesSourceType;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.microsoft.bingads.v10.campaignmanagement;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlRootElement;\nimport javax.xml.bind.annotation.XmlSchemaType;\nimport javax.xml.bind.annotation.XmlType;\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"\", propOrder = {\n    \"accountId\",\n    \"adExtensionIdToEntityIdAssociations\",\n    \"associationType\"\n})\n@XmlRootElement(name = \"DeleteAdExtensionsAssociationsRequest\")\npublic class DeleteAdExtensionsAssociationsRequest {\n\n    @XmlElement(name = \"AccountId\")\n    protected Long accountId;\n    @XmlElement(name = \"AdExtensionIdToEntityIdAssociations\", nillable = true)\n    protected ArrayOfAdExtensionIdToEntityIdAssociation adExtensionIdToEntityIdAssociations;\n    @XmlElement(name = \"AssociationType\")\n    @XmlSchemaType(name = \"string\")\n    protected AssociationType associationType;\n\n    /**\n     * Gets the value of the accountId property.\n     * \n     * @return\n     *     possible object is\n     *     {@link Long }\n     *     \n     */\n    public Long getAccountId() {\n        return accountId;\n    }\n\n    /**\n     * Sets the value of the accountId property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link Long }\n     *     \n     */\n    public void setAccountId(Long value) {\n        this.accountId = value;\n    }\n\n    /**\n     * Gets the value of the adExtensionIdToEntityIdAssociations property.\n     * \n     * @return\n     *     possible object is\n     *     {@link ArrayOfAdExtensionIdToEntityIdAssociation }\n     *     \n     */\n    public ArrayOfAdExtensionIdToEntityIdAssociation getAdExtensionIdToEntityIdAssociations() {\n        return adExtensionIdToEntityIdAssociations;\n    }\n\n    /**\n     * Sets the value of the adExtensionIdToEntityIdAssociations property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link ArrayOfAdExtensionIdToEntityIdAssociation }\n     *     \n     */\n    public void setAdExtensionIdToEntityIdAssociations(ArrayOfAdExtensionIdToEntityIdAssociation value) {\n        this.adExtensionIdToEntityIdAssociations = value;\n    }\n\n    /**\n     * Gets the value of the associationType property.\n     * \n     * @return\n     *     possible object is\n     *     {@link AssociationType }\n     *     \n     */\n    public AssociationType getAssociationType() {\n        return associationType;\n    }\n\n    /**\n     * Sets the value of the associationType property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link AssociationType }\n     *     \n<｜fim▁hole｜>    public void setAssociationType(AssociationType value) {\n        this.associationType = value;\n    }\n\n}<｜fim▁end｜>",
    "response": "     */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.intellij.codeInsight.generation;\n\nimport com.intellij.codeInsight.AnnotationUtil;\nimport com.intellij.codeInsight.NullableNotNullManager;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.psi.codeStyle.CodeStyleSettings;\nimport com.intellij.psi.codeStyle.CodeStyleSettingsManager;\nimport com.intellij.psi.codeStyle.JavaCodeStyleSettings;\nimport com.intellij.util.ArrayUtil;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class OverrideImplementsAnnotationsHandlerImpl implements OverrideImplementsAnnotationsHandler {\n  @Override\n  public String[] getAnnotations(Project project) {\n    List<String> annotations = new ArrayList<>();\n\n    NullableNotNullManager manager = NullableNotNullManager.getInstance(project);\n    annotations.addAll(manager.getNotNulls());\n    annotations.addAll(manager.getNullables());\n\n    annotations.add(AnnotationUtil.NLS);\n<｜fim▁hole｜>  }\n}<｜fim▁end｜>",
    "response": "\n    CodeStyleSettings settings = CodeStyleSettingsManager.getSettings(project);\n    annotations.addAll(settings.getCustomSettings(JavaCodeStyleSettings.class).getRepeatAnnotations());\n\n    return ArrayUtil.toStringArray(annotations);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.github.dannil.scbjavaclient.client.publicfinances.annualaccounts.statementaccountsmunicipality;\n\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\n\nimport com.github.dannil.scbjavaclient.client.AbstractClient;\nimport com.github.dannil.scbjavaclient.communication.URLEndpoint;\nimport com.github.dannil.scbjavaclient.constants.APIConstants;\nimport com.github.dannil.scbjavaclient.model.ResponseModel;\n\npublic class PublicFinancesAnnualAccountsStatementAccountsMunicipalityClient extends AbstractClient {\n\n    private static final String ACTIVITY_CODE = \"Verksomrkom\";\n\n    /**\n     * <p>Default constructor.</p>\n     */\n    public PublicFinancesAnnualAccountsStatementAccountsMunicipalityClient() {\n        super();\n    }\n\n    /**\n     * <p>Overloaded constructor.</p>\n     *\n     * @param locale\n     *            the <code>Locale</code> for this client\n     */\n    public PublicFinancesAnnualAccountsStatementAccountsMunicipalityClient(Locale locale) {\n        super(locale);\n    }\n\n    /**\n     * <p>Fetch all costs and incomes data.</p>\n     *\n     * @return the data wrapped in a list of\n     *         {@link com.github.dannil.scbjavaclient.model.ResponseModel ResponseModel}\n     *         objects\n     *\n     * @see #getCostsAndIncomes(Collection, Collection, Collection)\n     */\n    public List<ResponseModel> getCostsAndIncomes() {\n        return getCostsAndIncomes(null, null, null);\n    }\n\n    /**\n     * <p>Fetch all costs and incomes data which match the input constraints.</p>\n     *\n     * @param regions\n     *            the regions\n     * @param activities\n     *            the activities\n     * @param years\n     *            the years\n     * @return the data wrapped in a list of\n     *         {@link com.github.dannil.scbjavaclient.model.ResponseModel ResponseModel}\n     *         objects\n     */\n    public List<ResponseModel> getCostsAndIncomes(Collection<String> regions, Collection<Integer> activities,\n            Collection<Integer> years) {\n        Map<String, Collection<?>> mappings = new HashMap<>();\n        mappings.put(APIConstants.REGION_CODE, regions);\n        mappings.put(ACTIVITY_CODE, activities);\n        mappings.put(APIConstants.TIME_CODE, years);\n\n        return getResponseModels(\"KostnDR\", mappings);\n    }\n\n    /**\n     * <p>Fetch all purchase of main activities data.</p>\n     *\n     * @return the data wrapped in a list of\n     *         {@link com.github.dannil.scbjavaclient.model.ResponseModel ResponseModel}\n     *         objects\n     *\n     * @see #getPurchaseOfMainActivities(Collection, Collection, Collection)\n     */\n    public List<ResponseModel> getPurchaseOfMainActivities() {\n        return getPurchaseOfMainActivities(null, null, null);\n    }\n\n<｜fim▁hole｜>     *\n     * @param regions\n     *            the regions\n     * @param activities\n     *            the activities\n     * @param years\n     *            the years\n     * @return the data wrapped in a list of\n     *         {@link com.github.dannil.scbjavaclient.model.ResponseModel ResponseModel}\n     *         objects\n     */\n    public List<ResponseModel> getPurchaseOfMainActivities(Collection<String> regions, Collection<Integer> activities,\n            Collection<Integer> years) {\n        Map<String, Collection<?>> mappings = new HashMap<>();\n        mappings.put(APIConstants.REGION_CODE, regions);\n        mappings.put(ACTIVITY_CODE, activities);\n        mappings.put(APIConstants.TIME_CODE, years);\n\n        return getResponseModels(\"KopDr\", mappings);\n    }\n\n    /**\n     * <p>Fetch all costs of individual and family care data.</p>\n     *\n     * @return the data wrapped in a list of\n     *         {@link com.github.dannil.scbjavaclient.model.ResponseModel ResponseModel}\n     *         objects\n     *\n     * @see #getCostsOfIndividualAndFamilyCare(Collection, Collection, Collection)\n     */\n    public List<ResponseModel> getCostsOfIndividualAndFamilyCare() {\n        return getCostsOfIndividualAndFamilyCare(null, null, null);\n    }\n\n    /**\n     * <p>Fetch all costs of individual and family care data which match the input\n     * constraints.</p>\n     *\n     * @param regions\n     *            the regions\n     * @param cares\n     *            the cares\n     * @param years\n     *            the years\n     * @return the data wrapped in a list of\n     *         {@link com.github.dannil.scbjavaclient.model.ResponseModel ResponseModel}\n     *         objects\n     */\n    public List<ResponseModel> getCostsOfIndividualAndFamilyCare(Collection<String> regions, Collection<Integer> cares,\n            Collection<Integer> years) {\n        Map<String, Collection<?>> mappings = new HashMap<>();\n        mappings.put(APIConstants.REGION_CODE, regions);\n        mappings.put(\"Omsorg\", cares);\n        mappings.put(APIConstants.TIME_CODE, years);\n\n        return getResponseModels(\"IndFamTkrRN\", mappings);\n    }\n\n    /**\n     * <p>Fetch all grants data.</p>\n     *\n     * @return the data wrapped in a list of\n     *         {@link com.github.dannil.scbjavaclient.model.ResponseModel ResponseModel}\n     *         objects\n     *\n     * @see #getGrants(Collection, Collection, Collection)\n     */\n    public List<ResponseModel> getGrants() {\n        return getGrants(null, null, null);\n    }\n\n    /**\n     * <p>Fetch all grants data which match the input constraints.</p>\n     *\n     * @param regions\n     *            the regions\n     * @param activities\n     *            the activities\n     * @param years\n     *            the years\n     * @return the data wrapped in a list of\n     *         {@link com.github.dannil.scbjavaclient.model.ResponseModel ResponseModel}\n     *         objects\n     */\n    public List<ResponseModel> getGrants(Collection<String> regions, Collection<Integer> activities,\n            Collection<Integer> years) {\n        Map<String, Collection<?>> mappings = new HashMap<>();\n        mappings.put(APIConstants.REGION_CODE, regions);\n        mappings.put(ACTIVITY_CODE, activities);\n        mappings.put(APIConstants.TIME_CODE, years);\n\n        return getResponseModels(\"Lamnadebidrag\", mappings);\n    }\n\n    /**\n     * <p>Fetch all some incomes data.</p>\n     *\n     * @return the data wrapped in a list of\n     *         {@link com.github.dannil.scbjavaclient.model.ResponseModel ResponseModel}\n     *         objects\n     *\n     * @see #getSomeIncomes(Collection, Collection, Collection)\n     */\n    public List<ResponseModel> getSomeIncomes() {\n        return getSomeIncomes(null, null, null);\n    }\n\n    /**\n     * <p>Fetch all some incomes data which match the input constraints.</p>\n     *\n     * @param regions\n     *            the regions\n     * @param activities\n     *            the activities\n     * @param years\n     *            the years\n     * @return the data wrapped in a list of\n     *         {@link com.github.dannil.scbjavaclient.model.ResponseModel ResponseModel}\n     *         objects\n     */\n    public List<ResponseModel> getSomeIncomes(Collection<String> regions, Collection<Integer> activities,\n            Collection<Integer> years) {\n        Map<String, Collection<?>> mappings = new HashMap<>();\n        mappings.put(APIConstants.REGION_CODE, regions);\n        mappings.put(ACTIVITY_CODE, activities);\n        mappings.put(APIConstants.TIME_CODE, years);\n\n        return getResponseModels(\"Vissaintakter\", mappings);\n    }\n\n    @Override\n    public URLEndpoint getUrl() {\n        return getRootUrl().append(\"OE/OE0107/OE0107B/\");\n    }\n\n}<｜fim▁end｜>",
    "response": "    /**\n     * <p>Fetch all purchase of main activities data which match the input\n     * constraints.</p>\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.itachi1706.cheesecakeutilities.modules.vehicleMileageTracker.fragments;\n\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport androidx.fragment.app.Fragment;\nimport androidx.recyclerview.widget.DefaultItemAnimator;\nimport androidx.recyclerview.widget.LinearLayoutManager;\nimport androidx.recyclerview.widget.RecyclerView;\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout;\n\nimport com.itachi1706.helperlib.helpers.PrefHelper;\nimport com.itachi1706.cheesecakeutilities.objects.DualLineString;\nimport com.itachi1706.cheesecakeutilities.R;\nimport com.itachi1706.cheesecakeutilities.recyclerAdapters.DualLineStringRecyclerAdapter;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport static com.itachi1706.cheesecakeutilities.modules.vehicleMileageTracker.VehMileageFirebaseUtils.MILEAGE_DEC;\n\npublic abstract class VehicleMileageFragmentBase extends Fragment {\n\n    public DualLineStringRecyclerAdapter adapter;\n    public SwipeRefreshLayout refreshLayout;\n    public SharedPreferences sp;\n    public boolean decimal;\n\n    public VehicleMileageFragmentBase() {\n        // Required empty public constructor\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n                             Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        View v = inflater.inflate(R.layout.fragment_refreshable_recycler_view, container, false);\n\n        RecyclerView recyclerView = v.findViewById(R.id.recycler_view);\n        if (recyclerView != null) {\n            recyclerView.setHasFixedSize(true);\n            LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getActivity());\n            linearLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);\n            recyclerView.setLayoutManager(linearLayoutManager);\n            recyclerView.setItemAnimator(new DefaultItemAnimator());\n\n            // Set up blank layout for now\n            List<DualLineString> placeholder = new ArrayList<>();\n            placeholder.add(new DualLineString(\"Loading...\", \"Calculating statistics...\"));\n<｜fim▁hole｜>        }\n        refreshLayout = v.findViewById(R.id.pull_to_refresh);\n        refreshLayout.setOnRefreshListener(this::updateStats);\n        refreshLayout.setColorSchemeResources(\n                R.color.refresh_progress_1,\n                R.color.refresh_progress_2);\n\n        return v;\n    }\n\n    @Override\n    public void onResume() {\n        super.onResume();\n        updateStats();\n    }\n\n    public abstract void updateStats();\n\n}<｜fim▁end｜>",
    "response": "            adapter = new DualLineStringRecyclerAdapter(placeholder, false);\n            recyclerView.setAdapter(adapter);\n\n            sp = PrefHelper.getDefaultSharedPreferences(getActivity().getApplicationContext());\n            decimal = sp.getBoolean(MILEAGE_DEC, true);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.sf.jasperreports.olap;\n\nimport java.util.Map;\n\nimport mondrian.olap.Connection;\nimport net.sf.jasperreports.engine.JRDataset;\nimport net.sf.jasperreports.engine.JRException;\nimport net.sf.jasperreports.engine.query.JRQueryExecuter;\nimport net.sf.jasperreports.engine.query.JRQueryExecuterFactory;\n\npublic class JRMondrianQueryExecuterFactory implements JRQueryExecuterFactory\n{\n    /**\n     * Built-in parameter holding the value of the Mondrian connection to be used for creating the query.\n     */\n    public final static String PARAMETER_MONDRIAN_CONNECTION = \"MONDRIAN_CONNECTION\";\n\n    private final static Object[] MONDRIAN_BUILTIN_PARAMETERS = {\n        PARAMETER_MONDRIAN_CONNECTION,  Connection.class,\n        };\n\n    public Object[] getBuiltinParameters()\n    {\n        return MONDRIAN_BUILTIN_PARAMETERS;\n    }\n\n    public JRQueryExecuter createQueryExecuter(JRDataset dataset, Map parameters) throws JRException\n<｜fim▁hole｜>        return new JRMondrianQueryExecuter(dataset, parameters);\n    }\n\n    public boolean supportsQueryParameterType(String className)\n    {\n        return true;\n    }\n}<｜fim▁end｜>",
    "response": "    {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.siyeh.ig.serialization;\n\nimport com.intellij.psi.PsiClass;\nimport com.siyeh.InspectionGadgetsBundle;\nimport com.siyeh.ig.BaseInspection;\nimport com.siyeh.ig.BaseInspectionVisitor;\nimport com.siyeh.ig.psiutils.SerializationUtils;\nimport org.jetbrains.annotations.NotNull;\n\npublic class ExternalizableWithSerializationMethodsInspection\n        extends BaseInspection {\n\n    @NotNull\n    public String getID(){\n        return \"ExternalizableClassWithSerializationMethods\";\n    }\n\n    @NotNull\n<｜fim▁hole｜>        return InspectionGadgetsBundle.message(\n                \"externalizable.with.serialization.methods.display.name\");\n    }\n\n    @NotNull\n    public String buildErrorString(Object... infos) {\n        final boolean hasReadObject = ((Boolean)infos[0]).booleanValue();\n        final boolean hasWriteObject = ((Boolean)infos[1]).booleanValue();\n        if (hasReadObject && hasWriteObject) {\n            return InspectionGadgetsBundle.message(\n                    \"externalizable.with.serialization.methods.problem.descriptor.both\");\n        } else if (hasWriteObject) {\n            return InspectionGadgetsBundle.message(\n                    \"externalizable.with.serialization.methods.problem.descriptor.write\");\n        } else {\n            return InspectionGadgetsBundle.message(\n                    \"externalizable.with.serialization.methods.problem.descriptor.read\");\n        }\n    }\n\n    public BaseInspectionVisitor buildVisitor() {\n        return new ExternalizableDefinesSerializationMethodsVisitor();\n    }\n\n    private static class ExternalizableDefinesSerializationMethodsVisitor\n            extends BaseInspectionVisitor {\n\n        @Override public void visitClass(@NotNull PsiClass aClass) {\n            // no call to super, so it doesn't drill down\n            if (aClass.isInterface() || aClass.isAnnotationType()) {\n                return;\n            }\n            if (!SerializationUtils.isExternalizable(aClass)) {\n                return;\n            }\n            final boolean hasReadObject =\n                    SerializationUtils.hasReadObject(aClass);\n            final boolean hasWriteObject =\n                    SerializationUtils.hasWriteObject(aClass);\n            if (!hasWriteObject && !hasReadObject) {\n                return;\n            }\n            registerClassError(aClass, Boolean.valueOf(hasReadObject),\n                    Boolean.valueOf(hasWriteObject));\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    public String getDisplayName() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.undertow.server.handlers.builder;\n\nimport io.undertow.UndertowMessages;\nimport io.undertow.predicate.Predicate;\nimport io.undertow.predicate.PredicateParser;\nimport io.undertow.predicate.Predicates;\nimport io.undertow.server.HandlerWrapper;\nimport io.undertow.util.FileUtils;\n\nimport java.io.File;\nimport java.io.InputStream;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class PredicatedHandlersParser {\n\n    public static List<PredicatedHandler> parse(final File file, final ClassLoader classLoader) {\n        return parse(FileUtils.readFile(file), classLoader);\n    }\n\n    public static List<PredicatedHandler> parse(final InputStream inputStream, final ClassLoader classLoader) {\n        return parse(FileUtils.readFile(inputStream), classLoader);\n    }\n\n    public static List<PredicatedHandler> parse(final String contents, final ClassLoader classLoader) {\n        String[] lines = contents.split(\"\\\\n\");\n        final List<PredicatedHandler> wrappers = new ArrayList<PredicatedHandler>();\n\n        for (String line : lines) {\n            if (line.trim().length() > 0) {\n                Predicate predicate;\n                HandlerWrapper handler;\n                String[] parts = line.split(\"->\");\n<｜fim▁hole｜>                } else {\n                    throw UndertowMessages.MESSAGES.invalidSyntax(line);\n                }\n                wrappers.add(new PredicatedHandler(predicate, handler));\n            }\n        }\n        return wrappers;\n    }\n\n}<｜fim▁end｜>",
    "response": "                if (parts.length == 2) {\n                    predicate = PredicateParser.parse(parts[0], classLoader);\n                    handler = HandlerParser.parse(parts[1], classLoader);\n                } else if (parts.length == 1) {\n                    predicate = Predicates.truePredicate();\n                    handler = HandlerParser.parse(parts[0], classLoader);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.wordpress.android.ui.comments;\n\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.v7.app.ActionBarActivity;\nimport android.view.MenuItem;\n\nimport com.simperium.client.BucketObjectMissingException;\n\nimport org.wordpress.android.R;\nimport org.wordpress.android.models.Note;\nimport org.wordpress.android.ui.notifications.utils.SimperiumUtils;\nimport org.wordpress.android.util.AppLog;\nimport org.wordpress.android.util.ToastUtils;\n\npublic class CommentDetailActivity extends ActionBarActivity {\n\n    public static final String KEY_COMMENT_DETAIL_LOCAL_TABLE_BLOG_ID = \"local_table_blog_id\";\n    public static final String KEY_COMMENT_DETAIL_COMMENT_ID = \"comment_detail_comment_id\";\n    public static final String KEY_COMMENT_DETAIL_NOTE_ID = \"comment_detail_note_id\";\n    public static final String KEY_COMMENT_DETAIL_IS_REMOTE = \"comment_detail_is_remote\";\n\n    private static final String TAG_COMMENT_DETAIL_FRAGMENT = \"tag_comment_detail_fragment\";\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n<｜fim▁hole｜>        setTitle(R.string.comment);\n\n        if (getSupportActionBar() != null) {\n            getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n        }\n\n        if (savedInstanceState == null) {\n            Intent intent = getIntent();\n            CommentDetailFragment commentDetailFragment = null;\n            if (intent.getStringExtra(KEY_COMMENT_DETAIL_NOTE_ID) != null && SimperiumUtils.getNotesBucket() != null) {\n                try {\n                    Note note = SimperiumUtils.getNotesBucket().get(\n                            intent.getStringExtra(KEY_COMMENT_DETAIL_NOTE_ID)\n                    );\n\n                    if (intent.hasExtra(KEY_COMMENT_DETAIL_IS_REMOTE)) {\n                        commentDetailFragment = CommentDetailFragment.newInstanceForRemoteNoteComment(note.getId());\n                    } else {\n                        commentDetailFragment = CommentDetailFragment.newInstance(note.getId());\n                    }\n                } catch (BucketObjectMissingException e) {\n                    AppLog.e(AppLog.T.NOTIFS, \"CommentDetailActivity was passed an invalid note id.\");\n                }\n            } else if (intent.getIntExtra(KEY_COMMENT_DETAIL_LOCAL_TABLE_BLOG_ID, 0) > 0\n                    && intent.getLongExtra(KEY_COMMENT_DETAIL_COMMENT_ID, 0) > 0) {\n                commentDetailFragment = CommentDetailFragment.newInstance(\n                        intent.getIntExtra(KEY_COMMENT_DETAIL_LOCAL_TABLE_BLOG_ID, 0),\n                        intent.getLongExtra(KEY_COMMENT_DETAIL_COMMENT_ID, 0)\n                );\n            }\n\n            if (commentDetailFragment != null) {\n                commentDetailFragment.setRetainInstance(true);\n                getFragmentManager().beginTransaction()\n                        .add(R.id.comment_detail_container, commentDetailFragment, TAG_COMMENT_DETAIL_FRAGMENT)\n                        .commit();\n            } else {\n                ToastUtils.showToast(this, R.string.error_load_comment);\n                finish();\n            }\n        }\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        if (item.getItemId() == android.R.id.home) {\n            finish();\n            return true;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n}<｜fim▁end｜>",
    "response": "\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.comment_activity_detail);\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.danielbchapman.jboss.haxx;\n\nimport javax.naming.Context;\nimport javax.naming.InitialContext;\n\nimport org.eclipse.persistence.config.SessionCustomizer;\nimport org.eclipse.persistence.sessions.DatabaseLogin;\nimport org.eclipse.persistence.sessions.JNDIConnector;\nimport org.eclipse.persistence.sessions.Session;\nimport org.eclipse.persistence.sessions.server.ServerSession;\n\npublic class JPAEclipseLinkSessionCustomizer implements SessionCustomizer\n{\n    public JPAEclipseLinkSessionCustomizer()\n<｜fim▁hole｜>    /**\n     * Get a dataSource connection and set it on the session with\n     * lookupType=STRING_LOOKUP\n     */\n    @SuppressWarnings(\"unused\")\n    public void customize(Session session) throws Exception\n    {\n        JNDIConnector connector = null;\n        Context context = null;\n        try\n        {\n            context = new InitialContext();\n            if (null != context)\n            {\n                connector = (JNDIConnector) session.getLogin().getConnector(); // possible\n                                                                                                                                                // CCE\n                // Change from COMPOSITE_NAME_LOOKUP to STRING_LOOKUP\n                // Note: if both jta and non-jta elements exist this will only change\n                // the first one - and may still result in\n                // the COMPOSITE_NAME_LOOKUP being set\n                // Make sure only jta-data-source is in persistence.xml with no\n                // non-jta-data-source property set\n                connector.setLookupType(JNDIConnector.STRING_LOOKUP);\n\n                // Or, if you are specifying both JTA and non-JTA in your\n                // persistence.xml then set both connectors to be safe\n                JNDIConnector writeConnector = (JNDIConnector) session.getLogin().getConnector();\n                writeConnector.setLookupType(JNDIConnector.STRING_LOOKUP);\n                JNDIConnector readConnector = (JNDIConnector) ((DatabaseLogin) ((ServerSession) session)\n                        .getReadConnectionPool().getLogin()).getConnector();// ((DatabaseLogin)\n                                                                                                                                // ((ServerSession)\n                                                                                                                                // session).getReadConnectionPool().getLogin()).getConnector();\n                readConnector.setLookupType(JNDIConnector.STRING_LOOKUP);\n\n                System.out.println(\"_JPAEclipseLinkSessionCustomizer: configured \" + connector.getName());\n            } else\n            {\n                throw new Exception(\"_JPAEclipseLinkSessionCustomizer: Context is null\");\n            }\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace();\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    {\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.spongepowered.common.data.manipulator.immutable.entity;\n\nimport org.spongepowered.api.data.key.Keys;\nimport org.spongepowered.api.data.manipulator.immutable.entity.ImmutableGriefingData;\nimport org.spongepowered.api.data.manipulator.mutable.entity.GriefingData;\nimport org.spongepowered.api.data.value.immutable.ImmutableValue;\nimport org.spongepowered.common.data.manipulator.immutable.common.AbstractImmutableBooleanData;\nimport org.spongepowered.common.data.manipulator.mutable.entity.SpongeGriefingData;\n<｜fim▁hole｜>        implements ImmutableGriefingData {\n\n    public ImmutableSpongeGriefingData(boolean value) {\n        super(ImmutableGriefingData.class, value, Keys.CAN_GRIEF, SpongeGriefingData.class, true);\n    }\n\n    @Override\n    public ImmutableValue<Boolean> canGrief() {\n        return getValueGetter();\n    }\n\n}<｜fim▁end｜>",
    "response": "\npublic class ImmutableSpongeGriefingData extends AbstractImmutableBooleanData<ImmutableGriefingData, GriefingData>\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package br.unisul.tpwa.entity;\n\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.List;\n\nimport javax.persistence.CascadeType;\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.EnumType;\nimport javax.persistence.Enumerated;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.persistence.JoinColumn;\nimport javax.persistence.ManyToOne;\nimport javax.persistence.OneToMany;\nimport javax.persistence.Table;\nimport javax.persistence.Temporal;\nimport javax.persistence.TemporalType;\n\nimport br.unisul.tpwa.entity.enums.DivisaoLogica;\n\n@Entity\n@Table(name=\"MODULO\")\npublic class Modulo implements Serializable, Entidade{\n\n    private static final long serialVersionUID = 1L;\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name=\"CD_MODULO\")\n    private Long id;\n\n    @Column(name=\"DS_TITULO\")\n    private String titulo;\n\n    @Column(name=\"FG_DISPONIVEL\")\n    private Boolean permanecerDisponivel;\n\n    @Column(name = \"DT_INICIAL\")\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date dataInicial;\n\n    @Column(name = \"DT_FINAL\")\n    @Temporal(TemporalType.TIMESTAMP)\n    private Date dataFinal;\n\n    @Column(name=\"CD_DIVISAO_LOG\")\n    @Enumerated(EnumType.ORDINAL)\n    private DivisaoLogica divisaoLogica;\n\n    @JoinColumn(name = \"CD_CURSO\", referencedColumnName = \"CD_CURSO\", nullable = false)\n    @ManyToOne(optional = false)\n    private Curso curso;\n\n    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"modulo\")\n    private List<Recurso> recursos;\n\n    @OneToMany(cascade = CascadeType.ALL, mappedBy = \"modulo\")\n    private List<Topico> topicos;\n\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getTitulo() {\n        return titulo;\n    }\n\n    public void setTitulo(String titulo) {\n        this.titulo = titulo;\n    }\n\n    public Boolean getPermanecerDisponivel() {\n        return permanecerDisponivel;\n    }\n\n    public void setPermanecerDisponivel(Boolean permanecerDisponivel) {\n        this.permanecerDisponivel = permanecerDisponivel;\n    }\n\n    public Date getDataInicial() {\n        return dataInicial;\n    }\n\n    public void setDataInicial(Date dataInicial) {\n        this.dataInicial = dataInicial;\n    }\n\n    public Date getDataFinal() {\n        return dataFinal;\n    }\n\n    public void setDataFinal(Date dataFinal) {\n        this.dataFinal = dataFinal;\n    }\n\n    public DivisaoLogica getDivisaoLogica() {\n        return divisaoLogica;\n    }\n\n    public void setDivisaoLogica(DivisaoLogica divisaoLogica) {\n        this.divisaoLogica = divisaoLogica;\n    }\n\n    public Curso getCurso() {\n        return curso;\n    }\n\n    public void setCurso(Curso curso) {\n        this.curso = curso;\n    }\n\n    public List<Recurso> getRecursos() {\n        return recursos;\n    }\n\n    public void setRecursos(List<Recurso> recursos) {\n        this.recursos = recursos;\n    }\n\n    public List<Topico> getTopicos() {\n        return topicos;\n    }\n\n    public void setTopicos(List<Topico> topicos) {\n        this.topicos = topicos;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((id == null) ? 0 : id.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        Modulo other = (Modulo) obj;\n        if (id == null) {\n            if (other.id != null)\n<｜fim▁hole｜>        return true;\n    }\n\n}<｜fim▁end｜>",
    "response": "                return false;\n        } else if (!id.equals(other.id))\n            return false;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ca.uqac.lif.labpal.server;\n\nimport ca.uqac.lif.labpal.LabAssistant;\nimport ca.uqac.lif.labpal.Laboratory;\n\n<｜fim▁hole｜>  public CustomPageCallback(String prefix, Laboratory lab, LabAssistant assistant)\n  {\n    super(prefix, lab, assistant);\n    m_filename = s_path + \"/custom.html\";\n  }\n}<｜fim▁end｜>",
    "response": "public class CustomPageCallback extends TemplatePageCallback\n{\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ductive.parse.parsers.quoting;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class OffsetTrackingAppendable {\n\n<｜fim▁hole｜>    public final List<Integer> offsets = new ArrayList<>();\n\n    public OffsetTrackingAppendable append(char c, int pos) {\n        offsets.add(pos);\n        delegate.append(c);\n        return this;\n    }\n\n    @Override public String toString() { return delegate.toString(); }\n\n}<｜fim▁end｜>",
    "response": "    public final StringBuffer delegate = new StringBuffer();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ru.job4j.pro.list;\n\npublic class SimpleArrayList<E> {\n    /**\n     * Size of collection.\n     */\n    private int size;\n    /**\n     * First element in the collection.\n     */\n    private Node<E> first;\n\n    /**\n     * Метод вставляет в начало списка данные.\n     * @param date - type data.\n     */\n    public void add(E date) {\n        Node<E> newLink = new Node<>(date);\n        newLink.next = this.first;\n        this.first = newLink;\n        this.size++;\n    }\n\n    /**\n     * Method delete.\n     * @return - type E.\n     */\n    public E delete() {\n        Node<E> result = this.first;\n        this.first = this.first.next;\n        this.size--;\n        return result.date;\n    }\n\n<｜fim▁hole｜>        Node<E> result = this.first;\n        for (int i = 0; i < index; i++) {\n            result = result.next;\n        }\n        return result.date;\n    }\n\n    /**\n     * Метод получения размера коллекции.\n     * @return - type int.\n     */\n    public int getSize() {\n        return this.size;\n    }\n\n    /**\n     * Класс предназначен для хранения данных.\n     * @param <E> - type data.\n     */\n    private static class Node<E> {\n        /**\n         * data for storage.\n         */\n        private E date;\n        /**\n         * Next element.\n         */\n        private Node<E> next;\n\n        /**\n         * Constructor.\n         * @param date - data.\n         */\n        Node(E date) {\n            this.date = date;\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    /**\n     * Метод получения элемента по индексу.\n     * @param index - number type int.\n     * @return - type E.\n     */\n    public E get(int index) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.asakusafw.testdriver.core;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Collection;\n<｜fim▁hole｜>\nimport com.asakusafw.testdriver.model.SimpleDataModelDefinition;\n\npublic class ValueDefinition<T> implements DataModelDefinition<T> {\n\n    /**\n     * Self name.\n     */\n    public static final PropertyName VALUE = PropertyName.newInstance(\"value\");\n\n    private final Class<T> type;\n\n    private final PropertyType kind;\n\n    /**\n     * Creates a new instance.\n     * @param <T> type of holding value\n     * @param type holding value type\n     * @return the created instance\n     * @throws IllegalArgumentException if some parameters were {@code null}\n     */\n    public static <T> ValueDefinition<T> of(Class<T> type) {\n        return new ValueDefinition<>(type);\n    }\n\n    /**\n     * Creates a new instance.\n     * @param type holding value type\n     * @throws IllegalArgumentException if some parameters were {@code null}\n     */\n    public ValueDefinition(Class<T> type) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"type must not be null\"); //$NON-NLS-1$\n        }\n        this.type = type;\n        this.kind = SimpleDataModelDefinition.getType(VALUE, type);\n        if (kind == null) {\n            throw new IllegalArgumentException(type.getName());\n        }\n    }\n\n    @Override\n    public Class<T> getModelClass() {\n        return type;\n    }\n\n    @Override\n    public <A extends Annotation> A getAnnotation(Class<A> annotationType) {\n        return type.getAnnotation(annotationType);\n    }\n\n    @Override\n    public Collection<PropertyName> getProperties() {\n        return Collections.singleton(VALUE);\n    }\n\n    @Override\n    public PropertyType getType(PropertyName name) {\n        if (VALUE.equals(name)) {\n            return kind;\n        }\n        return null;\n    }\n\n    @Override\n    public <A extends Annotation> A getAnnotation(PropertyName name, Class<A> annotationType) {\n        return null;\n    }\n\n    @Override\n    public Builder<T> newReflection() {\n        return new Builder<>(this);\n    }\n\n    @Override\n    public DataModelReflection toReflection(T object) {\n        return newReflection().add(VALUE, object).build();\n    }\n\n    @Override\n    public T toObject(DataModelReflection reflection) {\n        return type.cast(reflection.getValue(VALUE));\n    }\n}<｜fim▁end｜>",
    "response": "import java.util.Collections;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ecologylab.bigsemantics.metadata.scalar.types;\n\nimport ecologylab.bigsemantics.metadata.builtins.ImageClipping;\nimport ecologylab.bigsemantics.metadata.scalar.MetadataString;\nimport ecologylab.serialization.SIMPLTranslationException;\nimport ecologylab.serialization.ScalarUnmarshallingContext;\nimport ecologylab.serialization.SimplTypesScope;\nimport ecologylab.serialization.formatenums.StringFormat;\n\npublic class MetadataStringScalarType extends MetadataScalarType<MetadataString, String>\n{\n\n    public MetadataStringScalarType()\n    {\n        super(MetadataString.class, String.class, null, null);\n    }\n\n    /**\n     * Used in deserialization. Creates new instance. \n     */\n    @Override\n    public MetadataString getInstance(String value, String[] formatStrings,\n            ScalarUnmarshallingContext scalarUnmarshallingContext)\n    {\n        return new MetadataString(getValueInstance(value, formatStrings, scalarUnmarshallingContext));\n    }\n\n    public static void main(String[] args)\n    {\n        MetadataScalarType.init();\n\n        ImageClipping i = new ImageClipping();\n        i.setCaption(\"a nice caption.\");\n        i.setContext(\"A much, much longer context\");\n\n        try\n        {\n            SimplTypesScope.serialize(i, System.out, StringFormat.XML);\n        }\n        catch (SIMPLTranslationException e)\n<｜fim▁hole｜>            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.welshare.web.util;\n\nimport java.io.BufferedInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.net.SocketException;\nimport java.net.URL;\nimport java.util.List;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang.exception.ExceptionUtils;\nimport org.joda.time.DateTime;\nimport org.joda.time.DateTimeConstants;\nimport org.joda.time.DateTimeUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport com.welshare.util.collection.CollectionUtils;\n\n@Controller\n@RequestMapping(\"/static\")\npublic class ResourceController {\n\n    private static final Logger logger = LoggerFactory.getLogger(ResourceController.class);\n\n    @Value(\"${static.resources.cache.period}\")\n    private long cachePeriod;\n\n    /**\n     * Method for serving a merged asset file (merging all javascripts or all css)\n     * Note that the CSS contain relative paths to images, in the form\n     * ../images/img.png. This means that in order for images to be located properly\n     * /static/version/merge/type has to be the URL for the merged assets. Thus\n     * ../ will evaluate /static/version.\n     *\n     * Also note that only images are handled via the spring mvc:resource mechanism\n     * javascript and css files are handled through this controller.\n     *\n     * TODO Consider http://jawr.java.net/integration/spring.html\n     *\n     * @param resources\n     * @param assetsVersion\n     * @param type\n     * @param request\n     * @param response\n     * @throws IOException\n     */\n    @RequestMapping(\"/{assetsVersion}/merge/{type}\")\n    public void merge(@RequestParam(required=false) List<String> resources,\n            @PathVariable String assetsVersion,\n            @PathVariable String type, HttpServletRequest request,\n            HttpServletResponse response) throws IOException {\n\n        if (CollectionUtils.isEmpty(resources)) {\n            return;\n        }\n\n        long lastAccessed = request.getDateHeader(\"If-Modified-Since\");\n        // if within one week - send NOT_MODIFIED\n        if (cachePeriod > 0 && new DateTime().minusWeeks(1).isBefore(new DateTime(lastAccessed))) {\n            response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);\n            return;\n        }\n\n        String contentType = \"text/\" + type;\n\n        response.setContentType(contentType);\n\n        response.setDateHeader(\"Expires\", DateTimeUtils.currentTimeMillis()\n                + cachePeriod * DateTimeConstants.MILLIS_PER_SECOND);\n        response.setHeader(\"Cache-Control\", \"max-age=\" + cachePeriod);\n\n        OutputStream out = response.getOutputStream();\n        for (String resource : resources) {\n            try {\n                if (resource.startsWith(\"http\")) {\n                    InputStream is = new BufferedInputStream(new URL(resource).openStream());\n                    IOUtils.copy(is, out);\n<｜fim▁hole｜>                            resource.replace(\"/static/\" + assetsVersion, \"\"));\n                    if (in != null) {\n                        IOUtils.copy(in, out);\n                    }\n                }\n            } catch (SocketException ex) {\n                logger.info(\"Socket exception (likley a broken pipe) when getting resources: \" + ex.getMessage());\n            } catch (IOException ex) {\n                if (ExceptionUtils.getRootCause(ex) instanceof SocketException) {\n                    logger.info(\"Socket exception (likley a broken pipe) when getting resources: (\" + resource + \") \" + ex.getMessage());\n                    return; //the pipe is broken, no need to continue\n                } else {\n                    logger.warn(\"Problem processing resources. Current resource is: \" + resource, ex);\n                }\n            } catch (Exception ex) {\n                logger.warn(\"Problem processing resources. Current resource is: \" + resource, ex);\n            }\n        }\n    }\n}<｜fim▁end｜>",
    "response": "                    IOUtils.closeQuietly(is);\n                } else {\n                    InputStream in = request.getServletContext().getResourceAsStream(\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.openhab.binding.broadlinkthermostat.internal.discovery;\n\nimport static org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants.*;\n\nimport java.io.IOException;\nimport java.net.InetAddress;\nimport java.net.UnknownHostException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.Set;\nimport java.util.concurrent.ScheduledFuture;\nimport java.util.concurrent.TimeUnit;\n\nimport org.eclipse.jdt.annotation.NonNullByDefault;\nimport org.eclipse.jdt.annotation.Nullable;\nimport org.openhab.binding.broadlinkthermostat.internal.BroadlinkThermostatBindingConstants;\nimport org.openhab.core.config.discovery.AbstractDiscoveryService;\nimport org.openhab.core.config.discovery.DiscoveryResult;\nimport org.openhab.core.config.discovery.DiscoveryResultBuilder;\nimport org.openhab.core.config.discovery.DiscoveryService;\nimport org.openhab.core.net.NetworkAddressService;\nimport org.openhab.core.thing.Thing;\nimport org.openhab.core.thing.ThingTypeUID;\nimport org.openhab.core.thing.ThingUID;\nimport org.osgi.service.component.annotations.Activate;\nimport org.osgi.service.component.annotations.Component;\nimport org.osgi.service.component.annotations.Reference;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport com.github.mob41.blapi.BLDevice;\n\n@Component(service = DiscoveryService.class, configurationPid = \"discovery.broadlinkthermostat\")\n@NonNullByDefault\npublic class BroadlinkThermostatDiscoveryService extends AbstractDiscoveryService {\n\n    private final Logger logger = LoggerFactory.getLogger(BroadlinkThermostatDiscoveryService.class);\n\n    private final NetworkAddressService networkAddressService;\n\n    private static final Set<ThingTypeUID> DISCOVERABLE_THING_TYPES_UIDS = Set.of(FLOUREON_THERMOSTAT_THING_TYPE,\n            UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE);\n    private static final int DISCOVERY_TIMEOUT_SECONDS = 30;\n    private @Nullable ScheduledFuture<?> backgroundDiscoveryFuture;\n\n    @Activate\n    public BroadlinkThermostatDiscoveryService(@Reference NetworkAddressService networkAddressService) {\n        super(DISCOVERABLE_THING_TYPES_UIDS, DISCOVERY_TIMEOUT_SECONDS);\n        this.networkAddressService = networkAddressService;\n    }\n\n    private void createScanner() {\n\n        long timestampOfLastScan = getTimestampOfLastScan();\n        BLDevice[] blDevices = new BLDevice[0];\n        try {\n            @Nullable\n            InetAddress sourceAddress = getIpAddress();\n            if (sourceAddress != null) {\n                logger.debug(\"Using source address {} for sending out broadcast request.\", sourceAddress);\n                blDevices = BLDevice.discoverDevices(sourceAddress, 0, DISCOVERY_TIMEOUT_SECONDS * 1000);\n            } else {\n                blDevices = BLDevice.discoverDevices(DISCOVERY_TIMEOUT_SECONDS * 1000);\n            }\n        } catch (IOException e) {\n            logger.debug(\"Error while trying to discover broadlinkthermostat devices: {}\", e.getMessage());\n        }\n        logger.debug(\"Discovery service found {} broadlinkthermostat devices.\", blDevices.length);\n\n        for (BLDevice dev : blDevices) {\n            logger.debug(\"Broadlinkthermostat device {} of type {} with Host {} and MAC {}\", dev.getDeviceDescription(),\n                    Integer.toHexString(dev.getDeviceType()), dev.getHost(), dev.getMac());\n\n            ThingUID thingUID;\n            String id = dev.getHost().replaceAll(\"\\\\.\", \"-\");\n            logger.debug(\"Device ID with IP address replacement: {}\", id);\n            try {\n                id = getHostnameWithoutDomain(InetAddress.getByName(dev.getHost()).getHostName());\n                logger.debug(\"Device ID with DNS name: {}\", id);\n            } catch (UnknownHostException e) {\n                logger.debug(\"Discovered device with IP {} does not have a DNS name, using IP as thing UID.\",\n                        dev.getHost());\n            }\n\n            switch (dev.getDeviceDescription()) {\n                case \"Floureon Thermostat\":\n                    thingUID = new ThingUID(FLOUREON_THERMOSTAT_THING_TYPE, id);\n                    break;\n                case \"Hysen Thermostat\":\n                    thingUID = new ThingUID(HYSEN_THERMOSTAT_THING_TYPE, id);\n                    break;\n                default:\n                    thingUID = new ThingUID(UNKNOWN_BROADLINKTHERMOSTAT_THING_TYPE, id);\n            }\n\n            Map<String, Object> properties = new HashMap<>();\n            properties.put(BroadlinkThermostatBindingConstants.HOST, dev.getHost());\n            properties.put(Thing.PROPERTY_MAC_ADDRESS, dev.getMac().getMacString());\n            properties.put(BroadlinkThermostatBindingConstants.DESCRIPTION, dev.getDeviceDescription());\n\n            logger.debug(\"Property map: {}\", properties);\n\n            DiscoveryResult discoveryResult = DiscoveryResultBuilder.create(thingUID).withProperties(properties)\n                    .withLabel(dev.getDeviceDescription() + \" (\" + id + \")\")\n                    .withRepresentationProperty(Thing.PROPERTY_MAC_ADDRESS).build();\n\n            thingDiscovered(discoveryResult);\n        }\n        removeOlderResults(timestampOfLastScan);\n    }\n\n    @Override\n    protected void startScan() {\n        scheduler.execute(this::createScanner);\n    }\n\n    @Override\n    protected void startBackgroundDiscovery() {\n        logger.trace(\"Starting background scan for Broadlinkthermostat devices\");\n        ScheduledFuture<?> currentBackgroundDiscoveryFuture = backgroundDiscoveryFuture;\n        if (currentBackgroundDiscoveryFuture != null) {\n            currentBackgroundDiscoveryFuture.cancel(true);\n        }\n<｜fim▁hole｜>        logger.trace(\"Stopping background scan for Broadlinkthermostat devices\");\n        @Nullable\n        ScheduledFuture<?> backgroundDiscoveryFuture = this.backgroundDiscoveryFuture;\n        if (backgroundDiscoveryFuture != null && !backgroundDiscoveryFuture.isCancelled()) {\n            if (backgroundDiscoveryFuture.cancel(true)) {\n                this.backgroundDiscoveryFuture = null;\n            }\n        }\n        stopScan();\n    }\n\n    private @Nullable InetAddress getIpAddress() {\n        return getIpFromNetworkAddressService().orElse(null);\n    }\n\n    /**\n     * Uses openHAB's NetworkAddressService to determine the local primary network interface.\n     *\n     * @return local ip or <code>empty</code> if configured primary IP is not set or could not be parsed.\n     */\n    private Optional<InetAddress> getIpFromNetworkAddressService() {\n        String ipAddress = networkAddressService.getPrimaryIpv4HostAddress();\n        if (ipAddress == null) {\n            logger.warn(\"No network interface could be found.\");\n            return Optional.empty();\n        }\n        try {\n            return Optional.of(InetAddress.getByName(ipAddress));\n        } catch (UnknownHostException e) {\n            logger.warn(\"Configured primary IP cannot be parsed: {} Details: {}\", ipAddress, e.getMessage());\n            return Optional.empty();\n        }\n    }\n\n    private String getHostnameWithoutDomain(String hostname) {\n        String broadlinkthermostatRegex = \"BroadLink-OEM[-A-Za-z0-9]{12}.*\";\n        if (hostname.matches(broadlinkthermostatRegex)) {\n            String[] dotSeparatedString = hostname.split(\"\\\\.\");\n            logger.debug(\"Found original broadlink DNS name {}, removing domain\", hostname);\n            return dotSeparatedString[0].replaceAll(\"\\\\.\", \"-\");\n        } else {\n            logger.debug(\"DNS name does not match original broadlink name: {}, using it without modification. \",\n                    hostname);\n            return hostname.replaceAll(\"\\\\.\", \"-\");\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        backgroundDiscoveryFuture = scheduler.scheduleWithFixedDelay(this::createScanner, 0, 60, TimeUnit.SECONDS);\n    }\n\n    @Override\n    protected void stopBackgroundDiscovery() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.micromanager.events;\n\nimport org.micromanager.api.DataProcessor;\n\npublic class ProcessorEvent {\n   private String name_;\n   private Class<?> processorClass_;\n   public ProcessorEvent(String name, Class<?> processorClass) {\n      name_ = name;\n      processorClass_ = processorClass;\n<｜fim▁hole｜>   }\n\n   public Class<?> getProcessorClass() {\n      return processorClass_;\n   }\n}<｜fim▁end｜>",
    "response": "   }\n\n   public String getName() {\n      return name_;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package jfall.graphql.demo.schema.objecttype;\n\nimport com.oembedler.moon.graphql.engine.stereotype.*;\nimport jfall.graphql.demo.schema.StaticData;\n\n@GraphQLObject(\"Root\")\npublic class RootObjectType {\n\n    @GraphQLField\n    public Viewer viewer(@GraphQLIn(\"token\") final String token) {\n        return new Viewer(token);\n    }\n\n    @GraphQLField\n    public Talk talk(@GraphQLIn(\"title\") final String title) {\n<｜fim▁hole｜>            if (talk.getTitle().equals(title)) {\n                return talk;\n            }\n        }\n        return null;\n    }\n}<｜fim▁end｜>",
    "response": "        for (Talk talk : StaticData.talks) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.auraframework.impl.root.component;\n\nimport java.io.IOException;\nimport java.util.List;\n\nimport org.auraframework.builder.ComponentDefBuilder;\nimport org.auraframework.def.ComponentDef;\nimport org.auraframework.def.DefDescriptor;\nimport org.auraframework.impl.system.DefDescriptorImpl;\n<｜fim▁hole｜>\npublic class ComponentDefImpl extends BaseComponentDefImpl<ComponentDef> implements ComponentDef {\n    private static final long serialVersionUID = 6449560899515044182L;\n\n    protected ComponentDefImpl(Builder builder) {\n        super(builder);\n    }\n\n    /**\n     * The Descriptor for the component that all non-root components eventually\n     * must extend. Similar to java.lang.Object in java.\n     */\n    public static final DefDescriptor<ComponentDef> PROTOTYPE_COMPONENT = DefDescriptorImpl\n            .getInstance(\"markup://aura:component\", ComponentDef.class);\n\n    public static class Builder extends BaseComponentDefImpl.Builder<ComponentDef> implements ComponentDefBuilder {\n\n        public Builder() {\n            super(ComponentDef.class);\n        }\n\n        @Override\n        public ComponentDef build() {\n            finish();\n            return new ComponentDefImpl(this);\n        }\n\n        @Override\n        public DefDescriptor<ComponentDef> getDefaultExtendsDescriptor() {\n            return ComponentDefImpl.PROTOTYPE_COMPONENT;\n        }\n    }\n\n    @Override\n    public List<DefDescriptor<ComponentDef>> getTrackedDependencies() {\n        return null;\n    }\n\n    @Override\n    protected void serializeFields(Json json) throws IOException {\n    }\n}<｜fim▁end｜>",
    "response": "import org.auraframework.util.json.Json;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package concurrent.aqs;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.AbstractQueuedSynchronizer;\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.Lock;\n\npublic class TwinsLock implements Lock {\n\n    private final Sync sync = new Sync(2);\n\n    private static final class Sync extends AbstractQueuedSynchronizer{\n\n        private static final long serialVersionUID = -5647384254751104899L;\n\n        Sync(int count){\n            if(count <=0){\n                throw new IllegalArgumentException(\"count must large than 0\");\n            }\n            setState(count);\n        }\n\n        @Override\n        protected int tryAcquireShared(int reduceCount) {\n            for(;;){\n                int current = getState();\n                int newCount = current - reduceCount;\n                if(newCount < 0 || compareAndSetState(current,newCount)){\n                    System.out.println(Thread.currentThread().getName()+ \"成功获取锁!\");\n                    System.out.println(\"当前状态: \"+ super.getState());\n                    return newCount;\n                }\n            }\n        }\n\n        @Override\n        protected boolean tryReleaseShared(int returnCount) {\n            for(;;){\n                int current = getState();\n                int newCount = current + returnCount;\n                if(compareAndSetState(current,newCount)){\n                    System.out.println(Thread.currentThread().getName()+ \"成功释放锁!\");\n                    System.out.println(\"当前状态: \"+ super.getState());\n                    return true;\n                }\n            }\n        }\n\n        final ConditionObject newCondition(){\n            return new ConditionObject();\n<｜fim▁hole｜>        sync.tryAcquireShared(1);\n    }\n\n    @Override\n    public void lockInterruptibly() throws InterruptedException {\n        sync.acquireInterruptibly(1);\n    }\n\n    @Override\n    public boolean tryLock() {\n        return sync.tryAcquireShared(1) >= 0;\n    }\n\n    @Override\n    public boolean tryLock(long time, TimeUnit unit) throws InterruptedException {\n        return sync.tryAcquireNanos(1,unit.toNanos(time));\n    }\n\n    @Override\n    public void unlock() {\n        sync.tryReleaseShared(1);\n    }\n\n    @Override\n    public Condition newCondition() {\n        return sync.newCondition();\n    }\n}<｜fim▁end｜>",
    "response": "        }\n    }\n\n    @Override\n    public void lock() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package stream.flarebot.flarebot.util;\n\n<｜fim▁hole｜>public class Constants {\n\n    public static final String OFFICIAL_GUILD = \"226785954537406464\";\n    private static final String FLAREBOT_API = \"https://api.flarebot.stream\";\n    private static final String FLAREBOT_API_DEV = \"http://localhost:8880\";\n\n    public static final long DEVELOPER_ID = 226788297156853771L;\n    public static final long CONTRIBUTOR_ID = 272324832279003136L;\n    public static final long STAFF_ID = 320327762881675264L;\n\n    public static final String FLARE_TEST_BOT_CHANNEL = \"242297848123621376\";\n\n    public static String getAPI() {\n        return FlareBot.getInstance().isTestBot() ? FLAREBOT_API_DEV : FLAREBOT_API;\n    }\n}<｜fim▁end｜>",
    "response": "import stream.flarebot.flarebot.FlareBot;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package hu.belicza.andras.sc2gears.ui.moduls.multirepanal;\n\nimport hu.belicza.andras.sc2gearspluginapi.api.sc2replay.ReplayConsts;\nimport hu.belicza.andras.sc2gearspluginapi.api.sc2replay.ReplayConsts.Format;\nimport hu.belicza.andras.sc2gearspluginapi.api.sc2replay.ReplayConsts.GameType;\nimport hu.belicza.andras.sc2gearspluginapi.api.sc2replay.ReplayConsts.Race;\nimport hu.belicza.andras.sc2gearspluginapi.impl.util.IntHolder;\n\nimport java.util.Date;\nimport java.util.EnumMap;\nimport java.util.Map;\n\nclass ChartSegmentStatistics {\n\n    /** Lower (first) date of the segment.                   */\n    public final Date lowerDate;\n\n    /** Record of the period belonging to the chart segment. */\n    public final Record record = new Record();\n\n    /** Total time (seconds) in games for APM calculation.   */\n    public long timeSecInGameForApm;\n    /** Total actions in games.                              */\n    public long totalActions;\n    /** Total effective actions in games.                    */\n    public long totalEffectiveActions;\n\n    /** Total hatchery life time in frames in relevance to the average spawning ratio.                   */\n    public long totalHatchTime;\n    /** Total time in frames when hatcheries were spawning larva.                                        */\n    public long totalHatchSpawnTime;\n    /** Total injection gap time in frames between injections in relevance to the average injection gap. */\n    public long totalInjectionGap;\n    /** Total number of injection gaps in relevance to the average injection gap.                        */\n    public int  totalInjectionGapCount;\n\n    /** Race distribution map (counts of different races).           */\n<｜fim▁hole｜>\n    /**\n     * Creates a new ChartSegmentStatistics.\n     * @param lowerDate lower (first) date of the segment\n     */\n    public ChartSegmentStatistics( final Date lowerDate ) {\n        this.lowerDate = lowerDate;\n    }\n\n    /**\n     * Returns the average APM.\n     * @return the average APM; or -1 if average APM is not available\n     */\n    public int getAvgApm() {\n        return timeSecInGameForApm == 0 ? -1 : (int) ( totalActions * 60L / timeSecInGameForApm );\n    }\n\n    /**\n     * Returns the average EAPM.\n     * @return the average EAPM; or -1 if average EAPM is not available\n     */\n    public int getAvgEapm() {\n        return timeSecInGameForApm == 0 ? -1 : (int) ( totalEffectiveActions * 60L / timeSecInGameForApm );\n    }\n\n    /**\n     * Returns the average spawning ratio in percent.\n     * @return the average spawning ratio in percent; or -1 if average spawning ratio is not available\n     */\n    public int getAvgSpawningRatio() {\n        return totalHatchTime == 0 ? -1 : (int) ( totalHatchSpawnTime * 100L / totalHatchTime );\n    }\n\n    /**\n     * Returns the average injection gap in seconds multiplied by 10.\n     * @return the average injection gap in seconds multiplied by 10; or -1 if average injection gap is not available\n     */\n    public int getAvgInjectionGap() {\n        return totalInjectionGapCount == 0 ? -1 : (int) ( 10L * totalInjectionGap / totalInjectionGapCount / ReplayConsts.FRAMES_IN_SECOND );\n    }\n\n}<｜fim▁end｜>",
    "response": "    public final Map< Race    , IntHolder > raceDistributionMap     = new EnumMap< Race    , IntHolder >( Race    .class );\n    /** Game type distribution map (counts of different game types). */\n    public final Map< GameType, IntHolder > gameTypeDistributionMap = new EnumMap< GameType, IntHolder >( GameType.class );\n    /** Format distribution map (counts of different formats).       */\n    public final Map< Format  , IntHolder > formatDistributionMap   = new EnumMap< Format  , IntHolder >( Format  .class );\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.poi.hssf.record;\n\nimport junit.framework.Test;\nimport junit.framework.TestSuite;\n\nimport org.apache.poi.hssf.record.aggregates.AllRecordAggregateTests;\nimport org.apache.poi.hssf.record.cf.TestCellRange;\nimport org.apache.poi.hssf.record.chart.AllChartRecordTests;\nimport org.apache.poi.hssf.record.constant.TestConstantValueParser;\nimport org.apache.poi.hssf.record.crypto.AllHSSFEncryptionTests;\nimport org.apache.poi.hssf.record.formula.AllFormulaTests;\nimport org.apache.poi.hssf.record.pivot.AllPivotRecordTests;\n\npublic final class AllRecordTests {\n\n    public static Test suite() {\n        TestSuite result = new TestSuite(AllRecordTests.class.getName());\n\n        result.addTest(AllChartRecordTests.suite());\n        result.addTest(AllHSSFEncryptionTests.suite());\n        result.addTest(AllFormulaTests.suite());\n        result.addTest(AllPivotRecordTests.suite());\n        result.addTest(AllRecordAggregateTests.suite());\n\n        result.addTestSuite(TestBOFRecord.class);\n        result.addTestSuite(TestBoolErrRecord.class);\n<｜fim▁hole｜>        result.addTestSuite(TestCFRuleRecord.class);\n        result.addTestSuite(TestColumnInfoRecord.class);\n        result.addTestSuite(TestCommonObjectDataSubRecord.class);\n        result.addTestSuite(TestConstantValueParser.class);\n        result.addTestSuite(TestDrawingGroupRecord.class);\n        result.addTestSuite(TestEmbeddedObjectRefSubRecord.class);\n        result.addTestSuite(TestEndSubRecord.class);\n        result.addTestSuite(TestEscherAggregate.class);\n        result.addTestSuite(TestExtendedFormatRecord.class);\n        result.addTestSuite(TestExternalNameRecord.class);\n        result.addTestSuite(TestFontRecord.class);\n        result.addTestSuite(TestFormulaRecord.class);\n        result.addTestSuite(TestHyperlinkRecord.class);\n        result.addTestSuite(TestLabelRecord.class);\n        result.addTestSuite(TestMergeCellsRecord.class);\n        result.addTestSuite(TestNameRecord.class);\n        result.addTestSuite(TestNoteRecord.class);\n        result.addTestSuite(TestNoteStructureSubRecord.class);\n        result.addTestSuite(TestObjRecord.class);\n        result.addTestSuite(TestPaletteRecord.class);\n        result.addTestSuite(TestPaneRecord.class);\n        result.addTestSuite(TestRecalcIdRecord.class);\n        result.addTestSuite(TestRecordFactory.class);\n        result.addTestSuite(TestRecordFactoryInputStream.class);\n        result.addTestSuite(TestRecordInputStream.class);\n        result.addTestSuite(TestSCLRecord.class);\n        result.addTestSuite(TestSSTDeserializer.class);\n        result.addTestSuite(TestSSTRecord.class);\n        result.addTestSuite(TestSSTRecordSizeCalculator.class);\n        result.addTestSuite(TestSharedFormulaRecord.class);\n        result.addTestSuite(TestStringRecord.class);\n        result.addTestSuite(TestStyleRecord.class);\n        result.addTestSuite(TestSubRecord.class);\n        result.addTestSuite(TestSupBookRecord.class);\n        result.addTestSuite(TestTableRecord.class);\n        result.addTestSuite(TestTextObjectBaseRecord.class);\n        result.addTestSuite(TestTextObjectRecord.class);\n        result.addTestSuite(TestUnicodeNameRecord.class);\n        result.addTestSuite(TestUnicodeString.class);\n        result.addTestSuite(TestWriteAccessRecord.class);\n        return result;\n    }\n}<｜fim▁end｜>",
    "response": "        result.addTestSuite(TestBoundSheetRecord.class);\n        result.addTestSuite(TestCellRange.class);\n        result.addTestSuite(TestCFHeaderRecord.class);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.magicbox.redio.common;\n\nimport net.minecraft.block.material.Material;\n\nimport com.magicbox.redio.CreativeTab;\nimport com.magicbox.redio.blocks.BlockBusCable;\nimport com.magicbox.redio.blocks.BlockIO;\nimport com.magicbox.redio.blocks.BlockProcessor;\nimport com.magicbox.redio.blocks.BlockScriptStorage;\nimport com.magicbox.redio.entities.EntityBusCable;\nimport com.magicbox.redio.entities.EntityIO;\nimport com.magicbox.redio.entities.EntityProcessor;\nimport com.magicbox.redio.entities.EntityScriptStorage;\nimport com.magicbox.redio.items.ItemScriptCard;\nimport com.magicbox.redio.renderers.RendererBusCable;\nimport com.magicbox.redio.renderers.RendererGlobal;\nimport com.magicbox.redio.renderers.RendererProcessor;\n\npublic class Instances\n{\n    public static final CreativeTab creativeTab = new CreativeTab();\n\n    public interface Items\n    {\n        public static final ItemScriptCard itemScriptCard = new ItemScriptCard();\n    }\n\n    public interface Blocks\n    {\n        public static final BlockIO blockIO = new BlockIO(Material.rock);\n        public static final BlockBusCable blockBusCable = new BlockBusCable(Material.cloth);\n        public static final BlockProcessor blockProcessor = new BlockProcessor(Material.rock);\n        public static final BlockScriptStorage blockScriptStorage = new BlockScriptStorage(Material.rock);\n    }\n\n    public interface Entities\n    {\n        public static final Class entityIO = EntityIO.class;\n        public static final Class entityBusCable = EntityBusCable.class;\n        public static final Class entityProcessor = EntityProcessor.class;\n        public static final Class entityScriptStorage = EntityScriptStorage.class;\n    }\n\n    public interface Renderers\n    {\n<｜fim▁hole｜>        public static final RendererProcessor rendererProcessor = new RendererProcessor();\n    }\n}<｜fim▁end｜>",
    "response": "        public static final RendererGlobal rendererGlobal = new RendererGlobal();\n        public static final RendererBusCable rendererBusCable = new RendererBusCable();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.vitrivr.cineast.core.extraction.decode.video;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.bytedeco.javacpp.*;\nimport org.vitrivr.cineast.core.data.raw.images.MultiImage;\nimport org.vitrivr.cineast.core.util.MathHelper;\n\nimport static org.bytedeco.javacpp.avcodec.*;\nimport static org.bytedeco.javacpp.avutil.*;\nimport static org.bytedeco.javacpp.swscale.sws_freeContext;\n\nclass VideoOutputStreamContainer extends AbstractAVStreamContainer {\n\n    private static final Logger LOGGER = LogManager.getLogger();\n    int frameCounter = 0;\n    private AVFrame rgbFrame, outFrame;\n    private swscale.SwsContext sws_ctx;\n\n    VideoOutputStreamContainer(int width, int height, int bitRate, float frameRate, avformat.AVFormatContext oc, int codec_id, AVDictionary opt) {\n        super(oc, codec_id);\n\n        if (codec.type() != avutil.AVMEDIA_TYPE_VIDEO) {\n            LOGGER.error(\"Not a video codec\");\n            return;\n        }\n\n        int[] frameRateFraction = MathHelper.toFraction(frameRate);\n\n        c.bit_rate(bitRate);\n        c.width(width);\n        c.height(height);\n\n        c.gop_size(10);\n        c.max_b_frames(1);\n        c.pix_fmt(avutil.AV_PIX_FMT_YUV420P);\n\n        AVRational timeBase = new AVRational();\n        timeBase.num(frameRateFraction[1]);\n        timeBase.den(frameRateFraction[0]);\n        st.time_base(timeBase);\n        c.time_base(st.time_base());\n\n        AVRational fps = new AVRational();\n        fps.den(frameRateFraction[1]);\n        fps.num(frameRateFraction[0]);\n        c.framerate(fps);\n<｜fim▁hole｜>            c.mb_decision(2);\n        }\n        if (codec.id() == avcodec.AV_CODEC_ID_H264) {\n            avutil.av_opt_set(c.priv_data(), \"preset\", \"slow\", 0);\n        }\n\n        if ((oc.oformat().flags() & avformat.AVFMT_GLOBALHEADER) != 0) {\n            oc.oformat().flags(oc.oformat().flags() | avformat.AVFMT_GLOBALHEADER);\n        }\n\n        AVDictionary topt = new AVDictionary();\n\n        av_dict_copy(topt, opt, 0);\n\n        /* open the codec */\n        int ret = avcodec_open2(c, codec, topt);\n        av_dict_free(topt);\n        if (ret < 0) {\n            LOGGER.error(\"Could not open video codec: {}\", ret);\n            return;\n        }\n\n        rgbFrame = avutil.av_frame_alloc();\n        if (rgbFrame == null) {\n            LOGGER.error(\"Could not allocate frame\");\n            return;\n        }\n\n        rgbFrame.format(avutil.AV_PIX_FMT_RGB24);\n        rgbFrame.width(c.width());\n        rgbFrame.height(c.height());\n\n        ret = avutil.av_frame_get_buffer(rgbFrame, 32);\n        if (ret < 0) {\n            LOGGER.error(\"Could not allocate video frame data\");\n            return;\n        }\n\n        outFrame = avutil.av_frame_alloc();\n        if (outFrame == null) {\n            LOGGER.error(\"Could not allocate frame\");\n            return;\n        }\n\n        outFrame.format(c.pix_fmt());\n        outFrame.width(c.width());\n        outFrame.height(c.height());\n\n        ret = avutil.av_frame_get_buffer(outFrame, 32);\n        if (ret < 0) {\n            LOGGER.error(\"Could not allocate video frame data\");\n            return;\n        }\n\n        /* copy the stream parameters to the muxer */\n        ret = avcodec_parameters_from_context(st.codecpar(), c);\n        if (ret < 0) {\n            LOGGER.error(\"Could not copy the stream parameters\");\n            return;\n        }\n\n        sws_ctx = swscale.sws_getContext(c.width(), c.height(), avutil.AV_PIX_FMT_RGB24, c.width(), c.height(), c.pix_fmt(), swscale.SWS_BILINEAR, null, null, (DoublePointer) null);\n\n    }\n\n    void addFrame(MultiImage img) {\n\n        int ret = avutil.av_frame_make_writable(outFrame);\n        if (ret < 0) {\n            return;\n        }\n\n        ret = avutil.av_frame_make_writable(rgbFrame);\n        if (ret < 0) {\n            return;\n        }\n\n        int[] pixels = img.getColors();\n        for (int i = 0; i < pixels.length; ++i) {\n            rgbFrame.data(0).put(3 * i, (byte) (((pixels[i]) >> 16) & 0xff));\n            rgbFrame.data(0).put(3 * i + 1, (byte) (((pixels[i]) >> 8) & 0xff));\n            rgbFrame.data(0).put(3 * i + 2, (byte) ((pixels[i]) & 0xff));\n        }\n\n        swscale.sws_scale(sws_ctx, rgbFrame.data(), rgbFrame.linesize(), 0, outFrame.height(), outFrame.data(), outFrame.linesize());\n\n        outFrame.pts(this.frameCounter++);\n        encode(c, outFrame, pkt);\n    }\n\n    void close() {\n        if (c != null && !c.isNull()) {\n            avcodec_free_context(c);\n        }\n        if (rgbFrame != null && !rgbFrame.isNull()) {\n            av_frame_free(rgbFrame);\n        }\n        if (outFrame != null && !outFrame.isNull()) {\n            av_frame_free(outFrame);\n        }\n        if (sws_ctx != null && !sws_ctx.isNull()) {\n            sws_freeContext(sws_ctx);\n        }\n\n    }\n\n}<｜fim▁end｜>",
    "response": "\n        if (c.codec_id() == avcodec.AV_CODEC_ID_MPEG2VIDEO) {\n            c.max_b_frames(2);\n        }\n        if (c.codec_id() == avcodec.AV_CODEC_ID_MPEG1VIDEO) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.jetbrains.python.inspections;\n\nimport com.intellij.codeInspection.LocalInspectionToolSession;\nimport com.intellij.codeInspection.ProblemsHolder;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiElementVisitor;\nimport com.intellij.util.containers.ContainerUtil;\nimport com.jetbrains.python.PyBundle;\nimport com.jetbrains.python.PyNames;\nimport com.jetbrains.python.inspections.quickfix.PyChangeSignatureQuickFix;\nimport com.jetbrains.python.psi.PyClass;\nimport com.jetbrains.python.psi.PyFunction;\nimport com.jetbrains.python.psi.PyKnownDecoratorUtil;\nimport com.jetbrains.python.psi.PyUtil;\nimport com.jetbrains.python.psi.search.PySuperMethodsSearch;\nimport org.jetbrains.annotations.Nls;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\npublic class PyMethodOverridingInspection extends PyInspection {\n  @Override\n  @Nls\n  @NotNull\n  public String getDisplayName() {\n    return PyBundle.message(\"INSP.NAME.method.over\");\n  }\n\n  @NotNull\n  @Override\n  public PsiElementVisitor buildVisitor(@NotNull ProblemsHolder holder,\n                                        boolean isOnTheFly,\n                                        @NotNull LocalInspectionToolSession session) {\n    return new Visitor(holder, session);\n  }\n\n  public static class Visitor extends PyInspectionVisitor {\n    public Visitor(@Nullable ProblemsHolder holder, @NotNull LocalInspectionToolSession session) {\n      super(holder, session);\n    }\n\n    @Override\n    public void visitPyFunction(final PyFunction function) {\n      final PyClass cls = function.getContainingClass();\n      if (cls == null) return;\n<｜fim▁hole｜>\n      if (PyNames.INIT.equals(name) ||\n          PyNames.NEW.equals(name) ||\n          PyKnownDecoratorUtil.hasUnknownOrChangingSignatureDecorator(function, myTypeEvalContext) ||\n          ContainerUtil.exists(PyInspectionExtension.EP_NAME.getExtensions(), e -> e.ignoreMethodParameters(function, myTypeEvalContext))) {\n        return;\n      }\n\n      for (PsiElement psiElement : PySuperMethodsSearch.search(function, myTypeEvalContext)) {\n        if (psiElement instanceof PyFunction) {\n          final PyFunction baseMethod = (PyFunction)psiElement;\n          if (!PyUtil.isSignatureCompatibleTo(function, baseMethod, myTypeEvalContext)) {\n            final PyClass baseClass = baseMethod.getContainingClass();\n            final String msg = PyBundle.message(\"INSP.signature.mismatch\",\n                                                cls.getName() + \".\" + name + \"()\",\n                                                baseClass != null ? baseClass.getName() : \"\");\n            registerProblem(function.getParameterList(), msg, PyChangeSignatureQuickFix.forMismatchingMethods(function, baseMethod));\n          }\n        }\n      }\n    }\n  }\n}<｜fim▁end｜>",
    "response": "      final String name = function.getName();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.analogweb.core;\n\nimport org.analogweb.RequestPathMetadata;\n\npublic class UnsatisfiedRequestException extends ApplicationRuntimeException {\n\n    private static final long serialVersionUID = -5701810553477314954L;\n    private RequestPathMetadata metadata;\n\n    public UnsatisfiedRequestException(RequestPathMetadata metadata) {\n        this.metadata = metadata;\n    }\n\n    public RequestPathMetadata getMetadata() {\n<｜fim▁hole｜>    }\n}<｜fim▁end｜>",
    "response": "        return this.metadata;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.camel.component.cxf.spring;\n\nimport java.util.List;\n\nimport org.apache.camel.component.cxf.jaxrs.BeanIdAware;\nimport org.apache.cxf.BusFactory;\nimport org.apache.cxf.bus.spring.BusWiringBeanFactoryPostProcessor;\nimport org.apache.cxf.bus.spring.SpringBusFactory;\nimport org.apache.cxf.feature.LoggingFeature;\nimport org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\nimport org.apache.cxf.version.Version;\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\n\npublic class SpringJAXRSClientFactoryBean extends JAXRSClientFactoryBean\n    implements ApplicationContextAware, BeanIdAware {\n    private String beanId;\n    private int loggingSizeLimit;\n    private LoggingFeature loggingFeature;\n\n    public SpringJAXRSClientFactoryBean() {\n    }\n\n    public boolean isLoggingFeatureEnabled() {\n        return loggingFeature != null;\n    }\n\n    public void setLoggingFeatureEnabled(boolean loggingFeatureEnabled) {\n        if (loggingFeature != null) {\n<｜fim▁hole｜>        if (loggingFeatureEnabled) {\n            if (getLoggingSizeLimit() > 0) {\n                loggingFeature = new LoggingFeature(getLoggingSizeLimit());\n            } else {\n                loggingFeature = new LoggingFeature();\n            }\n            getFeatures().add(loggingFeature);\n        }\n\n    }\n\n    public int getLoggingSizeLimit() {\n        return loggingSizeLimit;\n    }\n\n    public void setLoggingSizeLimit(int loggingSizeLimit) {\n        this.loggingSizeLimit = loggingSizeLimit;\n        if (loggingFeature != null) {\n            getFeatures().remove(loggingFeature);\n            if (loggingSizeLimit > 0) {\n                loggingFeature = new LoggingFeature(loggingSizeLimit);\n            } else {\n                loggingFeature = new LoggingFeature();\n            }\n            getFeatures().add(loggingFeature);\n        }\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    public void setApplicationContext(ApplicationContext ctx) throws BeansException {\n        if (bus == null) {\n            if (Version.getCurrentVersion().startsWith(\"2.3\")) {\n                // Don't relate on the DefaultBus\n                BusFactory factory = new SpringBusFactory(ctx);\n                bus = factory.createBus();    \n                BusWiringBeanFactoryPostProcessor.updateBusReferencesInContext(bus, ctx);\n                setBus(bus);\n            } else {\n                setBus(BusWiringBeanFactoryPostProcessor.addDefaultBus(ctx));\n            }\n        }\n    }\n\n    public String getBeanId() {            \n        return beanId;\n    }\n\n    public void setBeanId(String id) {            \n        beanId = id;            \n    }\n\n    // add this mothod for testing\n    List<String> getSchemaLocations() {\n        return schemaLocations;\n    }\n}<｜fim▁end｜>",
    "response": "            getFeatures().remove(loggingFeature);\n            loggingFeature = null;\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package controllers;\n\nimport static org.junit.Assert.assertTrue;\n\nimport java.util.Map;\n\nimport ninja.NinjaTest;\n\nimport org.junit.Test;\n\nimport com.google.common.collect.Maps;\n\npublic class PrettyTimeControllerTest extends NinjaTest {\n\n    String TEXT_EN = \"1 day ago\";\n    String TEXT_DE = \"vor 1 Tag\";\n    String TEXT_FR = \"il y a 1 jour\";\n    String TEXT_IT = \"1 giorno fa\";\n    String TEXT_ZH = \"1 天 前\";\n    String TEXT_JA = \"1日前\";\n    String TEXT_KO = \"1일 전\";\n\n    @Test\n    public void testThatPrettyTimeWorksEn() {\n\n        Map<String, String> headers = Maps.newHashMap();\n        headers.put(\"Accept-Language\", \"en-US\");\n\n        String result = ninjaTestBrowser.makeRequest(getServerAddress()\n                + \"/prettyTime\", headers);\n\n        assertTrue(result\n                .contains(TEXT_EN));\n\n    }\n\n    @Test\n    public void testThatPrettyTimeWorksDe() {\n\n        Map<String, String> headers = Maps.newHashMap();\n        headers.put(\"Accept-Language\", \"de-DE\");\n\n        String result = ninjaTestBrowser.makeRequest(getServerAddress()\n                + \"/prettyTime\", headers);\n\n        assertTrue(result\n                .contains(TEXT_DE));\n\n    }\n\n    @Test\n    public void testThatPrettyTimeWorksFr() {\n\n        Map<String, String> headers = Maps.newHashMap();\n        headers.put(\"Accept-Language\", \"fr-FR\");\n\n        String result = ninjaTestBrowser.makeRequest(getServerAddress()\n                + \"/prettyTime\", headers);\n\n        assertTrue(result\n                .contains(TEXT_FR));\n\n    }\n\n    @Test\n    public void testThatPrettyTimeWorksIt() {\n\n        Map<String, String> headers = Maps.newHashMap();\n        headers.put(\"Accept-Language\", \"it-IT\");\n\n        String result = ninjaTestBrowser.makeRequest(getServerAddress()\n                + \"/prettyTime\", headers);\n\n        assertTrue(result\n                .contains(TEXT_IT));\n\n    }\n\n    @Test\n    public void testThatPrettyTimeWorksZh() {\n\n        Map<String, String> headers = Maps.newHashMap();\n        headers.put(\"Accept-Language\", \"zh-CN\");\n\n        String result = ninjaTestBrowser.makeRequest(getServerAddress()\n                + \"/prettyTime\", headers);\n\n        assertTrue(result\n<｜fim▁hole｜>    public void testThatPrettyTimeWorksJa() {\n\n        Map<String, String> headers = Maps.newHashMap();\n        headers.put(\"Accept-Language\", \"ja-JP\");\n\n        String result = ninjaTestBrowser.makeRequest(getServerAddress()\n                + \"/prettyTime\", headers);\n\n        assertTrue(result\n                .contains(TEXT_JA));\n\n    }\n\n    @Test\n    public void testThatPrettyTimeWorksKo() {\n\n        Map<String, String> headers = Maps.newHashMap();\n        headers.put(\"Accept-Language\", \"ko-KO\");\n\n        String result = ninjaTestBrowser.makeRequest(getServerAddress()\n                + \"/prettyTime\", headers);\n\n        assertTrue(result\n                .contains(TEXT_KO));\n\n    }\n\n}<｜fim▁end｜>",
    "response": "                .contains(TEXT_ZH));\n\n    }\n\n    @Test\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ar.com.dtabares.jexpenses.security.social;\n\nimport ar.com.dtabares.jexpenses.config.JHipsterProperties;\n\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.social.connect.Connection;\nimport org.springframework.social.connect.web.SignInAdapter;\nimport org.springframework.web.context.request.NativeWebRequest;\n\nimport javax.inject.Inject;\n\npublic class CustomSignInAdapter implements SignInAdapter {\n<｜fim▁hole｜>    private UserDetailsService userDetailsService;\n\n    @Inject\n    private JHipsterProperties jHipsterProperties;\n\n    @Override\n    public String signIn(String userId, Connection<?> connection, NativeWebRequest request) {\n        UserDetails user = userDetailsService.loadUserByUsername(userId);\n        Authentication newAuth = new UsernamePasswordAuthenticationToken(\n            user,\n            null,\n            user.getAuthorities());\n        SecurityContextHolder.getContext().setAuthentication(newAuth);\n        return jHipsterProperties.getSocial().getRedirectAfterSignIn();\n    }\n}<｜fim▁end｜>",
    "response": "\n    @Inject\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.tapestry.contrib.table.model.simple;\n\nimport java.util.Comparator;\n\npublic class ColumnComparator implements Comparator\n{\n    private SimpleTableColumn m_objColumn;\n    private Comparator m_objComparator;\n\n    public ColumnComparator(SimpleTableColumn objColumn, Comparator objComparator)\n    {\n        m_objColumn = objColumn;\n        m_objComparator = objComparator;\n    }\n\n    /**\n     * @see java.util.Comparator#compare(Object, Object)\n<｜fim▁hole｜>        Object objValue2 = m_objColumn.getColumnValue(objRow2);\n\n        return m_objComparator.compare(objValue1, objValue2);\n    }\n\n}<｜fim▁end｜>",
    "response": "     */\n    public int compare(Object objRow1, Object objRow2)\n    {\n        Object objValue1 = m_objColumn.getColumnValue(objRow1);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>﻿package hillfly.wifichat.adapter;\n\nimport hillfly.wifichat.BaseFragment;\n\nimport java.util.List;\n\nimport android.app.Fragment;\nimport android.app.FragmentManager;\nimport android.support.v13.app.FragmentPagerAdapter;\n\npublic class TabPagerAdapter extends FragmentPagerAdapter {\n\n    List<BaseFragment> fragments;\n\n<｜fim▁hole｜>        this.fragments = fragments;\n    }\n\n    public TabPagerAdapter(FragmentManager fm,List<BaseFragment> fragments) {\n        super(fm);\n        this.fragments = fragments;\n    }\n\n    @Override\n    public Fragment getItem(int position) {\n        return fragments.get(position);\n    }\n\n    @Override\n    public int getCount() {\n        return fragments.size();\n    }\n}<｜fim▁end｜>",
    "response": "    public void SetDate(List<BaseFragment> fragments) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.twosigma.beakerx.kernel.restserver.impl;\n\nimport com.twosigma.beakerx.kernel.GroupName;\nimport com.twosigma.beakerx.kernel.KernelFunctionality;\nimport com.twosigma.beakerx.kernel.MagicKernelManager;\nimport com.twosigma.beakerx.kernel.restserver.BeakerXServer;\nimport com.twosigma.beakerx.kernel.restserver.RESTAction;\nimport io.javalin.Handler;\nimport io.javalin.Javalin;\nimport org.jetbrains.annotations.NotNull;\n\nimport static com.twosigma.beakerx.BeakerXClient.CODE_CELL_PATH;\nimport static com.twosigma.beakerx.BeakerXClient.URL_ARG;\nimport static com.twosigma.beakerx.KernelInfoHandler.INTERRUPT_KERNEL;\nimport static com.twosigma.beakerx.kernel.comm.GetCodeCellsHandler.INSTANCE;\nimport static com.twosigma.beakerx.kernel.magic.command.functionality.AsyncMagicCommand.CANCEL_EXECUTION;\n\npublic abstract class BeakerXServerJavalin implements BeakerXServer {\n\n  private Javalin app = null;\n  private Integer freePort;\n  private GetUrlArgHandler urlArgHandler;\n\n  public BeakerXServerJavalin(GetUrlArgHandler urlArgHandler) {\n    this.urlArgHandler = urlArgHandler;\n  }\n\n  @Override\n  public synchronized BeakerXServer get(KernelFunctionality kernel) {\n    if (app == null) {\n      app = createServer(kernel);\n    }\n    return this;\n  }\n\n  private Javalin createServer(KernelFunctionality kernel) {\n    this.freePort = MagicKernelManager.findFreePort();\n    Javalin server = Javalin.create()\n            .disableStartupBanner()\n            .port(this.freePort)\n            .start();\n    doCreateMapping(server, kernel);\n    return server;\n  }\n\n  @Override\n  public String getURL() {\n    return String.format(\"http://localhost:%s/\", freePort);\n  }\n\n  private void doCreateMapping(Javalin server, KernelFunctionality kernel) {\n<｜fim▁hole｜>  private void mappingsForAllKernels(Javalin server, KernelFunctionality kernel) {\n    server.post(CODE_CELL_PATH, ctx -> {\n      String body = ctx.body();\n      INSTANCE.handle(body);\n    });\n    server.post(INTERRUPT_KERNEL, ctx -> {\n      kernel.killAllThreads();\n    });\n    server.post(CANCEL_EXECUTION+\"/:groupname\", ctx -> {\n      kernel.cancelExecution(GroupName.of(ctx.param(\"groupname\")));\n    });\n\n    server.post(URL_ARG, ctx -> {\n      String body = ctx.body();\n      urlArgHandler.handle(body);\n    });\n  }\n\n  public abstract void createMapping(Javalin app, KernelFunctionality kernel);\n\n  @Override\n  public void addPostMapping(String path, RESTAction restAction) {\n    app.post(path, handleBackground(restAction));\n  }\n\n  @NotNull\n  private Handler handleBackground(RESTAction restAction) {\n    return ctx -> {\n      restAction.run(new ContextJavalin(ctx));\n      ctx.result(\"ok\");\n    };\n  }\n}<｜fim▁end｜>",
    "response": "    mappingsForAllKernels(server, kernel);\n    createMapping(server, kernel);\n  }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.minnymin.zephyrus.item;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport org.bukkit.ChatColor;\nimport org.bukkit.Material;\nimport org.bukkit.configuration.ConfigurationSection;\nimport org.bukkit.enchantments.Enchantment;\n\nimport com.minnymin.zephyrus.Configurable;\nimport com.minnymin.zephyrus.YmlConfigFile;\nimport com.minnymin.zephyrus.Zephyrus;\n\npublic abstract class Item {\n\n    protected final String defaultName;\n    private String name;\n    private Material mat;\n    private int craftingLevel;\n    private List<String> lore;\n\n    public Item(String name, int craftingLevel, Material mat, List<String> lore) {\n        defaultName = ChatColor.stripColor(name).replace(\" \", \"-\").toLowerCase();\n        YmlConfigFile yml = Zephyrus.getItemManager().getConfig();\n        yml.addDefaults(defaultName + \".Enabled\", true);\n        yml.addDefaults(defaultName + \".Name\", translateToAlternate(name));\n        yml.addDefaults(defaultName + \".Lore\", translateToAlternate(lore));\n        yml.addDefaults(defaultName + \".CraftingLevel\", craftingLevel);\n        yml.saveConfig();\n\n        if (this instanceof Configurable) {\n            Iterator<Entry<String, Object>> iter = ((Configurable) this).getDefaultConfiguration().entrySet()\n                    .iterator();\n            while (iter.hasNext()) {\n                Entry<String, Object> value = iter.next();\n                yml.addDefaults(defaultName + \".\" + value.getKey(), value.getValue());\n            }\n        }\n\n        ConfigurationSection config = yml.getConfig().getConfigurationSection(defaultName);\n        this.name = translateFromAlternate(config.getString(\"Name\"));\n        this.lore = translateFromAlternate(config.getStringList(\"Lore\"));\n        this.craftingLevel = config.getInt(\"CraftingLevel\");\n        this.mat = mat;\n    }\n\n    protected String translateToAlternate(String s) {\n        return s.replace(ChatColor.COLOR_CHAR, '$');\n    }\n\n    protected List<String> translateToAlternate(List<String> array) {\n        List<String> list = new ArrayList<String>();\n        for (String s : array) {\n            list.add(s.replace(ChatColor.COLOR_CHAR, '$'));\n        }\n        return list;\n    }\n<｜fim▁hole｜>        return ChatColor.translateAlternateColorCodes('$', s);\n    }\n\n    protected List<String> translateFromAlternate(List<String> list) {\n        for (int i = 0; i < list.size(); i++) {\n            list.set(i, ChatColor.translateAlternateColorCodes('$', list.get(i)));\n        }\n        return list;\n    }\n\n    /**\n     * The minimum required level to craft the item\n     * \n     * @return An int of the crafting level\n     */\n    public int getCraftingLevel() {\n        return craftingLevel;\n    }\n\n    /**\n     * The enchantments applied to the item\n     * \n     * @return A map of Enchantment and Integer\n     */\n    public Map<Enchantment, Integer> getEnchantments() {\n        return new HashMap<Enchantment, Integer>();\n    }\n\n    /**\n     * The lore of the item\n     * \n     * @return The ItemStack lore\n     */\n    public List<String> getLore() {\n        return lore;\n    }\n\n    /**\n     * The material of the item\n     * \n     * @return The ItemStack's material\n     */\n    public Material getMaterial() {\n        return mat;\n    }\n\n    public String getInternalName() {\n        return defaultName;\n    }\n\n    /**\n     * The display name of the item\n     * \n     * @return The ItemStack name\n     */\n    public String getName() {\n        return name;\n    }\n\n    /**\n     * The recipe of the item\n     * \n     * @return An ItemRecipe object\n     */\n    public abstract ItemRecipe getRecipe();\n\n}<｜fim▁end｜>",
    "response": "\n    protected String translateFromAlternate(String s) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package edu.wright.cs.sp16.ceg3120.gui.listeners;\n\nimport edu.wright.cs.sp16.ceg3120.gui.MainTabPane;\n\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\n\npublic class ButtonClickAction implements ActionListener {\n    private MainTabPane parentPane;\n\n    /**\n     * Initial constructor to bring in parent pane instance.\n     * \n     * @author Alex\n     * \n     */\n    public ButtonClickAction(MainTabPane pane) {\n        parentPane = pane;\n    }\n\n    // action event for clicking on a url.\n    @Override\n<｜fim▁hole｜>        MainTabPane mainPane = parentPane;\n\n        if (!mainPane.checkLearnDiscoverStatus()) {\n            mainPane.addLearnAndDiscoverTab();\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "    public void actionPerformed(ActionEvent evt) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.zhangtielei.demos.async.programming.queueing.v2;\n\npublic interface TaskQueue {\n    /**\n     * 向队列中添加一个任务.\n     *\n     * @param task\n     */\n    void addTask(Task task);\n\n    /**\n     * 设置监听器.\n     * @param listener\n     */\n    void setListener(TaskQueueListener listener);\n<｜fim▁hole｜>    void destroy();\n\n    /**\n     * 任务队列对外监听接口.\n     */\n    interface TaskQueueListener {\n        /**\n         * 任务完成的回调.\n         * @param task\n         */\n        void taskComplete(Task task);\n        /**\n         * 任务最终失败的回调.\n         * @param task\n         * @param cause 失败原因\n         */\n        void taskFailed(Task task, Throwable cause);\n    }\n}<｜fim▁end｜>",
    "response": "\n    /**\n     * 销毁队列.\n     * 注: 队列在最后不用的时候, 应该主动销毁它.\n     */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.esofthead.mycollab.module.user.view;\n\nimport com.esofthead.mycollab.common.i18n.ShellI18nEnum;\nimport com.esofthead.mycollab.core.MyCollabException;\nimport com.esofthead.mycollab.eventmanager.EventBusFactory;\nimport com.esofthead.mycollab.jetty.ServerInstance;\nimport com.esofthead.mycollab.module.user.events.UserEvent.PlainLogin;\nimport com.esofthead.mycollab.shell.events.ShellEvent;\nimport com.esofthead.mycollab.vaadin.AppContext;\nimport com.esofthead.mycollab.vaadin.mvp.AbstractPageView;\nimport com.esofthead.mycollab.vaadin.mvp.ViewComponent;\nimport com.esofthead.mycollab.vaadin.mvp.ViewEvent;\nimport com.esofthead.mycollab.vaadin.ui.UIConstants;\nimport com.esofthead.mycollab.web.CustomLayoutExt;\nimport com.vaadin.data.validator.StringLengthValidator;\nimport com.vaadin.event.ShortcutAction;\nimport com.vaadin.event.ShortcutListener;\nimport com.vaadin.server.UserError;\nimport com.vaadin.ui.*;\nimport com.vaadin.ui.Button.ClickEvent;\n\n@ViewComponent\npublic class LoginViewImpl extends AbstractPageView implements LoginView {\n    private static final long serialVersionUID = 1L;\n\n    public LoginViewImpl() {\n        this.setSizeFull();\n        this.addComponent(new LoginForm());\n    }\n\n    class LoginForm extends CustomComponent {\n        private static final long serialVersionUID = 1L;\n\n        private final TextField usernameField;\n        private final PasswordField passwordField;\n        private final CheckBox rememberMe;\n\n        public LoginForm() {\n            final CustomLayout custom = CustomLayoutExt.createLayout(\"loginForm\");\n            custom.addStyleName(\"customLoginForm\");\n            usernameField = new TextField(AppContext.getMessage(ShellI18nEnum.FORM_EMAIL));\n\n            custom.addComponent(usernameField, \"usernameField\");\n\n            passwordField = new PasswordField(AppContext.getMessage(ShellI18nEnum.FORM_PASSWORD));\n            StringLengthValidator passwordValidator = new StringLengthValidator(\n                    \"Password length must be greater than 6\", 6, Integer.MAX_VALUE, false);\n            passwordField.addValidator(passwordValidator);\n            passwordField.addShortcutListener(new ShortcutListener(\"Signin\", ShortcutAction.KeyCode.ENTER, null) {\n                private static final long serialVersionUID = 5094514575531426118L;\n\n                @Override\n                public void handleAction(Object sender, Object target) {\n                    if (target == passwordField) {\n                        try {\n                            custom.removeComponent(\"customErrorMsg\");\n                            LoginViewImpl.this.fireEvent(new ViewEvent<>(LoginViewImpl.this,\n                                    new PlainLogin(usernameField.getValue(),\n                                    passwordField.getValue(), rememberMe.getValue())));\n                        } catch (MyCollabException e) {\n                            custom.addComponent(new Label(e.getMessage()), \"customErrorMsg\");\n\n<｜fim▁hole｜>                }\n            });\n\n            custom.addComponent(passwordField, \"passwordField\");\n\n            rememberMe = new CheckBox(AppContext.getMessage(ShellI18nEnum.OPT_REMEMBER_PASSWORD), false);\n            custom.addComponent(rememberMe, \"rememberMe\");\n\n            Button loginBtn = new Button(AppContext.getMessage(ShellI18nEnum.BUTTON_LOG_IN), new Button.ClickListener() {\n                private static final long serialVersionUID = 1L;\n\n                @Override\n                public void buttonClick(ClickEvent event) {\n                    try {\n                        custom.removeComponent(\"customErrorMsg\");\n\n                        LoginViewImpl.this.fireEvent(new ViewEvent<>(LoginViewImpl.this, new PlainLogin(\n                                usernameField.getValue(), passwordField.getValue(), rememberMe.getValue())));\n                    } catch (MyCollabException e) {\n                        custom.addComponent(new Label(e.getMessage()), \"customErrorMsg\");\n                    } catch (Exception e) {\n                        throw new MyCollabException(e);\n                    }\n                }\n            });\n\n            loginBtn.setStyleName(UIConstants.THEME_GREEN_LINK);\n            custom.addComponent(loginBtn, \"loginButton\");\n\n            Button forgotPasswordBtn = new Button(AppContext.getMessage(ShellI18nEnum.BUTTON_FORGOT_PASSWORD),\n                    new Button.ClickListener() {\n                        private static final long serialVersionUID = 1L;\n\n                        @Override\n                        public void buttonClick(ClickEvent event) {\n                            EventBusFactory.getInstance().post(new ShellEvent.GotoForgotPasswordPage(this, null));\n                        }\n                    });\n            forgotPasswordBtn.setStyleName(UIConstants.THEME_LINK);\n            custom.addComponent(forgotPasswordBtn, \"forgotLink\");\n\n            if (ServerInstance.getInstance().isFirstTimeRunner()) {\n                LoginForm.this.setComponentError(new UserError(\n                        \"For the first time using MyCollab, the default email/password is admin@mycollab.com/admin123. You should change email/password when you access MyCollab successfully.\"));\n                ServerInstance.getInstance().setIsFirstTimeRunner(false);\n            }\n\n            this.setCompositionRoot(custom);\n            this.setHeight(\"100%\");\n        }\n    }\n}<｜fim▁end｜>",
    "response": "                        } catch (Exception e) {\n                            throw new MyCollabException(e);\n                        }\n                    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.aerospike.developer.training;\n\nimport java.io.BufferedReader;\nimport java.io.Console;\n<｜fim▁hole｜>import java.io.InputStreamReader;\n\npublic class EclipseConsole {\n    Console systemConsole = System.console();\n    boolean useSystemConsole = false;\n\n    public EclipseConsole(){\n        this.useSystemConsole = (this.systemConsole != null);\n    }\n\n    public void printf(String message){\n        if (useSystemConsole)\n            systemConsole.printf(message);\n        else {\n            System.out.printf(message);\n        }\n    }\n\n    public String readLine(){\n        if (useSystemConsole)\n            return systemConsole.readLine();\n        else {\n            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));\n            String line = \"\";\n            try {\n                line = bufferedReader.readLine();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return line;\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "import java.io.IOException;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.airavata.workflow.core.parser;\n\npublic class ParserException extends Exception {\n\n    public ParserException(String message) {\n        super(message);\n    }\n\n    public ParserException(String message, Throwable cause) {\n        super(message, cause);\n    }\n\n    public ParserException(Throwable cause) {\n        super(cause);\n    }\n\n<｜fim▁hole｜>    }\n}<｜fim▁end｜>",
    "response": "    protected ParserException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n        super(message, cause, enableSuppression, writableStackTrace);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.moparscape.elysium.entity;\n\nimport org.moparscape.elysium.Server;\nimport org.moparscape.elysium.def.ItemDef;\nimport org.moparscape.elysium.def.ItemLoc;\nimport org.moparscape.elysium.task.timed.RespawnItemTask;\nimport org.moparscape.elysium.world.Point;\nimport org.moparscape.elysium.world.Region;\n\nimport java.util.UUID;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic final class Item implements Locatable {\n\n    private final int amount;\n    private final int itemId;\n    private final Point location;\n    private final Player owner;\n    private final AtomicBoolean removed = new AtomicBoolean(false);\n    private final int secondsUntilRespawn;\n    private final long spawned;\n    private final UUID uuid;\n    private ItemLoc loc; // Note: Should not need to keep a reference to this.\n\n    public Item(ItemLoc loc) {\n        this(loc.getId(), loc.getAmount(), new Point(loc.getX(), loc.getY()), null, loc.getRespawnTime());\n    }\n\n    public Item(int itemId, int amount, Point loc, Player owner) {\n        this(itemId, amount, loc, owner, -1);\n    }\n\n    public Item(int itemId, int amount, Point loc, Player owner, int secondsUntilRespawn) {\n        this.itemId = itemId;\n        this.amount = amount;\n        this.location = loc;\n        this.owner = owner;\n        this.uuid = UUID.randomUUID();\n\n        this.spawned = Server.getInstance().getHighResolutionTimestamp();\n        this.secondsUntilRespawn = secondsUntilRespawn;\n    }\n\n    public int getAmount() {\n        return amount;\n    }\n\n    public ItemDef getDef() {\n<｜fim▁hole｜>\n    public Point getLocation() {\n        return location;\n    }\n\n    @Override\n    public int hashCode() {\n        return uuid.hashCode();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (o == this) return true;\n        if (o == null || !(o instanceof Item)) return false;\n\n        Item i = (Item) o;\n        return this.uuid.equals(i.uuid);\n    }\n\n    @Override\n    public String toString() {\n        return \"ID: \" + itemId + \" Amount: \" + amount +\n                \"(\" + location.getX() + \", \" + location.getY() + \")\";\n    }\n\n    public boolean isRemoved() {\n        return removed.get();\n    }\n\n    public boolean isVisibleTo(Player p) {\n        if (owner == null || p.equals(owner)) {\n            return true;\n        }\n\n        if (!getDef().isTradable()) {\n            return false;\n        }\n\n        return Server.getInstance().getHighResolutionTimestamp() - spawned > 60000;\n    }\n\n    public void reinstate() {\n        removed.set(false);\n    }\n\n    public boolean remove() {\n        // Only the first thread to call compareAndSet will succeed.\n        // Optimistic concurrency. :)\n        boolean success = removed.compareAndSet(false, true);\n        if (!success) return false;\n\n        // If this stage of the method has been reached then the item\n        // has been claimed by the caller.\n        // Determine if it should be respawned or removed altogether\n        // from the Region that it is in.\n        if (shouldRespawn()) {\n            Server server = Server.getInstance();\n            server.submitTimedTask(new RespawnItemTask(this, secondsUntilRespawn * 1000));\n        } else {\n            Region r = Region.getRegion(location);\n            r.removeItem(this);\n        }\n\n        return true;\n    }\n\n    public boolean shouldRespawn() {\n        return secondsUntilRespawn >= 0;\n    }\n\n    private static enum StateMachine {\n        REMOVED,\n        VISIBLE\n    }\n}<｜fim▁end｜>",
    "response": "        return EntityHandler.getItemDef(itemId);\n    }\n\n    public int getId() {\n        return itemId;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.femo.http.drivers;\n\nimport io.femo.http.HttpDriver;\nimport io.femo.http.HttpRequest;\n\nimport java.net.URL;\nimport java.util.concurrent.ExecutorService;\n<｜fim▁hole｜>\n    private ExecutorService executorService;\n\n    public AsynchronousDriver() {\n        executorService = null;\n    }\n\n    public AsynchronousDriver(int threads) {\n        this.executorService = Executors.newFixedThreadPool(threads);\n    }\n\n    @Override\n    public HttpRequest url(URL url) {\n        if(executorService == null)\n            return new AsynchronousHttpRequest(url);\n        return new AsynchronousExecutorHttpRequest(url, executorService);\n    }\n}<｜fim▁end｜>",
    "response": "import java.util.concurrent.Executors;\n\npublic class AsynchronousDriver extends DefaultDriver {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.vertx.pgclient.tck;\n\nimport io.vertx.pgclient.junit.ContainerPgRule;\nimport io.vertx.sqlclient.SqlConnectOptions;\nimport io.vertx.sqlclient.tck.DriverTestBase;\nimport io.vertx.ext.unit.junit.VertxUnitRunner;\nimport org.junit.ClassRule;\nimport org.junit.runner.RunWith;\n\n@RunWith(VertxUnitRunner.class)\npublic class PgDriverTest extends DriverTestBase {\n\n  @ClassRule\n  public static ContainerPgRule rule = new ContainerPgRule();\n\n<｜fim▁hole｜>  }\n\n}<｜fim▁end｜>",
    "response": "  @Override\n  protected SqlConnectOptions defaultOptions() {\n    return rule.options();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class CHIP8 {\n\n  private short opcode;\n  private byte[] memory = new byte[4096];\n  private byte[] register = new byte[16];\n\n  private short index;\n  private short pc;\n\n  private byte[] video_memory = new byte[64 * 32];\n\n  private byte delay_timer;\n  private byte sound_timer;\n\n  private short stack[] = new short[16];\n  private short sp;\n\n  private byte[] key = new byte[16];\n\n  private short chip8_fontset[] =\n  {\n    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0\n    0x20, 0x60, 0x20, 0x20, 0x70, // 1\n    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2\n    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3\n    0x90, 0x90, 0xF0, 0x10, 0x10, // 4\n    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5\n    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6\n    0xF0, 0x10, 0x20, 0x40, 0x40, // 7\n    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8\n    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9\n    0xF0, 0x90, 0xF0, 0x90, 0x90, // A\n    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B\n    0xF0, 0x80, 0x80, 0x80, 0xF0, // C\n    0xE0, 0x90, 0x90, 0x90, 0xE0, // D\n    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E\n    0xF0, 0x80, 0xF0, 0x80, 0x80  // F\n  };\n\n  protected byte getChar(int index) {\n    return (byte)(chip8_fontset[index] & 0xFF);\n  }\n\n  public boolean isSomethingToDraw;\n\n  public void init() {\n    this.pc = 0x200; // Entry Point\n    this.opcode = 0;\n    this.index = 0;\n    this.sp = 0;\n\n  }\n\n  public void loadImage(String fileName) {\n    byte[] image;\n    try {\n      image = Files.readAllBytes(Paths.get(fileName));\n\n      for(int i = 0; i < image.length; i++) {\n        // Load image at entry point\n        this.memory[0x200 + i] = image[i];\n      }\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n\n  }\n\n  public void runCycle() {\n    // Fetch\n    this.opcode = (short)(memory[pc] << 8 | memory[pc + 1]);\n\n    // Decode first byte of opcode\n    switch(this.opcode & 0xF000) {\n      case 0x0000:\n      switch(opcode & 0x000F) {\n\n        case 0x0000: //0x00E0: CLS; Clear Screen\n\n        break;\n\n        case 0x000E: // 0x00EE: RET; Return from subroutine\n    pc = stack[sp];\n    sp--;\n\n        break;\n\n        default:\n        System.err.println(\"Illegal 0x0000 opcode: \" + Integer.toHexString(opcode));\n\n      }\n      break;\n\n      case 0x1000: // 0x1NNN: JP addr; jump to NNN\n      pc = (short)(opcode & 0x0FFF);\n\n      break;\n\n      case 0x2000: // 0x2NNN: Call subroutine at address NNN\n      stack[sp] = pc;\n      sp++;\n      pc = (short)(opcode & 0x0FFF);\n\n      break;\n\n      case 0x3000: // 0x3XKK: SE Vx, byte; Skip next instruction if Vx = kk\n      if(register[(opcode & 0x0F00) >> 8] == (opcode & 0x00FF)) {\n        pc += 2;\n      }\n      pc += 2;\n\n      break;\n\n      case 0x4000: // 0x4XKK: SNE Vx, byte; Skip next instruction if Vx != kk\n      if(register[(opcode & 0x0F00) >> 8] != (opcode & 0x00FF)) {\n        pc += 2;\n      }\n      pc += 2;\n\n      break;\n\n      case 0x5000: // 0x5XY0: SE Vx, Vy; Skip next instruction if Vx = Vy\n    if(register[(opcode & 0x0F00) >> 8] == register[(opcode & 0x00F0) >> 4]) {\n        pc += 2;\n      }\n      pc += 2;\n\n      break;\n\n      case 0x6000: // 0x6XKK: LD Vx, byte; Set Vx = kk\n    register[(opcode & 0x0F00) >> 8] = (byte)(opcode & 0x00FF);\n    pc += 2;\n\n      break;\n\n      case 0x7000: // 0x7XKK: ADD Vx, byte; Set Vx = Vx + kk\n    register[(opcode & 0x0F00) >> 8] += (byte)(opcode & 0x00FF);\n    // Carry-Check!!\n    pc += 2;\n\n      break;\n\n      case 0x8000:\n\n      switch(opcode & 0x000F) {\n\n        case 0x0000:\n\n        break;\n\n        case 0x0001:\n\n        break;\n\n        case 0x0002:\n\n        break;\n\n        case 0x0003:\n\n        break;\n\n        case 0x0004: // 0x8XY4: Add value from reg[Y] to reg[X], reg[F] is carry\n        if(register[(opcode & 0x00F0) >> 4] > (0xFF - register[(opcode & 0x0F00) >> 8])) {\n          register[0xF] = 1; // Carry\n        } else {\n          register[0xF] = 0;\n        }\n        register[(opcode & 0x0F00) >> 8] += register[(opcode & 0x00F0) >> 4];\n        pc += 2;\n        break;\n\n        case 0x0005:\n\n        break;\n\n        case 0x0006:\n<｜fim▁hole｜>\n        case 0x0007:\n\n        break;\n\n        case 0x000E:\n\n        break;\n\n        default:\n        System.err.println(\"Illegal 0x8000 opcode: \" + Integer.toHexString(opcode));\n        break;\n\n      }\n\n      break;\n\n      case 0xA000:\n      // Set index to address\n      this.index = (short)(opcode & 0x0FFF);\n      pc += 2;\n      break;\n\n      case 0xB000:\n\n      break;\n\n      case 0xC000:\n\n      break;\n\n      case 0xD000: // 0xDXYN: draw sprite at reg[x], reg[y], width 8 and height N\n      short x = register[(opcode & 0x0F00) >> 8];\n      short y = register[(opcode & 0x00F0) >> 4];\n      short height = (short)(opcode & 0x000F);\n      short pixel;\n\n      register[0xF] = 0;\n      for(short yline = 0; yline < height; yline++) {\n        pixel = memory[index + yline];\n        for(short xline = 0; xline < 8; xline++) {\n          if((pixel & (0x80 >> xline)) != 0) {\n            if(video_memory[(x + xline + ((y + yline) * 64))] == 1) {\n              register[0xF] = 1;\n            }\n            video_memory[x + xline + ((y + yline) * 64)] ^= 1;\n          }\n        }\n      }\n      isSomethingToDraw = true;\n      pc += 2;\n      break;\n\n      case 0xE000:\n\n      switch(opcode & 0x000F) {\n\n        case 0x000E:\n\n        break;\n\n        case 0x0001:\n\n        break;\n\n        default:\n        System.err.println(\"Illegal 0xE000 opcode: \" + Integer.toHexString(opcode));\n        break;\n\n      }\n\n      break;\n\n      case 0xF000:\n\n      switch(opcode & 0x00FF) {\n\n        case 0x0007:\n\n        break;\n\n        case 0x000A:\n\n        break;\n\n        case 0x0015:\n\n        break;\n\n        case 0x0018:\n\n        break;\n\n        case 0x001E:\n\n        break;\n\n        case 0x0029:\n\n        break;\n\n        case 0x0033: // 0xFX33: store reg[x] in bcd at mem[i...i+2]\n        memory[index] = (byte)(register[(opcode & 0x0F00) >> 8] / 100); // 11N\n        memory[index + 1] = (byte)((register[(opcode & 0x0F00) >> 8] / 10) % 10); // 1N1\n        memory[index + 2] = (byte)((register[(opcode & 0x0F00) >> 8] % 100) % 10); // N11\n        pc += 2;\n        break;\n\n        case 0x0055:\n\n        break;\n\n        case 0x0065:\n\n        break;\n\n        default:\n        System.err.println(\"Illegal 0xF000 opcode: \" + Integer.toHexString(opcode));\n        break;\n\n      }\n\n      break;\n\n      default:\n      System.err.println(\"Illegal opcode: \" + Integer.toHexString(opcode));\n      break;\n\n    }\n\n    if(delay_timer > 0) {\n      delay_timer--;\n    }\n\n    if(sound_timer > 0) {\n      System.out.println(\"BEEP\");\n      sound_timer--;\n    }\n\n  }\n\n  public void setKeys() {\n\n  }\n\n}<｜fim▁end｜>",
    "response": "\n        break;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.nowcoder.offer;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\n\npublic class BagSumTest {\n    public ArrayList<ArrayList<Integer>> findSumToTarget(int[] array, int target) {\n<｜fim▁hole｜>        helpFind(array, target, visited, list);\n        return list;\n    }\n\n    HashMap<String, Integer> map = new HashMap<String, Integer>();\n    private void helpFind(int[] array, int target, boolean[] visited,\n            ArrayList<ArrayList<Integer>> list) {\n        if(target<0)\n            return;\n        for (int i = 0; i < array.length; i++) {\n            if (!visited[i]) {\n                visited[i] = true;\n                if (array[i] == target) {\n                    StringBuilder builder = new StringBuilder();\n                    ArrayList<Integer> list2 = new ArrayList<Integer>();\n                    for (int j = 0; j < array.length; j++) {\n                        if (visited[j]) {\n                            list2.add(array[j]);\n                            builder.append(j);\n                        }\n                    }\n                    if (map.get(builder.toString()) == null){\n                        list.add(list2);\n                        map.put(builder.toString(), i);\n                    }\n                }else {\n                    helpFind(array, target-array[i], visited, list);\n                }\n                visited[i]=false;\n            }\n        }\n    }\n    public static void main(String[] args) {\n        int[] a={132,28,37,43,54,6,7,89,23};\n        BagSumTest test=new BagSumTest();\n        System.out.println(test.findSumToTarget(a, 67));\n    }\n}<｜fim▁end｜>",
    "response": "        ArrayList<ArrayList<Integer>> list = new ArrayList<>();\n        if (array == null || array.length == 0)\n            return list;\n        boolean[] visited = new boolean[array.length];\n        Arrays.fill(visited, false);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amazonaws.services.s3.model.analytics;\n\n<｜fim▁hole｜>abstract class AnalyticsNAryOperator extends AnalyticsFilterPredicate {\n\n    private final List<AnalyticsFilterPredicate> operands;\n\n    public AnalyticsNAryOperator(List<AnalyticsFilterPredicate> operands) {\n        this.operands = operands;\n    }\n\n    public List<AnalyticsFilterPredicate> getOperands() {\n        return operands;\n    }\n}<｜fim▁end｜>",
    "response": "import java.util.List;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.github.chen0040.leetcode.day07.medium;\n\npublic class ValidBST {\n     public class TreeNode {\n      int val;\n      TreeNode left;\n      TreeNode right;\n      TreeNode(int x) { val = x; }\n  }\n\n   public class Solution {\n      public boolean isValidBST(TreeNode root) {\n         if(root == null) return true;\n         return isSmaller(root.left, root.val) && isGreater(root.right, root.val);\n      }\n\n      private boolean isSmaller(TreeNode x, int val) {\n         if(x == null) {\n            return true;\n         }\n         if(x.val >= val) {\n            return false;\n         }\n         if(!isSmaller(x.left, Math.min(x.val, val))) {\n            return false;\n         }\n         if(!isGreater(x.right, x.val)) {\n            return false;\n         }\n         if(!isSmaller(x.right, val)) {\n            return false;\n         }\n         return true;\n      }\n      private boolean isGreater(TreeNode x, int val) {\n         if(x == null) {\n            return true;\n         }\n         if(x.val <= val) {\n            return false;\n         }\n         if(!isGreater(x.left, val)) {\n<｜fim▁hole｜>         }\n         if(!isGreater(x.right, Math.max(x.val, val))) {\n            return false;\n         }\n         return true;\n      }\n\n   }\n}<｜fim▁end｜>",
    "response": "            return false;\n         }\n         if(!isSmaller(x.left, x.val)) {\n            return false;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.bv.eidss;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.support.v4.app.Fragment;\nimport android.support.v4.app.FragmentManager;\nimport android.support.v7.widget.Toolbar;\nimport android.widget.TextView;\n\nimport com.bv.eidss.data.EidssDatabase;\nimport com.bv.eidss.model.ASDisease;\nimport com.bv.eidss.model.ASSession;\nimport com.bv.eidss.model.BaseReference;\nimport com.bv.eidss.model.BaseReferenceType;\nimport com.bv.eidss.model.CaseTypeHACode;\nimport com.bv.eidss.model.interfaces.ValidateCode;\nimport com.bv.eidss.model.interfaces.ValidateResult;\nimport com.bv.eidss.utils.EidssUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ASDiseaseActivity extends EidssBaseBlockTimeoutActivity\n        implements EidssAndroidHelpers.DialogDoneListener {\n    public final int CANCEL_DIALOG_ID = 3;\n\n    public ASDisease mASDisease;\n    public ASSession mASSession;\n    int position = -1;  //-1 means new ASDisease\n    //public List<BaseReference> mSpeciesTypes;\n\n    private ASDiseaseActivity _this;\n\n    public ASDiseaseActivity() {\n        _this = this;\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.ff_activity);\n\n        final Intent intent = getIntent();\n        mASDisease = intent.getParcelableExtra(getResources().getString(R.string.EXTRA_ID_ITEM));\n        mASSession = intent.getParcelableExtra(getResources().getString(R.string.EXTRA_ID_ASSESSION));\n        position = intent.getIntExtra(\"position\", -1);\n\n        /*List<Long> specTypes = (ArrayList<Long>)intent.getSerializableExtra(getResources().getString(R.string.EXTRA_ID_ITEMS));\n        EidssDatabase mDb = new EidssDatabase(_this);\n        List<BaseReference> species = mDb.Reference(BaseReferenceType.rftSpeciesList, EidssUtils.getCurrentLanguage(), CaseTypeHACode.LIVESTOCK, 0);\n        mDb.close();\n        mSpeciesTypes = new ArrayList<>();\n        for(BaseReference sp: species){\n            if(specTypes.contains(sp.idfsBaseReference))\n                mSpeciesTypes.add(sp);\n        }\n        mSpeciesTypes.add(0, new BaseReference(0, \"\"));*/\n\n        setTitle(getResources().getString(R.string.ASDisease));\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);\n        setSupportActionBar(toolbar);\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\n        getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n\n        StartFragment();\n    }\n\n    private Fragment StartFragment() {\n        FragmentManager fm = getSupportFragmentManager();\n        Fragment fragment = fm.findFragmentById(R.id.fragment_container);\n        if (fragment == null) {\n            fragment = new ASDiseaseFragment();\n<｜fim▁hole｜>                    .add(R.id.fragment_container, fragment)\n                    .commit();\n        }\n        return fragment;\n    }\n\n    @Override\n    public void onActivityResult(int requestCode, int resultCode, Intent data){\n        super.onActivityResult(requestCode, resultCode, data);\n    }\n\n    @Override\n    public void onBackPressed() {\n        Home();\n    }\n\n    public void Home() {\n        if (mASDisease.getChanged()) {\n            if(position == -1 && mASDisease.isEmpty())\n                FinishThis(RESULT_CANCELED);\n            else\n                Save();\n        }\n        else\n            FinishThis(RESULT_CANCELED);\n    }\n\n    public void Save() {\n        if (Validate()) {\n            if (!ValidateDuplicate()) {\n                EidssAndroidHelpers.AlertOkResultDialog.ShowQuestion(getSupportFragmentManager(), CANCEL_DIALOG_ID, R.string.DuplicateDiagnosisSpeciesSample);\n            } else {\n                FinishThis(Activity.RESULT_OK);\n            }\n        }\n    }\n\n    private boolean ValidateDuplicate(){\n        for (ASDisease ad:mASSession.asDiseases) {\n            if (mASDisease.getOfflineCaseID().compareTo(ad.getOfflineCaseID()) != 0) {\n                if (ad.getDiagnosis() == mASDisease.getDiagnosis() && ad.getSpeciesType() == mASDisease.getSpeciesType() && ad.getSampleType() == mASDisease.getSampleType())\n                    return false;\n            }\n        }\n        return true;\n    }\n\n    private Boolean Validate() {\n        ValidateResult vr = mASDisease.Validate(EidssDatabase.GetMandatoryFields(), EidssDatabase.GetInvisibleFields());\n        if (vr.getCode() == ValidateCode.OK)\n            return true;\n\n        switch (vr.getCode()) {\n            case FieldMandatory:\n                String errMes = String.format(getResources().getString(R.string.FieldMandatory), getResources().getString(vr.getMandatory()));\n                EidssAndroidHelpers.AlertOkDialog.Warning(getSupportFragmentManager(), errMes);\n                break;\n            case FieldMandatoryStr:\n                String errMess = String.format(getResources().getString(R.string.FieldMandatory), vr.getMandatoryStr());\n                EidssAndroidHelpers.AlertOkDialog.Warning(getSupportFragmentManager(), errMess);\n                break;\n            default:\n                break;\n        }\n        return false;\n    }\n\n    public void FinishThis(int result) {\n        Intent intent = getIntent();\n        if (result == Activity.RESULT_OK) {\n            intent.putExtra(getResources().getString(R.string.EXTRA_ID_ITEM), mASDisease);\n            intent.putExtra(\"position\", position);\n        }\n        setResult(result, intent);\n        finish();\n    }\n\n    @Override\n    public void onDone(int idDialog, boolean isPositive) {\n        switch (idDialog) {\n            case CANCEL_DIALOG_ID:\n                if (!isPositive) {\n                    FinishThis(RESULT_CANCELED);\n                }\n                break;\n        }\n    }\n}<｜fim▁end｜>",
    "response": "            fm.beginTransaction()\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package baza;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class SqlManager {\n\n    /**\n     * Metoda, ki iz baze prebere in vrne seznam vseh zbirk.\n     * @return zbirke\n     */\n    public static List<String> beriBazo(){\n        List<String> zbirke = new ArrayList<String>();\n\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/\" + \"testdb\" + \"?\", \"testuser\", \"password\");\n            Statement statement = con.createStatement();\n            ResultSet zbirkeRS = statement.executeQuery(\"SELECT zbirke_ime FROM zbirke\");\n\n            while (zbirkeRS.next()){\n                zbirke.add(zbirkeRS.getString(\"zbirke_ime\"));\n            }\n            con.close();\n        }\n        catch (SQLException e){\n            System.out.println(\"SQLException! beriBazo\");\n        }\n        catch (ClassNotFoundException e){\n            System.out.println(\"Class Not Found Exception! beriBazo\");\n        }\n        return zbirke;\n    }\n\n    /**\n     * Metoda, ki vrne vse stolpce za doloceno zbirko.\n     * @param zbirka\n     * @return stolpci\n     */\n    public static List<String> beriZbirkoStolpci(String zbirka){\n        List<String> stolpci = new ArrayList<String>();\n        Map<Integer, String> stolpciMap = new HashMap<Integer, String>();\n\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/\" + \"testdb\" + \"?\", \"testuser\", \"password\");\n            ResultSet stolpciRS = con.createStatement().executeQuery(\"SELECT * FROM stolpci WHERE stolpci_zbirka = \" + \"'\" + zbirka + \"'\");\n            while (stolpciRS.next()){\n                stolpciMap.put(stolpciRS.getInt(\"stolpci_stevilka\"), stolpciRS.getString(\"stolpci_ime\"));\n            }\n        }\n        catch (Exception e){\n            e.printStackTrace();\n        }\n\n        for (int i = 0; i < stolpciMap.size(); i++){\n            stolpci.add(stolpciMap.get(i));\n<｜fim▁hole｜>        return stolpci;\n    }\n\n    /**\n     * Metoda, ki iz baze prebere vse podatke za doloceno zbirko.\n     * @param zbirka\n     * @return elementi\n     */\n    public static Map<Integer, Map<String, String>> beriZbirkoPodatki(String zbirka){\n        Map<Integer, Map<String, String>> elementi = new HashMap<Integer, Map<String, String>>();\n\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/\" + \"testdb\" + \"?\", \"testuser\", \"password\");\n            ResultSet elementiRS = con.createStatement().executeQuery(\"SELECT * FROM podatki WHERE podatki_zbirka = \" + \"'\" + zbirka + \"'\");\n            while (elementiRS.next()){\n                String stolpec = elementiRS.getString(\"podatki_stolpec\");\n                String vsebina = elementiRS.getString(\"podatki_vsebina\");\n                Integer elementId = elementiRS.getInt(\"podatki_element\");\n\n                if (elementi.containsKey(elementId)){\n                    elementi.get(elementId).put(stolpec, vsebina);\n                }\n                else {\n                    Map<String, String> element = new HashMap<String, String>();\n                    element.put(stolpec, vsebina);\n                    elementi.put(elementId, element);\n                }\n            }\n            con.close();\n        }\n        catch (Exception e){\n            e.printStackTrace();\n        }\n        return elementi;\n    }\n\n    /**\n     * Metoda, ki doda element v bazo.\n     * @param zbirka\n     * @param element\n     * @return\n     */\n    public static int dodajElement(String zbirka, Map<String, String> element){\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/\" + \"testdb\" + \"?\", \"testuser\", \"password\");\n            con.prepareStatement(\"INSERT INTO elementi (elementi_zbirka) VALUES ('\" + zbirka + \"')\").executeUpdate();\n            ResultSet idRS = con.createStatement().executeQuery(\"SELECT LAST_INSERT_ID()\");\n            idRS.next();\n            int id = idRS.getInt(\"LAST_INSERT_ID()\");\n            for (String stolpec : element.keySet()){\n                con.prepareStatement(\"INSERT INTO podatki (podatki_element,podatki_zbirka,podatki_stolpec,podatki_vsebina) VALUES ('\" + id + \"', '\" +  zbirka + \"', '\" + stolpec + \"', '\" + element.get(stolpec) + \"')\").executeUpdate();\n            }\n            con.close();\n        }\n        catch (SQLException e){\n            e.printStackTrace();\n            return 1;\n        }\n        catch (ClassNotFoundException e){\n            e.printStackTrace();\n            return 2;\n        }\n        return 0;\n    }\n\n    /**\n     * Metoda, ki doda zbirko v bazo.\n     * @param zbirka\n     * @param stolpci\n     * @return\n     */\n    public static int dodajZbirko(String zbirka, List<String> stolpci){\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/\" + \"testdb\" + \"?\", \"testuser\", \"password\");\n            con.prepareStatement(\"INSERT INTO zbirke(zbirke_ime) VALUES ( '\" + zbirka + \"')\").executeUpdate();\n\n            int i = 0;\n            for (String stolpec : stolpci){\n                con.prepareStatement(\"INSERT INTO stolpci (stolpci_zbirka,stolpci_ime,stolpci_stevilka) VALUES ( '\" + zbirka + \"', '\" + stolpec + \"', '\" + i + \"')\").executeUpdate();\n                i++;\n            }\n            con.close();\n        }\n        catch (SQLException e){\n            e.printStackTrace();\n            return 1;\n        }\n        catch (ClassNotFoundException e){\n            return 2;\n        }\n        return 0;\n    }\n\n    /**\n     * Metoda, ki element izbrise iz baze.\n     * @param id\n     * @return\n     */\n    public static int izbrisiElement(int id){\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/\" + \"testdb\" + \"?\", \"testuser\", \"password\");\n            con.prepareStatement(\"DELETE FROM elementi WHERE elementi_id = ('\" + id + \"')\").executeUpdate();\n            con.close();\n        }\n        catch (SQLException e){\n            e.printStackTrace();\n            return 1;\n        }\n        catch (ClassNotFoundException e){\n            e.printStackTrace();\n            return 2;\n        }\n        return 0;\n    }\n\n    /**\n     * Metoda, ki zbirko zapise v bazo.\n     * @param zbirka\n     * @return\n     */\n    public static int izbrisiZbirko(String zbirka){\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/\" + \"testdb\" + \"?\", \"testuser\", \"password\");\n            con.prepareStatement(\"DELETE FROM zbirke WHERE zbirke_ime = ('\" + zbirka + \"')\").executeUpdate();\n            con.close();\n        }\n        catch (SQLException e){\n            e.printStackTrace();\n            return 1;\n        }\n        catch (ClassNotFoundException e){\n            e.printStackTrace();\n            return 2;\n        }\n        return 0;\n    }\n}<｜fim▁end｜>",
    "response": "        }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.conceicaolourenco.tiameirerefeicoes;\n\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.os.Handler;\nimport android.support.v7.app.ActionBarActivity;\nimport android.os.Bundle;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.Window;\nimport android.view.WindowManager;\n\npublic class Splash extends Activity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        // remover o titulo - bar\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);\n        // fim\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.splash_activity);\n\n        abre_Plano();\n    }\n\n    public void abre_Plano(){\n        Handler h = new Handler();\n\n        h.postDelayed(new Runnable() {\n            @Override\n            public void run() {\n                //Intent i = new Intent(SplahActivity.this,ListaProdutoActivity.class);\n                Intent i = new Intent(Splash.this,Menu_plano.class);\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "                startActivity(i);\n                finish();\n            }\n        },3000); // conta 4 seg\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package de.tblsoft.solr.pipeline.processor;\n\nimport de.tblsoft.solr.pipeline.AbstractProcessor;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n<｜fim▁hole｜>    private static Logger LOG = LoggerFactory.getLogger(TestProcessor.class);\n\n    @Override\n    public void process() {\n        LOG.info(\"Hello World.\");\n    }\n}<｜fim▁end｜>",
    "response": "\npublic class TestProcessor extends AbstractProcessor {\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package uk.kludje.experimental.proxy;\n\nimport java.lang.invoke.MethodHandles;\nimport java.lang.reflect.InvocationHandler;\n\npublic final class InvocationHandlers {\n  private InvocationHandlers() {\n  }\n\n  /**\n   * @return handler checked always returns the method's default value\n   * @see java.lang.reflect.Method#getDefaultValue()\n   */\n<｜fim▁hole｜>   * @see java.lang.UnsupportedOperationException\n   */\n  public static InvocationHandler unsupportedOperationHandler() {\n    return (proxy, method, args) -> {\n      throw new UnsupportedOperationException(method.toString());\n    };\n  }\n\n  /**\n   * Handler for invoking interface default methods.\n   * This handler will throw an exception if the method is not a default method.\n   *\n   * @return handler for invoking interface default methods\n   * @see java.lang.reflect.Method#isDefault()\n   */\n  public static InvocationHandler defaultMethodHandler() {\n    return (proxy, method, args) -> {\n      if (method.isDefault()) {\n        return MethodHandles.lookup()\n            .in(method.getDeclaringClass())\n            .unreflectSpecial(method, method.getDeclaringClass())\n            .bindTo(proxy)\n            .invokeWithArguments(args);\n      } else {\n        throw new IllegalArgumentException(method.toString());\n      }\n    };\n  }\n\n  public static InvocationHandler objectMethodsHandler() {\n    return (proxy, method, args) -> {\n      if (Methods.isEquals(method)) {\n        return proxy == args[0];\n      }\n      if (Methods.isHashCode(method)) {\n        return Integer.MIN_VALUE;\n      }\n      if (Methods.isToString(method)) {\n        return \"Proxy[\" + proxy.getClass() + \"]\";\n      }\n      throw new IllegalArgumentException(method.toString());\n    };\n  }\n}<｜fim▁end｜>",
    "response": "  public static InvocationHandler defaultValueHandler() {\n    return (proxy, method, args) -> method.getDefaultValue();\n  }\n\n  /**\n   * @return handler checked always throws UnsupportedOperationException\n"
  },
  {
    "prompt": "<｜fim▁begin｜>class UnicodeCommentDelimiter {\n    public static void main(String[] args) {\n        // no error on the following line because although \\u005c\n        // represents a backslash, that cannot be considered to begin\n        // a unicode escape sequence.\n        // \\u005c000a xyzzy plugh;\n\n        // no error on the following line because there are an even\n        // number of backslashes before the u, meaning it is not a\n        // unicode escape sequence.\n        // \\\\u000a xyzzy plugh;\n\n        // However, unicode escaped characters can delimit comments.\n        \\u002f\\u002f xyzzy plugh;\n\n<｜fim▁hole｜>    }\n}<｜fim▁end｜>",
    "response": "        // \\u000a class plugh{}\n        plugh xyzzy;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.grpc.transport;\n\nimport static com.google.common.base.Charsets.US_ASCII;\n\nimport com.google.common.io.BaseEncoding;\n\nimport io.grpc.Metadata;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.logging.Logger;\n\nimport javax.annotation.Nullable;\n\npublic final class TransportFrameUtil {\n\n  private static final Logger logger = Logger.getLogger(TransportFrameUtil.class.getName());\n\n  private static final byte[] binaryHeaderSuffixBytes =\n      Metadata.BINARY_HEADER_SUFFIX.getBytes(US_ASCII);\n\n  // TODO(louiscryan): This needs proper namespacing support, this is currently just a hack\n  /**\n   * Converts the path from the HTTP request to the full qualified method name.\n   *\n   * @return null if the path is malformatted.\n<｜fim▁hole｜>      return null;\n    }\n    return path;\n  }\n\n  /**\n   * Transform the given headers to a format where only spec-compliant ASCII characters are allowed.\n   * Binary header values are encoded by Base64 in the result.\n   *\n   * @return the interleaved keys and values.\n   */\n  public static byte[][] toHttp2Headers(Metadata headers) {\n    byte[][] serializedHeaders = headers.serialize();\n    ArrayList<byte[]> result = new ArrayList<byte[]>();\n    for (int i = 0; i < serializedHeaders.length; i += 2) {\n      byte[] key = serializedHeaders[i];\n      byte[] value = serializedHeaders[i + 1];\n      if (endsWith(key, binaryHeaderSuffixBytes)) {\n        // Binary header.\n        result.add(key);\n        result.add(BaseEncoding.base64().encode(value).getBytes(US_ASCII));\n      } else {\n        // Non-binary header.\n        // Filter out headers that contain non-spec-compliant ASCII characters.\n        // TODO(zhangkun83): only do such check in development mode since it's expensive\n        if (isSpecCompliantAscii(value)) {\n          result.add(key);\n          result.add(value);\n        } else {\n          String keyString = new String(key, US_ASCII);\n          logger.warning(\"Metadata key=\" + keyString + \", value=\" + Arrays.toString(value)\n              + \" contains invalid ASCII characters\");\n        }\n      }\n    }\n    return result.toArray(new byte[result.size()][]);\n  }\n\n  /**\n   * Transform HTTP/2-compliant headers to the raw serialized format which can be deserialized by\n   * metadata marshallers. It decodes the Base64-encoded binary headers.\n   */\n  public static byte[][] toRawSerializedHeaders(byte[][] http2Headers) {\n    byte[][] result = new byte[http2Headers.length][];\n    for (int i = 0; i < http2Headers.length; i += 2) {\n      byte[] key = http2Headers[i];\n      byte[] value = http2Headers[i + 1];\n      result[i] = key;\n      if (endsWith(key, binaryHeaderSuffixBytes)) {\n        // Binary header\n        result[i + 1] = BaseEncoding.base64().decode(new String(value, US_ASCII));\n      } else {\n        // Non-binary header\n        result[i + 1] = value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Returns true if <b>subject</b> ends with <b>suffix</b>.\n   */\n  private static boolean endsWith(byte[] subject, byte[] suffix) {\n    int start = subject.length - suffix.length;\n    if (start < 0) {\n      return false;\n    }\n    for (int i = start; i < subject.length; i++) {\n      if (subject[i] != suffix[i - start]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Returns true if <b>subject</b> contains only bytes that are spec-compliant ASCII characters and\n   * space.\n   */\n  private static boolean isSpecCompliantAscii(byte[] subject) {\n    for (byte b : subject) {\n      if (b < 32 || b > 126) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private TransportFrameUtil() {}\n}<｜fim▁end｜>",
    "response": "   */\n  @Nullable\n  public static String getFullMethodNameFromPath(String path) {\n    if (!path.startsWith(\"/\")) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ca.six.test.net2;\n\nimport android.util.Log;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.HttpURLConnection;\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.security.KeyManagementException;\nimport java.security.KeyStore;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.SecureRandom;\nimport java.security.cert.CertificateException;\nimport java.security.cert.X509Certificate;\n\nimport javax.net.ssl.HostnameVerifier;\nimport javax.net.ssl.HttpsURLConnection;\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLSession;\nimport javax.net.ssl.TrustManager;\nimport javax.net.ssl.TrustManagerFactory;\nimport javax.net.ssl.X509TrustManager;\n\npublic class HttpEngine3 {\n    private static final int CONNECT_TIMEOUT = 10000;\n    private static final int READ_TIMEOUT = 40000;\n\n    private HttpURLConnection initHttpConnection(String url) throws NoSuchAlgorithmException, KeyManagementException, IOException {\n        HttpURLConnection http;\n\n        URL urlInstance = new URL(url);\n        if (url.startsWith(\"https\")) {\n            HttpsURLConnection https = (HttpsURLConnection) urlInstance.openConnection();\n\n            SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n            TrustManager[] trustManagers = {new MyX509TrustManager()};\n            sslContext.init(null, trustManagers, new SecureRandom());\n            https.setSSLSocketFactory(sslContext.getSocketFactory());\n\n            HostnameVerifier hostnameVerifier = new HostnameVerifier() {\n                @Override\n                public boolean verify(String hostname, SSLSession session) {\n                    return \"api.github.com\".equals(hostname);\n                }\n            };\n            https.setHostnameVerifier(hostnameVerifier);\n            http = https;\n        } else {\n            http = (HttpURLConnection) urlInstance.openConnection();\n        }\n        http.setConnectTimeout(CONNECT_TIMEOUT);\n        http.setReadTimeout(READ_TIMEOUT);\n        http.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\n        return http;\n    }\n<｜fim▁hole｜>        }\n\n        public void checkServerTrusted(X509Certificate[] chain, String authType)\n                throws CertificateException {\n            if (chain == null) {\n                throw new IllegalArgumentException(\"checkServerTrusted: X509Certificate array is null\");\n            }\n\n            if (!(chain.length > 0)) {\n                throw new IllegalArgumentException(\"checkServerTrusted: X509Certificate is empty\");\n            }\n\n            if (!(null != authType)) {\n                throw new CertificateException(\"checkServerTrusted: AuthType is not RSA\");\n            }\n\n            // 验证证书是否是CA颁发\n            TrustManagerFactory tmf;\n            try {\n                tmf = TrustManagerFactory.getInstance(\"X509\");\n                tmf.init((KeyStore) null);\n                for (TrustManager trustManager : tmf.getTrustManagers()) {\n                    ((X509TrustManager) trustManager).checkServerTrusted(chain, authType);\n                }\n            } catch (Exception e) {\n                throw new CertificateException(e);\n            }\n        }\n\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    }\n\n    // =========================================================\n    public String sendHttpGetRequest(String url) {\n        try {\n            HttpURLConnection http = initHttpConnection(url);\n\n            http.setRequestMethod(\"GET\");\n            int responseCode = http.getResponseCode();\n            BufferedReader is = null;\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                is = new BufferedReader(new InputStreamReader(http.getInputStream()));\n            } else {\n                is = new BufferedReader(new InputStreamReader(http.getErrorStream()));\n            }\n\n            StringBuilder s = new StringBuilder();\n            char[] buf = new char[1024];\n            int num = -1;\n            while ((num = is.read(buf)) != -1) {\n                s.append(buf, 0, num);\n            }\n            String str = s.toString();\n\n            is.close();\n            http.disconnect();\n            return str;\n        } catch (NoSuchAlgorithmException e) {\n            Log.e(\"HttpEngine2\", \"Error on SSL init (NoSuchAlgorithmException)\", e);\n        } catch (KeyManagementException e) {\n            Log.e(\"HttpEngine2\", \"Error on SSL init (KeyManagementException)\", e);\n        } catch (MalformedURLException e) {\n            Log.e(\"HttpEngine2\", \"url format error\", e);\n        } catch (IOException e) {\n            Log.e(\"HttpEngine2\", \"http IO error\", e);\n        }\n\n        return \"\";\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    private static class MyX509TrustManager implements X509TrustManager {\n        public void checkClientTrusted(X509Certificate[] paramArrayOfX509Certificate, String paramString)\n                throws CertificateException {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.carbondata.core.scan.filter.executer;\n\nimport java.util.BitSet;\n\nimport org.apache.carbondata.core.datastore.block.SegmentProperties;\nimport org.apache.carbondata.core.scan.filter.FilterUtil;\nimport org.apache.carbondata.core.scan.filter.resolver.resolverinfo.DimColumnResolvedFilterInfo;\nimport org.apache.carbondata.core.scan.processor.BlocksChunkHolder;\n\npublic class RestructureFilterExecuterImpl implements FilterExecuter {\n\n  DimColumnExecuterFilterInfo dimColumnExecuterInfo;\n\n  public RestructureFilterExecuterImpl(DimColumnResolvedFilterInfo dimColumnResolvedFilterInfo,\n      SegmentProperties segmentProperties) {\n    dimColumnExecuterInfo = new DimColumnExecuterFilterInfo();\n    FilterUtil\n<｜fim▁hole｜>\n  @Override public BitSet applyFilter(BlocksChunkHolder blocksChunkHolder) {\n    BitSet bitSet = new BitSet(blocksChunkHolder.getDataBlock().nodeSize());\n    byte[][] filterValues = dimColumnExecuterInfo.getFilterKeys();\n    if (null != filterValues && filterValues.length > 0) {\n      bitSet.set(0, blocksChunkHolder.getDataBlock().nodeSize());\n    }\n    return bitSet;\n  }\n\n  @Override public BitSet isScanRequired(byte[][] blockMaxValue, byte[][] blockMinValue) {\n    BitSet bitSet = new BitSet(1);\n    bitSet.set(0);\n    return bitSet;\n  }\n}<｜fim▁end｜>",
    "response": "        .prepareKeysFromSurrogates(dimColumnResolvedFilterInfo.getFilterValues(), segmentProperties,\n            dimColumnResolvedFilterInfo.getDimension(), dimColumnExecuterInfo);\n  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.elasticsearch.index.analysis;\n\nimport com.carrotsearch.hppc.IntObjectOpenHashMap;\nimport org.apache.lucene.util.NumericUtils;\n\nimport java.io.IOException;\nimport java.io.Reader;\n\npublic class NumericDoubleAnalyzer extends NumericAnalyzer<NumericDoubleTokenizer> {\n\n    private final static IntObjectOpenHashMap<NamedAnalyzer> builtIn;\n\n    static {\n        builtIn = new IntObjectOpenHashMap<NamedAnalyzer>();\n        builtIn.put(Integer.MAX_VALUE, new NamedAnalyzer(\"_double/max\", AnalyzerScope.GLOBAL, new NumericDoubleAnalyzer(Integer.MAX_VALUE)));\n        for (int i = 0; i <= 64; i += 4) {\n            builtIn.put(i, new NamedAnalyzer(\"_double/\" + i, AnalyzerScope.GLOBAL, new NumericDoubleAnalyzer(i)));\n        }\n    }\n\n<｜fim▁hole｜>            namedAnalyzer = new NamedAnalyzer(\"_double/\" + precisionStep, AnalyzerScope.INDEX, new NumericDoubleAnalyzer(precisionStep));\n        }\n        return namedAnalyzer;\n    }\n\n    private final int precisionStep;\n\n    public NumericDoubleAnalyzer() {\n        this(NumericUtils.PRECISION_STEP_DEFAULT);\n    }\n\n    public NumericDoubleAnalyzer(int precisionStep) {\n        this.precisionStep = precisionStep;\n    }\n\n    @Override\n    protected NumericDoubleTokenizer createNumericTokenizer(Reader reader, char[] buffer) throws IOException {\n        return new NumericDoubleTokenizer(reader, precisionStep, buffer);\n    }\n}<｜fim▁end｜>",
    "response": "    public static NamedAnalyzer buildNamedAnalyzer(int precisionStep) {\n        NamedAnalyzer namedAnalyzer = builtIn.get(precisionStep);\n        if (namedAnalyzer == null) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.elasticsearch.indices;\n\nimport org.elasticsearch.cluster.routing.ShardRouting;\nimport org.elasticsearch.common.Nullable;\nimport org.elasticsearch.common.component.AbstractComponent;\nimport org.elasticsearch.common.inject.Inject;\nimport org.elasticsearch.common.settings.Settings;\nimport org.elasticsearch.index.Index;\nimport org.elasticsearch.index.service.IndexService;\nimport org.elasticsearch.index.shard.ShardId;\nimport org.elasticsearch.index.shard.service.IndexShard;\n\nimport java.util.concurrent.CopyOnWriteArrayList;\n\npublic class InternalIndicesLifecycle extends AbstractComponent implements IndicesLifecycle {\n\n    private final CopyOnWriteArrayList<Listener> listeners = new CopyOnWriteArrayList<Listener>();\n\n<｜fim▁hole｜>    public void addListener(Listener listener) {\n        listeners.add(listener);\n    }\n\n    public void removeListener(Listener listener) {\n        listeners.remove(listener);\n    }\n\n    public void shardRoutingChanged(IndexShard indexShard, @Nullable ShardRouting oldRouting, ShardRouting newRouting) {\n        for (Listener listener : listeners) {\n            listener.shardRoutingChanged(indexShard, oldRouting, newRouting);\n        }\n    }\n\n    public void beforeIndexCreated(Index index) {\n        for (Listener listener : listeners) {\n            listener.beforeIndexCreated(index);\n        }\n    }\n\n    public void afterIndexCreated(IndexService indexService) {\n        for (Listener listener : listeners) {\n            listener.afterIndexCreated(indexService);\n        }\n    }\n\n    public void beforeIndexShardCreated(ShardId shardId) {\n        for (Listener listener : listeners) {\n            listener.beforeIndexShardCreated(shardId);\n        }\n    }\n\n    public void afterIndexShardCreated(IndexShard indexShard) {\n        for (Listener listener : listeners) {\n            listener.afterIndexShardCreated(indexShard);\n        }\n    }\n\n    public void afterIndexShardStarted(IndexShard indexShard) {\n        for (Listener listener : listeners) {\n            listener.afterIndexShardStarted(indexShard);\n        }\n    }\n\n    public void beforeIndexClosed(IndexService indexService) {\n        for (Listener listener : listeners) {\n            listener.beforeIndexClosed(indexService);\n        }\n    }\n\n    public void afterIndexClosed(Index index) {\n        for (Listener listener : listeners) {\n            listener.afterIndexClosed(index);\n        }\n    }\n\n    public void beforeIndexShardClosed(ShardId shardId, @Nullable IndexShard indexShard) {\n        for (Listener listener : listeners) {\n            listener.beforeIndexShardClosed(shardId, indexShard);\n        }\n    }\n\n    public void afterIndexShardClosed(ShardId shardId) {\n        for (Listener listener : listeners) {\n            listener.afterIndexShardClosed(shardId);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    @Inject\n    public InternalIndicesLifecycle(Settings settings) {\n        super(settings);\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.elasticsearch.action.bench;\n\nimport org.elasticsearch.common.io.stream.StreamInput;\nimport org.elasticsearch.common.io.stream.StreamOutput;\nimport org.elasticsearch.common.io.stream.Streamable;\n\nimport java.io.IOException;\n\npublic class CompetitionIterationData implements Streamable {\n\n    private long[] data;\n\n    public CompetitionIterationData() { }\n\n    public CompetitionIterationData(long[] data) {\n        this.data = data;\n    }\n\n    public long[] data() {\n        return data;\n    }\n\n    /**\n     * The number of data values currently holding valid values\n     *\n     * @return      Number of data values currently holding valid values\n     */\n    public long length() {\n        long length = 0;\n<｜fim▁hole｜>        return length;\n    }\n\n    /**\n     * The sum of all currently set values\n     *\n     * @return      The sum of all currently set values\n     */\n    public long sum() {\n        long sum = 0;\n        for (int i = 0; i < data.length; i++) {\n            sum += Math.max(0, data[i]);  // Data values can be invalid when computing statistics on actively running benchmarks\n        }\n        return sum;\n    }\n\n    @Override\n    public void readFrom(StreamInput in) throws IOException {\n        data = in.readLongArray();\n    }\n\n    @Override\n    public void writeTo(StreamOutput out) throws IOException {\n        out.writeLongArray(data);\n    }\n}<｜fim▁end｜>",
    "response": "        for (int i = 0; i < data.length; i++) {\n            if (data[i] < 0) {  // Data values can be invalid when computing statistics on actively running benchmarks\n                continue;\n            }\n            length++;\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.camel.processor;\n\nimport org.apache.camel.CamelExecutionException;\nimport org.apache.camel.ContextTestSupport;\nimport org.apache.camel.Exchange;\nimport org.apache.camel.Processor;\nimport org.apache.camel.builder.RouteBuilder;\nimport org.junit.Test;\n\npublic class SplitterStreamingErrorHandlingTest extends ContextTestSupport {\n\n    @Test\n<｜fim▁hole｜>        template.sendBody(\"direct:start\", \"A,B,C,D,E\");\n\n        assertMockEndpointsSatisfied();\n    }\n\n    @Test\n    public void testSplitterStreamingWithError() throws Exception {\n        getMockEndpoint(\"mock:a\").expectedBodiesReceived(\"A\", \"B\", \"Kaboom\", \"D\", \"E\");\n        getMockEndpoint(\"mock:b\").expectedBodiesReceived(\"A\", \"B\", \"D\", \"E\");\n        getMockEndpoint(\"mock:result\").expectedMessageCount(0);\n\n        // we do not stop on exception and thus the splitted message which failed\n        // would be silently ignored so we can continue routing\n        // you can always use a custom aggregation strategy to deal with errors your-self\n        try {\n            template.sendBody(\"direct:start\", \"A,B,Kaboom,D,E\");\n            fail(\"Should have thrown an exception\");\n        } catch (CamelExecutionException e) {\n            assertIsInstanceOf(IllegalArgumentException.class, e.getCause());\n            assertEquals(\"Cannot do this\", e.getCause().getMessage());\n        }\n\n        assertMockEndpointsSatisfied();\n    }\n\n    @Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            @Override\n            public void configure() throws Exception {\n                from(\"direct:start\")\n                    .split(body().tokenize(\",\")).streaming()\n                        .to(\"mock:a\")\n                        .process(new Processor() {\n                            public void process(Exchange exchange) throws Exception {\n                                String body = exchange.getIn().getBody(String.class);\n                                if (\"Kaboom\".equals(body)) {\n                                    throw new IllegalArgumentException(\"Cannot do this\");\n                                }\n                            }\n                        })\n                        .to(\"mock:b\")\n                    .end()\n                    .to(\"mock:result\");\n            }\n        };\n    }\n}<｜fim▁end｜>",
    "response": "    public void testSplitterStreamingNoError() throws Exception {\n        getMockEndpoint(\"mock:a\").expectedBodiesReceived(\"A\", \"B\", \"C\", \"D\", \"E\");\n        getMockEndpoint(\"mock:b\").expectedBodiesReceived(\"A\", \"B\", \"C\", \"D\", \"E\");\n        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"A,B,C,D,E\");\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package edu.harvard.hul.ois.jhove.module.wave;\n\nimport java.io.IOException;\n\nimport edu.harvard.hul.ois.jhove.RepInfo;\nimport edu.harvard.hul.ois.jhove.module.iff.*;\nimport edu.harvard.hul.ois.jhove.*;\nimport edu.harvard.hul.ois.jhove.module.WaveModule;\nimport java.io.*;\nimport java.util.*;\n\npublic class MpegChunk extends Chunk {\n\n    /**\n     * Constructor.\n     * \n     * @param module   The WaveModule under which this was called\n     * @param hdr      The header for this chunk\n     * @param dstrm    The stream from which the WAVE data are being read\n     */\n    public MpegChunk (\n            ModuleBase module,\n            ChunkHeader hdr,\n            DataInputStream dstrm) {\n        super(module, hdr, dstrm);\n    }\n\n    /** Reads a chunk and puts an MPEG Property into\n     *  the RepInfo object. \n     * \n     *  @return   <code>false</code> if the chunk is structurally\n     *            invalid, otherwise <code>true</code>\n     */\n    public boolean readChunk(RepInfo info) throws IOException {\n        WaveModule module = (WaveModule) _module;\n        int soundInformation = module.readUnsignedShort(_dstream);\n        int frameSize = module.readUnsignedShort (_dstream);\n        int ancillaryDataLength = module.readUnsignedShort (_dstream);\n<｜fim▁hole｜>        List propList = new ArrayList ();\n        propList.add (module.buildBitmaskProperty(soundInformation,\n                \"SoundInformation\",\n                WaveStrings.SOUND_INFORMATION_1,\n                WaveStrings.SOUND_INFORMATION_0));\n        propList.add (new Property (\"FrameSize\",\n                PropertyType.INTEGER,\n                new Integer (frameSize)));\n        propList.add (new Property (\"AncillaryDataLength\",\n                PropertyType.INTEGER,\n                new Integer (ancillaryDataLength)));\n        propList.add (module.buildBitmaskProperty(ancillaryDataDef,\n                \"AncillaryDataDef\",\n                WaveStrings.ANCILLARY_DEF_1,\n                WaveStrings.ANCILLARY_DEF_0));\n        module.addWaveProperty (new Property (\"MPEG\",\n                PropertyType.PROPERTY,\n                PropertyArity.LIST,\n                propList));\n        return true;\n    }\n\n}<｜fim▁end｜>",
    "response": "        int ancillaryDataDef = module.readUnsignedShort (_dstream);\n        module.skipBytes (_dstream, 4, module);     // reserved\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package gololang;\n\nimport java.util.Arrays;\nimport java.util.Iterator;\n\npublic final class Tuple implements Iterable<Object>, HeadTail<Object>, Comparable<Tuple> {\n\n  private final Object[] data;\n\n  /**\n   * Creates a new tuple from values.\n   *\n   * @param values the tuple values.\n   */\n  public Tuple(Object... values) {\n    data = Arrays.copyOf(values, values.length);\n  }\n\n  /**\n   * Helper factory method.\n   *\n   * @param values the values as an array.\n   * @return a tuple from the array values.\n   */\n  public static Tuple fromArray(Object[] values) {\n    return new Tuple(values);\n  }\n\n  /**\n   * Gives the number of elements in this tuple.\n   *\n   * @return the tuple size.\n   */\n  public int size() {\n    return data.length;\n  }\n\n  /**\n   * Checks whether the tuple is empty or not.\n   *\n   * @return {@code true} if the tuple has no element, {@code false} otherwise.\n   */\n  @Override\n  public boolean isEmpty() {\n    return data.length == 0;\n  }\n\n  /**\n   * Gets the element at a specified index.\n   *\n   * @param index the element index.\n   * @return the element at index {@code index}.\n   * @throws IndexOutOfBoundsException if the specified {@code index} is not valid (negative value or above the size).\n   */\n  public Object get(int index) {\n    if (index < 0 || index >= data.length) {\n      throw new IndexOutOfBoundsException(index + \" is outside the bounds of a \" + data.length + \"-tuple\");\n    }\n    return data[index];\n  }\n\n  /**\n   * Creates an iterator over the tuple.\n   * <p>The iterator does not support removal.\n   *\n   * @return an iterator.\n   */\n  @Override\n  public Iterator<Object> iterator() {\n    return new Iterator<Object>() {\n\n      private int i = 0;\n\n      @Override\n      public boolean hasNext() {\n        return i < data.length;\n      }\n\n      @Override\n      public Object next() {\n        Object result = data[i];\n        i = i + 1;\n        return result;\n      }\n\n      @Override\n      public void remove() {\n        throw new UnsupportedOperationException(\"Tuples are immutable\");\n      }\n    };\n  }\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    Tuple tuple = (Tuple) o;\n    return Arrays.equals(data, tuple.data);\n  }\n\n  /**\n   * Compares this tuple with the specified tuple for order.\n   * <p>Returns a negative integer, zero, or a positive integer as this tuple is less than, equal to, or greater than the specified tuple.\n   * <p>Two tuples are compared using the lexicographical (dictionary) order, that is:\n   * {@code [1, 2] < [1, 3]} and {@code [2, 5] < [3, 1]}.\n   * <p> Two tuples are comparable if they have the same size and their elements are pairwise comparable.\n   *\n   * @param other the tuple to be compared.\n   * @return a negative integer, zero, or a positive integer as this tuple is less than, equal to, or greater than the specified tuple.\n   * @throws NullPointerException if the specified tuple is null\n   * @throws ClassCastException  if the type of the elements in the specified tuple prevent them from being compared to this tuple elements.\n   * @throws IllegalArgumentException if the specified tuple has a different size than this tuple.\n   */\n  @Override\n  public int compareTo(Tuple other) {\n    if (this.equals(other)) {\n      return 0;\n<｜fim▁hole｜>      throw new IllegalArgumentException(String.format(\n            \"%s and %s can't be compared since of different size\", this, other));\n    }\n    for (int i = 0; i < size(); i++) {\n      if (!this.get(i).equals(other.get(i))) {\n        @SuppressWarnings(\"unchecked\")\n        Comparable<Object> current = (Comparable<Object>) this.get(i);\n        return current.compareTo(other.get(i));\n      }\n    }\n    return 0;\n  }\n\n  @Override\n  public int hashCode() {\n    return Arrays.hashCode(data);\n  }\n\n  @Override\n  public String toString() {\n    return \"tuple\" + Arrays.toString(data);\n  }\n\n  /**\n   * Returns the first element of the tuple.\n   *\n   * @return the first element.\n   */\n  @Override\n  public Object head() {\n    if (this.isEmpty()) {\n      return null;\n    }\n    return this.get(0);\n  }\n\n  /**\n   * Returns a new tuple containg the remaining elements.\n   *\n   * @return a tuple.\n   */\n  @Override\n  public Tuple tail() {\n    if (this.isEmpty()) {\n      // we can return this since a Tuple is immutable.\n      return this;\n    }\n    return fromArray(Arrays.copyOfRange(data, 1, data.length));\n  }\n}<｜fim▁end｜>",
    "response": "    }\n    if (this.size() != other.size()) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.prestosql.plugin.hive.authentication;\n\nimport io.prestosql.plugin.base.authentication.KerberosAuthentication;\nimport io.prestosql.plugin.hive.HdfsConfigurationInitializer;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.security.UserGroupInformation;\n\nimport javax.security.auth.Subject;\n\nimport static io.prestosql.plugin.hive.util.ConfigurationUtils.getInitialConfiguration;\n<｜fim▁hole｜>public class KerberosHadoopAuthentication\n        implements HadoopAuthentication\n{\n    private final KerberosAuthentication kerberosAuthentication;\n\n    public static KerberosHadoopAuthentication createKerberosHadoopAuthentication(KerberosAuthentication kerberosAuthentication, HdfsConfigurationInitializer initializer)\n    {\n        Configuration configuration = getInitialConfiguration();\n        initializer.initializeConfiguration(configuration);\n\n        // In order to enable KERBEROS authentication method for HDFS\n        // UserGroupInformation.authenticationMethod static field must be set to KERBEROS\n        // It is further used in many places in DfsClient\n        configuration.set(\"hadoop.security.authentication\", \"kerberos\");\n\n        UserGroupInformation.setConfiguration(configuration);\n\n        return new KerberosHadoopAuthentication(kerberosAuthentication);\n    }\n\n    private KerberosHadoopAuthentication(KerberosAuthentication kerberosAuthentication)\n    {\n        this.kerberosAuthentication = requireNonNull(kerberosAuthentication, \"kerberosAuthentication is null\");\n    }\n\n    @Override\n    public UserGroupInformation getUserGroupInformation()\n    {\n        Subject subject = kerberosAuthentication.getSubject();\n        return createUserGroupInformationForSubject(subject);\n    }\n}<｜fim▁end｜>",
    "response": "import static java.util.Objects.requireNonNull;\nimport static org.apache.hadoop.security.UserGroupInformationShim.createUserGroupInformationForSubject;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.xeiam.xchange.anx.v2.dto.marketdata;\n\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.xeiam.xchange.anx.v2.dto.ANXValue;\n\npublic final class ANXTicker {\n\n  private final ANXValue high;\n  private final ANXValue low;\n  private final ANXValue avg;\n  private final ANXValue vwap;\n  private final ANXValue vol;\n  private final ANXValue last;\n  private final ANXValue buy;\n  private final ANXValue sell;\n  private final long now;\n\n  /**\n   * Constructor\n   * \n   * @param high\n   * @param low\n   * @param avg\n   * @param vwap\n   * @param vol\n   * @param last\n   * @param buy\n   * @param sell\n   * @param now\n   */\n  public ANXTicker(@JsonProperty(\"high\") ANXValue high, @JsonProperty(\"low\") ANXValue low, @JsonProperty(\"avg\") ANXValue avg, @JsonProperty(\"vwap\") ANXValue vwap, @JsonProperty(\"vol\") ANXValue vol,\n      @JsonProperty(\"last\") ANXValue last, @JsonProperty(\"buy\") ANXValue buy, @JsonProperty(\"sell\") ANXValue sell, @JsonProperty(\"now\") long now) {\n\n    this.high = high;\n    this.low = low;\n    this.avg = avg;\n    this.vwap = vwap;\n    this.vol = vol;\n    this.last = last;\n    this.buy = buy;\n    this.sell = sell;\n    this.now = now;\n  }\n\n  public ANXValue getHigh() {\n\n    return high;\n  }\n\n  public ANXValue getLow() {\n\n    return low;\n  }\n\n  public ANXValue getAvg() {\n\n    return avg;\n  }\n<｜fim▁hole｜>\n  public ANXValue getVol() {\n\n    return vol;\n  }\n\n  public ANXValue getLast() {\n\n    return last;\n  }\n\n  public ANXValue getBuy() {\n\n    return buy;\n  }\n\n  public ANXValue getSell() {\n\n    return sell;\n  }\n\n  public long getNow() {\n\n    return now;\n  }\n\n  @Override\n  public String toString() {\n\n    return \"ANXTicker [high=\" + high + \", low=\" + low + \", avg=\" + avg + \", vwap=\" + vwap + \", vol=\" + vol + \", last=\" + last + \", buy=\" + buy + \", sell=\" + sell + \", now=\" + now + \"]\";\n  }\n\n}<｜fim▁end｜>",
    "response": "\n  public ANXValue getVwap() {\n\n    return vwap;\n  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.climate.mirage.app;\n\nimport android.graphics.Bitmap;\nimport android.graphics.Canvas;\nimport android.graphics.Color;\nimport android.graphics.Paint;\nimport android.os.Bundle;\nimport android.support.v7.app.AppCompatActivity;\nimport android.view.View;\nimport android.widget.Button;\nimport android.widget.ImageView;\n\nimport com.climate.mirage.Mirage;\nimport com.climate.mirage.cache.disk.DiskCacheStrategy;\nimport com.climate.mirage.load.BitmapProvider;\n\nimport java.io.IOException;\n\npublic class CustomBitmapActivity extends AppCompatActivity {\n\n    private ImageView iv;\n    private Button button1, button2;\n\n    @Override\n<｜fim▁hole｜>        setContentView(R.layout.row);\n        iv = (ImageView) findViewById(R.id.imageView);\n        button1 = (Button) findViewById(R.id.button1);\n        button2 = (Button) findViewById(R.id.button2);\n        button2.setVisibility(View.GONE);\n        button1.setText(\"Load Bitmap 1\");\n\n        button1.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Mirage.get(CustomBitmapActivity.this)\n                        .load(new CustomBitmap())\n                        .skipWritingMemoryCache(true)\n                        .diskCacheStrategy(DiskCacheStrategy.NONE)\n                        .into(iv)\n                        .placeHolder(R.drawable.mirage_ic_launcher)\n                        .error(R.drawable.ic_error)\n                        .fade()\n                        .go();\n            }\n        });\n    }\n\n    private static class CustomBitmap implements BitmapProvider {\n        @Override\n        public Bitmap load() throws IOException {\n            Bitmap bitmap = Bitmap.createBitmap(400, 400, Bitmap.Config.ARGB_8888);\n            Canvas canvas = new Canvas(bitmap);\n            Paint paint = new Paint();\n            paint.setColor(Color.RED);\n            paint.setStyle(Paint.Style.FILL);\n            for (int i = 0; i < 6; i++) {\n                int angle = (360 / 6) * i;\n                float x = (float) (150 * Math.cos(angle * Math.PI / 180F)) + 200;\n                float y = (float) (150 * Math.sin(angle * Math.PI / 180F)) + 200;\n                canvas.drawCircle(x, y, 20, paint);\n            }\n            return bitmap;\n        }\n\n        @Override\n        public String id() {\n            return \"circles_in_cirles\";\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.gogaworm.easyjlpt.games;\n\nimport com.gogaworm.easyjlpt.db.Kanji;\n\npublic class KanjiSelectTranslationByKanjiGameTemplate extends SelectVariantGameTemplate<Kanji> {\n    @Override\n    protected String getTaskText(Kanji datum) {\n<｜fim▁hole｜>    @Override\n    protected String[] getVariantsText(Kanji task) {\n        return new String[] {task.translation};\n    }\n\n    @Override\n    public boolean canUseGame(Kanji datum) {\n        return true;\n    }\n}<｜fim▁end｜>",
    "response": "        return datum.kanji;\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.ovirt.engine.ui.webadmin.section.main.view.tab;\n\nimport java.util.Date;\n\nimport org.ovirt.engine.core.common.businessentities.AuditLog;\nimport org.ovirt.engine.core.common.mode.ApplicationMode;\nimport org.ovirt.engine.ui.common.uicommon.model.MainModelProvider;\nimport org.ovirt.engine.ui.common.widget.table.column.AuditLogSeverityColumn;\nimport org.ovirt.engine.ui.common.widget.table.column.FullDateTimeColumn;\nimport org.ovirt.engine.ui.common.widget.table.column.TextColumnWithTooltip;\nimport org.ovirt.engine.ui.uicommonweb.models.ApplicationModeHelper;\nimport org.ovirt.engine.ui.uicommonweb.models.events.EventListModel;\nimport org.ovirt.engine.ui.webadmin.ApplicationConstants;\nimport org.ovirt.engine.ui.webadmin.section.main.presenter.tab.MainTabEventPresenter;\nimport org.ovirt.engine.ui.webadmin.section.main.view.AbstractMainTabTableView;\n\nimport com.google.gwt.core.client.GWT;\nimport com.google.gwt.event.dom.client.ClickEvent;\nimport com.google.gwt.uibinder.client.UiBinder;\nimport com.google.gwt.uibinder.client.UiField;\nimport com.google.gwt.uibinder.client.UiHandler;\nimport com.google.gwt.user.client.ui.RadioButton;\nimport com.google.gwt.user.client.ui.SimplePanel;\nimport com.google.gwt.user.client.ui.Widget;\nimport com.google.inject.Inject;\n\npublic class MainTabEventView extends AbstractMainTabTableView<AuditLog, EventListModel> implements MainTabEventPresenter.ViewDef {\n\n    interface ViewUiBinder extends UiBinder<Widget, MainTabEventView> {\n        ViewUiBinder uiBinder = GWT.create(ViewUiBinder.class);\n    }\n\n    @UiField\n    RadioButton basicViewButton;\n\n    @UiField\n    RadioButton advancedViewButton;\n\n    @UiField\n    SimplePanel tablePanel;\n\n    private ApplicationConstants constants;\n\n    @Inject\n    public MainTabEventView(MainModelProvider<AuditLog, EventListModel> modelProvider,\n            ApplicationConstants constants) {\n        super(modelProvider);\n        this.constants = constants;\n        initTable();\n\n        initWidget(ViewUiBinder.uiBinder.createAndBindUi(this));\n        localize(constants);\n\n        tablePanel.setWidget(getTable());\n        basicViewButton.setValue(true);\n    }\n\n    void localize(ApplicationConstants constants) {\n        basicViewButton.setText(constants.eventBasicViewLabel());\n        advancedViewButton.setText(constants.eventAdvancedViewLabel());\n    }\n\n    @UiHandler({ \"basicViewButton\", \"advancedViewButton\" })\n    void handleViewButtonClick(ClickEvent event) {\n        boolean advancedViewEnabled = advancedViewButton.getValue();\n\n        getTable().ensureColumnPresent(AdvancedViewColumns.logTypeColumn, constants.eventIdEvent(),\n                advancedViewEnabled,\n                \"60px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.userColumn, constants.userEvent(),\n                advancedViewEnabled,\n                \"100px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.hostColumn, constants.hostEvent(),\n                advancedViewEnabled,\n                \"100px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.virtualMachineColumn, constants.vmEvent(),\n                advancedViewEnabled && ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly),\n                \"100px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.templateColumn, constants.templateEvent(),\n                advancedViewEnabled && ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly),\n                \"100px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.dataCenterColumn, constants.dcEvent(),\n                advancedViewEnabled && ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly),\n                \"100px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.storageColumn, constants.storageEvent(),\n                advancedViewEnabled && ApplicationModeHelper.isModeSupported(ApplicationMode.VirtOnly),\n                \"100px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.clusterColumn, constants.clusterEvent(),\n                advancedViewEnabled,\n                \"100px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.volumeColumn, constants.volumeEvent(),\n                advancedViewEnabled && ApplicationModeHelper.isModeSupported(ApplicationMode.GlusterOnly),\n                \"100px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.corrIdColumn, constants.eventCorrelationId(),\n                advancedViewEnabled,\n                \"100px\"); //$NON-NLS-1$\n    }\n\n    void initTable() {\n        getTable().enableColumnResizing();\n\n        getTable().addColumn(new AuditLogSeverityColumn(), constants.empty(), \"30px\"); //$NON-NLS-1$\n\n        TextColumnWithTooltip<AuditLog> logTimeColumn = new FullDateTimeColumn<AuditLog>() {\n            @Override\n            protected Date getRawValue(AuditLog object) {\n                return object.getlog_time();\n            }\n        };\n        getTable().addColumn(logTimeColumn, constants.timeEvent(), \"150px\"); //$NON-NLS-1$\n\n        TextColumnWithTooltip<AuditLog> messageColumn = new TextColumnWithTooltip<AuditLog>() {\n            @Override\n            public String getValue(AuditLog object) {\n                return object.getmessage();\n            }\n        };\n        getTable().addColumn(messageColumn, constants.messageEvent(), \"150px\"); //$NON-NLS-1$\n    }\n\n}\n\nclass AdvancedViewColumns {\n\n    public static final TextColumnWithTooltip<AuditLog> logTypeColumn = new TextColumnWithTooltip<AuditLog>() {\n        @Override\n        public String getValue(AuditLog object) {\n            return String.valueOf(object.getlog_typeValue());\n        }\n    };\n\n    public static final TextColumnWithTooltip<AuditLog> userColumn = new TextColumnWithTooltip<AuditLog>() {\n        @Override\n        public String getValue(AuditLog object) {\n            return object.getuser_name();\n        }\n    };\n\n    public static final TextColumnWithTooltip<AuditLog> hostColumn = new TextColumnWithTooltip<AuditLog>() {\n        @Override\n        public String getValue(AuditLog object) {\n            return object.getvds_name();\n        }\n    };\n\n    public static final TextColumnWithTooltip<AuditLog> virtualMachineColumn = new TextColumnWithTooltip<AuditLog>() {\n        @Override\n        public String getValue(AuditLog object) {\n            return object.getvm_name();\n        }\n    };\n\n    public static final TextColumnWithTooltip<AuditLog> templateColumn = new TextColumnWithTooltip<AuditLog>() {\n        @Override\n        public String getValue(AuditLog object) {\n            return object.getvm_template_name();\n        }\n    };\n\n    public static final TextColumnWithTooltip<AuditLog> dataCenterColumn = new TextColumnWithTooltip<AuditLog>() {\n        @Override\n        public String getValue(AuditLog object) {\n            return object.getstorage_pool_name();\n        }\n    };\n\n<｜fim▁hole｜>    };\n\n    public static final TextColumnWithTooltip<AuditLog> clusterColumn = new TextColumnWithTooltip<AuditLog>() {\n        @Override\n        public String getValue(AuditLog object) {\n            return object.getvds_group_name();\n        }\n    };\n\n    public static final TextColumnWithTooltip<AuditLog> volumeColumn = new TextColumnWithTooltip<AuditLog>() {\n        @Override\n        public String getValue(AuditLog object) {\n            return object.getGlusterVolumeName();\n        }\n    };\n\n    public static final TextColumnWithTooltip<AuditLog> corrIdColumn = new TextColumnWithTooltip<AuditLog>() {\n        @Override\n        public String getValue(AuditLog object) {\n            return object.getCorrelationId();\n        }\n    };\n\n}<｜fim▁end｜>",
    "response": "    public static final TextColumnWithTooltip<AuditLog> storageColumn = new TextColumnWithTooltip<AuditLog>() {\n        @Override\n        public String getValue(AuditLog object) {\n            return object.getstorage_domain_name();\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.intellij.openapi.actionSystem;\n\nimport com.intellij.util.ReflectionUtil;\nimport org.jetbrains.annotations.NonNls;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport javax.swing.*;\nimport java.beans.PropertyChangeListener;\nimport java.beans.PropertyChangeSupport;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic abstract class ActionGroup extends AnAction {\n  private boolean myPopup;\n  private final PropertyChangeSupport myChangeSupport = new PropertyChangeSupport(this);\n  public static final ActionGroup EMPTY_GROUP = new ActionGroup() {\n    @NotNull\n    @Override\n    public AnAction[] getChildren(@Nullable AnActionEvent e) {\n      return EMPTY_ARRAY;\n    }\n  };\n\n  private Set<AnAction> mySecondaryActions;\n\n  /**\n   * The actual value is a Boolean.\n   */\n  @NonNls public static final String PROP_POPUP = \"popup\";\n\n  private Boolean myDumbAware;\n\n  /**\n   * Creates a new <code>ActionGroup</code> with shortName set to <code>null</code> and\n   * popup set to false.\n   */\n  public ActionGroup(){\n    this(null, false);\n  }\n\n  /**\n   * Creates a new <code>ActionGroup</code> with the specified shortName\n   * and popup.\n   *\n   * @param shortName Text that represents a short name for this action group\n   *\n   * @param popup <code>true</code> if this group is a popup, <code>false</code>\n   *  otherwise\n   */\n  public ActionGroup(String shortName, boolean popup){\n    super(shortName);\n    setPopup(popup);\n  }\n\n  public ActionGroup(String text, String description, Icon icon) {\n    super(text, description, icon);\n  }\n\n  /**\n   * This method can be called in popup menus if {@link #canBePerformed(DataContext)} is true\n   */\n  @Override\n  public void actionPerformed(AnActionEvent e){\n  }\n\n  /**\n   * @return true if {@link #actionPerformed(AnActionEvent)} should be called\n   */\n  public boolean canBePerformed(DataContext context) {\n    return false;\n  }\n\n  /**\n   * Returns the type of the group.\n   *\n   * @return <code>true</code> if the group is a popup, <code>false</code> otherwise\n   */\n  public boolean isPopup(){\n    return myPopup;\n  }\n\n  /**\n   * Sets the type of the group.\n   *\n   * @param popup If <code>true</code> the group will be shown as a popup in menus\n   */\n  public final void setPopup(boolean popup){\n    boolean oldPopup = myPopup;\n    myPopup = popup;\n    firePropertyChange(PROP_POPUP, oldPopup?Boolean.TRUE:Boolean.FALSE, myPopup?Boolean.TRUE:Boolean.FALSE);\n  }\n\n  public final void addPropertyChangeListener(PropertyChangeListener l){\n    myChangeSupport.addPropertyChangeListener(l);\n  }\n\n  public final void removePropertyChangeListener(PropertyChangeListener l){\n    myChangeSupport.removePropertyChangeListener(l);\n  }\n\n  protected final void firePropertyChange(String propertyName, Object oldValue, Object newValue){\n    myChangeSupport.firePropertyChange(propertyName, oldValue, newValue);\n  }\n\n  /**\n   * Returns the children of the group.\n   *\n   * @return An array representing children of this group. All returned children must be not <code>null</code>.\n   */\n  @NotNull\n  public abstract AnAction[] getChildren(@Nullable AnActionEvent e);\n\n  final void setAsPrimary(AnAction action, boolean isPrimary) {\n    if (isPrimary) {\n      if (mySecondaryActions != null) {\n        mySecondaryActions.remove(action);\n      }\n    } else {\n      if (mySecondaryActions == null) {\n        mySecondaryActions = new HashSet<>();\n      }\n\n      mySecondaryActions.add(action);\n    }\n  }\n\n  public final boolean isPrimary(AnAction action) {\n    return mySecondaryActions == null || !mySecondaryActions.contains(action);\n  }\n\n  protected final void replace(AnAction originalAction, AnAction newAction) {\n    if (mySecondaryActions != null) {\n      if (mySecondaryActions.contains(originalAction)) {\n        mySecondaryActions.remove(originalAction);\n        mySecondaryActions.add(newAction);\n      }\n    }\n  }\n\n  @Override\n  public boolean isDumbAware() {\n    if (myDumbAware != null) {\n      return myDumbAware;\n    }\n\n    boolean dumbAware = super.isDumbAware();\n    if (dumbAware) {\n      myDumbAware = Boolean.TRUE;\n    } else {\n      if (myDumbAware == null) {\n        Class<?> declaringClass = ReflectionUtil.getMethodDeclaringClass(getClass(), \"update\", AnActionEvent.class);\n        myDumbAware = AnAction.class.equals(declaringClass) || ActionGroup.class.equals(declaringClass);\n      }\n    }\n\n<｜fim▁hole｜>\n  public boolean disableIfNoVisibleChildren() {\n    return true;\n  }\n}<｜fim▁end｜>",
    "response": "    return myDumbAware;\n  }\n\n  public boolean hideIfNoVisibleChildren() {\n    return false;\n  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.intellij.codeInspection.dataFlow.inliner;\n\nimport com.intellij.codeInsight.ExpressionUtil;\nimport com.intellij.codeInsight.Nullability;\nimport com.intellij.codeInsight.NullabilityAnnotationInfo;\nimport com.intellij.codeInsight.NullableNotNullManager;\nimport com.intellij.codeInspection.dataFlow.CFGBuilder;\nimport com.intellij.codeInspection.dataFlow.NullabilityProblemKind;\nimport com.intellij.openapi.util.Ref;\nimport com.intellij.psi.*;\nimport com.intellij.psi.util.PsiTreeUtil;\nimport com.intellij.psi.util.PsiUtil;\nimport com.siyeh.ig.psiutils.ControlFlowUtils;\nimport org.jetbrains.annotations.NotNull;\n\nimport static com.intellij.util.ObjectUtils.tryCast;\n\npublic class SimpleMethodInliner implements CallInliner {\n  @Override\n  public boolean tryInlineCall(@NotNull CFGBuilder builder, @NotNull PsiMethodCallExpression call) {\n    if (!call.getArgumentList().isEmpty()) return false;\n    if (!ExpressionUtil.isEffectivelyUnqualified(call.getMethodExpression())) return false;\n    PsiMethod method = call.resolveMethod();\n    if (method == null || PsiUtil.canBeOverridden(method) || (call.isPhysical() && !method.isPhysical())) return false;\n    PsiClass aClass = method.getContainingClass();\n    if (aClass == null || !PsiTreeUtil.isAncestor(aClass, call, true)) return false;\n    if (PsiType.VOID.equals(method.getReturnType())) return false;\n    if (PsiTreeUtil.isAncestor(method, call, true)) return false;\n    PsiReturnStatement statement = tryCast(ControlFlowUtils.getOnlyStatementInBlock(method.getBody()), PsiReturnStatement.class);\n<｜fim▁hole｜>    boolean nonNull = info != null && info.getNullability() == Nullability.NOT_NULL && !info.isInferred();\n    builder.pushExpression(returnValue, nonNull ? NullabilityProblemKind.assumeNotNull : NullabilityProblemKind.noProblem)\n      .boxUnbox(returnValue, call.getType())\n      .resultOf(call);\n    return true;\n  }\n\n  private static boolean isSimple(PsiExpression value) {\n    if (value == null) return true;\n    Ref<Boolean> hasFieldRefs = Ref.create(false);\n    boolean allowed = PsiTreeUtil.processElements(value, e -> {\n      if (!(e instanceof PsiExpression)) return true;\n      if (e instanceof PsiInstanceOfExpression || e instanceof PsiParenthesizedExpression || e instanceof PsiLiteralExpression ||\n          e instanceof PsiPolyadicExpression || e instanceof PsiUnaryExpression || e instanceof PsiConditionalExpression ||\n          e instanceof PsiTypeCastExpression || e instanceof PsiArrayAccessExpression || e instanceof PsiLambdaExpression ||\n          e instanceof PsiMethodReferenceExpression || e instanceof PsiThisExpression) {\n        return true;\n      }\n      if (e instanceof PsiReferenceExpression) {\n        PsiElement target = ((PsiReferenceExpression)e).resolve();\n        if (target instanceof PsiField && !((PsiField)target).hasModifierProperty(PsiModifier.STATIC)) {\n          hasFieldRefs.set(true);\n        }\n        return true;\n      }\n      return false;\n    });\n    return allowed && hasFieldRefs.get();\n  }\n}<｜fim▁end｜>",
    "response": "    if (statement == null) return false;\n    PsiExpression returnValue = PsiUtil.skipParenthesizedExprDown(statement.getReturnValue());\n    if (returnValue == null) return false;\n    if (returnValue instanceof PsiLiteralExpression) return false;\n    if (!isSimple(returnValue)) return false;\n    NullabilityAnnotationInfo info = NullableNotNullManager.getInstance(method.getProject()).findEffectiveNullabilityInfo(method);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package brooklyn.management.classloading;\n\nimport java.net.URL;\n\nimport com.google.common.base.Objects;\n\nimport brooklyn.management.ManagementContext;\nimport brooklyn.util.exceptions.Exceptions;\nimport brooklyn.util.guava.Maybe;\n\npublic class JavaBrooklynClassLoadingContext extends AbstractBrooklynClassLoadingContext {\n\n    private final ClassLoader loader;\n\n    public JavaBrooklynClassLoadingContext(ManagementContext mgmt, ClassLoader loader) {\n        super(mgmt);\n        this.loader = loader;\n    }\n\n    public static JavaBrooklynClassLoadingContext newDefault(ManagementContext mgmt) {\n        ClassLoader cl = null;\n        if (mgmt!=null) cl = mgmt.getCatalog().getRootClassLoader();\n        if (cl==null) cl = JavaBrooklynClassLoadingContext.class.getClassLoader();\n        return new JavaBrooklynClassLoadingContext(mgmt, cl);\n    }\n\n    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n<｜fim▁hole｜>            return (Maybe) Maybe.of(loader.loadClass(className));\n        } catch (Exception e) {\n            Exceptions.propagateIfFatal(e);\n            return Maybe.absent(e);\n        }\n    }\n\n    @Override\n    public String toString() {\n        return \"java:\"+loader;\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hashCode(super.hashCode(), loader);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (!super.equals(obj)) return false;\n        if (!(obj instanceof JavaBrooklynClassLoadingContext)) return false;\n        if (!Objects.equal(loader, ((JavaBrooklynClassLoadingContext)obj).loader)) return false;\n        return true;\n    }\n\n    @Override\n    public URL getResource(String name) {\n        return loader.getResource(name);\n    }\n\n}<｜fim▁end｜>",
    "response": "    public Maybe<Class<?>> tryLoadClass(String className) {\n        try {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.anarres.gradle.plugin.jcpp;\n\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.util.Arrays;\nimport java.util.Collections;\nimport java.util.List;\nimport javax.annotation.Nonnull;\nimport org.gradle.testkit.runner.BuildResult;\nimport org.gradle.testkit.runner.GradleRunner;\nimport org.junit.Before;\n<｜fim▁hole｜>import org.slf4j.LoggerFactory;\n\n@RunWith(Parameterized.class)\npublic class JCppPluginApplyTest {\n\n    private static final Logger LOG = LoggerFactory.getLogger(JCppPluginApplyTest.class);\n\n    @Nonnull\n    private static Object[] A(Object... in) {\n        return in;\n    }\n\n    @Parameterized.Parameters(name = \"{0}\")\n    public static List<Object[]> parameters() throws Exception {\n        return Arrays.asList(\n                A(\"2.12\"),\n                A(\"2.14\"),\n                A(\"3.0\"),\n                A(\"3.2.1\"),\n                A(\"3.4.1\"),\n                A(\"4.10.3\"),\n                A(\"5.6\")\n        );\n    }\n\n    private final String gradleVersion;\n    @Rule\n    public final TemporaryFolder testProjectDir = new TemporaryFolder();\n    public File testProjectBuildFile;\n\n    @Before\n    public void setUp() throws Exception {\n        testProjectBuildFile = testProjectDir.newFile(\"build.gradle\");\n    }\n\n    public JCppPluginApplyTest(String gradleVersion) {\n        this.gradleVersion = gradleVersion;\n    }\n\n    @Test\n    public void testApply() throws Exception {\n        String text = \"plugins { id 'java';\\nid 'org.anarres.jcpp' }\\n\";\n        Files.write(testProjectBuildFile.toPath(), Collections.singletonList(text));\n\n        GradleRunner runner = GradleRunner.create()\n                .withGradleVersion(gradleVersion)\n                .withPluginClasspath()\n                .withDebug(true)\n                .withProjectDir(testProjectDir.getRoot())\n                .withArguments(\"--stacktrace\", \"tasks\");\n        LOG.info(\"Building...\\n\\n\");\n        // System.out.println(\"ClassPath is \" + runner.getPluginClasspath());\n        BuildResult result = runner.build();\n        LOG.info(\"Output:\\n\\n\" + result.getOutput() + \"\\n\\n\");\n    }\n}<｜fim▁end｜>",
    "response": "import org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.TemporaryFolder;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.slf4j.Logger;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.eddhkim.template.service.impl;\n\nimport java.util.UUID;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.eddhkim.template.dao.BookDao;\nimport com.eddhkim.template.entity.Book;\nimport com.eddhkim.template.service.BookService;\n\n@Service(\"bookService\")\npublic class BookServiceImpl implements BookService {\n\n    private final BookDao bookDao;\n\n    @Autowired\n    public BookServiceImpl(BookDao bookDao) {\n        this.bookDao = bookDao;\n    }\n\n    @Override\n    public void add(Book book) {\n        bookDao.save(book);\n    }\n\n    @Override\n    public Book find(String uuid) {\n        return bookDao.find(UUID.fromString(uuid));\n    }\n\n    @Override\n    public void update(Book book) {\n        bookDao.update(book);\n<｜fim▁hole｜>        bookDao.delete(UUID.fromString(uuid));\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    @Override\n    public void remove(String uuid) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.kaaproject.kaa.server.admin.client.mvp.view;\n\nimport org.kaaproject.kaa.server.admin.client.util.HasErrorMessage;\n\nimport com.google.gwt.event.dom.client.HasClickHandlers;\nimport com.google.gwt.place.shared.Place;\nimport com.google.gwt.user.client.ui.IsWidget;\n\npublic interface BaseDetailsView extends IsWidget, HasErrorMessage {\n\n    void setTitle(String title);\n\n    void clearError();\n\n    void setErrorMessage(String message);\n\n<｜fim▁hole｜>    void setCancelEnabled(boolean enabled);\n\n    HasClickHandlers getBackButton();\n    HasClickHandlers getSaveButton();\n    HasClickHandlers getCancelButton();\n    void reset();\n    boolean hasChanged();\n\n    void setPresenter(Presenter presenter);\n\n    public interface Presenter {\n        void goTo(Place place);\n    }\n\n}<｜fim▁end｜>",
    "response": "    void setBackEnabled(boolean enabled);\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.ess.tudarmstadt.de.mwidgetexample.JSON;\n\nimport com.ess.tudarmstadt.de.mwidgetexample.utils.Constants;\n<｜fim▁hole｜>import org.json.JSONObject;\n\npublic class BarcodeToJSON {\n\n    public static JSONObject getJSONfromBarcode(Barcode barcode) throws JSONException {\n\n        JSONObject jsonObj = new JSONObject();\n        jsonObj.putOpt(Constants.JSON_OBJECT_BARCODE, 1);\n        jsonObj.putOpt(Constants.JSON_OBJECT_BARCODE_BARCODE, barcode.getBarcode());\n        jsonObj.putOpt(Constants.JSON_OBJECT_BARCODE_NAME, barcode.getName());\n        return jsonObj;\n    }\n}<｜fim▁end｜>",
    "response": "\nimport org.json.JSONException;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.sudao.basemodule.common.util;\n\npublic class ClickUtil {\n    private long delay;\n    private long lastTime;\n\n<｜fim▁hole｜>    }\n\n    public boolean canClick() {\n        if (System.currentTimeMillis() - lastTime > delay) {\n            lastTime = System.currentTimeMillis();\n            return true;\n        } else {\n            lastTime = System.currentTimeMillis();\n            return false;\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "    public ClickUtil(long delay) {\n        this.delay = delay;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.projectforge.business.teamcal.event.model;\n\nimport org.projectforge.common.i18n.I18nEnum;\nimport org.projectforge.framework.i18n.I18nHelper;\n<｜fim▁hole｜>  IN_PROCESS(\"in_process\"), NEEDS_ACTION(\"needs_action\"), TENTATIVE(\"tentative\"), NEW(\"new\");\n\n  private String key;\n\n  /**\n   * @return The key suffix will be used e. g. for i18n.\n   */\n  public String getKey()\n  {\n    return key;\n  }\n\n  /**\n   * @return The full i18n key including the i18n prefix \"fibu.auftrag.status.\".\n   */\n  @Override\n  public String getI18nKey()\n  {\n    return \"plugins.teamcal.attendee.status.\" + key;\n  }\n\n  /**\n   * @return The i18n localized value.\n   */\n  public String getI18nValue()\n  {\n    return I18nHelper.getLocalizedMessage(getI18nKey());\n  }\n\n  TeamEventAttendeeStatus(final String key)\n  {\n    this.key = key;\n  }\n\n  public boolean isIn(final TeamEventAttendeeStatus... status)\n  {\n    for (final TeamEventAttendeeStatus st : status) {\n      if (this == st) {\n        return true;\n      }\n    }\n    return false;\n  }\n}<｜fim▁end｜>",
    "response": "\npublic enum TeamEventAttendeeStatus implements I18nEnum\n{\n  ACCEPTED(\"accepted\"), COMPLETED(\"completed\"), DECLINED(\"declined\"), DELEGATED(\"delegated\"), //\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package cl.io.gateway.example.authservice;\n\nimport cl.io.gateway.IGateway;\nimport cl.io.gateway.auth.AuthenticationService;\nimport cl.io.gateway.auth.AuthenticationStatus;\nimport cl.io.gateway.auth.IAuthenticationGatewayNetworkService;\nimport cl.io.gateway.auth.IAuthenticationService;\nimport cl.io.gateway.messaging.NetworkServiceSource;\nimport cl.io.gateway.network.NetworkEvent;\nimport cl.io.gateway.network.NetworkEventType;\nimport cl.io.gateway.network.handler.INetworkEventListener;\nimport cl.io.gateway.vo.GatewayClient;\n\n@AuthenticationService(authProtocolEvents = { \"LOGIN, LOGOUT\" }, value = NetworkServiceSource.ADMIN)\npublic class ExampleAuthenticationService implements IAuthenticationService {\n\n    @Override\n    public void initialize(final IGateway gateway, final IAuthenticationGatewayNetworkService netService)\n            throws Exception {\n        System.out.println(\"Hello! I'm an authentication service!\");\n        // a listener is added to capture client connection and disconnection network\n<｜fim▁hole｜>            public void onEvent(NetworkEvent event) {\n                if (event.getEventType() == NetworkEventType.ACTIVE) {\n                    // when the network driver notifies a connected client, it is marked as\n                    // 'authenticated' at the gateway\n                    netService.clientAuthenticated(new GatewayClient(event.getChannelId()),\n                            AuthenticationStatus.LOGGED_IN);\n                } else if (event.getEventType() == NetworkEventType.INACTIVE) {\n                    // when the network driver notifies a client it is disconnected, then it is\n                    // marked as 'disconnected' at the gateway\n                    netService.clientAuthenticated(new GatewayClient(event.getChannelId()),\n                            AuthenticationStatus.LOGGED_OUT);\n                }\n            }\n        });\n    }\n}<｜fim▁end｜>",
    "response": "        // events\n        netService.addNetworkEventListener(new INetworkEventListener() {\n\n            @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.sourceforge.subsonic.lastfm;\n\n<｜fim▁hole｜>\n    public CallException() {\n    }\n\n    public CallException(Throwable cause) {\n        super(cause);\n    }\n\n    public CallException(String message) {\n        super(message);\n    }\n\n    public CallException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}<｜fim▁end｜>",
    "response": "public class CallException extends RuntimeException {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>{\n    /*\n     * Maximum number of characters possible in this programming\n     * language\n     */\n    public static final int NUM_POSSIBLE_CHARACTERS = 1 << 16;\n\n    /*\n     * This function returns the maximum occuring character in a character\n     * string. If more than one character occurs for the maximum time in the\n     * input string, then this function returns the character which has the\n     * least ascii value. The time complexity of this function is O(n) where\n     * 'n' is the number of characters in the input string and the space\n     * complexity of this function is O(1).\n     */\n    public static char maximum_occurring_char_in_string (String ch)\n    {\n        char result;\n        int max_count, count, i, j, len;\n        int[] char_stats = new int[NUM_POSSIBLE_CHARACTERS];\n        char mapped_char;\n\n        /*\n         * If the character string is null or the string is empty, then\n         * return zero.\n         */\n        if ((ch== null) || (ch.length() == 0)) {\n            return(0);\n        }\n\n        len = ch.length();\n\n        /*\n         * Map all the characters of the string to the\n         * character stats array.\n         */\n        for (i = 0; i < len; ++i) {\n            mapped_char = ch.charAt(i);\n            char_stats[(int)mapped_char]++;\n        }\n\n        /*\n         * Find the character maximum occuring character in the\n         * character stats array.\n         */\n        max_count = char_stats[0];\n        result = 0;\n        for (i = 1; i < NUM_POSSIBLE_CHARACTERS; ++i) {\n\n            if (char_stats[i] > max_count) {\n\n                /*\n                 * If the frequency of the character in the stats\n                 * array is greater than the current maximum, then\n                 * update max count and record the ascii value of\n                 * character.\n                 */\n                max_count = char_stats[i];\n                result = (char)i;\n            } else if (char_stats[i] == max_count) {\n\n                /*\n                 * If the frequency of the character in the stats\n                 * array is same than the current maximum, then\n                 * record the ascii value of character if the ascii\n                 * value is smaller than the current ascii value.\n                 */\n                if ((int)result > i) {\n                    result = (char)i;\n                }\n            }\n        }\n\n        return(result);\n    }\n\n    public static void main (String[] args)\n    {\n        /*\n         * Test 1: Find the maximum occurring character from a\n         *         alphabetical string.\n         */\n        String str1 = \"geeksforgeeks.org\";\n        char expected_char1 = 'e';\n        char actual_char1;\n        actual_char1 = maximum_occurring_char_in_string(str1);\n        assert(expected_char1 == actual_char1);\n\n        /*\n         * Test 2: Test with a string having multiple characters\n         *         which are maximum occuring. The maximum occuring\n         *         character should be the one with the smallest\n         *         ascii value.\n         */\n        String str2 = \"rreeffggtthhuuuaaa\";\n        char expected_char2 = 'a';\n        char actual_char2;\n        actual_char2 = maximum_occurring_char_in_string(str2);\n        assert(expected_char2 == actual_char2);\n\n        /*\n         * Test 3: Test with a null string. The ascii value of the\n         *         maximum occuring character in a null string should\n         *         be zero.\n         */\n        String str3 = null;\n        char expected_char3 = 0;\n        char actual_char3;\n        actual_char3 = maximum_occurring_char_in_string(str3);\n        assert(expected_char3 == actual_char3);\n\n        /*\n         * Test 4: Test with an empty string. The ascii value of the\n         *         maximum occuring character in an empty string should\n         *         be zero.\n         */\n        String str4 = \"\";\n        char expected_char4 = 0;\n        char actual_char4;\n        actual_char4 = maximum_occurring_char_in_string(str4);\n        assert(expected_char4 == actual_char4);\n    }\n}<｜fim▁end｜>",
    "response": "import java.io.*;\nimport java.util.*;\n\npublic class find_maximum_occurring_char_in_string\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.github.nucleuspowered.nucleus.internal.text;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport io.github.nucleuspowered.nucleus.Nucleus;\nimport io.github.nucleuspowered.nucleus.api.events.NucleusTextTemplateEvent;\nimport io.github.nucleuspowered.nucleus.api.text.NucleusTextTemplate;\nimport org.spongepowered.api.Sponge;\nimport org.spongepowered.api.command.CommandSource;\nimport org.spongepowered.api.event.cause.Cause;\nimport org.spongepowered.api.text.Text;\n\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.function.Function;\n\npublic class NucleusTextTemplateMessageSender {\n\n    private final NucleusTextTemplate textTemplate;\n    private final CommandSource sender;\n\n    public NucleusTextTemplateMessageSender(NucleusTextTemplate textTemplate, CommandSource sender) {\n        this.textTemplate = textTemplate;\n        this.sender = sender;\n<｜fim▁hole｜>        members.addAll(Sponge.getServer().getOnlinePlayers());\n        return send(members, true, cause);\n    }\n\n    public boolean send(Collection<CommandSource> source, Cause cause) {\n        return send(source, false, cause);\n    }\n\n    private boolean send(Collection<CommandSource> source, boolean isBroadcast, Cause cause) {\n        NucleusTextTemplateEvent event;\n        if (isBroadcast) {\n            event = new NucleusTextTemplateEventImpl.Broadcast(\n                    this.textTemplate,\n                    source,\n                    cause\n            );\n        } else {\n            event = new NucleusTextTemplateEventImpl(\n                    this.textTemplate,\n                    source,\n                    cause\n            );\n        }\n\n        if (Sponge.getEventManager().post(event)) {\n            return false;\n        }\n\n        NucleusTextTemplate template = event.getMessage();\n        if (!template.containsTokens()) {\n            Text text = this.textTemplate.getForCommandSource(Sponge.getServer().getConsole());\n            event.getRecipients().forEach(x -> x.sendMessage(text));\n        } else {\n            Map<String, Function<CommandSource, Optional<Text>>> m = Maps.newHashMap();\n            m.put(\"sender\", cs -> Nucleus.getNucleus().getMessageTokenService().applyPrimaryToken(\"displayname\", this.sender));\n            event.getRecipients().forEach(x -> x.sendMessage(this.textTemplate.getForCommandSource(x, m, null)));\n        }\n        return true;\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n    public boolean send(Cause cause) {\n        List<CommandSource> members = Lists.newArrayList(Sponge.getServer().getConsole());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.parquet.internal.filter2.columnindex;\n\nimport java.util.PrimitiveIterator;\nimport java.util.Set;\nimport java.util.function.Function;\n\nimport org.apache.parquet.filter2.compat.FilterCompat;\nimport org.apache.parquet.filter2.compat.FilterCompat.FilterPredicateCompat;\nimport org.apache.parquet.filter2.compat.FilterCompat.NoOpFilter;\nimport org.apache.parquet.filter2.compat.FilterCompat.UnboundRecordFilterCompat;\nimport org.apache.parquet.filter2.predicate.FilterPredicate.Visitor;\nimport org.apache.parquet.filter2.predicate.Operators.And;\nimport org.apache.parquet.filter2.predicate.Operators.Column;\nimport org.apache.parquet.filter2.predicate.Operators.Eq;\nimport org.apache.parquet.filter2.predicate.Operators.Gt;\nimport org.apache.parquet.filter2.predicate.Operators.GtEq;\nimport org.apache.parquet.filter2.predicate.Operators.LogicalNotUserDefined;\nimport org.apache.parquet.filter2.predicate.Operators.Lt;\nimport org.apache.parquet.filter2.predicate.Operators.LtEq;\nimport org.apache.parquet.filter2.predicate.Operators.Not;\nimport org.apache.parquet.filter2.predicate.Operators.NotEq;\nimport org.apache.parquet.filter2.predicate.Operators.Or;\nimport org.apache.parquet.filter2.predicate.Operators.UserDefined;\nimport org.apache.parquet.filter2.predicate.UserDefinedPredicate;\nimport org.apache.parquet.hadoop.metadata.ColumnPath;\nimport org.apache.parquet.internal.column.columnindex.ColumnIndex;\nimport org.apache.parquet.internal.column.columnindex.OffsetIndex;\nimport org.apache.parquet.internal.filter2.columnindex.ColumnIndexStore.MissingOffsetIndexException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class ColumnIndexFilter implements Visitor<RowRanges> {\n\n  private static final Logger LOGGER = LoggerFactory.getLogger(ColumnIndexFilter.class);\n  private final ColumnIndexStore columnIndexStore;\n  private final Set<ColumnPath> columns;\n  private final long rowCount;\n  private RowRanges allRows;\n\n  /**\n   * Calculates the row ranges containing the indexes of the rows might match the specified filter.\n   *\n   * @param filter\n   *          to be used for filtering the rows\n   * @param columnIndexStore\n   *          the store for providing column/offset indexes\n   * @param paths\n   *          the paths of the columns used in the actual projection; a column not being part of the projection will be\n   *          handled as containing {@code null} values only even if the column has values written in the file\n   * @param rowCount\n   *          the total number of rows in the row-group\n   * @return the ranges of the possible matching row indexes; the returned ranges will contain all the rows if any of\n   *         the required offset index is missing\n   */\n  public static RowRanges calculateRowRanges(FilterCompat.Filter filter, ColumnIndexStore columnIndexStore,\n      Set<ColumnPath> paths, long rowCount) {\n    return filter.accept(new FilterCompat.Visitor<RowRanges>() {\n      @Override\n      public RowRanges visit(FilterPredicateCompat filterPredicateCompat) {\n        try {\n          return filterPredicateCompat.getFilterPredicate()\n              .accept(new ColumnIndexFilter(columnIndexStore, paths, rowCount));\n        } catch (MissingOffsetIndexException e) {\n          LOGGER.info(e.getMessage());\n          return RowRanges.createSingle(rowCount);\n        }\n      }\n\n      @Override\n      public RowRanges visit(UnboundRecordFilterCompat unboundRecordFilterCompat) {\n        return RowRanges.createSingle(rowCount);\n      }\n\n      @Override\n      public RowRanges visit(NoOpFilter noOpFilter) {\n        return RowRanges.createSingle(rowCount);\n      }\n    });\n  }\n\n  private ColumnIndexFilter(ColumnIndexStore columnIndexStore, Set<ColumnPath> paths, long rowCount) {\n    this.columnIndexStore = columnIndexStore;\n    this.columns = paths;\n    this.rowCount = rowCount;\n  }\n\n  private RowRanges allRows() {\n    if (allRows == null) {\n      allRows = RowRanges.createSingle(rowCount);\n<｜fim▁hole｜>  }\n\n  @Override\n  public <T extends Comparable<T>> RowRanges visit(Eq<T> eq) {\n    return applyPredicate(eq.getColumn(), ci -> ci.visit(eq), eq.getValue() == null ? allRows() : RowRanges.EMPTY);\n  }\n\n  @Override\n  public <T extends Comparable<T>> RowRanges visit(NotEq<T> notEq) {\n    return applyPredicate(notEq.getColumn(), ci -> ci.visit(notEq),\n        notEq.getValue() == null ? RowRanges.EMPTY : allRows());\n  }\n\n  @Override\n  public <T extends Comparable<T>> RowRanges visit(Lt<T> lt) {\n    return applyPredicate(lt.getColumn(), ci -> ci.visit(lt), RowRanges.EMPTY);\n  }\n\n  @Override\n  public <T extends Comparable<T>> RowRanges visit(LtEq<T> ltEq) {\n    return applyPredicate(ltEq.getColumn(), ci -> ci.visit(ltEq), RowRanges.EMPTY);\n  }\n\n  @Override\n  public <T extends Comparable<T>> RowRanges visit(Gt<T> gt) {\n    return applyPredicate(gt.getColumn(), ci -> ci.visit(gt), RowRanges.EMPTY);\n  }\n\n  @Override\n  public <T extends Comparable<T>> RowRanges visit(GtEq<T> gtEq) {\n    return applyPredicate(gtEq.getColumn(), ci -> ci.visit(gtEq), RowRanges.EMPTY);\n  }\n\n  @Override\n  public <T extends Comparable<T>, U extends UserDefinedPredicate<T>> RowRanges visit(UserDefined<T, U> udp) {\n    return applyPredicate(udp.getColumn(), ci -> ci.visit(udp),\n        udp.getUserDefinedPredicate().acceptsNullValue() ? allRows() : RowRanges.EMPTY);\n  }\n\n  @Override\n  public <T extends Comparable<T>, U extends UserDefinedPredicate<T>> RowRanges visit(\n      LogicalNotUserDefined<T, U> udp) {\n    return applyPredicate(udp.getUserDefined().getColumn(), ci -> ci.visit(udp),\n        udp.getUserDefined().getUserDefinedPredicate().acceptsNullValue() ? RowRanges.EMPTY : allRows());\n  }\n\n  private RowRanges applyPredicate(Column<?> column, Function<ColumnIndex, PrimitiveIterator.OfInt> func,\n      RowRanges rangesForMissingColumns) {\n    ColumnPath columnPath = column.getColumnPath();\n    if (!columns.contains(columnPath)) {\n      return rangesForMissingColumns;\n    }\n\n    OffsetIndex oi = columnIndexStore.getOffsetIndex(columnPath);\n    ColumnIndex ci = columnIndexStore.getColumnIndex(columnPath);\n    if (ci == null) {\n      LOGGER.info(\"No column index for column {} is available; Unable to filter on this column\", columnPath);\n      return allRows();\n    }\n\n    return RowRanges.create(rowCount, func.apply(ci), oi);\n  }\n\n  @Override\n  public RowRanges visit(And and) {\n    return RowRanges.intersection(and.getLeft().accept(this), and.getRight().accept(this));\n  }\n\n  @Override\n  public RowRanges visit(Or or) {\n    return RowRanges.union(or.getLeft().accept(this), or.getRight().accept(this));\n  }\n\n  @Override\n  public RowRanges visit(Not not) {\n    throw new IllegalArgumentException(\n        \"Predicates containing a NOT must be run through LogicalInverseRewriter. \" + not);\n  }\n}<｜fim▁end｜>",
    "response": "    }\n    return allRows;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jscep.transaction;\n\nimport java.util.Map;\nimport java.util.WeakHashMap;\n\npublic final class NonceQueue {\n    private static final int DEFAULT_QUEUE_SIZE = 20;\n    private final Map<Nonce, Boolean> backingQueue;\n\n    /**\n     * Creates a new <tt>NonceQueue</tt>.\n     */\n    public NonceQueue() {\n        this.backingQueue = new WeakHashMap<Nonce, Boolean>(DEFAULT_QUEUE_SIZE);\n    }\n\n    /**\n     * Inserts the specified <tt>Nonce</tt> into this queue.\n     * \n<｜fim▁hole｜>    public synchronized void add(final Nonce nonce) {\n        backingQueue.put(nonce, Boolean.FALSE);\n    }\n\n    /**\n     * Checks the queue for the given <tt>Nonce</tt>.\n     * \n     * @param nonce\n     *            the <tt>Nonce</tt> to check for.\n     * @return <tt>true</tt> if the <tt>Nonce</tt> is present, <tt>false</tt>\n     *         otherwise.\n     */\n    public synchronized boolean contains(final Nonce nonce) {\n        return backingQueue.containsKey(nonce);\n    }\n}<｜fim▁end｜>",
    "response": "     * @param nonce\n     *            the nonce to add.\n     */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package freemind.modes.mindmapmode.actions;\n\n<｜fim▁hole｜>import freemind.modes.MindMapNode;\nimport freemind.modes.mindmapmode.MindMapController;\nimport freemind.modes.mindmapmode.actions.xml.ActionPair;\n\npublic class EdgeStyleAction extends NodeGeneralAction implements NodeActorXml {\n    private String mStyle;\n\n    public EdgeStyleAction(MindMapController controller, String style) {\n        super(controller, null, null);\n        setName(/*controller.getText(\"edge_style\") +*/ controller.getText(style));\n        this.mStyle = style;\n        addActor(this);\n    }\n\n    public ActionPair apply(MindMap model, MindMapNode selected)\n             {\n        return getActionPair(selected, mStyle);\n    }\n\n    public Class getDoActionClass() {\n        return EdgeStyleFormatAction.class;\n    }\n\n    public void setEdgeStyle(MindMapNode node, String style) {\n        modeController.getActionFactory().startTransaction(\n                (String) getValue(NAME));\n        modeController.getActionFactory().executeAction(\n                getActionPair(node, style));\n        modeController.getActionFactory().endTransaction(\n                (String) getValue(NAME));\n\n    }\n\n    private ActionPair getActionPair(MindMapNode selected, String style)\n             {\n        EdgeStyleFormatAction styleAction = createNodeStyleFormatAction(\n                selected, style);\n        String oldStyle = selected.getEdge().getStyle();\n        if(!selected.getEdge().hasStyle()){\n            oldStyle = null;\n        }\n        EdgeStyleFormatAction undoStyleAction = createNodeStyleFormatAction(\n                selected, oldStyle);\n        return new ActionPair(styleAction, undoStyleAction);\n    }\n\n    private EdgeStyleFormatAction createNodeStyleFormatAction(\n            MindMapNode selected, String style)  {\n        EdgeStyleFormatAction edgeStyleAction = new EdgeStyleFormatAction();\n        edgeStyleAction.setNode(getNodeID(selected));\n        edgeStyleAction.setStyle(style);\n        return edgeStyleAction;\n    }\n\n    public void act(XmlAction action) {\n        if (action instanceof EdgeStyleFormatAction) {\n            EdgeStyleFormatAction edgeStyleAction = (EdgeStyleFormatAction) action;\n            MindMapNode node = getNodeFromID(edgeStyleAction.getNode());\n            String newStyle = edgeStyleAction.getStyle();\n            MindMapEdge edge = node.getEdge();\n            if (!Tools.safeEquals(edge.hasStyle()?edge.getStyle():null, newStyle)) {\n                ((EdgeAdapter) edge).setStyle(newStyle);\n                modeController.nodeChanged(node);\n            }\n        }\n    }\n}<｜fim▁end｜>",
    "response": "import freemind.controller.actions.generated.instance.EdgeStyleFormatAction;\nimport freemind.controller.actions.generated.instance.XmlAction;\nimport freemind.main.Tools;\nimport freemind.modes.EdgeAdapter;\nimport freemind.modes.MindMap;\nimport freemind.modes.MindMapEdge;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package br.com.wcorrea.transport.api.repository.pessoa.Colaborador;\n\nimport br.com.wcorrea.transport.api.model.pessoa.Pessoa;\nimport br.com.wcorrea.transport.api.repository.utils.UtilsRepository;\nimport org.apache.commons.lang3.StringUtils;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.Pageable;\n\n<｜fim▁hole｜>import javax.persistence.TypedQuery;\n\npublic class ColaboradorRepositoryImpl implements ColaboradorRepositoryQuery {\n\n    @PersistenceContext\n    private EntityManager manager;\n\n    @Override\n    public Page<Pessoa> findAll(ColaboradorFiltro colaboradorFiltro, Pageable pageable) {\n        TypedQuery<Pessoa> queryList = manager.createQuery(this.createQuery(colaboradorFiltro, false), Pessoa.class);\n        TypedQuery<Long> queryTotalRecords = manager.createQuery(this.createQuery(colaboradorFiltro, true), Long.class);\n\n        UtilsRepository.adicionarRestricoesPaginacao(queryList, pageable);\n\n        return new PageImpl<>(queryList.getResultList(), pageable, queryTotalRecords.getSingleResult());\n    }\n\n    private String createQuery(ColaboradorFiltro colaboradorFiltro, boolean count) {\n        String sql;\n        if (count) {\n            sql = \"select count(a) from pessoa a where 1=1 \";\n        } else {\n            sql = \"from pessoa a where 1=1 \";\n        }\n\n        if (StringUtils.isNotBlank(colaboradorFiltro.getFiltroGlobal())) {\n            sql += \" and (\";\n            sql += \" upper(a.nome) like '%\" + colaboradorFiltro.getFiltroGlobal().toUpperCase().trim() + \"%'\";\n\n            sql += \" )\";\n        } else {\n\n        }\n\n        /**\n         * ORDERING THE LIST\n         */\n        if (count == false) {\n            if (StringUtils.isNotBlank(colaboradorFiltro.getCampoOrdenacao())) {\n                sql += \" order by a.\" + colaboradorFiltro.getCampoOrdenacao();\n            }\n            if (StringUtils.isNotBlank(colaboradorFiltro.getOrdemClassificacao()) && StringUtils.isNotBlank(colaboradorFiltro.getCampoOrdenacao())) {\n                sql += \" \" + colaboradorFiltro.getOrdemClassificacao();\n            }\n        }\n        return sql;\n    }\n}<｜fim▁end｜>",
    "response": "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package cloudone.cumulonimbus.persistence;\n\nimport cloudone.ServiceFullName;\nimport cloudone.cumulonimbus.ServiceRegistryService;\nimport cloudone.cumulonimbus.ServiceRegistryServiceTest;\nimport cloudone.cumulonimbus.model.Cluster;\nimport cloudone.cumulonimbus.model.RegisteredRuntime;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotNull;\n\npublic class ServiceRegistryPersistenceTest {\n\n    private File dir;\n\n    @Before\n    public void setUp() throws Exception {\n        dir = Files.createTempDirectory(\"unit_cumul\").toFile();\n    }\n\n    @After\n    public void tearDown() throws Exception {\n        if (dir != null) {\n            deleteDirectory(dir);\n        }\n    }\n\n    public static boolean deleteDirectory(File directory) {\n        if(directory.exists()){\n            File[] files = directory.listFiles();\n            if(null!=files){\n                for(int i=0; i<files.length; i++) {\n                    if(files[i].isDirectory()) {\n                        deleteDirectory(files[i]);\n                    }\n                    else {\n                        files[i].delete();\n                    }\n                }\n            }\n        }\n        return(directory.delete());\n    }\n\n    @Test\n    public void testStore() throws Exception {\n        ServiceRegistryService service = ServiceRegistryServiceTest.getService();\n        ServiceRegistryPersistence persistence = new ServiceRegistryPersistence(new File(dir, \"strg.json\"), 1, service, true);\n        service.addRegistrationListener(persistence);\n        Map<String, Integer> apps = new HashMap<>();\n        apps.put(\"one\", 200);\n        apps.put(\"two\", 201);\n        RegisteredRuntime rr1 = service.register(new ServiceFullName(\"a\", \"b\", \"1\"), 100, apps);\n        apps.put(\"one\", 202);\n        apps.put(\"two\", 203);\n        apps.put(\"three\", 203);\n        RegisteredRuntime rr2 = service.register(new ServiceFullName(\"a\", \"b\", \"2\"), 101, apps);\n        apps.clear();\n        apps.put(\"foo\", 204);\n        apps.put(\"bar\", 205);\n        RegisteredRuntime rr3 = service.register(new ServiceFullName(\"a\", \"b\", \"1\"), 102, apps);\n        persistence.store();\n        Collection<Cluster> clusters = persistence.loadClusters();\n        assertNotNull(clusters);\n        assertEquals(2, clusters.size());\n        //Find cluster\n        Cluster cl = null;\n        for (Cluster cluster : clusters) {\n            if ((new ServiceFullName(\"a\", \"b\", \"1\")).equals(cluster.getFullName())) {\n                cl = cluster;\n                break;\n            }\n        }\n<｜fim▁hole｜>        assertNotNull(cl.getRuntimes());\n        assertEquals(2, cl.getRuntimes().size());\n        //Find runtime\n        RegisteredRuntime rr = null;\n        for (RegisteredRuntime registeredRuntime : cl.getRuntimes()) {\n            if (registeredRuntime.getInstanceId() == rr1.getInstanceId()) {\n                rr = registeredRuntime;\n                break;\n            }\n        }\n        assertNotNull(rr);\n        assertEquals(2, rr.getApplicationPorts().size());\n        assertEquals(new Integer(201), rr.getApplicationPorts().get(\"two\"));\n    }\n}<｜fim▁end｜>",
    "response": "        assertNotNull(cl);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package eu.seaclouds.paas.heroku;\n\nimport eu.seaclouds.paas.Credentials;\nimport eu.seaclouds.paas.PaasClient;\nimport eu.seaclouds.paas.PaasSession;\n\npublic class HerokuClient implements PaasClient {\n\n    @Override\n    public PaasSession getSession(Credentials credentials) {\n        PaasSession session = null;\n<｜fim▁hole｜>        }\n        else if (credentials instanceof Credentials.ApiKeyCredentials) {\n\n            session = getSession((Credentials.ApiKeyCredentials)credentials);\n\n        } else {\n\n            throw new UnsupportedOperationException(\"Credentials of class \" + credentials.getClass().getName() + \" not supported (Heroku)\");\n        }\n\n        return session;\n    }\n\n    private PaasSession getSession(Credentials.UserPasswordCredentials credentials) {\n        HerokuConnector connector = new HerokuConnector(credentials.getUser(), credentials.getPassword());\n        PaasSession session = new HerokuSession(connector);\n\n        return session;\n    }\n\n    private PaasSession getSession(Credentials.ApiKeyCredentials credentials) {\n        HerokuConnector connector = new HerokuConnector(credentials.getApiKey());\n\n        PaasSession session = new HerokuSession(connector);\n\n        return session;\n    }\n\n}<｜fim▁end｜>",
    "response": "        if (credentials instanceof Credentials.UserPasswordCredentials) {\n\n            session = getSession((Credentials.UserPasswordCredentials)credentials);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.slc.sli.ingestion.test.util;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\n\nimport org.jdom2.Document;\n<｜fim▁hole｜>    private static final SAXBuilder builder = new SAXBuilder();\n    private static final XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());\n\n    public static void main(String[] args) throws Exception {\n        Document doc = builder.build(new FileReader(\"src/test/resources/xml/small/InterchangeSection.xml\"));\n\n        for(int i=0;i<14;i++) {\n            doc.getRootElement().addContent(doc.getRootElement().cloneContent());\n        }\n\n        out.output(doc, new FileOutputStream(new File(\"src/test/resources/xml/small/InterchangeSectionBig.xml\")));\n        System.out.println(doc.getRootElement().getContentSize());\n    }\n}<｜fim▁end｜>",
    "response": "import org.jdom2.input.SAXBuilder;\nimport org.jdom2.output.Format;\nimport org.jdom2.output.XMLOutputter;\n\npublic class XMLReplicator {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package royaleserver.utils;\n\nimport org.hibernate.HibernateException;\nimport org.hibernate.engine.spi.SharedSessionContractImplementor;\nimport org.hibernate.usertype.UserType;\n\nimport java.io.Serializable;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Types;\n\npublic final class SCID implements UserType, Serializable {\n    private int high, low;\n    private long value;\n\n    public SCID() {\n        this(0, 0);\n    }\n\n    public SCID(int high, int low) {\n        this.high = high;\n        this.low = low;\n\n        value = high * 1000000 + low;\n    }\n\n    public SCID(long value) {\n        this((int)(value / 1000000), (int)(value % 1000000));\n    }\n\n    public int getHigh() {\n        return high;\n    }\n\n    public int getLow() {\n        return low;\n    }\n\n    public long getValue() {\n        return value;\n    }\n\n    // Java\n\n    @Override\n    public int hashCode() {\n        return (int)getValue();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (o instanceof SCID) {\n            return getValue() == ((SCID)o).getValue();\n        }\n\n        return super.equals(o);\n    }\n\n    @Override\n    protected Object clone() throws CloneNotSupportedException {\n        return new SCID(high, low);\n    }\n\n    @Override\n    public String toString() {\n        return (new StringBuilder())\n                .append(\"SCID(high = \").append(high)\n                .append(\", low = \").append(low)\n                .append(\", value = \").append(getValue())\n                .append(\")\").toString();\n    }\n\n    // Hibernate\n\n    @Override\n    public int[] sqlTypes() {\n        return new int[] { Types.BIGINT };\n    }\n\n    @Override\n    public Class returnedClass() {\n        return SCID.class;\n    }\n\n    @Override\n    public boolean equals(Object x, Object y) throws HibernateException {\n        if (x == null || y == null) {\n            return x == y;\n        }\n\n        return x.equals(y);\n    }\n\n    @Override\n    public int hashCode(Object x) throws HibernateException {\n        return x.hashCode();\n    }\n\n    @Override\n    public Object nullSafeGet(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner) throws HibernateException, SQLException {\n        final String value = rs.getString(names[0]);\n        if (value == null) {\n            return null;\n        }\n\n        return new SCID(Long.valueOf(value));\n    }\n\n    @Override\n    public void nullSafeSet(PreparedStatement st, Object value, int index, SharedSessionContractImplementor session) throws HibernateException, SQLException {\n        if (value == null) {\n            st.setNull(index, Types.BIGINT);\n            return;\n        }\n\n        st.setLong(index, ((SCID)value).getValue());\n    }\n\n    @Override\n    public Object deepCopy(Object value) throws HibernateException {\n        return value;\n    }\n<｜fim▁hole｜>    }\n\n    @Override\n    public Serializable disassemble(Object value) throws HibernateException {\n        return (Serializable)value;\n    }\n\n    @Override\n    public Object assemble(Serializable cached, Object owner) throws HibernateException {\n        return cached;\n    }\n\n    @Override\n    public Object replace(Object original, Object target, Object owner) throws HibernateException {\n        return original;\n    }\n}<｜fim▁end｜>",
    "response": "\n    @Override\n    public boolean isMutable() {\n        return false;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ca.corefacility.bioinformatics.irida.ria.integration.announcements;\n\nimport java.text.ParseException;\nimport java.util.Date;\nimport java.util.List;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport ca.corefacility.bioinformatics.irida.ria.integration.AbstractIridaUIITChromeDriver;\nimport ca.corefacility.bioinformatics.irida.ria.integration.pages.LoginPage;\nimport ca.corefacility.bioinformatics.irida.ria.integration.pages.announcements.*;\n\nimport com.github.springtestdbunit.annotation.DatabaseSetup;\nimport com.github.springtestdbunit.annotation.DatabaseTearDown;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\n\n@DatabaseSetup(\"/ca/corefacility/bioinformatics/irida/ria/web/announcements/AnnouncementPageIT.xml\")\n@DatabaseTearDown(\"/ca/corefacility/bioinformatics/irida/test/integration/TableReset.xml\")\npublic class AnnouncementPageIT extends AbstractIridaUIITChromeDriver {\n\n    // Page objects\n    private AnnouncementControlPage controlPage;\n\n    @Override\n    @BeforeEach\n    public void setUpTest() {\n        LoginPage.loginAsAdmin(driver());\n        controlPage = new AnnouncementControlPage(driver());\n    }\n\n    @Test\n    public void testConfirmTablePopulatedByAnnouncements() {\n        controlPage.goTo();\n        assertEquals(6, controlPage.announcementTableSize(),\n                \"Announcement table should be populated by 6 announcements\");\n    }\n\n    @Test\n    public void testSortAnnouncementsByDate() throws ParseException {\n        controlPage.goTo();\n        controlPage.clickDateCreatedHeader();\n\n        List<Date> announcementDates = controlPage.getCreatedDates();\n\n        assertTrue(checkDatesSortedDescending(announcementDates), \"List of announcements is not sorted correctly\");\n\n        controlPage.clickDateCreatedHeader();\n\n        announcementDates = controlPage.getCreatedDates();\n\n        assertTrue(checkDatesSortedAscending(announcementDates), \"List of announcements is not sorted correctly\");\n    }\n\n    @Test\n    public void testSubmitNewAnnouncement() {\n        final String title = \"Announcement Title\";\n        final String message = \"This is a the announcement message content.\";\n        final Boolean priority = true;\n        controlPage.goTo();\n\n        int numAnnouncementsBefore = controlPage.getCreatedDates().size();\n        CreateAnnouncementComponent createAnnouncementComponent = CreateAnnouncementComponent.goTo(driver());\n        controlPage.clickCreateNewAnnouncementButton();\n        createAnnouncementComponent.enterAnnouncement(title, message, priority);\n\n        // New messages should appear first in the table\n        String newTitle = controlPage.getAnnouncementTitle(0);\n\n        assertTrue(newTitle.equals(title), \"Unexpected announcement content.\");\n        assertEquals(numAnnouncementsBefore + 1, controlPage.getCreatedDates().size(),\n                \"Unexpected number of announcements visible\");\n    }\n\n    @Test\n    public void testCheckDetailsPage() {\n        controlPage.goTo();\n\n        String title0 = controlPage.getAnnouncementTitle(0);\n        String title1 = controlPage.getAnnouncementTitle(1);\n        String title2 = controlPage.getAnnouncementTitle(2);\n\n        EditAnnouncementComponent editAnnouncementComponent = EditAnnouncementComponent.goTo(driver());\n\n        controlPage.gotoEditMessage(0);\n        compareMessages(editAnnouncementComponent.getTitle(), title0);\n        editAnnouncementComponent.clickCancelButton();\n\n        driver().navigate().refresh();\n        controlPage.gotoEditMessage(1);\n        compareMessages(editAnnouncementComponent.getTitle(), title1);\n        editAnnouncementComponent.clickCancelButton();\n\n        driver().navigate().refresh();\n        controlPage.gotoEditMessage(2);\n        compareMessages(editAnnouncementComponent.getTitle(), title2);\n        editAnnouncementComponent.clickCancelButton();\n    }\n\n    private void compareMessages(String announcement, String preview) {\n        assertTrue(announcement.contains(preview), \"Announcement preview does not match the message.\");\n    }\n\n    @Test\n    public void testUpdateAnnouncement() {\n        final String newTitle = \"Updated Title!!!\";\n        final String newMessage = \"Updated Message Content!!!\";\n        final boolean newPriority = true;\n\n        controlPage.goTo();\n        EditAnnouncementComponent editAnnouncementComponent = EditAnnouncementComponent.goTo(driver());\n        controlPage.gotoEditMessage(4);\n        editAnnouncementComponent.enterAnnouncement(newTitle, newMessage, newPriority);\n\n        String announcementTitle = controlPage.getAnnouncementTitle(4);\n        assertEquals(newTitle, announcementTitle, \"Unexpected message content\");\n    }\n\n    @Test\n    public void testDeleteAnnouncement() {\n        controlPage.goTo();\n        List<Date> dates = controlPage.getCreatedDates();\n        controlPage.deleteAnnouncement(2);\n        assertEquals(dates.size() - 1, controlPage.getCreatedDates().size(), \"Unexpected number of announcements\");\n    }\n\n    @Test\n    public void testAnnouncementUserTablePopulated() {\n        controlPage.goTo();\n        ViewAnnouncementComponent viewAnnouncementComponent = ViewAnnouncementComponent.goTo(driver());\n        controlPage.gotoViewMessage(0);\n        assertEquals(6, viewAnnouncementComponent.getTableDataSize(),\n                \"Unexpected number of user information rows in table\");\n    }\n\n    /**\n     * Checks if a List of {@link Date} is sorted in ascending order.\n     *\n     * @param dates\n     *            List of {@link Date}\n     *\n     * @return if the list is sorted ascending\n     */\n    private boolean checkDatesSortedAscending(List<Date> dates) {\n        boolean isSorted = true;\n        for (int i = 1; i < dates.size(); i++) {\n            if (dates.get(i).compareTo(dates.get(i - 1)) < 0) {\n                isSorted = false;\n                break;\n            }\n        }\n        return isSorted;\n    }\n\n    /**\n     * Checks if a list of {@link Date} is sorted in descending order.\n     *\n     * @param dates\n     *            List of {@link Date}\n     *\n<｜fim▁hole｜>        for (int i = 1; i < dates.size(); i++) {\n            if (dates.get(i).compareTo(dates.get(i - 1)) > 0) {\n                isSorted = false;\n                break;\n            }\n        }\n        return isSorted;\n    }\n}<｜fim▁end｜>",
    "response": "     * @return if the list is sorted ascending\n     */\n    private boolean checkDatesSortedDescending(List<Date> dates) {\n        boolean isSorted = true;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.yahoo.security;\n\nimport java.security.GeneralSecurityException;\nimport java.security.Key;\nimport java.security.PrivateKey;\nimport java.security.PublicKey;\nimport java.security.Signature;\n\npublic class SignatureUtils {\n\n    /** Returns a signature instance which computes a hash of its content, before signing with the given private key. */\n    public static Signature createSigner(PrivateKey key, SignatureAlgorithm algorithm) {\n        try {\n            Signature signer = Signature.getInstance(algorithm.getAlgorithmName(), BouncyCastleProviderHolder.getInstance());\n            signer.initSign(key);\n            return signer;\n        } catch (GeneralSecurityException e) {\n<｜fim▁hole｜>    }\n\n    /** Returns a signature instance which computes a hash of its content, before signing with the given private key. */\n    public static Signature createSigner(PrivateKey key) {\n        return createSigner(key, getSignatureAlgorithm(key));\n    }\n\n    /** Returns a signature instance which computes a hash of its content, before verifying with the given public key. */\n    public static Signature createVerifier(PublicKey key, SignatureAlgorithm algorithm) {\n        try {\n            Signature signer = Signature.getInstance(algorithm.getAlgorithmName(), BouncyCastleProviderHolder.getInstance());\n            signer.initVerify(key);\n            return signer;\n        } catch (GeneralSecurityException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    /** Returns a signature instance which computes a hash of its content, before verifying with the given public key. */\n    public static Signature createVerifier(PublicKey key) {\n        return createVerifier(key, getSignatureAlgorithm(key));\n    }\n\n    /* Returns a signature algorithm supported by the key based on SHA512 */\n    private static SignatureAlgorithm getSignatureAlgorithm(Key key) {\n        switch (key.getAlgorithm()) {\n            case \"EC\":\n                return SignatureAlgorithm.SHA512_WITH_ECDSA;\n            case \"RSA\":\n                return SignatureAlgorithm.SHA512_WITH_RSA;\n            default:\n                throw new RuntimeException(\"Unknown Key algorithm \" + key.getAlgorithm());\n        }\n    }\n}<｜fim▁end｜>",
    "response": "            throw new IllegalStateException(e);\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.nanocom.console.tester;\n\nimport java.util.Map;\nimport org.nanocom.console.Application;\nimport org.nanocom.console.input.ArrayInput;\nimport org.nanocom.console.input.InputInterface;\nimport org.nanocom.console.output.InMemoryOutput;\nimport org.nanocom.console.output.OutputInterface.VerbosityLevel;\n\npublic class ApplicationTester {\n\n    private Application application;\n<｜fim▁hole｜>     * Constructor.\n     *\n     * @param application An Application instance to test\n     */\n    public ApplicationTester(Application application) {\n        this.application = application;\n    }\n\n    /**\n     * Executes the application.\n     *\n     * Available options:\n     *\n     *  * interactive: Sets the input interactive flag\n     *  * decorated:   Sets the output decorated flag\n     *  * verbosity:   Sets the output verbosity flag\n     *\n     * @param input   An array of arguments and options\n     * @param options An array of options\n     *\n     * @return The command exit code\n     */\n    public int run(Map<String, String> input, Map<String, Object> options) {\n        this.input = new ArrayInput(input);\n        if (options.containsKey(\"interactive\")) {\n            this.input.setInteractive((Boolean) options.get(\"interactive\"));\n        }\n\n        output = new InMemoryOutput();\n        if (options.containsKey(\"decorated\")) {\n            output.setDecorated((Boolean) options.get(\"decorated\"));\n        }\n\n        if (options.containsKey(\"verbosity\")) {\n            output.setVerbosity((VerbosityLevel) options.get(\"verbosity\"));\n        }\n\n        return application.run(this.input, output);\n    }\n\n    /**\n     * Gets the display returned by the last execution of the application.\n     *\n     * @return The display\n     */\n    public String getDisplay() {\n        return output.getBuffer().toString();\n    }\n\n    /**\n     * Gets the input instance used by the last execution of the application.\n     *\n     * @return The current input instance\n     */\n    public InputInterface getInput() {\n        return input;\n    }\n\n    /**\n     * Gets the output instance used by the last execution of the application.\n     *\n     * @return The current output instance\n     */\n    public InMemoryOutput getOutput() {\n        return output;\n    }\n}<｜fim▁end｜>",
    "response": "    private InputInterface input;\n    private InMemoryOutput output;\n\n    /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.intellij.images.thumbnail.impl;\n\nimport com.intellij.openapi.project.Project;\nimport com.intellij.openapi.util.Disposer;\nimport com.intellij.openapi.vfs.VirtualFile;\nimport com.intellij.openapi.wm.ToolWindow;\nimport com.intellij.openapi.wm.ToolWindowAnchor;\nimport com.intellij.openapi.wm.ToolWindowManager;\nimport icons.ImagesIcons;\nimport org.intellij.images.editor.ImageZoomModel;\nimport org.intellij.images.editor.actionSystem.ImageEditorActions;\nimport org.intellij.images.search.TagFilter;\nimport org.intellij.images.thumbnail.ThumbnailView;\nimport org.intellij.images.thumbnail.actions.ThemeFilter;\nimport org.intellij.images.vfs.IfsUtil;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport javax.swing.*;\n\nfinal class ThumbnailViewImpl implements ThumbnailView {\n\n  private final Project project;\n  private final ToolWindow toolWindow;\n\n  private boolean recursive = false;\n  private VirtualFile root = null;\n  private final ThumbnailViewUI myThubmnailViewUi;\n  private ThemeFilter myFilter;\n  private TagFilter myTagFilter;\n\n  public ThumbnailViewImpl(Project project) {\n    this.project = project;\n\n    ToolWindowManager windowManager = ToolWindowManager.getInstance(project);\n    myThubmnailViewUi = new ThumbnailViewUI(this);\n    toolWindow = windowManager.registerToolWindow(TOOLWINDOW_ID, myThubmnailViewUi, ToolWindowAnchor.BOTTOM);\n    toolWindow.setIcon(ImagesIcons.ThumbnailToolWindow);\n    setVisible(false);\n  }\n\n  private ThumbnailViewUI getUI() {\n    return myThubmnailViewUi;\n  }\n\n  public void setRoot(@NotNull VirtualFile root) {\n    this.root = root;\n    updateUI();\n  }\n\n  public VirtualFile getRoot() {\n    return root;\n  }\n\n  public boolean isRecursive() {\n    return recursive;\n  }\n\n  public void setRecursive(boolean recursive) {\n    this.recursive = recursive;\n    updateUI();\n  }\n\n  public void setSelected(@NotNull VirtualFile file, boolean selected) {\n    if (isVisible()) {\n      getUI().setSelected(file, selected);\n    }\n  }\n\n  public boolean isSelected(@NotNull VirtualFile file) {\n    return isVisible() && getUI().isSelected(file);\n  }\n\n  @NotNull\n  public VirtualFile[] getSelection() {\n    if (isVisible()) {\n      return getUI().getSelection();\n<｜fim▁hole｜>\n  public void scrollToSelection() {\n    if (isVisible()) {\n      if (!toolWindow.isActive()) {\n        toolWindow.activate(new LazyScroller());\n      }\n      else {\n        getUI().scrollToSelection();\n      }\n    }\n  }\n\n  public boolean isVisible() {\n    return toolWindow.isAvailable();\n  }\n\n  public void activate() {\n    if (isVisible() && !toolWindow.isActive()) {\n      toolWindow.activate(null);\n    }\n  }\n\n  @Override\n  public void setFilter(ThemeFilter filter) {\n    myFilter = filter;\n    updateUI();\n  }\n\n  @Override\n  public ThemeFilter getFilter() {\n    return myFilter;\n  }\n\n  @Override\n  public void setTagFilter(TagFilter filter) {\n    myTagFilter = filter;\n    updateUI();\n  }\n\n  @Nullable\n  @Override\n  public TagFilter getTagFilter() {\n    return myTagFilter;\n  }\n\n  public void setVisible(boolean visible) {\n    toolWindow.setAvailable(visible, null);\n    if (visible) {\n      setTitle();\n      getUI().refresh();\n    }\n    else {\n      getUI().dispose();\n    }\n  }\n\n  private void updateUI() {\n    if (isVisible()) {\n      setTitle();\n      getUI().refresh();\n    }\n  }\n\n  private void setTitle() {\n    toolWindow.setTitle(root != null ? IfsUtil.getReferencePath(project, root) : null);\n  }\n\n  @NotNull\n  public Project getProject() {\n    return project;\n  }\n\n  public void setTransparencyChessboardVisible(boolean visible) {\n    if (isVisible()) {\n      getUI().setTransparencyChessboardVisible(visible);\n    }\n  }\n\n  public boolean isTransparencyChessboardVisible() {\n    return isVisible() && getUI().isTransparencyChessboardVisible();\n  }\n\n  public boolean isEnabledForActionPlace(String place) {\n    // Enable if it not for Editor\n    return isVisible() && !ImageEditorActions.ACTION_PLACE.equals(place);\n  }\n\n  @Override\n  public boolean isFileSizeVisible() {\n    return isVisible() && getUI().isFileSizeVisible();\n  }\n\n  @Override\n  public void setFileSizeVisible(boolean visible) {\n    if (isVisible()) {\n      getUI().setFileSizeVisible(visible);\n    }\n  }\n\n  @Override\n  public boolean isFileNameVisible() {\n    return isVisible() && getUI().isFileNameVisible();\n  }\n\n  @Override\n  public void setFileNameVisible(boolean visible) {\n    if (isVisible()) {\n      getUI().setFileNameVisible(visible);\n    }\n  }\n\n  public void dispose() {\n    // Dispose UI\n    Disposer.dispose(getUI());\n    // Unregister ToolWindow\n    ToolWindowManager windowManager = ToolWindowManager.getInstance(project);\n    windowManager.unregisterToolWindow(TOOLWINDOW_ID);\n  }\n\n  @Override\n  public ImageZoomModel getZoomModel() {\n    return ImageZoomModel.STUB;\n  }\n\n  @Override\n  public void setGridVisible(boolean visible) {\n  }\n\n  @Override\n  public boolean isGridVisible() {\n    return false;\n  }\n\n  private final class LazyScroller implements Runnable {\n    public void run() {\n      SwingUtilities.invokeLater(() -> getUI().scrollToSelection());\n    }\n  }\n}<｜fim▁end｜>",
    "response": "    }\n    return VirtualFile.EMPTY_ARRAY;\n  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.appcutt.demo.libs.imageloader.com.nostra13.universalimageloader.core.listener;\n\nimport android.graphics.Bitmap;\nimport android.view.View;\nimport com.appcutt.demo.libs.imageloader.com.nostra13.universalimageloader.core.assist.FailReason;\n\npublic interface ImageLoadingListener {\n\n    /**\n     * Is called when image loading task was started\n     *\n     * @param imageUri Loading image URI\n     * @param view     View for image\n     */\n    void onLoadingStarted(String imageUri, View view);\n\n    /**\n     * Is called when an error was occurred during image loading\n     *\n     * @param imageUri   Loading image URI\n     * @param view       View for image. Can be <b>null</b>.\n     * @param failReason {@linkplain com.nostra13.universalimageloader.core.assist.FailReason The reason} why image\n     *                   loading was failed\n     */\n    void onLoadingFailed(String imageUri, View view, FailReason failReason);\n\n    /**\n     * Is called when image is loaded successfully (and displayed in View if one was specified)\n     *\n     * @param imageUri    Loaded image URI\n<｜fim▁hole｜>     * Is called when image loading task was cancelled because View for image was reused in newer task\n     *\n     * @param imageUri Loading image URI\n     * @param view     View for image. Can be <b>null</b>.\n     */\n    void onLoadingCancelled(String imageUri, View view);\n}<｜fim▁end｜>",
    "response": "     * @param view        View for image. Can be <b>null</b>.\n     * @param loadedImage Bitmap of loaded and decoded image\n     */\n    void onLoadingComplete(String imageUri, View view, Bitmap loadedImage);\n\n    /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.netty.handler.ssl;\n\nimport io.netty.util.internal.ResourcesUtil;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.function.Executable;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.security.KeyManagementException;\nimport java.security.NoSuchAlgorithmException;\nimport java.security.PrivateKey;\nimport java.security.cert.CertificateException;\nimport java.security.spec.InvalidKeySpecException;\n\nimport javax.net.ssl.SSLContext;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLException;\n\nimport static org.junit.jupiter.api.Assumptions.assumeTrue;\nimport static org.junit.jupiter.api.Assertions.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertNotNull;\nimport static org.junit.jupiter.api.Assertions.assertThrows;\n\npublic abstract class SslContextTest {\n\n    @Test\n    public void testUnencryptedEmptyPassword() throws Exception {\n        assertThrows(IOException.class, new Executable() {\n            @Override\n            public void execute() throws Throwable {\n                SslContext.toPrivateKey(\n                        ResourcesUtil.getFile(getClass(), \"test2_unencrypted.pem\"), \"\");\n            }\n        });\n    }\n\n    @Test\n    public void testUnEncryptedNullPassword() throws Exception {\n        PrivateKey key = SslContext.toPrivateKey(\n                ResourcesUtil.getFile(getClass(), \"test2_unencrypted.pem\"), null);\n        assertNotNull(key);\n    }\n\n    @Test\n    public void testEncryptedEmptyPassword() throws Exception {\n        PrivateKey key = SslContext.toPrivateKey(\n                ResourcesUtil.getFile(getClass(), \"test_encrypted_empty_pass.pem\"), \"\");\n        assertNotNull(key);\n    }\n\n    @Test\n    public void testEncryptedNullPassword() throws Exception {\n        assertThrows(InvalidKeySpecException.class, new Executable() {\n            @Override\n            public void execute() throws Throwable {\n                SslContext.toPrivateKey(\n                        ResourcesUtil.getFile(getClass(), \"test_encrypted_empty_pass.pem\"), null);\n            }\n        });\n    }\n\n    @Test\n    public void testSslContextWithEncryptedPrivateKey() throws SSLException {\n        File keyFile = ResourcesUtil.getFile(getClass(), \"test_encrypted.pem\");\n        File crtFile = ResourcesUtil.getFile(getClass(), \"test.crt\");\n\n        newSslContext(crtFile, keyFile, \"12345\");\n    }\n\n    @Test\n    public void testSslContextWithEncryptedPrivateKey2() throws SSLException {\n        File keyFile = ResourcesUtil.getFile(getClass(), \"test2_encrypted.pem\");\n        File crtFile = ResourcesUtil.getFile(getClass(), \"test2.crt\");\n\n        newSslContext(crtFile, keyFile, \"12345\");\n    }\n\n    @Test\n    public void testSslContextWithUnencryptedPrivateKey() throws SSLException {\n        File keyFile = ResourcesUtil.getFile(getClass(), \"test_unencrypted.pem\");\n        File crtFile = ResourcesUtil.getFile(getClass(), \"test.crt\");\n\n        newSslContext(crtFile, keyFile, null);\n    }\n\n    @Test\n    public void testSslContextWithUnencryptedPrivateKeyEmptyPass() throws SSLException {\n        final File keyFile = ResourcesUtil.getFile(getClass(), \"test_unencrypted.pem\");\n        final File crtFile = ResourcesUtil.getFile(getClass(), \"test.crt\");\n\n<｜fim▁hole｜>            @Override\n            public void execute() throws Throwable {\n                newSslContext(crtFile, keyFile, \"\");\n            }\n        });\n    }\n\n    @Test\n    public void testSupportedCiphers() throws KeyManagementException, NoSuchAlgorithmException, SSLException {\n        SSLContext jdkSslContext = SSLContext.getInstance(\"TLS\");\n        jdkSslContext.init(null, null, null);\n        SSLEngine sslEngine = jdkSslContext.createSSLEngine();\n\n        String unsupportedCipher = \"TLS_DH_anon_WITH_DES_CBC_SHA\";\n        IllegalArgumentException exception = null;\n        try {\n            sslEngine.setEnabledCipherSuites(new String[] {unsupportedCipher});\n        } catch (IllegalArgumentException e) {\n            exception = e;\n        }\n        assumeTrue(exception != null);\n        File keyFile = ResourcesUtil.getFile(getClass(), \"test_unencrypted.pem\");\n        File crtFile = ResourcesUtil.getFile(getClass(), \"test.crt\");\n\n        SslContext sslContext = newSslContext(crtFile, keyFile, null);\n        assertFalse(sslContext.cipherSuites().contains(unsupportedCipher));\n    }\n\n    @Test\n    public void testUnsupportedParams() throws CertificateException {\n        assertThrows(CertificateException.class, new Executable() {\n            @Override\n            public void execute() throws Throwable {\n                SslContext.toX509Certificates(\n                        new File(getClass().getResource(\"ec_params_unsupported.pem\").getFile()));\n            }\n        });\n    }\n\n    protected abstract SslContext newSslContext(File crtFile, File keyFile, String pass) throws SSLException;\n}<｜fim▁end｜>",
    "response": "        assertThrows(SSLException.class, new Executable() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package gov.nasa.worldwindx.applications.sar.actions;\n\n<｜fim▁hole｜>\nimport javax.swing.*;\nimport java.awt.event.*;\n\npublic class AddOffsetToPositionsAction extends AbstractAction\n{\n    protected final PositionTable table;\n\n    public AddOffsetToPositionsAction(final PositionTable table)\n    {\n        this.table = table;\n\n        int numSelectedPositions = table.getSelectedRowCount();\n\n        putValue(NAME, \"Add Altitude Offset To Selected\");\n        putValue(LONG_DESCRIPTION, \"Add the track altitude offset to the selected positions\");\n\n        if (numSelectedPositions == 0)\n            this.setEnabled(false);\n\n        SARTrack st = table.getSarTrack();\n        if (st == null || st.getOffset() == 0)\n            this.setEnabled(false);\n    }\n\n    public void actionPerformed(ActionEvent e)\n    {\n        SARTrack st = table.getSarTrack();\n        if (st == null || st.getOffset() == 0)\n            return;\n\n        double offset = st.getOffset();\n        for (int index : this.table.getSelectedRows())\n        {\n            SARPosition pos = st.get(index);\n            st.set(index, new SARPosition(pos.getLatitude(), pos.getLongitude(), pos.getElevation() + offset));\n        }\n    }\n}<｜fim▁end｜>",
    "response": "import gov.nasa.worldwindx.applications.sar.*;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package seava.ad.business.ext;\n\nimport java.util.Date;\n\nimport seava.j4e.api.exceptions.BusinessException;\nimport seava.j4e.api.service.IPersistableLog;\nimport seava.j4e.api.service.IPersistableLogMessage;\n<｜fim▁hole｜>import seava.j4e.business.service.AbstractBusinessBaseService;\nimport seava.ad.business.api.scheduler.IJobLogService;\nimport seava.ad.domain.impl.scheduler.JobContext;\nimport seava.ad.domain.impl.scheduler.JobLog;\nimport seava.ad.domain.impl.scheduler.JobLogMessage;\nimport seava.ad.domain.impl.scheduler.JobTimer;\n\npublic class PersistableJobLogService extends AbstractBusinessBaseService\n        implements IPersistableLogService {\n\n    @Override\n    public String insert(IPersistableLog log) throws BusinessException {\n\n        JobLog jl = new JobLog();\n        jl.setStartTime((Date) log.getProperty(IJob.PLK_START_TIME));\n        jl.setEndTime((Date) log.getProperty(IJob.PLK_END_TIME));\n\n        for (IPersistableLogMessage m : log.getMessages()) {\n            JobLogMessage jlm = new JobLogMessage();\n            jlm.setJobLog(jl);\n            jlm.setMessage(m.getMessage());\n            jlm.setMessageType(m.getType());\n            jl.addToMessages(jlm);\n        }\n        IJobLogService srv = (IJobLogService) this\n                .findEntityService(JobLog.class);\n        String jobContextId = (String) log.getProperty(IJob.PLK_JOB_CONTEXT);\n        String jobTimerId = (String) log.getProperty(IJob.PLK_JOB_TIMER);\n\n        if (jobContextId != null) {\n            JobContext jobContext = srv.getEntityManager().find(\n                    JobContext.class, jobContextId);\n            jl.setJobContext(jobContext);\n        }\n\n        if (jobTimerId != null) {\n            JobTimer jobTimer = srv.getEntityManager().find(JobTimer.class,\n                    jobTimerId);\n            jl.setJobTimer(jobTimer);\n        }\n\n        srv.insert(jl);\n        return jl.getId();\n    }\n\n    @Override\n    public String getType() {\n        return IPersistableLogService.PL_TYPE_JOB;\n    }\n\n}<｜fim▁end｜>",
    "response": "import seava.j4e.api.service.IPersistableLogService;\nimport seava.j4e.api.service.job.IJob;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.navercorp.pinpoint.web.controller;\n\nimport com.navercorp.pinpoint.common.PinpointConstants;\nimport com.navercorp.pinpoint.common.util.IdValidateUtils;\nimport com.navercorp.pinpoint.web.service.AgentInfoService;\nimport com.navercorp.pinpoint.web.service.ApplicationService;\nimport com.navercorp.pinpoint.web.vo.ApplicationAgentHostList;\nimport com.navercorp.pinpoint.web.vo.CodeResult;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestParam;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport java.util.Objects;\n\n@RestController\npublic class ApplicationController {\n\n    private static final int CODE_SUCCESS = 0;\n    private static final int CODE_FAIL = -1;\n\n<｜fim▁hole｜>\n    public ApplicationController(AgentInfoService agentInfoService, ApplicationService applicationService) {\n        this.agentInfoService = Objects.requireNonNull(agentInfoService, \"agentInfoService\");\n        this.applicationService = Objects.requireNonNull(applicationService, \"applicationService\");\n    }\n\n    @GetMapping(value = \"/getApplicationHostInfo\", params = {\"!durationDays\"})\n    public ApplicationAgentHostList getApplicationHostInfo (\n            @RequestParam(value = \"offset\", required = false, defaultValue = \"1\") int offset,\n            @RequestParam(value = \"limit\", required = false, defaultValue = \"100\") int limit) throws Exception {\n        return agentInfoService.getApplicationAgentHostList(offset, limit);\n    }\n\n    @GetMapping(value = \"/getApplicationHostInfo\", params = {\"durationDays\"})\n    public ApplicationAgentHostList getApplicationHostInfo (\n            @RequestParam(value = \"offset\", required = false, defaultValue = \"1\") int offset,\n            @RequestParam(value = \"limit\", required = false, defaultValue = \"100\") int limit,\n            @RequestParam(value = \"durationDays\") int durationDays) throws Exception {\n        return agentInfoService.getApplicationAgentHostList(offset, limit, durationDays);\n    }\n\n    @RequestMapping(value = \"/isAvailableApplicationName\")\n    public CodeResult isAvailableApplicationName(@RequestParam(\"applicationName\") String applicationName) {\n        if (!IdValidateUtils.checkLength(applicationName, PinpointConstants.APPLICATION_NAME_MAX_LEN)) {\n            return new CodeResult(CODE_FAIL, \"length range is 1 ~ 24\");\n        }\n\n        if (!IdValidateUtils.validateId(applicationName, PinpointConstants.APPLICATION_NAME_MAX_LEN)) {\n            return new CodeResult(CODE_FAIL, \"invalid pattern(\" + IdValidateUtils.ID_PATTERN_VALUE + \")\");\n        }\n\n        if (applicationService.isExistApplicationName(applicationName)) {\n            return new CodeResult(CODE_FAIL, \"already exist applicationName\");\n        }\n\n        return new CodeResult(CODE_SUCCESS, \"OK\");\n    }\n\n}<｜fim▁end｜>",
    "response": "    private final AgentInfoService agentInfoService;\n\n    private final ApplicationService applicationService;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.lqtemple.android.lqbookreader.read;\n\nimport android.widget.Toast;\n\nimport com.lqtemple.android.lqbookreader.MyApplication;\nimport com.lqtemple.android.lqbookreader.R;\n\n<｜fim▁hole｜>        Toast.makeText(MyApplication.getsContext(), R.string.book_reach_end_toast, Toast.LENGTH_SHORT).show();\n    }\n\n    public static void showPageStart() {\n        Toast.makeText(MyApplication.getsContext(), R.string.book_reach_start_toast, Toast.LENGTH_SHORT).show();\n    }\n}<｜fim▁end｜>",
    "response": "public class ToastFactory {\n    public static void showPageEnd() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import greenfoot.*;\n\npublic class Pose  \n{\n    private int x,y,rot;\n    private int shift_x,shift_y;\n    private Scrollable scrble;\n\n    /**\n     * Kostruktor. Hier wird der Klasse Pose eine ?Referenz? auf ein Scrollable Object gegeben.\n     * ( Scrollable ist eine Unterklasse von Actor).\n     */\n    public Pose(Scrollable scrble)\n    {\n        this.scrble=scrble;\n\n    }\n    public Pose(int x, int y, int rot)\n<｜fim▁hole｜>\n    }\n    /**\n     * Aktualisiert die Werte von Pose d.h. die x und y Koordinate und die Drehung.\n     * Wird zu Beginn der act() Methode aufgerufen.\n     */\n    public void update()\n    {\n        x=scrble.getX();\n        y=scrble.getY();\n        rot=scrble.getRotation();\n    }\n    /**\n     * Verschiebt das Scrollable-Object (die Rakete) so, dass der vorherige Zug rückgängig gemacht wird.\n     */\n    public void resetActor()\n    {\n\n        int dx,dy;\n        dx=scrble.getX()-x;\n        dy=scrble.getY()-y;\n        scrble.setRealX(scrble.getRealX()-dx);\n        scrble.setRealY(scrble.getRealY()-dy);\n        scrble.setLocation(x,y);\n        //System.out.println(\"Scroll: \"+dx+\":dx    \"+dy+\":dy\");\n\n        scrble.setRotation(rot);\n    }\n    public int getX()\n    {\n        return x;\n    }\n    public int getY()\n    {\n        return y;\n    }\n    public int getRot()\n    {\n        return rot;\n    }\n    public String toString()\n    {\n        return \"x/y\"+ x +\":\"+y+\"    rot:\"+rot;\n    }\n}<｜fim▁end｜>",
    "response": "    {\n        this.x=x;\n        this.y=y;\n        this.rot=rot;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.ow2.proactive.resourcemanager.nodesource.policy;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Properties;\n\nimport org.apache.log4j.Logger;\nimport org.objectweb.proactive.api.PAActiveObject;\nimport org.objectweb.proactive.core.util.wrapper.BooleanWrapper;\nimport org.ow2.proactive.resourcemanager.core.properties.PAResourceManagerProperties;\n\npublic class NodeSourcePolicyFactory {\n\n    /** list of supported policies */\n    private static Collection<Class<?>> supportedPolicies;\n\n    /**\n     * Creates a new active node source policy using reflection mechanism.\n     *\n     * @param policyClassName full class name of the policy\n     * @param infrastructureType infrastructure class name (for compatibility check)\n     * @param policyParameters policy parameters\n     * @return a stub of the node source policy\n     */\n    public static NodeSourcePolicy createAndActivate(String policyClassName, String infrastructureType,\n            Object[] policyParameters) {\n        NodeSourcePolicy policy = create(policyClassName);\n        return activate(policy, policyParameters);\n    }\n\n    /**\n     * Creates a new node source policy.\n     *\n     * @param policyClassName full class name of the policy\n     * @return new instance of the node source policy\n     */\n    public static NodeSourcePolicy create(String policyClassName) {\n        NodeSourcePolicy policy;\n        try {\n            boolean supported = false;\n            for (Class<?> cls : getSupportedPolicies()) {\n                if (cls.getName().equals(policyClassName)) {\n                    supported = true;\n                    break;\n                }\n            }\n            if (!supported) {\n                throw new IllegalArgumentException(policyClassName + \" is not supported\");\n            }\n\n            Class<?> policyClass = Class.forName(policyClassName);\n            policy = (NodeSourcePolicy) policyClass.newInstance();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n        return policy;\n    }\n\n    /**\n     * Creates the node source policy activity, given a node source policy instance.\n     *\n     * @param policy the node source policy to turn active\n     * @param policyParameters the policy parameters needed to configure it once it is turned active\n     * @return a stub to the node source policy activity\n     */\n    public static NodeSourcePolicy activate(NodeSourcePolicy policy, Object[] policyParameters) {\n<｜fim▁hole｜>        try {\n            stub = (NodeSourcePolicy) PAActiveObject.turnActive(policy);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n\n        // initializing parameters\n        BooleanWrapper result = stub.configure(policyParameters);\n        if (!result.getBooleanValue()) {\n            throw new RuntimeException(\"Cannot configure the policy \" + policy.getClass().getSimpleName());\n        }\n\n        return stub;\n    }\n\n    /**\n     * Loads a list of supported policies from a configuration file\n     * @return list of supported infrastructures\n     */\n    public static Collection<Class<?>> getSupportedPolicies() {\n        // reload file each time as it can be updated while the rm is running\n        supportedPolicies = new ArrayList<>();\n        Properties properties = new Properties();\n        try {\n            String propFileName = PAResourceManagerProperties.RM_NODESOURCE_POLICY_FILE.getValueAsString();\n            if (!(new File(propFileName).isAbsolute())) {\n                //file path is relative, so we complete the path with the prefix RM_Home constant\n                propFileName = PAResourceManagerProperties.RM_HOME.getValueAsString() + File.separator + propFileName;\n            }\n\n            try (FileInputStream stream = new FileInputStream(propFileName)) {\n                properties.load(stream);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\n        for (Object className : properties.keySet()) {\n            try {\n                Class<?> cls = Class.forName(className.toString());\n                supportedPolicies.add(cls);\n            } catch (ClassNotFoundException e) {\n                Logger.getLogger(NodeSourcePolicyFactory.class).warn(\"Cannot find class \" + className.toString());\n            }\n        }\n        return supportedPolicies;\n    }\n\n}<｜fim▁end｜>",
    "response": "        // turning policy into an active object\n        NodeSourcePolicy stub;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.uberfire.ext.widgets.table.client;\n\nimport com.google.gwt.cell.client.TextCell;\nimport com.google.gwt.dom.client.Style;\nimport com.google.gwt.user.cellview.client.Column;\nimport com.google.gwtmockito.GwtMockitoTestRunner;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\n\nimport static org.mockito.Mockito.*;\n\n<｜fim▁hole｜>    @InjectMocks\n    private UberfireSimpleTable<String> uberfireSimpleTable;\n\n    @Before\n    public void setup() {\n\n    }\n\n    @Test\n    public void testSetColumnWidth() {\n        Column<String, String> testColumn = new Column<String, String>(new TextCell()) {\n            @Override\n            public String getValue(String object) {\n                return \"col1\";\n            }\n        };\n        uberfireSimpleTable.setColumnPicker(columnPickerMock);\n        uberfireSimpleTable.setColumnWidth(testColumn,\n                                           35,\n                                           Style.Unit.PX);\n        verify(columnPickerMock).adjustColumnWidths();\n    }\n}<｜fim▁end｜>",
    "response": "@RunWith(GwtMockitoTestRunner.class)\npublic class UberfireSimpleTableTest {\n\n    @Mock\n    protected UberfireColumnPicker columnPickerMock;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.softwinner.shared;\n\nimport com.softwinner.update.R;\n\nimport android.app.Activity;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.os.Bundle;\nimport android.util.AttributeSet;\nimport android.view.KeyEvent;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.AdapterView;\nimport android.widget.AdapterView.OnItemClickListener;\nimport android.widget.BaseAdapter;\nimport android.widget.ListView;\nimport android.widget.TextView;\n\nimport java.io.File;\n\npublic class FileSelector extends Activity implements OnItemClickListener {\n\n    public static final String FILE = \"file\";\n\n    private File mCurrentDirectory;\n\n    private LayoutInflater mInflater;\n\n    private FileAdapter mAdapter = new FileAdapter();\n\n    private ListView mListView;\n\n    private static final File[] roots = new File[]{new File(\"/sdcard\"), new File(\"/mnt/extsd\")};\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        mInflater = LayoutInflater.from(this);\n        setContentView(R.layout.file_list);\n        mListView = (ListView) findViewById(R.id.file_list);\n        mListView.setAdapter(mAdapter);\n        mAdapter.setCurrentList(roots);\n        mListView.setOnItemClickListener(this);\n    }\n\n    @Override\n    public void onItemClick(AdapterView<?> adapterView, View view, int position, long id) {\n        File selectFile = (File) adapterView.getItemAtPosition(position);\n        if (selectFile.isDirectory()) {\n            mCurrentDirectory = selectFile;\n            FileAdapter adapter = (FileAdapter) adapterView.getAdapter();\n            adapter.setCurrentList(selectFile);\n        } else if (selectFile.isFile()) {\n<｜fim▁hole｜>        }\n    }\n\n    @Override\n    public void onBackPressed() {\n        if (mCurrentDirectory == null) {\n            super.onBackPressed();\n        } else if (mCurrentDirectory.getPath().equals(\"/sdcard\") || mCurrentDirectory.getPath().equals(\"/mnt/extsd\") ) {\n            mCurrentDirectory = null;\n            mAdapter.setCurrentList(roots);\n        } else {\n            mCurrentDirectory = mCurrentDirectory.getParentFile();\n            mAdapter.setCurrentList(mCurrentDirectory);\n        }\n    }\n\n    private class FileAdapter extends BaseAdapter {\n\n        private File mFiles[];\n\n        public void setCurrentList(File directory) {\n            mFiles = directory.listFiles();\n            notifyDataSetChanged();\n        }\n\n        public void setCurrentList(File[] directories) {\n            mFiles = directories;\n            notifyDataSetChanged();\n        }\n\n        @Override\n        public int getCount() {\n            return mFiles == null ? 0 : mFiles.length;\n        }\n\n        @Override\n        public File getItem(int position) {\n            File file = mFiles == null ? null : mFiles[position];\n            return file;\n        }\n\n        @Override\n        public long getItemId(int position) {\n            return position;\n        }\n\n        @Override\n        public View getView(int position, View convertView, ViewGroup parent) {\n            if (convertView == null) {\n                convertView = mInflater.inflate(R.layout.large_text, null);\n            }\n            TextView tv = (TextView) convertView;\n            File file = mFiles[position];\n            String name = file.getName();\n            tv.setText(name);\n            return tv;\n        }\n\n    }\n}<｜fim▁end｜>",
    "response": "            Intent intent = new Intent();\n            intent.putExtra(FILE, selectFile.getPath());\n            setResult(0, intent);\n            finish();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.freelib.multiitem.adapter.holder;\n\nimport android.databinding.DataBindingUtil;\nimport android.support.annotation.LayoutRes;\nimport android.support.annotation.NonNull;\nimport android.support.v7.widget.GridLayoutManager;\nimport android.support.v7.widget.RecyclerView.ViewHolder;\nimport android.support.v7.widget.StaggeredGridLayoutManager;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\n\nimport com.freelib.multiitem.item.ItemData;\n\npublic abstract class ViewHolderManager<T, V extends BaseViewHolder> {\n    private boolean fullSpan;\n    private int spanSize;\n\n    protected ViewModel viewModel = new BaseViewModel();\n\n    /**\n     * 创建ViewHolder\n     * {@link android.support.v7.widget.RecyclerView.Adapter#onCreateViewHolder}\n     */\n    @NonNull\n    public abstract V onCreateViewHolder(@NonNull ViewGroup parent);\n\n    /**\n     * 为ViewHolder绑定数据\n     * {@link android.support.v7.widget.RecyclerView.Adapter#onBindViewHolder}\n     *\n     * @param t 数据源\n     */\n    public abstract void onBindViewHolder(V holder, T t);\n\n    /**\n     * 为ViewHolder绑定数据，并根据params做出相应设置\n     *\n     * @param t      数据源\n     * @param params {@link ViewHolderParams}\n     */\n    public void onBindViewHolder(@NonNull V holder, @NonNull T t, @NonNull ViewHolderParams params) {\n        // TODO 如果以后有需要不直接在item view上设置Click事件，在MultiViewHolder增加itemHandlerView属性即可\n        if (isClickable()) {\n            holder.itemView.setOnClickListener(params.getClickListener());\n            holder.itemView.setOnLongClickListener(params.getLongClickListener());\n        }\n\n        //如果数据源是ItemData，则执行定制化处理\n        if (t instanceof ItemData) {\n            bindView(holder, (ItemData) t);\n        }\n        onBindViewHolder(holder, t);\n    }\n\n    protected void bindView(V holder, ItemData data) {\n        setVisibility(holder.itemView, data.getVisibility());\n    }\n\n    protected void setVisibility(View itemView, int visibility) {\n<｜fim▁hole｜>        return holder.getAdapterPosition();\n    }\n\n    /**\n     * 通过资源id生成item itemView\n     *\n     * @param parent onCreateViewHolder中的参数\n     * @return 返回item itemView\n     */\n    protected View getItemView(ViewGroup parent) {\n        return viewModel.getItemView(parent, getItemLayoutId());\n    }\n\n    /**\n     * item布局文件id\n     *\n     * @return layout资源id\n     */\n    @LayoutRes\n    protected abstract int getItemLayoutId();\n\n    /**\n     * 在指定view中获取控件为id的view\n     *\n     * @param view 外层view\n     * @param id   需要获取view的控件id\n     * @return itemView\n     */\n    protected <T extends View> T getView(View view, int id) {\n        return (T) view.findViewById(id);\n    }\n\n    /**\n     * 在指定viewHolder中获取控件为id的view\n     *\n     * @return itemView\n     */\n    protected <T extends View> T getView(ViewHolder viewHolder, int id) {\n        return getView(viewHolder.itemView, id);\n    }\n\n    /**\n     * @param fullSpan 是否需要填满父布局（适用于表格布局）\n     */\n    public void setFullSpan(boolean fullSpan) {\n        this.fullSpan = fullSpan;\n    }\n\n    /**\n     * @return 是否填满父布局\n     * @see StaggeredGridLayoutManager.LayoutParams#setFullSpan\n     * @see GridLayoutManager#setSpanSizeLookup\n     */\n    public boolean isFullSpan() {\n        return fullSpan;\n    }\n\n    /**\n     * 根据spanCount获取当前所占span大小(适用于表格布局)<br>\n     * 如果被设置过正整数则返回；如果是fullSpan则返回spanCount；其余返回1<br>\n     * GridLayoutManager模式下，调整本方法返回值达到不同Item占用不同宽度的功能\n     *\n     * @param spanCount span总数量\n     * @return 当前所占span大小\n     * @see GridLayoutManager#setSpanSizeLookup\n     */\n    public int getSpanSize(int spanCount) {\n        return spanSize > 0 ? spanSize : (isFullSpan() ? spanCount : 1);\n    }\n\n    /**\n     * @param spanSize 所占span大小\n     */\n    public void setSpanSize(int spanSize) {\n        this.spanSize = spanSize;\n    }\n\n    public boolean isClickable() {\n        return true;\n    }\n\n    /**\n     * 开启Data bind\n     *\n     * @see ViewModel\n     */\n    protected void enableDataBind() {\n        viewModel = new DataBindViewModel();\n    }\n\n    interface ViewModel {\n        View getItemView(ViewGroup parent, @LayoutRes int layoutId);\n    }\n\n    static class BaseViewModel implements ViewModel {\n\n        @Override\n        public View getItemView(ViewGroup parent, @LayoutRes int layoutId) {\n            return LayoutInflater.from(parent.getContext()).inflate(layoutId, parent, false);\n        }\n    }\n\n    static class DataBindViewModel implements ViewModel {\n\n        @Override\n        public View getItemView(ViewGroup parent, @LayoutRes int layoutId) {\n            return DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), layoutId, parent, false).getRoot();\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "        itemView.setVisibility(visibility);\n    }\n\n    public final int getPosition(@NonNull final ViewHolder holder) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package bisq.desktop.main.offer.bisq_v1;\n\nimport bisq.desktop.common.model.ActivatableDataModel;\n\nimport bisq.core.btc.model.AddressEntry;\nimport bisq.core.btc.wallet.BtcWalletService;\nimport bisq.core.offer.OfferUtil;\n\nimport org.bitcoinj.core.Coin;\n\n<｜fim▁hole｜>\nimport static bisq.core.util.coin.CoinUtil.minCoin;\n\npublic abstract class OfferDataModel extends ActivatableDataModel {\n    protected final BtcWalletService btcWalletService;\n    protected final OfferUtil offerUtil;\n\n    @Getter\n    protected final BooleanProperty isBtcWalletFunded = new SimpleBooleanProperty();\n    @Getter\n    public final ObjectProperty<Coin> totalToPayAsCoin = new SimpleObjectProperty<>();\n    @Getter\n    protected final ObjectProperty<Coin> balance = new SimpleObjectProperty<>();\n    @Getter\n    protected final ObjectProperty<Coin> missingCoin = new SimpleObjectProperty<>(Coin.ZERO);\n    @Getter\n    protected final BooleanProperty showWalletFundedNotification = new SimpleBooleanProperty();\n    @Getter\n    protected Coin totalAvailableBalance;\n    protected AddressEntry addressEntry;\n    protected boolean useSavingsWallet;\n\n    public OfferDataModel(BtcWalletService btcWalletService, OfferUtil offerUtil) {\n        this.btcWalletService = btcWalletService;\n        this.offerUtil = offerUtil;\n    }\n\n    protected void updateBalance() {\n        Coin tradeWalletBalance = btcWalletService.getBalanceForAddress(addressEntry.getAddress());\n        if (useSavingsWallet) {\n            Coin savingWalletBalance = btcWalletService.getSavingWalletBalance();\n            totalAvailableBalance = savingWalletBalance.add(tradeWalletBalance);\n            if (totalToPayAsCoin.get() != null) {\n                balance.set(minCoin(totalToPayAsCoin.get(), totalAvailableBalance));\n            }\n        } else {\n            balance.set(tradeWalletBalance);\n        }\n        missingCoin.set(offerUtil.getBalanceShortage(totalToPayAsCoin.get(), balance.get()));\n        isBtcWalletFunded.set(offerUtil.isBalanceSufficient(totalToPayAsCoin.get(), balance.get()));\n        if (totalToPayAsCoin.get() != null && isBtcWalletFunded.get() && !showWalletFundedNotification.get()) {\n            showWalletFundedNotification.set(true);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "import javafx.beans.property.BooleanProperty;\nimport javafx.beans.property.ObjectProperty;\nimport javafx.beans.property.SimpleBooleanProperty;\nimport javafx.beans.property.SimpleObjectProperty;\n\nimport lombok.Getter;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import static org.checkerframework.checker.formatter.qual.ConversionCategory.FLOAT;\n<｜fim▁hole｜>\nimport org.checkerframework.checker.formatter.qual.Format;\n\npublic class ManualExample {\n\n    void m(boolean flag) {\n\n        @Format({FLOAT, INT}) String f;\n\n        f = \"%f %d\"; // OK\n        f = \"%s %d\"; // OK, %s is weaker than %f\n        //:: warning: (format.missing.arguments)\n        f = \"%f\"; // warning: last argument is ignored\n        //:: warning: (format.missing.arguments)\n        f = flag ? \"%f %d\" : \"%f\";\n\n        if (flag) {\n            f = \"%f %d\";\n        } else {\n            //:: warning: (format.missing.arguments)\n            f = \"%f\";\n        }\n        @Format({FLOAT, INT}) String f2 = f;\n\n        //:: error: (assignment.type.incompatible)\n        f = \"%f %d %s\"; // error: too many arguments\n        //:: error: (assignment.type.incompatible)\n        f = \"%d %d\"; // error: %d is not weaker than %f\n\n        String.format(f, 0.8, 42);\n    }\n}<｜fim▁end｜>",
    "response": "import static org.checkerframework.checker.formatter.qual.ConversionCategory.INT;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package app.chien;\n\n<｜fim▁hole｜>import lombok.Getter;\nimport lombok.NonNull;\nimport lombok.Setter;\n\npublic class TestBean {\n    @Setter @Getter\n    private int a;\n    private String b;\n\n    private Long c;\n\n    public TestBean() {\n\n    }\n\n}<｜fim▁end｜>",
    "response": "import com.sun.istack.internal.NotNull;\n\nimport lombok.Data;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import java.io.IOException;\nimport java.util.StringTokenizer;\nimport java.util.Scanner;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.fs.Path;\nimport org.apache.hadoop.io.LongWritable;\nimport org.apache.hadoop.io.Text;\nimport org.apache.hadoop.mapreduce.Job;\nimport org.apache.hadoop.mapreduce.Mapper;\n<｜fim▁hole｜>\npublic class CounterMapper\n     extends Mapper<LongWritable, Text, LongWritable, LongWritable>{\n\n  private final static LongWritable one = new LongWritable(1);\n  private static LongWritable v = new LongWritable();\n  public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {\n        v.set(((new Scanner(value.toString())).nextLong()));\n        context.write(v,one);\n  }\n}<｜fim▁end｜>",
    "response": "import org.apache.hadoop.mapreduce.Reducer;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.tcl.launcher.ui.homecloud.FileManager.Model;\nimport java.util.HashMap;\n\npublic class FileModels {\n\n    public static enum FileType {\n        Music, Photo, Video, Document, Folder,\n    }\n\n    public static final String MusicFileTypeName = \"Music\";\n    public static final String PhotoFileTypeName = \"Photo\";\n    public static final String VideoFileTypeName = \"Video\";\n    public static final String DocumentFileTypeName = \"Document\";\n    public static final String FloderFileTypeName = \"Folder\";\n    public static HashMap<String, FileType> FileStringType = new HashMap<String, FileType>();\n\n    static\n    {\n        FileStringType.put(MusicFileTypeName, FileType.Music);\n        FileStringType.put(PhotoFileTypeName, FileType.Photo);\n        FileStringType.put(VideoFileTypeName, FileType.Video);\n        FileStringType.put(DocumentFileTypeName, FileType.Document);    \n        FileStringType.put(FloderFileTypeName, FileType.Folder);    \n    }\n\n    public static FileType getFileType(String typeString) {\n        return FileStringType.get(typeString);      \n    }\n\n    public static class MediaFile {\n        private static HashMap<String, FileType> sFileTypeMap = new HashMap<String, FileType>();\n\n        static {\n            // music\n            addFileType(\"mp3\", FileType.Music);\n            addFileType(\"aac\", FileType.Music);\n            addFileType(\"mid\", FileType.Music);\n            addFileType(\"wav\", FileType.Music);\n<｜fim▁hole｜>            addFileType(\"ogg\", FileType.Music);\n            addFileType(\"oga\", FileType.Music);\n            addFileType(\"mka\", FileType.Music);\n\n            // photo\n            addFileType(\"png\", FileType.Photo);\n            addFileType(\"gif\", FileType.Photo);\n            addFileType(\"jpg\", FileType.Photo);\n            addFileType(\"jpeg\", FileType.Photo);\n            addFileType(\"bmp\", FileType.Photo);\n            addFileType(\"wbmp\", FileType.Photo);\n            addFileType(\"webp\", FileType.Photo);\n\n            // video\n            addFileType(\"mp4\", FileType.Video);\n            addFileType(\"rmvb\", FileType.Video);\n            addFileType(\"avi\", FileType.Video);\n            addFileType(\"rmv\", FileType.Video);\n            addFileType(\"mpeg\", FileType.Video);\n            addFileType(\"mpg\", FileType.Video);\n            addFileType(\"m4v\", FileType.Video);\n            addFileType(\"3gp\", FileType.Video);\n            addFileType(\"3gpp\", FileType.Video);\n            addFileType(\"3g2\", FileType.Video);\n            addFileType(\"3gpp2\", FileType.Video);\n            addFileType(\"mkv\", FileType.Video);\n            addFileType(\"webm\", FileType.Video);\n            addFileType(\"ts\", FileType.Video);\n\n            //\n\n        }\n\n        static void addFileType(String ext, FileType type) {\n            sFileTypeMap.put(ext, type);\n        }\n\n        public static FileType getFileType(String path) {\n            FileType type = FileType.Document;\n            int nIndex = path.lastIndexOf(\".\");\n            if (nIndex > 0) {\n                type = sFileTypeMap.get(path.substring(nIndex + 1)\n                        .toLowerCase());\n                if(type == null )\n                {\n                    type = FileType.Document;   \n                }\n\n            }       \n\n            return type;\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "            addFileType(\"m4a\", FileType.Music);\n            addFileType(\"amr\", FileType.Music);\n            addFileType(\"awb\", FileType.Music);\n            addFileType(\"wma\", FileType.Music);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.rapid_i.repository.wsimport;\n\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlType;\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"getEntryResponse\", propOrder = {\n    \"_return\"\n})\npublic class GetEntryResponse {\n\n    @XmlElement(name = \"return\")\n    protected EntryResponse _return;\n\n    /**\n<｜fim▁hole｜>     *     \n     */\n    public EntryResponse getReturn() {\n        return _return;\n    }\n\n    /**\n     * Sets the value of the return property.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link EntryResponse }\n     *     \n     */\n    public void setReturn(EntryResponse value) {\n        this._return = value;\n    }\n\n}<｜fim▁end｜>",
    "response": "     * Gets the value of the return property.\n     * \n     * @return\n     *     possible object is\n     *     {@link EntryResponse }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.geode.internal.cache.entries;\n\nimport java.util.UUID;\nimport java.util.concurrent.atomic.AtomicLongFieldUpdater;\n\nimport org.apache.geode.internal.cache.DiskId;\nimport org.apache.geode.internal.cache.DiskStoreImpl;\nimport org.apache.geode.internal.cache.RegionEntry;\nimport org.apache.geode.internal.cache.RegionEntryContext;\nimport org.apache.geode.internal.cache.Token;\nimport org.apache.geode.internal.cache.eviction.EvictionController;\nimport org.apache.geode.internal.cache.persistence.DiskRecoveryStore;\nimport org.apache.geode.internal.offheap.OffHeapRegionEntryHelper;\nimport org.apache.geode.internal.offheap.annotations.Released;\nimport org.apache.geode.internal.offheap.annotations.Retained;\nimport org.apache.geode.internal.offheap.annotations.Unretained;\nimport org.apache.geode.internal.util.concurrent.CustomEntryConcurrentHashMap.HashEntry;\n\npublic class VMThinDiskRegionEntryOffHeapUUIDKey extends VMThinDiskRegionEntryOffHeap {\n  // --------------------------------------- common fields ----------------------------------------\n  private static final AtomicLongFieldUpdater<VMThinDiskRegionEntryOffHeapUUIDKey> LAST_MODIFIED_UPDATER =\n      AtomicLongFieldUpdater.newUpdater(VMThinDiskRegionEntryOffHeapUUIDKey.class, \"lastModified\");\n  protected int hash;\n  private HashEntry<Object, Object> nextEntry;\n<｜fim▁hole｜>  private volatile long lastModified;\n  // --------------------------------------- offheap fields ---------------------------------------\n  /**\n   * All access done using OFF_HEAP_ADDRESS_UPDATER so it is used even though the compiler can not\n   * tell it is.\n   */\n  @SuppressWarnings(\"unused\")\n  @Retained\n  @Released\n  private volatile long offHeapAddress;\n  /**\n   * I needed to add this because I wanted clear to call setValue which normally can only be called\n   * while the re is synced. But if I sync in that code it causes a lock ordering deadlock with the\n   * disk regions because they also get a rw lock in clear. Some hardware platforms do not support\n   * CAS on a long. If gemfire is run on one of those the AtomicLongFieldUpdater does a sync on the\n   * RegionEntry and we will once again be deadlocked. I don't know if we support any of the\n   * hardware platforms that do not have a 64bit CAS. If we do then we can expect deadlocks on disk\n   * regions.\n   */\n  private static final AtomicLongFieldUpdater<VMThinDiskRegionEntryOffHeapUUIDKey> OFF_HEAP_ADDRESS_UPDATER =\n      AtomicLongFieldUpdater.newUpdater(VMThinDiskRegionEntryOffHeapUUIDKey.class,\n          \"offHeapAddress\");\n  // ---------------------------------------- disk fields -----------------------------------------\n  /**\n   * @since GemFire 5.1\n   */\n  protected DiskId id;\n  // --------------------------------------- key fields -------------------------------------------\n  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp\n  private final long keyMostSigBits;\n  private final long keyLeastSigBits;\n\n  public VMThinDiskRegionEntryOffHeapUUIDKey(final RegionEntryContext context, final UUID key,\n      @Retained final Object value) {\n    super(context, (value instanceof RecoveredEntry ? null : value));\n    // DO NOT modify this class. It was generated from LeafRegionEntry.cpp\n    initialize(context, value);\n    this.keyMostSigBits = key.getMostSignificantBits();\n    this.keyLeastSigBits = key.getLeastSignificantBits();\n  }\n\n  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp\n  @Override\n  public Token getValueAsToken() {\n    return OffHeapRegionEntryHelper.getValueAsToken(this);\n  }\n\n  @Override\n  protected Object getValueField() {\n    return OffHeapRegionEntryHelper._getValue(this);\n  }\n\n  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp\n  @Override\n  @Unretained\n  protected void setValueField(@Unretained final Object value) {\n    OffHeapRegionEntryHelper.setValue(this, value);\n  }\n\n  @Override\n  @Retained\n  public Object getValueRetain(final RegionEntryContext context, final boolean decompress) {\n    return OffHeapRegionEntryHelper._getValueRetain(this, decompress, context);\n  }\n\n  @Override\n  public long getAddress() {\n    return OFF_HEAP_ADDRESS_UPDATER.get(this);\n  }\n\n  @Override\n  public boolean setAddress(final long expectedAddress, long newAddress) {\n    return OFF_HEAP_ADDRESS_UPDATER.compareAndSet(this, expectedAddress, newAddress);\n  }\n\n  @Override\n  @Released\n  public void release() {\n    OffHeapRegionEntryHelper.releaseEntry(this);\n  }\n\n  @Override\n  public void returnToPool() {\n    // never implemented\n  }\n\n  @Override\n  protected long getLastModifiedField() {\n    return LAST_MODIFIED_UPDATER.get(this);\n  }\n\n  @Override\n  protected boolean compareAndSetLastModifiedField(final long expectedValue, final long newValue) {\n    return LAST_MODIFIED_UPDATER.compareAndSet(this, expectedValue, newValue);\n  }\n\n  @Override\n  public int getEntryHash() {\n    return this.hash;\n  }\n\n  @Override\n  protected void setEntryHash(final int hash) {\n    this.hash = hash;\n  }\n\n  @Override\n  public HashEntry<Object, Object> getNextEntry() {\n    return this.nextEntry;\n  }\n\n  @Override\n  public void setNextEntry(final HashEntry<Object, Object> nextEntry) {\n    this.nextEntry = nextEntry;\n  }\n\n  // ----------------------------------------- disk code ------------------------------------------\n  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp\n  protected void initialize(final RegionEntryContext context, final Object value) {\n    diskInitialize(context, value);\n  }\n\n  @Override\n  public int updateAsyncEntrySize(final EvictionController evictionController) {\n    throw new IllegalStateException(\"should never be called\");\n  }\n\n  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp\n  @Override\n  public DiskId getDiskId() {\n    return this.id;\n  }\n\n  @Override\n  public void setDiskId(final RegionEntry oldEntry) {\n    this.id = ((DiskEntry) oldEntry).getDiskId();\n  }\n\n  private void diskInitialize(final RegionEntryContext context, final Object value) {\n    DiskRecoveryStore diskRecoveryStore = (DiskRecoveryStore) context;\n    DiskStoreImpl diskStore = diskRecoveryStore.getDiskStore();\n    long maxOplogSize = diskStore.getMaxOplogSize();\n    // get appropriate instance of DiskId implementation based on maxOplogSize\n    this.id = DiskId.createDiskId(maxOplogSize, true, diskStore.needsLinkedList());\n    Helper.initialize(this, diskRecoveryStore, value);\n  }\n\n  // ----------------------------------------- key code -------------------------------------------\n  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp\n  @Override\n  public Object getKey() {\n    return new UUID(this.keyMostSigBits, this.keyLeastSigBits);\n  }\n\n  @Override\n  public boolean isKeyEqual(final Object key) {\n    if (key instanceof UUID) {\n      UUID uuid = (UUID) key;\n      return uuid.getLeastSignificantBits() == this.keyLeastSigBits\n          && uuid.getMostSignificantBits() == this.keyMostSigBits;\n    }\n    return false;\n  }\n  // DO NOT modify this class. It was generated from LeafRegionEntry.cpp\n}<｜fim▁end｜>",
    "response": "  @SuppressWarnings(\"unused\")\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.adobe.acs.commons.workflow.bulk.removal.impl;\n\nimport com.adobe.acs.commons.workflow.bulk.removal.WorkflowInstanceRemover;\nimport org.apache.felix.scr.annotations.Activate;\nimport org.apache.felix.scr.annotations.Component;\nimport org.apache.felix.scr.annotations.Deactivate;\nimport org.apache.felix.scr.annotations.Properties;\nimport org.apache.felix.scr.annotations.Property;\nimport org.apache.felix.scr.annotations.Reference;\nimport org.apache.felix.scr.annotations.Service;\nimport org.apache.sling.api.resource.LoginException;\nimport org.apache.sling.api.resource.PersistenceException;\nimport org.apache.sling.api.resource.ResourceResolver;\nimport org.apache.sling.api.resource.ResourceResolverFactory;\nimport org.apache.sling.commons.osgi.PropertiesUtil;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Calendar;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Pattern;\n\n@Component(\n        label = \"ACS AEM Commons - Workflow Instance Remover - Scheduled Service\",\n        metatype = true,\n        configurationFactory = true\n)\n@Properties({\n        @Property(\n                label = \"Cron expression defining when this Scheduled Service will run\",\n                description = \"[12:01am daily = 0 1 0 ? * *]; see www.cronmaker.com\",\n                name = \"scheduler.expression\",\n                value = \"0 1 0 ? * *\"\n        ),\n        @Property(\n                label = \"Allow concurrent executions\",\n                description = \"Allow concurrent executions of this Scheduled Service\",\n                name = \"scheduler.concurrent\",\n                boolValue = false,\n                propertyPrivate = true\n        ),\n})\n@Service\npublic class WorkflowInstanceRemoverScheduler implements Runnable {\n    private static final Logger log = LoggerFactory.getLogger(WorkflowInstanceRemoverScheduler.class);\n\n    @Reference\n    private ResourceResolverFactory resourceResolverFactory;\n\n    @Reference\n    private WorkflowInstanceRemover workflowInstanceRemover;\n\n    private static final String[] DEFAULT_WORKFLOW_STATUSES = {\"COMPLETE\", \"ABORTED\"};\n\n    private List<String> statuses = new ArrayList<String>();\n\n    @Property(label = \"Workflow Status\",\n            description = \"Only remove Workflow Instances that have one of these statuses.\",\n            value = { \"COMPLETE\", \"ABORTED\" })\n    public static final String PROP_WORKFLOW_STATUSES = \"workflow.statuses\";\n\n    private static final String[] DEFAULT_WORKFLOW_MODELS = {};\n\n    private List<String> models = new ArrayList<String>();\n\n    @Property(label = \"Workflow Models\",\n            description = \"Only remove Workflow Instances that belong to one of these WF Models.\",\n            cardinality = Integer.MAX_VALUE,\n            value = { })\n    public static final String PROP_WORKFLOW_MODELS = \"workflow.models\";\n\n    private static final String[] DEFAULT_WORKFLOW_PAYLOADS = {};\n\n    private List<Pattern> payloads = new ArrayList<Pattern>();\n\n    @Property(label = \"Payload Patterns\",\n            description = \"Only remove Workflow Instances whose payloads match one of these regex patterns\",\n            cardinality = Integer.MAX_VALUE,\n            value = { })\n    public static final String PROP_WORKFLOW_PAYLOADS = \"workflow.payloads\";\n\n    private Calendar olderThan = null;\n\n    @Property(label = \"Older Than UTC TS\",\n            description = \"Only remove Workflow Instances whose payloads are older than this UTC Time in Millis\",\n            longValue = 0)\n    public static final String PROP_WORKFLOWS_OLDER_THAN = \"workflow.older-than\";\n\n    private static final int DEFAULT_BATCH_SIZE = 1000;\n    private int batchSize = DEFAULT_BATCH_SIZE;\n    @Property(label = \"Batch Size\",\n            description = \"Save removals to JCR in batches of this defined size.\",\n            intValue = DEFAULT_BATCH_SIZE)\n    public static final String PROP_BATCH_SIZE = \"batch-size\";\n\n    @Override\n    public final void run() {\n\n        ResourceResolver adminResourceResolver = null;\n        try {\n            adminResourceResolver = resourceResolverFactory.getAdministrativeResourceResolver(null);\n\n            final long start = System.currentTimeMillis();\n\n            int count = workflowInstanceRemover.removeWorkflowInstances(\n                    adminResourceResolver,\n                    models,\n                    statuses,\n                    payloads,\n                    olderThan, \n                    batchSize);\n\n            log.info(\"Removed [ {} ] Workflow instances in {} ms\", count, System.currentTimeMillis() - start);\n\n        } catch (LoginException e) {\n            log.error(\"Login Exception when getting admin resource resolver\", e);\n        } catch (PersistenceException e) {\n            log.error(\"Persistence Exception when saving Workflow Instances removal\", e);\n        } catch (WorkflowRemovalException e) {\n            log.error(\"Workflow Removal exception during Workflow Removal\", e);\n        } catch (InterruptedException e) {\n            log.error(\"Interrupted Exception during Workflow Removal\", e);\n        } catch (WorkflowRemovalForceQuitException e) {\n            log.info(\"Workflow Removal force quit\", e);\n        } finally {\n            if (adminResourceResolver != null) {\n                adminResourceResolver.close();\n            }\n        }\n    }\n\n    @Activate\n    protected final void activate(final Map<String, String> config) {\n        statuses = Arrays.asList(PropertiesUtil.toStringArray(\n                config.get(PROP_WORKFLOW_STATUSES), DEFAULT_WORKFLOW_STATUSES));\n\n        models = Arrays.asList(PropertiesUtil.toStringArray(\n                config.get(PROP_WORKFLOW_MODELS), DEFAULT_WORKFLOW_MODELS));\n\n<｜fim▁hole｜>\n        for (String payload : payloadsArray) {\n            Pattern p = Pattern.compile(payload);\n            if (p != null) {\n                payloads.add(p);\n            }\n        }\n\n        final Long olderThanTs = PropertiesUtil.toLong(config.get(PROP_WORKFLOWS_OLDER_THAN), 0);\n\n        if (olderThanTs > 0) {\n            olderThan = Calendar.getInstance();\n            olderThan.setTimeInMillis(olderThanTs);\n        }\n\n        batchSize = PropertiesUtil.toInteger(config.get(PROP_BATCH_SIZE), DEFAULT_BATCH_SIZE);\n        if (batchSize < 1) {\n            batchSize = DEFAULT_BATCH_SIZE;\n        }\n    }\n\n    @Deactivate\n    protected final void deactivate(final Map<String, String> config) {\n        olderThan = null;\n        statuses = new ArrayList<String>();\n        models = new ArrayList<String>();\n        payloads = new ArrayList<Pattern>();\n        batchSize = DEFAULT_BATCH_SIZE;\n    }\n}<｜fim▁end｜>",
    "response": "        final String[] payloadsArray =\n                PropertiesUtil.toStringArray(config.get(PROP_WORKFLOW_PAYLOADS), DEFAULT_WORKFLOW_PAYLOADS);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.example.gametest1;\n\nimport android.os.Bundle;\nimport android.app.Activity;\nimport android.app.AlertDialog;\nimport android.content.DialogInterface;\nimport android.content.pm.ActivityInfo;\nimport android.view.Window;\nimport android.view.WindowManager;\n\npublic class GameActivity extends Activity {\n\n    private GameView msf;\n\n    @Override\n    protected void onResume() {\n        // TODO Auto-generated method stub\n        super.onResume();\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // 窗体状态设置-设置为无标题栏状态【全屏】\n        this.getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,\n                WindowManager.LayoutParams.FLAG_FULLSCREEN);\n        requestWindowFeature(Window.FEATURE_NO_TITLE);\n        // 强制横屏\n        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);\n        msf = new GameView(this);\n        setContentView(msf);\n        //  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);这个是竖屏  \n    }\n\n    @Override\n    public void onBackPressed() {\n        // TODO Auto-generated method stub\n        new AlertDialog.Builder(this)\n\n        /* 弹出窗口的最上头文字 */\n\n<｜fim▁hole｜>        .setIcon(R.drawable.ic_launcher)\n\n        /* 设置弹出窗口的信息 */\n\n        .setMessage(\"确定退出结束游戏？？？\")\n        .setPositiveButton(\"确定\",\n                new DialogInterface.OnClickListener() {\n                    // 关闭\n                    public void onClick(\n                            DialogInterface dialoginterface, int i) {\n                        android.os.Process\n                                .killProcess(android.os.Process\n                                        .myPid());\n\n                        // SoundManager.Instance.stopBackgroundSound();\n                    }\n                })\n        .setNegativeButton(\"取消\",\n                new DialogInterface.OnClickListener() {\n                    /* 设置跳出窗口的返回事件 */\n                    public void onClick(\n                            DialogInterface dialoginterface, int i) {\n                        // 不进行操作\n                    }\n                }).show();\n\n    }\n\n    public void onPause() {\n        super.onPause();\n    }\n}<｜fim▁end｜>",
    "response": "        .setTitle(\"退出提示\")\n\n        /* 设置弹出窗口的图式 */\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jackhuang.hmcl.download;\n<｜fim▁hole｜>\n    public abstract DownloadProvider getDownloadProvider();\n\n    @Override\n    public abstract DefaultCacheRepository getCacheRepository();\n\n    @Override\n    public VersionList<?> getVersionList(String id) {\n        return getDownloadProvider().getVersionListById(id);\n    }\n}<｜fim▁end｜>",
    "response": "\npublic abstract class AbstractDependencyManager implements DependencyManager {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.pravega.segmentstore.server.host.health;\n\nimport io.pravega.segmentstore.server.SegmentContainer;\nimport io.pravega.segmentstore.server.SegmentContainerRegistry;\nimport io.pravega.shared.health.Health;\nimport io.pravega.shared.health.Status;\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\n<｜fim▁hole｜>\npublic class SegmentContainerRegistryHealthContributorTest {\n    SegmentContainerRegistry segmentContainerRegistry;\n    SegmentContainerRegistryHealthContributor segmentContainerRegistryHealthContributor;\n\n    @Before\n    public void setup() {\n        segmentContainerRegistry = mock(SegmentContainerRegistry.class);\n        segmentContainerRegistryHealthContributor = new SegmentContainerRegistryHealthContributor(segmentContainerRegistry);\n        when(segmentContainerRegistry.getContainers()).thenReturn(new ArrayList<SegmentContainer>());\n    }\n\n    @After\n    public void tearDown() {\n        segmentContainerRegistry.close();\n        segmentContainerRegistryHealthContributor.close();\n    }\n\n    /**\n     * Check health of SegmentContainerRegistry with different states.\n     */\n    @Test\n    public void testSegmentContainerHealth() {\n        when(segmentContainerRegistry.isClosed()).thenReturn(true);\n        Health.HealthBuilder builder = Health.builder().name(segmentContainerRegistryHealthContributor.getName());\n        Status health = segmentContainerRegistryHealthContributor.doHealthCheck(builder);\n        Assert.assertEquals(\"HealthContributor should report an 'DOWN' Status.\", Status.DOWN, health);\n        when(segmentContainerRegistry.isClosed()).thenReturn(false);\n        health = segmentContainerRegistryHealthContributor.doHealthCheck(builder);\n        Assert.assertEquals(\"HealthContributor should report an 'UP' Status.\", Status.UP, health);\n    }\n}<｜fim▁end｜>",
    "response": "import java.util.ArrayList;\n\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.xiaoyu;\n\npublic abstract class AbstractMediator {\n    protected AbstractColleague2 c;\n    protected AbstractColleague2 d;\n    protected AbstractColleague2 e;\n\n    public AbstractMediator(AbstractColleague2 c, AbstractColleague2 d, AbstractColleague2 e) {\n        this.c = c;\n        this.d = d;\n        this.e = e;\n    }\n<｜fim▁hole｜>    public abstract void eSync();\n}<｜fim▁end｜>",
    "response": "\n    public abstract void cSync();\n    public abstract void dSync();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.jforum.util;\n\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport net.jforum.entities.Group;\nimport net.jforum.entities.User;\n<｜fim▁hole｜>import br.com.caelum.vraptor.ioc.Component;\n\n@Component\npublic class GroupInteractionFilter {\n    /**\n     * Filter the property bag for forums/show, based on group interaction\n     * settings\n     *\n     * @param propertyBag the property bag for the \"show\" method of the {@link ForumController} action\n     * @param userSession the user session of the current logged user\n     */\n    public void filterForumListing(Result result, UserSession userSession) {\n        @SuppressWarnings(\"unchecked\")\n        Collection<UserSession> sessions = (Collection<UserSession>) result.included().get(\"onlineUsers\");\n\n        if (sessions == null) {\n            sessions = new ArrayList<UserSession>();\n        }\n\n        Set<UserSession> newSessions = new HashSet<UserSession>();\n        User currentUser = userSession.getUser();\n\n        for (Group group : currentUser.getGroups()) {\n            for (UserSession anotherUserSession : sessions) {\n                User user = anotherUserSession.getUser();\n\n                if (user != null && user.getGroups().contains(group)) {\n                    newSessions.add(anotherUserSession);\n                }\n            }\n        }\n\n        result.include(\"totalLoggedUsers\", newSessions.size());\n        result.include(\"onlineUsers\", newSessions);\n    }\n}<｜fim▁end｜>",
    "response": "import net.jforum.entities.UserSession;\nimport br.com.caelum.vraptor.Result;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.alibaba.dubbo.demo.user.facade;\n\nimport com.alibaba.dubbo.demo.user.User;\nimport com.alibaba.dubbo.rpc.protocol.rest.support.ContentType;\n\nimport javax.validation.constraints.Min;\nimport javax.ws.rs.*;\nimport javax.ws.rs.core.MediaType;\n\n@Path(\"u\")\n@Consumes({MediaType.APPLICATION_JSON, MediaType.TEXT_XML})\n@Produces({ContentType.APPLICATION_JSON_UTF_8, ContentType.TEXT_XML_UTF_8})\npublic interface AnotherUserRestService {\n<｜fim▁hole｜>    @Path(\"{id : \\\\d+}\")\n    User getUser(@PathParam(\"id\") @Min(1L) Long id);\n\n    @POST\n    @Path(\"register\")\n    RegistrationResult registerUser(User user);\n}<｜fim▁end｜>",
    "response": "\n    @GET\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.opengroup.osdu.core.common.multitenancy;\n\nimport org.opengroup.osdu.core.common.model.http.AppException;\nimport org.springframework.beans.factory.FactoryBean;\nimport org.springframework.beans.factory.annotation.Autowired;\n<｜fim▁hole｜>import org.opengroup.osdu.core.common.provider.interfaces.ITenantFactory;\nimport org.opengroup.osdu.core.common.model.tenant.TenantInfo;\nimport org.springframework.web.context.annotation.RequestScope;\n\n@Component\n@RequestScope\n@Primary\npublic class TenantInfoFactory implements FactoryBean<TenantInfo> {\n\n    @Autowired\n    private ITenantFactory tenantFactory;\n\n    @Autowired\n    private DpsHeaders headers;\n\n    @Override\n    public TenantInfo getObject() throws Exception {\n        String id = this.headers.getPartitionIdWithFallbackToAccountId();\n        TenantInfo tenantInfo = this.tenantFactory.getTenantInfo(id);\n        if (tenantInfo == null) {\n            throw AppException.createUnauthorized(String.format(\"could not retrieve tenant info for data partition id: %s\", id));\n        }\n        return tenantInfo;\n    }\n\n    @Override\n    public Class<?> getObjectType() {\n        return TenantInfo.class;\n    }\n\n    @Override\n    public boolean isSingleton() {\n        return false;\n    }\n}<｜fim▁end｜>",
    "response": "import org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\nimport org.opengroup.osdu.core.common.model.http.DpsHeaders;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.elasticsearch.common.util;\n\nimport org.apache.lucene.util.ArrayUtil;\nimport org.apache.lucene.util.RamUsageEstimator;\n\nimport java.util.Arrays;\n\nimport static org.elasticsearch.common.util.BigArrays.INT_PAGE_SIZE;\n\nfinal class BigIntArray extends AbstractBigArray implements IntArray {\n\n    private int[][] pages;\n\n    /** Constructor. */\n    public BigIntArray(long size, BigArrays bigArrays, boolean clearOnResize) {\n        super(INT_PAGE_SIZE, bigArrays, clearOnResize);\n        this.size = size;\n        pages = new int[numPages(size)][];\n        for (int i = 0; i < pages.length; ++i) {\n            pages[i] = newIntPage(i);\n        }\n<｜fim▁hole｜>        final int pageIndex = pageIndex(index);\n        final int indexInPage = indexInPage(index);\n        return pages[pageIndex][indexInPage];\n    }\n\n    @Override\n    public int set(long index, int value) {\n        final int pageIndex = pageIndex(index);\n        final int indexInPage = indexInPage(index);\n        final int[] page = pages[pageIndex];\n        final int ret = page[indexInPage];\n        page[indexInPage] = value;\n        return ret;\n    }\n\n    @Override\n    public int increment(long index, int inc) {\n        final int pageIndex = pageIndex(index);\n        final int indexInPage = indexInPage(index);\n        return pages[pageIndex][indexInPage] += inc;\n    }\n\n    @Override\n    public void fill(long fromIndex, long toIndex, int value) {\n        if (fromIndex > toIndex) {\n            throw new IllegalArgumentException();\n        }\n        final int fromPage = pageIndex(fromIndex);\n        final int toPage = pageIndex(toIndex - 1);\n        if (fromPage == toPage) {\n            Arrays.fill(pages[fromPage], indexInPage(fromIndex), indexInPage(toIndex - 1) + 1, value);\n        } else {\n            Arrays.fill(pages[fromPage], indexInPage(fromIndex), pages[fromPage].length, value);\n            for (int i = fromPage + 1; i < toPage; ++i) {\n                Arrays.fill(pages[i], value);\n            }\n            Arrays.fill(pages[toPage], 0, indexInPage(toIndex - 1) + 1, value);\n        }\n    }\n\n    @Override\n    protected int numBytesPerElement() {\n        return Integer.BYTES;\n    }\n\n    /** Change the size of this array. Content between indexes <code>0</code> and <code>min(size(), newSize)</code> will be preserved. */\n    @Override\n    public void resize(long newSize) {\n        final int numPages = numPages(newSize);\n        if (numPages > pages.length) {\n            pages = Arrays.copyOf(pages, ArrayUtil.oversize(numPages, RamUsageEstimator.NUM_BYTES_OBJECT_REF));\n        }\n        for (int i = numPages - 1; i >= 0 && pages[i] == null; --i) {\n            pages[i] = newIntPage(i);\n        }\n        for (int i = numPages; i < pages.length && pages[i] != null; ++i) {\n            pages[i] = null;\n            releasePage(i);\n        }\n        this.size = newSize;\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n\n    @Override\n    public int get(long index) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package edu.northwestern.bioinformatics.studycalendar.dataproviders.commands;\n\nimport edu.northwestern.bioinformatics.studycalendar.dataproviders.api.SiteProvider;\nimport edu.northwestern.bioinformatics.studycalendar.domain.Site;\nimport org.osgi.framework.BundleContext;\n\nimport java.io.PrintStream;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Map;\n\npublic class SiteCommand extends ProviderCommand<SiteProvider> {\n    public SiteCommand(BundleContext bundleContext) {\n        super(bundleContext);\n        addSubcommand(new GetSubcommand());\n        addSubcommand(new SearchSubcommand());\n    }\n\n    @Override\n    protected Class<SiteProvider> providerClass() {\n        return SiteProvider.class;\n    }\n\n    @Override\n    public String getName() {\n        return \"site\";\n    }\n\n    @Override\n    public String getUsage() {\n        return \"site (get|search) <arg>\";\n    }\n\n    @Override\n    public String getShortDescription() {\n        return \"execute site provider methods.\";\n    }\n\n    private void printSite(Site match, PrintStream out) {\n        out.println(String.format(\"- Site id=%s name=%s\",\n            match.getAssignedIdentifier(), match.getName()));\n    }\n\n    private class GetSubcommand implements Subcommand {\n        public String getName() {\n            return \"get\";\n        }\n\n        public void execute(String arg, PrintStream out, PrintStream err) {\n            for (Map.Entry<String, SiteProvider> provider : getProviders(err).entrySet()) {\n                out.println(provider.getKey());\n                Site match = provider.getValue().getSites(Arrays.asList(arg)).get(0);\n                if (match == null) {\n                    out.println(\"  No match\");\n                } else {\n                    printSite(match, out);\n                }\n            }\n        }\n    }\n\n    private class SearchSubcommand implements Subcommand {\n        public String getName() {\n            return \"search\";\n        }\n\n        public void execute(String arg, PrintStream out, PrintStream err) {\n            for (Map.Entry<String, SiteProvider> provider : getProviders(err).entrySet()) {\n                out.println(provider.getKey());\n                Collection<Site> matches = provider.getValue().search(arg);\n                if (matches == null || matches.isEmpty()) {\n                    out.println(\"  No matches\");\n                } else {\n                    for (Site site : matches) {\n                        printSite(site, out);\n                    }\n                }\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "            }\n        }\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.minecraftforge.gradle.util;\n\nimport com.google.common.collect.Lists;\nimport com.google.common.collect.Maps;\nimport net.minecraftforge.srg2source.util.io.InputSupplier;\nimport net.minecraftforge.srg2source.util.io.OutputSupplier;\nimport org.gradle.api.file.FileVisitDetails;\nimport org.gradle.api.file.FileVisitor;\nimport org.gradle.api.file.SourceDirectorySet;\n\nimport java.io.*;\nimport java.util.List;\nimport java.util.Map;\n\npublic class SourceDirSetSupplier implements InputSupplier, OutputSupplier\n{\n    Map<String, File> rootMap = Maps.newHashMap();\n\n<｜fim▁hole｜>            public void visitFile(FileVisitDetails fileVisitDetails) {\n                String absolute = fileVisitDetails.getFile().getAbsolutePath();\n                String path = fileVisitDetails.getPath();\n                File root = new File(absolute.substring(0, absolute.length() - path.length()));\n                rootMap.put(path, root);\n            }\n        });\n    }\n\n    @Override\n    public String getRoot(String resource)\n    {\n        return null;\n    }\n\n    @Override\n    public InputStream getInput(String relPath)\n    {\n        File f = getFile(relPath);\n        try\n        {\n            return f == null ? null : new FileInputStream(f);\n        }\n        catch (IOException e)\n        {\n            return null;\n        }\n    }\n\n    @Override\n    public List<String> gatherAll(String endFilter)\n    {\n        return Lists.newArrayList(rootMap.keySet());\n    }\n\n    @Override\n    public void close() throws IOException\n    {\n        // pointless\n    }\n\n    @Override\n    public OutputStream getOutput(String relPath)\n    {\n        File f = getFile(relPath);\n        try\n        {\n            return f == null ? null : new FileOutputStream(f);\n        }\n        catch (IOException e)\n        {\n            return null;\n        }\n    }\n\n    private File getFile(String path)\n    {\n        File root = rootMap.get(path);\n        if (root == null)\n            return null;\n        return new File(root, path);\n    }\n}<｜fim▁end｜>",
    "response": "    public SourceDirSetSupplier(SourceDirectorySet set)\n    {\n        set.visit(new FileVisitor() {\n            @Override public void visitDir(FileVisitDetails fileVisitDetails) { }\n\n            @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.api.ads.dfp.jaxws.v201403;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport javax.xml.bind.annotation.XmlAccessType;\nimport javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlRootElement;\nimport javax.xml.bind.annotation.XmlType;\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"\", propOrder = {\n    \"users\"\n})\n@XmlRootElement(name = \"createUsers\")\npublic class UserServiceInterfacecreateUsers {\n\n    protected List<User> users;\n\n    /**\n     * Gets the value of the users property.\n     * \n     * <p>\n     * This accessor method returns a reference to the live list,\n     * not a snapshot. Therefore any modification you make to the\n     * returned list will be present inside the JAXB object.\n<｜fim▁hole｜>     * For example, to add a new item, do as follows:\n     * <pre>\n     *    getUsers().add(newItem);\n     * </pre>\n     * \n     * \n     * <p>\n     * Objects of the following type(s) are allowed in the list\n     * {@link User }\n     * \n     * \n     */\n    public List<User> getUsers() {\n        if (users == null) {\n            users = new ArrayList<User>();\n        }\n        return this.users;\n    }\n\n}<｜fim▁end｜>",
    "response": "     * This is why there is not a <CODE>set</CODE> method for the users property.\n     * \n     * <p>\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.actionhandlers;\n\nimport org.drools.definition.type.FactType;\nimport org.drools.runtime.StatefulKnowledgeSession;\n\nimport ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.DeploymentSession;\nimport ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.Action;\nimport ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.actions.AddFeatureAction;\nimport ru.spbstu.icc.kspt.kuznetsov.fpf4mir.core.facts.features.Feature;\n\npublic class AddFeatureHandler_Local_Linux implements ActionHandler {\n\n    @Override\n<｜fim▁hole｜>            Feature feature = installFeature(a.getFeatureName(), a.getFeatureVersion(), ksession);\n            ksession.retract(ksession.getFactHandle(action));\n            ksession.insert(feature);\n        } else {\n            throw new IllegalStateException(\"Action type '\" + action.getClass().getSimpleName() + \"' is not supported\");\n        }\n    }\n\n    private Feature installFeature(String featureName, String featureVersion, StatefulKnowledgeSession ks) throws InstantiationException, IllegalAccessException {\n        if (featureName == null){\n            throw new IllegalStateException(\"Feature name can't be null\");\n        }\n\n        switch (featureName){\n        case \"maven\":\n            return installMaven(featureVersion, ks);\n        default:\n            throw new IllegalStateException(\"Feature '\" + featureName + \"' is not supported\");\n        }\n    }\n\n    private Feature installMaven(String featureVersion, StatefulKnowledgeSession ks) throws InstantiationException, IllegalAccessException {\n        if (\"3\".equals(featureVersion) || \"3.1\".equals(featureVersion) || \"3.1.1\".equals(featureVersion)){\n            return createMavenFeature(\"3.1.1\", \"/home/andrei2/OpenShift/apache-maven-3.1.1/bin/mvn\", ks);\n        } else if (\"3.0\".equals(featureVersion) || \"3.0.5\".equals(featureVersion)){\n            return createMavenFeature(\"3.0.5\", \"/home/andrei2/OpenShift/apache-maven-3.0.5/bin/mvn\", ks);\n        } else if (featureVersion == null){\n            return createMavenFeature(\"default\", \"mvn\", ks);\n        } else {\n            throw new IllegalStateException(\"Maven feature version '\" + featureVersion + \"' is not supported\");\n        }\n    }\n\n    static final Feature createMavenFeature(String version, String cmdName, StatefulKnowledgeSession ks) throws InstantiationException, IllegalAccessException{\n        FactType ftype = DeploymentSession.factTypeForClassName(\"defaultpkg.MavenFeature\", ks);\n        Object f = ftype.newInstance();\n        ftype.set(f, \"name\", \"maven\");\n        ftype.set(f, \"cmdName\", cmdName);\n        ftype.set(f, \"version\", version);\n        return (Feature)f;\n    }\n\n}<｜fim▁end｜>",
    "response": "    public void process(Action action, StatefulKnowledgeSession ksession)\n            throws Exception {\n        if (action instanceof AddFeatureAction){\n            AddFeatureAction a = (AddFeatureAction) action;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package eu.europa.esig.dss.xades.validation;\n\nimport static org.junit.Assert.assertNotNull;\n\nimport org.junit.Test;\n\nimport eu.europa.esig.dss.FileDocument;\nimport eu.europa.esig.dss.validation.CommonCertificateVerifier;\nimport eu.europa.esig.dss.validation.SignedDocumentValidator;\nimport eu.europa.esig.dss.validation.reports.Reports;\n\npublic class XPointerValidationTest {\n\n    @Test\n<｜fim▁hole｜>        // reports.print();\n        assertNotNull(reports);\n    }\n\n}<｜fim▁end｜>",
    "response": "    public void test() {\n        SignedDocumentValidator sdv = SignedDocumentValidator.fromDocument(new FileDocument(\"src/test/resources/validation/10963_signed.xml\"));\n        sdv.setCertificateVerifier(new CommonCertificateVerifier());\n        Reports reports = sdv.validateDocument();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.firejack.platform.core.model.registry.process;\n\nimport net.firejack.platform.core.model.registry.IAllowCreateAutoDescription;\nimport net.firejack.platform.core.model.registry.IAllowDrag;\nimport net.firejack.platform.core.model.registry.RegistryNodeModel;\nimport net.firejack.platform.core.model.registry.RegistryNodeType;\nimport net.firejack.platform.core.model.registry.authority.RoleModel;\nimport net.firejack.platform.core.model.registry.directory.GroupModel;\nimport org.hibernate.annotations.ForeignKey;\n\nimport javax.persistence.*;\nimport java.util.List;\n\n@Entity\n@DiscriminatorValue(\"ACR\")\npublic class ActorModel extends RegistryNodeModel implements IAllowDrag, IAllowCreateAutoDescription {\n\n    private static final long serialVersionUID = -5213959415858113339L;\n\n    private String distributionEmail;\n    private List<ActivityModel> activities;\n    private List<UserActorModel> userActors;\n    private List<RoleModel> roles;\n    private List<GroupModel> groups;\n\n    /**\n     * Gets the type\n     *\n     * @return registry node type\n     */\n    @Override\n    @Transient\n    public RegistryNodeType getType() {\n        return RegistryNodeType.ACTOR;\n    }\n\n    /**\n     * @return\n     */\n    @Column(length = 255)\n    public String getDistributionEmail() {\n        return distributionEmail;\n    }\n\n    /**\n     * @param distributionEmail\n     */\n    public void setDistributionEmail(String distributionEmail) {\n<｜fim▁hole｜>     *\n     * @return list of the activities for the actor\n     */\n    @OneToMany(mappedBy = \"actor\", fetch = FetchType.LAZY)\n    public List<ActivityModel> getActivities() {\n        return activities;\n    }\n\n    /**\n     * Sets the activities\n     *\n     * @param activities - list of the activities for the actor\n     */\n    public void setActivities(List<ActivityModel> activities) {\n        this.activities = activities;\n    }\n\n    /**\n     * Gets the user actors\n     *\n     * @return - list of the user actor entities\n     */\n    @OneToMany(mappedBy = \"actor\", fetch = FetchType.LAZY)\n    public List<UserActorModel> getUserActors() {\n        return userActors;\n    }\n\n    /**\n     * Sets the user actors\n     *\n     * @param userActors - list of the user actor entities\n     */\n    public void setUserActors(List<UserActorModel> userActors) {\n        this.userActors = userActors;\n    }\n\n    /**\n     * Gets the roles\n     *\n     * @return - list of the roles for the actor\n     */\n    @ManyToMany(targetEntity = RoleModel.class, fetch = FetchType.LAZY)\n    @JoinTable(\n            name = \"opf_actor_role\",\n            joinColumns = @JoinColumn(name = \"id_actor\", referencedColumnName = \"id\"),\n            inverseJoinColumns = @JoinColumn(name = \"id_role\", referencedColumnName = \"id\")\n    )\n    @ForeignKey(name = \"FK_ACTOR_ROLES\")\n    public List<RoleModel> getRoles() {\n        return roles;\n    }\n\n    /**\n     * Sets the roles\n     *\n     * @param roles - list of the roles for the actor\n     */\n    public void setRoles(List<RoleModel> roles) {\n        this.roles = roles;\n    }\n\n    /**\n     * Gets the groups\n     *\n     * @return - list of the groups for the actor\n     */\n    @ManyToMany(targetEntity = GroupModel.class, fetch = FetchType.LAZY)\n    @JoinTable(\n            name = \"opf_actor_group\",\n            joinColumns = @JoinColumn(name = \"id_actor\", referencedColumnName = \"id\"),\n            inverseJoinColumns = @JoinColumn(name = \"id_group\", referencedColumnName = \"id\")\n    )\n    @ForeignKey(name = \"FK_ACTOR_GROUP\")\n    public List<GroupModel> getGroups() {\n        return groups;\n    }\n\n    /**\n     * Sets the groups\n     *\n     * @param groups - list of the groups for the actor\n     */\n    public void setGroups(List<GroupModel> groups) {\n        this.groups = groups;\n    }\n\n}<｜fim▁end｜>",
    "response": "        this.distributionEmail = distributionEmail;\n    }\n\n    /**\n     * Gets the activities\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.kit.ui.swipebacklayout.lib.app;\n\nimport android.os.Bundle;\nimport android.preference.PreferenceActivity;\nimport android.view.View;\n\nimport com.kit.ui.swipebacklayout.lib.SwipeBackLayout;\n\npublic class SwipeBackPreferenceActivity extends PreferenceActivity implements SwipeBackActivityBase {\n    private SwipeBackActivityHelper mHelper;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        mHelper = new SwipeBackActivityHelper(this);\n        mHelper.onActivityCreate();\n    }\n\n    @Override\n    protected void onPostCreate(Bundle savedInstanceState) {\n        super.onPostCreate(savedInstanceState);\n        mHelper.onPostCreate();\n    }\n\n    @Override\n    public View findViewById(int id) {\n        View v = super.findViewById(id);\n        if (v == null && mHelper != null)\n            return mHelper.findViewById(id);\n        return v;\n    }\n\n    @Override\n    public SwipeBackLayout getSwipeBackLayout() {\n        return mHelper.getSwipeBackLayout();\n    }\n\n    @Override\n    public void setSwipeBackEnable(boolean enable) {\n        getSwipeBackLayout().setEnableGesture(enable);\n    }\n\n    @Override\n<｜fim▁hole｜>        getSwipeBackLayout().scrollToFinishActivity();\n    }\n}<｜fim▁end｜>",
    "response": "    public void scrollToFinishActivity() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.camunda.bpm.engine.runtime;\n\nimport org.camunda.bpm.engine.query.Query;\n\npublic interface IncidentQuery extends Query<IncidentQuery, Incident> {\n\n  /** Only select incidents which have the given id. **/\n  IncidentQuery incidentId(String incidentId);\n\n  /** Only select incidents which have the given incident type. **/\n  IncidentQuery incidentType(String incidentType);\n\n  /** Only select incidents which have the given incident message. **/\n  IncidentQuery incidentMessage(String incidentMessage);\n\n  /** Only select incidents which have the given process definition id. **/\n  IncidentQuery processDefinitionId(String processDefinitionId);\n\n  /** Only select incidents which have the given process instance id. **/\n  IncidentQuery processInstanceId(String processInstanceId);\n\n  /** Only select incidents with the given id. **/\n  IncidentQuery executionId(String executionId);\n\n  /** Only select incidents which contain an activity with the given id. **/\n  IncidentQuery activityId(String activityId);\n\n  /** Only select incidents which contain the id of the cause incident. **/\n  IncidentQuery causeIncidentId(String causeIncidentId);\n\n  /** Only select incidents which contain the id of the root cause incident. **/\n  IncidentQuery rootCauseIncidentId(String rootCauseIncidentId);\n\n  /** Only select incidents which contain the configuration. **/\n<｜fim▁hole｜>\n  /** Order by id (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByIncidentId();\n\n  /** Order by incidentTimestamp (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByIncidentTimestamp();\n\n  /** Order by incidentType (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByIncidentType();\n\n  /** Order by executionId (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByExecutionId();\n\n  /** Order by activityId (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByActivityId();\n\n  /** Order by processInstanceId (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByProcessInstanceId();\n\n  /** Order by processDefinitionId (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByProcessDefinitionId();\n\n  /** Order by causeIncidentId (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByCauseIncidentId();\n\n  /** Order by rootCauseIncidentId (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByRootCauseIncidentId();\n\n  /** Order by configuration (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByConfiguration();\n\n  /**\n   * Order by tenant id (needs to be followed by {@link #asc()} or {@link #desc()}).\n   * Note that the ordering of incidents without tenant id is database-specific.\n   */\n  IncidentQuery orderByTenantId();\n\n}<｜fim▁end｜>",
    "response": "  IncidentQuery configuration(String configuration);\n\n  /** Only select incidents that belong to one of the given tenant ids. */\n  IncidentQuery tenantIdIn(String... tenantIds);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.fruit.web.service.weixin.shop.impl;\n\n<｜fim▁hole｜>import org.springframework.stereotype.Service;\n\nimport com.fruit.web.mapper.weixin.shop.WeixinShopCategoryMapper;\nimport com.fruit.web.mapper.weixin.shop.WeixinShopGoodsMapper;\nimport com.fruit.web.service.weixin.shop.WeixinShopGoodsService;\n\n@Service(\"weixin_shopGoodsServiceImpl\")\npublic class WeixinShopGoodsServiceImpl implements WeixinShopGoodsService {\n\n    @Autowired\n    private WeixinShopGoodsMapper shopGoodsMapper;\n    @Autowired\n    private WeixinShopCategoryMapper shopCategoryMapper;\n\n    @Override\n    public List<Map<String, Object>> list() {\n        List<Map<String, Object>> data = shopCategoryMapper.list();\n        for(Map<String, Object> m : data) {\n            List<Map<String, Object>> goods = shopGoodsMapper.listByCategoryId(m.get(\"id\").toString());\n            m.put(\"goods\", goods);\n        }\n        return data;\n    }\n\n}<｜fim▁end｜>",
    "response": "import java.util.List;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.annotation.Autowired;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.jax.seer2tools.service.impl;\n\nimport javax.annotation.Resource;\n\nimport org.springframework.stereotype.Service;\n\nimport com.jax.seer2tools.dao.HideMoveInfoMapper;\nimport com.jax.seer2tools.entity.HideMoveInfo;\nimport com.jax.seer2tools.service.IHideMoveInfoService;\n<｜fim▁hole｜>    @Resource\n    HideMoveInfoMapper hmim;\n    @Override\n    public HideMoveInfo queryById(Integer id) {\n        return hmim.selectById(id);\n    }\n\n}<｜fim▁end｜>",
    "response": "@Service\npublic class HideMoveInfoService implements IHideMoveInfoService {\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.cirdles.squid.squidReports.squidReportColumns;\n\nimport com.thoughtworks.xstream.converters.Converter;\nimport com.thoughtworks.xstream.converters.MarshallingContext;\nimport com.thoughtworks.xstream.converters.UnmarshallingContext;\nimport com.thoughtworks.xstream.io.HierarchicalStreamReader;\nimport com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n\npublic class SquidReportColumnXMLConverter implements Converter {\n\n    @Override\n    public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n        SquidReportColumnInterface col = (SquidReportColumnInterface) source;\n\n        writer.startNode(\"expressionName\");\n        writer.setValue(col.getExpressionName());\n        writer.endNode();\n\n        writer.startNode(\"units\");\n        writer.setValue(col.getUnits());\n        writer.endNode();\n\n        writer.startNode(\"uncertaintyColumn\");\n        if (col.getUncertaintyColumn() != null) {\n            context.convertAnother(col.getUncertaintyColumn());\n        } else {\n            writer.setValue(\"\");\n        }\n        writer.endNode();\n\n        writer.startNode(\"amUncertaintyColumn\");\n        writer.setValue(Boolean.toString(col.isAmUncertaintyColumn()));\n        writer.endNode();\n\n        writer.startNode(\"uncertaintyDirective\");\n        writer.setValue(col.getUncertaintyDirective());\n        writer.endNode();\n\n        writer.startNode(\"countOfSignificantDigits\");\n        writer.setValue(Integer.toString(col.getCountOfSignificantDigits()));\n        writer.endNode();\n\n        writer.startNode(\"visible\");\n        writer.setValue(Boolean.toString(col.isVisible()));\n        writer.endNode();\n\n        writer.startNode(\"footnoteSpec\");\n        writer.setValue(col.getFootnoteSpec());\n        writer.endNode();\n    }\n\n    @Override\n    public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n        reader.moveDown();\n        SquidReportColumnInterface col = SquidReportColumn.createSquidReportColumn(reader.getValue());\n        reader.moveUp();\n\n        reader.moveDown();\n        col.setUnits(reader.getValue());\n        reader.moveUp();\n\n        reader.moveDown();\n        if ((reader.getValue().length() > 0) && (reader.getValue().compareToIgnoreCase(\"null\") != 0)) {\n            SquidReportColumnInterface uncertaintyColumn = SquidReportColumn.createSquidReportColumn(\"\");\n            uncertaintyColumn = (SquidReportColumnInterface) context.convertAnother(uncertaintyColumn, SquidReportColumn.class);\n            col.setUncertaintyColumn(uncertaintyColumn);\n        }\n        reader.moveUp();\n\n        reader.moveDown();\n        col.setAmUncertaintyColumn(Boolean.parseBoolean(reader.getValue()));\n        reader.moveUp();\n\n        reader.moveDown();\n        col.setUncertaintyDirective(reader.getValue());\n        reader.moveUp();\n\n        reader.moveDown();\n        col.setCountOfSignificantDigits(Integer.parseInt(reader.getValue()));\n        reader.moveUp();\n\n        reader.moveDown();\n        col.setVisible(Boolean.parseBoolean(reader.getValue()));\n<｜fim▁hole｜>\n        return col;\n    }\n\n    @Override\n    public boolean canConvert(Class type) {\n        return type.equals(SquidReportColumn.class);\n    }\n}<｜fim▁end｜>",
    "response": "        reader.moveUp();\n\n        reader.moveDown();\n        col.setFootnoteSpec(reader.getValue());\n        reader.moveUp();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.livescribe.framework.lsmail.notification;\n\npublic enum NotificationType {\n\n    AUTH_EXPIRED        (\"User's Evernote authorization has expired.\"),\n    NOTE_SIZE_EXCEEDED  (\"Evernote Note size has been exceeded.\");\n\n    private final String message;\n\n<｜fim▁hole｜>\n    /**\n     * <p></p>\n     * \n     * @return the message\n     */\n    public String getMessage() {\n        return message;\n    }\n}<｜fim▁end｜>",
    "response": "    NotificationType(String message) {\n        this.message = message;\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package androidx.appsearch.app;\n\nimport static com.google.common.truth.Truth.assertThat;\n\nimport android.os.Bundle;\nimport android.os.Parcel;\n\nimport org.junit.Test;\n\npublic class GenericDocumentTest {\n    @Test\n    public void testRecreateFromParcel() {\n        GenericDocument inDoc = new GenericDocument.Builder<>(\"namespace\", \"id1\", \"schema1\")\n                .setScore(42)\n                .setPropertyString(\"propString\", \"Hello\")\n                .setPropertyBytes(\"propBytes\", new byte[][]{{1, 2}})\n                .setPropertyDocument(\n                        \"propDocument\",\n                        new GenericDocument.Builder<>(\"namespace\", \"id2\", \"schema2\")\n                                .setPropertyString(\"propString\", \"Goodbye\")\n                                .setPropertyBytes(\"propBytes\", new byte[][]{{3, 4}})\n                                .build())\n                .build();\n\n        // Serialize the document\n        Parcel inParcel = Parcel.obtain();\n        inParcel.writeBundle(inDoc.getBundle());\n        byte[] data = inParcel.marshall();\n        inParcel.recycle();\n\n        // Deserialize the document\n<｜fim▁hole｜>        outParcel.setDataPosition(0);\n        Bundle outBundle = outParcel.readBundle();\n        outParcel.recycle();\n\n        // Compare results\n        GenericDocument outDoc = new GenericDocument(outBundle);\n        assertThat(inDoc).isEqualTo(outDoc);\n        assertThat(outDoc.getPropertyString(\"propString\")).isEqualTo(\"Hello\");\n        assertThat(outDoc.getPropertyBytesArray(\"propBytes\")).isEqualTo(new byte[][]{{1, 2}});\n        assertThat(outDoc.getPropertyDocument(\"propDocument\").getPropertyString(\"propString\"))\n                .isEqualTo(\"Goodbye\");\n        assertThat(outDoc.getPropertyDocument(\"propDocument\").getPropertyBytesArray(\"propBytes\"))\n                .isEqualTo(new byte[][]{{3, 4}});\n    }\n}<｜fim▁end｜>",
    "response": "        Parcel outParcel = Parcel.obtain();\n        outParcel.unmarshall(data, 0, data.length);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.sky.worker.config;\n\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Component;\n\nimport javax.validation.constraints.NotNull;\n\n@Component\n@ConfigurationProperties(prefix = \"sky.worker\")\npublic class SkyWorkerConfigProperties {\n<｜fim▁hole｜>  public String getServerConnection() {\n    return serverConnection;\n  }\n\n  public void setServerConnection(String serverConnection) {\n    this.serverConnection = serverConnection;\n  }\n}<｜fim▁end｜>",
    "response": "  @NotNull\n  private String serverConnection;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package wikokit.base.wikt.multi.ru.name;\n\nimport wikokit.base.wikt.constant.Relation;\nimport wikokit.base.wikt.constant.RelationLocal;\n\npublic class RelationRu extends RelationLocal {\n\n<｜fim▁hole｜>    }\n\n    public static final RelationLocal   synonymy,\n                                        antonymy,\n                                        relational_antonym,\n                                        hypernymy,\n                                        hyponymy,\n                                        holonymy,\n                                        meronymy,\n                                        troponymy,\n                                        coordinate_term,\n                                        otherwise_related;\n\n    static {\n    // public static final RelationLocal unknown = new RelationRu(\"неизвестные\", \"неизв.\", Relation.uknown); /** The relation is unknown :( */\n\n        synonymy = new RelationRu(\"синонимы\", \"син.\", Relation.synonymy);\n        antonymy = new RelationRu(\"антонимы\", \"ант.\", Relation.antonymy);\n        relational_antonym = new RelationRu(\"конверсивы\", \"конв.\", Relation.relational_antonym);\n\n        hypernymy = new RelationRu(\"гиперонимы\", \"гиперн.\", Relation.hypernymy);\n        hyponymy = new RelationRu(\"гипонимы\", \"гипон.\", Relation.hyponymy);\n\n        holonymy = new RelationRu(\"холонимы\", \"холон.\", Relation.holonymy);    \n        meronymy = new RelationRu(\"меронимы\", \"мерон.\", Relation.meronymy);\n\n        troponymy = new RelationRu(\"тропонимы\", \"тропон.\", Relation.troponymy);\n        coordinate_term = new RelationRu(\"согипонимы\", \"согип.\", Relation.coordinate_term);\n\n        otherwise_related = new RelationRu(\"смотри также\", \"см.\", Relation.otherwise_related);\n    }\n}<｜fim▁end｜>",
    "response": "    private RelationRu(String _name, String _short_name, Relation _rel) {\n        super(_name, _short_name, _rel);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.olia.processflyer.shared.bpmn.instance.impl;\n\nimport java.util.Date;\nimport java.util.Properties;\n\nimport com.google.gwt.user.client.rpc.IsSerializable;\nimport com.olia.processflyer.shared.bpmn.instance.InstanceStatus;\nimport com.olia.processflyer.shared.bpmn.instance.InstanceStatusType;\n\npublic class InstanceStatusImpl implements InstanceStatus, IsSerializable\n<｜fim▁hole｜>\n    private String message;\n\n    private InstanceStatusType status;\n\n    private Date statusDate;\n\n    InstanceStatusImpl(){}\n    public InstanceStatusImpl(String message, InstanceStatusType status, Date statusDate)\n    {\n        super();\n        this.message = message;\n        this.status = status;\n        this.statusDate = statusDate;\n    }\n\n    public static InstanceStatusImpl notExecutedState()\n    {\n        return new InstanceStatusImpl(\"this instance was not started yet\", InstanceStatusType.None, new Date());\n    }\n\n    @Override\n    public Date getStatusDate()\n    {\n        return statusDate;\n    }\n\n    @Override\n    public InstanceStatusType getStatus()\n    {\n        return status;\n    }\n\n    @Override\n    public String getMessage()\n    {\n        return message;\n    }\n\n}<｜fim▁end｜>",
    "response": "{\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.wdeanmedical.ehr.entity;\n\n<｜fim▁hole｜>\nimport javax.persistence.Column;\nimport javax.persistence.Entity;\nimport javax.persistence.Table;\n\n@Entity\n@Table(name = \"patient_letter_reason\")\npublic class PatientLetterReason extends BaseEntity implements Serializable {\n  private static final long serialVersionUID = 132835305124405096L;\n  private String name;\n\n  public PatientLetterReason() {\n  }\n\n  @Column(name = \"name\")\n  public String getName() {\n    return name;\n  }\n\n  public void setName(String name) {\n    this.name = name;\n  }\n\n  @Override\n  public int hashCode() {\n    final int prime = 31;\n    int result = super.hashCode();\n    result = prime * result + ((name == null) ? 0 : name.hashCode());\n    return result;\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    if (this == obj)\n      return true;\n    if (!super.equals(obj))\n      {return false;}\n    if (getClass() != obj.getClass())\n      {return false;}\n    PatientLetterReason other = (PatientLetterReason) obj;\n    if (name == null) {\n      if (other.name != null)\n        {return false;}\n    } else if (!name.equals(other.name))\n      {return false;}\n    return true;\n  }\n\n  @Override\n  public String toString() {\n    return \"PatientLetterReason [name=\" + name + \"]\";\n  }\n\n}<｜fim▁end｜>",
    "response": "import java.io.Serializable;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.lumify.mapping.xform;\n\nimport java.math.BigDecimal;\nimport java.util.Arrays;\nimport org.junit.runners.Parameterized.Parameters;\n\npublic class BigDecimalValueTransformerTest extends AbstractValueTransformerTest<BigDecimal> {\n    @Parameters(name=\"{index}: {0}->{1}\")\n    public static Iterable<Object[]> getTestValues() {\n        return Arrays.asList(new Object[][] {\n            { null, null },\n            { \"\", null },\n            { \"\\n \\t\\t \\n\", null },\n<｜fim▁hole｜>            { \"-3.14\", new BigDecimal(\"-3.14\") },\n            { \"   \\t  23.0\\n\", new BigDecimal(\"23.0\") },\n            { \"23/b\", null },\n            { \"10/2\", null },\n            { \"not a number\", null }\n        });\n    }\n\n    public BigDecimalValueTransformerTest(final String testVal, final BigDecimal expected) {\n        super(new BigDecimalValueTransformer(), testVal, expected);\n    }\n}<｜fim▁end｜>",
    "response": "            { \"1\", BigDecimal.ONE },\n            { \"27.73692\", new BigDecimal(\"27.73692\") },\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jboss.as.cli;\n\nimport static org.wildfly.common.Assert.checkNotNullParam;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\npublic class CommandRegistry {\n\n    private final Map<String, CommandHandler> handlers = new HashMap<String, CommandHandler>();\n    private final Set<String> tabCompletionCommands = new HashSet<String>();\n\n    public void registerHandler(CommandHandler handler, String... names) throws CommandLineException {\n        registerHandler(handler, true, names);\n    }\n\n    public void registerHandler(CommandHandler handler, boolean tabComplete, String... names) throws RegisterHandlerException {\n        String tabCompleteName = null;\n        RegisterHandlerException error = null;\n        for(String name : names) {\n            if(handlers.containsKey(name)) {\n                if(error == null) {\n                    error = new RegisterHandlerException(name);\n                } else {\n                    error.addCommand(name);\n                }\n            } else {\n                if(tabCompleteName == null) {\n                    tabCompleteName = name;\n                }\n                handlers.put(name, handler);\n            }\n        }\n\n        if(tabComplete && tabCompleteName != null) {\n            tabCompletionCommands.add(tabCompleteName);\n        }\n\n        if(error != null) {\n            throw error;\n        }\n    }\n\n    public Set<String> getTabCompletionCommands() {\n        return tabCompletionCommands;\n    }\n\n    public CommandHandler getCommandHandler(String command) {\n        return handlers.get(command);\n    }\n\n    public CommandHandler remove(String cmdName) {\n        checkNotNullParam(\"cmdName\", cmdName);\n        CommandHandler handler = handlers.remove(cmdName);\n        if(handler != null) {\n            tabCompletionCommands.remove(cmdName);\n        }\n        return handler;\n    }\n\n    public static class RegisterHandlerException extends CommandLineException {\n\n        private static final long serialVersionUID = 1L;\n\n        private List<String> names;\n\n        public RegisterHandlerException(String commandName) {\n            super(\"\");\n            names = Collections.singletonList(commandName);\n        }\n<｜fim▁hole｜>            }\n            names.add(name);\n        }\n\n        public List<String> getNotAddedNames() {\n            return Collections.unmodifiableList(names);\n        }\n\n        @Override\n        public String getMessage() {\n            final StringBuilder buf = new StringBuilder(\"The following command names could not be registered since they conflict with the already registered ones: \");\n            buf.append(names.get(0));\n            for(int i = 1; i < names.size(); ++i) {\n                buf.append(\", \").append(names.get(i));\n            }\n            return buf.toString();\n        }\n    }\n}<｜fim▁end｜>",
    "response": "\n        public void addCommand(String name) {\n            if(names.size() == 1) {\n                names = new ArrayList<String>(names);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amazonaws.services.nimblestudio.model;\n\nimport java.io.Serializable;\nimport javax.annotation.Generated;\n\n@Generated(\"com.amazonaws:aws-java-sdk-code-generator\")\npublic class ListLaunchProfileMembersResult extends com.amazonaws.AmazonWebServiceResult<com.amazonaws.ResponseMetadata> implements Serializable, Cloneable {\n\n    /**\n     * <p>\n     * A list of members.\n     * </p>\n     */\n    private java.util.List<LaunchProfileMembership> members;\n    /**\n     * <p>\n     * The token for the next set of results, or null if there are no more results.\n     * </p>\n     */\n    private String nextToken;\n\n    /**\n     * <p>\n     * A list of members.\n     * </p>\n     * \n     * @return A list of members.\n     */\n\n    public java.util.List<LaunchProfileMembership> getMembers() {\n        return members;\n    }\n\n    /**\n     * <p>\n     * A list of members.\n     * </p>\n     * \n     * @param members\n     *        A list of members.\n     */\n\n    public void setMembers(java.util.Collection<LaunchProfileMembership> members) {\n        if (members == null) {\n            this.members = null;\n            return;\n        }\n\n        this.members = new java.util.ArrayList<LaunchProfileMembership>(members);\n    }\n\n    /**\n     * <p>\n     * A list of members.\n     * </p>\n     * <p>\n     * <b>NOTE:</b> This method appends the values to the existing list (if any). Use\n     * {@link #setMembers(java.util.Collection)} or {@link #withMembers(java.util.Collection)} if you want to override\n     * the existing values.\n     * </p>\n     * \n     * @param members\n     *        A list of members.\n     * @return Returns a reference to this object so that method calls can be chained together.\n     */\n\n    public ListLaunchProfileMembersResult withMembers(LaunchProfileMembership... members) {\n        if (this.members == null) {\n            setMembers(new java.util.ArrayList<LaunchProfileMembership>(members.length));\n        }\n        for (LaunchProfileMembership ele : members) {\n            this.members.add(ele);\n        }\n        return this;\n    }\n\n    /**\n     * <p>\n     * A list of members.\n     * </p>\n     * \n     * @param members\n     *        A list of members.\n     * @return Returns a reference to this object so that method calls can be chained together.\n     */\n\n    public ListLaunchProfileMembersResult withMembers(java.util.Collection<LaunchProfileMembership> members) {\n        setMembers(members);\n        return this;\n    }\n\n    /**\n     * <p>\n     * The token for the next set of results, or null if there are no more results.\n     * </p>\n     * \n     * @param nextToken\n     *        The token for the next set of results, or null if there are no more results.\n     */\n\n    public void setNextToken(String nextToken) {\n        this.nextToken = nextToken;\n    }\n\n    /**\n     * <p>\n     * The token for the next set of results, or null if there are no more results.\n     * </p>\n     * \n     * @return The token for the next set of results, or null if there are no more results.\n     */\n\n    public String getNextToken() {\n        return this.nextToken;\n    }\n\n    /**\n     * <p>\n     * The token for the next set of results, or null if there are no more results.\n     * </p>\n     * \n     * @param nextToken\n     *        The token for the next set of results, or null if there are no more results.\n     * @return Returns a reference to this object so that method calls can be chained together.\n     */\n\n    public ListLaunchProfileMembersResult withNextToken(String nextToken) {\n        setNextToken(nextToken);\n        return this;\n    }\n\n    /**\n     * Returns a string representation of this object. This is useful for testing and debugging. Sensitive data will be\n     * redacted from this string using a placeholder value.\n     *\n     * @return A string representation of this object.\n     *\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (getMembers() != null)\n            sb.append(\"Members: \").append(getMembers()).append(\",\");\n        if (getNextToken() != null)\n            sb.append(\"NextToken: \").append(getNextToken());\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n<｜fim▁hole｜>        if (obj == null)\n            return false;\n\n        if (obj instanceof ListLaunchProfileMembersResult == false)\n            return false;\n        ListLaunchProfileMembersResult other = (ListLaunchProfileMembersResult) obj;\n        if (other.getMembers() == null ^ this.getMembers() == null)\n            return false;\n        if (other.getMembers() != null && other.getMembers().equals(this.getMembers()) == false)\n            return false;\n        if (other.getNextToken() == null ^ this.getNextToken() == null)\n            return false;\n        if (other.getNextToken() != null && other.getNextToken().equals(this.getNextToken()) == false)\n            return false;\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int hashCode = 1;\n\n        hashCode = prime * hashCode + ((getMembers() == null) ? 0 : getMembers().hashCode());\n        hashCode = prime * hashCode + ((getNextToken() == null) ? 0 : getNextToken().hashCode());\n        return hashCode;\n    }\n\n    @Override\n    public ListLaunchProfileMembersResult clone() {\n        try {\n            return (ListLaunchProfileMembersResult) super.clone();\n        } catch (CloneNotSupportedException e) {\n            throw new IllegalStateException(\"Got a CloneNotSupportedException from Object.clone() \" + \"even though we're Cloneable!\", e);\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "            return true;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amazonaws.services.waf.model;\n\n<｜fim▁hole｜>import javax.annotation.Generated;\n\nimport com.amazonaws.AmazonWebServiceRequest;\n\n@Generated(\"com.amazonaws:aws-java-sdk-code-generator\")\npublic class GetXssMatchSetRequest extends com.amazonaws.AmazonWebServiceRequest implements Serializable, Cloneable {\n\n    /**\n     * <p>\n     * The <code>XssMatchSetId</code> of the <a>XssMatchSet</a> that you want to get. <code>XssMatchSetId</code> is\n     * returned by <a>CreateXssMatchSet</a> and by <a>ListXssMatchSets</a>.\n     * </p>\n     */\n    private String xssMatchSetId;\n\n    /**\n     * <p>\n     * The <code>XssMatchSetId</code> of the <a>XssMatchSet</a> that you want to get. <code>XssMatchSetId</code> is\n     * returned by <a>CreateXssMatchSet</a> and by <a>ListXssMatchSets</a>.\n     * </p>\n     * \n     * @param xssMatchSetId\n     *        The <code>XssMatchSetId</code> of the <a>XssMatchSet</a> that you want to get. <code>XssMatchSetId</code>\n     *        is returned by <a>CreateXssMatchSet</a> and by <a>ListXssMatchSets</a>.\n     */\n\n    public void setXssMatchSetId(String xssMatchSetId) {\n        this.xssMatchSetId = xssMatchSetId;\n    }\n\n    /**\n     * <p>\n     * The <code>XssMatchSetId</code> of the <a>XssMatchSet</a> that you want to get. <code>XssMatchSetId</code> is\n     * returned by <a>CreateXssMatchSet</a> and by <a>ListXssMatchSets</a>.\n     * </p>\n     * \n     * @return The <code>XssMatchSetId</code> of the <a>XssMatchSet</a> that you want to get. <code>XssMatchSetId</code>\n     *         is returned by <a>CreateXssMatchSet</a> and by <a>ListXssMatchSets</a>.\n     */\n\n    public String getXssMatchSetId() {\n        return this.xssMatchSetId;\n    }\n\n    /**\n     * <p>\n     * The <code>XssMatchSetId</code> of the <a>XssMatchSet</a> that you want to get. <code>XssMatchSetId</code> is\n     * returned by <a>CreateXssMatchSet</a> and by <a>ListXssMatchSets</a>.\n     * </p>\n     * \n     * @param xssMatchSetId\n     *        The <code>XssMatchSetId</code> of the <a>XssMatchSet</a> that you want to get. <code>XssMatchSetId</code>\n     *        is returned by <a>CreateXssMatchSet</a> and by <a>ListXssMatchSets</a>.\n     * @return Returns a reference to this object so that method calls can be chained together.\n     */\n\n    public GetXssMatchSetRequest withXssMatchSetId(String xssMatchSetId) {\n        setXssMatchSetId(xssMatchSetId);\n        return this;\n    }\n\n    /**\n     * Returns a string representation of this object; useful for testing and debugging.\n     *\n     * @return A string representation of this object.\n     *\n     * @see java.lang.Object#toString()\n     */\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (getXssMatchSetId() != null)\n            sb.append(\"XssMatchSetId: \").append(getXssMatchSetId());\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n\n        if (obj instanceof GetXssMatchSetRequest == false)\n            return false;\n        GetXssMatchSetRequest other = (GetXssMatchSetRequest) obj;\n        if (other.getXssMatchSetId() == null ^ this.getXssMatchSetId() == null)\n            return false;\n        if (other.getXssMatchSetId() != null && other.getXssMatchSetId().equals(this.getXssMatchSetId()) == false)\n            return false;\n        return true;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int hashCode = 1;\n\n        hashCode = prime * hashCode + ((getXssMatchSetId() == null) ? 0 : getXssMatchSetId().hashCode());\n        return hashCode;\n    }\n\n    @Override\n    public GetXssMatchSetRequest clone() {\n        return (GetXssMatchSetRequest) super.clone();\n    }\n\n}<｜fim▁end｜>",
    "response": "import java.io.Serializable;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.muzima.api.model.resolver;\n\nimport com.muzima.api.model.algorithm.SetupConfigurationAlgorithm;\nimport com.muzima.search.api.util.StringUtil;\n\n<｜fim▁hole｜>    private static final String REPRESENTATION\n            = \"?v=custom:\"+ SetupConfigurationAlgorithm.SETUP_CONFIGURATION_STANDARD_REPRESENTATION;\n\n    /**\n     * Return the full REST resource based on the parameters passed to the method.\n     *\n     * @param resourceParams the parameters of the resource to resolved.\n     * @return full uri to the REST resource.\n     */\n    public String resolve(final Map<String, String> resourceParams) throws IOException {\n        String uuid = resourceParams.get(\"uuid\");\n        if (StringUtil.isEmpty(uuid)) {\n            throw new IOException(\"Resolver unable to find required parameter uuid!\");\n        }\n        return getConfiguration().getServer() + \"/ws/rest/v1/muzima/config/\" + uuid + REPRESENTATION;\n    }\n}<｜fim▁end｜>",
    "response": "import java.io.IOException;\nimport java.util.Map;\n\npublic class UuidSetupConfigurationResolver extends BaseOpenmrsResolver {\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>public class Triangle extends Shape {\n\n    public Triangle(double dimension1, double dimension2) {\n        //Stores the base in firstDimension, and height in secondDimension\n        super(dimension1, dimension2, 0);\n        //Stores the area in FirstStatistic\n        super.setFirstStatistic((dimension1 * dimension2) / 2);\n    }\n\n    public double getBase() {\n        return super.getFirstDimension();\n    }\n\n    public double getHeight() {\n        return super.getSecondDimension();\n    }\n\n    public double getArea() {\n<｜fim▁hole｜>\n    public void setBase(double dimension) {\n        super.setFirstDimension(dimension);\n        super.setFirstStatistic((dimension * super.getSecondDimension()) / 2);\n    }\n\n    public void setHeight(double dimension) {\n        super.setSecondDimension(dimension);\n        super.setFirstStatistic((dimension * super.getFirstDimension()) / 2);\n    }\n}<｜fim▁end｜>",
    "response": "        return super.getFirstDimension();\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package micdoodle8.mods.galacticraft.core.client.gui.container;\n\nimport cpw.mods.fml.relauncher.Side;\nimport cpw.mods.fml.relauncher.SideOnly;\nimport micdoodle8.mods.galacticraft.core.GalacticraftCore;\nimport micdoodle8.mods.galacticraft.core.client.gui.element.GuiElementInfoRegion;\nimport micdoodle8.mods.galacticraft.core.entities.EntityBuggy;\nimport micdoodle8.mods.galacticraft.core.inventory.ContainerBuggy;\nimport micdoodle8.mods.galacticraft.core.util.EnumColor;\nimport micdoodle8.mods.galacticraft.core.util.GCCoreUtil;\nimport net.minecraft.inventory.IInventory;\nimport net.minecraft.util.ResourceLocation;\nimport org.lwjgl.opengl.GL11;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n@SideOnly(Side.CLIENT)\npublic class GuiBuggy extends GuiContainerGC\n{\n    private static ResourceLocation[] sealerTexture = new ResourceLocation[4];\n\n    static\n    {\n        for (int i = 0; i < 4; i++)\n        {\n            GuiBuggy.sealerTexture[i] = new ResourceLocation(GalacticraftCore.ASSET_PREFIX, \"textures/gui/buggy_\" + i * 18 + \".png\");\n        }\n    }\n\n    private final IInventory upperChestInventory;\n    private final int type;\n\n    public GuiBuggy(IInventory par1IInventory, IInventory par2IInventory, int type)\n    {\n        super(new ContainerBuggy(par1IInventory, par2IInventory, type));\n        this.upperChestInventory = par1IInventory;\n        this.allowUserInput = false;\n        this.type = type;\n        this.ySize = 145 + this.type * 36;\n    }\n\n    @Override\n    public void initGui()\n<｜fim▁hole｜>        super.initGui();\n        List<String> oxygenDesc = new ArrayList<String>();\n        oxygenDesc.add(GCCoreUtil.translate(\"gui.fuelTank.desc.0\"));\n        oxygenDesc.add(GCCoreUtil.translate(\"gui.fuelTank.desc.1\"));\n        this.infoRegions.add(new GuiElementInfoRegion((this.width - this.xSize) / 2 + 71, (this.height - this.ySize) / 2 + 6, 36, 40, oxygenDesc, this.width, this.height, this));\n    }\n\n    @Override\n    protected void drawGuiContainerForegroundLayer(int par1, int par2)\n    {\n        this.fontRendererObj.drawString(GCCoreUtil.translate(\"gui.message.fuel.name\"), 8, 2 + 3, 4210752);\n\n        this.fontRendererObj.drawString(GCCoreUtil.translate(this.upperChestInventory.getInventoryName()), 8, this.type == 0 ? 50 : 39, 4210752);\n\n        if (this.mc.thePlayer != null && this.mc.thePlayer.ridingEntity != null && this.mc.thePlayer.ridingEntity instanceof EntityBuggy)\n        {\n            this.fontRendererObj.drawString(GCCoreUtil.translate(\"gui.message.fuel.name\") + \":\", 125, 15 + 3, 4210752);\n            final double percentage = ((EntityBuggy) this.mc.thePlayer.ridingEntity).getScaledFuelLevel(100);\n            final String color = percentage > 80.0D ? EnumColor.BRIGHT_GREEN.getCode() : percentage > 40.0D ? EnumColor.ORANGE.getCode() : EnumColor.RED.getCode();\n            final String str = percentage + \"% \" + GCCoreUtil.translate(\"gui.message.full.name\");\n            this.fontRendererObj.drawString(color + str, 117 - str.length() / 2, 20 + 8, 4210752);\n        }\n    }\n\n    @Override\n    protected void drawGuiContainerBackgroundLayer(float par1, int par2, int par3)\n    {\n        this.mc.getTextureManager().bindTexture(GuiBuggy.sealerTexture[this.type]);\n        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);\n\n        final int var5 = (this.width - this.xSize) / 2;\n        final int var6 = (this.height - this.ySize) / 2;\n        this.drawTexturedModalRect(var5, var6, 0, 0, 176, this.ySize);\n\n        if (this.mc.thePlayer != null && this.mc.thePlayer.ridingEntity != null && this.mc.thePlayer.ridingEntity instanceof EntityBuggy)\n        {\n            final int fuelLevel = ((EntityBuggy) this.mc.thePlayer.ridingEntity).getScaledFuelLevel(38);\n\n            this.drawTexturedModalRect((this.width - this.xSize) / 2 + 72, (this.height - this.ySize) / 2 + 45 - fuelLevel, 176, 38 - fuelLevel, 42, fuelLevel);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "    {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.wisdom.template.thymeleaf.dialect;\n\nimport ognl.ClassResolver;\nimport ognl.Ognl;\nimport ognl.OgnlContext;\nimport ognl.OgnlException;\nimport org.osgi.framework.Bundle;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.thymeleaf.Configuration;\nimport org.thymeleaf.cache.ICache;\nimport org.thymeleaf.cache.ICacheManager;\nimport org.thymeleaf.context.IProcessingContext;\nimport org.thymeleaf.exceptions.TemplateProcessingException;\nimport org.thymeleaf.standard.expression.*;\nimport org.wisdom.api.http.Context;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ExtendedOGNLExpressionEvaluator implements IStandardVariableExpressionEvaluator {\n\n    public static final ExtendedOGNLExpressionEvaluator INSTANCE = new ExtendedOGNLExpressionEvaluator();\n    private static final Logger LOGGER = LoggerFactory.getLogger(OgnlVariableExpressionEvaluator.class);\n    private static final String OGNL_CACHE_PREFIX = \"{ognl}\";\n\n    public static final String BUNDLE_VAR_KEY = \"__bundle__\";\n\n    protected Map<String, Object> computeAdditionalContextVariables(IProcessingContext processingContext) {\n        Map<String, Object> var = new HashMap<>();\n        var.put(Routes.OBJECT_NAME, processingContext.getContext().getVariables().get(Routes.ROUTES_VAR));\n        final Context context = Context.CONTEXT.get();\n        if (context != null) {\n            var.put(\"http\", context);\n            var.put(\"session\", context.session());\n            var.put(\"flash\", context.flash());\n            var.put(\"request\", context.request());\n            var.put(\"parameters\", context.parameters());\n        }\n        return var;\n    }\n<｜fim▁hole｜>    public final Object evaluate(final Configuration configuration,\n                                 final IProcessingContext processingContext, final String expression,\n                                 final StandardExpressionExecutionContext expContext, final boolean useSelectionAsRoot) {\n\n        try {\n\n            if (LOGGER.isTraceEnabled()) {\n                LOGGER.trace(\"OGNL expression: evaluating expression \\\"{}\\\" on target\", expression);\n            }\n\n            Object expressionTree = null;\n            ICache<String, Object> cache = null;\n\n            if (configuration != null) {\n                final ICacheManager cacheManager = configuration.getCacheManager();\n                if (cacheManager != null) {\n                    cache = cacheManager.getExpressionCache();\n                    if (cache != null) {\n                        expressionTree = cache.get(OGNL_CACHE_PREFIX + expression);\n                    }\n                }\n            }\n\n            if (expressionTree == null) {\n                expressionTree = ognl.Ognl.parseExpression(expression);\n                if (cache != null && null != expressionTree) {\n                    cache.put(OGNL_CACHE_PREFIX + expression, expressionTree);\n                }\n            }\n\n            final OgnlContext ctxt = new OgnlContext();\n            ctxt.putAll(processingContext.getExpressionObjects());\n\n            final Map<String, Object> additionalContextVariables = computeAdditionalContextVariables(processingContext);\n            if (additionalContextVariables != null) {\n                ctxt.putAll(additionalContextVariables);\n            }\n\n            final Object evaluationRoot =\n                    (useSelectionAsRoot ?\n                            processingContext.getExpressionSelectionEvaluationRoot() :\n                            processingContext.getExpressionEvaluationRoot());\n\n            // If we have a bundle set, customize the class loading.\n            if ((ctxt.get(\"vars\") instanceof Map) && ((Map) ctxt.get(\"vars\")).containsKey(BUNDLE_VAR_KEY)) {\n                final Bundle bundle = (Bundle) ((Map) ctxt.get(\"vars\")).get(BUNDLE_VAR_KEY);\n                Ognl.setClassResolver(ctxt, new ClassResolver() {\n                    /**\n                     * Loads a class. This method is called when the processing of a template requires a class. The\n                     * class loading defines in this method uses the {@link org.osgi.framework.Bundle} object passed\n                     * in the context. If the class cannot be found, it falls back to the system bundle.\n                     * @param className the class name\n                     * @param context the context.\n                     * @return the class object\n                     * @throws ClassNotFoundException if the class cannot be found\n                     */\n                    @Override\n                    public Class classForName(String className, Map context) throws ClassNotFoundException {\n                        try {\n                            return bundle.loadClass(className);\n                        } catch (ClassNotFoundException e) { //NOSONAR\n                            // Ignore it.\n                        }\n\n                        // Try with the system bundle, if the bundle is not the system bundle\n                        if (bundle.getBundleId() != 0) {\n                            try {\n                                return bundle.getBundleContext().getBundle(0).loadClass(className);\n                            } catch (ClassNotFoundException e) { //NOSONAR\n                                // Ignore it.\n                            }\n                        }\n                        // Nothing we can do.\n                        LOGGER.warn(\"A template tried to load the '\" + className + \"' class, \" +\n                                \"but this class is not available. Try to import it in the bundle containing the \" +\n                                \"template.\");\n\n                        throw new ClassNotFoundException(className);\n                    }\n                });\n            }\n\n            final Object result = Ognl.getValue(expressionTree, ctxt, evaluationRoot);\n\n            if (!expContext.getPerformTypeConversion()) {\n                return result;\n            }\n\n            final IStandardConversionService conversionService =\n                    StandardExpressions.getConversionService(configuration);\n\n            return conversionService.convert(configuration, processingContext, result, String.class);\n\n        } catch (final OgnlException e) {\n            throw new TemplateProcessingException(\n                    \"Exception evaluating OGNL expression: \\\"\" + expression + \"\\\"\", e);\n        }\n\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    @Override\n    public String toString() {\n        return \"OGNL extended by Wisdom\";\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package jadx.core.dex.instructions;\n\nimport jadx.core.dex.instructions.args.ArgType;\nimport jadx.core.dex.instructions.args.InsnArg;\nimport jadx.core.dex.instructions.args.LiteralArg;\nimport jadx.core.dex.instructions.args.PrimitiveType;\nimport jadx.core.dex.nodes.DexNode;\nimport jadx.core.dex.nodes.InsnNode;\nimport jadx.core.utils.exceptions.JadxRuntimeException;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.android.dx.io.instructions.FillArrayDataPayloadDecodedInstruction;\n\npublic final class FillArrayNode extends InsnNode {\n\n    private final Object data;\n    private final int size;\n    private ArgType elemType;\n\n    public FillArrayNode(int resReg, FillArrayDataPayloadDecodedInstruction payload) {\n        super(InsnType.FILL_ARRAY, 0);\n        ArgType elType;\n        switch (payload.getElementWidthUnit()) {\n            case 1:\n                elType = ArgType.unknown(PrimitiveType.BOOLEAN, PrimitiveType.BYTE);\n                break;\n            case 2:\n                elType = ArgType.unknown(PrimitiveType.SHORT, PrimitiveType.CHAR);\n                break;\n            case 4:\n                elType = ArgType.unknown(PrimitiveType.INT, PrimitiveType.FLOAT);\n                break;\n            case 8:\n                elType = ArgType.unknown(PrimitiveType.LONG, PrimitiveType.DOUBLE);\n                break;\n\n            default:\n                throw new JadxRuntimeException(\"Unknown array element width: \" + payload.getElementWidthUnit());\n        }\n        setResult(InsnArg.reg(resReg, ArgType.array(elType)));\n\n        this.data = payload.getData();\n        this.size = payload.getSize();\n        this.elemType = elType;\n    }\n\n    public Object getData() {\n        return data;\n    }\n\n    public int getSize() {\n        return size;\n    }\n\n    public ArgType getElementType() {\n        return elemType;\n    }\n\n    public void mergeElementType(DexNode dex, ArgType foundElemType) {\n        ArgType r = ArgType.merge(dex, elemType, foundElemType);\n        if (r != null) {\n            elemType = r;\n        }\n    }\n\n    public List<LiteralArg> getLiteralArgs() {\n        List<LiteralArg> list = new ArrayList<LiteralArg>(size);\n        Object array = data;\n        if (array instanceof int[]) {\n            for (int b : (int[]) array) {\n                list.add(InsnArg.lit(b, elemType));\n            }\n        } else if (array instanceof byte[]) {\n            for (byte b : (byte[]) array) {\n                list.add(InsnArg.lit(b, elemType));\n            }\n        } else if (array instanceof short[]) {\n            for (short b : (short[]) array) {\n                list.add(InsnArg.lit(b, elemType));\n            }\n        } else if (array instanceof long[]) {\n            for (long b : (long[]) array) {\n                list.add(InsnArg.lit(b, elemType));\n            }\n        } else {\n            throw new JadxRuntimeException(\"Unknown type: \" + data.getClass() + \", expected: \" + elemType);\n        }\n        return list;\n    }\n\n    @Override\n    public boolean isSame(InsnNode obj) {\n        if (this == obj) {\n            return true;\n        }\n<｜fim▁hole｜>        FillArrayNode other = (FillArrayNode) obj;\n        return elemType.equals(other.elemType) && data == other.data;\n    }\n}<｜fim▁end｜>",
    "response": "        if (!(obj instanceof FillArrayNode) || !super.isSame(obj)) {\n            return false;\n        }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.minecraft.block.state.pattern;\n\nimport com.google.common.base.Predicate;\nimport net.minecraft.block.Block;\nimport net.minecraft.block.state.IBlockState;\n\npublic class BlockMatcher implements Predicate<IBlockState>\n<｜fim▁hole｜>\n    private BlockMatcher(Block blockType)\n    {\n        this.block = blockType;\n    }\n\n    public static BlockMatcher forBlock(Block blockType)\n    {\n        return new BlockMatcher(blockType);\n    }\n\n    public boolean apply(IBlockState p_apply_1_)\n    {\n        return p_apply_1_ != null && p_apply_1_.getBlock() == this.block;\n    }\n}<｜fim▁end｜>",
    "response": "{\n    private final Block block;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.femo.http.drivers;\n\nimport io.femo.http.HttpDriver;\nimport io.femo.http.HttpRequest;\n\nimport java.net.URL;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class AsynchronousDriver extends DefaultDriver {\n\n    private ExecutorService executorService;\n\n    public AsynchronousDriver() {\n        executorService = null;\n    }\n\n    public AsynchronousDriver(int threads) {\n        this.executorService = Executors.newFixedThreadPool(threads);\n<｜fim▁hole｜>    @Override\n    public HttpRequest url(URL url) {\n        if(executorService == null)\n            return new AsynchronousHttpRequest(url);\n        return new AsynchronousExecutorHttpRequest(url, executorService);\n    }\n}<｜fim▁end｜>",
    "response": "    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.facebook.buck.file;\n\nimport com.facebook.buck.event.AbstractBuckEvent;\nimport com.facebook.buck.event.EventKey;\n\nimport java.net.URI;\n\npublic abstract class DownloadEvent extends AbstractBuckEvent {\n\n  protected URI uri;\n\n  private DownloadEvent(EventKey eventKey, URI uri) {\n    super(eventKey);\n    this.uri = uri;\n  }\n\n  @Override\n  protected String getValueString() {\n    return uri.toString();\n  }\n\n  public static Started started(URI uri) {\n    return new Started(uri);\n  }\n\n  public static Finished finished(Started started) {\n    return new Finished(started);\n  }\n\n  public static class Started extends DownloadEvent {\n    public Started(URI uri) {\n      super(EventKey.unique(), uri);\n    }\n\n    @Override\n    public String getEventName() {\n<｜fim▁hole｜>    public Finished(Started started) {\n      super(started.getEventKey(), started.uri);\n    }\n\n    @Override\n    public String getEventName() {\n      return \"DownloadFinished\";\n    }\n  }\n}<｜fim▁end｜>",
    "response": "      return \"DownloadStarted\";\n    }\n  }\n\n  public static class Finished extends DownloadEvent {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.elasticsearch.gradle.docker;\n\nimport org.elasticsearch.gradle.test.GradleIntegrationTestCase;\n\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static org.elasticsearch.gradle.docker.DockerSupportService.deriveId;\nimport static org.elasticsearch.gradle.docker.DockerSupportService.parseOsRelease;\nimport static org.hamcrest.CoreMatchers.equalTo;\n\npublic class DockerSupportServiceTests extends GradleIntegrationTestCase {\n\n    public void testParseOsReleaseOnOracle() {\n        final List<String> lines = List.of(\n            \"NAME=\\\"Oracle Linux Server\\\"\",\n            \"VERSION=\\\"6.10\\\"\",\n            \"ID=\\\"ol\\\"\",\n            \"VERSION_ID=\\\"6.10\\\"\",\n            \"PRETTY_NAME=\\\"Oracle Linux Server 6.10\\\"\",\n<｜fim▁hole｜>            \"\",\n            \"ORACLE_BUGZILLA_PRODUCT\" + \"=\\\"Oracle Linux 6\\\"\",\n            \"ORACLE_BUGZILLA_PRODUCT_VERSION=6.10\",\n            \"ORACLE_SUPPORT_PRODUCT=\\\"Oracle Linux\\\"\",\n            \"ORACLE_SUPPORT_PRODUCT_VERSION=6.10\"\n        );\n\n        final Map<String, String> results = parseOsRelease(lines);\n\n        final Map<String, String> expected = new HashMap<>();\n        expected.put(\"ANSI_COLOR\", \"0;31\");\n        expected.put(\"BUG_REPORT_URL\", \"https://bugzilla.oracle.com/\");\n        expected.put(\"CPE_NAME\", \"cpe:/o:oracle:linux:6:10:server\");\n        expected.put(\"HOME_URL\" + \"\", \"https://linux.oracle.com/\");\n        expected.put(\"ID\", \"ol\");\n        expected.put(\"NAME\", \"oracle linux server\");\n        expected.put(\"ORACLE_BUGZILLA_PRODUCT\" + \"\", \"oracle linux 6\");\n        expected.put(\"ORACLE_BUGZILLA_PRODUCT_VERSION\", \"6.10\");\n        expected.put(\"ORACLE_SUPPORT_PRODUCT\", \"oracle linux\");\n        expected.put(\"ORACLE_SUPPORT_PRODUCT_VERSION\", \"6.10\");\n        expected.put(\"PRETTY_NAME\", \"oracle linux server 6.10\");\n        expected.put(\"VERSION\", \"6.10\");\n        expected.put(\"VERSION_ID\", \"6.10\");\n\n        assertThat(expected, equalTo(results));\n    }\n\n    /**\n     * Trailing whitespace should be removed\n     */\n    public void testRemoveTrailingWhitespace() {\n        final List<String> lines = List.of(\"NAME=\\\"Oracle Linux Server\\\"   \");\n\n        final Map<String, String> results = parseOsRelease(lines);\n\n        final Map<String, String> expected = Map.of(\"NAME\", \"oracle linux server\");\n\n        assertThat(expected, equalTo(results));\n    }\n\n    /**\n     * Comments should be removed\n     */\n    public void testRemoveComments() {\n        final List<String> lines = List.of(\"# A comment\", \"NAME=\\\"Oracle Linux Server\\\"\");\n\n        final Map<String, String> results = parseOsRelease(lines);\n\n        final Map<String, String> expected = Map.of(\"NAME\", \"oracle linux server\");\n\n        assertThat(expected, equalTo(results));\n    }\n\n    public void testDeriveIdOnOracle() {\n        final Map<String, String> osRelease = new HashMap<>();\n        osRelease.put(\"ID\", \"ol\");\n        osRelease.put(\"VERSION_ID\", \"6.10\");\n\n        assertThat(\"ol-6.10\", equalTo(deriveId(osRelease)));\n    }\n}<｜fim▁end｜>",
    "response": "            \"ANSI_COLOR=\\\"0;31\\\"\",\n            \"CPE_NAME=\\\"cpe:/o:oracle:linux:6:10:server\\\"\",\n            \"HOME_URL\" + \"=\\\"https://linux.oracle.com/\\\"\",\n            \"BUG_REPORT_URL=\\\"https://bugzilla.oracle.com/\\\"\",\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.orientechnologies.common.serialization;\n\nimport com.orientechnologies.orient.core.config.OGlobalConfiguration;\n\npublic class OBinaryConverterFactory {\n  private static final boolean unsafeWasDetected;\n\n  static {\n    boolean unsafeDetected = false;\n\n    try {\n      Class<?> sunClass = Class.forName(\"sun.misc.Unsafe\");\n      unsafeDetected = sunClass != null;\n    } catch (ClassNotFoundException cnfe) {\n      // Ignore\n    }\n\n    unsafeWasDetected = unsafeDetected;\n  }\n\n  public static OBinaryConverter getConverter() {\n<｜fim▁hole｜>    return OSafeBinaryConverter.INSTANCE;\n  }\n}<｜fim▁end｜>",
    "response": "    boolean useUnsafe = OGlobalConfiguration.MEMORY_USE_UNSAFE.getValueAsBoolean();\n\n    if (useUnsafe && unsafeWasDetected)\n      return OUnsafeBinaryConverter.INSTANCE;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package uk.theretiredprogrammer.nbpcglibrary.data.entity;\n\nimport uk.theretiredprogrammer.nbpcglibrary.api.EventParams;\nimport uk.theretiredprogrammer.nbpcglibrary.common.LogBuilder;\n\npublic class EntityFieldChangeEventParams<F> implements EventParams {\n\n    private final F field;\n\n    /**\n     * Constructor.\n     *\n     * @param field the entity field identifier\n     */\n    public EntityFieldChangeEventParams(F field) {\n        this.field = field;\n    }\n\n    /**\n     * Get the field Id\n     *\n     * @return the field identifier\n     */\n    public F get() {\n        return field;\n    }\n<｜fim▁hole｜>    public String instanceDescription() {\n        return LogBuilder.instanceDescription(this, (field!=null?field.toString():\"ALL\")+ \" change\" );\n    }\n}<｜fim▁end｜>",
    "response": "\n    @Override\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package jdir.util.joptsimple.internal;\n\nimport java.text.MessageFormat;\nimport java.util.Locale;\nimport java.util.ResourceBundle;\n\npublic class Messages {\n    private Messages() {\n        throw new UnsupportedOperationException();\n    }\n\n    public static String message( Locale locale, String bundleName, Class<?> type, String key, Object... args ) {\n        ResourceBundle bundle = ResourceBundle.getBundle( bundleName, locale );\n        String template = bundle.getString( type.getName() + '.' + key );\n        MessageFormat format = new MessageFormat( template );\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "        format.setLocale( locale );\n        return format.format( args );\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.lmax.disruptor.examples;\n\nimport com.lmax.disruptor.EventFactory;\nimport com.lmax.disruptor.EventHandler;\nimport com.lmax.disruptor.dsl.Disruptor;\nimport com.lmax.disruptor.util.DaemonThreadFactory;\n\npublic class ThreeToOneDisruptor\n{\n    public static class DataEvent\n    {\n        Object input;\n        Object[] output;\n\n        public DataEvent(final int size)\n        {\n            output = new Object[size];\n        }\n\n        public static final EventFactory<DataEvent> FACTORY = () -> new DataEvent(3);\n    }\n\n    public static class TransformingHandler implements EventHandler<DataEvent>\n    {\n        private final int outputIndex;\n\n        public TransformingHandler(final int outputIndex)\n        {\n            this.outputIndex = outputIndex;\n        }\n\n        @Override\n        public void onEvent(final DataEvent event, final long sequence, final boolean endOfBatch)\n        {\n            // Do Stuff.\n            event.output[outputIndex] = doSomething(event.input);\n        }\n\n        private Object doSomething(final Object input)\n        {\n            // Do required transformation here....\n            return input;\n        }\n    }\n\n    public static class CollatingHandler implements EventHandler<DataEvent>\n    {\n        @Override\n        public void onEvent(final DataEvent event, final long sequence, final boolean endOfBatch)\n        {\n            collate(event.output);\n        }\n\n        private void collate(final Object[] output)\n        {\n            // Do required collation here....\n        }\n    }\n\n    public static void main(final String[] args)\n    {\n        Disruptor<DataEvent> disruptor = new Disruptor<>(\n<｜fim▁hole｜>        CollatingHandler collator = new CollatingHandler();\n\n        disruptor.handleEventsWith(handler1, handler2, handler3).then(collator);\n\n        disruptor.start();\n    }\n}<｜fim▁end｜>",
    "response": "                DataEvent.FACTORY, 1024, DaemonThreadFactory.INSTANCE);\n\n        TransformingHandler handler1 = new TransformingHandler(0);\n        TransformingHandler handler2 = new TransformingHandler(1);\n        TransformingHandler handler3 = new TransformingHandler(2);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.microsoft.azure.management.network.v2020_05_01.implementation;\n\nimport com.microsoft.azure.management.network.v2020_05_01.NetworkInterfaceLoadBalancer;\nimport com.microsoft.azure.arm.model.implementation.WrapperImpl;\nimport rx.Observable;\nimport java.util.ArrayList;\nimport com.microsoft.azure.management.network.v2020_05_01.BackendAddressPool;\nimport java.util.List;\nimport com.microsoft.azure.management.network.v2020_05_01.FrontendIPConfiguration;\nimport com.microsoft.azure.management.network.v2020_05_01.InboundNatPool;\nimport com.microsoft.azure.management.network.v2020_05_01.InboundNatRule;\nimport com.microsoft.azure.management.network.v2020_05_01.LoadBalancingRule;\nimport com.microsoft.azure.management.network.v2020_05_01.OutboundRule;\nimport com.microsoft.azure.management.network.v2020_05_01.Probe;\nimport com.microsoft.azure.management.network.v2020_05_01.ProvisioningState;\nimport com.microsoft.azure.management.network.v2020_05_01.LoadBalancerSku;\nimport java.util.Map;\n\nclass NetworkInterfaceLoadBalancerImpl extends WrapperImpl<LoadBalancerInner> implements NetworkInterfaceLoadBalancer {\n    private final NetworkManager manager;\n\n    NetworkInterfaceLoadBalancerImpl(LoadBalancerInner inner,  NetworkManager manager) {\n        super(inner);\n        this.manager = manager;\n    }\n\n    @Override\n    public NetworkManager manager() {\n        return this.manager;\n    }\n\n    @Override\n    public List<BackendAddressPool> backendAddressPools() {\n        List<BackendAddressPool> lst = new ArrayList<BackendAddressPool>();\n        if (this.inner().backendAddressPools() != null) {\n            for (BackendAddressPoolInner inner : this.inner().backendAddressPools()) {\n                lst.add( new BackendAddressPoolImpl(inner, manager()));\n            }\n        }\n        return lst;\n    }\n\n    @Override\n    public String etag() {\n        return this.inner().etag();\n    }\n\n    @Override\n    public List<FrontendIPConfiguration> frontendIPConfigurations() {\n        List<FrontendIPConfiguration> lst = new ArrayList<FrontendIPConfiguration>();\n        if (this.inner().frontendIPConfigurations() != null) {\n            for (FrontendIPConfigurationInner inner : this.inner().frontendIPConfigurations()) {\n                lst.add( new FrontendIPConfigurationImpl(inner, manager()));\n            }\n        }\n        return lst;\n    }\n\n    @Override\n    public String id() {\n        return this.inner().id();\n    }\n\n<｜fim▁hole｜>    @Override\n    public List<InboundNatRule> inboundNatRules() {\n        List<InboundNatRule> lst = new ArrayList<InboundNatRule>();\n        if (this.inner().inboundNatRules() != null) {\n            for (InboundNatRuleInner inner : this.inner().inboundNatRules()) {\n                lst.add( new InboundNatRuleImpl(inner, manager()));\n            }\n        }\n        return lst;\n    }\n\n    @Override\n    public List<LoadBalancingRule> loadBalancingRules() {\n        List<LoadBalancingRule> lst = new ArrayList<LoadBalancingRule>();\n        if (this.inner().loadBalancingRules() != null) {\n            for (LoadBalancingRuleInner inner : this.inner().loadBalancingRules()) {\n                lst.add( new LoadBalancingRuleImpl(inner, manager()));\n            }\n        }\n        return lst;\n    }\n\n    @Override\n    public String location() {\n        return this.inner().location();\n    }\n\n    @Override\n    public String name() {\n        return this.inner().name();\n    }\n\n    @Override\n    public List<OutboundRule> outboundRules() {\n        List<OutboundRule> lst = new ArrayList<OutboundRule>();\n        if (this.inner().outboundRules() != null) {\n            for (OutboundRuleInner inner : this.inner().outboundRules()) {\n                lst.add( new OutboundRuleImpl(inner, manager()));\n            }\n        }\n        return lst;\n    }\n\n    @Override\n    public List<Probe> probes() {\n        List<Probe> lst = new ArrayList<Probe>();\n        if (this.inner().probes() != null) {\n            for (ProbeInner inner : this.inner().probes()) {\n                lst.add( new ProbeImpl(inner, manager()));\n            }\n        }\n        return lst;\n    }\n\n    @Override\n    public ProvisioningState provisioningState() {\n        return this.inner().provisioningState();\n    }\n\n    @Override\n    public String resourceGuid() {\n        return this.inner().resourceGuid();\n    }\n\n    @Override\n    public LoadBalancerSku sku() {\n        return this.inner().sku();\n    }\n\n    @Override\n    public Map<String, String> tags() {\n        return this.inner().getTags();\n    }\n\n    @Override\n    public String type() {\n        return this.inner().type();\n    }\n\n}<｜fim▁end｜>",
    "response": "    @Override\n    public List<InboundNatPool> inboundNatPools() {\n        return this.inner().inboundNatPools();\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.activemq.artemis.tests.smoke.infinite;\n\nimport javax.jms.Connection;\nimport javax.jms.ConnectionFactory;\nimport javax.jms.DeliveryMode;\nimport javax.jms.MessageConsumer;\nimport javax.jms.MessageProducer;\nimport javax.jms.Queue;\nimport javax.jms.Session;\nimport javax.jms.TextMessage;\n\nimport java.io.File;\n\nimport org.apache.activemq.artemis.core.io.SequentialFileFactory;\nimport org.apache.activemq.artemis.core.io.nio.NIOSequentialFileFactory;\nimport org.apache.activemq.artemis.jms.client.ActiveMQConnectionFactory;\nimport org.apache.activemq.artemis.tests.smoke.common.SmokeTestBase;\nimport org.apache.activemq.artemis.tests.util.Wait;\nimport org.jboss.logging.Logger;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\npublic class InfiniteRedeliverySmokeTest extends SmokeTestBase {\n\n   private static final Logger logger = Logger.getLogger(InfiniteRedeliverySmokeTest.class);\n\n   public static final String SERVER_NAME_0 = \"infinite-redelivery\";\n\n   @Before\n   public void before() throws Exception {\n      cleanupData(SERVER_NAME_0);\n      startServer(SERVER_NAME_0, 0, 30000);\n   }\n\n   @Test\n   public void testValidateRedeliveries() throws Exception {\n      ConnectionFactory factory = new ActiveMQConnectionFactory();\n      Connection connection = factory.createConnection();\n      Session session = connection.createSession(true, Session.SESSION_TRANSACTED);\n\n      Queue queue = session.createQueue(\"testQueue\");\n      MessageProducer producer = session.createProducer(queue);\n      producer.setDeliveryMode(DeliveryMode.PERSISTENT);\n\n      TextMessage message = session.createTextMessage(\"this is a test\");\n      for (int i = 0; i < 5000; i++) {\n         producer.send(message);\n      }\n      session.commit();\n\n      connection.start();\n\n      MessageConsumer consumer = session.createConsumer(queue);\n\n      File journalLocation = new File(getServerLocation(SERVER_NAME_0) + \"/data/journal\");\n      SequentialFileFactory fileFactory = new NIOSequentialFileFactory(journalLocation, 1);\n\n      for (int i = 0; i < 500; i++) {\n         if (i % 10 == 0) logger.debug(\"Redelivery \" + i);\n         for (int j = 0; j < 5000; j++) {\n            Assert.assertNotNull(consumer.receive(5000));\n<｜fim▁hole｜>\n         int numberOfFiles = fileFactory.listFiles(\"amq\").size();\n\n         // it should be actually 10, However if a future rule changes it to allow removing files I'm ok with that\n         Assert.assertTrue(\"there are not enough files on journal\", numberOfFiles >= 2);\n         // it should be max 10 actually, I'm just leaving some space for future changes,\n         // as the real test I'm after here is the broker should clean itself up\n         Wait.assertTrue(\"there are too many files created\", () -> fileFactory.listFiles(\"amq\").size() <= 20);\n\n      }\n   }\n\n   @Test\n   public void testValidateJournalOnRollbackSend() throws Exception {\n      ConnectionFactory factory = new ActiveMQConnectionFactory();\n      Connection connection = factory.createConnection();\n      Session session = connection.createSession(true, Session.SESSION_TRANSACTED);\n\n      Queue queue = session.createQueue(\"testQueue\");\n      MessageProducer producer = session.createProducer(queue);\n      producer.setDeliveryMode(DeliveryMode.PERSISTENT);\n\n      File journalLocation = new File(getServerLocation(SERVER_NAME_0) + \"/data/journal\");\n      SequentialFileFactory fileFactory = new NIOSequentialFileFactory(journalLocation, 1);\n      TextMessage message = session.createTextMessage(\"This is a test\");\n      producer.send(message); // we will always have one message behind\n      connection.start();\n      MessageConsumer consumer = session.createConsumer(queue);\n      for (int i = 0; i < 500; i++) {\n         if (i % 10 == 0) logger.debug(\"Rollback send \" + i);\n         for (int j = 0; j < 5000; j++) {\n            producer.send(message);\n         }\n         if (i % 100 == 0) {\n            session.commit();\n            for (int c = 0; c < 5000; c++) {\n               Assert.assertNotNull(consumer.receive(5000));\n            }\n            session.commit();\n            Assert.assertNotNull(consumer.receive(5000)); // there's one message behind\n            session.rollback(); // we will keep the one message behind\n         } else {\n            session.rollback();\n         }\n         int numberOfFiles = fileFactory.listFiles(\"amq\").size();\n         // it should be actually 10, However if a future rule changes it to allow removing files I'm ok with that\n         Assert.assertTrue(\"there are not enough files on journal\", numberOfFiles >= 2);\n         // it should be max 10 actually, I'm just leaving some space for future changes,\n         // as the real test I'm after here is the broker should clean itself up\n         Wait.assertTrue(() -> fileFactory.listFiles(\"amq\").size() <= 20);\n         Assert.assertTrue(\"there are too many files created\", numberOfFiles <= 20);\n      }\n   }\n}<｜fim▁end｜>",
    "response": "         }\n         session.rollback();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.f1x.api.message.fields;\n\npublic enum ConfirmStatus implements org.f1x.api.message.types.ByteEnum {\n    RECEIVED((byte)'1'),\n    MISMATCHED_ACCOUNT((byte)'2'),\n    MISSING_SETTLEMENT_INSTRUCTIONS((byte)'3'),\n    CONFIRMED((byte)'4'),\n    REQUEST_REJECTED((byte)'5');\n\n    private final byte code;\n\n    ConfirmStatus (byte code) {\n        this.code  = code;\n    }\n\n    public byte getCode() { return code; }\n\n<｜fim▁hole｜>        switch(s) {\n            case \"1\" : return RECEIVED;\n            case \"2\" : return MISMATCHED_ACCOUNT;\n            case \"3\" : return MISSING_SETTLEMENT_INSTRUCTIONS;\n            case \"4\" : return CONFIRMED;\n            case \"5\" : return REQUEST_REJECTED;\n        }\n        return null;\n    }\n\n}<｜fim▁end｜>",
    "response": "    public static ConfirmStatus parse(String s) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.github.zzn2.colorize;\n\nimport android.graphics.drawable.Drawable;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.TextView;\n\nimport io.github.zzn2.colorize.drawable.ColorStateDrawable;\n\npublic class Colorize {\n\n    /**\n     * Make compound drawable color change with the text color.\n     *\n     * @param view the View to apply.\n     *             apply to all child views if an ViewGroup is specified here.\n     */\n    public static void applyTo(View view) {\n        if (view == null) {\n            return;\n        }\n\n        if (view instanceof TextView) {\n            TextView textView = (TextView) view;\n            Drawable[] drawables = textView.getCompoundDrawables();\n            for (int i = 0; i < 4; i++) {\n                Drawable drawable = drawables[i];\n                if (drawable != null) {\n                    if (!(drawable instanceof ColorStateDrawable)) {\n                        drawables[i] = new ColorStateDrawable(drawable, textView.getTextColors());\n                    } else {\n                        ((ColorStateDrawable) drawables[i]).updateColor(textView.getTextColors());\n                    }\n                }\n<｜fim▁hole｜>                View subView = ((ViewGroup) view).getChildAt(i);\n                applyTo(subView);\n            }\n        }\n    }\n}<｜fim▁end｜>",
    "response": "            }\n\n            textView.setCompoundDrawablesWithIntrinsicBounds(\n                    drawables[0], drawables[1], drawables[2], drawables[3]);\n        } else if (view instanceof ViewGroup) {\n            for (int i = 0; i < ((ViewGroup) view).getChildCount(); i++) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.eclipse.smarthome.automation.module.script;\n\nimport java.util.Collection;\nimport java.util.Map;\n\npublic interface ScriptExtensionProvider {\n\n    /**\n     * These presets will always get injected into the ScriptEngine on instance creation.\n     *\n     * @return collection of presets\n     */\n    public Collection<String> getDefaultPresets();\n\n    /**\n     * Returns the provided Presets which are supported by this ScriptExtensionProvider.\n     * Presets define imports which will be injected into the ScriptEngine if called by \"importPreset\".\n<｜fim▁hole｜>\n    /**\n     * Returns the supported types which can be received by the given ScriptExtensionProvider\n     *\n     * @return provided types\n     */\n    public Collection<String> getTypes();\n\n    /**\n     * This method should return an Object of the given type. Note: get can be called multiple times in the scripts use\n     * caching where appropriate.\n     *\n     * @param scriptIdentifier the identifier of the script that requests the given type\n     * @param type the type that is requested (must be part of the collection returned by the {@code #getTypes()} method\n     * @return the requested type (non-null)\n     * @throws IllegalArgumentException if the given type does not match to one returned by the {@code #getTypes()}\n     *             method\n     */\n    public Object get(String scriptIdentifier, String type) throws IllegalArgumentException;\n\n    /**\n     * This method should return variables and types of the concrete type which will be injected into the ScriptEngines\n     * scope.\n     *\n     * @param scriptIdentifier the identifier of the script that receives the preset\n     * @return the presets, must be non-null (use an empty map instead)\n     */\n    public Map<String, Object> importPreset(String scriptIdentifier, String preset);\n\n    /**\n     * This will be called when the ScriptEngine will be unloaded (e.g. if the Script is deleted or updated).\n     * Every Context information stored in the ScriptExtensionProvider should be removed.\n     *\n     * @param scriptIdentifier the identifier of the script that is unloaded\n     */\n    public void unload(String scriptIdentifier);\n\n}<｜fim▁end｜>",
    "response": "     *\n     * @return provided presets\n     */\n    public Collection<String> getPresets();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.mrcode.service;\n\nimport java.util.List;\n\nimport com.mrcode.base.BaseService;\nimport com.mrcode.model.Customer;\nimport com.mrcode.model.Grouppurchasevoucher;\nimport com.mrcode.model.Mrcodeorder;\n\npublic interface MrcodeorderService extends BaseService<Mrcodeorder>{\n\n    /**\n     * 根据订单号获得订单及相关的联系人信息\n     * @param orderNum\n     * @return\n     * @throws Exception\n<｜fim▁hole｜>}<｜fim▁end｜>",
    "response": "     */\n    public Mrcodeorder getWithContactorsByOrderNum(String orderNum) throws Exception;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package freedots.braille;\n\nimport java.util.Comparator;\nimport java.util.Iterator;\n\nimport freedots.Options;\nimport freedots.music.AbstractPitch;\nimport freedots.music.Accidental;\nimport freedots.music.Fingering;\nimport freedots.music.RhythmicElement;\nimport freedots.music.Slur;\n<｜fim▁hole｜>  private final VoiceChord chord;\n  private final BrailleNote topNote;\n\n  /** Constructs the braille representation of the given chord.\n   * @param chord is essentially a list of notes\n   * @param comparator specifies how the list of notes should be sorted\n   * @param lastPitch is used to decide if an {@link OctaveSign octave sign}\n   *        should be printed.  It should be {@code null} if an octave sign\n   *        should be printed regardless of the previous pitch.\n   */\n  public BrailleChord(final VoiceChord chord,\n                      final Comparator<RhythmicElement> comparator,\n                      final AbstractPitch lastPitch) {\n    super();\n    this.chord = chord;\n\n    final VoiceChord sorted = (VoiceChord)chord.clone();\n    java.util.Collections.sort(sorted, comparator);\n    final Iterator<RhythmicElement> iterator = sorted.iterator();\n    assert iterator.hasNext();\n\n    final boolean allNotesTied = hasAllNotesTied();\n\n    final Note firstNote = (Note)iterator.next();\n    add(topNote = new BrailleNote(firstNote, lastPitch, !allNotesTied));\n\n    assert iterator.hasNext();\n\n    while (iterator.hasNext()) {\n      add(new ChordStep((Note)iterator.next(), firstNote, !allNotesTied));\n    }\n\n    if (allNotesTied) add(new ChordTieSign());\n  }\n  @Override public String getDescription() {\n    return \"A chord.\";\n  }\n  @Override public Object getScoreObject() { return chord; }\n\n  /** Returns the pitch of the first note of this chord.\n   * <p>\n   * The first note is chord direction dependant, if the chord is written\n   * from bottom to top note, this method returns the lowest pitch of the\n   * chord.\n   */\n  public AbstractPitch getNotePitch() { return topNote.getPitch(); }\n\n  private boolean hasAllNotesTied() {\n    final Iterator<RhythmicElement> iterator = chord.iterator();\n    while (iterator.hasNext()) {\n      if (!((Note)iterator.next()).isTieStart()) return false;\n    }\n    return true;\n  }\n\n  /** Represents an interval in the braille chord.\n   */\n  public static class ChordStep extends BrailleList {\n    private final Note note;\n\n    ChordStep(final Note note, final Note relativeTo,\n              final boolean allowTieSign) {\n      super();\n      this.note = note;\n\n      final Options options = Options.getInstance();\n\n      final Accidental accidental = note.getAccidental();\n      if (accidental != null) add(new AccidentalSign(accidental));\n\n      AbstractPitch thisPitch = note.getPitch();\n      if (thisPitch == null) thisPitch = note.getUnpitched();\n      AbstractPitch otherPitch = relativeTo.getPitch();\n      if (otherPitch == null) otherPitch = relativeTo.getUnpitched();\n\n      int diatonicDiff = Math.abs(thisPitch.diatonicDifference(otherPitch));\n      if (diatonicDiff == 0 || diatonicDiff > 7) {\n        add(new OctaveSign(thisPitch.getOctave()));\n        while (diatonicDiff > 7) diatonicDiff -= 7;\n      }\n      add(new IntervalSign(diatonicDiff));\n\n      if (options.getShowFingering()) {\n        final Fingering fingering = note.getFingering();\n        if (!fingering.getFingers().isEmpty())\n          add(new BrailleFingering(fingering));\n      }\n\n      boolean addSingleSlur = false;\n      boolean addDoubledSlur = false;\n      for (Slur<Note> slur: note.getSlurs()) {\n        if (slur.countArcs(note) >= options.getSlurDoublingThreshold()) {\n          if (slur.isFirst(note)) {\n            addDoubledSlur = true; addSingleSlur = false;\n          } else if (slur.isLastArc(note)) {\n            addDoubledSlur = false; addSingleSlur = true;\n          } else {\n            addDoubledSlur = false; addSingleSlur = false;\n          }\n          break;\n        } else {\n          if (!slur.lastNote(note)) {\n            addDoubledSlur = false; addSingleSlur = true;\n            break;\n          }\n        }\n      }\n      if (addDoubledSlur) {\n        add(new SlurSign()); add(new SlurSign());\n      } else if (addSingleSlur) {\n        add(new SlurSign());\n      }\n\n      if (allowTieSign && note.isTieStart()) { add(new TieSign()); }\n    }\n\n    /** Returns the target note indicated by this interval.\n     */\n    @Override public Object getScoreObject() { return note; }\n  }\n\n  /** Represents an interval.\n   */\n  public static class IntervalSign extends Sign {\n    private final int steps;\n    IntervalSign(final int steps) {\n      super(INTERVALS[steps]);\n      this.steps = steps;\n    }\n\n    public String getDescription() {\n      return \"A \" + INTERVAL_NAMES[steps] + \" interval sign\";\n    }\n\n    private static final String[] INTERVALS = new String[] {\n      braille(36), braille(34), braille(346), braille(3456), braille(35),\n      braille(356), braille(25), braille(36)\n    };\n    private static final String[] INTERVAL_NAMES = new String[] {\n      \"unison\", \"second\", \"third\", \"fourth\", \"fifth\", \"sixth\",\n      \"seventh\", \"octave\"\n    };\n  }\n\n  public static class ChordTieSign extends Sign {\n    ChordTieSign() { super(braille(46, 14)); }\n    public String getDescription() {\n      return \"Indicates that all notes of a chord are tied to the next chord\";\n    }\n  }\n}<｜fim▁end｜>",
    "response": "import freedots.music.VoiceChord;\nimport freedots.musicxml.Note;\n\npublic class BrailleChord extends BrailleList {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.shardingsphere.sharding.constant;\n\nimport lombok.AccessLevel;\nimport lombok.NoArgsConstructor;\n\n<｜fim▁hole｜>\n    /**\n     * Sharding order.\n     */\n    public static final int ORDER = -10;\n\n    /**\n     * Algorithm provider sharding order.\n     */\n    public static final int ALGORITHM_PROVIDER_ORDER = ORDER + 1;\n}<｜fim▁end｜>",
    "response": "@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic final class ShardingOrder {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.stuffwithstuff.bulfinch;\n\npublic class Name {\n  public Name(String identifier) {\n    mIdentifier = identifier;\n  }\n\n  public String getIdentifier() {\n    return mIdentifier;\n  }\n\n  public boolean isLocal() {\n    Expect.state(mScope != Scope.UNRESOLVED, \"Unresolved name.\");\n\n    return mScope == Scope.LOCAL;\n  }\n<｜fim▁hole｜>    return mScope == Scope.UPVAR;\n  }\n\n  public int getLocalIndex() {\n    Expect.state(mScope != Scope.UNRESOLVED, \"Unresolved name.\");\n    Expect.state(mScope == Scope.LOCAL, \"Non-local name.\");\n\n    return mIndex;\n  }\n\n  public UpvarRef getUpvar() {\n    Expect.state(mScope != Scope.UNRESOLVED, \"Unresolved name.\");\n    Expect.state(mScope == Scope.UPVAR, \"Non-upvar name.\");\n\n    return mUpvar;\n  }\n\n  public void resolveLocal(int index) {\n    Expect.arg(index >= 0, \"Index should be non-negative.\");\n    Expect.state(mScope == Scope.UNRESOLVED, \"Already resolved name.\");\n\n    mScope = Scope.LOCAL;\n    mIndex = index;\n  }\n\n  public void resolveUpvar(UpvarRef upvar) {\n    Expect.argNotNull(upvar, \"upvar\");\n    Expect.state(mScope == Scope.UNRESOLVED, \"Already resolved name.\");\n\n    mScope = Scope.UPVAR;\n    mUpvar = upvar;\n  }\n\n  public void resolveGlobal() {\n    Expect.state(mScope == Scope.UNRESOLVED, \"Already resolved name.\");\n\n    mScope = Scope.GLOBAL;\n  }\n\n  @Override\n  public String toString() {\n    return mIdentifier;\n  }\n\n  private enum Scope {\n    UNRESOLVED,\n    LOCAL,\n    GLOBAL,\n    UPVAR\n  }\n\n  private final String mIdentifier;\n  private Scope mScope = Scope.UNRESOLVED;\n  private int mIndex;\n  private UpvarRef mUpvar;\n}<｜fim▁end｜>",
    "response": "\n  public boolean isUpvar() {\n    Expect.state(mScope != Scope.UNRESOLVED, \"Unresolved name.\");\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.yunstudio.struts.form;\n\npublic class UserForm {\n\n    private Integer id;\n\n    private String username;\n\n    private String password;\n\n    private String email;\n\n    private Integer islock;\n\n    private Integer ispassed;\n\n    private String passtime;\n\n    private String regtime;\n\n    private String snumber;\n\n    private String realname;\n\n    private Integer gender;\n\n    private String grade;\n\n    private String school;\n\n    private String major;\n\n    private String qq;\n\n    private String phone;\n<｜fim▁hole｜>    private String lastlogintime;\n\n    private Integer teacherorstu;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public String getEmail() {\n        return email;\n    }\n\n    public void setEmail(String email) {\n        this.email = email;\n    }\n\n    public Integer getIslock() {\n        return islock;\n    }\n\n    public void setIslock(Integer islock) {\n        this.islock = islock;\n    }\n\n    public Integer getIspassed() {\n        return ispassed;\n    }\n\n    public void setIspassed(Integer ispassed) {\n        this.ispassed = ispassed;\n    }\n\n    public String getPasstime() {\n        return passtime;\n    }\n\n    public void setPasstime(String passtime) {\n        this.passtime = passtime;\n    }\n\n    public String getRegtime() {\n        return regtime;\n    }\n\n    public void setRegtime(String regtime) {\n        this.regtime = regtime;\n    }\n\n    public String getSnumber() {\n        return snumber;\n    }\n\n    public void setSnumber(String snumber) {\n        this.snumber = snumber;\n    }\n\n    public String getRealname() {\n        return realname;\n    }\n\n    public void setRealname(String realname) {\n        this.realname = realname;\n    }\n\n    public Integer getGender() {\n        return gender;\n    }\n\n    public void setGender(Integer gender) {\n        this.gender = gender;\n    }\n\n    public String getGrade() {\n        return grade;\n    }\n\n    public void setGrade(String grade) {\n        this.grade = grade;\n    }\n\n    public String getSchool() {\n        return school;\n    }\n\n    public void setSchool(String school) {\n        this.school = school;\n    }\n\n    public String getMajor() {\n        return major;\n    }\n\n    public void setMajor(String major) {\n        this.major = major;\n    }\n\n    public String getQq() {\n        return qq;\n    }\n\n    public void setQq(String qq) {\n        this.qq = qq;\n    }\n\n    public String getPhone() {\n        return phone;\n    }\n\n    public void setPhone(String phone) {\n        this.phone = phone;\n    }\n\n    public String getLastloginip() {\n        return lastloginip;\n    }\n\n    public void setLastloginip(String lastloginip) {\n        this.lastloginip = lastloginip;\n    }\n\n    public String getLastlogintime() {\n        return lastlogintime;\n    }\n\n    public void setLastlogintime(String lastlogintime) {\n        this.lastlogintime = lastlogintime;\n    }\n\n    public Integer getTeacherorstu() {\n        return teacherorstu;\n    }\n\n    public void setTeacherorstu(Integer teacherorstu) {\n        this.teacherorstu = teacherorstu;\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    private String lastloginip;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.lockss.plugin.atypon.markallen;\n\nimport java.io.InputStream;\nimport org.htmlparser.NodeFilter;\nimport org.lockss.filter.html.*;\nimport org.lockss.plugin.*;\nimport org.lockss.plugin.atypon.BaseAtyponHtmlHashFilterFactory;\nimport org.lockss.util.Logger;\n\npublic class MarkAllenHtmlHashFilterFactory \n  extends BaseAtyponHtmlHashFilterFactory {\n\n  private static final Logger log = Logger.getLogger(MarkAllenHtmlHashFilterFactory.class);\n\n  @Override\n  public InputStream createFilteredInputStream(ArchivalUnit au,\n<｜fim▁hole｜>        // handled by parent: script, sfxlink, stylesheet\n\n        // from toc - ad panel has link to other issue \n        // http://www.magonlinelibrary.com/toc/bjom/21/10\n        HtmlNodeFilters.tagWithAttributeRegex(\"div\", \"class\", \n                                              \"genericSlideshow\"),\n        // for toc - social media\n        HtmlNodeFilters.tagWithAttributeRegex(\"div\", \"class\",\n                                              \"general-bookmark-share\"),\n        // middle column ad of an article - all article tools with \n        // class literatumArticleToolsWidget except Download Citations\n        // http://www.magonlinelibrary.com/doi/abs/10.12968/bjom.2013.21.10.701\n        HtmlNodeFilters.allExceptSubtree(\n            HtmlNodeFilters.tagWithAttributeRegex( \n                \"div\", \"class\", \"literatumArticleToolsWidget\"),\n            HtmlNodeFilters.tagWithAttributeRegex(\n                \"a\", \"href\", \"/action/showCitFormats\\\\?\")),\n\n        HtmlNodeFilters.tagWithAttributeRegex(\"span\", \"class\", \"article__(access|breadcrumb)\"),\n        HtmlNodeFilters.tagWithAttribute(\"section\", \"class\", \"article__keyword\"),\n        HtmlNodeFilters.tagWithAttribute(\"div\", \"class\", \"figure-viewer\"),\n    };\n    // super.createFilteredInputStream adds filters to the baseAtyponFilters\n    // and returns the filtered input stream using an array of NodeFilters that \n    // combine the two arrays of NodeFilters.\n    return super.createFilteredInputStream(au, in, encoding, filters);\n  }\n\n  @Override\n  public boolean doHttpsConversion() {\n    return true;\n  }\n\n  @Override\n  public boolean doTagRemovalFiltering() {\n    return true;\n  }\n\n  @Override\n  public boolean doWSFiltering() {\n    return true;\n  }\n\n}<｜fim▁end｜>",
    "response": "      InputStream in, String encoding) {\n\n    NodeFilter[] filters = new NodeFilter[] {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.trivium.dep.org.apache.commons.io.filefilter;\n\nimport java.io.File;\nimport java.io.Serializable;\nimport java.util.List;\n\nimport io.trivium.dep.org.apache.commons.io.IOCase;\n\npublic class SuffixFileFilter extends AbstractFileFilter implements Serializable {\n\n    /** The filename suffixes to search for */\n    private final String[] suffixes;\n\n    /** Whether the comparison is case sensitive. */\n    private final IOCase caseSensitivity;\n\n    /**\n     * Constructs a new Suffix file filter for a single extension.\n     * \n     * @param suffix  the suffix to allow, must not be null\n     * @throws IllegalArgumentException if the suffix is null\n     */\n    public SuffixFileFilter(String suffix) {\n        this(suffix, IOCase.SENSITIVE);\n    }\n\n    /**\n     * Constructs a new Suffix file filter for a single extension\n     * specifying case-sensitivity.\n     *\n     * @param suffix  the suffix to allow, must not be null\n     * @param caseSensitivity  how to handle case sensitivity, null means case-sensitive\n     * @throws IllegalArgumentException if the suffix is null\n     * @since 1.4\n     */\n    public SuffixFileFilter(String suffix, IOCase caseSensitivity) {\n        if (suffix == null) {\n            throw new IllegalArgumentException(\"The suffix must not be null\");\n        }\n        this.suffixes = new String[] {suffix};\n        this.caseSensitivity = caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;\n    }\n\n    /**\n     * Constructs a new Suffix file filter for an array of suffixs.\n     * <p>\n     * The array is not cloned, so could be changed after constructing the\n     * instance. This would be inadvisable however.\n     * \n     * @param suffixes  the suffixes to allow, must not be null\n     * @throws IllegalArgumentException if the suffix array is null\n     */\n    public SuffixFileFilter(String[] suffixes) {\n        this(suffixes, IOCase.SENSITIVE);\n    }\n\n    /**\n     * Constructs a new Suffix file filter for an array of suffixs\n     * specifying case-sensitivity.\n     * <p>\n     * The array is not cloned, so could be changed after constructing the\n     * instance. This would be inadvisable however.\n     * \n     * @param suffixes  the suffixes to allow, must not be null\n     * @param caseSensitivity  how to handle case sensitivity, null means case-sensitive\n     * @throws IllegalArgumentException if the suffix array is null\n     * @since 1.4\n     */\n    public SuffixFileFilter(String[] suffixes, IOCase caseSensitivity) {\n        if (suffixes == null) {\n            throw new IllegalArgumentException(\"The array of suffixes must not be null\");\n        }\n        this.suffixes = new String[suffixes.length];\n        System.arraycopy(suffixes, 0, this.suffixes, 0, suffixes.length);\n        this.caseSensitivity = caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;\n    }\n\n    /**\n     * Constructs a new Suffix file filter for a list of suffixes.\n     * \n     * @param suffixes  the suffixes to allow, must not be null\n<｜fim▁hole｜>    public SuffixFileFilter(List<String> suffixes) {\n        this(suffixes, IOCase.SENSITIVE);\n    }\n\n    /**\n     * Constructs a new Suffix file filter for a list of suffixes\n     * specifying case-sensitivity.\n     * \n     * @param suffixes  the suffixes to allow, must not be null\n     * @param caseSensitivity  how to handle case sensitivity, null means case-sensitive\n     * @throws IllegalArgumentException if the suffix list is null\n     * @throws ClassCastException if the list does not contain Strings\n     * @since 1.4\n     */\n    public SuffixFileFilter(List<String> suffixes, IOCase caseSensitivity) {\n        if (suffixes == null) {\n            throw new IllegalArgumentException(\"The list of suffixes must not be null\");\n        }\n        this.suffixes = suffixes.toArray(new String[suffixes.size()]);\n        this.caseSensitivity = caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;\n    }\n\n    /**\n     * Checks to see if the filename ends with the suffix.\n     * \n     * @param file  the File to check\n     * @return true if the filename ends with one of our suffixes\n     */\n    @Override\n    public boolean accept(File file) {\n        String name = file.getName();\n        for (String suffix : this.suffixes) {\n            if (caseSensitivity.checkEndsWith(name, suffix)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Checks to see if the filename ends with the suffix.\n     * \n     * @param file  the File directory\n     * @param name  the filename\n     * @return true if the filename ends with one of our suffixes\n     */\n    @Override\n    public boolean accept(File file, String name) {\n        for (String suffix : this.suffixes) {\n            if (caseSensitivity.checkEndsWith(name, suffix)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Provide a String representaion of this file filter.\n     *\n     * @return a String representaion\n     */\n    @Override\n    public String toString() {\n        StringBuilder buffer = new StringBuilder();\n        buffer.append(super.toString());\n        buffer.append(\"(\");\n        if (suffixes != null) {\n            for (int i = 0; i < suffixes.length; i++) {\n                if (i > 0) {\n                    buffer.append(\",\");\n                }\n                buffer.append(suffixes[i]);\n            }\n        }\n        buffer.append(\")\");\n        return buffer.toString();\n    }\n\n}<｜fim▁end｜>",
    "response": "     * @throws IllegalArgumentException if the suffix list is null\n     * @throws ClassCastException if the list does not contain Strings\n     */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package nl.idgis.publisher.database.messages;\n\nimport com.mysema.query.types.Order;\n\npublic abstract class ListQuery extends Query {\n\n    private static final long serialVersionUID = 486819214732070272L;\n\n    protected final Order order;\n<｜fim▁hole｜>        this.limit = limit;\n        this.order = order;\n    }\n\n    public Long getOffset() {\n        return offset;\n    }\n\n    public Long getLimit() {\n        return limit;\n    }\n\n    public Order getOrder() {\n        return order;\n    }\n}<｜fim▁end｜>",
    "response": "    protected final Long offset, limit; \n\n    public ListQuery(Order order, Long offset, Long limit) {\n        this.offset = offset;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package exceptionbasics;\n<｜fim▁hole｜>public class ExceptionBasics {\n\n    public static void main(String[] args) {\n       /* This example will throw an InputMismatchException\n          when you enter a non-integer: */\n       Scanner input = new Scanner(System.in);\n       int i;\n       System.out.print(\"Enter an integer : \");\n       try {\n           i = input.nextInt();\n       } catch ( InputMismatchException ex ) {\n           System.out.println(\"You didn't enter an Integer.\");\n       } finally {\n           System.out.println(\"This happens whether the exception occurs or not\");\n       }\n    }\n}<｜fim▁end｜>",
    "response": "\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.ourbeehive.mbp.model;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class OrmMethod {\n\n    private String comments;\n    private List<String> annotList;\n    private String modifiers;\n    private String returnType;\n    private String name;\n    private List<String> parameterList;\n    private List<String> exceptionList;\n    private List<OrmOpr> ormOprList;\n    private String crudType;\n<｜fim▁hole｜>    public OrmMethod() {\n        this.annotList = new ArrayList<String>();\n        this.parameterList = new ArrayList<String>();\n        this.exceptionList = new ArrayList<String>();\n        // this.body = new Hashtable<String, String>();\n        this.ormOprList = new ArrayList<OrmOpr>();\n    }\n\n    public String getModifiers() {\n        return modifiers;\n    }\n\n    public void setModifiers(String modifiers) {\n        this.modifiers = modifiers;\n    }\n\n    public String getReturnType() {\n        return returnType;\n    }\n\n    public void setReturnType(String returnType) {\n        this.returnType = returnType;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public List<String> getParameterList() {\n        return parameterList;\n    }\n\n    public void setParameterList(List<String> parameterList) {\n        this.parameterList = parameterList;\n    }\n\n    public List<String> getExceptionList() {\n        return exceptionList;\n    }\n\n    public void setExceptionList(List<String> exceptionList) {\n        this.exceptionList = exceptionList;\n    }\n\n    // public Hashtable<String, String> getBody() {\n    // return body;\n    // }\n    //\n    // public void setBody(Hashtable<String, String> body) {\n    // this.body = body;\n    // }\n\n    // public String getType() {\n    // return type;\n    // }\n\n    // public void setType(String type) {\n    // this.type = type;\n    // }\n\n    public String getComments() {\n        return comments;\n    }\n\n    public void setComments(String comments) {\n        this.comments = comments;\n    }\n\n    public List<String> getAnnotList() {\n        return annotList;\n    }\n\n    public void setAnnotList(List<String> annotList) {\n        this.annotList = annotList;\n    }\n\n    public List<OrmOpr> getOrmOprList() {\n        return ormOprList;\n    }\n\n    public void setOrmOprList(List<OrmOpr> ormOprList) {\n        this.ormOprList = ormOprList;\n    }\n\n    public String getCrudType() {\n        return crudType;\n    }\n\n    public void setCrudType(String crudType) {\n        this.crudType = crudType;\n    }\n}<｜fim▁end｜>",
    "response": "\n    // Use Hashtable object to hold the parts of method.\n    // private Hashtable<String, String> body;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.tapestry5.internal.services;\n\nimport org.apache.tapestry5.ioc.internal.util.InternalUtils;\nimport org.apache.tapestry5.services.Request;\nimport org.apache.tapestry5.services.Session;\n\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.UnsupportedEncodingException;\nimport java.util.List;\nimport java.util.Locale;\n\npublic class RequestImpl implements Request\n{\n    static final String REQUESTED_WITH_HEADER = \"X-Requested-With\";\n\n    static final String XML_HTTP_REQUEST = \"XMLHttpRequest\";\n\n    private final HttpServletRequest request;\n\n    private final String requestEncoding;\n\n    private final TapestrySessionFactory sessionFactory;\n\n    private boolean encodingSet;\n\n    Session session;\n\n    public RequestImpl(\n            HttpServletRequest request,\n            String requestEncoding,\n            TapestrySessionFactory sessionFactory)\n    {\n        this.request = request;\n        this.requestEncoding = requestEncoding;\n        this.sessionFactory = sessionFactory;\n    }\n\n    public List<String> getParameterNames()\n    {\n        setupEncoding();\n\n        return InternalUtils.toList(request.getParameterNames());\n    }\n\n    public List<String> getHeaderNames()\n    {\n        return InternalUtils.toList(request.getHeaderNames());\n    }\n\n    public String getParameter(String name)\n    {\n        setupEncoding();\n\n        return request.getParameter(name);\n    }\n\n    public String[] getParameters(String name)\n    {\n        setupEncoding();\n\n        return request.getParameterValues(name);\n    }\n\n    public String getHeader(String name)\n    {\n        return request.getHeader(name);\n    }\n\n    public String getPath()\n    {\n        String pathInfo = request.getPathInfo();\n\n        if (pathInfo == null)\n            return request.getServletPath();\n\n        // Websphere 6.1 is a bit wonky (see TAPESTRY-1713), and tends to return the empty string\n        // for the servlet path, and return the true path in pathInfo.\n\n        return pathInfo.length() == 0 ? \"/\" : pathInfo;\n    }\n\n    public String getContextPath()\n    {\n        return request.getContextPath();\n    }\n\n    public boolean isSessionInvalidated()\n    {\n        // Double check to ensure that the session exists, but don't create it.\n        if (session == null)\n        {\n            session = sessionFactory.getSession(false);\n        }\n\n<｜fim▁hole｜>        if (session != null && session.isInvalidated())\n        {\n            session = null;\n        }\n\n        if (session == null)\n        {\n            // TAP5-1489 - Re-storage of session attributes at end of request should be configurable\n            session = sessionFactory.getSession(create);\n        }\n\n        return session;\n    }\n\n    public Locale getLocale()\n    {\n        return request.getLocale();\n    }\n\n    public long getDateHeader(String name)\n    {\n        return request.getDateHeader(name);\n    }\n\n    private void setupEncoding()\n    {\n        if (encodingSet)\n            return;\n\n        try\n        {\n            request.setCharacterEncoding(requestEncoding);\n        } catch (UnsupportedEncodingException ex)\n        {\n            throw new RuntimeException(ex);\n        }\n\n        encodingSet = true;\n    }\n\n    public boolean isXHR()\n    {\n        return XML_HTTP_REQUEST.equals(request.getHeader(REQUESTED_WITH_HEADER));\n    }\n\n    public boolean isSecure()\n    {\n        return request.isSecure();\n    }\n\n    public boolean isRequestedSessionIdValid()\n    {\n        return request.isRequestedSessionIdValid();\n    }\n\n    public Object getAttribute(String name)\n    {\n        return request.getAttribute(name);\n    }\n\n    public void setAttribute(String name, Object value)\n    {\n        request.setAttribute(name, value);\n    }\n\n    public String getMethod()\n    {\n        return request.getMethod();\n    }\n\n    public String getServerName()\n    {\n        return request.getServerName();\n    }\n\n    public int getLocalPort()\n    {\n        return request.getLocalPort();\n    }\n\n    /**\n     * @since 5.2.5\n     */\n    public int getServerPort()\n    {\n        return request.getServerPort();\n    }\n\n    public String getRemoteHost()\n    {\n        return request.getRemoteHost();\n    }\n\n}<｜fim▁end｜>",
    "response": "        return session != null && session.isInvalidated();\n    }\n\n    public Session getSession(boolean create)\n    {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package de.vandermeer.asciiparagraph.examples;\n\nimport org.apache.commons.lang3.text.StrBuilder;\n\nimport de.svenjacobs.loremipsum.LoremIpsum;\nimport de.vandermeer.asciiparagraph.AsciiParagraph;\nimport de.vandermeer.skb.interfaces.StandardExampleAsCmd;\nimport de.vandermeer.skb.interfaces.render.DoesRender;\n\npublic class AP_00f_AddText_DoesRender implements StandardExampleAsCmd {\n\n    @Override\n    public void showOutput(){\n        // tag::example[]\n        AsciiParagraph ap = new AsciiParagraph();\n        class ObjectDoesRender implements DoesRender{\n            @Override\n            public String render() {\n                return new LoremIpsum().getWords(10);\n            }\n        }\n\n<｜fim▁hole｜>    }\n\n    @Override\n    public StrBuilder getSource(){\n        String[] source = new String[]{\n                \"AsciiParagraph ap = new AsciiParagraph();\",\n                \"class ObjectHasText implements HasText{\",\n                \"   @Override\",\n                \"   public String getText() {\",\n                \"       return new LoremIpsum().getWords(10);\",\n                \"   }\",\n                \"}\",\n                \"\",\n                \"ap.addText(new ObjectHasText());\",\n                \"System.out.println(ap.render());\",\n        };\n        return new StrBuilder().appendWithSeparators(source, \"\\n\");\n    }\n\n    @Override\n    public String getDescription() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n\n    @Override\n    public String getID() {\n        // TODO Auto-generated method stub\n        return null;\n    }\n}<｜fim▁end｜>",
    "response": "        ap.addText(new ObjectDoesRender());\n        System.out.println(ap.render());\n        // end::example[]\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.sorentiny.jgroups_conf;\n\nimport javax.swing.*;\nimport javax.swing.table.DefaultTableCellRenderer;\nimport java.awt.*;\n\npublic class ChangeDetectionTableCellRenderer extends DefaultTableCellRenderer {\n    @Override\n    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n        ProtocolPropertiesTableModel model = (ProtocolPropertiesTableModel) table.getModel();\n        Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);\n        if (model.isCellChanged(row, column))\n<｜fim▁hole｜>        }\n        setToolTip(row, column, model, component);\n        return component;\n    }\n\n    private void setToolTip(int row, int column, ProtocolPropertiesTableModel model, Component component) {\n        if (component instanceof JComponent)\n        {\n            ((JComponent) component).setToolTipText(model.getDescriptionFor(row, column));\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        {\n            component.setBackground(Color.YELLOW);\n            component.setFont(component.getFont().deriveFont(Font.BOLD));\n        } else {\n            component.setBackground(null);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.mifos.portfolio.api.v1.domain;\n\nimport io.mifos.Fixture;\nimport io.mifos.core.test.domain.ValidationTest;\n<｜fim▁hole｜>\nimport java.math.BigDecimal;\nimport java.util.ArrayList;\nimport java.util.Collection;\n\npublic class CaseTest extends ValidationTest<Case> {\n\n  public CaseTest(ValidationTestCase<Case> testCase) {\n    super(testCase);\n  }\n\n  @Override\n  protected Case createValidTestSubject() {\n    return Fixture.getTestCase(\"blah\");\n  }\n\n  @Parameterized.Parameters\n  public static Collection testCases() {\n    final Collection<ValidationTestCase> ret = new ArrayList<>();\n\n    ret.add(new ValidationTestCase<Case>(\"validCase\")\n            .adjustment(x -> {})\n            .valid(true));\n    ret.add(new ValidationTestCase<Case>(\"noIdentifier\")\n            .adjustment(x -> x.setIdentifier(null))\n            .valid(false));\n    ret.add(new ValidationTestCase<Case>(\"tooShortIdentifier\")\n            .adjustment(x -> x.setIdentifier(\"b\"))\n            .valid(false));\n    ret.add(new ValidationTestCase<Case>(\"tooLongIdentifier\")\n            .adjustment(x -> x.setIdentifier(RandomStringUtils.randomAlphanumeric(33)))\n            .valid(false));\n    ret.add(new ValidationTestCase<Case>(\"nonURLSafeIdentifier\")\n            .adjustment(x -> x.setIdentifier(\"bad//name\"))\n            .valid(false));\n    ret.add(new ValidationTestCase<Case>(\"nullProductIdentifier\")\n            .adjustment(x -> x.setProductIdentifier(null))\n            .valid(false));\n    ret.add(new ValidationTestCase<Case>(\"tooLongAccountIdentifier\")\n        .adjustment(x -> x.getAccountAssignments().add(new AccountAssignment(\"x\", \"0123456789\")))\n        .valid(false));\n    ret.add(new ValidationTestCase<Case>(\"out of range interest\")\n        .adjustment(x -> x.setInterest(BigDecimal.TEN.negate()))\n        .valid(false));\n    ret.add(new ValidationTestCase<Case>(\"null interest\")\n        .adjustment(x -> x.setInterest(BigDecimal.TEN.negate()))\n        .valid(false));\n\n    return ret;\n  }\n}<｜fim▁end｜>",
    "response": "import io.mifos.core.test.domain.ValidationTestCase;\nimport org.apache.commons.lang.RandomStringUtils;\nimport org.junit.runners.Parameterized;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.s4game.core;\n\nimport java.lang.annotation.Annotation;\nimport java.util.Map;\n\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.stereotype.Component;\n<｜fim▁hole｜>\n    public SpringApplicationContext() {\n    }\n\n    public void setApplicationContext(ApplicationContext ctx) throws BeansException {\n        applicationContext = ctx;\n    }\n\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    public Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException {\n        return applicationContext.getBeansWithAnnotation(annotationType);\n    }\n\n    public <T> T getBean(Class<T> requiredType) throws BeansException {\n        return applicationContext.getBean(requiredType);\n    }\n\n}<｜fim▁end｜>",
    "response": "\n@Component\npublic class SpringApplicationContext implements ApplicationContextAware {\n\n    private static ApplicationContext applicationContext;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.gentics.mesh.core.node;\n\nimport static com.gentics.mesh.assertj.MeshAssertions.assertThat;\nimport static com.gentics.mesh.test.TestDataProvider.PROJECT_NAME;\nimport static com.gentics.mesh.test.TestSize.FULL;\n\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.junit.Test;\n\nimport com.gentics.mesh.core.rest.node.NodeCreateRequest;\nimport com.gentics.mesh.core.rest.node.NodeListResponse;\nimport com.gentics.mesh.core.rest.node.NodeResponse;\nimport com.gentics.mesh.core.rest.node.field.impl.StringFieldImpl;\nimport com.gentics.mesh.parameter.impl.DeleteParametersImpl;\nimport com.gentics.mesh.parameter.impl.VersioningParametersImpl;\nimport com.gentics.mesh.test.MeshTestSetting;\nimport com.gentics.mesh.test.context.AbstractMeshTest;\n\n@MeshTestSetting(testSize = FULL, startServer = true)\npublic class NodeDeleteBranchEndpointTest extends AbstractMeshTest {\n    private final String newBranch = \"newBranch\";\n\n    @Test\n    public void deleteNodeInBranch() {\n        grantAdmin();\n        NodeResponse parent = createNode();\n        NodeResponse otherParent = createNode();\n        publishNode(parent);\n        publishNode(otherParent);\n\n        waitForJob(() -> createBranchRest(newBranch));\n\n        NodeResponse child = createNode(parent);\n        publishNode(child);\n\n        NodeListResponse children = client().findNodeChildren(PROJECT_NAME, parent.getUuid(), new VersioningParametersImpl().setBranch(initialBranchUuid())).blockingGet();\n\n        assertThat(children.getData()).isEmpty();\n\n        createContentInBranchWithOtherParent(child, otherParent, initialBranchUuid());\n\n        client().deleteNode(PROJECT_NAME, otherParent.getUuid(),\n            new DeleteParametersImpl().setRecursive(true)\n        ).blockingAwait();\n\n    }\n\n    private void createContentInBranchWithOtherParent(NodeResponse node, NodeResponse parent, String branch) {\n<｜fim▁hole｜>        request.setLanguage(\"en\");\n        request.setParentNodeUuid(parent.getUuid());\n        request.getFields().put(\"slug\", new StringFieldImpl().setString(RandomStringUtils.randomAlphabetic(5)));\n        client().createNode(node.getUuid(), PROJECT_NAME, request, new VersioningParametersImpl().setBranch(branch)).blockingAwait();\n        publishNodeInBranch(node, branch);\n    }\n}<｜fim▁end｜>",
    "response": "        NodeCreateRequest request = new NodeCreateRequest();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amazonaws.services.ssmincidents.model.transform;\n\nimport java.util.List;\nimport javax.annotation.Generated;\n\nimport com.amazonaws.SdkClientException;\nimport com.amazonaws.services.ssmincidents.model.*;\n\nimport com.amazonaws.protocol.*;\nimport com.amazonaws.annotation.SdkInternalApi;\n\n@Generated(\"com.amazonaws:aws-java-sdk-code-generator\")\n@SdkInternalApi\n<｜fim▁hole｜>            .marshallLocationName(\"integerValues\").build();\n    private static final MarshallingInfo<List> STRINGVALUES_BINDING = MarshallingInfo.builder(MarshallingType.LIST).marshallLocation(MarshallLocation.PAYLOAD)\n            .marshallLocationName(\"stringValues\").build();\n\n    private static final AttributeValueListMarshaller instance = new AttributeValueListMarshaller();\n\n    public static AttributeValueListMarshaller getInstance() {\n        return instance;\n    }\n\n    /**\n     * Marshall the given parameter object.\n     */\n    public void marshall(AttributeValueList attributeValueList, ProtocolMarshaller protocolMarshaller) {\n\n        if (attributeValueList == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            protocolMarshaller.marshall(attributeValueList.getIntegerValues(), INTEGERVALUES_BINDING);\n            protocolMarshaller.marshall(attributeValueList.getStringValues(), STRINGVALUES_BINDING);\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "public class AttributeValueListMarshaller {\n\n    private static final MarshallingInfo<List> INTEGERVALUES_BINDING = MarshallingInfo.builder(MarshallingType.LIST).marshallLocation(MarshallLocation.PAYLOAD)\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.elasticsearch.xpack.core.slm.history;\n\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\nimport org.apache.logging.log4j.message.ParameterizedMessage;\nimport org.elasticsearch.action.ActionListener;\nimport org.elasticsearch.action.DocWriteRequest;\nimport org.elasticsearch.action.index.IndexRequest;\nimport org.elasticsearch.client.Client;\nimport org.elasticsearch.cluster.metadata.Metadata;\nimport org.elasticsearch.cluster.service.ClusterService;\nimport org.elasticsearch.common.settings.Settings;\nimport org.elasticsearch.common.xcontent.ToXContent;\nimport org.elasticsearch.common.xcontent.XContentBuilder;\nimport org.elasticsearch.common.xcontent.XContentFactory;\n\nimport java.io.IOException;\n\nimport static org.elasticsearch.xpack.core.ilm.LifecycleSettings.SLM_HISTORY_INDEX_ENABLED_SETTING;\nimport static org.elasticsearch.xpack.core.slm.history.SnapshotLifecycleTemplateRegistry.INDEX_TEMPLATE_VERSION;\nimport static org.elasticsearch.xpack.core.slm.history.SnapshotLifecycleTemplateRegistry.SLM_TEMPLATE_NAME;\n\npublic class SnapshotHistoryStore {\n    private static final Logger logger = LogManager.getLogger(SnapshotHistoryStore.class);\n\n    public static final String SLM_HISTORY_DATA_STREAM = \".slm-history-\" + INDEX_TEMPLATE_VERSION;\n\n    private final Client client;\n    private final ClusterService clusterService;\n    private final boolean slmHistoryEnabled;\n\n    public SnapshotHistoryStore(Settings nodeSettings, Client client, ClusterService clusterService) {\n        this.client = client;\n        this.clusterService = clusterService;\n        slmHistoryEnabled = SLM_HISTORY_INDEX_ENABLED_SETTING.get(nodeSettings);\n    }\n\n    /**\n     * Attempts to asynchronously index a snapshot lifecycle management history entry\n     *\n     * @param item The entry to index\n     */\n    public void putAsync(SnapshotHistoryItem item) {\n<｜fim▁hole｜>            return;\n        }\n        logger.trace(\"about to index snapshot history item in data stream [{}]: [{}]\", SLM_HISTORY_DATA_STREAM, item);\n        Metadata metadata = clusterService.state().getMetadata();\n        if (metadata.dataStreams().containsKey(SLM_HISTORY_DATA_STREAM) == false &&\n            metadata.templatesV2().containsKey(SLM_TEMPLATE_NAME) == false) {\n            logger.error(new ParameterizedMessage(\"failed to index snapshot history item, data stream [{}] and template [{}] don't exist\",\n                SLM_HISTORY_DATA_STREAM, SLM_TEMPLATE_NAME));\n            return;\n        }\n        try (XContentBuilder builder = XContentFactory.jsonBuilder()) {\n            item.toXContent(builder, ToXContent.EMPTY_PARAMS);\n            IndexRequest request = new IndexRequest(SLM_HISTORY_DATA_STREAM)\n                .opType(DocWriteRequest.OpType.CREATE)\n                .source(builder);\n            client.index(request, ActionListener.wrap(indexResponse -> {\n                logger.debug(\"successfully indexed snapshot history item with id [{}] in data stream [{}]: [{}]\",\n                    indexResponse.getId(), SLM_HISTORY_DATA_STREAM, item);\n            }, exception -> {\n                logger.error(new ParameterizedMessage(\"failed to index snapshot history item in data stream [{}]: [{}]\",\n                    SLM_HISTORY_DATA_STREAM, item), exception);\n            }));\n        } catch (IOException exception) {\n            logger.error(new ParameterizedMessage(\"failed to index snapshot history item in data stream [{}]: [{}]\",\n                SLM_HISTORY_DATA_STREAM, item), exception);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        if (slmHistoryEnabled == false) {\n            logger.trace(\"not recording snapshot history item because [{}] is [false]: [{}]\",\n                SLM_HISTORY_INDEX_ENABLED_SETTING.getKey(), item);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.cloud.dialogflow.v2;\n\npublic interface EntityTypeBatchOrBuilder\n<｜fim▁hole｜>   *\n   *\n   * <pre>\n   * A collection of entity types.\n   * </pre>\n   *\n   * <code>repeated .google.cloud.dialogflow.v2.EntityType entity_types = 1;</code>\n   */\n  java.util.List<com.google.cloud.dialogflow.v2.EntityType> getEntityTypesList();\n  /**\n   *\n   *\n   * <pre>\n   * A collection of entity types.\n   * </pre>\n   *\n   * <code>repeated .google.cloud.dialogflow.v2.EntityType entity_types = 1;</code>\n   */\n  com.google.cloud.dialogflow.v2.EntityType getEntityTypes(int index);\n  /**\n   *\n   *\n   * <pre>\n   * A collection of entity types.\n   * </pre>\n   *\n   * <code>repeated .google.cloud.dialogflow.v2.EntityType entity_types = 1;</code>\n   */\n  int getEntityTypesCount();\n  /**\n   *\n   *\n   * <pre>\n   * A collection of entity types.\n   * </pre>\n   *\n   * <code>repeated .google.cloud.dialogflow.v2.EntityType entity_types = 1;</code>\n   */\n  java.util.List<? extends com.google.cloud.dialogflow.v2.EntityTypeOrBuilder>\n      getEntityTypesOrBuilderList();\n  /**\n   *\n   *\n   * <pre>\n   * A collection of entity types.\n   * </pre>\n   *\n   * <code>repeated .google.cloud.dialogflow.v2.EntityType entity_types = 1;</code>\n   */\n  com.google.cloud.dialogflow.v2.EntityTypeOrBuilder getEntityTypesOrBuilder(int index);\n}<｜fim▁end｜>",
    "response": "    extends\n    // @@protoc_insertion_point(interface_extends:google.cloud.dialogflow.v2.EntityTypeBatch)\n    com.google.protobuf.MessageOrBuilder {\n\n  /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.bookkeeper.test;\n\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Enumeration;\nimport java.util.Random;\nimport java.util.Set;\n\nimport org.apache.bookkeeper.client.AsyncCallback.AddCallback;\nimport org.apache.bookkeeper.client.LedgerEntry;\nimport org.apache.bookkeeper.client.AsyncCallback.CloseCallback;\nimport org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\nimport org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\nimport org.apache.bookkeeper.client.LedgerHandle;\nimport org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\nimport org.apache.bookkeeper.client.BookKeeper.DigestType;\nimport org.apache.log4j.Logger;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runners.Parameterized.Parameters;\n\npublic class AsyncLedgerOpsTest extends BaseTestCase implements AddCallback, ReadCallback, CreateCallback,\n        CloseCallback, OpenCallback {\n    static Logger LOG = Logger.getLogger(BookieClientTest.class);\n\n    DigestType digestType;\n\n    public AsyncLedgerOpsTest(DigestType digestType) {\n        super(3);\n        this.digestType = digestType;\n    }\n\n    @Parameters\n    public static Collection<Object[]> configs(){\n        return Arrays.asList(new Object[][]{ {DigestType.MAC }, {DigestType.CRC32}});\n    }\n\n    byte[] ledgerPassword = \"aaa\".getBytes();\n    LedgerHandle lh, lh2;\n    long ledgerId;\n    Enumeration<LedgerEntry> ls;\n\n    // test related variables\n    int numEntriesToWrite = 20;\n    int maxInt = 2147483647;\n    Random rng; // Random Number Generator\n    ArrayList<byte[]> entries; // generated entries\n    ArrayList<Integer> entriesSize;\n\n    // Synchronization\n    SyncObj sync;\n    Set<Object> syncObjs;\n\n    class SyncObj {\n        int counter;\n        boolean value;\n\n        public SyncObj() {\n            counter = 0;\n            value = false;\n        }\n    }\n\n    class ControlObj {\n        LedgerHandle lh;\n\n        void setLh(LedgerHandle lh) {\n            this.lh = lh;\n        }\n\n        LedgerHandle getLh() {\n            return lh;\n        }\n<｜fim▁hole｜>\n    @Test\n    public void testAsyncCreateClose() throws IOException {\n        try {\n\n            ControlObj ctx = new ControlObj();\n\n            synchronized (ctx) {\n                LOG.info(\"Going to create ledger asynchronously\");\n                bkc.asyncCreateLedger(3, 2, digestType, ledgerPassword, this, ctx);\n\n                ctx.wait();\n            }\n\n            // bkc.initMessageDigest(\"SHA1\");\n            LedgerHandle lh = ctx.getLh();\n            ledgerId = lh.getId();\n            LOG.info(\"Ledger ID: \" + lh.getId());\n            for (int i = 0; i < numEntriesToWrite; i++) {\n                ByteBuffer entry = ByteBuffer.allocate(4);\n                entry.putInt(rng.nextInt(maxInt));\n                entry.position(0);\n\n                entries.add(entry.array());\n                entriesSize.add(entry.array().length);\n                lh.asyncAddEntry(entry.array(), this, sync);\n            }\n\n            // wait for all entries to be acknowledged\n            synchronized (sync) {\n                while (sync.counter < numEntriesToWrite) {\n                    LOG.debug(\"Entries counter = \" + sync.counter);\n                    sync.wait();\n                }\n            }\n\n            LOG.debug(\"*** WRITE COMPLETE ***\");\n            // close ledger\n            synchronized (ctx) {\n                lh.asyncClose(this, ctx);\n                ctx.wait();\n            }\n\n            // *** WRITING PART COMPLETE // READ PART BEGINS ***\n\n            // open ledger\n            synchronized (ctx) {\n                bkc.asyncOpenLedger(ledgerId, digestType, ledgerPassword, this, ctx);\n                ctx.wait();\n            }\n            lh = ctx.getLh();\n\n            LOG.debug(\"Number of entries written: \" + lh.getLastAddConfirmed());\n            assertTrue(\"Verifying number of entries written\", lh.getLastAddConfirmed() == (numEntriesToWrite - 1));\n\n            // read entries\n            lh.asyncReadEntries(0, numEntriesToWrite - 1, this, sync);\n\n            synchronized (sync) {\n                while (sync.value == false) {\n                    sync.wait();\n                }\n            }\n\n            LOG.debug(\"*** READ COMPLETE ***\");\n\n            // at this point, Enumeration<LedgerEntry> ls is filled with the returned\n            // values\n            int i = 0;\n            while (ls.hasMoreElements()) {\n                ByteBuffer origbb = ByteBuffer.wrap(entries.get(i));\n                Integer origEntry = origbb.getInt();\n                byte[] entry = ls.nextElement().getEntry();\n                ByteBuffer result = ByteBuffer.wrap(entry);\n                LOG.debug(\"Length of result: \" + result.capacity());\n                LOG.debug(\"Original entry: \" + origEntry);\n\n                Integer retrEntry = result.getInt();\n                LOG.debug(\"Retrieved entry: \" + retrEntry);\n                assertTrue(\"Checking entry \" + i + \" for equality\", origEntry.equals(retrEntry));\n                assertTrue(\"Checking entry \" + i + \" for size\", entry.length == entriesSize.get(i).intValue());\n                i++;\n            }\n            assertTrue(\"Checking number of read entries\", i == numEntriesToWrite);\n            lh.close();\n        } catch (InterruptedException e) {\n            LOG.error(e);\n            fail(\"InterruptedException\");\n        } // catch (NoSuchAlgorithmException e) {\n        // e.printStackTrace();\n        // }\n\n    }\n\n    public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n        SyncObj x = (SyncObj) ctx;\n        synchronized (x) {\n            x.counter++;\n            x.notify();\n        }\n    }\n\n    public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {\n        ls = seq;\n        synchronized (sync) {\n            sync.value = true;\n            sync.notify();\n        }\n\n    }\n\n    public void createComplete(int rc, LedgerHandle lh, Object ctx) {\n        synchronized (ctx) {\n            ControlObj cobj = (ControlObj) ctx;\n            cobj.setLh(lh);\n            cobj.notify();\n        }\n    }\n\n    public void openComplete(int rc, LedgerHandle lh, Object ctx) {\n        synchronized (ctx) {\n            ControlObj cobj = (ControlObj) ctx;\n            cobj.setLh(lh);\n            cobj.notify();\n        }\n    }\n\n    public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n        synchronized (ctx) {\n            ControlObj cobj = (ControlObj) ctx;\n            cobj.notify();\n        }\n    }\n\n    @Before\n    @Override\n    public void setUp() throws Exception {\n        super.setUp();\n        rng = new Random(System.currentTimeMillis()); // Initialize the Random\n                                                      // Number Generator\n        entries = new ArrayList<byte[]>(); // initialize the entries list\n        entriesSize = new ArrayList<Integer>();\n        sync = new SyncObj(); // initialize the synchronization data structure\n    }\n\n}<｜fim▁end｜>",
    "response": "    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.magnet.mmx.server.plugin.mmxmgmt.api.query;\n\npublic class DateRange {\n\n  private Integer start;\n  private Integer end;\n\n  public DateRange() {\n  }\n\n  public DateRange(Integer start, Integer end) {\n    this.start = start;\n<｜fim▁hole｜>  }\n\n  public Integer getStart() {\n    return start;\n  }\n\n  public void setStart(Integer start) {\n    this.start = start;\n  }\n\n  public Integer getEnd() {\n    return end;\n  }\n\n  public void setEnd(Integer end) {\n    this.end = end;\n  }\n\n  /**\n   * Check if the DateRange object is valid.\n   * @param dateRange\n   * @return true if the passed date range object has either a start or end value\n   */\n  public static boolean isValid (DateRange dateRange) {\n    boolean rv = false;\n    if (dateRange.start != null || dateRange.end != null) {\n      rv = true;\n    }\n    return rv;\n  }\n}<｜fim▁end｜>",
    "response": "    this.end = end;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.pilgrim.leetcode.y2020.amazon;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class AmazonMusic {\n\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n\n        List<Integer> list = new ArrayList<>();\n        list.add(4);\n        list.add(10);\n        list.add(50);\n        list.add(90);\n        list.add(30);\n\n        getSongPairCount(list);\n    }\n\n    public static long getSongPairCount(List<Integer> songs) {\n        if (songs == null || songs.isEmpty() || songs.size() > 100000) {\n            return 0;\n        }\n\n        long res = 0;\n\n        // remainder, count\n        Map<Integer, Integer> map = new HashMap<>();\n\n<｜fim▁hole｜>                return 0;\n            }\n\n            int sr = song % 60;\n            Integer count = map.get(sr);\n\n            if (count == null) {\n                count = 0;\n            }\n            count++;\n\n            map.put(sr, count);\n        }\n\n        for (int i = 0; i < songs.size(); i++) {\n            int sr = songs.get(i) % 60;\n            Integer count = map.get(sr);\n            count--;\n            if (count == 0) {\n                map.remove(sr);\n            }\n            else {\n                map.put(sr,  count);\n            }\n\n            // looking for this reminder in the map\n            int lR = 60 - sr;\n            if (lR == 60) {\n                lR = 0;\n            }\n\n            if (map.get(lR) != null) {\n                res += map.get(lR);\n            }\n        }\n\n        return res;\n    }\n}<｜fim▁end｜>",
    "response": "        for (int i = 0; i < songs.size(); i++) {\n            int song = songs.get(i);\n            if (song < 1 || song > 1000) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.github.vcbr.bidr.profile.domain;\n\npublic interface UserAddress {\n\n    public Integer getId();\n\n    public void setId(Integer id);  \n\n    public String getAddressName();\n\n    public void setAddressName(String addressName);\n\n<｜fim▁hole｜>\n    public void setUser(User user);\n\n    public Address getAddress();\n\n    public void setAddress(Address address);\n\n}<｜fim▁end｜>",
    "response": "    public User getUser();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package psiprobe.controllers.apps;\n\nimport javax.inject.Inject;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport org.apache.catalina.Context;\nimport org.springframework.web.bind.ServletRequestUtils;\nimport org.springframework.web.servlet.ModelAndView;\n\nimport psiprobe.beans.ResourceResolver;\nimport psiprobe.controllers.AbstractContextHandlerController;\nimport psiprobe.model.Application;\nimport psiprobe.model.stats.StatsCollection;\nimport psiprobe.tools.ApplicationUtils;\nimport psiprobe.tools.SecurityUtils;\n\npublic class BaseGetApplicationController extends AbstractContextHandlerController {\n\n  /** denotes whether extended application information and statistics should be collected. */\n  private boolean extendedInfo;\n\n  /** The stats collection. */\n  @Inject\n  private StatsCollection statsCollection;\n\n  /** The collection period. */\n  private long collectionPeriod;\n\n  /**\n   * Checks if is extended info.\n   *\n   * @return true, if is extended info\n   */\n  public boolean isExtendedInfo() {\n    return extendedInfo;\n  }\n\n  /**\n   * Sets the extended info.\n   *\n   * @param extendedInfo the new extended info\n   */\n  public void setExtendedInfo(boolean extendedInfo) {\n    this.extendedInfo = extendedInfo;\n  }\n\n  /**\n   * Gets the stats collection.\n   *\n   * @return the stats collection\n   */\n  public StatsCollection getStatsCollection() {\n    return statsCollection;\n  }\n\n  /**\n   * Sets the stats collection.\n   *\n   * @param statsCollection the new stats collection\n   */\n  public void setStatsCollection(StatsCollection statsCollection) {\n    this.statsCollection = statsCollection;\n  }\n\n  /**\n   * Gets the collection period.\n   *\n   * @return the collection period\n   */\n  public long getCollectionPeriod() {\n    return collectionPeriod;\n  }\n\n  /**\n<｜fim▁hole｜>   * @param collectionPeriod the new collection period\n   */\n  public void setCollectionPeriod(long collectionPeriod) {\n    this.collectionPeriod = collectionPeriod;\n  }\n\n  @Override\n  protected ModelAndView handleContext(String contextName, Context context,\n      HttpServletRequest request, HttpServletResponse response) throws Exception {\n\n    boolean calcSize = ServletRequestUtils.getBooleanParameter(request, \"size\", false)\n        && SecurityUtils.hasAttributeValueRole(getServletContext(), request);\n\n    ResourceResolver resourceResolver = getContainerWrapper().getResourceResolver();\n    Application app = ApplicationUtils.getApplication(context,\n        isExtendedInfo() ? resourceResolver : null, calcSize, getContainerWrapper());\n\n    if (isExtendedInfo() && getStatsCollection() != null) {\n      String avgStatisticName = \"app.avg_proc_time.\" + app.getName();\n      app.setAvgTime(getStatsCollection().getLastValueForStat(avgStatisticName));\n    }\n\n    return new ModelAndView(getViewName()).addObject(\"app\", app)\n        .addObject(\"no_resources\", !resourceResolver.supportsPrivateResources())\n        .addObject(\"collectionPeriod\", getCollectionPeriod());\n  }\n\n}<｜fim▁end｜>",
    "response": "   * Sets the collection period.\n   *\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.cassandra.utils;\n\nimport java.io.*;\nimport java.text.DecimalFormat;\nimport java.util.*;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\nimport org.apache.cassandra.concurrent.DebuggableThreadPoolExecutor;\nimport org.apache.cassandra.concurrent.ThreadFactoryImpl;\nimport org.apache.cassandra.config.DatabaseDescriptor;\nimport org.apache.log4j.Logger;\n\npublic class FileUtils\n{\n    private static Logger logger_ = Logger.getLogger(FileUtils.class);\n    private static final DecimalFormat df_ = new DecimalFormat(\"#.##\");\n    private static final double kb_ = 1024d;\n    private static final double mb_ = 1024*1024d;\n    private static final double gb_ = 1024*1024*1024d;\n    private static final double tb_ = 1024*1024*1024*1024d;\n\n    private static ExecutorService deleter_ = new DebuggableThreadPoolExecutor(\"FILEUTILS-DELETE-POOL\");\n\n    public static void shutdown()\n    {\n        deleter_.shutdownNow();\n    }\n\n    public static void deleteWithConfirm(File file) throws IOException\n    {\n        assert file.exists() : \"attempted to delete non-existing file \" + file.getName();\n        if (!file.delete())\n        {\n            throw new IOException(\"Failed to delete \" + file.getName());\n        }\n    }\n\n    public static class Deleter implements Runnable\n    {\n        File file_ = null;\n\n        public Deleter(File f)\n        {\n            file_ = f;\n        }\n\n        public void run()\n        {\n            if(file_ == null)\n                return;\n            logger_.info(\"*** Deleting \" + file_.getName() + \" ***\");\n            if(!file_.delete())\n            {\n                logger_.warn(\"Warning : Unable to delete file \" + file_.getAbsolutePath());\n            }\n        }\n    }\n\n    public static class FileComparator implements Comparator<File>\n    {\n        public int compare(File f, File f2)\n        {\n            return (int)(f.lastModified() - f2.lastModified());\n        }\n    }\n\n    public static void createDirectory(String directory) throws IOException\n    {\n        File file = new File(directory);\n        if (!file.exists())\n        {\n            if (!file.mkdirs())\n            {\n                throw new IOException(\"unable to mkdirs \" + directory);\n            }\n        }\n    }\n\n    public static void createFile(String directory) throws IOException\n    {\n        File file = new File(directory);\n        if ( !file.exists() )\n            file.createNewFile();\n    }\n\n    public static boolean isExists(String filename) throws IOException\n    {\n        File file = new File(filename);\n        return file.exists();\n    }\n\n    public static boolean delete(String file)\n    {\n        File f = new File(file);\n        return f.delete();\n    }\n\n    public static void deleteAsync(String file) throws IOException\n    {\n        File f = new File(file);\n        Runnable deleter = new Deleter(f);\n        deleter_.submit(deleter);\n    }\n\n    public static boolean delete(List<String> files) throws IOException\n    {\n        boolean bVal = true;\n        for ( int i = 0; i < files.size(); ++i )\n        {\n            String file = files.get(i);\n            bVal = delete(file);\n            if (bVal)\n            {\n                if (logger_.isDebugEnabled())\n                  logger_.debug(\"Deleted file \" + file);\n                files.remove(i);\n            }\n        }\n        return bVal;\n    }\n\n    public static void delete(File[] files) throws IOException\n    {\n        for ( File file : files )\n        {\n            file.delete();\n        }\n    }\n\n    public static String stringifyFileSize(double value)\n    {\n        double d = 0d;\n        if ( value >= tb_ )\n        {\n            d = value / tb_;\n            String val = df_.format(d);\n            return val + \" TB\";\n        }\n        else if ( value >= gb_ )\n        {\n            d = value / gb_;\n            String val = df_.format(d);\n            return val + \" GB\";\n        }\n        else if ( value >= mb_ )\n        {\n            d = value / mb_;\n            String val = df_.format(d);\n            return val + \" MB\";\n        }\n        else if ( value >= kb_ )\n        {\n            d = value / kb_;\n            String val = df_.format(d);\n            return val + \" KB\";\n        }\n        else\n        {       \n            String val = df_.format(value);\n            return val + \" bytes.\";\n        }        \n    }\n\n    public static double stringToFileSize(String value)\n    {        \n        String[] peices = value.split(\" \");\n        double d = Double.valueOf(peices[0]);\n        if ( peices[1].equals(\"TB\") )\n        {\n            d *= tb_;\n        }\n        else if ( peices[1].equals(\"GB\") )\n        {\n            d *= gb_;\n        }\n        else if ( peices[1].equals(\"MB\") )\n        {\n            d *= mb_;\n        }\n        else if ( peices[1].equals(\"KB\") )\n        {\n            d *= kb_;\n        }\n        else\n        {\n            d *= 1;\n        }\n        return d;\n    }\n\n    /**\n     * calculate the total space used by a file or directory\n     * \n<｜fim▁hole｜>     */\n    public static long getUsedDiskSpaceForPath(String path)\n    {\n        File file = new File(path);\n\n        if (file.isFile()) \n        {\n            return file.length();\n        }\n\n        long diskSpace = 0;\n        for (File childFile: file.listFiles())\n        {\n            diskSpace += getUsedDiskSpaceForPath(childFile.getPath());\n        }\n        return diskSpace;\n    }\n\n    public static long getUsedDiskSpace()\n    {\n        long diskSpace = 0L;\n        String[] directories = DatabaseDescriptor.getAllDataFileLocations();        \n        for ( String directory : directories )\n        {\n            diskSpace += getUsedDiskSpaceForPath(directory);\n        }\n\n        String value = df_.format(diskSpace);\n        return Long.parseLong(value);\n    }    \n\n    /**\n     * Deletes all files and subdirectories under \"dir\".\n     * @param dir Directory to be deleted\n     * @return boolean Returns \"true\" if all deletions were successful.\n     *                 If a deletion fails, the method stops attempting to\n     *                 delete and returns \"false\".\n     */\n    public static boolean deleteDir(File dir) {\n\n        if (dir.isDirectory()) {\n            String[] children = dir.list();\n            for (int i=0; i<children.length; i++) {\n                boolean success = deleteDir(new File(dir, children[i]));\n                if (!success) {\n                    return false;\n                }\n            }\n        }\n\n        // The directory is now empty so now it can be smoked\n        return dir.delete();\n    }\n\n    /**\n     * Create a hard link for a given file.\n     * \n     * @param sourceFile      The name of the source file.\n     * @param destinationFile The name of the destination file.\n     * \n     * @throws IOException if an error has occurred while creating the link.\n     */\n    public static void createHardLink(File sourceFile, File destinationFile) throws IOException\n    {\n        String osname = System.getProperty(\"os.name\");\n        ProcessBuilder pb;\n        if (osname.startsWith(\"Windows\"))\n        {\n            float osversion = Float.parseFloat(System.getProperty(\"os.version\"));\n            if (osversion >= 6.0f)\n            {\n                pb = new ProcessBuilder(\"cmd\", \"/c\", \"mklink\", \"/H\", destinationFile.getAbsolutePath(), sourceFile.getAbsolutePath());\n            }\n            else\n            {\n                pb = new ProcessBuilder(\"fsutil\", \"hardlink\", \"create\", destinationFile.getAbsolutePath(), sourceFile.getAbsolutePath());\n            }\n        }\n        else\n        {\n            pb = new ProcessBuilder(\"ln\", sourceFile.getAbsolutePath(), destinationFile.getAbsolutePath());\n            pb.redirectErrorStream(true);\n        }\n        Process p = pb.start();\n        try\n        {\n            p.waitFor();\n        }\n        catch (InterruptedException e)\n        {\n            throw new RuntimeException(e);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "     * @param path the path\n     * @return total space used.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.carbondata.core.scan.filter.executer;\n\nimport java.io.IOException;\nimport java.util.BitSet;\n\nimport org.apache.carbondata.core.scan.expression.exception.FilterUnsupportedException;\nimport org.apache.carbondata.core.scan.filter.intf.RowIntf;\nimport org.apache.carbondata.core.scan.processor.RawBlockletColumnChunks;\nimport org.apache.carbondata.core.util.BitSetGroup;\n\npublic class TrueFilterExecutor implements FilterExecuter {\n\n  /**\n   * API will apply filter based on resolver instance\n   *\n   * @return\n   * @throws FilterUnsupportedException\n   */\n  public BitSetGroup applyFilter(RawBlockletColumnChunks rawBlockletColumnChunks,\n      boolean useBitsetPipeLine) throws FilterUnsupportedException, IOException {\n    int numberOfPages = rawBlockletColumnChunks.getDataBlock().numberOfPages();\n    BitSetGroup group = new BitSetGroup(numberOfPages);\n    for (int i = 0; i < numberOfPages; i++) {\n      BitSet set = new BitSet();\n      set.flip(0, rawBlockletColumnChunks.getDataBlock().getPageRowCount(i));\n      group.setBitSet(set, i);\n    }\n    return group;\n<｜fim▁hole｜>    int numberOfPages = rawBlockletColumnChunks.getDataBlock().numberOfPages();\n    BitSet set = new BitSet(numberOfPages);\n    set.set(0, numberOfPages);\n    return set;\n  }\n\n  @Override\n  public boolean applyFilter(RowIntf value, int dimOrdinalMax) {\n    return true;\n  }\n\n  /**\n   * API will verify whether the block can be shortlisted based on block\n   * max and min key.\n   *\n   * @param blockMaxValue, maximum value of the\n   * @param blockMinValue\n   * @return BitSet\n   */\n  public BitSet isScanRequired(byte[][] blockMaxValue, byte[][] blockMinValue,\n      boolean[] isMinMaxSet) {\n    BitSet bitSet = new BitSet(1);\n    bitSet.flip(0, 1);\n    return bitSet;\n  }\n\n  /**\n   * It just reads necessary block for filter executor, it does not uncompress the data.\n   *\n   * @param rawBlockletColumnChunks\n   */\n  public void readColumnChunks(RawBlockletColumnChunks rawBlockletColumnChunks) {\n    // do nothing\n  }\n}<｜fim▁end｜>",
    "response": "  }\n\n  @Override\n  public BitSet prunePages(RawBlockletColumnChunks rawBlockletColumnChunks)\n      throws FilterUnsupportedException, IOException {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package feihua.generator.enums;\n\npublic enum PathPre{\n    FILE(\"file:\"),\n<｜fim▁hole｜>\n    PathPre(String value) {\n        this.value = value;\n    }\n\n    public String getValue() {\n        return value;\n    }\n}<｜fim▁end｜>",
    "response": "    CLASSPATH(\"classpath:\"),\n    PROJECT(\"project:\");\n    private String value;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.assertj.core.api.localdatetime;\n\nimport static java.time.Clock.systemUTC;\nimport static java.time.LocalDateTime.now;\nimport static java.time.temporal.ChronoUnit.SECONDS;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.assertj.core.api.Assertions.assertThatNullPointerException;\nimport static org.assertj.core.api.Assertions.within;\nimport static org.assertj.core.util.AssertionsUtil.expectAssertionError;\nimport static org.assertj.core.util.FailureMessages.actualIsNull;\n\nimport java.time.LocalDateTime;\n\nimport org.junit.jupiter.api.Test;\n\npublic class LocalDateTimeAssert_isCloseToUtcNow_Test extends LocalDateTimeAssertBaseTest {\n\n  @Test\n  public void should_pass_when_executed_within_time_offset() {\n    // GIVEN\n    LocalDateTime now = now(systemUTC());\n    // THEN\n    assertThat(now).isCloseToUtcNow(within(1, SECONDS));\n  }\n\n  @Test\n  public void should_fail_when_executed_after_time_offset() {\n    // GIVEN\n    LocalDateTime now = now(systemUTC()).minusSeconds(2);\n    // WHEN\n    AssertionError error = expectAssertionError(() -> assertThat(now).isCloseToUtcNow(within(1, SECONDS)));\n    // THEN\n    assertThat(error).hasMessageContaining(\"within 1 Seconds but difference was 2 Seconds\");\n  }\n\n  @Test\n  public void should_fail_if_actual_is_null() {\n    // GIVEN\n    LocalDateTime actual = null;\n    // WHEN\n    AssertionError error = expectAssertionError(() -> assertThat(actual).isCloseToUtcNow(within(1, SECONDS)));\n    // THEN\n    assertThat(error).hasMessage(actualIsNull());\n  }\n\n  @Test\n<｜fim▁hole｜>    assertThatNullPointerException().isThrownBy(() -> assertThat(now()).isCloseToUtcNow(null))\n                                    .withMessage(\"The offset should not be null\");\n  }\n}<｜fim▁end｜>",
    "response": "  public void should_fail_if_offset_parameter_is_null() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.azure.resourcemanager.appconfiguration.generated;\n\nimport com.azure.core.util.Context;\nimport com.azure.resourcemanager.appconfiguration.models.CheckNameAvailabilityParameters;\nimport com.azure.resourcemanager.appconfiguration.models.ConfigurationResourceType;\n\npublic final class OperationsRegionalCheckNameAvailabilitySamples {\n    /*\n     * x-ms-original-file: specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/RegionalCheckNameAvailable.json\n     */\n    /**\n     * Sample code: ConfigurationStores_CheckNameAvailable.\n     *\n     * @param manager Entry point to AppConfigurationManager.\n     */\n    public static void configurationStoresCheckNameAvailable(\n        com.azure.resourcemanager.appconfiguration.AppConfigurationManager manager) {\n        manager\n            .operations()\n            .regionalCheckNameAvailabilityWithResponse(\n                \"westus\",\n<｜fim▁hole｜>                    .withType(ConfigurationResourceType.MICROSOFT_APP_CONFIGURATION_CONFIGURATION_STORES),\n                Context.NONE);\n    }\n\n    /*\n     * x-ms-original-file: specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/RegionalCheckNameNotAvailable.json\n     */\n    /**\n     * Sample code: ConfigurationStores_CheckNameNotAvailable.\n     *\n     * @param manager Entry point to AppConfigurationManager.\n     */\n    public static void configurationStoresCheckNameNotAvailable(\n        com.azure.resourcemanager.appconfiguration.AppConfigurationManager manager) {\n        manager\n            .operations()\n            .regionalCheckNameAvailabilityWithResponse(\n                \"westus\",\n                new CheckNameAvailabilityParameters()\n                    .withName(\"contoso\")\n                    .withType(ConfigurationResourceType.MICROSOFT_APP_CONFIGURATION_CONFIGURATION_STORES),\n                Context.NONE);\n    }\n}<｜fim▁end｜>",
    "response": "                new CheckNameAvailabilityParameters()\n                    .withName(\"contoso\")\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.ignite.internal;\n\nimport java.io.Externalizable;\nimport java.io.IOException;\nimport java.io.ObjectInput;\nimport java.io.ObjectOutput;\nimport java.io.ObjectStreamException;\nimport java.util.Collection;\nimport java.util.UUID;\nimport org.apache.ignite.IgniteCheckedException;\nimport org.apache.ignite.IgniteMessaging;\nimport org.apache.ignite.cluster.ClusterGroup;\nimport org.apache.ignite.cluster.ClusterNode;\nimport org.apache.ignite.internal.cluster.ClusterGroupAdapter;\nimport org.apache.ignite.internal.processors.continuous.GridContinuousHandler;\nimport org.apache.ignite.internal.util.typedef.F;\nimport org.apache.ignite.internal.util.typedef.internal.A;\nimport org.apache.ignite.internal.util.typedef.internal.U;\nimport org.apache.ignite.lang.IgniteBiPredicate;\nimport org.jetbrains.annotations.Nullable;\n\npublic class IgniteMessagingImpl extends AsyncSupportAdapter<IgniteMessaging>\n    implements IgniteMessaging, Externalizable {\n    /** */\n    private static final long serialVersionUID = 0L;\n\n    /** */\n    private GridKernalContext ctx;\n\n    /** */\n    private ClusterGroupAdapter prj;\n\n    /**\n     * Required by {@link Externalizable}.\n     */\n    public IgniteMessagingImpl() {\n        // No-op.\n    }\n\n    /**\n     * @param ctx Kernal context.\n     * @param prj Projection.\n     * @param async Async support flag.\n     */\n    public IgniteMessagingImpl(GridKernalContext ctx, ClusterGroupAdapter prj, boolean async) {\n        super(async);\n\n        this.ctx = ctx;\n        this.prj = prj;\n    }\n\n    /** {@inheritDoc} */\n    @Override public ClusterGroup clusterGroup() {\n        return prj;\n    }\n\n    /** {@inheritDoc} */\n    @Override public void send(@Nullable Object topic, Object msg) {\n        A.notNull(msg, \"msg\");\n\n        guard();\n\n        try {\n            Collection<ClusterNode> snapshot = prj.nodes();\n\n            if (snapshot.isEmpty())\n                throw U.emptyTopologyException();\n\n            ctx.io().sendUserMessage(snapshot, msg, topic, false, 0, isAsync());\n        }\n        catch (IgniteCheckedException e) {\n            throw U.convertException(e);\n        }\n        finally {\n            unguard();\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public void send(@Nullable Object topic, Collection<?> msgs) {\n        A.ensure(!F.isEmpty(msgs), \"msgs cannot be null or empty\");\n\n        guard();\n\n        try {\n            Collection<ClusterNode> snapshot = prj.nodes();\n\n            if (snapshot.isEmpty())\n                throw U.emptyTopologyException();\n\n            for (Object msg : msgs) {\n                A.notNull(msg, \"msg\");\n\n                ctx.io().sendUserMessage(snapshot, msg, topic, false, 0, isAsync());\n            }\n        }\n        catch (IgniteCheckedException e) {\n            throw U.convertException(e);\n        }\n        finally {\n            unguard();\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public void sendOrdered(@Nullable Object topic, Object msg, long timeout) {\n        A.notNull(msg, \"msg\");\n\n        guard();\n\n        try {\n            Collection<ClusterNode> snapshot = prj.nodes();\n\n            if (snapshot.isEmpty())\n                throw U.emptyTopologyException();\n\n            if (timeout == 0)\n                timeout = ctx.config().getNetworkTimeout();\n\n<｜fim▁hole｜>        }\n        catch (IgniteCheckedException e) {\n            throw U.convertException(e);\n        }\n        finally {\n            unguard();\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public void localListen(@Nullable Object topic, IgniteBiPredicate<UUID, ?> p) {\n        A.notNull(p, \"p\");\n\n        guard();\n\n        try {\n            ctx.io().addUserMessageListener(topic, p);\n        }\n        finally {\n            unguard();\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public void stopLocalListen(@Nullable Object topic, IgniteBiPredicate<UUID, ?> p) {\n        A.notNull(p, \"p\");\n\n        guard();\n\n        try {\n            ctx.io().removeUserMessageListener(topic, p);\n        }\n        finally {\n            unguard();\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public UUID remoteListen(@Nullable Object topic, IgniteBiPredicate<UUID, ?> p) {\n        A.notNull(p, \"p\");\n\n        guard();\n\n        try {\n            GridContinuousHandler hnd = new GridMessageListenHandler(topic, (IgniteBiPredicate<UUID, Object>)p);\n\n            return saveOrGet(ctx.continuous().startRoutine(hnd,\n                false,\n                1,\n                0,\n                false,\n                prj.predicate()));\n        }\n        catch (IgniteCheckedException e) {\n            throw U.convertException(e);\n        }\n        finally {\n            unguard();\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public void stopRemoteListen(UUID opId) {\n        A.notNull(opId, \"opId\");\n\n        guard();\n\n        try {\n            saveOrGet(ctx.continuous().stopRoutine(opId));\n        }\n        catch (IgniteCheckedException e) {\n            throw U.convertException(e);\n        }\n        finally {\n            unguard();\n        }\n    }\n\n    /**\n     * <tt>ctx.gateway().readLock()</tt>\n     */\n    private void guard() {\n        ctx.gateway().readLock();\n    }\n\n    /**\n     * <tt>ctx.gateway().readUnlock()</tt>\n     */\n    private void unguard() {\n        ctx.gateway().readUnlock();\n    }\n\n    /** {@inheritDoc} */\n    @Override protected IgniteMessaging createAsyncInstance() {\n        return new IgniteMessagingImpl(ctx, prj, true);\n    }\n\n    /** {@inheritDoc} */\n    @Override public void writeExternal(ObjectOutput out) throws IOException {\n        out.writeObject(prj);\n    }\n\n    /** {@inheritDoc} */\n    @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n        prj = (ClusterGroupAdapter)in.readObject();\n    }\n\n    /**\n     * Reconstructs object on unmarshalling.\n     *\n     * @return Reconstructed object.\n     * @throws ObjectStreamException Thrown in case of unmarshalling error.\n     */\n    protected Object readResolve() throws ObjectStreamException {\n        return prj.message();\n    }\n}<｜fim▁end｜>",
    "response": "            ctx.io().sendUserMessage(snapshot, msg, topic, true, timeout, false);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package antlr;\n\nimport java.io.*;\n\nimport antlr.collections.AST;\n\npublic class DumpASTVisitor implements ASTVisitor {\n    protected int level = 0;\n\n    private void tabs() {\n        for (int i = 0; i < level; i++) {\n            System.out.print(\"   \");\n        }\n    }\n\n    public void visit(AST node) {\n        // Flatten this level of the tree if it has no children\n        boolean flatten = /*true*/ false;\n        AST node2;\n        for (node2 = node; node2 != null; node2 = node2.getNextSibling()) {\n            if (node2.getFirstChild() != null) {\n                flatten = false;\n                break;\n            }\n        }\n\n        for (node2 = node; node2 != null; node2 = node2.getNextSibling()) {\n<｜fim▁hole｜>            else {\n                System.out.print(node2.getText());\n            }\n\n            System.out.print(\" [\" + node2.getType() + \"] \");\n\n            if (flatten) {\n                System.out.print(\" \");\n            }\n            else {\n                System.out.println(\"\");\n            }\n\n            if (node2.getFirstChild() != null) {\n                level++;\n                visit(node2.getFirstChild());\n                level--;\n            }\n        }\n\n        if (flatten) {\n            System.out.println(\"\");\n        }\n    }\n}<｜fim▁end｜>",
    "response": "            if (!flatten || node2 == node) {\n                tabs();\n            }\n            if (node2.getText() == null) {\n                System.out.print(\"nil\");\n            }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package it.feio.android.omninotes.utils.date;\n\nimport android.app.Activity;\nimport android.app.Dialog;\nimport android.app.TimePickerDialog;\nimport android.app.TimePickerDialog.OnTimeSetListener;\nimport android.os.Bundle;\nimport android.support.v4.app.DialogFragment;\nimport android.widget.TextView;\nimport it.feio.android.omninotes.R;\n\nimport java.util.Calendar;\n\npublic class TimePickerFragment extends DialogFragment {\n\n    public static final String DEFAULT_TIME = \"default_time\";\n\n    TextView timer_label;\n    private Activity mActivity;\n    private OnTimeSetListener mListener;\n    private Long defaultTime = null;\n\n    @Override\n    public void onAttach(Activity activity) {\n        super.onAttach(activity);\n        mActivity = activity;\n        if (getArguments().containsKey(DEFAULT_TIME)) {\n            this.defaultTime = getArguments().getLong(DEFAULT_TIME);\n        }\n\n        try {\n            mListener = (OnTimeSetListener) mActivity;\n        } catch (ClassCastException e) {\n<｜fim▁hole｜>    @Override\n    public Dialog onCreateDialog(Bundle savedInstanceState) {\n\n        Calendar cal = DateHelper.getCalendar(defaultTime);\n        int hour = cal.get(Calendar.HOUR_OF_DAY);\n        int minute = cal.get(Calendar.MINUTE);\n\n        // Create a new instance of TimePickerDialog and return it\n        boolean is24HourMode = DateHelper.is24HourMode(mActivity);\n        TimePickerDialog tpd = new TimePickerDialog(mActivity, R.style.Theme_AppCompat_Dialog_NoBackgroundOrDim, mListener, hour, minute, is24HourMode);\n        tpd.setTitle(\"\");\n        return tpd;\n    }\n\n}<｜fim▁end｜>",
    "response": "            throw new ClassCastException(activity.toString()\n                    + \" must implement OnTimeSetListener\");\n        }\n    }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package fr.norsys.aop.annotation;\n\nimport static java.lang.annotation.ElementType.TYPE;\nimport static java.lang.annotation.RetentionPolicy.RUNTIME;\n\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\n@Retention(RUNTIME)\n@Target(TYPE)\n<｜fim▁hole｜>\n    // methode qui indique un besoin de log automatique\n}<｜fim▁end｜>",
    "response": "public @interface Loggable {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package crazypants.enderio.machines.machine.alloy;\n\nimport javax.annotation.Nonnull;\n\nimport crazypants.enderio.base.network.GuiPacket;\nimport crazypants.enderio.base.network.IRemoteExec;\nimport net.minecraftforge.fml.common.network.simpleimpl.IMessage;\n\npublic interface IAlloySmelterRemoteExec {\n\n  static final int ID_MODE = 0;\n\n  public interface GUI extends IRemoteExec.IGui {\n\n    default void doSetMode(@Nonnull OperatingMode mode) {\n      GuiPacket.send(this, ID_MODE, mode);\n    }\n\n  }\n\n  public interface Container extends IRemoteExec.IContainer {\n\n    IMessage doSetMode(@Nonnull OperatingMode mode);\n\n    @Override\n    default IMessage networkExec(int id, @Nonnull GuiPacket message) {\n      switch (id) {\n<｜fim▁hole｜>        return doSetMode(message.getEnum(0, OperatingMode.class));\n      }\n      return null;\n    }\n\n  }\n\n}<｜fim▁end｜>",
    "response": "      case ID_MODE:\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.cloudera.cmf.service.hbase;\n\nimport com.cloudera.cmf.command.BasicCmdArgs;\nimport com.cloudera.cmf.command.CommandHelpers;\nimport com.cloudera.cmf.command.SvcCmdArgs;\nimport com.cloudera.cmf.event.CommandEventCode;\nimport com.cloudera.cmf.model.DbCommand;\nimport com.cloudera.cmf.model.DbRole;\nimport com.cloudera.cmf.model.DbService;\nimport com.cloudera.cmf.model.Enums.CommandState;\nimport com.cloudera.cmf.persist.CmfEntityManager;\nimport com.cloudera.cmf.service.AbstractServiceCommand;\nimport com.cloudera.cmf.service.CommandException;\nimport com.cloudera.cmf.service.ServiceDataProvider;\nimport com.cloudera.cmf.service.ServiceHandlerRegistry;\nimport com.cloudera.server.cmf.OperationsManager;\nimport com.cloudera.server.web.common.I18n;\nimport com.google.common.collect.Sets;\nimport java.util.List;\nimport java.util.Set;\nimport org.codehaus.jackson.annotate.JsonAutoDetect;\nimport org.codehaus.jackson.annotate.JsonAutoDetect.Visibility;\nimport org.codehaus.jackson.type.TypeReference;\n\npublic class HbaseWrappedDecommissionCommand extends AbstractServiceCommand<SvcCmdArgs>\n{\n  public static final String COMMAND_NAME = \"HbaseWrappedDecommission\";\n  private HbaseServiceHandler serviceHandler;\n\n  public HbaseWrappedDecommissionCommand(HbaseServiceHandler serviceHandler, ServiceDataProvider sdp)\n  {\n    super(sdp);\n    this.serviceHandler = serviceHandler;\n  }\n\n  public String getDisplayName()\n  {\n    return I18n.t(\"message.command.service.hbase.hbaseWrappedDecommission.name\");\n  }\n\n  public String getHelp()\n  {\n    return I18n.t(\"message.command.service.hbase.hbaseWrappedDecommission.help\");\n  }\n\n  public String getName()\n  {\n    return \"HbaseWrappedDecommission\";\n  }\n\n  public CommandEventCode getCommandEventCode()\n  {\n    return CommandEventCode.EV_HBASE_WRAPPED_DECOMMISSION;\n  }\n\n  public boolean isAvailable(DbService target)\n  {\n    return true;\n  }\n\n  protected void executeImpl(DbCommand cmd, DbService service, Set<DbRole> roles, SvcCmdArgs arg)\n  {\n    List arguments = arg.getArgs();\n    if (arguments.size() != 0) {\n      cmd.fail(\"Command takes no arguments\");\n      return;\n    }\n    if (!HBaseDecommissionHelpers.hbaseDecommissionAvailable(this.sdp, service, roles)) {\n      cmd.fail(I18n.t(\"message.command.service.notAvailableOnRoles\"));\n      return;\n    }\n\n    for (DbRole role : roles) {\n      if (!HbaseServiceHandler.RoleNames.REGIONSERVER.name().equals(role.getRoleType())) {\n        cmd.fail(\"Only Region Servers can be decommissioned\");\n        return;\n      }\n    }\n\n    CmfEntityManager em = CmfEntityManager.currentCmfEntityManager();\n    OperationsManager om = this.sdp.getOperationsManager();\n\n    Set runningRoles = HBaseDecommissionHelpers.preProcessRegionServersBeforeDecom(em, om, roles);\n\n    Set roleIds = Sets.newHashSet();\n    for (DbRole role : runningRoles) {\n      roleIds.add(role.getId());\n    }\n\n    if (roleIds.isEmpty()) {\n      cmd.succeed(I18n.t(\"message.decommission.success\", new Object[] { Integer.valueOf(roles.size()) }));\n    }\n    else\n      cmd.setInternalStateToJson(new State(roleIds));\n  }\n\n  public void update(CmfEntityManager cmfEM, DbCommand parent)\n    throws CommandException\n  {\n    State state = getInternalState(parent);\n\n    DbCommand balancerOffCmd = null;\n    DbCommand decommissionCmd = null;\n    DbCommand balancerOnCmd = null;\n    for (DbCommand child : parent.getChildren()) {\n      if (child.getId().equals(Long.valueOf(state.balancerOffId)))\n        balancerOffCmd = child;\n      else if (child.getId().equals(Long.valueOf(state.decommissionId)))\n        decommissionCmd = child;\n      else if (child.getId().equals(Long.valueOf(state.balancerOnId))) {\n        balancerOnCmd = child;\n      }\n\n    }\n\n    if (!state.aborted) {\n      if (balancerStep(cmfEM, parent, balancerOffCmd, state, false)) {\n        return;\n      }\n\n      if (decommissionCmd == null) {\n        Set roles = Sets.newHashSet();\n        for (Long id : state.roleIds) {\n          roles.add(cmfEM.findRole(id.longValue()));\n        }\n        DbCommand child = decommission(cmfEM, parent, roles);\n        state.decommissionId = child.getId().longValue();\n        parent.setInternalStateToJson(state);\n        return;\n      }if (decommissionCmd.isActive())\n      {\n        return;\n      }\n      state.failed = (!decommissionCmd.isSuccess());\n      parent.setInternalStateToJson(state);\n    }\n\n    if (balancerStep(cmfEM, parent, balancerOnCmd, state, true)) {\n      return;\n    }\n\n    if (state.aborted)\n      parent.finish(Enums.CommandState.CANCELLED, false, \"Aborted Command\");\n    else if (state.failed) {\n      parent.finish(Enums.CommandState.FINISHED, false, \"Failed to decommission Region Servers\");\n    }\n    else\n      parent.finish(Enums.CommandState.FINISHED, true, \"Successfully decommissioned Region Servers\");\n  }\n\n  public void abort(DbCommand parent)\n    throws CommandException\n  {\n    State state = getInternalState(parent);\n    if (state.aborted) {\n      return;\n    }\n\n    state.aborted = true;\n    parent.setInternalStateToJson(state);\n\n    if ((state.balancerOnId == -1L) && ((state.decommissionId != -1L) || (state.balancerOffId != -1L)))\n    {\n      CommandHelpers.recursiveAbortNoFinish(this.sdp, parent);\n      balancerStep(CmfEntityManager.currentCmfEntityManager(), parent, null, state, true);\n    }\n  }\n\n  private boolean balancerStep(CmfEntityManager em, DbCommand parent, DbCommand balancerCmd, State state, boolean on)\n  {\n    if (balancerCmd == null) {\n      DbCommand child = toggleBalancer(em, parent, on);\n      if (on)\n        state.balancerOnId = child.getId().longValue();\n      else {\n        state.balancerOffId = child.getId().longValue();\n<｜fim▁hole｜>        String message = String.format(\"Failed to turn %s balancer.\", new Object[] { on ? \"on\" : \"off\" });\n\n        CommandHelpers.failCmd(parent, message);\n      }\n      else {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private DbCommand toggleBalancer(CmfEntityManager em, DbCommand parent, boolean on)\n  {\n    DbService service = parent.getService();\n\n    DbRole aRunningMaster = this.serviceHandler.getARunningMaster(service);\n\n    DbCommand child = this.sdp.getServiceHandlerRegistry().executeRoleCommand(aRunningMaster, \"ToggleBalancer\", BasicCmdArgs.of(new String[] { on ? \"true\" : \"false\" }), parent);\n\n    em.flush();\n    parent.getChildren().add(child);\n    return child;\n  }\n\n  private DbCommand decommission(CmfEntityManager em, DbCommand parent, Set<DbRole> roles)\n  {\n    DbService service = parent.getService();\n    DbCommand child = this.sdp.getServiceHandlerRegistry().executeCommand(service, \"HbaseDecommission\", SvcCmdArgs.of(roles), parent);\n\n    em.flush();\n    parent.getChildren().add(child);\n    return child;\n  }\n\n  private State getInternalState(DbCommand cmd) {\n    State state = (State)cmd.getInternalStateFromJson(new TypeReference()\n    {\n    });\n    if (state == null) {\n      throw new CommandException(\"Command state could not be found.\");\n    }\n    return state;\n  }\n\n  public boolean isInternal()\n  {\n    return true;\n  }\n\n  @JsonAutoDetect(getterVisibility=JsonAutoDetect.Visibility.NONE, fieldVisibility=JsonAutoDetect.Visibility.ANY)\n  private static class State\n  {\n    long balancerOffId = -1L;\n    long decommissionId = -1L;\n    long balancerOnId = -1L;\n\n    boolean aborted = false;\n    boolean failed = false;\n\n    Set<Long> roleIds = null;\n\n    State() {\n    }\n\n    State(Set<Long> roleIds) {\n      this.roleIds = roleIds;\n    }\n  }\n}<｜fim▁end｜>",
    "response": "      }\n      parent.setInternalStateToJson(state);\n    } else if (!balancerCmd.isActive())\n    {\n      if (!balancerCmd.isSuccess()) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.roamsys.swagger.annotations;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Target ({ElementType.PARAMETER})\n@Retention (RetentionPolicy.RUNTIME)\npublic @interface SwaggerParameter {\n\n    /**\n     * Enum constants for parameter types\n     */\n    public enum ParamType {\n\n        PATH(\"path\"),\n        QUERY(\"query\"),\n        BODY(\"body\"),\n        HEADER(\"header\"),\n        FORM(\"form\");\n\n        private final String name;\n\n        private ParamType(final String name) {\n            this.name = name;\n        }\n\n        @Override\n        public String toString() {\n            return name;\n        }\n    }\n\n    /**\n     * Enum constants for parameter date types\n     */\n    public enum DataType {\n        STRING(\"string\"),\n        INTEGER(\"integer\"),\n        LONG(\"long\"),\n        BOOLEAN(\"boolean\"),\n        DATE(\"date\"),\n        DATETIME(\"dateTime\");\n\n        private final String name;\n\n        private DataType(final String name) {\n            this.name = name;\n        }\n\n        @Override\n        public String toString() {\n            return name;\n        }\n    }\n\n    /**\n     * The parameter name as it appears in the URL pattern.\n     *\n     * @return name\n     */\n    String name();\n\n    /**\n     * Defines if parameter is mandatory\n     *\n     * @return boolean if parameter is required\n     */\n    boolean required();\n\n    /**\n     * Another way to allow multiple values for a \"query\" parameter. If used, the query parameter may accept comma-separated values.\n     *\n     * @return true if multiple allowed\n     */\n    boolean allowMultiple() default false;\n\n    /**\n     * The parameter description.\n     *\n     * @return description as string\n     */\n    String description();\n\n    /**\n     * The type of the parameter (that is, the location of the parameter in the request).\n<｜fim▁hole｜>    ParamType paramType() default ParamType.PATH;\n\n    /**\n     * The data type of the parameter\n     * @return the data type (default is STRING)\n     */\n    DataType dataType() default DataType.STRING;\n}<｜fim▁end｜>",
    "response": "     *\n     * @return parameter type (default is PATH)\n     */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.kaidenho.gamelooptest;\n\nimport android.content.Context;\nimport android.graphics.Rect;\nimport android.graphics.RectF;\nimport android.os.SystemClock;\nimport android.util.Log;\n\nimport java.util.ArrayList;\nimport java.util.Random;\n\npublic class ObstacleManager extends ObjectManager{\n    private static final String TAG = ObjectManager.class.getSimpleName();\n\n    private static final int MIN_DISTANCE_BETWEEN_OBSTACLES = 400;\n    private static final int MAX_DISTANCE_BETWEEN_OBSTACLES = 600;\n\n    private float distanceSinceLastAddition = 0;\n    private int distanceNextAddition = 0;\n    private int mObstacleCounter = 0;\n\n    private int previousLeft = 0;\n    private boolean previousCenter = false;\n\n    private Context mContext;\n\n    private Scaling mScaling;\n\n    public ObstacleManager(Context context) {\n        mContext = context;\n        mScaling = new Scaling(context);\n    }\n\n    @Override\n    public void update(long timeDelta) {\n        super.update(timeDelta);\n\n        distanceSinceLastAddition -= BaseObject.scrollDistance;\n\n        Random rand = new Random();\n        int rand1;\n        int rand2;\n\n        if (distanceSinceLastAddition > distanceNextAddition) {\n            // Range is 0 - 2\n            rand1 = rand.nextInt(3);    //Excludes top value and includes 0\n            while(previousLeft == rand1) {\n                rand1 = rand.nextInt(3);\n            }\n            previousLeft = rand1;\n\n            rand2 = rand.nextInt(2);    // 1 in 2 odds of double obstacle\n\n            // Zero is at the top?\n            Obstacle obstacle = new Obstacle(new RectF(\n                    rand1 * 200,\n                    mScaling.gameHeight + 200,\n                    rand1 * 200 + 200,\n                    mScaling.gameHeight\n            ), \"Obstacle\" + mObstacleCounter);\n            mObstacleCounter++;\n\n            add(obstacle);\n\n            if ((rand1 == 0 || rand1 == 2) && rand2 == 1) {\n                if (previousCenter) {\n                    if (rand1 == 0) {\n                        Obstacle obstacle2 = new Obstacle(new RectF(\n                                400,\n                                mScaling.gameHeight + 200,\n                                600,\n                                mScaling.gameHeight\n                        ), \"Obstacle\" + mObstacleCounter);\n                        mObstacleCounter++;\n\n                        add(obstacle2);\n                    } else if (rand1 == 2) {\n                        Obstacle obstacle2 = new Obstacle(new RectF(\n                                0,\n                                mScaling.gameHeight + 200,\n                                200,\n<｜fim▁hole｜>                        mObstacleCounter++;\n\n                        add(obstacle2);\n                    }\n                } else {\n                    Obstacle obstacle2 = new Obstacle(new RectF(\n                            200,\n                            mScaling.gameHeight + 200,\n                            400,\n                            mScaling.gameHeight\n                    ), \"Obstacle\" + mObstacleCounter);\n                    mObstacleCounter++;\n\n                    add(obstacle2);\n                }\n            }\n\n            //Log.d(TAG, \"Object added to \" + this.getClass().getSimpleName() + \". New size is \" + getSize());\n\n            distanceSinceLastAddition = 0;\n            distanceNextAddition = rand.nextInt(MAX_DISTANCE_BETWEEN_OBSTACLES - MIN_DISTANCE_BETWEEN_OBSTACLES) + MIN_DISTANCE_BETWEEN_OBSTACLES;\n        }\n\n        for (int i = 0; i < mObjects.size(); i++) {\n            BaseObject.renderSystem.add((Obstacle)mObjects.get(i));\n        }\n\n        for (int i = 0; i < super.getSize(); i++) {\n            Obstacle obstacle = (Obstacle)mObjects.get(i);\n            if (obstacle.getLocationRect().top < 0) {\n                mObjects.remove(i);\n            }\n        }\n    }\n}<｜fim▁end｜>",
    "response": "                                mScaling.gameHeight\n                        ), \"Obstacle\" + mObstacleCounter);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>import com.sun.star.uno.*;\nimport com.sun.star.lang.*;\nimport com.sun.star.container.*;\nimport com.sun.star.beans.*;\nimport com.sun.star.form.*;\nimport com.sun.star.sdbc.*;\n\nclass LockControlModels extends ComponentTreeTraversal\n{\n    private String  m_sDataField;\n    private Boolean m_aLockIt;\n    private int     m_nLevel;   // nesting level relative to the form we started with\n\n    /* ------------------------------------------------------------------ */\n    public LockControlModels( String sDataField, boolean bLockIt )\n    {\n        m_sDataField = sDataField;\n        m_aLockIt = Boolean.valueOf( bLockIt );\n        m_nLevel = 0;\n    }\n\n    /* ------------------------------------------------------------------ */\n    @Override\n    protected boolean shouldStepInto( XIndexContainer xContainer )\n    {\n        if ( !super.shouldStepInto( xContainer ) )\n            return false;   // don't try to be more clever than our base class\n\n        XForm xForm = UnoRuntime.queryInterface( XForm.class, xContainer );\n        if ( ( null != xForm ) && ( m_nLevel > 1 ) )\n            // don't step into sub forms - we only handle the form we were originally\n            // applied to\n            return false;\n\n        return true;\n    }\n\n    /* ------------------------------------------------------------------ */\n    @Override\n    public void handle( Object aFormComponent ) throws com.sun.star.uno.Exception\n    {\n        // entering this nesting level\n        ++m_nLevel;\n\n        // check if the component has a DataField property\n        XPropertySet xCompProps = UNO.queryPropertySet( aFormComponent );\n        XPropertySetInfo xPSI = null;\n        if ( null != xCompProps )\n            xPSI = xCompProps.getPropertySetInfo();\n\n        if ( ( null != xPSI ) && xPSI.hasPropertyByName( \"DataField\" ) )\n        {   // indeed it has ....\n            String sDataField = (String)xCompProps.getPropertyValue( \"DataField\" );\n            if ( sDataField.equals( m_sDataField ) )\n            {   // we found a control model which is bound to what we're looking for\n                xCompProps.setPropertyValue( \"ReadOnly\", m_aLockIt );\n            }\n        }\n\n        // allow the super class to step down, if possible\n        super.handle( aFormComponent );\n\n        // leaving this nesting level\n        --m_nLevel;\n    }\n}\n\nclass ControlLock implements XRowSetListener\n{\n    private XPropertySet    m_xForm;\n    private String          m_sDataField;\n    private boolean         m_bLockingEnabled;\n    private boolean         m_bPreviousRoundLock;\n\n    /* ------------------------------------------------------------------ */\n    ControlLock( XPropertySet xForm, String sBoundDataField )\n    {\n        m_xForm = xForm;\n        m_sDataField = sBoundDataField;\n        m_bLockingEnabled = false;\n        m_bPreviousRoundLock = false;\n    }\n\n    /* ------------------------------------------------------------------ */\n    /** updates the locks on the affected controls\n    */\n    private void updateLocks( )\n    {\n        try\n        {\n            // first determine if we need to lock\n            Boolean aIsNewRecord = (Boolean)m_xForm.getPropertyValue( \"IsNew\" );\n\n            boolean bNeedLock = m_bLockingEnabled && !aIsNewRecord.booleanValue();\n\n            if ( m_bPreviousRoundLock != bNeedLock )\n            {\n                LockControlModels aLocker = new LockControlModels( m_sDataField, bNeedLock );\n                aLocker.handle( m_xForm );\n                m_bPreviousRoundLock = bNeedLock;\n            }\n\n            // please note that we choose the expensive way here: We always loop through\n            // _all_ control models belonging to the form. This clearly slows down the\n            // whole process.\n            // A better solution would be to cache the affected control models. Then we\n            // could either rely on the fact that the model hierarchy is static, or we\n            // could add ourself as container listener to the form.\n        }\n        catch(com.sun.star.uno.Exception e)\n        {\n            System.out.println(e);\n            e.printStackTrace();\n        }\n    }\n\n    /* ------------------------------------------------------------------ */\n    /** enables the locking in general\n        <p>If the control models are really locked depends on the current\n        record of the form: on the insert row, controls are never locked.</p>\n    */\n    public void enableLock( boolean bLock )\n    {\n        // remember this new setting\n        m_bLockingEnabled = bLock;\n\n        // add or remove ourself as listener to get notified of cursor moves\n        XRowSet xRowSet = UnoRuntime.queryInterface(\n            XRowSet.class, m_xForm );\n        if ( m_bLockingEnabled )\n        {\n            xRowSet.addRowSetListener( this );\n        }\n        else\n        {\n            xRowSet.removeRowSetListener( this );\n        }\n\n        // update the locks\n        updateLocks();\n    }\n\n    /* ==================================================================\n       = UNO callbacks\n<｜fim▁hole｜>    {\n        updateLocks( );\n    }\n\n    /* ------------------------------------------------------------------ */\n    public void rowChanged( EventObject aEvent ) throws com.sun.star.uno.RuntimeException\n    {\n        // not interested in\n    }\n\n    /* ------------------------------------------------------------------ */\n    public void rowSetChanged( EventObject aEvent ) throws com.sun.star.uno.RuntimeException\n    {\n        // not interested in\n    }\n\n    /* ------------------------------------------------------------------ */\n    // XEventListener overridables\n    /* ------------------------------------------------------------------ */\n    public void disposing( EventObject aEvent )\n    {\n        // not interested in\n    }\n}<｜fim▁end｜>",
    "response": "       ================================================================== */\n\n    /* ------------------------------------------------------------------ */\n    // XResetListener overridables\n    /* ------------------------------------------------------------------ */\n    public void cursorMoved( EventObject aEvent ) throws com.sun.star.uno.RuntimeException\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.visallo.web;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.google.inject.Inject;\nimport com.google.inject.Singleton;\nimport org.apache.commons.io.IOUtils;\nimport org.apache.commons.lang.StringUtils;\nimport org.json.JSONObject;\nimport org.visallo.core.config.Configuration;\nimport org.visallo.core.exception.VisalloException;\nimport org.visallo.core.model.workspace.WorkspaceRepository;\nimport org.visallo.core.security.ACLProvider;\nimport org.visallo.core.trace.Trace;\nimport org.visallo.core.trace.TraceSpan;\nimport org.visallo.core.user.User;\nimport org.visallo.web.clientapi.model.ClientApiObject;\nimport org.visallo.web.clientapi.model.ClientApiWorkspace;\nimport org.visallo.web.clientapi.util.ObjectMapperFactory;\nimport org.visallo.web.parameterProviders.VisalloBaseParameterProvider;\nimport org.visallo.webster.resultWriters.ResultWriter;\nimport org.visallo.webster.resultWriters.ResultWriterBase;\nimport org.visallo.webster.resultWriters.ResultWriterFactory;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.lang.reflect.Method;\n\n@Singleton\npublic class VisalloDefaultResultWriterFactory implements ResultWriterFactory {\n\n    private final String responseHeaderXFrameOptions;\n    private ACLProvider aclProvider;\n    private WorkspaceRepository workspaceRepository;\n\n    @Inject\n    public VisalloDefaultResultWriterFactory(\n            ACLProvider aclProvider,\n            WorkspaceRepository workspaceRepository,\n            Configuration configuration\n    ) {\n<｜fim▁hole｜>        this.workspaceRepository = workspaceRepository;\n        this.responseHeaderXFrameOptions = configuration.get(Configuration.WEB_RESPONSE_HEADER_X_FRAME_OPTIONS, null);\n    }\n\n    @Override\n    public ResultWriter createResultWriter(Method handleMethod) {\n        return new ResultWriterBase(handleMethod) {\n            private boolean resultIsClientApiObject;\n            private boolean resultIsInputStream;\n\n            @Override\n            protected String getContentType(Method handleMethod) {\n                if (JSONObject.class.equals(handleMethod.getReturnType())) {\n                    return \"application/json\";\n                }\n                if (ClientApiObject.class.isAssignableFrom(handleMethod.getReturnType())) {\n                    resultIsClientApiObject = true;\n                    return \"application/json\";\n                }\n                if (InputStream.class.isAssignableFrom(handleMethod.getReturnType())) {\n                    resultIsInputStream = true;\n                }\n                return super.getContentType(handleMethod);\n            }\n\n            @Override\n            protected void writeResult(HttpServletRequest request, HttpServletResponse response, Object result)\n                    throws IOException {\n                if (result != null) {\n                    if (!response.containsHeader(\"X-Frame-Options\")) {\n                        response.addHeader(\"X-Frame-Options\", responseHeaderXFrameOptions);\n                    }\n                    if (!response.containsHeader(\"X-Content-Type-Options\")) {\n                        response.addHeader(\"X-Content-Type-Options\", \"nosniff\");\n                    }\n                    response.setCharacterEncoding(\"UTF-8\");\n                    if (resultIsClientApiObject || result instanceof JSONObject) {\n                        response.addHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n                        response.addHeader(\"Pragma\", \"no-cache\");\n                        response.addHeader(\"Expires\", \"0\");\n                    }\n                    if (resultIsClientApiObject) {\n                        ClientApiObject clientApiObject = (ClientApiObject) result;\n                        try (TraceSpan ignored = Trace.start(\"aclProvider.appendACL\")) {\n                            if (clientApiObject != VisalloResponse.SUCCESS) {\n                                User user = CurrentUser.get(request);\n                                String workspaceId;\n                                if (clientApiObject instanceof ClientApiWorkspace) {\n                                    workspaceId = ((ClientApiWorkspace)clientApiObject).getWorkspaceId();\n                                } else {\n                                    workspaceId = VisalloBaseParameterProvider.getActiveWorkspaceIdOrDefault(request, workspaceRepository);\n                                }\n                                if (StringUtils.isEmpty(workspaceId)) {\n                                    workspaceId = user == null ? null : user.getCurrentWorkspaceId();\n                                }\n                                clientApiObject = aclProvider.appendACL(clientApiObject, user, workspaceId);\n                            }\n                        }\n                        String jsonObject;\n                        try {\n                            jsonObject = ObjectMapperFactory.getInstance().writeValueAsString(clientApiObject);\n                        } catch (JsonProcessingException e) {\n                            throw new VisalloException(\"Could not convert clientApiObject to string\", e);\n                        }\n                        response.getWriter().write(jsonObject);\n                    } else if (resultIsInputStream) {\n                        try (InputStream in = (InputStream) result) {\n                            IOUtils.copy(in, response.getOutputStream());\n                        } finally {\n                            response.flushBuffer();\n                        }\n                    } else {\n                        super.writeResult(request, response, result);\n                    }\n                }\n            }\n        };\n    }\n}<｜fim▁end｜>",
    "response": "        this.aclProvider = aclProvider;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apereo.cas.monitor;\n\nimport org.apereo.cas.adaptors.ldap.AbstractLdapTests;\nimport org.apereo.cas.config.CasCoreUtilConfiguration;\nimport org.apereo.cas.monitor.config.LdapMonitorConfiguration;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.cloud.autoconfigure.RefreshAutoConfiguration;\nimport org.springframework.test.context.TestPropertySource;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport static org.junit.Assert.*;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest(classes = {LdapMonitorConfiguration.class,\n        CasCoreUtilConfiguration.class,\n        RefreshAutoConfiguration.class})\n@TestPropertySource(locations={\"classpath:/ldapmonitor.properties\"})\n<｜fim▁hole｜>\n    @Autowired\n    @Qualifier(\"pooledLdapConnectionFactoryMonitor\")\n    private Monitor monitor;\n\n    @BeforeClass\n    public static void bootstrap() throws Exception {\n        initDirectoryServer(1383);\n    }\n\n    @Test\n    public void verifyObserve() throws Exception {\n        assertEquals(StatusCode.OK, monitor.observe().getCode());\n    }\n}<｜fim▁end｜>",
    "response": "public class PooledConnectionFactoryMonitorTests extends AbstractLdapTests {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.onosproject.pcc.rest;\n\nimport org.apache.felix.scr.annotations.Activate;\nimport org.apache.felix.scr.annotations.Component;\nimport org.apache.felix.scr.annotations.Deactivate;\nimport org.apache.felix.scr.annotations.Reference;\nimport org.apache.felix.scr.annotations.ReferenceCardinality;\nimport org.onosproject.core.ApplicationId;\nimport org.onosproject.core.CoreService;\nimport org.onosproject.net.config.ConfigFactory;\nimport org.onosproject.net.config.NetworkConfigEvent;\nimport org.onosproject.net.config.NetworkConfigListener;\nimport org.onosproject.net.config.NetworkConfigRegistry;\nimport org.onosproject.net.config.NetworkConfigService;\nimport org.onosproject.net.config.basics.SubjectFactories;\nimport org.onosproject.net.provider.AbstractProvider;\nimport org.onosproject.net.provider.ProviderId;\nimport org.onosproject.pcc.pccmgr.ctl.PcepConfig;\nimport org.osgi.service.component.ComponentContext;\nimport org.slf4j.Logger;\n\nimport java.util.List;\n\nimport static org.slf4j.LoggerFactory.getLogger;\n\n@Component(immediate = true)\npublic class PcepCfgProvider extends AbstractProvider {\n\n    private static final Logger log = getLogger(PcepCfgProvider.class);\n\n    static final String PROVIDER_ID = \"org.onosproject.pcc.rest\";\n\n    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)\n    protected CoreService coreService;\n\n    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)\n    protected NetworkConfigRegistry configRegistry;\n\n    @Reference(cardinality = ReferenceCardinality.MANDATORY_UNARY)\n    protected NetworkConfigService configService;\n\n    private final ConfigFactory configFactory =\n            new ConfigFactory(SubjectFactories.APP_SUBJECT_FACTORY, PcepAppConfig.class, \"pcepapp\") {\n                @Override\n                public PcepAppConfig createConfig() {\n                    return new PcepAppConfig();\n                }\n            };\n\n    private final NetworkConfigListener configListener = new InternalConfigListener();\n\n<｜fim▁hole｜>        super(new ProviderId(\"pcep\", PROVIDER_ID));\n    }\n\n    @Activate\n    public void activate(ComponentContext context) {\n        appId = coreService.registerApplication(PROVIDER_ID);\n        configService.addListener(configListener);\n        configRegistry.registerConfigFactory(configFactory);\n        createConfiguration();\n        log.info(\"PCEP cfg provider started\");\n    }\n\n    @Deactivate\n    public void deactivate(ComponentContext context) {\n        configRegistry.unregisterConfigFactory(configFactory);\n        configService.removeListener(configListener);\n    }\n    /**\n     * Reads the configuration and set it to the BGP-LS south bound protocol.\n     */\n    private void createConfiguration() {\n        List<PcepAppConfig.PcepPeerConfig> nodes;\n        PcepConfig pcepConfig = PcepConfig.getInstance();\n        PcepAppConfig config = configRegistry.getConfig(appId, PcepAppConfig.class);\n\n        log.info(\"pcep peer configuration received through rest\");\n        if (config == null) {\n            log.warn(\"No configuration found\");\n            return;\n        }\n\n        nodes = config.pcepPeer();\n        for (int i = 0; i < nodes.size(); i++) {\n            pcepConfig.addPeer(nodes.get(i).peerIp(), nodes.get(i).asNumber());\n            pcepConfig.connectPeer(nodes.get(i).peerIp());\n        }\n    }\n\n    private void deleteConfiguration() {\n        List<PcepAppConfig.PcepPeerConfig> nodes;\n        PcepConfig pcepConfig = PcepConfig.getInstance();\n        PcepAppConfig config = configRegistry.getConfig(appId, PcepAppConfig.class);\n\n        if (config == null) {\n            log.warn(\"No configuration found\");\n            return;\n        }\n\n        nodes = config.pcepPeer();\n        for (int i = 0; i < nodes.size(); i++) {\n            pcepConfig.disconnectPeer(nodes.get(i).peerIp());\n            pcepConfig.removePeer(nodes.get(i).peerIp());\n        }\n    }\n\n    /**\n     * BGP config listener to populate the configuration.\n     */\n    private class InternalConfigListener implements NetworkConfigListener {\n\n        @Override\n        public void event(NetworkConfigEvent event) {\n            if (!event.configClass().equals(PcepAppConfig.class)) {\n                return;\n            }\n\n            switch (event.type()) {\n                case CONFIG_ADDED:\n                    createConfiguration();\n                    break;\n                case CONFIG_REMOVED:\n                    deleteConfiguration();\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "    private ApplicationId appId;\n\n    /**\n     * Creates a Bgp config provider.\n     */\n    public PcepCfgProvider() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.intellij.xdebugger.impl.ui.tree;\n\nimport com.intellij.ide.dnd.aware.DnDAwareTree;\nimport com.intellij.openapi.actionSystem.AnActionEvent;\nimport com.intellij.openapi.actionSystem.DataContext;\nimport com.intellij.openapi.actionSystem.DataKey;\nimport com.intellij.openapi.actionSystem.DataProvider;\nimport com.intellij.openapi.project.Project;\nimport com.intellij.util.containers.ContainerUtil;\nimport com.intellij.xdebugger.XDebugSession;\nimport com.intellij.xdebugger.XSourcePosition;\nimport com.intellij.xdebugger.evaluation.XDebuggerEditorsProvider;\nimport com.intellij.xdebugger.impl.ui.tree.nodes.MessageTreeNode;\nimport com.intellij.xdebugger.impl.ui.tree.nodes.XDebuggerTreeNode;\nimport com.intellij.xdebugger.impl.ui.tree.nodes.XValueContainerNode;\nimport com.intellij.xdebugger.impl.ui.tree.nodes.XValueNodeImpl;\nimport org.jetbrains.annotations.NonNls;\nimport org.jetbrains.annotations.NotNull;\nimport org.jetbrains.annotations.Nullable;\n\nimport javax.swing.tree.DefaultTreeModel;\nimport javax.swing.tree.TreeNode;\nimport java.awt.event.MouseAdapter;\nimport java.awt.event.MouseEvent;\nimport java.util.List;\n\npublic class XDebuggerTree extends DnDAwareTree implements DataProvider {\n  private static final DataKey<XDebuggerTree> XDEBUGGER_TREE_KEY = DataKey.create(\"xdebugger.tree\");\n  private final DefaultTreeModel myTreeModel;\n  private final Project myProject;\n  private final XDebuggerEditorsProvider myEditorsProvider;\n  private XSourcePosition mySourcePosition;\n  private final List<XDebuggerTreeListener> myListeners = ContainerUtil.createEmptyCOWList();\n  private final XDebugSession mySession;\n\n  public XDebuggerTree(final @NotNull XDebugSession session, final @NotNull XDebuggerEditorsProvider editorsProvider, final @Nullable XSourcePosition sourcePosition) {\n    mySession = session;\n    myProject = session.getProject();\n    myEditorsProvider = editorsProvider;\n    mySourcePosition = sourcePosition;\n    myTreeModel = new DefaultTreeModel(null);\n    setModel(myTreeModel);\n    setCellRenderer(new XDebuggerTreeRenderer());\n    setRootVisible(false);\n    setShowsRootHandles(true);\n    addMouseListener(new MouseAdapter() {\n      @Override\n      public void mouseClicked(final MouseEvent e) {\n        if (e.getClickCount() == 2) {\n          MessageTreeNode[] treeNodes = getSelectedNodes(MessageTreeNode.class, null);\n          if (treeNodes.length == 1) {\n            MessageTreeNode node = treeNodes[0];\n            if (node.isEllipsis()) {\n              TreeNode parent = node.getParent();\n              if (parent instanceof XValueContainerNode) {\n                ((XValueContainerNode)parent).startComputingChildren();\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n\n  public void addTreeListener(@NotNull XDebuggerTreeListener listener) {\n    myListeners.add(listener);\n  }\n\n  public void removeTreeListener(@NotNull XDebuggerTreeListener listener) {\n    myListeners.remove(listener);\n  }\n\n  public void setRoot(XDebuggerTreeNode root, final boolean rootVisible) {\n    setRootVisible(rootVisible);\n    myTreeModel.setRoot(root);\n  }\n\n  public XDebuggerTreeNode getRoot() {\n    return (XDebuggerTreeNode)myTreeModel.getRoot();\n  }\n\n  @Nullable\n  public XSourcePosition getSourcePosition() {\n    return mySourcePosition;\n  }\n\n  public void setSourcePosition(final @Nullable XSourcePosition sourcePosition) {\n    mySourcePosition = sourcePosition;\n  }\n\n  @NotNull\n  public XDebuggerEditorsProvider getEditorsProvider() {\n    return myEditorsProvider;\n  }\n\n  @NotNull\n  public Project getProject() {\n    return myProject;\n  }\n\n  @NotNull\n  public XDebugSession getSession() {\n    return mySession;\n  }\n\n  public DefaultTreeModel getTreeModel() {\n    return myTreeModel;\n  }\n\n  @Nullable\n  public Object getData(@NonNls final String dataId) {\n    if (XDEBUGGER_TREE_KEY.getName().equals(dataId)) {\n      return this;\n    }\n    return null;\n  }\n\n  public void rebuildAndRestore(final XDebuggerTreeState treeState) {\n    Object rootNode = myTreeModel.getRoot();\n    if (rootNode instanceof XDebuggerTreeNode) {\n      ((XDebuggerTreeNode)rootNode).clearChildren();\n      treeState.restoreState(this);\n      repaint();\n<｜fim▁hole｜>  public void childrenLoaded(final @NotNull XDebuggerTreeNode node, final @NotNull List<XValueContainerNode<?>> children, final boolean last) {\n    for (XDebuggerTreeListener listener : myListeners) {\n      listener.childrenLoaded(node, children, last);\n    }\n  }\n\n  public void nodeLoaded(final @NotNull XValueNodeImpl node, final @NotNull String name, final @NotNull String value) {\n    for (XDebuggerTreeListener listener : myListeners) {\n      listener.nodeLoaded(node, name, value);\n    }\n  }\n\n  public void markNodesObsolete() {\n    Object root = myTreeModel.getRoot();\n    if (root instanceof XValueContainerNode<?>) {\n      markNodesObsolete((XValueContainerNode<?>)root);\n    }\n  }\n\n  private static void markNodesObsolete(final XValueContainerNode<?> node) {\n    node.setObsolete();\n    List<XValueContainerNode<?>> loadedChildren = node.getLoadedChildren();\n    if (loadedChildren != null) {\n      for (XValueContainerNode<?> child : loadedChildren) {\n        markNodesObsolete(child);\n      }\n    }\n  }\n\n  @Nullable\n  public static XDebuggerTree getTree(final AnActionEvent e) {\n    return e.getData(XDEBUGGER_TREE_KEY);\n  }\n\n  @Nullable\n  public static XDebuggerTree getTree(DataContext context) {\n    return XDEBUGGER_TREE_KEY.getData(context);\n  }\n}<｜fim▁end｜>",
    "response": "    }\n  }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package evaluation.simulator.gui.layout;\n\n<｜fim▁hole｜>import javax.swing.JTextArea;\n\nimport evaluation.simulator.gui.service.DescriptionService;\n\n@SuppressWarnings(\"serial\")\npublic class DescriptionTab extends JTextArea implements Observer {\n\n    /**\n     *  Default constructor\n     */\n    public DescriptionTab() {\n        super();\n        DescriptionService ds = DescriptionService.getInstance();\n        ds.addObserver(this);\n        this.setEditable(false);\n\n        // TODO: find correct bg color!\n        // or use another component than JTextArea\n        this.setBackground(new Color(220, 218, 213));\n    }\n\n    /* (non-Javadoc)\n     * @see java.util.Observer#update(java.util.Observable, java.lang.Object)\n     */\n    @Override\n    public void update(Observable o, Object arg) {\n        this.setText((String) arg);\n    }\n}<｜fim▁end｜>",
    "response": "import java.awt.Color;\nimport java.util.Observable;\nimport java.util.Observer;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.chuggol.crypto.gateway.gdax;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport io.reactivex.functions.Function;\n\npublic class TradeToJsonMarshaller implements Function<Trade, String> {\n<｜fim▁hole｜>\n    @Override\n    public String apply(Trade trade) throws Exception {\n        return gson.toJson(trade);\n    }\n}<｜fim▁end｜>",
    "response": "    private Gson gson = new GsonBuilder().create();\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.mozilla.gecko.preferences;\n\nimport android.content.Context;\nimport android.content.Intent;\nimport android.preference.Preference;\nimport android.text.TextUtils;\nimport android.util.AttributeSet;\n\nimport com.squareup.picasso.Picasso;\nimport com.squareup.picasso.Target;\n\nimport org.mozilla.gecko.AppConstants;\nimport org.mozilla.gecko.R;\nimport org.mozilla.gecko.Telemetry;\nimport org.mozilla.gecko.TelemetryContract;\nimport org.mozilla.gecko.TelemetryContract.Method;\nimport org.mozilla.gecko.fxa.FxAccountConstants;\nimport org.mozilla.gecko.fxa.activities.FxAccountWebFlowActivity;\nimport org.mozilla.gecko.fxa.activities.PicassoPreferenceIconTarget;\nimport org.mozilla.gecko.fxa.authenticator.AndroidFxAccount;\nimport org.mozilla.gecko.sync.ExtendedJSONObject;\nimport org.mozilla.gecko.util.ThreadUtils;\n\nclass SyncPreference extends Preference {\n    private final Context mContext;\n    private final Target profileAvatarTarget;\n\n    public SyncPreference(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        mContext = context;\n        final float cornerRadius = mContext.getResources().getDimension(R.dimen.fxaccount_profile_image_width) / 2;\n        profileAvatarTarget = new PicassoPreferenceIconTarget(mContext.getResources(), this, cornerRadius);\n    }\n\n    private void launchFxASetup() {\n        final Intent intent = new Intent(FxAccountConstants.ACTION_FXA_GET_STARTED);\n        intent.putExtra(FxAccountWebFlowActivity.EXTRA_ENDPOINT, FxAccountConstants.ENDPOINT_PREFERENCES);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);\n        mContext.startActivity(intent);\n<｜fim▁hole｜>\n    public void update(final AndroidFxAccount fxAccount) {\n        if (fxAccount == null) {\n            ThreadUtils.postToUiThread(new Runnable() {\n                @Override\n                public void run() {\n                    setTitle(R.string.pref_sync);\n                    setSummary(R.string.pref_sync_summary);\n                        // Cancel any pending task.\n                        Picasso.with(mContext).cancelRequest(profileAvatarTarget);\n                        // Clear previously set icon.\n                        // Bug 1312719 - IconDrawable is prior to IconResId, drawable must be set null before setIcon(resId)\n                        // http://androidxref.com/5.1.1_r6/xref/frameworks/base/core/java/android/preference/Preference.java#562\n                        setIcon(null);\n                        setIcon(R.drawable.sync_avatar_default);\n                }\n            });\n            return;\n        }\n\n        // Update title from account email.\n        ThreadUtils.postToUiThread(new Runnable() {\n            @Override\n            public void run() {\n                setTitle(fxAccount.getEmail());\n                setSummary(\"\");\n            }\n        });\n\n        final ExtendedJSONObject profileJSON = fxAccount.getProfileJSON();\n        if (profileJSON == null) {\n            return;\n        }\n\n        // Avatar URI empty, return early.\n        final String avatarURI = profileJSON.getString(FxAccountConstants.KEY_PROFILE_JSON_AVATAR);\n        if (TextUtils.isEmpty(avatarURI)) {\n            return;\n        }\n\n        Picasso.with(mContext)\n                .load(avatarURI)\n                .centerInside()\n                .resizeDimen(R.dimen.fxaccount_profile_image_width, R.dimen.fxaccount_profile_image_height)\n                .placeholder(R.drawable.sync_avatar_default)\n                .error(R.drawable.sync_avatar_default)\n                .into(profileAvatarTarget);\n    }\n\n    @Override\n    protected void onClick() {\n        // Launch the FxA \"Get started\" activity, which will dispatch to the\n        // right location.\n        launchFxASetup();\n        Telemetry.sendUIEvent(TelemetryContract.Event.ACTION, Method.SETTINGS, \"sync_setup\");\n    }\n}<｜fim▁end｜>",
    "response": "    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.jfrog.hudson.maven3;\n\nimport hudson.EnvVars;\nimport hudson.Extension;\nimport hudson.Launcher;\nimport hudson.maven.MavenModuleSet;\nimport hudson.maven.MavenModuleSetBuild;\nimport hudson.model.*;\nimport hudson.tasks.BuildWrapper;\nimport hudson.util.ListBoxModel;\nimport hudson.util.XStream2;\nimport org.jfrog.hudson.*;\nimport org.jfrog.hudson.action.ActionableHelper;\nimport org.jfrog.hudson.util.*;\nimport org.jfrog.hudson.util.converters.DeployerResolverOverriderConverter;\nimport org.jfrog.hudson.util.plugins.PluginsUtils;\nimport org.kohsuke.stapler.AncestorInPath;\n<｜fim▁hole｜>import java.io.IOException;\nimport java.io.PrintStream;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\n\npublic class ArtifactoryMaven3NativeConfigurator extends BuildWrapper implements ResolverOverrider {\n\n    private final ServerDetails resolverDetails;\n    /**\n     * @deprecated: Use org.jfrog.hudson.maven3.ArtifactoryMaven3NativeConfigurator#getResolverCredentialsId()()\n     */\n    @Deprecated\n    private Credentials overridingResolverCredentials;\n    private CredentialsConfig resolverCredentialsConfig;\n\n    /**\n     * @deprecated: The following deprecated variables have corresponding converters to the variables replacing them\n     */\n    @Deprecated\n    private ServerDetails details = null;\n\n    @DataBoundConstructor\n    public ArtifactoryMaven3NativeConfigurator(ServerDetails details, ServerDetails resolverDetails, CredentialsConfig resolverCredentialsConfig) {\n        this.resolverDetails = resolverDetails;\n        this.resolverCredentialsConfig = resolverCredentialsConfig;\n    }\n\n    /**\n     * Constructor for the DeployerResolverOverriderConverterTest\n     *\n     * @param details         - Old server details\n     * @param resolverDetails - new resolver details\n     */\n    public ArtifactoryMaven3NativeConfigurator(ServerDetails details, ServerDetails resolverDetails) {\n        this.details = details;\n        this.resolverDetails = resolverDetails;\n    }\n\n    public ServerDetails getDeployerDetails() {\n        return getResolverDetails();\n    }\n\n    public ServerDetails getResolverDetails() {\n        return resolverDetails;\n    }\n\n    public String getDownloadReleaseRepositoryKey() {\n        return getDeployerDetails() != null ? getDeployerDetails().getResolveReleaseRepository().getRepoKey() : null;\n    }\n\n    public String getDownloadSnapshotRepositoryKey() {\n        return getDeployerDetails() != null ? getDeployerDetails().getResolveSnapshotRepositoryKey() : null;\n    }\n\n    public String getArtifactoryName() {\n        return getDeployerDetails() != null ? getDeployerDetails().artifactoryName : null;\n    }\n\n    @Override\n    public Collection<? extends Action> getProjectActions(AbstractProject project) {\n        return Collections.emptyList();\n    }\n\n    public boolean isOverridingDefaultResolver() {\n        return resolverCredentialsConfig != null && resolverCredentialsConfig.isCredentialsProvided();\n    }\n\n    public Credentials getOverridingResolverCredentials() {\n        return overridingResolverCredentials;\n    }\n\n    public CredentialsConfig getResolverCredentialsConfig() {\n        return resolverCredentialsConfig;\n    }\n\n    @Override\n    public Environment setUp(final AbstractBuild build, Launcher launcher, BuildListener listener)\n            throws IOException, InterruptedException {\n        if (!(build instanceof MavenModuleSetBuild)) {\n            return new Environment() {\n            };\n        }\n\n        PrintStream log = listener.getLogger();\n        log.println(\"Jenkins Artifactory Plugin version: \" + ActionableHelper.getArtifactoryPluginVersion());\n        EnvVars envVars = build.getEnvironment(listener);\n        boolean supportedMavenVersion =\n                MavenVersionHelper.isAtLeastResolutionCapableVersion((MavenModuleSetBuild) build, envVars, listener);\n        if (!supportedMavenVersion) {\n            log.println(\"Artifactory resolution is not active. Maven 3.0.2 or higher is required to \" +\n                    \"force resolution from Artifactory.\");\n            return new Environment() {\n            };\n        }\n\n        /**\n         * {@link org.jfrog.hudson.maven3.Maven3ExtractorListener} will populate the resolver context\n         * */\n        return new Environment() {\n        };\n    }\n\n    public ArtifactoryServer getArtifactoryServer() {\n        List<JFrogPlatformInstance> jfrogInstances = getDescriptor().getJfrogInstances();\n        for (JFrogPlatformInstance JFrogPlatformInstance : jfrogInstances) {\n            if (JFrogPlatformInstance.getId().equals(getArtifactoryName())) {\n                return JFrogPlatformInstance.getArtifactory();\n            }\n        }\n        return null;\n    }\n\n    public List<VirtualRepository> getVirtualRepositoryList() {\n        String releaseRepoKey = getDeployerDetails().getResolveReleaseRepository().getKeyFromSelect();\n        String snapshotRepoKey = getDeployerDetails().getResolveSnapshotRepository().getKeyFromSelect();\n\n        // Add the releases repo to the repositories list, in case it is not there:\n        List<VirtualRepository> repos = RepositoriesUtils.collectVirtualRepositories(null, releaseRepoKey);\n\n        // Add the snapshots repo to the repositories list, in case it is not there:\n        return RepositoriesUtils.collectVirtualRepositories(repos, snapshotRepoKey);\n    }\n\n    @Override\n    public DescriptorImpl getDescriptor() {\n        return (DescriptorImpl) super.getDescriptor();\n    }\n\n    private boolean isExtractorUsed(EnvVars env) {\n        return Boolean.parseBoolean(env.get(ExtractorUtils.EXTRACTOR_USED));\n    }\n\n    @Extension\n    public static class DescriptorImpl extends AbstractBuildWrapperDescriptor {\n        private static final String DISPLAY_NAME = \"Resolve artifacts from Artifactory\";\n        private static final String CONFIG_PREFIX = \"maven\";\n\n        public DescriptorImpl() {\n            super(ArtifactoryMaven3NativeConfigurator.class, DISPLAY_NAME, CONFIG_PREFIX);\n        }\n\n        @Override\n        public boolean isApplicable(AbstractProject<?, ?> item) {\n            this.item = item;\n            Class<?> itemClass = item.getClass();\n            return MavenModuleSet.class.equals(itemClass) ||\n                    PluginsUtils.PROMOTION_BUILD_PLUGIN_CLASS.equals(itemClass.getSimpleName());\n        }\n\n        @JavaScriptMethod\n        public RefreshServerResponse refreshResolversFromArtifactory(String url, String credentialsId, String username, String password, boolean overrideCredentials) {\n            return super.refreshResolversFromArtifactory(url, credentialsId, username, password, overrideCredentials);\n        }\n\n        @SuppressWarnings(\"unused\")\n        @RequirePOST\n        public ListBoxModel doFillCredentialsIdItems(@AncestorInPath Item project) {\n            return PluginsUtils.fillPluginCredentials(project);\n        }\n\n        @Override\n        public String getHelpFile() {\n            return \"/plugin/artifactory/help/ArtifactoryMaven3NativeConfigurator/help.html\";\n        }\n    }\n\n    /**\n     * Page Converter\n     */\n    public static final class ConverterImpl extends DeployerResolverOverriderConverter {\n        public ConverterImpl(XStream2 xstream) {\n            super(xstream);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "import org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.bind.JavaScriptMethod;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package de.gobro.andreas.pa.pa_cleint_java;\n\nimport de.gobro.andreas.pa.pa_cleint_java.R;\n\nimport android.os.Bundle;\nimport android.app.Activity;\nimport android.content.Intent;\nimport android.view.Menu;\nimport android.view.View;\nimport android.widget.EditText;\n\npublic class MainActivity extends Activity {\n\n    public final static String IP_FIELD = \"de.gobro.andreas.pa-client-java.MESSAGE\";\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n<｜fim▁hole｜>        Intent intent = new Intent(this, SendTouch.class);\n        EditText editText=(EditText) findViewById(R.id.ip_field);\n        String message = editText.getText().toString();\n        intent.putExtra(IP_FIELD, message);     \n        startActivity(intent);\n\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.main, menu);\n        return true;\n    }\n\n}<｜fim▁end｜>",
    "response": "\n    }\n\n    public void connectToGui(View view){\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.siyeh.ig.errorhandling;\n\nimport com.intellij.codeInspection.LocalInspectionTool;\nimport com.siyeh.ig.LightJavaInspectionTestCase;\n\npublic class CatchMayIgnoreExceptionInspectionTest extends LightJavaInspectionTestCase {\n\n  @Override\n  protected LocalInspectionTool getInspection() {\n    final CatchMayIgnoreExceptionInspection tool = new CatchMayIgnoreExceptionInspection();\n    tool.m_ignoreCatchBlocksWithComments = true;\n    tool.m_ignoreNonEmptyCatchBlock = false;\n    return tool;\n  }\n\n  @Override\n  protected String[] getEnvironmentClasses() {\n    return new String[] {\n      \"package junit.framework; public abstract class TestCase {}\"\n    };\n  }\n\n  public void testSimple() {\n    doStatementTest(\"    try {\\n\" +\n           \"      throw new Exception();\\n\" +\n           \"    } /*Empty 'catch' block*/catch/**/ (Exception e) {\\n\" +\n           \"}\\n\");\n  }\n\n  public void testEmptyStatement() {\n    doStatementTest(\n           \"    try {\\n\" +\n           \"      throw new Exception();\\n\" +\n           \"    } /*Empty 'catch' block*/catch/**/ (Exception e) {\\n\" +\n           \"      ;\\n\" +\n           \"    }\\n\");\n  }\n\n  public void testComment() {\n    doStatementTest(\"    try {\\n\" +\n           \"      throw new Exception();\\n\" +\n           \"    } catch (Exception e) {\\n\" +\n           \"      // comment\\n\" +\n           \"    }\\n\");\n  }\n\n  public void testIgnored() {\n    doTest(\"class C {\\n\" +\n           \"  void m() {\\n\" +\n           \"    try {\\n\" +\n           \"      throw new Exception();\\n\" +\n           \"    } catch (Exception ignored) {\\n\" +\n           \"    }\\n\" +\n           \"  }\\n\" +\n           \"}\\n\");\n  }\n\n  public void testUnused() {\n    doStatementTest(\"    try {\\n\" +\n                    \"    }\\n\" +\n                    \"    catch (RuntimeException /*Unused 'catch' parameter 'e'*/e/**/) {\\n\" +\n                    \"      System.out.println(\\\"oops something wrong\\\");\\n\" +\n                    \"    }\\n\" +\n                    \"  \");\n\n  }\n\n  public void testUsedIgnored() {\n    doStatementTest(\"    try {\\n\" +\n                    \"    }\\n\" +\n                    \"    catch (RuntimeException /*'catch' parameter named 'ignore' is used*/ignore/**/) {\\n\" +\n                    \"      //comment\\n\" +\n                    \"      ignore.printStackTrace();\\n\" +\n                    \"    }\\n\" +\n                    \"  \");\n\n  }\n\n  public void testUnusedComment() {\n    doStatementTest(\"    try {\\n\" +\n                    \"    }\\n\" +\n                    \"    catch (RuntimeException e) {  \\n\" +\n                    \"      // we do not use exception object for a reason\\n\" +\n                    \"      System.out.println(\\\"something wrong\\\");\\n\" +\n                    \"    }\\n\" +\n                    \"  \");\n  }\n\n  public void testVMExceptionIgnored() {\n    doStatementTest(\"\\n\" +\n                    \"    try {\\n\" +\n                    \"      System.out.println(\\\"hello\\\");\\n\" +\n                    \"    }\\n\" +\n                    \"    /*Unexpected VM exception like 'java.lang.NullPointerException' might be ignored in a 'catch' block*/catch/**/(Exception ex) {\\n\" +\n<｜fim▁hole｜>                    \"      }\\n\" +\n                    \"    }\\n\" +\n                    \"  \");\n  }\n\n  public void testVMExceptionIgnored2() {\n    doStatementTest(\"\\n\" +\n                    \"    try {\\n\" +\n                    \"      System.out.println(\\\"hello\\\");\\n\" +\n                    \"    }\\n\" +\n                    \"    /*Unexpected VM exception like 'java.lang.NullPointerException' might be ignored in a 'catch' block*/catch/**/(Exception ex) {\\n\" +\n                    \"      if(ex.getCause() instanceof ClassCastException) {\\n\" +\n                    \"        // report invalid cast\\n\" +\n                    \"        ex.printStackTrace();\\n\" +\n                    \"      }\\n\" +\n                    \"    }\\n\" +\n                    \"  \");\n  }\n\n  public void testVMExceptionIgnored3() {\n    doStatementTest(\"\\n\" +\n                    \"    try {\\n\" +\n                    \"      System.out.println(\\\"hello\\\");\\n\" +\n                    \"    }\\n\" +\n                    \"    /*Unexpected VM exception like 'java.lang.NullPointerException' might be ignored in a 'catch' block*/catch/**/(Exception ex) {\\n\" +\n                    \"      if(\\\"foo\\\".equals(ex.getMessage())) {\\n\" +\n                    \"        // report some exception ignoring others\\n\" +\n                    \"        ex.printStackTrace();\\n\" +\n                    \"      }\\n\" +\n                    \"    }\\n\" +\n                    \"  \");\n  }\n\n  public void testVMExceptionNotIgnored() {\n    doStatementTest(\"\\n\" +\n                    \"    try {\\n\" +\n                    \"      System.out.println(\\\"hello\\\");\\n\" +\n                    \"    }\\n\" +\n                    \"    catch(Exception ex) {\\n\" +\n                    \"      if(ex instanceof ClassCastException) {\\n\" +\n                    \"        // report invalid cast\\n\" +\n                    \"        ex.printStackTrace();\\n\" +\n                    \"      }\\n\" +\n                    \"      throw ex;\\n\" +\n                    \"    }\\n\" +\n                    \"  \");\n  }\n\n  public void testVMExceptionLeaked() {\n    doTest(\"class Exc {\\n\" +\n           \"  volatile Throwable exception;\\n\" +\n           \"  void test() {\\n\" +\n           \"    //noinspection EmptyTryBlock\\n\" +\n           \"    try {\\n\" +\n           \"      //blah blah\\n\" +\n           \"    }\\n\" +\n           \"    catch (Throwable e) {\\n\" +\n           \"      exception = e;\\n\" +\n           \"    }\\n\" +\n           \"  }\\n\" +\n           \"}\");\n  }\n\n  public void testSneakyThrow() {\n    doTest(\"class Exc {\\n\" +\n           \"  Object apply() {\\n\" +\n           \"    try {\\n\" +\n           \"      return foo();\\n\" +\n           \"    } catch (Throwable t) {\\n\" +\n           \"      throw throwChecked(t);\\n\" +\n           \"    }\\n\" +\n           \"  }\\n\" +\n           \"  \\n\" +\n           \"  native Object foo() throws Exception;\\n\" +\n           \"  \\n\" +\n           \"  @SuppressWarnings(\\\"unchecked\\\")\\n\" +\n           \"  private static <T extends Throwable> RuntimeException throwChecked(Throwable t) throws T {\\n\" +\n           \"    throw (T) t;\\n\" +\n           \"  }\\n\" +\n           \"}\\n\");\n  }\n\n}<｜fim▁end｜>",
    "response": "                    \"      if(ex instanceof ClassCastException) {\\n\" +\n                    \"        // report invalid cast\\n\" +\n                    \"        ex.printStackTrace();\\n\" +\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.chromium.components.minidump_uploader;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport static org.chromium.base.test.util.ScalableTimeout.scaleTimeout;\n\nimport org.chromium.base.ThreadUtils;\n\nimport java.util.concurrent.CountDownLatch;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicBoolean;\n\npublic class MinidumpUploadTestUtility {\n    private static final long TIME_OUT_MILLIS = 3000;\n\n    /**\n     * Utility method for running {@param minidumpUploadJob}.uploadAllMinidumps on the UI thread to\n     * avoid breaking any assertions about running on the UI thread.\n     */\n    public static void uploadAllMinidumpsOnUiThread(final MinidumpUploadJob minidumpUploadJob,\n            final MinidumpUploadJob.UploadsFinishedCallback uploadsFinishedCallback) {\n        uploadAllMinidumpsOnUiThread(\n                minidumpUploadJob, uploadsFinishedCallback, false /* blockUntilJobPosted */);\n    }\n\n    /**\n     * Utility method for running {@param minidumpUploadJob}.uploadAllMinidumps on the UI thread to\n     * avoid breaking any assertions about running on the UI thread.\n     * @param blockUntilJobPosted whether to block the current thread until the minidump-uploading\n     *                            job has been posted to the UI thread. This can be used to avoid\n     *                            some race-conditions (e.g. when waiting for variables that are\n     *                            initialized in the uploadAllMinidumps call).\n     */\n    public static void uploadAllMinidumpsOnUiThread(final MinidumpUploadJob minidumpUploadJob,\n            final MinidumpUploadJob.UploadsFinishedCallback uploadsFinishedCallback,\n            boolean blockUntilJobPosted) {\n        final CountDownLatch jobPostedLatch = new CountDownLatch(1);\n        ThreadUtils.runOnUiThread(new Runnable() {\n            @Override\n            public void run() {\n                minidumpUploadJob.uploadAllMinidumps(uploadsFinishedCallback);\n                jobPostedLatch.countDown();\n            }\n        });\n        if (blockUntilJobPosted) {\n            try {\n                assertTrue(\n                        jobPostedLatch.await(scaleTimeout(TIME_OUT_MILLIS), TimeUnit.MILLISECONDS));\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n        }\n    }\n\n    /**\n     * Utility method for uploading minidumps, and waiting for the uploads to finish.\n     * @param minidumpUploadJob the implementation to use to upload minidumps.\n     * @param expectReschedule value used to assert whether the uploads should be rescheduled,\n     *                         e.g. when uploading succeeds we should normally not expect to\n     *                         reschedule.\n     */\n    public static void uploadMinidumpsSync(\n<｜fim▁hole｜>                minidumpUploadJob, new MinidumpUploadJob.UploadsFinishedCallback() {\n                    @Override\n                    public void uploadsFinished(boolean reschedule) {\n                        wasRescheduled.set(reschedule);\n                        uploadsFinishedLatch.countDown();\n                    }\n                });\n        try {\n            assertTrue(uploadsFinishedLatch.await(\n                    scaleTimeout(TIME_OUT_MILLIS), TimeUnit.MILLISECONDS));\n            assertEquals(expectReschedule, wasRescheduled.get());\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "            MinidumpUploadJob minidumpUploadJob, final boolean expectReschedule) {\n        final CountDownLatch uploadsFinishedLatch = new CountDownLatch(1);\n        AtomicBoolean wasRescheduled = new AtomicBoolean();\n        uploadAllMinidumpsOnUiThread(\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.lotaris.jee.validation.preprocessing;\n\nimport com.lotaris.jee.validation.preprocessing.modifier.TrimModifier;\nimport com.lotaris.jee.validation.IModifier;\nimport java.lang.annotation.Annotation;\nimport java.lang.reflect.Field;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport javax.annotation.PostConstruct;\nimport javax.inject.Inject;\nimport org.slf4j.LoggerFactory;\n\npublic class ModifiersPreprocessor implements IPreprocessor {\n\n    /**\n     * Cache of preprocessing annotations for each class and their fields.\n     */\n    private static Map<Class, Map<Field, Set<Class<? extends Annotation>>>> cache;\n\n    static {\n        cache = new HashMap<>();\n    }\n\n    /**\n     * Fills the annotation cache for the specified class. This scans all fields of the class and\n     * checks if they have modifier annotations. This information is saved in a synchronized static\n     * cache.\n     *\n     * @param objectClass the class to scan for preprocessing annotations\n     * @param processors the map of registered preprocessors (the map key is the annotation type)\n<｜fim▁hole｜>\n        if (cache.containsKey(objectClass)) {\n            return;\n        }\n\n        final Map<Field, Set<Class<? extends Annotation>>> classCache = new HashMap<>();\n        cache.put(objectClass, classCache);\n\n        // for each field...\n        for (Field field : getAllFields(objectClass)) {\n\n            final Set<Class<? extends Annotation>> fieldCache = new HashSet<>();\n\n            // for each annotation on that field...\n            for (Annotation annotation : field.getAnnotations()) {\n\n                // cache the annotation type if there is a registered preprocessor for it\n                final Class<? extends Annotation> annotationType = annotation.annotationType();\n                if (processors.containsKey(annotationType)) {\n                    fieldCache.add(annotationType);\n                }\n            }\n\n            if (!fieldCache.isEmpty()) {\n                classCache.put(field, fieldCache);\n            }\n        }\n    }\n\n    /**\n     * Returns the declared and inherited fields of the specified class.\n     *\n     * @param type the class whose fields to list\n     * @return a list of fields\n     */\n    private static List<Field> getAllFields(Class type) {\n        final List<Field> fields = new ArrayList<>();\n        for (Class<?> c = type; c != null; c = c.getSuperclass()) {\n            fields.addAll(Arrays.asList(c.getDeclaredFields()));\n        }\n        return fields;\n    }\n    /**\n     * The map of preprocessors by annotation type.\n     */\n    private Map<Class<? extends Annotation>, IModifier> processorsCache;\n    //</editor-fold>\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Manual Injections\">\n    @Inject\n    protected TrimModifier trimProcessor;\n    //</editor-fold>\n\n    public ModifiersPreprocessor() {\n        processorsCache = new HashMap<>();\n    }\n\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Preprocessor Cache\">\n    /**\n     * Registers all preprocessors injected into this class.\n     */\n    @PostConstruct\n    @SuppressWarnings(\"unchecked\")\n    protected void configure() {\n\n        // scan all fields\n        for (Field field : getClass().getDeclaredFields()) {\n\n            // if it's a preprocessor, register it\n            if (IModifier.class.isAssignableFrom(field.getType())) {\n\n                try {\n                    field.setAccessible(true);\n                    final IModifier processor = (IModifier) field.get(this);\n                    processorsCache.put(processor.getAnnotationType(), processor);\n                } catch (IllegalArgumentException | IllegalAccessException ex) {\n                    LoggerFactory.getLogger(ModifiersPreprocessor.class) .error(\"Could not register pre-processor for field \" + field.getName());\n                }\n            }\n        }\n    }\n    //</editor-fold>\n\n    @Override\n    public boolean process(Object object, IPreprocessingConfig config) {\n\n        // Nothing to modify\n        if (object == null) {\n            return true;\n        }\n\n        fillCache(object.getClass(), processorsCache);\n\n        // for each field and their preprocessing annotations...\n        for (Map.Entry<Field, Set<Class<? extends Annotation>>> entry : cache.get(object.getClass()).entrySet()) {\n\n            try {\n                // process the field\n                processField(object, entry.getKey(), entry.getValue());\n            } catch (NoSuchFieldException ex) {\n                LoggerFactory.getLogger(ModifiersPreprocessor.class) .warn(\"Field \" + entry.getKey() + \" should have been cached\", ex);\n            }\n        }\n\n        return true;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    private void processField(Object object, Field field, Set<Class<? extends Annotation>> annotationTypes) throws NoSuchFieldException {\n\n        field.setAccessible(true);\n        for (Class<? extends Annotation> annotationType : annotationTypes) {\n\n            // run the preprocessor for the annotation\n            final Annotation annotation = field.getAnnotation(annotationType);\n            processorsCache.get(annotationType).process(object, field, annotation);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "     */\n    private synchronized static void fillCache(Class objectClass, Map<Class<? extends Annotation>, IModifier> processors) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package android.support.v4.view;\n\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.view.accessibility.AccessibilityEvent;\n\nclass av\n<｜fim▁hole｜>    av()\n    {\n    }\n\n    public void a(ViewGroup viewgroup, boolean flag)\n    {\n    }\n\n    public boolean a(ViewGroup viewgroup, View view, AccessibilityEvent accessibilityevent)\n    {\n        return true;\n    }\n}<｜fim▁end｜>",
    "response": "    implements au\n{\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.spongepowered.api.util;\n\nimport com.flowpowered.math.vector.Vector3d;\n\npublic enum Axis {\n\n    X(new Vector3d(1, 0, 0)),\n    Y(new Vector3d(0, 1, 0)),\n    Z(new Vector3d(0, 0, 1));\n\n    private final Vector3d direction;\n\n    private Axis(final Vector3d vector3d) {\n        this.direction = vector3d;\n    }\n\n    /**\n     * Gets the closest horizontal direction from the given vector. If the\n     * vector is the 0-Vector, this method returns {@link #X}. If the vector has\n     * the same length in a horizontal and vertical direction, a horizontal axis\n     * will be returned. If the vector has the same length in x and in z\n     * direction {@link #X} will be returned.\n     *\n     * @param vector The vector to convert to a axis\n     * @return The closest axis.\n     */\n    public static Axis getClosest(final Vector3d vector) {\n        double x = Math.abs(vector.getX());\n        double y = Math.abs(vector.getY());\n        double z = Math.abs(vector.getZ());\n        if (x < y) {\n            if (z < y) {\n                return Y;\n            } else {\n                return Z;\n            }\n        } else if (x < z) {\n            return Z;\n        } else {\n            return X;\n        }\n    }\n\n    /**\n     * Returns whether the given vector is along this axis.\n     *\n     * @param vector The vector to test\n     * @return True if it is along this axis\n     */\n    public boolean isVectorAlongAxis(final Vector3d vector) {\n        return vector.abs().normalize().sub(this.direction).lengthSquared() == 0;\n    }\n\n    /**\n     * Gets the component of the vector denoted by this axis.\n     *\n     * @param vector3d The vector\n     * @return The value of the component\n     */\n    public double getComponent(final Vector3d vector3d) {\n        switch (this) {\n            case X:\n                return this.direction.getX();\n            case Y:\n                return this.direction.getY();\n            case Z:\n                return this.direction.getZ();\n            default:\n                throw new IllegalStateException(\"Not capable of handling the \" + name() + \" axis!\");\n        }\n    }\n\n    /**\n     * Gets the direction of the vector's component denoted by this axis.\n     *\n     * @param vector3d The vector\n     * @return The direction of the component\n     */\n    public AxisDirection getDirection(final Vector3d vector3d) {\n        final double component = getComponent(vector3d);\n        if (component > 0) {\n            return AxisDirection.PLUS;\n        } else if (component == 0) {\n            return AxisDirection.ZERO;\n        } else {\n            return AxisDirection.MINUS;\n        }\n    }\n\n    /**\n     * Gets the Vector3d backing this axis.\n     *\n     * @return the Vector3d\n     */\n    public Vector3d toVector3d() {\n        return this.direction;\n    }\n\n    /**\n     * Gets the Vector3d with the given {@link AxisDirection}.\n     *\n     * @param axisDirection The direction along the axis.\n     * @return the Vector3d\n     */\n    public Vector3d toVector3dWithDirection(final AxisDirection axisDirection) {\n        return this.direction.mul(axisDirection.getSignum());\n    }\n\n    /**\n     * Checks if this is a flowerpot.\n     *\n<｜fim▁hole｜>    public static boolean isFlowerPot() {\n        return false;\n    }\n}<｜fim▁end｜>",
    "response": "     * @return Whether this is a flowerpot\n     */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.navercorp.pinpoint.rpc.buffer;\n\nimport java.nio.ByteBuffer;\n<｜fim▁hole｜>\n    @Override\n    public ByteBuffer getBuffer(int capacity) {\n        return getBuffer(DEFAULT_BYTE_ORDER, capacity);\n    }\n\n    @Override\n    public ByteBuffer getBuffer(ByteOrder endianness, int capacity) {\n        return ByteBuffer.allocateDirect(capacity).order(endianness);\n    }\n\n}<｜fim▁end｜>",
    "response": "import java.nio.ByteOrder;\n\npublic class DirectByteBufferFactory implements ByteBufferFactory {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package io.cucumber.core.runner;\n\nimport io.cucumber.core.backend.Glue;\nimport io.cucumber.core.backend.HookDefinition;\nimport io.cucumber.core.backend.StubStepDefinition;\nimport io.cucumber.core.eventbus.EventBus;\nimport io.cucumber.core.feature.TestFeatureParser;\nimport io.cucumber.core.gherkin.Feature;\nimport io.cucumber.core.gherkin.Pickle;\nimport io.cucumber.core.options.RuntimeOptions;\nimport io.cucumber.core.runtime.TimeServiceEventBus;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.ArgumentMatchers;\nimport org.mockito.InOrder;\n\nimport java.net.URI;\nimport java.time.Clock;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\n\nimport static org.mockito.Mockito.inOrder;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nclass HookOrderTest {\n\n    private final RuntimeOptions runtimeOptions = RuntimeOptions.defaultOptions();\n    private final EventBus bus = new TimeServiceEventBus(Clock.systemUTC(), UUID::randomUUID);\n\n    private final StubStepDefinition stepDefinition = new StubStepDefinition(\"I have 4 cukes in my belly\");\n    private final Feature feature = TestFeatureParser.parse(\"\" +\n            \"Feature: Test feature\\n\" +\n            \"  Scenario: Test scenario\\n\" +\n            \"     Given I have 4 cukes in my belly\\n\");\n    private final Pickle pickle = feature.getPickles().get(0);\n\n    @Test\n    void before_hooks_execute_in_order() {\n        final List<HookDefinition> hooks = mockHooks(3, Integer.MAX_VALUE, 1, -1, 0, 10000, Integer.MIN_VALUE);\n\n        TestRunnerSupplier runnerSupplier = new TestRunnerSupplier(bus, runtimeOptions) {\n            @Override\n            public void loadGlue(Glue glue, List<URI> gluePaths) {\n                glue.addStepDefinition(new StubStepDefinition(\"pattern1\"));\n<｜fim▁hole｜>                }\n\n            }\n        };\n\n        runnerSupplier.get().runPickle(pickle);\n\n        InOrder inOrder = inOrder(hooks.toArray());\n        inOrder.verify(hooks.get(6)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(3)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(4)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(2)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(0)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(5)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(1)).execute(ArgumentMatchers.any());\n    }\n\n    private List<HookDefinition> mockHooks(int... ordering) {\n        List<HookDefinition> hooks = new ArrayList<>();\n        for (int order : ordering) {\n            HookDefinition hook = mock(HookDefinition.class, \"Mock number \" + order);\n            when(hook.getOrder()).thenReturn(order);\n            when(hook.getTagExpression()).thenReturn(\"\");\n            when(hook.getLocation()).thenReturn(\"Mock location\");\n            hooks.add(hook);\n        }\n        return hooks;\n    }\n\n    @Test\n    void before_step_hooks_execute_in_order() {\n        final List<HookDefinition> hooks = mockHooks(3, Integer.MAX_VALUE, 1, -1, 0, 10000, Integer.MIN_VALUE);\n\n        TestRunnerSupplier runnerSupplier = new TestRunnerSupplier(bus, runtimeOptions) {\n            @Override\n            public void loadGlue(Glue glue, List<URI> gluePaths) {\n                glue.addStepDefinition(stepDefinition);\n                for (HookDefinition hook : hooks) {\n                    glue.addBeforeStepHook(hook);\n                }\n\n            }\n        };\n\n        runnerSupplier.get().runPickle(pickle);\n\n        InOrder inOrder = inOrder(hooks.toArray());\n        inOrder.verify(hooks.get(6)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(3)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(4)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(2)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(0)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(5)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(1)).execute(ArgumentMatchers.any());\n    }\n\n    @Test\n    void after_hooks_execute_in_reverse_order() {\n        final List<HookDefinition> hooks = mockHooks(Integer.MIN_VALUE, 2, Integer.MAX_VALUE, 4, -1, 0, 10000);\n\n        TestRunnerSupplier runnerSupplier = new TestRunnerSupplier(bus, runtimeOptions) {\n            @Override\n            public void loadGlue(Glue glue, List<URI> gluePaths) {\n                glue.addStepDefinition(stepDefinition);\n                for (HookDefinition hook : hooks) {\n                    glue.addAfterHook(hook);\n                }\n\n            }\n        };\n\n        runnerSupplier.get().runPickle(pickle);\n\n        InOrder inOrder = inOrder(hooks.toArray());\n        inOrder.verify(hooks.get(2)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(6)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(3)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(1)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(5)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(4)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(0)).execute(ArgumentMatchers.any());\n    }\n\n    @Test\n    void after_step_hooks_execute_in_reverse_order() {\n        final List<HookDefinition> hooks = mockHooks(Integer.MIN_VALUE, 2, Integer.MAX_VALUE, 4, -1, 0, 10000);\n\n        TestRunnerSupplier runnerSupplier = new TestRunnerSupplier(bus, runtimeOptions) {\n            @Override\n            public void loadGlue(Glue glue, List<URI> gluePaths) {\n                glue.addStepDefinition(stepDefinition);\n                for (HookDefinition hook : hooks) {\n                    glue.addAfterStepHook(hook);\n                }\n\n            }\n        };\n\n        runnerSupplier.get().runPickle(pickle);\n\n        InOrder inOrder = inOrder(hooks.toArray());\n        inOrder.verify(hooks.get(2)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(6)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(3)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(1)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(5)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(4)).execute(ArgumentMatchers.any());\n        inOrder.verify(hooks.get(0)).execute(ArgumentMatchers.any());\n    }\n\n    @Test\n    void hooks_order_across_many_backends() {\n        final List<HookDefinition> backend1Hooks = mockHooks(3, Integer.MAX_VALUE, 1);\n        final List<HookDefinition> backend2Hooks = mockHooks(2, Integer.MAX_VALUE, 4);\n\n        TestRunnerSupplier runnerSupplier = new TestRunnerSupplier(bus, runtimeOptions) {\n            @Override\n            public void loadGlue(Glue glue, List<URI> gluePaths) {\n                glue.addStepDefinition(stepDefinition);\n\n                for (HookDefinition hook : backend1Hooks) {\n                    glue.addBeforeHook(hook);\n                }\n                for (HookDefinition hook : backend2Hooks) {\n                    glue.addBeforeHook(hook);\n                }\n\n            }\n        };\n\n        runnerSupplier.get().runPickle(pickle);\n\n        List<HookDefinition> allHooks = new ArrayList<>();\n        allHooks.addAll(backend1Hooks);\n        allHooks.addAll(backend2Hooks);\n\n        InOrder inOrder = inOrder(allHooks.toArray());\n        inOrder.verify(backend1Hooks.get(2)).execute(ArgumentMatchers.any());\n        inOrder.verify(backend2Hooks.get(0)).execute(ArgumentMatchers.any());\n        inOrder.verify(backend1Hooks.get(0)).execute(ArgumentMatchers.any());\n        inOrder.verify(backend2Hooks.get(2)).execute(ArgumentMatchers.any());\n        inOrder.verify(backend1Hooks.get(1)).execute(ArgumentMatchers.any());\n        inOrder.verify(backend2Hooks.get(1)).execute(ArgumentMatchers.any());\n    }\n\n}<｜fim▁end｜>",
    "response": "                for (HookDefinition hook : hooks) {\n                    glue.addBeforeHook(hook);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package games.stendhal.client.gui.map;\n\nimport java.awt.Color;\nimport java.awt.Graphics;\n\nimport games.stendhal.client.entity.EntityChangeListener;\nimport games.stendhal.client.entity.IEntity;\n\nclass MovingMapObject extends MapObject implements EntityChangeListener<IEntity> {\n    /**\n     * The color of a general entity (pale green).\n     */\n    private static final Color COLOR = new Color(200, 255, 200);\n\n    MovingMapObject(final IEntity entity) {\n        super(entity);\n\n        entity.addChangeListener(this);\n    }\n\n    @Override\n    void draw(final Graphics g, final int scale) {\n        draw(g, scale, COLOR);\n    }\n\n    /**\n     * Draw the <code>RPEntity</code> in specified color.\n     * @param g Graphics context\n     * @param scale Scaling factor\n     * @param color Drawing color\n     */\n    void draw(final Graphics g, final int scale, final Color color) {\n<｜fim▁hole｜>        final int ry = worldToCanvas(y, scale);\n        final int rwidth = width * scale;\n        final int rheight = height * scale;\n\n        g.setColor(color);\n        g.fillRect(rx, ry, rwidth, rheight);\n    }\n\n    @Override\n    public void entityChanged(final IEntity entity, final Object property) {\n        if (property == IEntity.PROP_POSITION) {\n            x = entity.getX();\n            y = entity.getY();\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        final int rx = worldToCanvas(x, scale);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.google.devtools.build.lib.vfs;\n\nimport static com.google.common.truth.Truth.assertThat;\n<｜fim▁hole｜>import com.google.devtools.build.lib.vfs.DigestHashFunction.DefaultHashFunctionNotSetException;\nimport com.google.devtools.build.lib.vfs.DigestHashFunction.DigestFunctionConverter;\nimport java.lang.reflect.Field;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n@RunWith(JUnit4.class)\npublic class DigestHashFunctionGlobalsTest {\n  private final DigestFunctionConverter converter = new DigestFunctionConverter();\n\n  @Before\n  public void resetStaticDefault() throws IllegalAccessException, NoSuchFieldException {\n    // The default is effectively a Singleton, and it does not allow itself to be set multiple\n    // times. In order to test this reasonably, though, we reset the value to null,\n    // as it is before setDefault is called.\n\n    Field defaultValue = DigestHashFunction.class.getDeclaredField(\"defaultHash\");\n    defaultValue.setAccessible(true);\n    defaultValue.set(null, null);\n  }\n\n  @Test\n  public void convertReturnsTheSameValueAsTheConstant() throws Exception {\n    assertThat(converter.convert(\"sha-256\")).isSameInstanceAs(DigestHashFunction.SHA256);\n    assertThat(converter.convert(\"SHA-256\")).isSameInstanceAs(DigestHashFunction.SHA256);\n    assertThat(converter.convert(\"SHA256\")).isSameInstanceAs(DigestHashFunction.SHA256);\n    assertThat(converter.convert(\"sha256\")).isSameInstanceAs(DigestHashFunction.SHA256);\n\n    assertThat(converter.convert(\"SHA-1\")).isSameInstanceAs(DigestHashFunction.SHA1);\n    assertThat(converter.convert(\"sha-1\")).isSameInstanceAs(DigestHashFunction.SHA1);\n    assertThat(converter.convert(\"SHA1\")).isSameInstanceAs(DigestHashFunction.SHA1);\n    assertThat(converter.convert(\"sha1\")).isSameInstanceAs(DigestHashFunction.SHA1);\n  }\n\n  @Test\n  public void lateRegistrationGetsPickedUpByConverter() throws Exception {\n    DigestHashFunction.register(Hashing.goodFastHash(32), \"SHA-512\");\n\n    assertThat(converter.convert(\"SHA-512\")).isSameInstanceAs(converter.convert(\"sha-512\"));\n  }\n\n  @Test\n  public void lateRegistrationWithAlternativeNamesGetsPickedUpByConverter() throws Exception {\n    DigestHashFunction.register(Hashing.goodFastHash(64), \"SHA-384\", \"SHA384\", \"SHA_384\");\n\n    assertThat(converter.convert(\"SHA-384\")).isSameInstanceAs(converter.convert(\"SHA-384\"));\n    assertThat(converter.convert(\"Sha-384\")).isSameInstanceAs(converter.convert(\"SHA-384\"));\n    assertThat(converter.convert(\"sha-384\")).isSameInstanceAs(converter.convert(\"SHA-384\"));\n\n    assertThat(converter.convert(\"SHA384\")).isSameInstanceAs(converter.convert(\"SHA-384\"));\n    assertThat(converter.convert(\"Sha384\")).isSameInstanceAs(converter.convert(\"SHA-384\"));\n    assertThat(converter.convert(\"sha384\")).isSameInstanceAs(converter.convert(\"SHA-384\"));\n\n    assertThat(converter.convert(\"SHA_384\")).isSameInstanceAs(converter.convert(\"SHA-384\"));\n    assertThat(converter.convert(\"Sha_384\")).isSameInstanceAs(converter.convert(\"SHA-384\"));\n    assertThat(converter.convert(\"sha_384\")).isSameInstanceAs(converter.convert(\"SHA-384\"));\n  }\n\n  @Test\n  public void unsetDefaultThrows() {\n    assertThrows(DefaultHashFunctionNotSetException.class, () -> DigestHashFunction.getDefault());\n  }\n\n  @Test\n  public void setDefaultDoesNotThrow() throws Exception {\n    DigestHashFunction.setDefault(DigestHashFunction.SHA1);\n    DigestHashFunction.getDefault();\n  }\n\n  @Test\n  public void cannotSetDefaultMultipleTimes() throws Exception {\n    DigestHashFunction.setDefault(DigestHashFunction.SHA256);\n    assertThrows(\n        DigestHashFunction.DefaultAlreadySetException.class,\n        () -> DigestHashFunction.setDefault(DigestHashFunction.SHA1));\n  }\n}<｜fim▁end｜>",
    "response": "import static org.junit.Assert.assertThrows;\n\nimport com.google.common.hash.Hashing;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.pescuma.buildhealth.cli.commands.add.staticanalysis;\n\nimport io.airlift.airline.Command;\n\nimport org.pescuma.buildhealth.cli.BaseBuildHealthFilesCliCommand;\nimport org.pescuma.buildhealth.extractor.staticanalysis.ResharperInspectCodeExtractor;\n<｜fim▁hole｜>public class ResharperInspectCodeExtractorCommand extends BaseBuildHealthFilesCliCommand {\n\n    @Override\n    public void execute() {\n        buildHealth.extract(new ResharperInspectCodeExtractor(getFiles()));\n    }\n\n}<｜fim▁end｜>",
    "response": "\n@Command(name = \"resharper-inspectcode\", description = \"Add code duplication information from ReSharper InspectCode output file\")\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amazonaws.services.ssooidc.model.transform;\n\nimport javax.annotation.Generated;\n\nimport com.amazonaws.SdkClientException;\nimport com.amazonaws.Request;\n\nimport com.amazonaws.http.HttpMethodName;\n<｜fim▁hole｜>\n@Generated(\"com.amazonaws:aws-java-sdk-code-generator\")\n@SdkInternalApi\npublic class StartDeviceAuthorizationRequestProtocolMarshaller implements Marshaller<Request<StartDeviceAuthorizationRequest>, StartDeviceAuthorizationRequest> {\n\n    private static final OperationInfo SDK_OPERATION_BINDING = OperationInfo.builder().protocol(Protocol.REST_JSON).requestUri(\"/device_authorization\")\n            .httpMethodName(HttpMethodName.POST).hasExplicitPayloadMember(false).hasPayloadMembers(true).serviceName(\"AWSSSOOIDC\").build();\n\n    private final com.amazonaws.protocol.json.SdkJsonProtocolFactory protocolFactory;\n\n    public StartDeviceAuthorizationRequestProtocolMarshaller(com.amazonaws.protocol.json.SdkJsonProtocolFactory protocolFactory) {\n        this.protocolFactory = protocolFactory;\n    }\n\n    public Request<StartDeviceAuthorizationRequest> marshall(StartDeviceAuthorizationRequest startDeviceAuthorizationRequest) {\n\n        if (startDeviceAuthorizationRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n        try {\n            final ProtocolRequestMarshaller<StartDeviceAuthorizationRequest> protocolMarshaller = protocolFactory.createProtocolMarshaller(\n                    SDK_OPERATION_BINDING, startDeviceAuthorizationRequest);\n\n            protocolMarshaller.startMarshalling();\n            StartDeviceAuthorizationRequestMarshaller.getInstance().marshall(startDeviceAuthorizationRequest, protocolMarshaller);\n            return protocolMarshaller.finishMarshalling();\n        } catch (Exception e) {\n            throw new SdkClientException(\"Unable to marshall request to JSON: \" + e.getMessage(), e);\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "import com.amazonaws.services.ssooidc.model.*;\nimport com.amazonaws.transform.Marshaller;\n\nimport com.amazonaws.protocol.*;\nimport com.amazonaws.protocol.Protocol;\nimport com.amazonaws.annotation.SdkInternalApi;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.karaf.shell.support.completers;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.SortedSet;\nimport java.util.TreeSet;\n\nimport org.apache.karaf.shell.api.console.CommandLine;\nimport org.apache.karaf.shell.api.console.Completer;\nimport org.apache.karaf.shell.api.console.Session;\n\npublic class StringsCompleter\n    implements Completer\n{\n    private final SortedSet<String> strings;\n    private final boolean caseSensitive;\n\n    public StringsCompleter() {\n        this(false);\n    }\n\n    public StringsCompleter(final boolean caseSensitive) {\n        this.strings = new TreeSet<>(caseSensitive ? String::compareTo : String::compareToIgnoreCase);\n        this.caseSensitive = caseSensitive;\n    }\n\n    public StringsCompleter(final Collection<String> strings) {\n        this();\n        assert strings != null;\n        getStrings().addAll(strings);\n    }\n\n    public StringsCompleter(final String[] strings, boolean caseSensitive) {\n        this(Arrays.asList(strings), caseSensitive);\n    }\n\n    public StringsCompleter(final Collection<String> strings, boolean caseSensitive) {\n        this(caseSensitive);\n        assert strings != null;\n        getStrings().addAll(strings);\n    }\n\n    public StringsCompleter(final String[] strings) {\n        this(Arrays.asList(strings));\n    }\n\n    public SortedSet<String> getStrings() {\n        return strings;\n    }\n\n    public int complete(final Session session, final CommandLine commandLine, final List<String> candidates) {\n        // buffer could be null\n        assert candidates != null;\n\n        String buffer = commandLine.getCursorArgument();\n        if (buffer == null) {\n            buffer = \"\";\n        } else {\n            buffer = buffer.substring(0, commandLine.getArgumentPosition());\n        }\n        if (!caseSensitive) {\n            buffer = buffer.toLowerCase();\n        }\n\n        // KARAF-421, use getStrings() instead strings field.\n        SortedSet<String> matches = getStrings().tailSet(buffer);\n\n        for (String match : matches) {\n            String s = caseSensitive ? match : match.toLowerCase();\n            if (!s.startsWith(buffer)) {\n<｜fim▁hole｜>            // noinspection unchecked\n            candidates.add(match + \" \");\n        }\n\n        return candidates.isEmpty() ? -1 : commandLine.getBufferPosition() - commandLine.getArgumentPosition();\n    }\n}<｜fim▁end｜>",
    "response": "                break;\n            }\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.opengamma.collect.function;\n\nimport static org.testng.Assert.assertEquals;\n\nimport org.testng.annotations.Test;\n\n@Test\npublic class ObjLongFunctionTest {\n\n  public void test_andThen() {\n    ObjLongFunction<Integer, String> fn1 = (a, b) -> a + \"=\" + b;\n    ObjLongFunction<Integer, String> fn2 = fn1.andThen(str -> \"[\" + str + \"]\");\n<｜fim▁hole｜>\n  @Test(expectedExceptions = NullPointerException.class)\n  public void test_andThen_null() {\n    ObjLongFunction<Integer, String> fn1 = (a, b) -> a + \"=\" + b;\n    fn1.andThen(null);\n  }\n\n}<｜fim▁end｜>",
    "response": "    assertEquals(fn1.apply(2, 3L), \"2=3\");\n    assertEquals(fn2.apply(2, 3L), \"[2=3]\");\n  }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package nl.m4jit.framework.io;\n\nimport java.io.BufferedReader;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class Reader {\n\n    private BufferedReader input;\n\n    public Reader(String filepath) throws FileNotFoundException {\n\n        input = new BufferedReader(new FileReader(filepath));\n    }\n\n    public String readLine() throws IOException {\n\n        return input.readLine();\n    }\n<｜fim▁hole｜>\n        input.close();\n    }\n}<｜fim▁end｜>",
    "response": "\n    public void close() throws IOException {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package cz.muni.fi.editor;\n\n<｜fim▁hole｜>import org.springframework.test.context.junit4.SpringRunner;\n\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class MetadataEditorApplicationTests {\n\n    @Test\n    public void contextLoads() {\n    }\n\n}<｜fim▁end｜>",
    "response": "import org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.amlinv.activemq.topo.jmxutil.polling;\n\nimport com.amlinv.jmxutil.connection.impl.JMXRemoteUrlConnectionFactory;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport static org.junit.Assert.*;\n\n<｜fim▁hole｜>    public void setupTest() throws Exception {\n        this.supplier = new JMXRemoteUrlConnectionFactorySupplier();\n    }\n\n    @Test\n    public void testHandlesLocation() throws Exception {\n        assertTrue(this.supplier.handlesLocation(\"service:x\"));\n        assertTrue(this.supplier.handlesLocation(\"service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi\"));\n\n        assertFalse(this.supplier.handlesLocation(\"localhost:1099\"));\n        assertFalse(this.supplier.handlesLocation(\"jolokia:http://localhost:8080/api/jolokia\"));\n        assertFalse(this.supplier.handlesLocation(\"localhost:\"));\n        assertFalse(this.supplier.handlesLocation(\"localhost:abc\"));\n        assertFalse(this.supplier.handlesLocation(\"jvmId=123\"));\n    }\n\n    @Test\n    public void testCreateFactory() throws Exception {\n        assertTrue(this.supplier.createFactory(\"service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi\")\n                instanceof JMXRemoteUrlConnectionFactory);\n    }\n}<｜fim▁end｜>",
    "response": "public class JMXRemoteUrlConnectionFactorySupplierTest {\n\n    private JMXRemoteUrlConnectionFactorySupplier supplier;\n\n    @Before\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package tk.trocagame.trocagame.adapter;\n\nimport android.content.Context;\n\nimport android.support.v7.widget.CardView;\nimport android.support.v7.widget.RecyclerView;\nimport android.util.Log;\nimport android.view.LayoutInflater;\nimport android.view.View;\nimport android.view.ViewGroup;\nimport android.widget.ImageView;\nimport android.widget.TextView;\nimport android.widget.Toast;\n\nimport com.bumptech.glide.Glide;\n\nimport java.util.List;\n\nimport tk.trocagame.trocagame.R;\nimport tk.trocagame.trocagame.model.Comentario;\n\npublic class CommentRecyclerAdapter extends RecyclerView.Adapter<CommentRecyclerAdapter.MyViewHolder> {\n\n    private static final String TAG = CommentRecyclerAdapter.class.getName();\n    private Context context;\n    private List<Comentario> mCommentList;\n\n    public class MyViewHolder extends RecyclerView.ViewHolder {\n        public CardView commentCard;\n        public TextView userName;\n        public TextView date;\n        public TextView message;\n        public ImageView userImage;\n\n        public MyViewHolder(View view) {\n            super(view);\n            context = view.getContext();\n            commentCard = (CardView) view.findViewById(R.id.cv_comment);\n            userName = (TextView) view.findViewById(R.id.tv_comment_username);\n            date = (TextView) view.findViewById(R.id.tv_comment_date);\n            message = (TextView) view.findViewById(R.id.tv_comment_message);\n            userImage = (ImageView) view.findViewById(R.id.iv_comment_user);\n        }\n    }\n\n    public CommentRecyclerAdapter(List<Comentario> commentDataSet) {\n        this.mCommentList= commentDataSet;\n    }\n\n    @Override\n    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {\n        View itemView = LayoutInflater.from(parent.getContext())\n                .inflate(R.layout.card_comentario, parent, false);\n\n<｜fim▁hole｜>\n    @Override\n    public void onBindViewHolder(MyViewHolder holder, final int position) {\n        Comentario comentario = mCommentList.get(position);\n        holder.userName.setText(comentario.getNome_usuario());\n        holder.date.setText(comentario.getData());\n        holder.message.setText(comentario.getMensagem());\n\n        Glide.with(context)\n                .load(R.drawable.account)\n                .placeholder(R.drawable.trocagame_progess_orange)\n                .into(holder.userImage);\n        holder.commentCard.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                Comentario comentario1 = mCommentList.get(position);\n                Toast.makeText(context, \"Comentario clicado: \" + comentario1.getId(),Toast.LENGTH_SHORT).show();\n                Log.i(TAG,\"Jogo clicado: \" + comentario1.getId() + \"-\" + comentario1.getMensagem());\n            }\n        });\n    }\n\n    @Override\n    public int getItemCount() {\n        return mCommentList.size();\n    }\n\n}<｜fim▁end｜>",
    "response": "        return new MyViewHolder(itemView);\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>\n<｜fim▁hole｜>import org.jivesoftware.smack.util.PacketParserUtils;\nimport org.jivesoftware.smackx.pubsub.Item;\nimport org.jivesoftware.smackx.pubsub.PayloadItem;\nimport org.jivesoftware.smackx.pubsub.SimplePayload;\nimport org.jivesoftware.smackx.pubsub.packet.PubSubNamespace;\nimport org.xmlpull.v1.XmlPullParser;\n\npublic class ItemProvider implements PacketExtensionProvider {\n    public PacketExtension parseExtension(XmlPullParser parser) throws Exception {\n        String id = parser.getAttributeValue(null, \"id\");\n        String node = parser.getAttributeValue(null, \"node\");\n        String elem = parser.getName();\n\n        int tag = parser.next();\n\n        if (tag == XmlPullParser.END_TAG) {\n            return new Item(id, node);\n        } else {\n            String payloadElemName = parser.getName();\n            String payloadNS = parser.getNamespace();\n\n            if (ProviderManager.getInstance().getExtensionProvider(payloadElemName, payloadNS) == null) {\n                StringBuilder payloadText = new StringBuilder();\n                boolean done = false;\n                boolean isEmptyElement = false;\n\n                // Parse custom payload\n                while (!done) {\n                    if (tag == XmlPullParser.END_TAG && parser.getName().equals(elem)) {\n                        done = true;\n                    } else if (parser.getEventType() == XmlPullParser.START_TAG) {\n                        payloadText.append(\"<\").append(parser.getName());\n                        if (parser.getName().equals(payloadElemName) && (!\"\".equals(payloadNS))) {\n                            payloadText.append(\" xmlns=\\\"\").append(payloadNS).append(\"\\\"\");\n                        }\n                        int n = parser.getAttributeCount();\n                        for (int i = 0; i < n; i++) {\n                            payloadText.append(\" \").append(parser.getAttributeName(i)).append(\"=\\\"\")\n                                    .append(parser.getAttributeValue(i)).append(\"\\\"\");\n                        }\n                        if (parser.isEmptyElementTag()) {\n                            payloadText.append(\"/>\");\n                            isEmptyElement = true;\n                        } else {\n                            payloadText.append(\">\");\n                        }\n                    } else if (parser.getEventType() == XmlPullParser.END_TAG) {\n                        if (isEmptyElement) {\n                            isEmptyElement = false;\n                        } else {\n                            payloadText.append(\"</\").append(parser.getName()).append(\">\");\n                        }\n                    } else if (parser.getEventType() == XmlPullParser.TEXT) {\n                        payloadText.append(parser.getText());\n                    }\n\n                    tag = parser.next();\n                }\n                return new PayloadItem<SimplePayload>(id, node, new SimplePayload(payloadElemName, payloadNS,\n                        payloadText.toString()));\n            } else {\n                return new PayloadItem<PacketExtension>(id, node, PacketParserUtils.parsePacketExtension(\n                        payloadElemName, payloadNS, parser));\n            }\n        }\n    }\n}<｜fim▁end｜>",
    "response": "package org.jivesoftware.smackx.pubsub.provider;\n\nimport org.jivesoftware.smack.packet.PacketExtension;\nimport org.jivesoftware.smack.provider.PacketExtensionProvider;\nimport org.jivesoftware.smack.provider.ProviderManager;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.openhab.binding.neeo.internal.net;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.nio.charset.Charset;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\nimport javax.ws.rs.core.Response;\n\nimport org.apache.commons.io.IOUtils;\nimport org.eclipse.jdt.annotation.NonNullByDefault;\nimport org.eclipse.jdt.annotation.Nullable;\n\n@NonNullByDefault\npublic class HttpResponse {\n\n    /** The http status */\n    private final int httpStatus;\n\n    /** The http reason */\n    private final String httpReason;\n\n    /** The http headers */\n    private final Map<String, String> headers = new HashMap<>();\n\n    /** The contents as a raw byte array */\n    private final byte @Nullable [] contents;\n\n    /**\n     * Instantiates a new http response from the {@link Response}.\n     *\n     * @param response the non-null response\n     * @throws IOException Signals that an I/O exception has occurred.\n     */\n    HttpResponse(Response response) throws IOException {\n        Objects.requireNonNull(response, \"response cannot be null\");\n\n        httpStatus = response.getStatus();\n        httpReason = response.getStatusInfo().getReasonPhrase();\n\n        if (response.hasEntity()) {\n            InputStream is = response.readEntity(InputStream.class);\n            contents = IOUtils.toByteArray(is);\n        } else {\n            contents = null;\n        }\n\n        for (String key : response.getHeaders().keySet()) {\n            headers.put(key, response.getHeaderString(key));\n        }\n    }\n\n    /**\n<｜fim▁hole｜>     *\n     * @param httpCode the http code\n     * @param msg the msg\n     */\n    HttpResponse(int httpCode, String msg) {\n        httpStatus = httpCode;\n        httpReason = msg;\n        contents = null;\n    }\n\n    /**\n     * Gets the HTTP status code.\n     *\n     * @return the HTTP status code\n     */\n    public int getHttpCode() {\n        return httpStatus;\n    }\n\n    /**\n     * Gets the content.\n     *\n     * @return the content\n     */\n    public String getContent() {\n        final byte[] localContents = contents;\n        if (localContents == null || localContents.length == 0) {\n            return \"\";\n        }\n\n        final Charset charSet = Charset.forName(\"utf-8\");\n        return new String(localContents, charSet);\n    }\n\n    /**\n     * Creates an {@link IOException} from the {@link #httpReason}\n     *\n     * @return the IO exception\n     */\n    public IOException createException() {\n        return new IOException(httpReason);\n    }\n\n    @Override\n    public String toString() {\n        return getHttpCode() + \" (\" + (contents == null ? (\"http reason: \" + httpReason) : getContent()) + \")\";\n    }\n}<｜fim▁end｜>",
    "response": "     * Instantiates a new http response.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.samsung.sec.dexter.executor.peerreview.cli;\n\nimport static org.mockito.Mockito.*;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.samsung.sec.dexter.core.analyzer.AnalysisConfig;\nimport com.samsung.sec.dexter.core.analyzer.AnalysisEntityFactory;\nimport com.samsung.sec.dexter.core.config.PeerReviewHome;\nimport com.samsung.sec.dexter.core.plugin.IDexterPluginManager;\nimport com.samsung.sec.dexter.core.util.DexterServerConfig;\nimport com.samsung.sec.dexter.core.util.IDexterClient;\nimport com.samsung.sec.dexter.executor.DexterAnalyzer;\nimport com.samsung.sec.dexter.executor.cli.ICLILog;\nimport com.samsung.sec.dexter.executor.cli.IDexterCLIOption;\nimport com.samsung.sec.dexter.executor.peerreview.cli.PeerReviewCLIAnalyzer;\n\npublic class PeerReviewCLIAnalyzerTest {\n    ICLILog cliLog;\n    IDexterCLIOption cliOption;\n    DexterAnalyzer dexterAnalyzer;\n    PeerReviewCLIAnalyzer cliAnalyzer;\n    IDexterPluginManager pluginManager;\n    AnalysisEntityFactory analysisEntityFactory;\n\n    @Before\n    public void setUp() throws Exception {\n        cliLog = mock(ICLILog.class);\n        cliOption = mock(IDexterCLIOption.class);\n        dexterAnalyzer = mock(DexterAnalyzer.class);\n        pluginManager = mock(IDexterPluginManager.class);\n        analysisEntityFactory = mock(AnalysisEntityFactory.class);\n\n        cliAnalyzer = new PeerReviewCLIAnalyzer(cliOption, cliLog, dexterAnalyzer, \n                pluginManager, analysisEntityFactory);\n    }\n\n    @Test\n    public void testAnalyze_callRunAsyncForFileList() {\n        List<String> testFileList = getTestFileList();\n        AnalysisConfig analysisConfig = mock(AnalysisConfig.class);\n        PeerReviewHome home = mock(PeerReviewHome.class);\n        when(home.getDexterServerConfig()).thenReturn(new DexterServerConfig(\"test\", \"test\", \"test\"));\n        when(cliOption.isStandAloneMode()).thenReturn(true);\n        when(analysisEntityFactory.copyAnalysisConfigWithoutSourcecode(any(AnalysisConfig.class))).\n<｜fim▁hole｜>\n        cliAnalyzer.analyze(testFileList, home);\n\n        verify(dexterAnalyzer, times(2)).runAsync(any(AnalysisConfig.class), eq(pluginManager), any(IDexterClient.class));\n    }\n\n    private List<String> getTestFileList() {\n        String[] testFiles = { \"file1\", \"file2\" };\n        return Arrays.asList(testFiles);\n    }\n}<｜fim▁end｜>",
    "response": "            thenReturn(analysisConfig);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apereo.portal.security;\n\nimport java.io.Serializable;\n\npublic interface IPrincipal extends Serializable {\n\n    /** Returns the locally unique username or user identifier for this principal. */\n    public String getUID();\n\n    /**\n     * Returns the globally unique user identifier for this principal. This identifier should be\n     * maximally unique within the scope of the deployed security mechanism.\n     */\n    public String getGlobalUID();\n\n    /**\n     * Returns the human-readable name of the principal. This should be either their first and last\n     * name or whatever local convention dicates should be returned by the CommonName (CN) attribute\n     * for those security contexts using X.509 style naming.\n     */\n    public String getFullName();\n\n    /**\n<｜fim▁hole｜>     * post-authentication, an attempt to set a UID may either fail or reset the authentication\n     * status of the security context container.\n     *\n     * @param UID The desired locally unique UID value.\n     */\n    public void setUID(String UID);\n}<｜fim▁end｜>",
    "response": "     * Sets the locally unique username in preparation for authentication. Note that\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.lightcrafts.model.ImageEditor;\n\nimport com.lightcrafts.jai.JAIContext;\nimport com.lightcrafts.jai.opimage.BilateralFilterRGBOpImage;\nimport com.lightcrafts.jai.utils.Transform;\nimport com.lightcrafts.mediax.jai.BorderExtender;\nimport com.lightcrafts.mediax.jai.PlanarImage;\nimport com.lightcrafts.model.OperationType;\nimport com.lightcrafts.model.SliderConfig;\n<｜fim▁hole｜>public class AdvancedNoiseReductionOperationV4 extends BlendedOperation {\n    static final OperationType type = new OperationTypeImpl(\"Advanced Noise Reduction V4\");\n    private static final String COLOR_NOISE = \"Color_Noise\";\n    private static final String GRAIN_NOISE = \"Grain_Noise\";\n    private float chroma_domain = 2;\n    private float luma_domain = 0;\n\n    public AdvancedNoiseReductionOperationV4(Rendering rendering, OperationType type) {\n        super(rendering, type);\n        colorInputOnly = true;\n\n        DecimalFormat format = new DecimalFormat(\"0.0\");\n\n        this.addSliderKey(COLOR_NOISE);\n        this.setSliderConfig(COLOR_NOISE, new SliderConfig(0, 20, chroma_domain, 1, false, format));\n\n        this.addSliderKey(GRAIN_NOISE);\n        this.setSliderConfig(GRAIN_NOISE, new SliderConfig(0, 20, luma_domain, 1, false, format));\n    }\n\n    @Override\n    public boolean neutralDefault() {\n        return false;\n    }\n\n    @Override\n    public void setSliderValue(String key, double value) {\n        value = roundValue(key, value);\n\n        if (key.equals(COLOR_NOISE)) {\n            chroma_domain = (float) value;\n        } else if (key.equals(GRAIN_NOISE)) {\n            luma_domain = (float) value;\n        } else\n            return;\n\n        super.setSliderValue(key, value);\n    }\n\n    private class NoiseReduction extends BlendedTransform {\n        NoiseReduction(PlanarImage source) {\n            super(source);\n        }\n\n        @Override\n        public PlanarImage setFront() {\n            if (chroma_domain == 0 && luma_domain == 0)\n                return back;\n\n            BorderExtender borderExtender = BorderExtender.createInstance(BorderExtender.BORDER_COPY);\n            PlanarImage front = new BilateralFilterRGBOpImage(back, borderExtender, null, null,\n                                                              luma_domain * scale, 0.02f,\n                                                              chroma_domain * scale, 0.04f);\n\n            // front = new O1BilateralFilterOpImage(back, JAIContext.fileCacheHint,\n            //                                      luma_domain * scale, 0.04f,\n            //                                      chroma_domain * scale, 0.04f);\n\n            front.setProperty(JAIContext.PERSISTENT_CACHE_TAG, Boolean.TRUE);\n            return front;\n        }\n    }\n\n    @Override\n    protected void updateOp(Transform op) {\n        op.update();\n    }\n\n    @Override\n    protected BlendedTransform createBlendedOp(PlanarImage source) {\n        return new NoiseReduction(source);\n    }\n\n    @Override\n    public OperationType getType() {\n        return type;\n    }\n}<｜fim▁end｜>",
    "response": "\nimport java.text.DecimalFormat;\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.sysml.test.integration.functions.recompile;\n\nimport java.util.HashMap;\n\nimport org.junit.Test;\n\nimport org.apache.sysml.hops.OptimizerUtils;\nimport org.apache.sysml.runtime.matrix.data.MatrixValue.CellIndex;\nimport org.apache.sysml.test.integration.AutomatedTestBase;\nimport org.apache.sysml.test.integration.TestConfiguration;\nimport org.apache.sysml.utils.Statistics;\n\npublic class RandSizeExpressionEvalTest extends AutomatedTestBase \n{\n\n    private final static String TEST_NAME = \"rand_size_expr_eval\";\n    private final static String TEST_DIR = \"functions/recompile/\";\n    private final static String TEST_CLASS_DIR = TEST_DIR + \n        RandSizeExpressionEvalTest.class.getSimpleName() + \"/\";\n\n    private final static int rows = 14;\n    private final static int cols = 14;\n\n    @Override\n    public void setUp() {\n        addTestConfiguration( TEST_NAME, new TestConfiguration(TEST_CLASS_DIR, TEST_NAME, new String[]{} ));\n    }\n\n    @Test\n    public void testComplexRand() {\n        runRandTest(TEST_NAME, false, false);\n    }\n\n    @Test\n    public void testComplexRandExprEval() {\n        runRandTest(TEST_NAME, true, false);\n    }\n\n    @Test\n    public void testComplexRandConstFold() {\n        runRandTest(TEST_NAME, false, true);\n    }\n\n    private void runRandTest( String testName, boolean evalExpr, boolean constFold )\n    {\n        if(shouldSkipTest())\n            return;\n\n        boolean oldFlagEval = OptimizerUtils.ALLOW_SIZE_EXPRESSION_EVALUATION;\n        boolean oldFlagFold = OptimizerUtils.ALLOW_CONSTANT_FOLDING;\n        boolean oldFlagRand1 = OptimizerUtils.ALLOW_RAND_JOB_RECOMPILE;\n        boolean oldFlagRand2 = OptimizerUtils.ALLOW_BRANCH_REMOVAL;\n        boolean oldFlagRand3 = OptimizerUtils.ALLOW_WORSTCASE_SIZE_EXPRESSION_EVALUATION;\n\n        try\n        {\n<｜fim▁hole｜>            String HOME = SCRIPT_DIR + TEST_DIR;\n            fullDMLScriptName = HOME + testName + \".dml\";\n            programArgs = new String[]{\"-explain\", \"-args\",\n                Integer.toString(rows), Integer.toString(cols), output(\"R\") };\n\n            OptimizerUtils.ALLOW_SIZE_EXPRESSION_EVALUATION = evalExpr;\n            OptimizerUtils.ALLOW_CONSTANT_FOLDING = constFold;\n\n            //disable rand specific recompile\n            OptimizerUtils.ALLOW_RAND_JOB_RECOMPILE = false;\n            OptimizerUtils.ALLOW_BRANCH_REMOVAL = false;\n            OptimizerUtils.ALLOW_WORSTCASE_SIZE_EXPRESSION_EVALUATION = false;\n\n            runTest(true, false, null, -1); \n\n            //check correct propagated size via final results\n            HashMap<CellIndex, Double> dmlfile = readDMLMatrixFromHDFS(\"R\");\n            assertEquals(\"Unexpected results.\", Double.valueOf(rows*cols*3.0), dmlfile.get(new CellIndex(1,1)));\n\n            //check expected number of compiled and executed MR jobs\n            if( evalExpr || constFold ) {\n                assertEquals(\"Unexpected number of executed MR jobs.\",\n                    0, Statistics.getNoOfExecutedMRJobs());\n            }\n            else {\n                assertEquals(\"Unexpected number of executed MR jobs.\",\n                    2, Statistics.getNoOfExecutedMRJobs()); //Rand, GMR (sum)\n            }\n        }\n        finally {\n            OptimizerUtils.ALLOW_SIZE_EXPRESSION_EVALUATION = oldFlagEval;\n            OptimizerUtils.ALLOW_CONSTANT_FOLDING = oldFlagFold;\n            OptimizerUtils.ALLOW_RAND_JOB_RECOMPILE = oldFlagRand1;\n            OptimizerUtils.ALLOW_BRANCH_REMOVAL = oldFlagRand2;\n            OptimizerUtils.ALLOW_WORSTCASE_SIZE_EXPRESSION_EVALUATION = oldFlagRand3;\n        }\n    }\n}<｜fim▁end｜>",
    "response": "            TestConfiguration config = getTestConfiguration(testName);\n            config.addVariable(\"rows\", rows);\n            config.addVariable(\"cols\", cols);\n            loadTestConfiguration(config);\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.sonar.db.notification;\n\nimport java.util.Collections;\nimport java.util.List;\nimport org.apache.ibatis.session.SqlSession;\nimport org.sonar.db.Dao;\nimport org.sonar.db.DbSession;\nimport org.sonar.db.MyBatis;\n\npublic class NotificationQueueDao implements Dao {\n\n  private final MyBatis mybatis;\n\n  public NotificationQueueDao(MyBatis mybatis) {\n    this.mybatis = mybatis;\n  }\n\n  public void insert(List<NotificationQueueDto> dtos) {\n    DbSession session = mybatis.openSession(true);\n    NotificationQueueMapper mapper = session.getMapper(NotificationQueueMapper.class);\n    try {\n      for (NotificationQueueDto dto : dtos) {\n        mapper.insert(dto);\n      }\n      session.commit();\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }\n\n  public void delete(List<NotificationQueueDto> dtos) {\n    DbSession session = mybatis.openSession(true);\n    NotificationQueueMapper mapper = session.getMapper(NotificationQueueMapper.class);\n    try {\n      for (NotificationQueueDto dto : dtos) {\n        mapper.delete(dto.getId());\n      }\n      session.commit();\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }\n\n<｜fim▁hole｜>    SqlSession session = mybatis.openSession(false);\n    try {\n      return session.getMapper(NotificationQueueMapper.class).findOldest(count);\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }\n\n  public long count() {\n    SqlSession session = mybatis.openSession(false);\n    try {\n      return session.getMapper(NotificationQueueMapper.class).count();\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n  }\n}<｜fim▁end｜>",
    "response": "  public List<NotificationQueueDto> selectOldest(int count) {\n    if (count < 1) {\n      return Collections.emptyList();\n    }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package net.i2p.stat;\n\npublic interface RateSummaryListener {\n<｜fim▁hole｜>     * @param eventCount how many events occurred\n     * @param totalEventTime how long the events were running for\n     * @param period how long this period is\n     */\n    void add(double totalValue, long eventCount, double totalEventTime, long period);\n}<｜fim▁end｜>",
    "response": "    /**\n     * @param totalValue sum of all event values in the most recent period\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package javanet.staxutils.events;\n\nimport javax.xml.namespace.QName;\nimport javax.xml.stream.Location;\nimport javax.xml.stream.events.StartDocument;\n\npublic class StartDocumentEvent extends AbstractXMLEvent implements StartDocument {\n\n  /** Default XML version returned by {@link #getVersion()}. */\n  public static final String DEFAULT_VERSION = \"1.0\";\n\n  /** Default system id returned by {@link #getSystemId()}. */\n  public static final String DEFAULT_SYSTEM_ID = \"\";\n\n  /** Default encoding returned by {@link #getCharacterEncodingScheme()}. */\n  public static final String DEFAULT_ENCODING = \"UTF-8\";\n\n  /** The document encoding, or <code>null</code> if none was specified. */\n  protected String encoding;\n\n  /**\n   * The document standalone value, or <code>null</code> if none was specified.\n   */\n  protected Boolean standalone;\n\n  /** The XML version, or <code>null</code> if none was specified. */\n  protected String version;\n\n  public StartDocumentEvent() {\n\n  }\n\n  public StartDocumentEvent(Location location) {\n\n    super(location);\n\n  }\n\n  public StartDocumentEvent(String encoding, Location location) {\n\n    super(location);\n    this.encoding = encoding;\n\n  }\n\n  public StartDocumentEvent(String encoding, Boolean standalone, String version, Location location) {\n\n    super(location);\n    this.encoding = encoding;\n    this.standalone = standalone;\n    this.version = version;\n\n  }\n\n  public StartDocumentEvent(String encoding, Boolean standalone, String version, Location location,\n      QName schemaType) {\n\n    super(location, schemaType);\n    this.encoding = encoding;\n    this.standalone = standalone;\n    this.version = version;\n\n  }\n\n  /**\n   * Copy constructor.\n   * \n   * @param that\n   *          The {@link StartDocument} event to copy.\n   */\n  public StartDocumentEvent(StartDocument that) {\n\n    super(that);\n\n    // copy encoding\n    if (that.encodingSet()) {\n\n      this.encoding = that.getCharacterEncodingScheme();\n\n    }\n\n    // copy standalone\n    if (standaloneSet()) {\n\n      this.standalone = that.isStandalone() ? Boolean.TRUE : Boolean.FALSE;\n\n    }\n\n    this.version = DEFAULT_VERSION.equals(that.getVersion()) ? null : that.getVersion();\n\n  }\n\n  /** Returns {@link #START_DOCUMENT}. */\n  public int getEventType() {\n\n    return START_DOCUMENT;\n\n  }\n\n  public boolean encodingSet() {\n\n<｜fim▁hole｜>\n  }\n\n  public String getCharacterEncodingScheme() {\n\n    return (encoding == null ? DEFAULT_ENCODING : encoding);\n\n  }\n\n  public String getSystemId() {\n\n    Location location = getLocation();\n    if (location != null) {\n\n      String systemId = location.getSystemId();\n      if (systemId != null) {\n\n        return systemId;\n\n      }\n\n    }\n\n    return DEFAULT_SYSTEM_ID;\n\n  }\n\n  public String getVersion() {\n\n    return (version == null ? DEFAULT_VERSION : version);\n\n  }\n\n  public boolean isStandalone() {\n\n    return (standalone == null ? false : standalone.booleanValue());\n\n  }\n\n  public boolean standaloneSet() {\n\n    return standalone != null;\n\n  }\n\n}<｜fim▁end｜>",
    "response": "    return encoding != null;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.espertech.esper.event.bean;\n\nimport junit.framework.TestCase;\nimport net.sf.cglib.reflect.FastClass;\nimport net.sf.cglib.reflect.FastMethod;\nimport com.espertech.esper.support.bean.SupportBeanComplexProps;\n<｜fim▁hole｜>import com.espertech.esper.client.PropertyAccessException;\n\npublic class TestKeyedFastPropertyGetter extends TestCase\n{\n    private KeyedFastPropertyGetter getter;\n    private EventBean theEvent;\n    private SupportBeanComplexProps bean;\n\n    public void setUp() throws Exception\n    {\n        bean = SupportBeanComplexProps.makeDefaultBean();\n        theEvent = SupportEventBeanFactory.createObject(bean);\n        FastClass fastClass = FastClass.create(Thread.currentThread().getContextClassLoader(), SupportBeanComplexProps.class);\n        FastMethod method = fastClass.getMethod(\"getIndexed\", new Class[] {int.class});\n        getter = new KeyedFastPropertyGetter(method, 1, SupportEventAdapterService.getService());\n    }\n\n    public void testGet()\n    {\n        assertEquals(bean.getIndexed(1), getter.get(theEvent));\n\n        try\n        {\n            getter.get(SupportEventBeanFactory.createObject(\"\"));\n            fail();\n        }\n        catch (PropertyAccessException ex)\n        {\n            // expected\n        }\n    }\n}<｜fim▁end｜>",
    "response": "import com.espertech.esper.support.event.SupportEventBeanFactory;\nimport com.espertech.esper.support.event.SupportEventAdapterService;\nimport com.espertech.esper.client.EventBean;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.eclipse.egit.core.synchronize;\n\nimport static org.eclipse.egit.core.synchronize.GitCommitsModelCache.RIGHT;\nimport static org.eclipse.egit.core.synchronize.GitCommitsModelCache.calculateAndSetChangeKind;\nimport static org.eclipse.jgit.treewalk.filter.TreeFilter.ANY_DIFF;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.eclipse.egit.core.Activator;\nimport org.eclipse.egit.core.synchronize.GitCommitsModelCache.Change;\nimport org.eclipse.jgit.dircache.DirCacheIterator;\nimport org.eclipse.jgit.lib.AbbreviatedObjectId;\nimport org.eclipse.jgit.lib.MutableObjectId;\nimport org.eclipse.jgit.lib.Repository;\nimport org.eclipse.jgit.treewalk.FileTreeIterator;\nimport org.eclipse.jgit.treewalk.TreeWalk;\nimport org.eclipse.jgit.treewalk.filter.AndTreeFilter;\nimport org.eclipse.jgit.treewalk.filter.NotIgnoredFilter;\n\npublic class WorkingTreeChangeCache {\n\n    /**\n     * @param repo\n     *            with should be scanned\n     * @return list of changes in working tree\n     */\n    public static Map<String, Change> build(Repository repo) {\n        TreeWalk tw = new TreeWalk(repo);\n        try {\n            tw.addTree(new FileTreeIterator(repo));\n            tw.addTree(new DirCacheIterator(repo.readDirCache()));\n            tw.setFilter(AndTreeFilter.create(new NotIgnoredFilter(0), ANY_DIFF));\n            tw.setRecursive(true);\n\n            Map<String, Change> result = new HashMap<String, Change>();\n            MutableObjectId idBuf = new MutableObjectId();\n            while (tw.next()) {\n                Change change = new Change();\n                change.name = tw.getNameString();\n                tw.getObjectId(idBuf, 0);\n                change.objectId = AbbreviatedObjectId.fromObjectId(idBuf);\n                tw.getObjectId(idBuf, 1);\n<｜fim▁hole｜>                result.put(tw.getPathString(), change);\n            }\n            tw.release();\n\n            return result;\n        } catch (IOException e) {\n            Activator.error(e.getMessage(), e);\n            return new HashMap<String, GitCommitsModelCache.Change>(0);\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "                change.remoteObjectId = AbbreviatedObjectId.fromObjectId(idBuf);\n                calculateAndSetChangeKind(RIGHT, change);\n\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package joachimeichborn.geotag.model.selections;\n\nimport java.util.Collections;\nimport java.util.List;\n\nimport org.eclipse.jface.viewers.IStructuredSelection;\n\nimport joachimeichborn.geotag.model.Picture;\n<｜fim▁hole｜>        selection = Collections.emptyList();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public PictureSelection(final IStructuredSelection aSelection) {\n        selection = Collections.unmodifiableList((List<Picture>) aSelection.toList());\n    }\n\n    @Override\n    public List<Picture> getSelection() {\n        return selection;\n    }\n\n}<｜fim▁end｜>",
    "response": "\npublic class PictureSelection implements Selection<Picture> {\n    private List<Picture> selection;\n\n    public PictureSelection() {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.kaazing.net.sse.impl;\n\nimport org.kaazing.net.impl.util.BlockingQueueImpl;\nimport org.kaazing.net.sse.SseEventReader;\nimport org.kaazing.net.sse.SseEventType;\nimport org.kaazing.net.sse.SseException;\n\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class SseEventReaderImpl extends SseEventReader {\n    private static final String _CLASS_NAME = SseEventReaderImpl.class.getName();\n\n    private final BlockingQueueImpl<Object>    _sharedQueue;\n    private final SseEventSourceImpl           _eventSource;\n\n    private SsePayload                         _payload;\n    private SseEventType                       _eventType;\n    private String                             _eventName;\n    private String                             _data;\n\n    public SseEventReaderImpl(SseEventSourceImpl        eventSource,\n                              BlockingQueueImpl<Object> sharedQueue) {\n        _eventSource = eventSource;\n        _sharedQueue = sharedQueue;\n\n        _payload = null;\n        _eventType = null;\n        _eventName = null;\n        _data = null;\n    }\n\n    @Override\n    public CharSequence getData() throws IOException {\n        if (_payload == null) {\n            return null;\n        }\n\n        if (_eventType != SseEventType.DATA) {\n            String s = \"readData() can only be used to read events \" +\n                       \"of type SseEventType.DATA\";\n            throw new SseException(s);            \n        }\n\n        return _data;\n    }\n\n    @Override\n    public String getName() {\n        return _eventName;\n    }\n\n    @Override\n    public SseEventType getType() {\n        return _eventType;\n    }\n\n    @Override\n    public SseEventType next() throws IOException {\n        if (_sharedQueue.isDone()) {\n            _eventType = SseEventType.EOS;\n            return _eventType;\n        }\n\n        synchronized (this) {\n            if (!_eventSource.isConnected()) {\n                _eventType = SseEventType.EOS;\n                return _eventType;\n            }\n\n            try {\n                _payload = null;\n                _payload = (SsePayload) _sharedQueue.take();\n            } \n            catch (InterruptedException ex) {\n\n            }\n\n            if (_payload == null) {\n\n                // throw new SseException(s);\n\n                _eventType = SseEventType.EOS;\n                return _eventType;\n            }\n\n            _data = _payload.getData();\n            _eventName = _payload.getEventName();\n            _eventType = (_payload.getData() == null) ? SseEventType.EMPTY :\n                                                        SseEventType.DATA;\n        }\n\n        return _eventType;\n    }\n\n    // ------------------ Package-Private Implementation ----------------------\n    // These methods are called from other classes in this package. They are\n    // not part of the public API.\n    void close() throws IOException {\n        _sharedQueue.done();\n        _payload = null;\n        _eventType = null;\n        _data = null;\n        _eventName = null;\n    }\n\n    void reset() throws IOException {\n        _sharedQueue.reset();\n        _payload = null;\n        _eventType = null;\n        _data = null;\n        _eventName = null;\n    }\n\n    // ------------- Currently not being used methods -------------------------\n    // This was earlier part of our public API. It's no longer being exposed.\n    /**\n     * Returns the payload of the event. Use this method to retrieve the \n     * payload only if the event's type is {@link SseEventType.DATA}.\n     * <p>\n     * If this method is invoked AFTER {@link #next()} method, then it will not\n     * block. If this method is invoked before {@link #next()} method, then it \n     * will block till a message is received. If the type of received event is \n     * {@link SseEventType#EMPTY}, then this method will throw an IOException.\n     * <p>\n     * An IOException is thrown if the connection is closed while blocked. An\n     * IOException is thrown if this method is invoked before the connection\n     * has been established. \n     * <p>\n     * @return CharSequence     event's payload\n     * @throws IOException      if the connection is closed; if the received\n     *                          event's type is SseEventType.EMPTY; if invoked \n     *                          before connection is established\n     */\n    @SuppressWarnings(\"unused\")\n    private CharSequence readData() throws IOException {\n        if (!_eventSource.isConnected()) {\n            String s = \"Can't read using the MessageReader if the event \" +\n                       \"source is not connected\";\n            throw new SseException(s);\n        }\n\n<｜fim▁hole｜>                if (_eventType != SseEventType.DATA) {\n                    String s = \"readData() can only be used to read events \" +\n                               \"of type SseEventType.DATA\";\n                    throw new SseException(s);            \n                }\n\n                // Clear the _payload member variable for the internal state \n                // machine.\n                _payload = null;            \n                return _data;\n            }\n\n            // This will block the thread. If we are here, this means that\n            // readData() was invoked without a previous invocation of next().\n            // So, we invoke next() and ensure that the next message is a text\n            // message. Otherwise, throw an exception.\n            SseEventType type = next();\n\n            if (type != SseEventType.DATA) {\n                String s = \"readData() can only be used to read events \" +\n                           \"of type SseEventType.DATA\";\n                throw new SseException(s);            \n            }\n\n            _data = _payload.getData();\n            _eventName = _payload.getEventName();\n\n            // Clear the _payload member variable for the internal state machine.\n            _payload = null;\n            return _data;\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        synchronized (this) {        \n            if (_payload != null) {\n                // If we are here, then it means that readData() was invoked \n                // after next(). So, the _payload is already setup and we just\n                // have to return the data.\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package Model;\n\nimport javax.media.j3d.BranchGroup;\nimport static javax.media.j3d.BranchGroup.ALLOW_DETACH;\nimport javax.vecmath.Vector3d;\n\npublic abstract class Piece extends BranchGroup{\n    Colour colour;\n    Position initialPosition;\n    Position position;\n\n<｜fim▁hole｜>\n    public Piece(String modelPath, Colour colour, Position position){\n        //this.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);\n        //this.setCapability(Node.ENABLE_PICK_REPORTING);\n        //this.setPickable(true);\n        //this.setCapability(Group.ALLOW_CHILDREN_WRITE);\n        this.setCapability(ALLOW_DETACH);        \n\n        this.colour = colour;\n        this.initialPosition = position;\n        this.position = position;        \n        myModel = new Model(modelPath, 1);\n\n        scale = new Scale(0.8d);\n        translate = new Translate(Position.giveBackDrawPosition(position));\n\n        scale.addChild(myModel);\n        translate.addChild(scale);\n        this.addChild(translate);                \n    }\n\n    public void initialPosition(){\n        this.position = this.initialPosition;\n        this.translate.setTranslate(Position.giveBackDrawPosition(this.position));\n    }\n\n    public Colour getColour(){\n        return colour;\n    }\n\n    public Position getPosition(){\n        return position;\n    }\n\n    public Position getInitialPosition(){\n        return initialPosition;\n    }    \n\n    public void setPosition(Position position){\n        this.position = position;\n        //System.out.println(this.position.getX() + \"  \" + this.position.getY());\n        this.translate.setTranslate(Position.giveBackDrawPosition(this.position));\n    }\n\n    public void setPositionNotDraw(Position position){\n        this.position = position;\n    }    \n\n    public void upPiece(){    \n        Vector3d vector;\n        vector = Position.giveBackDrawPosition(this.position);\n        vector.y = vector.y + 2;\n        this.translate.setTranslate(vector);        \n    } \n\n    public void downPiece(){        \n        Vector3d vector;\n        vector = Position.giveBackDrawPosition(this.position);        \n        this.translate.setTranslate(vector);        \n    }     \n\n    public abstract boolean validMove(Position pos);\n\n    /*\n    void enablePick(boolean onOff){\n        if(onOff){\n            this.setPickable(true);\n        }else{\n            this.setPickable(false);                        \n        }        \n    }\n    */\n}<｜fim▁end｜>",
    "response": "    Model myModel;\n    Scale scale;\n    Translate translate;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.redhat.rhn.frontend.xmlrpc.serializer;\n\nimport java.io.IOException;\nimport java.io.Writer;\n\nimport redstone.xmlrpc.XmlRpcException;\nimport redstone.xmlrpc.XmlRpcSerializer;\n\nimport com.redhat.rhn.domain.channel.ContentSource;\nimport com.redhat.rhn.frontend.xmlrpc.serializer.util.SerializerHelper;\n\npublic class ContentSourceSerializer extends RhnXmlRpcCustomSerializer {\n<｜fim▁hole｜>    public Class getSupportedClass() {\n        return ContentSource.class;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected void doSerialize(Object value, Writer output, XmlRpcSerializer serializer)\n        throws XmlRpcException, IOException {\n        SerializerHelper helper = new SerializerHelper(serializer);\n        ContentSource repo = (ContentSource) value;\n\n        helper.add(\"id\", repo.getId());\n        helper.add(\"label\", repo.getLabel());\n        helper.add(\"sourceUrl\", repo.getSourceUrl());\n        helper.add(\"type\", repo.getType().getLabel());\n        helper.add(\"sslContentSources\", repo.getSslSets());\n\n        helper.writeTo(output);\n    }\n}<｜fim▁end｜>",
    "response": "\n    /**\n     * {@inheritDoc}\n     */\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.nomi.pircbotNg;\n\npublic class User {\n\n    /**\n     * Constructs a User object with a known prefix and nick.\n     *\n     * @param prefix The status of the user, for example, \"@\".\n     * @param nick The nick of the user.\n     */\n    User(String prefix, String nick) {\n        _prefix = prefix;\n        _nick = nick;\n        _lowerNick = nick.toLowerCase();\n    }\n\n    /**\n     * Returns the prefix of the user. If the User object has been obtained\n     * from a list of users in a channel, then this will reflect the user's\n     * status in that channel.\n     *\n     * @return The prefix of the user. If there is no prefix, then an empty\n     *         String is returned.\n     */\n    public String getPrefix() {\n        return _prefix;\n    }\n\n    /**\n     * Returns whether or not the user represented by this object is an\n     * operator. If the User object has been obtained from a list of users\n     * in a channel, then this will reflect the user's operator status in\n     * that channel.\n     * \n     * @return true if the user is an operator in the channel.\n     */\n    public boolean isOp() {\n        return _prefix.indexOf('@') >= 0;\n    }\n\n    /**\n     * Returns whether or not the user represented by this object has\n     * voice. If the User object has been obtained from a list of users\n     * in a channel, then this will reflect the user's voice status in\n     * that channel.\n     * \n     * @return true if the user has voice in the channel.\n     */\n    public boolean hasVoice() {\n        return _prefix.indexOf('+') >= 0;\n    }        \n\n    /**\n     * Returns the nick of the user.\n     * \n     * @return The user's nick.\n     */\n    public String getNick() {\n        return _nick;\n    }\n\n    /**\n     * Returns the nick of the user complete with their prefix if they\n     * have one, e.g. \"@Dave\".\n     * \n     * @return The user's prefix and nick.\n     */\n    public String toString() {\n        return this.getPrefix() + this.getNick();\n    }\n\n    /**\n     * Returns true if the nick represented by this User object is the same\n     * as the argument. A case insensitive comparison is made.\n     * \n     * @return true if the nicks are identical (case insensitive).\n     */\n    public boolean equals(String nick) {\n        return nick.toLowerCase().equals(_lowerNick);\n    }\n\n    /**\n     * Returns true if the nick represented by this User object is the same\n     * as the nick of the User object given as an argument.\n     * A case insensitive comparison is made.\n     * \n<｜fim▁hole｜>        if (o instanceof User) {\n            User other = (User) o;\n            return other._lowerNick.equals(_lowerNick);\n        }\n        return false;\n    }\n\n    /**\n     * Returns the hash code of this User object.\n     * \n     * @return the hash code of the User object.\n     */\n    public int hashCode() {\n        return _lowerNick.hashCode();\n    }\n\n    /**\n     * Returns the result of calling the compareTo method on lowercased\n     * nicks. This is useful for sorting lists of User objects.\n     * \n     * @return the result of calling compareTo on lowercased nicks.\n     */\n    public int compareTo(Object o) {\n        if (o instanceof User) {\n            User other = (User) o;\n            return other._lowerNick.compareTo(_lowerNick);\n        }\n        return -1;\n    }\n\n    /**\n     * Returns whether or not the user represented by this object has the given \n     * prefix. If the User object has been obtained from a list of users\n     * in a channel, then this will reflect the user's status in that \n     * channel.  This is useful for checking non-standard prefixes that may\n     * exist on different networks (IRCd's).\n     * \n     * @since PircBotNg 1.0\n     *\n     * @param prefix the prefix to check for\n     * @return true if the user has the given prefix.\n     */\n    public boolean hasPrefix(String prefix) {\n        return _prefix.indexOf(prefix) >= 0;\n    }\n\n    /**\n     * Add prefix to this user object\n     *\n     * @since PircBotNg 1.0\n     *\n     * @param prefix for add\n     */    \n    protected void addPrefix(String prefix) {\n        if(!(hasPrefix(prefix))) {\n            _prefix = prefix + _prefix;\n        }        \n    }\n\n    /**\n     * Remove prefix from this user object\n     *\n     * @since PircBotNg 1.0\n     *\n     * @param prefix for remove\n     */    \n    protected void removePrefix(String prefix) {\n        if(hasPrefix(prefix)) {\n            int location = _prefix.indexOf(prefix);\n            _prefix = _prefix.substring(0, location) + _prefix.substring(location+1);\n        }\n    }\n\n    /**\n     * Sets info object to this user object\n     *\n     * @since PircBotNg 1.0\n     *\n     * @param info object\n     */\n    protected void setInfo(Object info) {\n        _info = info;\n    }\n\n    /**\n     * Gets the custom Object that was set using setUserInfo(String, Object)\n     * \n     * @since PircBotNg 1.0\n     *\n     * @return the info set, null if none was set\n     */\n    public Object getInfo() {\n        return _info;\n    }\n\n    private String _prefix;\n    private String _nick;\n    private String _lowerNick;\n    private Object _info;\n}<｜fim▁end｜>",
    "response": "     * @return true if o is a User object with a matching lowercase nick.\n     */\n    public boolean equals(Object o) {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.antlr.stringtemplate.language;\nimport org.antlr.stringtemplate.*;\nimport java.util.*;\nimport java.io.*;\nimport java.lang.reflect.*;\n\npublic interface ActionEvaluatorTokenTypes {\n    int EOF = 1;\n    int NULL_TREE_LOOKAHEAD = 3;\n    int APPLY = 4;\n    int MULTI_APPLY = 5;\n    int ARGS = 6;\n    int INCLUDE = 7;\n    int CONDITIONAL = 8;\n    int VALUE = 9;\n    int TEMPLATE = 10;\n    int FUNCTION = 11;\n    int SINGLEVALUEARG = 12;\n    int LIST = 13;\n    int NOTHING = 14;\n    int SEMI = 15;\n    int LPAREN = 16;\n    int RPAREN = 17;\n<｜fim▁hole｜>    int ASSIGN = 21;\n    int COLON = 22;\n    int NOT = 23;\n    int PLUS = 24;\n    int DOT = 25;\n    int LITERAL_first = 26;\n    int LITERAL_rest = 27;\n    int LITERAL_last = 28;\n    int LITERAL_length = 29;\n    int LITERAL_strip = 30;\n    int LITERAL_trunc = 31;\n    int LITERAL_super = 32;\n    int ANONYMOUS_TEMPLATE = 33;\n    int STRING = 34;\n    int INT = 35;\n    int LBRACK = 36;\n    int RBRACK = 37;\n    int DOTDOTDOT = 38;\n    int TEMPLATE_ARGS = 39;\n    int NESTED_ANONYMOUS_TEMPLATE = 40;\n    int ESC_CHAR = 41;\n    int WS = 42;\n    int WS_CHAR = 43;\n}<｜fim▁end｜>",
    "response": "    int LITERAL_elseif = 18;\n    int COMMA = 19;\n    int ID = 20;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.oefenmod;\n\nimport cpw.mods.fml.common.Mod;\nimport cpw.mods.fml.common.Mod.EventHandler;\nimport cpw.mods.fml.common.Mod.Instance;\nimport cpw.mods.fml.common.SidedProxy;\nimport cpw.mods.fml.common.event.FMLInitializationEvent;\nimport cpw.mods.fml.common.event.FMLPostInitializationEvent;\nimport cpw.mods.fml.common.event.FMLPreInitializationEvent;\n\n@Mod(modid = Main.MODID, version = Main.VERSION, name = Main.NAME)\npublic class Main \n{\n    public static final String MODID = \"OefenMod\";\n    public static final String VERSION = \"0.0.1\";\n    public static final String NAME = \"Oefen\";\n\n    @SidedProxy(clientSide=\"com.oefenmod.ClientProxy\", serverSide=\"com.oefenmod.ServerProxy\")\n<｜fim▁hole｜>    * Run before anything else. Read your config, create blocks, items, etc, and \n    * register them with the GameRegistry.\n    */\n    @EventHandler\n    public void preInit(FMLPreInitializationEvent e) \n    {\n        System.out.println(\"Called method: preInit\");\n        proxy.preInit(e);\n    } \n\n    /**\n    * Do your mod setup. Build whatever data structures you care about. Register recipes.\n    * Register new Handler\n    */\n    @EventHandler\n    public void init(FMLInitializationEvent e) \n    {\n        System.out.println(\"Called method: init\");\n        proxy.init(e);\n    }\n\n    /**\n     * Handle interaction with other mods, complete your setup based on this.\n     */\n    @EventHandler\n    public void postInit(FMLPostInitializationEvent e) \n    {\n        System.out.println(\"Called method: postInit\");\n        proxy.postInit(e);\n    }\n\n}<｜fim▁end｜>",
    "response": "    public static CommonProxy proxy;\n\n    @Instance\n    public static Main instance = new Main();\n\n    /**\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package wikipedia.options;\n\nimport org.joda.time.DateTime;\nimport org.joda.time.format.DateTimeFormat;\n\npublic class DateOption extends AbstractOption<DateTime> {\n\n    private static final String DATE_OPTION_TAG = \"-date\";\n\n    public DateOption() {\n        super(DATE_OPTION_TAG);\n    }\n\n    public DateOption(String[] args){\n        super(DATE_OPTION_TAG, args);\n\n        if(!this.contains(args))\n            throw new RuntimeException(\"L'option -date n'existe pas. Veuillez la préciser...\");\n    }\n\n<｜fim▁hole｜>    }\n}<｜fim▁end｜>",
    "response": "    @Override\n    protected void setValueFromArg(String arg) {\n            setValue(DateTime.parse(arg, DateTimeFormat.forPattern(\"yyyyMMdd\")));\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package apollo.dataadapter.das;\n\nimport java.util.*;\nimport java.io.IOException;\nimport java.lang.String;\n\nimport apollo.datamodel.*;\nimport apollo.datamodel.seq.AbstractLazySequence;\nimport apollo.datamodel.seq.LazySequenceI;\nimport apollo.gui.event.*;\nimport apollo.gui.*;\nimport apollo.dataadapter.*;\nimport apollo.dataadapter.das.*;\nimport apollo.seq.io.*;\n\npublic class \n    DASLazySequence \nextends \n    AbstractLazySequence \nimplements \n<｜fim▁hole｜>    DASSegment segment;\n\n    public DASLazySequence(\n        String id, \n        Controller c, \n        RangeI loc, \n        DASServerI theServer,\n        DASDsn theDsn,\n        DASSegment theSegment\n    ){\n        super(id,c);\n        setRange(loc);\n        setLength(loc.length());\n        server = theServer;\n        dsn = theDsn;\n        segment = theSegment;\n    }//end DASLazySequence\n\n    public DASServerI getServer(){\n        return server;\n    }//end getServer\n\n    public DASDsn getDsn(){\n        return dsn;\n    }//end getDsn\n\n    public DASSegment getSegment(){\n        return segment;\n    }//end getSegment\n\n    public SequenceI getSubSequence(int start, int end) {\n        Range subLoc = \n            new Range(\n                getRange().getName(),\n                getRange().getStart()+start-1,\n                getRange().getStart()+end-1\n            );\n\n        //\n        //Adjust the segment to reflect the change in the location\n        getSegment().setStart(String.valueOf(getRange().getStart()+start-1));\n        getSegment().setStop(String.valueOf(getRange().getStart()+end-1));\n\n        return new DASLazySequence(\n            getName(), \n            llco.getController(), \n            subLoc,\n            getServer(),\n            getDsn(),\n            getSegment()\n        );\n    }//end getSubSequence\n\n    /**\n     * Returns the sequence string\n    **/\n    protected String getResiduesFromSourceImpl(int low, int high){\n\n        List theSequenceList = \n            getServer().getSequences(\n                getDsn(),\n                new DASSegment[]{getSegment()}\n            );\n\n        DASSequence theSequence;\n        String sequenceString;\n\n        if(theSequenceList.size()>0){\n          theSequence = (DASSequence)theSequenceList.iterator().next();\n          sequenceString = theSequence.getDNA();\n        }else{\n          throw new apollo.dataadapter.NonFatalDataAdapterException(\"sequence fetch returned no sequences\");\n        }//end if\n\n        return sequenceString;\n    }//end getResiduesFromSourceImpl\n}<｜fim▁end｜>",
    "response": "    LazySequenceI \n{\n    DASServerI server;\n    DASDsn dsn;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package gameshop.advance.interfaces.remote;\n\nimport gameshop.advance.interfaces.remote.utility.IRemoteImage;\nimport gameshop.advance.utility.IDProdotto;\nimport gameshop.advance.utility.Money;\nimport java.rmi.Remote;\nimport java.rmi.RemoteException;\nimport org.joda.time.DateTime;\n\npublic interface IDescrizioneProdottoRemote extends Remote {\n\n    /**\n     * @return\n     * @throws RemoteException\n     */\n    IDProdotto getCodiceProdotto() throws RemoteException;\n\n    /**\n     * @return la descizione di un prodotto.\n     * @throws java.rmi.RemoteException\n     */\n    String getDescrizione() throws RemoteException;\n\n    /**\n     * @param period\n     * @return il prezzo di un prodotto.\n     * @throws java.rmi.RemoteException\n     */\n    Money getPrezzo(DateTime period) throws RemoteException;\n\n    /**\n     * @return\n     * @throws RemoteException\n     */\n    int getQuantitaDisponibile() throws RemoteException;\n\n<｜fim▁hole｜>\n    /**\n     * @return\n     * @throws RemoteException\n     */\n    IRemoteImage getImmagine() throws RemoteException;\n\n    /**\n     * @return\n     * @throws RemoteException\n     */\n    String getNomeProdotto() throws RemoteException;\n}<｜fim▁end｜>",
    "response": "    /**\n     * @return\n     * @throws RemoteException\n     */\n    int getQuantitaDiSoglia() throws RemoteException;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.onosproject.kubevirtnetworking.impl;\n\nimport com.google.common.base.Strings;\nimport com.google.common.collect.ImmutableSet;\nimport org.onosproject.core.ApplicationId;\nimport org.onosproject.core.CoreService;\nimport org.onosproject.event.ListenerRegistry;\nimport org.onosproject.kubevirtnetworking.api.KubevirtLoadBalancer;\nimport org.onosproject.kubevirtnetworking.api.KubevirtLoadBalancerAdminService;\nimport org.onosproject.kubevirtnetworking.api.KubevirtLoadBalancerEvent;\nimport org.onosproject.kubevirtnetworking.api.KubevirtLoadBalancerListener;\nimport org.onosproject.kubevirtnetworking.api.KubevirtLoadBalancerService;\nimport org.onosproject.kubevirtnetworking.api.KubevirtLoadBalancerStore;\nimport org.onosproject.kubevirtnetworking.api.KubevirtLoadBalancerStoreDelegate;\nimport org.osgi.service.component.annotations.Activate;\nimport org.osgi.service.component.annotations.Component;\nimport org.osgi.service.component.annotations.Deactivate;\nimport org.osgi.service.component.annotations.Reference;\nimport org.osgi.service.component.annotations.ReferenceCardinality;\nimport org.slf4j.Logger;\n\nimport java.util.Set;\n\nimport static com.google.common.base.Preconditions.checkArgument;\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static org.onosproject.kubevirtnetworking.api.Constants.KUBEVIRT_NETWORKING_APP_ID;\nimport static org.slf4j.LoggerFactory.getLogger;\n\n@Component(\n        immediate = true,\n        service = {KubevirtLoadBalancerAdminService.class, KubevirtLoadBalancerService.class}\n)\npublic class KubevirtLoadBalancerManager\n        extends ListenerRegistry<KubevirtLoadBalancerEvent, KubevirtLoadBalancerListener>\n        implements KubevirtLoadBalancerAdminService, KubevirtLoadBalancerService {\n\n    protected final Logger log = getLogger(getClass());\n\n    private static final String MSG_LOAD_BALANCER = \"Kubevirt load balancer %s %s\";\n    private static final String MSG_CREATED = \"created\";\n    private static final String MSG_UPDATED = \"updated\";\n    private static final String MSG_REMOVED = \"removed\";\n\n    private static final String ERR_NULL_LOAD_BALANCER = \"Kubevirt load balancer cannot be null\";\n    private static final String ERR_NULL_LOAD_BALANCER_NAME = \"Kubevirt load balancer name cannot be null\";\n    private static final String ERR_IN_USE = \" still in use\";\n\n    @Reference(cardinality = ReferenceCardinality.MANDATORY)\n    protected CoreService coreService;\n\n    @Reference(cardinality = ReferenceCardinality.MANDATORY)\n    protected KubevirtLoadBalancerStore kubevirtLoadBalancerStore;\n\n    private final InternalKubevirtLoadBalancerStorageDelegate delegate =\n            new InternalKubevirtLoadBalancerStorageDelegate();\n\n    private ApplicationId appId;\n\n    @Activate\n    protected void activate() {\n        appId = coreService.registerApplication(KUBEVIRT_NETWORKING_APP_ID);\n\n        kubevirtLoadBalancerStore.setDelegate(delegate);\n        log.info(\"Started\");\n    }\n\n    @Deactivate\n    protected void deactivate() {\n        kubevirtLoadBalancerStore.unsetDelegate(delegate);\n        log.info(\"Stopped\");\n    }\n\n    @Override\n    public void createLoadBalancer(KubevirtLoadBalancer lb) {\n        checkNotNull(lb, ERR_NULL_LOAD_BALANCER);\n        checkArgument(!Strings.isNullOrEmpty(lb.name()), ERR_NULL_LOAD_BALANCER_NAME);\n\n        kubevirtLoadBalancerStore.createLoadBalancer(lb);\n        log.info(String.format(MSG_LOAD_BALANCER, lb.name(), MSG_CREATED));\n    }\n\n    @Override\n    public void updateLoadBalancer(KubevirtLoadBalancer lb) {\n        checkNotNull(lb, ERR_NULL_LOAD_BALANCER);\n        checkArgument(!Strings.isNullOrEmpty(lb.name()), ERR_NULL_LOAD_BALANCER_NAME);\n\n<｜fim▁hole｜>        log.info(String.format(MSG_LOAD_BALANCER, lb.name(), MSG_UPDATED));\n    }\n\n    @Override\n    public void removeLoadBalancer(String name) {\n        checkArgument(name != null, ERR_NULL_LOAD_BALANCER_NAME);\n        synchronized (this) {\n            if (isLoadBalancerInUse(name)) {\n                final String error = String.format(MSG_LOAD_BALANCER, name, ERR_IN_USE);\n                throw new IllegalStateException(error);\n            }\n        }\n\n        KubevirtLoadBalancer lb = kubevirtLoadBalancerStore.removeLoadBalancer(name);\n        if (lb != null) {\n            log.info(String.format(MSG_LOAD_BALANCER, lb.name(), MSG_REMOVED));\n        }\n    }\n\n    @Override\n    public void clear() {\n        kubevirtLoadBalancerStore.clear();\n    }\n\n    @Override\n    public KubevirtLoadBalancer loadBalancer(String name) {\n        checkArgument(name != null, ERR_NULL_LOAD_BALANCER_NAME);\n        return kubevirtLoadBalancerStore.loadBalancer(name);\n    }\n\n    @Override\n    public Set<KubevirtLoadBalancer> loadBalancers() {\n        return ImmutableSet.copyOf(kubevirtLoadBalancerStore.loadBalancers());\n    }\n\n    private boolean isLoadBalancerInUse(String name) {\n        return false;\n    }\n\n    private class InternalKubevirtLoadBalancerStorageDelegate\n            implements KubevirtLoadBalancerStoreDelegate {\n\n        @Override\n        public void notify(KubevirtLoadBalancerEvent event) {\n            log.trace(\"send kubevirt load balancer event {}\", event);\n            process(event);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "        kubevirtLoadBalancerStore.updateLoadBalancer(lb);\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.owasp.benchmark.testcode;\n\nimport java.io.IOException;\n<｜fim▁hole｜>import javax.servlet.http.HttpServletResponse;\n\n@WebServlet(\"/BenchmarkTest00863\")\npublic class BenchmarkTest00863 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        response.setContentType(\"text/html\");\n\n        String queryString = request.getQueryString();\n        String paramval = \"vector\"+\"=\";\n        int paramLoc = -1;\n        if (queryString != null) paramLoc = queryString.indexOf(paramval);\n        if (paramLoc == -1) {\n            response.getWriter().println(\"getQueryString() couldn't find expected parameter '\" + \"vector\" + \"' in query string.\");\n            return;\n        }\n\n        String param = queryString.substring(paramLoc + paramval.length()); // 1st assume \"vector\" param is last parameter in query string.\n        // And then check to see if its in the middle of the query string and if so, trim off what comes after.\n        int ampersandLoc = queryString.indexOf(\"&\", paramLoc);\n        if (ampersandLoc != -1) {\n            param = queryString.substring(paramLoc + paramval.length(), ampersandLoc);\n        }\n        param = java.net.URLDecoder.decode(param, \"UTF-8\");\n\n        String bar;\n\n        // Simple ? condition that assigns constant to bar on true condition\n        int num = 106;\n\n        bar = (7*18) + num > 200 ? \"This_should_always_happen\" : param;\n\n        try {\n            String sql = \"SELECT  * from USERS where USERNAME='foo' and PASSWORD='\"+ bar + \"'\" ;\n\n            org.springframework.jdbc.support.rowset.SqlRowSet results = org.owasp.benchmark.helpers.DatabaseHelper.JDBCtemplate.queryForRowSet(sql);\n            java.io.PrintWriter out = response.getWriter();\n            out.write(\"Your results are: \");\n    //      System.out.println(\"Your results are\");\n            while(results.next()) {\n                out.write(org.owasp.esapi.ESAPI.encoder().encodeForHTML(results.getString(\"USERNAME\")) + \" \");\n    //          System.out.println(results.getString(\"USERNAME\"));\n            }\n        } catch (org.springframework.dao.DataAccessException e) {\n            if (org.owasp.benchmark.helpers.DatabaseHelper.hideSQLErrors) {\n                response.getWriter().println(\"Error processing request.\");\n                return;\n            }\n            else throw new ServletException(e);\n        }\n    }\n}<｜fim▁end｜>",
    "response": "\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.thoughtworks.go.config.update;\n\nimport com.thoughtworks.go.config.*;\nimport com.thoughtworks.go.helper.GoConfigMother;\nimport com.thoughtworks.go.server.domain.Username;\nimport com.thoughtworks.go.server.service.EntityHashingService;\nimport com.thoughtworks.go.server.service.GoConfigService;\nimport com.thoughtworks.go.server.service.result.HttpLocalizedOperationResult;\nimport com.thoughtworks.go.server.service.result.LocalizedOperationResult;\nimport junit.framework.TestCase;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.Mock;\n\nimport static org.junit.Assert.assertThat;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.jupiter.api.Assertions.assertTrue;\nimport static org.mockito.Mockito.*;\nimport static org.mockito.MockitoAnnotations.initMocks;\n\npublic class AdminsConfigUpdateCommandTest {\n    @Mock\n    private GoConfigService goConfigService;\n    @Mock\n    private EntityHashingService entityHashingService;\n    @Mock\n    private LocalizedOperationResult result;\n\n    private Username currentUser;\n    private BasicCruiseConfig cruiseConfig;\n\n    @Before\n    public void setUp() throws Exception {\n        initMocks(this);\n        currentUser = new Username(\"bob\");\n        goConfigService = mock(GoConfigService.class);\n        cruiseConfig = GoConfigMother.defaultCruiseConfig();\n        entityHashingService = mock(EntityHashingService.class);\n    }\n\n    @Test\n    public void shouldUpdateThePreprocessedCruiseConfigAdminsConfig() {\n        AdminsConfig adminsConfig = new AdminsConfig(new AdminUser(new CaseInsensitiveString(\"user\")));\n\n        AdminsConfigUpdateCommand command = new AdminsConfigUpdateCommand(goConfigService, adminsConfig, currentUser, result, entityHashingService, null);\n\n        command.update(cruiseConfig);\n\n        assertThat(cruiseConfig.server().security().adminsConfig(), is(adminsConfig));\n    }\n\n    @Test\n    public void shouldNotContinueIfUserIsNotAnAdmin() {\n        HttpLocalizedOperationResult result = new HttpLocalizedOperationResult();\n\n        when(goConfigService.isUserAdmin(currentUser)).thenReturn(false);\n\n        AdminsConfigUpdateCommand command = new AdminsConfigUpdateCommand(goConfigService, new AdminsConfig(), currentUser, result, entityHashingService, null);\n\n        assertFalse(command.canContinue(cruiseConfig));\n        assertThat(result.httpCode(), is(403));\n    }\n\n    @Test\n    public void shouldNotContinueIfRequestIsStale() {\n        AdminsConfig adminsConfig = new AdminsConfig(new AdminUser(new CaseInsensitiveString(\"user\")));\n        String md5 = \"md5\";\n\n        HttpLocalizedOperationResult result = new HttpLocalizedOperationResult();\n        when(goConfigService.isUserAdmin(currentUser)).thenReturn(true);\n        when(entityHashingService.md5ForEntity(cruiseConfig.server().security().adminsConfig())).thenReturn(md5);\n\n        AdminsConfigUpdateCommand command = new AdminsConfigUpdateCommand(goConfigService, adminsConfig, currentUser, result, entityHashingService, \"stale_md5\");\n\n        assertFalse(command.canContinue(cruiseConfig));\n        assertThat(result.httpCode(), is(412));\n    }\n\n    @Test\n    public void canContinue_adminUserShouldBeAbleToUpdateAFreshRequest() {\n        AdminsConfig adminsConfig = new AdminsConfig(new AdminUser(new CaseInsensitiveString(\"user\")));\n        String md5 = \"md5\";\n\n        HttpLocalizedOperationResult result = new HttpLocalizedOperationResult();\n        when(goConfigService.isUserAdmin(currentUser)).thenReturn(true);\n        when(entityHashingService.md5ForEntity(cruiseConfig.server().security().adminsConfig())).thenReturn(md5);\n\n        AdminsConfigUpdateCommand command = new AdminsConfigUpdateCommand(goConfigService, adminsConfig, currentUser, result, entityHashingService, \"md5\");\n\n        assertTrue(command.canContinue(cruiseConfig));\n    }\n    @Test\n    public void isValid_shouldValidateTheAdminsConfig() {\n        AdminsConfig adminsConfig = mock(AdminsConfig.class);\n        cruiseConfig.server().security().setAdminsConfig(adminsConfig);\n        ConfigSaveValidationContext validationContext = ConfigSaveValidationContext.forChain(cruiseConfig);\n\n        AdminsConfigUpdateCommand command = new AdminsConfigUpdateCommand(goConfigService, null, currentUser, result, entityHashingService, \"md5\");\n        command.isValid(cruiseConfig);\n\n        verify(adminsConfig).validateTree(validationContext);\n    }\n\n    @Test\n    public void isValid_shouldEnsureTheAdminsConfigHasErrorsIfValidationFails() {\n        AdminsConfig adminsInPreprocessedConfig = new AdminsConfig(new AdminUser(new CaseInsensitiveString(\"\")));\n        AdminsConfig adminsConfigRequest = new AdminsConfig(new AdminUser(new CaseInsensitiveString(\"\")));\n        cruiseConfig.server().security().setAdminsConfig(adminsInPreprocessedConfig);\n\n        AdminsConfigUpdateCommand command = new AdminsConfigUpdateCommand(goConfigService, adminsConfigRequest, currentUser, result, entityHashingService, \"md5\");\n<｜fim▁hole｜>        Assert.assertThat(adminsConfigRequest.errors().on(\"users\"), is(\"User cannot be blank.\"));\n    }\n\n}<｜fim▁end｜>",
    "response": "\n        assertFalse(command.isValid(cruiseConfig));\n        TestCase.assertTrue(adminsConfigRequest.hasErrors());\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package dk.heatless.regex2string.conditions.logical;\n\nimport dk.heatless.regex2string.Condition;\nimport dk.heatless.regex2string.GenerationState;\nimport dk.heatless.regex2string.conditions.CompareCondition;\n<｜fim▁hole｜>\n    /**\n     * Constructs a condition that compares the given conditions\n     * with the logical 'and' operation.\n     */\n    public AndCondition(Condition c1, Condition c2) {\n        super(c1, c2);\n    }\n\n    @Override\n    protected boolean acceptNotNull(GenerationState state) {\n        return c1.accept(state) && c2.accept(state);\n    }\n\n}<｜fim▁end｜>",
    "response": "\npublic class AndCondition extends CompareCondition {\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apfloat.internal;\n\nimport org.apfloat.ApfloatRuntimeException;\nimport org.apfloat.spi.NTTConvolutionStepStrategy;\nimport org.apfloat.spi.DataStorage;\nimport static org.apfloat.internal.FloatModConstants.*;\n\npublic class FloatNTTConvolutionStepStrategy\n    extends FloatModMath\n    implements NTTConvolutionStepStrategy, Parallelizable\n{\n    // Runnable for multiplying elements in place\n    private class MultiplyInPlaceRunnable\n        implements Runnable\n    {\n        public MultiplyInPlaceRunnable(DataStorage sourceAndDestination, DataStorage source, long offset, long length)\n        {\n            this.sourceAndDestination = sourceAndDestination;\n            this.source = source;\n            this.offset = offset;\n            this.length = length;\n        }\n\n        public void run()\n        {\n            DataStorage.Iterator dest = this.sourceAndDestination.iterator(DataStorage.READ_WRITE, this.offset, this.offset + this.length),\n                                 src = this.source.iterator(DataStorage.READ, this.offset, this.offset + this.length);\n\n            while (this.length > 0)\n            {\n<｜fim▁hole｜>        }\n\n        private DataStorage sourceAndDestination,\n                            source;\n        private long offset,\n                     length;\n    }\n\n    // Runnable for squaring elements in place\n    private class SquareInPlaceRunnable\n        implements Runnable\n    {\n        public SquareInPlaceRunnable(DataStorage sourceAndDestination, long offset, long length)\n        {\n            this.sourceAndDestination = sourceAndDestination;\n            this.offset = offset;\n            this.length = length;\n        }\n\n        public void run()\n        {\n            DataStorage.Iterator iterator = this.sourceAndDestination.iterator(DataStorage.READ_WRITE, this.offset, this.offset + this.length);\n\n            while (this.length > 0)\n            {\n                float value = iterator.getFloat();\n                iterator.setFloat(modMultiply(value, value));\n\n                iterator.next();\n                this.length--;\n            }\n        }\n\n        private DataStorage sourceAndDestination;\n        private long offset,\n                     length;\n    }\n\n    /**\n     * Default constructor.\n     */\n\n    public FloatNTTConvolutionStepStrategy()\n    {\n    }\n\n    public void multiplyInPlace(DataStorage sourceAndDestination, DataStorage source, int modulus)\n        throws ApfloatRuntimeException\n    {\n        assert (sourceAndDestination != source);\n\n        long size = sourceAndDestination.getSize();\n\n        ParallelRunnable parallelRunnable = createMultiplyInPlaceParallelRunnable(sourceAndDestination, source, modulus);\n\n        if (size <= Integer.MAX_VALUE &&                                        // Only if the size fits in an integer, but with memory arrays it should\n            sourceAndDestination.isCached() && source.isCached())               // Only if the data storage supports efficient parallel random access\n        {\n            ParallelRunner.runParallel(parallelRunnable);\n        }\n        else\n        {\n            parallelRunnable.run();                                             // Just run in current thread without parallelization\n        }\n    }\n\n    public void squareInPlace(DataStorage sourceAndDestination, int modulus)\n        throws ApfloatRuntimeException\n    {\n        long size = sourceAndDestination.getSize();\n\n        ParallelRunnable parallelRunnable = createSquareInPlaceParallelRunnable(sourceAndDestination, modulus);\n\n        if (size <= Integer.MAX_VALUE &&                                    // Only if the size fits in an integer, but with memory arrays it should\n            sourceAndDestination.isCached())                                // Only if the data storage supports efficient parallel random access\n        {\n            ParallelRunner.runParallel(parallelRunnable);\n        }\n        else\n        {\n            parallelRunnable.run();                                         // Just run in current thread without parallelization\n        }\n    }\n\n    /**\n     * Create a ParallelRunnable for multiplying the elements in-place.\n     *\n     * @param sourceAndDestination The first source data storage, which is also the destination.\n     * @param source The second source data storage.\n     * @param modulus Which modulus to use (0, 1, 2)\n     *\n     * @return An object suitable for multiplying the elements in parallel.\n     */\n\n    protected ParallelRunnable createMultiplyInPlaceParallelRunnable(final DataStorage sourceAndDestination, final DataStorage source, int modulus)\n    {\n        final long size = sourceAndDestination.getSize();\n\n        setModulus(MODULUS[modulus]);\n\n        ParallelRunnable parallelRunnable = new ParallelRunnable(size)\n        {\n            public Runnable getRunnable(long offset, long length)\n            {\n                return new MultiplyInPlaceRunnable(sourceAndDestination, source, offset, length);\n            }\n        };\n        return parallelRunnable;\n    }\n\n    /**\n     * Create a ParallelRunnable for squaring the elements in-place.\n     *\n     * @param sourceAndDestination The source data storage, which is also the destination.\n     * @param modulus Which modulus to use (0, 1, 2)\n     *\n     * @return An object suitable for squaring the elements in parallel.\n     */\n\n    protected ParallelRunnable createSquareInPlaceParallelRunnable(final DataStorage sourceAndDestination, int modulus)\n    {\n        final long size = sourceAndDestination.getSize();\n\n        setModulus(MODULUS[modulus]);\n\n        ParallelRunnable parallelRunnable = new ParallelRunnable(size)\n        {\n            public Runnable getRunnable(long offset, long length)\n            {\n                return new SquareInPlaceRunnable(sourceAndDestination, offset, length);\n            }\n        };\n        return parallelRunnable;\n    }\n}<｜fim▁end｜>",
    "response": "                dest.setFloat(modMultiply(dest.getFloat(), src.getFloat()));\n\n                dest.next();\n                src.next();\n                this.length--;\n            }\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package org.apache.hadoop.yarn.security;\n\nimport java.lang.annotation.Annotation;\n\nimport org.apache.hadoop.classification.InterfaceAudience.Public;\nimport org.apache.hadoop.classification.InterfaceStability.Stable;\nimport org.apache.hadoop.conf.Configuration;\n<｜fim▁hole｜>import org.apache.hadoop.yarn.api.ApplicationMasterProtocolPB;\n\n@Public\n@Stable\npublic class SchedulerSecurityInfo extends SecurityInfo {\n\n  @Override\n  public KerberosInfo getKerberosInfo(Class<?> protocol, Configuration conf) {\n    return null;\n  }\n\n  @Override\n  public TokenInfo getTokenInfo(Class<?> protocol, Configuration conf) {\n    if (!ApplicationMasterProtocolPB.class.isAssignableFrom(protocol)) {\n      return null;\n    }\n    return new TokenInfo() {\n\n      @Override\n      public Class<? extends Annotation> annotationType() {\n        return null;\n      }\n\n      @Override\n      public Class<? extends TokenSelector<? extends TokenIdentifier>>\n          value() {\n        return AMRMTokenSelector.class;\n      }\n    };\n  }\n}<｜fim▁end｜>",
    "response": "import org.apache.hadoop.security.KerberosInfo;\nimport org.apache.hadoop.security.SecurityInfo;\nimport org.apache.hadoop.security.token.TokenIdentifier;\nimport org.apache.hadoop.security.token.TokenInfo;\nimport org.apache.hadoop.security.token.TokenSelector;\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.graphhopper.routing;\n\nimport com.graphhopper.routing.util.Bike2WeightFlagEncoder;\nimport com.graphhopper.routing.util.EncodingManager;\nimport com.graphhopper.routing.util.FlagEncoder;\nimport com.graphhopper.storage.*;\nimport com.graphhopper.util.Helper;\nimport static com.graphhopper.storage.AbstractGraphStorageTester.*;\nimport com.graphhopper.util.EdgeIteratorState;\nimport com.graphhopper.util.Instruction;\nimport com.graphhopper.util.InstructionList;\nimport com.graphhopper.storage.EdgeEntry;\nimport com.graphhopper.util.*;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Map;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\npublic class PathTest\n{\n    private final EncodingManager carManager = new EncodingManager(\"CAR\");\n    private final FlagEncoder encoder = new EncodingManager(\"CAR\").getEncoder(\"CAR\");\n    private final TranslationMap trMap = TranslationMapTest.SINGLETON;\n    private final Translation tr = trMap.getWithFallBack(Locale.US);\n\n    @Test\n    public void testFound()\n    {\n        GraphStorage g = new GraphBuilder(carManager).create();\n        Path p = new Path(g, encoder);\n        assertFalse(p.isFound());\n        assertEquals(0, p.getDistance(), 1e-7);\n        assertEquals(0, p.calcNodes().size());\n        g.close();\n    }\n\n    @Test\n    public void testTime()\n    {\n        FlagEncoder tmpEnc = new Bike2WeightFlagEncoder();\n        GraphStorage g = new GraphBuilder(new EncodingManager(tmpEnc)).create();\n        Path p = new Path(g, tmpEnc);\n        long flags = tmpEnc.setSpeed(tmpEnc.setReverseSpeed(tmpEnc.setAccess(0, true, true), 10), 15);\n        assertEquals(375 * 60 * 1000, p.calcMillis(100000, flags, false));\n        assertEquals(600 * 60 * 1000, p.calcMillis(100000, flags, true));\n\n        g.close();\n    }\n\n    @Test\n    public void testWayList()\n    {\n        GraphStorage g = new GraphBuilder(carManager).create();\n        NodeAccess na = g.getNodeAccess();\n        na.setNode(0, 0.0, 0.1);\n        na.setNode(1, 1.0, 0.1);\n        na.setNode(2, 2.0, 0.1);\n\n        EdgeIteratorState edge1 = g.edge(0, 1).setDistance(1000).setFlags(encoder.setProperties(10, true, true));\n        edge1.setWayGeometry(Helper.createPointList(8, 1, 9, 1));\n        EdgeIteratorState edge2 = g.edge(2, 1).setDistance(2000).setFlags(encoder.setProperties(50, true, true));\n        edge2.setWayGeometry(Helper.createPointList(11, 1, 10, 1));\n\n        Path path = new Path(g, encoder);\n        EdgeEntry e1 = new EdgeEntry(edge2.getEdge(), 2, 1);\n        e1.parent = new EdgeEntry(edge1.getEdge(), 1, 1);\n        e1.parent.parent = new EdgeEntry(-1, 0, 1);\n        path.setEdgeEntry(e1);\n        path.extract();\n        // 0-1-2\n        assertPList(Helper.createPointList(0, 0.1, 8, 1, 9, 1, 1, 0.1, 10, 1, 11, 1, 2, 0.1), path.calcPoints());\n        InstructionList instr = path.calcInstructions(tr);\n        List<Map<String, Object>> res = instr.createJson();\n        Map<String, Object> tmp = res.get(0);\n        assertEquals(3000.0, tmp.get(\"distance\"));\n        assertEquals(504000L, tmp.get(\"time\"));\n        assertEquals(\"Continue\", tmp.get(\"text\"));\n        assertEquals(\"[0, 6]\", tmp.get(\"interval\").toString());\n\n        tmp = res.get(1);\n        assertEquals(0.0, tmp.get(\"distance\"));\n        assertEquals(0L, tmp.get(\"time\"));\n        assertEquals(\"Finish!\", tmp.get(\"text\"));\n        assertEquals(\"[6, 6]\", tmp.get(\"interval\").toString());\n        int lastIndex = (Integer) ((List) res.get(res.size() - 1).get(\"interval\")).get(0);\n        assertEquals(path.calcPoints().size() - 1, lastIndex);\n\n        // force minor change for instructions\n        edge2.setName(\"2\");\n        path = new Path(g, encoder);\n        e1 = new EdgeEntry(edge2.getEdge(), 2, 1);\n        e1.parent = new EdgeEntry(edge1.getEdge(), 1, 1);\n        e1.parent.parent = new EdgeEntry(-1, 0, 1);\n        path.setEdgeEntry(e1);\n        path.extract();\n        instr = path.calcInstructions(tr);\n        res = instr.createJson();\n\n        tmp = res.get(0);\n        assertEquals(1000.0, tmp.get(\"distance\"));\n        assertEquals(360000L, tmp.get(\"time\"));\n        assertEquals(\"Continue\", tmp.get(\"text\"));\n        assertEquals(\"[0, 3]\", tmp.get(\"interval\").toString());\n\n        tmp = res.get(1);\n        assertEquals(2000.0, tmp.get(\"distance\"));\n        assertEquals(144000L, tmp.get(\"time\"));\n        assertEquals(\"Turn sharp right onto 2\", tmp.get(\"text\"));\n        assertEquals(\"[3, 6]\", tmp.get(\"interval\").toString());\n        lastIndex = (Integer) ((List) res.get(res.size() - 1).get(\"interval\")).get(0);\n        assertEquals(path.calcPoints().size() - 1, lastIndex);\n\n        // now reverse order\n        path = new Path(g, encoder);\n        e1 = new EdgeEntry(edge1.getEdge(), 0, 1);\n        e1.parent = new EdgeEntry(edge2.getEdge(), 1, 1);\n        e1.parent.parent = new EdgeEntry(-1, 2, 1);\n<｜fim▁hole｜>        assertPList(Helper.createPointList(2, 0.1, 11, 1, 10, 1, 1, 0.1, 9, 1, 8, 1, 0, 0.1), path.calcPoints());\n\n        instr = path.calcInstructions(tr);\n        res = instr.createJson();\n        tmp = res.get(0);\n        assertEquals(2000.0, tmp.get(\"distance\"));\n        assertEquals(144000L, tmp.get(\"time\"));\n        assertEquals(\"Continue onto 2\", tmp.get(\"text\"));\n        assertEquals(\"[0, 3]\", tmp.get(\"interval\").toString());\n\n        tmp = res.get(1);\n        assertEquals(1000.0, tmp.get(\"distance\"));\n        assertEquals(360000L, tmp.get(\"time\"));\n        assertEquals(\"Turn sharp left\", tmp.get(\"text\"));\n        assertEquals(\"[3, 6]\", tmp.get(\"interval\").toString());\n        lastIndex = (Integer) ((List) res.get(res.size() - 1).get(\"interval\")).get(0);\n        assertEquals(path.calcPoints().size() - 1, lastIndex);\n    }\n\n    @Test\n    public void testFindInstruction()\n    {\n        Graph g = new GraphBuilder(carManager).create();\n        NodeAccess na = g.getNodeAccess();\n        na.setNode(0, 0.0, 0.0);\n        na.setNode(1, 5.0, 0.0);\n        na.setNode(2, 5.0, 0.5);\n        na.setNode(3, 10.0, 0.5);\n        na.setNode(4, 7.5, 0.25);\n\n        EdgeIteratorState edge1 = g.edge(0, 1).setDistance(1000).setFlags(encoder.setProperties(50, true, true));\n        edge1.setWayGeometry(Helper.createPointList());\n        edge1.setName(\"Street 1\");\n        EdgeIteratorState edge2 = g.edge(1, 2).setDistance(1000).setFlags(encoder.setProperties(50, true, true));\n        edge2.setWayGeometry(Helper.createPointList());\n        edge2.setName(\"Street 2\");\n        EdgeIteratorState edge3 = g.edge(2, 3).setDistance(1000).setFlags(encoder.setProperties(50, true, true));\n        edge3.setWayGeometry(Helper.createPointList());\n        edge3.setName(\"Street 3\");\n        EdgeIteratorState edge4 = g.edge(3, 4).setDistance(500).setFlags(encoder.setProperties(50, true, true));\n        edge4.setWayGeometry(Helper.createPointList());\n        edge4.setName(\"Street 4\");\n\n        Path path = new Path(g, encoder);\n        EdgeEntry e1 = new EdgeEntry(edge4.getEdge(), 4, 1);\n        e1.parent = new EdgeEntry(edge3.getEdge(), 3, 1);\n        e1.parent.parent = new EdgeEntry(edge2.getEdge(), 2, 1);\n        e1.parent.parent.parent = new EdgeEntry(edge1.getEdge(), 1, 1);\n        e1.parent.parent.parent.parent = new EdgeEntry(-1, 0, 1);\n        path.setEdgeEntry(e1);\n        path.extract();\n\n        InstructionList il = path.calcInstructions(tr);\n        Instruction nextInstr0 = il.find(-0.001, 0.0, 1000);\n        assertEquals(Instruction.CONTINUE_ON_STREET, nextInstr0.getSign());\n\n        Instruction nextInstr1 = il.find(0.001, 0.001, 1000);\n        assertEquals(Instruction.TURN_RIGHT, nextInstr1.getSign());\n\n        Instruction nextInstr2 = il.find(5.0, 0.004, 1000);\n        assertEquals(Instruction.TURN_LEFT, nextInstr2.getSign());\n\n        Instruction nextInstr3 = il.find(9.99, 0.503, 1000);\n        assertEquals(Instruction.TURN_SHARP_LEFT, nextInstr3.getSign());\n\n        // a bit far away ...\n        Instruction nextInstr4 = il.find(7.40, 0.25, 20000);\n        assertEquals(Instruction.FINISH, nextInstr4.getSign());\n\n        // too far away\n        assertNull(il.find(50.8, 50.25, 1000));\n    }\n\n}<｜fim▁end｜>",
    "response": "        path.setEdgeEntry(e1);\n        path.extract();\n        // 2-1-0\n"
  },
  {
    "prompt": "<｜fim▁begin｜>package com.gpshub;\n\nimport android.app.ActionBar;\nimport android.content.SharedPreferences;\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener;\n<｜fim▁hole｜>\nimport com.gpshub.service.ServiceManager;\nimport com.gpshub.ui.ThemeUtils;\nimport com.gpshub.utils.ContextHack;\n\nimport java.util.Map;\n\n@SuppressWarnings(\"deprecation\")\npublic class SettingsActivity extends PreferenceActivity implements OnSharedPreferenceChangeListener {\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        ContextHack.setAppContext(getApplicationContext());\n        ThemeUtils.onActivityCreateSetTheme(this);\n        super.onCreate(savedInstanceState);\n        addPreferencesFromResource(R.xml.preferences);\n\n        if (Build.VERSION.SDK_INT >= 11) {\n            ActionBar actionBar = getActionBar();\n            if (actionBar != null)\n                actionBar.setDisplayHomeAsUpEnabled(true);\n        }\n\n        Map<String, ?> prefs = getPreferenceScreen().getSharedPreferences().getAll();\n        for (Map.Entry<String, ?> entry : prefs.entrySet()) {\n            Preference connectionPref = findPreference(entry.getKey());\n            Object value = entry.getValue();\n            if (connectionPref != null && value != null) {\n                connectionPref.setSummary(value.toString());\n            }\n        }\n    }\n\n    @Override\n    protected void onResume() {\n        getPreferenceScreen().getSharedPreferences().registerOnSharedPreferenceChangeListener(this);\n        ServiceManager.getInstance().bindService(this);\n        super.onResume();\n    }\n\n    @Override\n    protected void onPause() {\n        getPreferenceScreen().getSharedPreferences().unregisterOnSharedPreferenceChangeListener(this);\n        ServiceManager.getInstance().unbindService(this);\n        super.onPause();\n    }\n\n    @Override\n    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {\n        Preference connectionPref = findPreference(key);\n        connectionPref.setSummary(sharedPreferences.getString(key, \"\"));\n\n        if (key.equals(\"ui_theme\")) {\n            ThemeUtils.changeTheme(this, true);\n        } else if (key.equals(\"update_time\") || key.equals(\"update_distance\") || key.equals(\"send_period\")) {\n            ServiceManager.getInstance().restartService(this);\n        } else {\n            ServiceManager.getInstance().sendMessage(this, key, sharedPreferences.getString(key, \"\"));\n        }\n     }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        switch (item.getItemId()) {\n            case android.R.id.home:\n                NavUtils.navigateUpFromSameTask(this);\n                return true;\n            default:\n                return super.onOptionsItemSelected(item);\n        }\n    }\n\n}<｜fim▁end｜>",
    "response": "import android.os.Build;\nimport android.os.Bundle;\nimport android.preference.Preference;\nimport android.preference.PreferenceActivity;\nimport android.support.v4.app.NavUtils;\nimport android.view.MenuItem;\n"
  }
]