{"generated_code": "    }\n\n    @Override\n    public void create(GA ga) {\n        em.persist(ga);\n    }\n\n    @Override\n    public void update(GA ga) {\n        em.merge(ga);\n    }\n\n    @Override\n    public void delete(GA ga) {\n        em.remove(ga);\n    }\n\n    @Override\n    public void delete(String groupId, String artifactId) {\n        Optional<GA> oga = findGA(groupId, artifactId);\n        oga.ifPresent(this::delete);\n    }\n\n    @Override\n    public Optional<GA> find(String groupId, String artifactId) {\n        return findGA(groupId, artifactId);\n    }\n\n    @Override\n    public Optional<GA> findOrCreate(String groupId, String artifactId, String version) {\n        return Optional.of(new GA(groupId, artifactId, version));\n    }\n\n    @Override\n    public Optional<GA> findOrCreate(String groupId, String artifactId, String version, String classifier) {\n        return Optional.of", "reference_code": "    }\n\n    @Override\n", "case_type": "block"}
{"generated_code": "        String name = res.getName();\n        for (int i = 0; i < extensions.length; i++) {\n        if (ignoreCase) {\n        if (StringUtil.endsWithIgnoreCase(name, extensions[i])) return true;\n        }\n        else {\n        if (name.endsWith(extensions[i])) return true;\n        }\n        }\n    }\n    return false;\n    }\n\n    public boolean accept(String name, String extension) {\n    for (int i = 0; i < extensions.length; i++) {\n        if (ignoreCase) {\n        if (StringUtil.endsWithIgnoreCase(name, extensions[i])) return true;\n        }\n        else {\n        if (name.endsWith(extensions[i])) return true;\n        }\n    }\n\n    return false;\n    }\n\n    public boolean accept(String name, String[] extensions) {\n    for (int i = 0; i < extensions.length; i++) {\n        if (ignoreCase) {\n        if (StringUtil.endsWithIgnoreCase(name, extensions[i]))", "reference_code": "        String name = res.getName();\n        for (int i = 0; i < extensions.length; i++) {\n", "case_type": "block"}
{"generated_code": "    private SupportBeanComplexProps bean;\n    private EventBean theEvent;\n\n    public void setUp()\n    {\n        super.setUp();\n\n        // create a bean with a property\n        // that is indexed by int\n        // and a getter method that takes an int\n        // and returns an object\n\n        // create a bean with a property\n        // that is indexed by int\n        // and a getter method that takes an int\n        // and returns an object\n\n        // create a bean with a property\n        // that is indexed by int\n        // and a getter method that takes an int\n        // and returns an object\n\n        // create a bean with a property\n        // that is indexed by int\n        // and a getter method that takes an int\n        // and returns an object\n\n        // create a bean with a property\n        // that is indexed by int\n        // and a getter method that takes an int\n        // and returns an object\n\n        // create a bean with a property\n        // that is indexed by int\n        // and a getter method that takes an int", "reference_code": "    private EventBean theEvent;\n    private SupportBeanComplexProps bean;\n\n    public void setUp() throws Exception\n    {\n", "case_type": "block"}
{"generated_code": "fileSystem != null) {\n                    fileSystemAuthorizer.authorize(fileSystem, user);\n                }\n            }\n        } catch (ServiceMayNotContinueException | ServiceNotAuthorizedException | ServiceNotEnabledException | RepositoryNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void setSession(Session session) {\n        user = (FileSystemUser) session.getAttribute(SUBJECT_KEY);\n    }\n\n    @Override\n    public void start(ServerSession session) {\n    }\n\n    @Override\n    public void stop() {\n    }\n\n    @Override\n               final Repository repository = repositoryResolver.resolveRepository(repositoryName);\n\n            if (repository == null) {\n                return;\n            }\n\n            try {\n                repositoryResolver.resolveFileSystem(repository);\n            } catch (RepositoryNotFoundException e) {\n                e.printStackTrace();\n            }\n\n            final JGitFileSystem fileSystem = repositoryResolver.resolveFileSystem(repository);\n\n            if (fileSystem != null) {\n               ", "reference_code": "    }\n\n    @Override\n    public void run() {\n        try {\n            final Repository repository = openRepository(repositoryName);\n", "case_type": "block"}
{"generated_code": "        this.createdDate = createdDate;\n    }\n\n    public String getS3imageUrl() {\n        return s3imageUrl;\n       public void setS3imageUrl(String s3imageUrl) {\n        this.s3imageUrl = s3imageUrl;\n    }\n\n    public List<Star> getStars() {\n        return stars;\n    }\n\n    public void setStars(List<Star> stars) {\n        this.stars = stars;\n    }\n\n    public List<Coordinate> getCoordinates() {\n        return coordinates;\n    }\n\n    public void setCoordinates(List<Coordinate> coordinates) {\n        this.coordinates = coordinates;\n    }\n\n    public String getJobStatus() {\n        return jobStatus;\n    }\n\n    public void setJobStatus(String jobStatus) {\n        this.jobStatus = jobStatus;\n    }\n\n    public UserInfo getUser() {\n        return user;\n    }\n\n    public void setUser(UserInfo user) {\n        this.user = user;\n    }\n", "reference_code": "        return imageAnnotations;\n    }\n\n    public void setImageAnnotations(String imageAnnotations) {\n", "case_type": "block"}
{"generated_code": "\n    private String groupName;\n\n    private String groupDescription;\n\n    private String groupType;\n\n    private String groupStatus;\n\n    private String groupOwner;\n\n    private String groupOwnerName;\n\n    private String groupOwnerEmail;\n\n    private String groupOwnerPhone;\n\n    private String groupOwnerAddress;\n\n    private String groupOwnerWebsite;\n\n    private String groupOwnerFacebook;\n\n    private String groupOwnerTwitter;\n\n    private String groupOwnerInstagram;\n\n    private String groupOwnerYoutube;\n\n    private String groupOwnerLinkedin;\n\n    private String groupOwnerPinterest;\n\n    private String groupOwnerTumblr;\n\n    private String groupOwnerVimeo;\n\n    private String groupOwnerFlickr;\n\n    private String groupOwnerDribbble;\n\n    private String groupOwnerBehance;\n\n    private String groupOwnerGithub;\n\n    private String groupOwnerGoogle;\n\n    private String groupOwnerStackoverflow;\n\n    private String groupOwnerQuora;\n\n    private String groupOwnerReddit;\n\n   ", "reference_code": "\n    private static final long serialVersionUID = 1L;\n\n", "case_type": "block"}
{"generated_code": "rainProtectionSize_notMet() {\n        map(3).containsValue(\"foo\");\n    }\n\n    private MultiMap<String, String> map(int splitBrainProtectionSize) {\n        MultiMap<String, String> multiMap = getHazelcastInstance().getMultiMap(\"multiMap\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multiMap.put(\"foo\", \"bar\");\n        multi", "reference_code": "    @Test\n", "case_type": "block"}
{"generated_code": " toLorCodeTexFormatter.format(\"[code=perl][/code]\"));\n    assertEquals(\"[code=perl,java]\",\n        toLorCodeTexFormatter.format(\"[code=perl,java]\"));\n    assertEquals(\"[code=perl,java=java]\",\n        toLorCodeTexFormatter.format(\"[code=perl,java=java]\"));\n    assertEquals(\"[code=perl,java=java,c]\",\n        toLorCodeTexFormatter.format(\"[code=perl,java=java,c]\"));\n    assertEquals(\"[code=perl,java=java,c=c]\",\n        toLorCodeTexFormatter.format(\"[code=perl,java=java,c=c]\"));\n    assertEquals(\"[code=perl,java=java,c=c,c++]\",\n        toLorCodeTexFormatter.format(\"[code=perl,java=java,c=c,c++]\"));\n    assertEquals(\"[code=perl,java=java,c=c,c++=c++]\",\n        toLor", "reference_code": "            toLorCodeTexFormatter.format(\n              \"[[code]] test\"\n            )\n    );\n", "case_type": "block"}
{"generated_code": "-user-doc -->\n     * <!-- end-user-doc -->\n     * @param value the new value of the '<em>Container Arc</em>' container reference.\n     * @see #getContainerArc()\n     * @generated\n     */\n    void setContainerArc(Arc value);\n\n    /**\n     * Returns the value of the '<em><b>Container HL Annotation</b></em>' container reference.\n     * It is bidirectional and its opposite is '{@link fr.lip6.move.pnml.hlpn.hlcorestructure.HLAnnotation#getContainerArc <em>Container Arc</em>}'.\n     * <!-- begin-user-doc -->\n     * <p>\n         * @see #setContainerHLAnnotation(HLAnnotation)\n         * @see fr.lip6.move.pnml.hlpn.hlcorestructure.HlcorestructurePackage#getHLAnnotation_ContainerHLAnnotation()\n         * @see fr.lip6.move.pnml.hlpn.hlcorestructure.HLAnnotation#getContainer", "reference_code": "    void setContainerArc(Arc value);\n\n    /**\n     * Return the string containing the pnml output\n", "case_type": "block"}
{"generated_code": " not(is(-1)));\n       import org.keycloak.testsuite.arquillian.LoadBalancingProxyClient;\n    import org.keycloak.testsuite.arquillian.Undertow;\nimport org.keycloak.testsuite.util.ContainerInfo;\nimport org.keycloak.testsuite.util.ServerURLs;\n\nimport io.undertow.Undertow;\nimport io.undertow.server.HttpHandler;\nimport io.undertow.server.HttpServerExchange;\nimport io.undertow.server.handlers.BlockingHandler;\nimport io.undertow.server.handlers.PathTemplateHandler;\nimport io.undertow.server.handlers.RedirectHandler;\nimport io.undertow.server.handlers.resource.ClassPathResourceHandler;\nimport io.undertow.servlet.Servlets;\nimport io.undertow.servlet.api.ListenerInfo;\nimport io.undertow.servlet.api.ListenerInfo.Builder;\nimport io.undertow.servlet.api.", "reference_code": "import io.undertow.Undertow;\nimport io.undertow.server.handlers.ResponseCodeHandler;\nimport io.undertow.server.handlers.proxy.LoadBalancingProxyClient;\nimport io.undertow.server.handlers.proxy.ProxyHandler;\n", "case_type": "block"}
{"generated_code": "), entry.getField(StandardField.DOI).get());\n        assertEquals(fieldMap.get(StandardField.ISSN), entry.getField(StandardField.ISSN).get());\n    }\n\n    @\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.jabref.model.format.UpperCaseFormatter;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\npublic class FieldFormatterCleanupTest {\n\n    private BibEntry entry;\n    private Map<Field, String> fieldMap;\n\n    @BeforeEach\n    public void setUp() {\n        fieldMap = new HashMap<>();\n        entry = new B        import java.util.HashMap;\nimport java.util.Map;\n\nimport org.jabref.model.format.UpperCaseFormatter;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api", "reference_code": "import java.util.HashMap;\nimport java.util.Map;\n\nimport org.jabref.logic.formatter.bibtexfields.UnicodeToLatexFormatter;\nimport org.jabref.logic.formatter.casechanger.UpperCaseFormatter;\n", "case_type": "block"}
{"generated_code": "                if (greaterThanFunction.invoke(leftElement, rightElement) instanceof Boolean) {\n                    if (!((Boolean) greaterThanFunction.invoke(leftElement, rightElement))) {\n                        return false;\n                    }\n                }\n                else {\n                    throw internalError(\"Operator 'greaterThanOrEqual' expects a boolean result\");\n                }\n            }\n            catch (Throwable t) {\n                throw internalError(t);\n            }\n            index++;\n        }\n\n        while (index < rightArray.getPositionCount()) {\n            try {\n                if (rightArray.isNull(index)) {\n                    return false;\n                }\n                if (greaterThanFunction.invoke(readNativeValue(type, leftArray, len), rightArray.getObject(index)) instanceof Boolean) {\n                    if (!((Boolean) greaterThanFunction.invoke(readNativeValue(type, leftArray, len), rightArray.getObject(index)))) {\n                        return false;\n                    }\n                }\n                else {\n                    throw internalError(\"Operator 'greaterThanOrEqual' expects a boolean result\");", "reference_code": "                if ((boolean) greaterThanFunction.invoke(leftElement, rightElement)) {\n                    return true;\n                }\n                if ((boolean) greaterThanFunction.invoke(rightElement, leftElement)) {\n", "case_type": "block"}
{"generated_code": "    /**\n     * 0 = no tooltip displayed\n     * 1 = tooltip displaying\n     */\n    TOOLTIP_VISIBLE_PLAYER(1),\n\n    /**\n     * 0 = no tooltip displayed\n     * 1 = tooltip displaying\n     */\n    TOOLTIP_VISIBLE_GAMEPLAY(2),\n\n    /**\n     * 0 = no tooltip displayed\n     * 1 = tooltip displaying\n     */\n    TOOLTIP_VISIBLE_GAMEPLAY_PLAYER(3),\n\n    /**\n     * 0 = no tooltip displayed\n     * 1 = tooltip displaying\n     */\n    TOOLTIP_VISIBLE_GAMEPLAY_GLOBAL(4),\n\n    /**\n     * 0 = no tooltip displayed\n     * 1 = tooltip displaying\n     */\n    TOOLTIP_VISIBLE_GAMEPLAY_PLAYER_GLOBAL(5),\n\n    /**\n     * 0 = no tooltip displayed\n     * ", "reference_code": "    TOOLTIP_TIMEOUT(1),\n\n", "case_type": "block"}
{"generated_code": "        } else {\n            handler.handleRequest(exchange);\n        }\n    }\n\n    @Override\n    public int getPriority() {\n        return handler.getPriority();\n    }\n\n    @Override\n    public boolean isDynamic() {\n        return handler.isDynamic();\n    }\n\n    @Override\n    public boolean isRedirect() {\n        return handler.isRedirect();\n    }\n\n    @Override\n    public boolean isFailed() {\n        return handler.isFailed();\n    }\n\n    @Override\n    public boolean isComplete() {\n        return handler.isComplete();\n    }\n\n    @Override\n    public boolean isFailedAndComplete() {\n        return handler.isFailedAndComplete();\n    }\n\n    @Override\n    public boolean isFailedAndRedirect() {\n        return handler.isFailedAndRedirect();\n    }\n\n    @Override\n    public boolean isFailedAndDynamic() {\n        return handler.isFailedAndDynamic();\n    }\n\n    @Override\n    public boolean isFailedAndDynamicAndRedirect() {\n        return handler.isFailedAndDynamicAnd", "reference_code": "        } else {\n            handler.handleRequest(exchange);\n        }\n    }\n", "case_type": "block"}
{"generated_code": " String extra, IoSession session)\n    {\n        logger.debug(\"【IM_回调通知OnUserLogoutAction_CallBack】用户：\"+userId+\" 下线了！\");\n    }\n\n}\n\n    /**\n     * 用户登录成功后的回调方法定义（可理解为上线通知回调）。\n     * <p>\n     * 服务端的应用层通常可在本方法中实现用户上线通知等。\n     * \n     * @param userId 登陆成功的用户user_id\n     * @param obj\n     * @param extra 额外信息字符串。本字段目前为保留字段，供上层应用自行放置需要的内容\n     * @param session 此客户端连接对应的MINA会话\n     */\n    @Override\n    public void onUserLoginAction_CallBack(String userId, String extra, IoSession session)\n    {\n        logger.debug(\"【IM_回调通知OnUserLoginAction_CallBack】用户：\"+userId+\" 上线了！\");\n   ", "reference_code": "     * 注意：本回调在一种特殊情况下——即用户实际未退出登陆但再次发起来登陆包时，回调也是一定会被调用。\n     * \n     * @param userId 传递过来的准一id，保证唯一就可以通信，可能是登陆用户名、也可能是任意不重复的id等，具体意义由业务层决定\n     * @param extra 额外信息字符串。本字段目前为保留字段，供上层应用自行放置需要的内容。为了丰富应用层处理的手段，在本回调中也把此字段传进来了\n", "case_type": "block"}
{"generated_code": "    public Fahrenheit(double temperature){\n        this.temperature = temperature;\n\n    }\n\n    public Fahrenheit(int temperature){\n        this.temperature = temperature;\n\n    }\n\n    public Fahrenheit(String temperature){\n        this.temperature = Double.parseDouble(temperature);\n\n    }\n\n    public Fahrenheit(boolean temperature){\n        this.temperature = temperature ? 1 : 0;\n\n    }\n\n    public Fahrenheit(char temperature){\n        this.temperature = temperature;\n\n    }\n\n    public Fahrenheit(float temperature){\n        this.temperature = temperature;\n\n    }\n\n    public Fahrenheit(long temperature){\n        this.temperature = temperature;\n\n    }\n\n    public Fahrenheit(short temperature){\n        this.temperature = temperature;\n\n    }\n\n    public Fahrenheit(byte temperature){\n        this.temperature = temperature;\n\n    }\n\n    public Fahrenheit(Object temperature){\n        this.temperature = (double)", "reference_code": "    public Fahrenheit(double temperature) {\n        this.temperature = temperature;\n", "case_type": "block"}
{"generated_code": "        this.rows = rows;\n    }\n\n    public int getEndNum() {\n        return startNum + rows;\n    }\n\n    public void setEndNum(int endNum) {\n        this.startNum = endNum - rows;\n    }\n\n    @Override\n    public String toString() {\n        return \"Page [startNum=\" + startNum + \", rows=\" + rows + \"]\";\n    }\n\n    public void setPage(int page, int rows) {\n        this.startNum = (page - 1) * rows;\n        this.rows = rows;\n    }\n\n    public int getPage() {\n        return (startNum / rows) + 1;\n    }\n\n    public int getTotalPage() {\n        return (int) Math.ceil((double) startNum / rows);\n    }\n\n    public int getTotalCount() {\n        return startNum;\n    }\n\n    public void setTotalCount(int totalCount) {\n        this.startNum = totalCount;\n    }\n\n    public void setTotalPage(int totalPage) {", "reference_code": "        this.rows = rows;\n    }\n", "case_type": "block"}
{"generated_code": "(webXmlContents, targetJenkinsHomeBaseDir);\n\n            // Create a new WAR file with our updated web.xml\n            JarOutputStream jenkinsWarOutputStream = new JarOutputStream(new FileOutputStream(jenkinsDeployFile));\n            jenkinsWarOutputStream.putNextEntry(new JarEntry(webXmlFilename));\n            jenkinsWarOutputStream.write(updatedXml.getBytes());\n            jenkinsWarOutputStream.closeEntry();\n            jenkinsWarOutputStream.close();\n\n            // Copy the WAR file to the target location\n            FileUtils.copyFile(jenkinsDeployFile, new File(deployLocation));\n\n            // Copy the WAR file to the target location\n            FileUtils.copyFile(jenkinsDeployFile, new File(deployLocation));\n\n            // Copy the WAR file to the target location\n            FileUtils.copyFile(jenkinsDeployFile, new File(deployLocation));\n\n            // Copy the WAR file to the target location\n            FileUtils.copyFile(jenkinsDeployFile, new File(deployLocation));\n\n            //", "reference_code": "                if (curEntry.getName().equals(\"META-INF/MANIFEST.MF\")) {\n                    continue;\n                }\n", "case_type": "block"}
{"generated_code": "@RunWith(PaxExam.class)\n@PaxExam.Options(junit = \"4.12\", tag = \"itest\", includeTags = \"itest\", includeEngines = \"jetty\")\n@PaxExam.Container(image = \"org.apache.camel.itest.karaf:camel-mqtt:1.0.0-SNAPSHOT\", managed = true)\n@PaxExam.UseMavenRepository(id = \"org.apache.camel.itest.karaf\", type = \"local\",\n        url = \"https://repository.apache.org/content/repositories/orgapachecamelitestkaraf/\")\n@PaxExam.UseFeature(id = \"org.apache.camel.component.mqtt\", enabled = true)\n@PaxExam.UseFeature(id = \"org.apache.camel.component.file\", enabled = true)\n@PaxExam.UseFeature(id = \"org.apache.camel.component.jms\", enabled = true)\n@PaxExam.Use", "reference_code": "@RunWith(PaxExam.class)\n", "case_type": "block"}
{"generated_code": "    private static final Type MAP_TOKEN = new TypeToken<Map<String, Object>>()\n    {\n    }.getType();\n\n    private final SavedScriptRunner savedScriptRunner;\n\n    @Autowired\n    @Lazy\n    @Bean\n    public ScriptJobExecutionMetadata scriptJobExecutionMetadata()\n    {\n        return new ScriptJobExecutionMetadata();\n    }\n\n    @Autowired\n    @Lazy\n    @Bean\n    public SavedScriptRunner savedScriptRunner()\n    {\n        return new SavedScriptRunner();\n    }\n\n    @Autowired\n    @Lazy\n    @Bean\n    public ScheduledJobTypeFactory scheduledJobTypeFactory()\n    {\n        return new ScheduledJobTypeFactory();\n    }\n\n    private final SavedScriptRunner savedScriptRunner;\n\n    @Autowired\n    @Lazy\n    @Bean\n    public ScriptJobExecutionMetadata scriptJobExecutionMetadata();\n\n    @Autowired\n    @Lazy\n    @Bean\n    public SavedScriptRunner savedScriptRunner();\n\n    @Autowired\n    @", "reference_code": "    private static final Type MAP_TOKEN = new TypeToken<Map<String, Object>>()\n    {\n    }.getType();\n\n    private final SavedScriptRunner savedScriptRunner;\n", "case_type": "block"}
{"generated_code": "\n    /**\n     * Initializes all live attributes for this element.\n     */\n    protected void initializeLiveAttributes() {\n        x = createLiveAnimatedNumber(null, SVG_X_ATTRIBUTE, 0f);\n\n        // The 'y' attribute is optional.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n        // The default value is 0.\n       ", "reference_code": "\n    /**\n     * Initializes the live attribute values of this element.\n     */\n    private void initializeLiveAttributes() {\n        x = createLiveAnimatedNumber(null, SVG_X_ATTRIBUTE, 0f);\n", "case_type": "block"}
{"generated_code": "     */\n    public LogoutLinkClickHandlerImpl(final EventBus eventBus) {\n\n        super();\n\n        if (eventBus == null) {\n            throw new IllegalArgumentException(\"eventBus\");\n        }\n\n        //\n        // Init\n        //\n\n        //\n        // Setup\n        //\n\n        //\n        // Properties\n        //\n\n        //\n        // Methods\n        //\n\n        //\n        // Inner classes\n        //\n\n        //\n        // Fields\n        //\n\n        //\n        // Init\n        //\n\n        //\n        // Setup\n        //\n\n        //\n        // Properties\n        //\n\n        //\n        // Methods\n        //\n\n        //\n        // Inner classes\n        //\n\n        //\n        // Fields\n        //\n\n        //\n        // Init\n        //\n\n        //\n        // Setup\n        //\n\n        //\n        // Properties\n        //\n\n        //\n        // Methods\n        //\n\n        //\n        // Inner classes\n        //\n\n        //\n        // Fields\n", "reference_code": "     *            the bus to publish events on\n     */\n    public LogoutLinkClickHandlerImpl(final EventBus eventBus) {\n", "case_type": "block"}
{"generated_code": "public class ValidationRuleGroupController\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n\n    // TODO: Implement\n", "reference_code": "public class ValidationRuleGroupController\n", "case_type": "block"}
{"generated_code": "    {\n        m_suffix = suffix;\n        m_createException = createException;\n        m_msecUntilException = msec;\n        m_shutdownRequested = false;\n\n        Logging.logInfo (\"ProcessorMock%s starting\", m_suffix);\n\n        processUntilShutdown ();\n\n        Logging.logInfo (\"ProcessorMock%s finished\", m_suffix);\n\n        ThreadContext.throwFault (new AssertException (OpResult.Severity.Error, null, false));\n\n        Thread.currentThread ().interrupt ();\n\n        //System.out.printf (\"ProcessorMock%s [%s]%n\", m_suffix, i);\n\n        //throw new AssertException (OpResult.Severity.Error, null, false);\n\n        //return null;\n\n        //return new AssertException (OpResult.Severity.Error, null, false);\n\n        //return new AssertException (OpResult.Severity.Error, null, false);\n\n        //return new AssertException (OpResult.Severity.Error, null, false);", "reference_code": "    {\n        m_createException = createException;\n        m_suffix = suffix;\n        m_msecUntilException = msec;\n", "case_type": "block"}
{"generated_code": "    openMainPage();\n    gotoGroupsPage();\n    initGroupCreation();\n    selectGroupCreation();\n    selectEmptyGroupCreation();\n    fillGroupForm(new GroupData());\n    submitGroupCreation();\n    returnGroupsPage();\n  }\n\n  @Test\n  public void testGroupCreation() throws Exception {\n    openMainPage();\n    gotoGroupsPage();\n    initGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCreation();\n    selectGroupCre", "reference_code": "    openMainPage();\n    gotoGroupsPage();\n    initGroupCreation();\n", "case_type": "block"}
{"generated_code": "                GridBagConstraints.NONE, new Insets(6, 6, 0, 0), 0, 0));\n    }\n\n    @Override\n    protected void initializeListeners () {\n        super.initializeListeners();\n        drawXYZCheckBox.addActionListener(new ActionListener() {\n            public void actionPerformed (ActionEvent event) {\n                DrawPanel.this.editor.getRenderer().setDrawXYZ(drawXYZCheckBox.isSelected());\n            }\n        });\n        drawXYZCheckBox.setSelected(editor.getRenderer().IsDrawXYZ());\n\n        drawXZPlaneBox.addActionListener(new ActionListener() {\n            public void actionPerformed (ActionEvent event) {\n                DrawPanel.this.editor.getRenderer().setDrawXZPlane(drawXZPlaneBox.isSelected());\n            }\n        });\n        drawXZPlaneBox.setSelected(editor.getRenderer().IsDrawXZPlane());\n\n        drawXYPlaneBox.addActionListener(new ActionListener() {\n            public void actionPerformed", "reference_code": "                GridBagConstraints.NONE, new Insets(6, 6, 0, 0), 0, 0));\n\n        //Listeners\n        drawXYZCheckBox.addActionListener(new ActionListener() {\n            public void actionPerformed (ActionEvent event) {\n", "case_type": "block"}
{"generated_code": "debugLogMessage(log, streamEvent, \" processed\");\n            }\n            process(streamEvent);\n        }\n    }\n\n    @Override\n    public String getElementId() {\n        return elementId;\n    }\n\n    @Override\n       }\n            }\n            if (log.isDebugEnabled()) {\n                LogHelper.debugLogMessage(log, streamEvent, \" processed\");\n            }\n            if (siddhiContext.isAsyncProcessing() || siddhiContext.isDistributedProcessingEnabled()) {\n                inputQueue.put(streamEvent);\n            } else {\n                if (log.isDebugEnabled()) {\n                    LogHelper.debugLogMessage(log, streamEvent, \" processed\");\n                }\n\n                //in reverse order to execute the later states first to overcome to dependencies of count states\n                for (int i = patternInnerHandlerProcessorListSize - 1; i >= 0; i--) {\n                    patternInnerHandlerProcessorList.get(i).moveNextEventsToCurrentEvents();\n                }\n                for (int i = patternInnerHandlerProcessorListSize - 1; i >= 0;", "reference_code": "                }\n                eventCounter++;\n", "case_type": "block"}
{"generated_code": "            Assert.assertEquals(point.getX(), avgChartPointList.get(i).getX());\n            Assert.assertEquals(point.getY(), avgChartPointList.get(i).getY());\n        }\n\n        Assert.assertEquals(sampledResponseTimeList.size(), avgChartPointList.size());\n\n        Assert.assertEquals(sampledResponseTimeList, responseTimeChartGroup.getSampledResponseTimeList());\n        Assert.assertEquals(timeWindow, responseTimeChartGroup.getTimeWindow());\n\n        Assert.assertEquals(sampledResponseTimeList.size(), charts.size());\n        Assert.assertEquals(sampledResponseTimeList.size(), charts.values().size());\n\n        Assert.assertEquals(sampledResponseTimeList.size(), charts.values().size());\n        Assert.assertEquals(sampledResponseTimeList.size(), charts.values().size());\n\n        Assert.assertEquals(sampledResponseTimeList.size(), charts.values().size());\n        Assert.assertEquals(sampledResponseTimeList.size(), charts.values().size());\n\n        Assert.assertEquals(sampledResponseTimeList.size(), charts.values().", "reference_code": "\n            Assert.assertEquals(avgChartPointList.get(i), point);\n        }\n", "case_type": "block"}
{"generated_code": "\n    @Override\n    protected void process( Operation op ) {\n        //online logic\n    }\n\n    @Override\n    protected void postProcessing( Operation op ) {\n        //post processing online logic\n    }\n\n    @Override\n    protected void preProcessing( Operation op ) {\n        //pre processing online logic\n    }\n\n    @Override\n    protected void process( Operation op ) {\n        //online logic\n    }\n\n    @Override\n    protected void postProcessing( Operation op ) {\n        //post processing online logic\n    }\n\n    @Override\n    protected void preProcessing( Operation op ) {\n        //pre processing online logic\n    }\n\n    @Override\n    protected void process( Operation op ) {\n        //online logic\n    }\n\n    @Override\n    protected void postProcessing( Operation op ) {\n        //post processing online logic\n    }\n\n    @Override\n    protected void preProcessing( Operation op ) {\n        //pre processing online logic\n    }\n\n    @Override\n    protected void process( Operation op ) {\n        //online logic\n    }\n\n   ", "reference_code": "\n    @Override\n", "case_type": "block"}
{"generated_code": "        }\n        return false;\n    }\n\n    private static void removeVersionInSharedPreferences(String dbName) {\n        SharedUtil.remove(LitePalApplication.getContext(), Const.Config.VERSION_KEY, dbName);\n    }\n\n    private static boolean isDefaultDatabase(String dbName) {\n        return BaseUtility.isDefaultDatabase(dbName);\n    }\n\n    private static boolean isLitePalXml(String dbName) {\n        return LitePalConfig.isLitePalXml(dbName);\n    }\n\n    private static boolean isExternalStorage(String dbName) {\n        return LitePalConfig.isExternalStorage(dbName);\n       }\n\n    public static boolean deleteDatabase(LitePalDB litePalDB) {\n                if (!isLitePalXml(litePalDB.getDbName())) {\n                    removeVersionInSharedPreferences(litePalDB.getDbName());\n                }\n                if (!isExternalStorage(litePalDB.getDbName())) {\n                    LitePalApplication.getContext().deleteDatabase(litePal", "reference_code": "                    removeVersionInSharedPreferences(dbName);\n", "case_type": "block"}
{"generated_code": "import java.io.File;\nimport java.io.IOException;\nimport java.net.UnknownHostException;\nimport java.nio.file.Paths;\n\nimport com.github.easyadmin.util.FileManager;\n\nimport java.nio.file.FileManager;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.nio.file.attribute.PosixFilePermission;\nimport java.util.List;\nimport java.util.Set;\n\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\nimport java.nio.file.attribute.PosixFilePermission;\nimport java.util.Set;\n\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.", "reference_code": "import java.io.File;\nimport java.io.IOException;\nimport java.net.UnknownHostException;\nimport java.nio.file.Paths;\n", "case_type": "block"}
{"generated_code": "     */\n    private DQ_Element() {\n        super(null);\n        // No-op\n    }\n\n    /**\n     * Returns a new {@code DQ_Element} instance.\n     *\n     * @param  metadata The metadata to wrap.\n     * @return A new {@code DQ_Element} instance.\n     */\n    public static DQ_Element wrap(final Element metadata) {\n        return new DQ_Element(metadata);\n    }\n\n    /**\n     * Returns the GeoAPI interface which is bound by this adapter.\n     * This method is indirectly invoked by the private constructor\n     * below, so it shall not depend on the state of this object.\n     *\n     * @return {@code Element.class}\n     */\n    @Override\n    protected Class<Element> getBoundType() {\n        return Element.class;\n    }\n\n    /**\n     * Returns a new {@code DQ_Element} instance.\n     *\n     * @param  metadata The metadata to wrap.\n     * @return A new {@code DQ_Element} instance.\n     */\n   ", "reference_code": "     */\n    public DQ_Element() {\n", "case_type": "block"}
{"generated_code": "        }catch(Exception e){\n            e.printStackTrace();\n        }\n        System.out.print(out);\n    }\n\n    private static BigInteger fatorial(String numberS) {\n        BigInteger number = new BigInteger(\"1\");\n        int num = Integer.parseInt(numberS);\n        for (int i = 2; i <= num; i++) {\n            String aux = new Integer(i).toString();\n            number = number.multiply(new BigInteger(aux));\n        }\n        return number;\n    }\n\n    private static int sum(char[] numbers) {\n        int sum = 0;\n        for (int i = 0; i < numbers.length; i++) {\n            sum += numbers[i] - 48;\n        }\n        return sum;\n    }\n\n    private static int sum(char[] numbers) {\n        int sum = 0;\n        for (int i = 0; i < numbers.length; i++) {\n            sum += numbers[i] - 48;\n        }\n        return sum;\n    }\n\n   ", "reference_code": "        }catch(Exception e){\n\n        }\n        System.out.println(out.toString().trim());\n\n    }\n", "case_type": "block"}
{"generated_code": "\nimport java.math.*;\n\nimport javax.annotation.Generated;\n\nimport com.fasterxml.jackson.core.JsonUnmarshallerContext;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.core.internal.FasterStreamWriter;\n\nimport com.amazonaws.Protocol;\nimport com.amazonaws.annotation.SdkInternalApi;\nimport com.amazonaws.util.json.JacksonJsonGenerator;\nimport com.amazonaws.util.json.JacksonJsonParser;\nimport com.amazonaws.util.json.JsonGenerator;\nimport com.amazonaws.util.json.JsonParser;\nimport com.amazonaws.util.json.JsonString;\nimport com.amazonaws.util.json.JsonValue;\n\nimport java.io.*;\nimport java.math.*;\nimport java.util.*;\n\nimport org.apache.hadoop.hive.ql.io.HiveInputFormat;\nimport org.apache.hadoop.hive.ql.io.HiveOutputFormat;\nimport org.apache.hadoop.hive.ql", "reference_code": "\nimport java.math.*;\n\nimport javax.annotation.Generated;\n", "case_type": "block"}
{"generated_code": "\n    @Override\n    public ErrorResolution handleError(Exception e) {\n        logger.error(\"Error in CustomAction\", e);\n        SessionMessages.addErrorMessage(e.getMessage());\n        return cancel();\n    }\n\n    @Override\n    public Resolution cancel() {\n        prepareConfigurationForms();\n        return new ForwardResolution(\"/m/pageactions/pageactions/custom/configure.jsp\");\n    }\n\n    @Override\n    public Resolution handleError(String message) {\n        SessionMessages.addErrorMessage(message);\n        return cancel();\n    }\n\n    @Override\n    public Resolution handleError(String message, Exception e) {\n        logger.error(\"Error in CustomAction\", e);\n        SessionMessages.addErrorMessage(message);\n        return cancel();\n    }\n\n    @Override\n    public Resolution handleError(String message, Exception e, String url) {\n        logger.error(\"Error in CustomAction\", e);\n        SessionMessages.addErrorMessage(message);\n        return new ForwardResolution(url);\n    }\n\n    @Override\n    public Resolution", "reference_code": "\n    public Resolution preparePage() {\n        if(!pageInstance.getParameters().isEmpty()) {\n            return new ErrorResolution(404);\n        }\n", "case_type": "block"}
{"generated_code": "    private PropertiesUtil() {\n        // Utility class\n        throw new UnsupportedOperationException();\n\n    }\n\n    public static Properties load(Class<?> clazz, String propsName) throws IOException {\n        return load(\"/\" + clazz.getName().replace('.', '/') + \"/\" + propsName);\n\n    }\n\n    public static Properties load(Class<?> clazz, String propsName, String locale) throws IOException {\n        return load(clazz, propsName + \"_\" + locale);\n\n    }\n\n    public static Properties load(Class<?> clazz, String propsName, String locale, String environment) throws IOException {\n        return load(clazz, propsName + \"_\" + locale + \"_\" + environment);\n\n    }\n\n    public static Properties load(Class<?> clazz, String propsName, String locale, String environment, String application) throws IOException {\n        return load(clazz, propsName + \"_\" + locale + \"_\" + environment + \"_\" + application);\n\n    }\n\n    public static Properties load(Class<?> clazz, String propsName, String locale, String", "reference_code": "    private PropertiesUtil() {\n\n        // Hide constructor for util classes\n", "case_type": "block"}
{"generated_code": "        }\n    }\n\n    public Hashtable getFeed(){\n        Hashtable output = new Hashtable();\n        for(int i = 0; i < rssTitles.size(); i++){\n            if(rssTitles.elementAt(i) == null || rssLinks.elementAt(i) == null)\n                continue;\n\n            if(rssTitles.elementAt(i).equalsIgnoreCase(\"\") || rssLinks.elementAt(i).equalsIgnoreCase(\"\"))\n                continue;\n\n            if(rssTitles.elementAt(i).equalsIgnoreCase(\"null\"))\n                continue;\n\n            if(rssLinks.elementAt(i).equalsIgnoreCase(\"null\"))\n                continue;\n\n            if(rssTitles.elementAt(i).equalsIgnoreCase(\"null\"))\n                continue;\n\n            if(rssLinks.elementAt(i).equalsIgnoreCase(\"null\"))\n                continue;\n\n            if(rssTitles.elementAt(i).equalsIgnoreCase(\"null\"))\n                continue;\n\n           ", "reference_code": "        }\n    }\n\n    public Hashtable getTable(){\n        Hashtable output = new Hashtable();\n        for(int i =0; i< rssTitles.size(); i++){\n", "case_type": "block"}
{"generated_code": "        return retVal;\n    }\n\n    public int size() {\n        return seed.size();\n    }\n\n    public boolean isEmpty() {\n        return seed.isEmpty();\n    }\n\n    public void clear() {\n        seed.clear();\n        modifications.clear();\n    }\n\n    public Map<K,V> getSeed() {\n        return seed;\n    }\n\n    public    retVal.forEach((k) -> {\n            if ( !modifications.containsKey(k) ) {\n                // we are not interested in the modification\n                // so we can remove it from the set\n                modifications.remove(k);\n            } else {\n                // we are interested in the modification\n                // so we can add it to the set\n                // and remove it from the map\n                retVal.remove(k);\n            }\n        });\n        modifications.keySet().forEach((k) -> {\n            if ( !modifications.containsKey(k) ) {\n                // we are not interested in the modification\n                // so we can remove it from the set\n                modifications.remove(k", "reference_code": "        modifications.forEach((k,v)->{\n            if ( v == Modification.DELETE ) {\n                retVal.remove(k);\n            } else {\n", "case_type": "block"}
{"generated_code": "   * <p><b>Caution:</b> Do not modify the input Summary objects. Also do not return them directly,\n   * unless they are immutable (most Summary objects are not). For mutable Summary objects, it is\n   * important to create a new Summary object with the correct contents to be returned. Do not\n   *\n   * <p><b>Caution:</b> Do not modify the input Summary objects. Also do not return them directly,\n   * unless they are immutable (most Summary objects are not). For mutable Summary objects, it is\n   * important to create a new Summary object with the correct contents to be returned. Do not\n   *\n   * <p><b>Caution:</b> Do not modify the input Summary objects. Also do not return them directly,\n   * unless they are immutable (most Summary objects are not). For mutable Summary objects, it is\n   * important to create a new Summary object with the correct contents to be returned. Do not\n   *\n   * <p><b>Caution:</b> Do not modify the input Summary objects. Also do not return them directly", "reference_code": "   * <p><b>Caution:</b> Do not modify the input Summary objects. Also do not return them directly,\n   * unless they are immutable (most Summary objects are not). For mutable Summary objects, it is\n   * important to create a new Summary object with the correct contents to be returned. Do not\n", "case_type": "block"}
{"generated_code": "     * </p>\n     * \n     * @param aKeys\n     * @param aValues\n     * @return an initialized dataset\n     */\n    public static Dataset create( Collection<String> aKeys, Object[] aValues )\n        throws SdiException\n    {\n        return create( aKeys, java.util.Arrays.asList( aValues ) );\n    }\n\n    /**\n     * Convertes the given collections into a Dataset\n     * <p>\n     * Both collections must not be <code>null</code> and have the same size\n     * </p>\n     * \n     * @param aKeys\n     * @param aValues\n     * @return an initialized dataset\n     */\n    public static Dataset create( Collection<String> aKeys, Object[][] aValues )\n        throws SdiException\n    {\n        return create( aKeys, java.util.Arrays.asList( aValues ) );\n    }\n\n    /**\n     * Convertes the given collections into a Dataset\n     * <p>\n     * Both collections must not be <code>", "reference_code": "     * <p>\n     * @param aKeys\n", "case_type": "block"}
{"generated_code": "   * \n   * @param name\n   *          : name of the parameter\n   * @param value\n   *          : value of the parameter\n   */\n  public Parameter(String name, Object... value) {\n    this.name = name;\n    this.values = new ArrayList<>();\n    setParameterValues(value);\n  }\n\n  /**\n   * Create a REST parameter.\n   * \n   * @param name\n   *          : name of the parameter\n   * @param values\n   *          : list of values of the parameter\n   */\n  public Parameter(String name, Object[] values) {\n    this.name = name;\n    this.values = new ArrayList<>();\n    setParameterValues(values);\n  }\n\n  /**\n   * Create a REST parameter.\n   * \n   * @param name\n   *          : name of the parameter\n   * @param values\n   *          : list of values of the parameter\n   */\n  public Parameter(String name, List<?> values) {\n    this.name = name;\n    this.values =", "reference_code": "   * \n   * @param name\n", "case_type": "block"}
{"generated_code": "Reference is null, skipping monitor\");\n                return;\n            }\n\n                       runningTasks.add(new RunningTask(onMonitorComplete, onMonitorError, condition, checkInterval, timeout, timeUnit));\n    }\n\n    @PreDestroy\n    public void destroy() {\n        timeOutVerifierService.shutdownNow();\n        executorService.shutdownNow();\n    }\n\n    private void startTimeOutVerifierService() {\n        timeOutVerifierService = Executors.newSingleThreadScheduledExecutor();\n        timeOutVerifierService.scheduleWithFixedDelay(() -> {\n            if (runningTasks.isEmpty()) {\n                log.debug(\"No running tasks, stopping time out verifier\");\n                timeOutVerifierService.shutdownNow();\n            }\n        }, 0, checkInterval, TimeUnit.SECONDS);\n    }\n\n    private int getValueFromPropertyOrDefault(String propertyName, int defaultValue, String propertyDescription) {\n        String propertyValue = System.getProperty(propertyName);\n        return propertyValue != null ? Integer.parseInt(propertyValue) : defaultValue;", "reference_code": "    public PullingMonitor() {\n\n        timeout = getValueFromPropertyOrDefault(PULLING_MONITOR_TIMEOUT_KEY, DEFAULT_TIMEOUT, \"timeout\");\n        checkInterval = getValueFromPropertyOrDefault(PULLING_MONITOR_CHECK_INTERVAL_KEY,\n                                                      DEFAULT_CHECK_INTERVAL,\n", "case_type": "block"}
{"generated_code": "    {\n        return this.type.hashCode() ^ this.state;\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"MaterialState[type=\" + this.type + \",state=\" + this.state + \"]\";\n    }\n\n    @Override\n    public MaterialState clone()\n    {\n        return new BukkitMaterialState(this.type, this.state);\n    }\n\n    @Override\n    public boolean isTransparent()\n    {\n        return this.type.isTransparent();\n    }\n\n    @Override\n    public boolean isSolid()\n    {\n        return this.type.isSolid();\n    }\n\n    @Override\n    public boolean isLiquid()\n    {\n        return this.type.isLiquid();\n    }\n\n    @Override\n    public boolean isWater()\n    {\n        return this.type.isWater();\n    }\n\n    @Override\n    public boolean isAir()\n    {\n        return this.type.isAir();\n    }\n\n    @Override\n   ", "reference_code": "    {\n        int r = 1;\n        r = r * 31 + this.state;\n        r = r * 31 + this.type.hashCode();\n        return r;\n", "case_type": "block"}
{"generated_code": " milliseconds </li>\n   * <li> or {@link ExternalTaskClient#LOCK_DURATION_INFINITE} for infinite lock duration </li>\n   * </ul>\n   */\n  long lockDuration() default LONG_NULL_VALUE;\n\n  /**   *\n   * @return fetchPriority\n   */\n  String fetchPriority() default STRING_NULL_VALUE;\n\n  /**\n   * @return fetchLockPriority\n   */\n  String fetchLockPriority() default STRING_NULL_VALUE;\n\n  /**\n   * @return fetchLockPriority\n   */\n  String fetchLockPriority() default STRING_NULL_VALUE;\n\n  /**\n   * @return fetchLockPriority\n   */\n  String fetchLockPriority() default STRING_NULL_VALUE;\n\n  /**\n   * @return fetchLockPriority\n   */\n  String fetchLockPriority() default STRING_NULL_VALUE;\n\n  /**\n   * @return fetchLockPriority\n   */\n  String fetchLockPriority() default STRING_NULL_VALUE;\n\n  /**\n   * @return fetchLockPriority", "reference_code": "   * This information is optional. Default is <code>true</code>.\n   *\n   * @return usePriority when fetching and locking tasks\n   */\n  boolean usePriority() default true;\n\n", "case_type": "block"}
{"generated_code": ")\", tableName));\n    }\n\n    public SqlQueryBuilder appendInsert(String tableName) {        public SqlQueryBuilder appendInsert() {\n        return append(\"new Insert()\");\n    }\n\n    public SqlQueryBuilder appendUpdate() {\n        return append(\"new Update()\");\n    }\n\n    public SqlQueryBuilder appendDeleteAll() {\n        return append(\"new Delete()\");\n    }\n\n    public SqlQueryBuilder appendDeleteWhere() {\n        return append(\"new Delete()\");\n    }\n\n    public SqlQueryBuilder appendDeleteWhere(String selection, String[] selectionArgs) {\n        return append(\"new Delete()\");\n    }\n\n    public SqlQueryBuilder appendDeleteWhere(String selection, String[] selectionArgs, String[] whereArgs) {\n        return append(\"new Delete()\");\n    }\n\n    public SqlQueryBuilder appendDeleteWhere(String selection, String[] selectionArgs, String[] whereArgs, String[] whereArgs2) {\n        return append(\"new Delete()\");\n    }\n\n    public SqlQueryBuilder appendDeleteWhere(String selection, String[] selectionArgs, String[] whereArgs, String[] whereArgs2", "reference_code": "    public SqlQueryBuilder appendUpdate(String databaseName, String tableName) {\n        return append(String.format(\"new Update(FlowManager.getTableClassForName(\\\"%1s\\\", \\\"%1s\\\"))\",\n                databaseName, tableName));\n    }\n\n", "case_type": "block"}
{"generated_code": "     * @return\n     */\n    ModelContent convertToModelContent(byte[] modelFile);\n\n    /**\n     * Returns the ModelContent given the byte array of the model file\n     * @param modelContent\n     * @return\n     */\n    ModelContent convertToModelContent(byte[] modelFile, String modelName);\n\n    /**\n     * Returns the ModelContent given the byte array of the model file\n     * @param modelContent\n     * @return\n     */\n    ModelContent convertToModelContent(byte[] modelFile, String modelName, String modelVersion);\n\n    /**\n     * Returns the ModelContent given the byte array of the model file\n     * @param modelContent\n     * @return\n     */\n    ModelContent convertToModelContent(byte[] modelFile, String modelName, String modelVersion, String modelDescription);\n\n    /**\n     * Returns the ModelContent given the byte array of the model file\n     * @param modelContent\n     * @return\n     */\n    ModelContent convertToModelContent(byte[] modelFile, String modelName, String modelVersion, String modelDescription, String modelAuthor);\n\n   ", "reference_code": "     * @return\n     */\n    ModelContent convertToModelContent(byte[] modelFile);\n", "case_type": "block"}
{"generated_code": "        this.assignmentList = new ArrayList<Assignment>();\n    }\n\n    public UpdateQuery(String className, ArrayList<Assignment> assignmentList)\n    {\n        super();\n        this.className = className;\n        this.assignmentList = assignmentList;\n    }\n\n    public UpdateQuery(String className, ArrayList<Assignment> assignmentList, SimpleNode expression)\n    {\n        super();\n        this.className = className;\n        this.assignmentList = assignmentList;\n        this.expression = expression;\n    }\n\n    public UpdateQuery(String className, ArrayList<Assignment> assignmentList, SimpleNode expression, String tableName)\n    {\n        super();\n        this.className = className;\n        this.assignmentList = assignmentList;\n        this.expression = expression;\n        this.tableName = tableName;\n    }\n\n    public UpdateQuery(String className, ArrayList<Assignment> assignmentList, SimpleNode expression, String tableName, String where)\n    {\n        super();\n        this.className = className;\n        this.assignmentList = assignmentList;\n        this.expression", "reference_code": "        this.assignmentList = new ArrayList<Assignment>();\n    }\n\n    public UpdateQuery(String className, ArrayList<Assignment> assignmentList)\n    {\n", "case_type": "block"}
{"generated_code": "package org.apache.calcite.sql.functions;\n\nimport org.apache.calcite.sql.SqlFunctionCategory;\nimport org.apache.calcite.sql.SqlFunctionCategorySet;\nimport org.apache.calcite.sql.SqlFunctionCategorySet.SqlFunctionCategorySetBuilder;\nimport org.apache.calcite.sql.SqlFunctionCategorySet.SqlFunctionCategorySetBuilder.SqlFunctionCategorySetBuilderImpl;\nimport org.apache.calcite.sql.SqlFunctionCategorySet.SqlFunctionCategorySetBuilder.SqlFunctionCategorySetBuilderImpl.SqlFunctionCategorySetBuilderImplImpl;\nimport org.apache.calcite.sql.SqlFunctionCategorySet.SqlFunctionCategorySetBuilder.SqlFunctionCategorySetBuilderImpl.SqlFunctionCategorySetBuilderImplImpl.SqlFunctionCategorySetBuilderImplImplImpl;\nimport org.apache.calcite.sql.type.NumberComparator;\nimport org.apache.calcite.sql.type.NumberComparator.NumberComparatorBuilder;\nimport org.apache.calcite.sql.type.NumberComparator.NumberComparatorBuilder.NumberComparatorBuilderImpl;\nimport org.apache", "reference_code": "package org.apache.metamodel.query;\n\nimport org.apache.metamodel.data.Row;\nimport org.apache.metamodel.schema.ColumnType;\nimport org.apache.metamodel.util.NumberComparator;\n", "case_type": "block"}
{"generated_code": "    private String ccid;\n    private boolean pending = true;\n    private boolean sent = false;\n    private boolean acknowledged = false;\n    private Compressed compressed;\n    private OnAcknowledgedListener acknowledgedListener;\n    private OnCompleteListener completeListener;\n    private OnRetryListener retryListener;\n    private Map<String, Object> properties = new HashMap<String, Object>();\n    private Logger logger = new Logger(TAG);\n\n    public String getBucketName() {\n        return bucketName;\n    }\n\n    public String getCcid() {\n        return ccid;\n    }\n\n    public String getOperation() {\n        return operation;\n    }\n\n    public void setAcknowledgedListener(OnAcknowledgedListener listener) {\n        this.acknowledgedListener = listener;\n    }\n\n    public void    private String key;\n    private String bucketName;\n    private String simperiumKey;\n    private String simperiumVersion;\n    private String simperiumChangeId;\n    private String simperiumChangeIdPrefix;\n    private String simper", "reference_code": "    private String ccid;\n    private boolean pending = true, acknowledged = false, sent = false;\n    private OnRetryListener retryListener;\n    private OnCompleteListener completeListener;\n    private OnAcknowledgedListener acknowledgedListener;\n    private Change compressed;\n", "case_type": "block"}
{"generated_code": "     * @param args command line arguments\n     */\n\n    // TODO: Add a command line option to specify the port\n\n    /**\n     * Entry point.\n     *\n     * @param args command line arguments\n     */\n\n    // TODO: Add a command line option to specify the port\n\n    /**\n     * Entry point.\n     *\n     * @param args command line arguments\n     */\n\n    // TODO: Add a command line option to specify the port\n\n    /**\n     * Entry point.\n     *\n     * @param args command line arguments\n     */\n\n    // TODO: Add a command line option to specify the port\n\n    /**\n     * Entry point.\n     *\n     * @param args command line arguments\n     */\n\n    // TODO: Add a command line option to specify the port\n\n    /**\n     * Entry point.\n     *\n     * @param args command line arguments\n     */\n\n    // TODO: Add a command line option to specify the port\n\n    /**\n     * Entry point.\n     *\n     * @param args command line arguments\n     */\n\n    // TODO", "reference_code": "     * @param args    Command line arguments.\n     */\n", "case_type": "block"}
{"generated_code": "() {\n        return this.archiveId;\n    }\n\n    /**\n     * <p>\n     * The ID of the archive. This value is also included as part of the location.\n     * </p>     * @param archiveId\n     *        The ID of the archive. This value is also included as part of the location.\n     * @return Returns a reference to this object so that method calls can be chained together.\n     */\n\n    public UploadArchiveResult withArchiveId(String archiveId) {\n        setArchiveId(archiveId);\n        return this;\n    }\n\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (getLocation() != null) sb.append(\"Location: \" + getLocation() + \",\");\n        if (getChecksum() != null) sb.append(\"Checksum: \" + getChecksum() + \",\");\n        if (getArchiveId() != null) sb.append(\"ArchiveId: \" + getArchiveId());\n        sb.append", "reference_code": "            sb.append(\"Location: \").append(getLocation()).append(\",\");\n        if (getChecksum() != null)\n            sb.append(\"Checksum: \").append(getChecksum()).append(\",\");\n", "case_type": "block"}
{"generated_code": "            StartSmartAnimation.startAnimation(v, AnimationType.RotateOutUpLeft, 1000,0,false,100);\n        }\n        else if(v.getId() == (R.id.rotate_out_up)){\n            StartSmartAnimation.startAnimation(v, AnimationType.RotateOutUp, 1000,0,false,100);\n        }\n        else if(v.getId() == (R.id.rotate_out_down)){\n            StartSmartAnimation.startAnimation(v, AnimationType.RotateOutDown, 1000,0,false,100);\n        }\n        else if(v.getId() == (R.id.rotate_out_left)){\n            StartSmartAnimation.startAnimation(v, AnimationType.RotateOutLeft, 1000,0,false,100);\n        }\n        else if(v.getId() == (R.id.rotate_out_right)){\n            StartSmartAnimation.startAnimation(v, AnimationType.", "reference_code": "            StartSmartAnimation.startAnimation(v, AnimationType.RotateOutUpLeft, 1000,0,false,100);\n", "case_type": "block"}
{"generated_code": "\n       import java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.apache.lucene.util.Bits;\n\nimport org.apache.lucene.index.AtomicReader; // javadoc\nimport org.apache.lucene.index.AtomicReaderContext; // javadoc\nimport org.apache.lucene.index.BinaryDocValues;\nimport org.apache.lucene.index.NumericDocValues;\nimport org.apache.lucene.index.SortedDocValues;\nimport org.apache.lucene.index.SortedSetDocValues;\nimport org.apache.lucene.index.SortedSetDocValues.SortedSetDocValues;\nimport org.apache.lucene.index.SortedSetDocValues.SortedSetDocValues.SortedSetDocValues;\nimport org.apache.lucene.index.SortedSetDocValues.SortedSetDocValues.SortedSetDocValues;\nimport org.apache.lucene.index.SortedSetDocValues.SortedSetDocValues.SortedSetDocValues;\n\n", "reference_code": "import java.io.IOException;\nimport java.util.HashMap;\n", "case_type": "block"}
{"generated_code": "     * implementation, we need to load the library before we can\n     * call initIDs().\n     *\n     * This is a temporary workaround for a problem in the way the\n     * AWT loads native libraries. A number of classes in this\n     * package (sun.awt.image) have a native method, initIDs(),\n     * which initializes\n     * the JNI field and method ids used in the native portion of\n     * their implementation.\n     *\n     * Since the use and storage of these ids is done by the\n     * implementation, we need to load the library before we can\n     * call initIDs().\n     *\n     * This is a temporary workaround for a problem in the way the\n     * AWT loads native libraries. A number of classes in this\n     * package (sun.awt.image) have a native method, initIDs(),\n     * which initializes\n     * the JNI field and method ids used in the native portion of\n     * their implementation.\n     *\n     * Since the use and storage of these ids is done by the\n     * implementation, we need to load", "reference_code": "     * implementation libraries, the implementation of these method is\n     * provided by the particular AWT implementations\n     * (i.e. \"Toolkit\"s/Peer), such as Motif, Win32 or Tiny. The\n     * problem is that this means that the native libraries must be\n     * loaded by the java.* classes, which do not necessarily know the\n", "case_type": "block"}
{"generated_code": "import org.eclipse.persistence.queries.report.*;\n\npublic class CursoredStreamDistinctTest extends AbstractQueryTest {\n\n    private int count;\n\n    /**\n     * Constructor.\n     */\n    @Test\n    @TestMethod\n    @TestMethod.TestPriority(1)\n    @TestMethod.TestPriority(2)\n    @TestMethod.TestPriority(3)\n    @TestMethod.TestPriority(4)\n    @TestMethod.TestPriority(5)\n    @TestMethod.TestPriority(6)\n    @TestMethod.TestPriority(7)\n    @TestMethod.TestPriority(8)\n    @TestMethod.TestPriority(9)\n    @TestMethod.TestPriority(10)\n    @TestMethod.TestPriority(11)\n    @TestMethod.TestPriority(12)\n    @TestMethod.TestPriority(13)\n    @TestMethod.TestPriority(14)\n    @TestMethod.TestPriority(15)\n    @TestMethod.TestPriority(16)\n    @TestMethod.TestPriority(17)\n    @", "reference_code": "import org.eclipse.persistence.expressions.*;\n\npublic class CursoredStreamDistinctTest extends TestCase {\n    public int count;\n\n", "case_type": "block"}
{"generated_code": "            FaultHelper helper = new FaultHelper(resource.getProcessingException());\n            fault.setFaultString(helper.getFaultString());\n            fault.setFaultCode(helper.getFaultCode());\n            fault.setFaultDetail(helper.getFaultDetail());\n            throw fault;\n        } else if (resource.getResults() == null) {\n            FaultHelper helper = new FaultHelper(\"No results were returned\");\n            helper.setFaultCode(\"InternalError\");\n            helper.setFaultDetail(\"No results were returned\");\n            helper.setFaultString(\"No results were returned\");\n            helper.setFault(new gov.nih.nci.cagrid.fqp.stubs.types.InternalErrorFault());\n            helper.setFault(new gov.nih.nci.cagrid.fqp.stubs.types.InternalErrorFault());\n            helper.setFault(new gov.nih.nci.cagrid.fqp.stubs.types.InternalErrorFault());\n            helper.set", "reference_code": "            fault.setFaultString(\"Problem executing query: \" + resource.getProcessingException());\n            FaultHelper helper = new FaultHelper(fault);\n            helper.addFaultCause(resource.getProcessingException());\n", "case_type": "block"}
{"generated_code": "\n    }\n\n    public Date getStartedBefore() {\n        return startedBefore;\n    }\n\n    public void setStartedBefore(Date startedBefore) {\n        this.startedBefore = startedBefore;\n    }\n\n    public String getStartedBy() {\n        return startedBy;\n    }\n\n    public void setStartedBy(String startedBy) {\n        this.startedBy = startedBy;\n    }\n\n    public Boolean getIncludeProcessVariables() {\n        return includeProcessVariables;\n    }\n\n    public void setIncludeProcessVariables(Boolean includeProcessVariables) {\n        this.includeProcessVariables = includeProcessVariables;\n    }\n\n    public List<QueryVariable> getVariables() {\n        return variables;\n    }\n\n    public void setVariables(List<QueryVariable> variables) {\n        this.variables = variables;\n    }\n\n    public String getTenantId() {\n        return tenantId;\n    }\n\n    public void setTenantId(String tenantId) {\n        this.tenantId = tenant", "reference_code": "    }\n\n    public String getTenantIdLike() {\n        return tenantIdLike;\n    }\n", "case_type": "block"}
{"generated_code": "    assertThat(Util.isNullOrEmpty(\" \")).isFalse();\n  }\n\n  @Test\n  public void testIsNullOrEmptyWithMessage() {\n    assertThat(Util.isNullOrEmpty(null, \"null\")).isTrue();\n    assertThat(Util.isNullOrEmpty(\"\", \"empty\")).isTrue();\n    assertThat(Util.isNullOrEmpty(\"\\0\", \"empty\")).isFalse();\n    assertThat(Util.isNullOrEmpty(\" \", \"empty\")).isFalse();\n  }\n\n  @Test\n  public void testIsNullOrEmptyWithMessageAndNull() {\n    assertThat(Util.isNullOrEmpty(null, \"null\", null)).isTrue();\n    assertThat(Util.isNullOrEmpty(\"\", \"empty\", null)).isTrue();\n    assertThat(Util.isNullOrEmpty(\"\\0\", \"empty\", null)).isFalse();\n    assertThat(Util.isNullOrEmpty(\" \", \"empty\", null)).isFalse();\n  }\n\n  @Test\n  public void testIsNullOrEmptyWithMessageAndNullAndEmpty() {\n    assertThat(Util.isNullOrEmpty(null", "reference_code": "    assertThat(Util.isNullOrEmpty(\"some text\")).isFalse();\n  }\n\n  @Test\n", "case_type": "block"}
{"generated_code": "public class ProcedureIntent extends ims.framework.IItem\n{\n    public ProcedureIntent()\n    {\n        super();\n    }\n    public ProcedureIntent(int id, String text)\n    {\n        super(id, text, true);\n    }\n    public ProcedureIntent(int id, String text, boolean active, Image image)\n    {\n        super(id, text, active, null, image);\n    }\n    public ProcedureIntent(int id, String text, boolean active, Image image, Color color)\n    {\n        super(id, text, active, null, image, color);\n    }\n    public ProcedureIntent(int id, String text, boolean active, Image image, Color color, int order)\n    {\n        super(id, text, active, null, image, color, order);\n    }\n    public ProcedureIntent(int id, String text, boolean active, ProcedureIntent parent)\n    {\n        super(id, text, active, parent);\n    }\n    public ProcedureIntent(int id, String text, boolean active, ProcedureIntent parent, Image image)", "reference_code": "public class ProcedureIntent extends ims.vo.LookupInstVo implements TreeNode\n{\n    private static final long serialVersionUID = 1L;\n\n    public ProcedureIntent()\n", "case_type": "block"}
{"generated_code": "    @Override\n    public void doRender(VillagerEntity entity, double x, double y, double z, float entityYaw, float partialTicks, MatrixStack matrixStack, int packedLight) {\n        this.shadowSize = 0.0F;\n        this.shadowOpaque = false;\n        this.shadowBrightness = 0.0F;\n\n        this.model.setLimbVisible(entity, 0, false);\n        this.model.setLimbVisible(entity, 1, false);\n        this.model.setLimbVisible(entity, 2, false);\n        this.model.setLimbVisible(entity, 3, false);\n        this.model.setLimbVisible(entity, 4, false);\n        this.model.setLimbVisible(entity, 5, false);\n        this.model.setLimbVisible(entity, 6, false);\n        this.model.setLimbVisible(entity, 7, false);\n\n        this.model.setLimbVisible(entity, 8, true);\n        this.model.setLimbVisible", "reference_code": "    @Override\n    protected void scale(VillagerEntity entity, MatrixStack matrixStack, float partialTickTime) {\n", "case_type": "block"}
{"generated_code": "        z = buffer.readInt();\n        // TODO: check if infinite is set to true\n        // TODO: check if ownerName is set to null\n        // TODO: check if ownerName is set to empty string\n        // TODO: check if ownerName is set to \" \"\n        // TODO: check if ownerName is set to \"  \"\n        // TODO: check if ownerName is set to \"   \"\n        // TODO: check if ownerName is set to \"    \"\n        // TODO: check if ownerName is set to \"     \"\n        // TODO: check if ownerName is set to \"      \"\n        // TODO: check if ownerName is set to \"       \"\n        // TODO: check if ownerName is set to \"        \"\n        // TODO: check if ownerName is set to \"         \"\n        // TODO: check if ownerName is set to \"          \"\n        // TODO: check if ownerName is set to \"           \"\n        // TODO: check if ownerName is set to \"            \"\n        // TODO: check if ownerName is set to \"             \"\n        // TODO: check if ownerName is set to \"              \"", "reference_code": "        z = buffer.readInt();\n", "case_type": "block"}
{"generated_code": "\n        LineString line = geometryFactory.createLineString(points);\n        setLiteralValue(line);\n    }\n\n    @Override\n    public void setValue(ResultSet rs) throws SQLException {\n        LineString line = (LineString) getLiteralValue();\n        if (line == null) {\n            line = (LineString) DBDatabase.getGeometryFactory().createLineString(rs.getArray());\n            setLiteralValue(line);\n        }\n    }\n\n    @Override\n    public void setValue(String value) throws SQLException, ParsingSpatialValueException {\n        LineString line = (LineString) getLiteralValue();\n        if (line == null) {\n            line = (LineString) DBDatabase.getGeometryFactory().createLineString(new StringExpression(value).getLiteralValue());\n            setLiteralValue(line);\n        }\n    }\n\n    @Override\n    public List<Coordinate> getCoordinates() {\n        LineString line = (LineString) getLiteralValue();\n        if (line == null) {\n            return null;\n        }\n        List<Co", "reference_code": "        LineString line = geometryFactory.createLineString(coords.toArray(new Coordinate[]{}));\n        setLiteralValue(line);\n", "case_type": "block"}
{"generated_code": "\n    public static AddionalAttrs getAddionalAttrs(){\n        AddionalAttrs aa=(AddionalAttrs)addAttrs.get();\n        if(aa==null)aa=new AddionalAttrs(300,0,\"<b>\",\"</b>\");\n        return aa;\n    }\n    public static AddionalAttrs getAddionalAttrs(int contextBytes, int contextPassages, String contextHighlightBegin, String contextHighlightEnd) {\n        AddionalAttrs aa=new AddionalAttrs(contextBytes,contextPassages,contextHighlightBegin,contextHighlightEnd);\n        addAttrs.set(aa);\n        return aa;\n    }\n    public static AddionalAttrs getAddionalAttrs(int contextBytes, int contextPassages, String contextHighlightBegin, String contextHighlightEnd,int startrow,int maxrows) {\n        AddionalAttrs aa=new AddionalAttrs(contextBytes,contextPassages,contextHighlightBegin,contextHighlightEnd);\n        aa.setStartrow(startrow);\n        aa.set", "reference_code": "\n    public static AddionalAttrs getAddionlAttrs(){\n        AddionalAttrs aa = (AddionalAttrs) addAttrs.get();\n", "case_type": "block"}
{"generated_code": "    }\n\n    private byte[] toBytes(final int intValue) {\n        byte[] result = new byte[4];\n        result[0] = (byte) (intValue >>> 24);\n\n        intValue <<= 8;\n        intValue &= 0xff000000;\n\n        intValue <<= 8;\n        intValue &= 0xff0000;\n\n        intValue <<= 8;\n        intValue &= 0xff00;\n\n        intValue <<= 8;\n        intValue &= 0xff;\n\n        result[0] = (byte) (intValue >>> 24);\n        intValue <<= 8;\n        intValue &= 0xff0000;\n        result[1] = (byte) (intValue >>> 16);\n        intValue <<= 8;\n        result[2] = (byte) (intValue >>> 8);\n        result[3] = (byte) intValue;\n        return result;\n    }\n\n    private byte[] toBytes(final Integer intValue", "reference_code": "    }\n\n    private byte[] toBytes(final int intValue) {\n        byte[] result = new byte[4];\n        result[0] = (byte) (intValue >>> 24);\n", "case_type": "block"}
{"generated_code": "\n        public boolean evalB(final EvalEnv env) {\n            return Term.toB(evalB(env));\n        }\n\n        public int evalI(final EvalEnv env) {\n            return Term.toI(evalB(env));\n        }\n\n        public String evalS(final EvalEnv env) {\n            return Term.toS(evalB(env));\n        }\n    }\n\n    public abstract static class BD extends AbstractSymbol {\n\n        protected BD(final String name) {\n            super(name, Term.TYPE_BD);\n        }\n\n        public boolean evalB(final EvalEnv env) {\n            return Term.toB(evalBD(env));\n        }\n\n        public int evalI(final EvalEnv env) {\n            return Term.toI(evalBD(env));\n        }\n\n        public String evalS(final EvalEnv env) {\n            return Term.toS(evalBD(env));\n        }\n    }\n\n    public abstract static class BI extends AbstractSymbol {\n\n        protected BI", "reference_code": "\n        public int evalI(final EvalEnv env) {\n            return Term.toI(evalB(env));\n", "case_type": "block"}
{"generated_code": "\n    public OwsExceptionReport getExceptionReport() {\n        return null;\n    }\n\n    public String getExceptionReportFormat() {\n        return null;\n    }\n\n    public boolean isSetExceptionReport() {\n        return false;\n    }\n\n    public boolean isSetExceptionReportFormat() {\n        return false;\n    }\n\n    @Override\n    public String toString() {\n        return \"UpdateSensorRequest [procedureIdentifier=\" + procedureIdentifier + \", procedureDescriptionFormat=\"\n                + procedureDescriptionFormat + \", procedureDescriptions=\" + procedureDescriptions + \"]\";\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((procedureDescriptionFormat == null) ? 0 : procedureDescriptionFormat.hashCode());\n        result = prime * result + ((procedureIdentifier == null) ? 0 : procedureIdentifier.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return", "reference_code": "\n    @Override\n    public UpdateSensorResponse getResponse() throws OwsExceptionReport {\n        return (UpdateSensorResponse) new UpdateSensorResponse().set(this);\n", "case_type": "block"}
{"generated_code": "    CASSANDRA_CONNECTION_ERROR(0, EXTERNAL),\n    CASSANDRA_QUERY_ERROR(1, EXTERNAL),\n    CASSANDRA_TIMEOUT_ERROR(2, EXTERNAL),\n    CASSANDRA_UNKNOWN_ERROR(3, EXTERNAL),\n    CASSANDRA_UNSUPPORTED_OPERATION(4, EXTERNAL),\n    CASSANDRA_UNSUPPORTED_VERSION(5, EXTERNAL),\n    CASSANDRA_UNSUPPORTED_FEATURE(6, EXTERNAL),\n    CASSANDRA_UNSUPPORTED_OPERATION_ON_CLUSTER_VERSION(7, EXTERNAL),\n    CASSANDRA_UNSUPPORTED_OPERATION_ON_KEYSPACE_VERSION(8, EXTERNAL),\n    CASSANDRA_UNSUPPORTED_OPERATION_ON_TABLE_VERSION(9, EXTERNAL),\n    CASSANDRA_UNSUPPORTED_OPERATION_ON_CLUSTER_VERSION_AND_KEYSPACE_VERSION", "reference_code": "    CASSANDRA_METADATA_ERROR(0, EXTERNAL),\n", "case_type": "block"}
{"generated_code": "        List<Double> l = new ArrayList<Double>();\n        l.add(3.4);\n        l.add(3.5);\n        l.add(3.6);\n        l.add(3.7);\n        l.add(3.8);\n        l.add(3.9);\n        l.add(3.0);\n        l.add(3.1);\n        l.add(3.2);\n        l.add(3.3);\n        l.add(3.4);\n        l.add(3.5);\n        l.add(3.6);\n        l.add(3.7);\n        l.add(3.8);\n        l.add(3.9);\n        l.add(3.0);\n        l.add(3.1);\n        l.add(3.2);\n        l.add(3.3);\n        l.add(3.4);\n        l.add(3.5);\n        l.add(3.6);\n        l.add(3.7);\n        l", "reference_code": "        lst.add(32);\n        lst.add(-12);\n\n        List<? super Integer> l = new ArrayList<Integer>(lst);\n        l.add(3);\n", "case_type": "block"}
{"generated_code": "    }\n\n    @JsonIgnore\n    public <T> Optional<T> findValue(String key, Class<T> clazz) {\n        Optional<KeyValue> kv = findKeyValue(key);\n        if (kv.isPresent()) {\n            return Optional.of(kv.get().getGenericValue(clazz));\n        }\n        return Optional.empty();\n    }\n\n    @JsonIgnore\n    public <T> Optional<T> findValue(String key, Class<T> clazz, String defaultValue) {\n        Optional<KeyValue> kv = findKeyValue(key);\n        if (kv.isPresent()) {\n            return Optional.of(kv.get().getGenericValue(clazz, defaultValue));\n        }\n        return Optional.empty();\n    }\n\n    @JsonIgnore\n    public <T> Optional<T> findValue(String key, Class<T> clazz, T defaultValue) {\n        Optional<KeyValue> kv = findKeyValue(key);\n        if (kv.isPresent()) {\n            return Optional.of(k", "reference_code": "    }\n\n    @JsonIgnore\n", "case_type": "block"}
{"generated_code": "public class ToggleButton extends TextButton {\n\n    public ToggleButton(final String text, Skin skin) {\n        this(text, skin, false);\n    }\n\n    public ToggleButton(final String text, Skin skin, final boolean checked) {\n        super(text, skin, \"toggle\");\n        setChecked(checked);\n    }\n\n}\n\nclass ToggleButtonListener extends ChangeListener {\n\n    public ToggleButtonListener(final ToggleButton button) {\n        button.addListener(this);\n    }\n\n    @Override\n    public void changed(ChangeEvent event, Actor actor) {\n        ((ToggleButton) actor).setChecked(!((ToggleButton) actor).isChecked());\n    }\n\n}\n\nclass ToggleButtonWithText extends ToggleButton {\n\n    public ToggleButtonWithText(final String textOn, final String textOff, final boolean checked, Skin skin) {\n        super(textOn, skin, checked);\n        setText(textOff);\n    }\n\n}\n\nclass ToggleButtonWithTextListener extends ToggleButtonWithText", "reference_code": "public class ToggleButton extends TextButton\n", "case_type": "block"}
{"generated_code": "        Vehicle bicycle = new Bicycle();\n\n        playWithVehicle(car);\n\n        playWithVehicle(bicycle);\n\n        System.out.println(\"\\n\");\n\n        car = new Truck();\n\n        bicycle = new Bicycle();\n\n        playWithVehicle(car);\n\n        playWithVehicle(bicycle);\n\n        System.out.println(\"\\n\");\n\n        car = new Car();\n        bicycle = new Bicycle();\n\n        car = new Truck();\n\n        bicycle = new Bicycle();\n\n        playWithVehicle(car);\n\n        playWithVehicle(bicycle);\n\n        System.out.println(\"\\n\");\n\n        car = new Car();\n        bicycle = new Bicycle();\n\n        car = new Truck();\n\n        bicycle = new Bicycle();\n\n        playWithVehicle(car);\n\n        playWithVehicle(bicycle);\n\n        System.out.println(\"\\n\");\n\n        car = new Car();", "reference_code": "        Vehicle bicycle = new BicycleAdapter(new Bicycle());\n\n", "case_type": "block"}
{"generated_code": ");\n        _fillWeatherLog(obsLog);\n        return obsLog;\n    }\n\n    public void testAddObservation() {\n        NightlyRecord obsLog = _createDefaultObservingLog();\n        assertTrue(obsLog.getObservationList().size() == _testObservations.length);\n    }\n\n    public void testAddWeatherInfo() {\n        NightlyRecord obsLog = _createDefaultObservingLog();\n        assertTrue(obsLog.getWeatherLog().size() == _testWeatherInfo.length);\n    }\n\n    public void testGetObservationList() {\n        NightlyRecord obsLog = _createDefaultObservingLog();\n        Iterator<SPObservationID> it = obsLog.getObservationList().iterator();\n        assertTrue(it.hasNext());\n        assertTrue(it.next().equals(_getObsID(_testObservations[0])));\n    }\n\n    public void testGetWeatherLog() {\n        Nightly        assertTrue(obsLog.getWeatherLog().size() == _testWeatherInfo.length);\n        assertTrue(obs", "reference_code": "    /**\n     * Test adding items to the weather log\n     */\n    public void testAddToWeatherLog() {\n        NightlyRecord obsLog = _createDefaultObservingLog();\n        assertEquals(_testWeatherInfo.length, obsLog.getWeatherLogSize());\n", "case_type": "block"}
{"generated_code": " el      import org.apache.uima.UIMAFramework;\nimport org.apache.uima.collection.CollectionProcessingEngine;\nimport org.apache.uima.collection.StatusCallbackListener;\nimport org.apache.uima.collection.metadata.CpeDescription;\nimport org.apache.uima.resource.ResourceInitializationException;\nimport org.apache.uima.util.InvalidXMLException;\nimport org.apache.uima.util.XMLInputSource;\n\nimport java.io.IOException;\nimport java.util.List;\n\npublic class CmdLineCpeRunner {\n\n   public static void main( String[] args ) {\n      if ( args.length == 0 || args[0].isEmpty() ) {\n         System.err.println( \"Please provide the path to a cpe.xml in the first argument.\\n\"\n                                   + \"If you do not have a cpe.xml you can create one with the cpe gui.\" );\n         System.exit( 1 );\n      }\n      XMLInputSource xmlInputSource = null;\n      try {\n         xmlInputSource = new XMLInput", "reference_code": "package org.apache.ctakes.core.cpe;\n\nimport org.apache.uima.UIMAFramework;\nimport org.apache.uima.cas.CAS;\nimport org.apache.uima.collection.CollectionProcessingEngine;\nimport org.apache.uima.collection.EntityProcessStatus;\n", "case_type": "block"}
{"generated_code": "             }\n             return fs;\n        } else {\n             // Create new fs instance\n             FeatureStructure fs = new PersonTitleAnnotation(addr, PersonTitleAnnotation_Type.this);\n             if (null == fs) {\n               throw new RuntimeException(\"Could not create new fs instance for \" + PersonTitleAnnotation_Type.this.getClass().getName());\n             }\n             PersonTitleAnnotation_Type.this.jcas.putJfsFromCaddr(addr, fs);\n             if (null == PersonTitleAnnotation_Type.this.jcas.getJfsFromCaddr(addr)) {\n               throw new RuntimeException(\"Could not create new fs instance for \" + PersonTitleAnnotation_Type.this.getClass().getName());\n             }\n             if (null == PersonTitleAnnotation_Type.this.jcas.getJfsFromCaddr(addr)) {\n               throw new RuntimeException(\"Could not create new fs instance for \" + PersonTitleAnnotation_Type.this.getClass().getName());\n             }\n             if (null == PersonTitleAnnotation_Type.this.jcas.getJfsFromCaddr(addr)) {\n               throw new Runtime", "reference_code": "               return fs;\n", "case_type": "block"}
{"generated_code": "import com.htm.views.WorkItemView;\nimport com.htm.views.IEvent;\nimport com.htm.views.IView;\nimport com.htm.views.IViewFactory;\nimport com.htm.views.IViewFactory.ViewType;\nimport com.htm.views.IViewFactory.ViewType.ViewTypeEnum;\nimport com.htm.views.IViewFactory.ViewType.ViewTypeEnum.ViewTypeEnumEnum;\nimport com.htm.views.IViewFactory.ViewType.ViewTypeEnum.ViewTypeEnumEnum.ViewTypeEnumEnumEnum;\nimport com.htm.views.IViewFactory.ViewType.ViewTypeEnum.ViewTypeEnumEnum.ViewTypeEnumEnumEnum.ViewTypeEnumEnumEnumEnum;\nimport com.htm.views.IViewFactory.ViewType.ViewTypeEnum.ViewTypeEnumEnum.ViewTypeEnumEnumEnum.ViewTypeEnumEnumEnumEnum.ViewTypeEnumEnumEnumEnumEnum;\nimport com.htm.views.IViewFactory.ViewType.ViewTypeEnum.ViewTypeEnumEnum.ViewTypeEnumEnumEnum.", "reference_code": "import com.htm.query.views.WorkItemView;\n", "case_type": "block"}
{"generated_code": " String aufrufparameter) {\n        Objects.requireNonNull(objekttypPid, \"objekttypPid\");\n        Objects.requireNonNull(aufrufparameter, \"aufrufparameter\");\n        this.objektTyp = model.getSystemObjectType(objekttypPid);\n        this.objektPid = objektPid;\n        this.aufrufparameter = aufrufparameter;\n        List<SystemObject> systemObjects = model.getSystemObjects(objektTyp);\n        if (systemObjects.isEmpty()) {\n            throw new IllegalStateException(\"Keine ObjektPID angegeben und kein oder mehr als ein Objekt zum Typ existiert.\");\n        }\n        if (systemObjects.size() == 1) {\n            return systemObjects.get(0);\n        }\n        if (objektPid.isEmpty()) {\n            return systemObjects.get(0);\n        }\n        for (SystemObject systemObject : systemObjects) {\n            if (systemObject.", "reference_code": "\n    private void setAufrufparameter(final String aufrufparameter) {\n        Objects.requireNonNull(aufrufparameter, \"aufrufparameter\");\n        this.aufrufparameter = aufrufparameter;\n    }\n\n", "case_type": "block"}
{"generated_code": "import net.opengis.sos.x20.ObservationOfferingType;\nimport net.opengis.sos.x20.Offering;\n\nimport org.apache.xmlbeans.XmlObject;\nimport org.apache.xmlbeans.XmlOptions;\nimport org.apache.xmlbeans.XmlOptions.Option;\nimport org.apache.xmlbeans.XmlOptions.Option.Value;\nimport org.apache.xmlbeans.XmlOptions.Option.Value.ValueType;\nimport org.apache.xmlbeans.XmlOptions.Option.Value.ValueType.ValueTypeEnum;\nimport org.apache.xmlbeans.XmlOptions.Option.Value.ValueTypeEnum.ValueTypeEnumEnum;\nimport org.apache.xmlbeans.XmlOptions.Option.Value.ValueTypeEnum.ValueTypeEnumEnum.ValueTypeEnumEnumEnum;\nimport org.apache.xmlbeans.XmlOptions.Option.Value.ValueTypeEnum.ValueTypeEnumEnum.ValueTypeEnumEnumEnum.ValueTypeEnumEnumEnumEnum;\nimport org.apache.xmlbeans.XmlOptions.Option.Value.ValueTypeEnum.ValueTypeEnumEnum.ValueTypeEnumEnum", "reference_code": "import net.opengis.sos.x20.ObservationOfferingType;\nimport net.opengis.swes.x20.AbstractContentsType.Offering;\n\n", "case_type": "block"}
{"generated_code": "\nimport global.namespace.neuron.di.java.CachingStrategy;\nimport global.namespace.neuron.di.java.Neuron;\nimport global.namespace.neuron.di.java.Neuron.CachingStrategy;\n\nimport java.lang.annotation.*;\n\n@Neuron(cachingStrategy = CachingStrategy.THREAD_SAFE)\n@Inherited\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface ThreadSafeCachingNeuron {\n}\n\n@Neuron(cachingStrategy = CachingStrategy.THREAD_SAFE)\n@Inherited\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface ThreadSafeCachingNeuron {\n}\n\n@Neuron(cachingStrategy = CachingStrategy.THREAD_SAFE)\n@Inherited\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\npublic @interface ThreadSafeCaching", "reference_code": "\nimport global.namespace.neuron.di.java.CachingStrategy;\n", "case_type": "block"}
{"generated_code": " new SgEC            sgECreditCommendRewardDao.insert(vo);\n            resultVO = vo.getRowJson();\n\n        } catch (DaoException e) {\n            logger.error(\"企业荣誉{}\", e.getMessage());\n\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n            // 新增\n           ", "reference_code": "            sgECreditCommendRewardDao.save(vo);\n            resultVO = vo.getRowJson();\n\n        } catch (DaoException e) {\n            logger.error(\"企业荣誉{}\", e.getMessage());\n", "case_type": "block"}
{"generated_code": "        int flag = Game.FLAG_MOVE_NONE;\n        Entity stepedOn = grid[y][x];\n        if (stepedOn != null) {\n            if (stepedOn instanceof Goal) {\n                player.setScore(player.getScore() + 1);\n                flag = Game.FLAG_MOVE_GOAL;\n            }\n            else if (stepedOn instanceof Death) {\n                flag = Game.FLAG_MOVE_DEATH;\n            }\n            else if (stepedOn instanceof Subtractor) {\n                flag = Game.FLAG_MOVE_SUBTRACTOR;\n            }\n        }\n        else {\n            if (stepedOn instanceof Goal) {\n                player.setScore(player.getScore() + 1);\n                flag = Game.FLAG_MOVE_GOAL;\n            }\n            else if (stepedOn instanceof Death) {\n                flag = Game.FLAG_MOVE_DEATH;\n            }\n            else if (stepedOn instanceof Subtractor) {\n                flag = Game.FLAG_MOVE_SUBTRACTOR;", "reference_code": "        Entity stepedOn = grid[y][x];\n        int flag = Game.FLAG_MOVE_DEFAULT;\n        if (stepedOn != null) {\n            if (stepedOn instanceof Goal) {\n", "case_type": "block"}
{"generated_code": "    /**\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * <p>\n     * The package this factory is associated with.\n     * </p>\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * <p>\n     * This method is not and should not be overridden.\n     * </p>\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * <p>\n     * This method is not and should not be overridden.\n     * </p>\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * <p>\n     * This method is not and should not be overridden.\n     * </p>\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * <p>\n     * This method is not and should not be overridden.\n     * </", "reference_code": "    /**\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n", "case_type": "block"}
{"generated_code": "\nimport org.cloudfoundry.client.v2.uaa.UaaClient;\nimport org.cloudfoundry.client.v2.uaa.request.AuthorizeByAuthorizationCodeGrantApiRequest;\nimport org.cloudfoundry.operations.AbstractOperationsTest;\nimport org.cloudfoundry.operations.uaa.UaaClientTest;\nimport org.junit.Before;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport java.time.Duration;\n\n@RunWith(SpringRunner.class)\n@Ignore\npublic class DefaultAdvancedTest {\n\n    private DefaultAdvanced advanced;\n\n    @Before\n    public void setUp() {\n        this.advanced = new DefaultAdvanced(Mono.just(this.uaaClient));\n    }\n\n}\n\n@Ignore\nclass DefaultAdvancedTest2 {\n\n    private DefaultAdvanced advanced;\n\n    @Before\n    public void setUp() {\n        this", "reference_code": "\nimport org.cloudfoundry.operations.AbstractOperationsTest;\nimport org.cloudfoundry.uaa.UaaClient;\nimport org.cloudfoundry.uaa.authorizations.AuthorizeByAuthorizationCodeGrantApiRequest;\n", "case_type": "block"}
{"generated_code": "    public void setDimension(Dimension2D dim) {\n        for (AffineTransformation affineTransform : all) {\n            affineTransform.setDimension(dim);\n        }\n    }\n\n    public void setDimension(Dimension2D dim, boolean reset) {\n        if (reset) {\n            setDimension(dim);\n        } else {\n            for (AffineTransformation affineTransform : all) {\n                affineTransform.setDimension(dim);\n            }\n        }\n    }\n\n    public void setDimension(Dimension2D dim, AffineTransformation affineTransform) {\n        if (affineTransform != null) {\n            affineTransform.setDimension(dim);\n        } else {\n            setDimension(dim);\n        }\n    }\n\n    public void setDimension(Dimension2D dim, AffineTransformation affineTransform, boolean reset) {\n        if (reset) {\n            setDimension(dim, affineTransform);\n        } else {\n            affineTransform.setDimension(dim);\n       ", "reference_code": "    public void setDimension(Dimension2D dim) {\n        for (AffineTransformation affineTransform : all) {\n", "case_type": "block"}
{"generated_code": "\n            //\n            // If a service provider is found, use it\n            //\n            if (provider != null){\n                return provider;\n            }\n\n            //\n            // If no service provider is found, try to load the default\n            //\n            if (provider == null){\n                provider = new DatabaseAuditServiceImpl();\n            }\n\n            //\n            // If no service provider is found, try to load the default\n            //\n            if (provider == null){\n                provider = new DatabaseAuditServiceImpl();\n            }\n\n            //\n            // If no service provider is found, try to load the default\n            //\n            if (provider == null){\n                provider = new DatabaseAuditServiceImpl();\n            }\n\n            //\n            // If no service provider is found, try to load the default\n            //\n            if (provider == null){\n                provider = new DatabaseAuditServiceImpl();\n            }\n\n            //\n            // If no service provider is found, try to load the default\n            //\n            if (provider == null){\n                provider = new DatabaseAuditServiceImpl", "reference_code": "            //\n", "case_type": "block"}
{"generated_code": "\n    @Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            @Override\n            public void configure() throws Exception {\n                // @formatter:off\n                // @formatter:on\n                // @formatter:off\n                // @formatter:on\n                // @formatter:off\n                // @formatter:on\n                // @formatter:off\n                // @formatter:on\n                // @formatter:off\n                // @formatter:on\n                // @formatter:off\n                // @formatter:on\n                // @formatter:off\n                // @formatter:on\n                // @formatter:off\n                // @formatter:on\n                // @formatter:off\n                // @formatter:on\n                // @formatter:off\n                // @formatter:on\n                // @formatter:off\n                // @formatter:on\n                // @formatter:off\n                // @formatter:on\n                // @formatter:off\n                // @formatter:on\n                // @formatter:off\n                //", "reference_code": "\n    @Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() throws Exception {\n", "case_type": "block"}
{"generated_code": "     * @param column  the column index (zero-based).\n     *\n     * @see org.jfree.data.category.CategoryDataset#getY(int)\n     * @see org.jfree.data.category.CategoryDataset#getItem(int, int)\n     * @see org.jfree.data.category.CategoryDataset#getRowKey(int)\n     * @see org.jfree.data.category.CategoryDataset#getColumnKey(int)\n     *\n     * @see org.jfree.data.category.CategoryDataset#getItemLabel(int, int)\n     * @see org.jfree.data.category.CategoryDataset#getRowLabel(int)\n     * @see org.jfree.data.category.CategoryDataset#getColumnLabel(int)\n     *\n     * @see org.jfree.data.category.CategoryDataset#getItemLabel(int, int)\n     * @see org.jfree.data.category.CategoryDataset#getRowLabel(int)\n     * @see org.jfree.data.category", "reference_code": "     * @param column  the column index (zero-based).\n     *\n", "case_type": "block"}
{"generated_code": "\nimport javax.swing.*;\n\n@SuppressWarnings(\"unused\")\n@Deprecated\n@IconLoader.IconRelativePath(\"icons/palette/\")\n@SuppressWarnings(\"ClassWithTooManyFields\")\n@SuppressWarnings(\"ClassWithTooManyMethods\")\n@SuppressWarnings(\"ClassWithTooManyStaticFields\")\n@SuppressWarnings(\"ClassWithTooManyConstructors\")\n@SuppressWarnings(\"ClassWithTooManyFields\")\n@SuppressWarnings(\"ClassWithTooManyMethods\")\n@SuppressWarnings(\"ClassWithTooManyStaticFields\")\n@SuppressWarnings(\"ClassWithTooManyConstructors\")\n@SuppressWarnings(\"ClassWithTooManyFields\")\n@SuppressWarnings(\"ClassWithTooManyMethods\")\n@SuppressWarnings(\"ClassWithTooManyStaticFields\")\n@SuppressWarnings(\"ClassWithTooManyConstructors\")\n@SuppressWarnings(\"ClassWithTooManyFields\")\n@SuppressWarnings(\"ClassWithTooManyMethods\")\n@", "reference_code": "\nimport javax.swing.*;\n\n", "case_type": "block"}
{"generated_code": "\nimport java.util.Date;\n\nimport static com.romainpiel.lib.utils.DateUtils.formatTime;\nimport static com.romainpiel.lib.utils.DateUtils.formatTime;\n\nimport static com.romainpiel.lib.utils.DateUtils.formatTime;\nimport static com.romainpiel.lib.utils.DateUtils.formatTime;\nimport static com.romainpiel.lib.utils.DateUtils.formatTime;\nimport static com.romainpiel.lib.utils.DateUtils.formatTime;\nimport static com.romainpiel.lib.utils.DateUtils.formatTime;\nimport static com.romainpiel.lib.utils.DateUtils.formatTime;\nimport static com.romainpiel.lib.utils.DateUtils.formatTime;\nimport static com.romainpiel.lib.utils.DateUtils.formatTime;\nimport static com.romainpiel.lib.utils.DateUtils.formatTime;\nimport static com.romainpiel.lib.utils.DateUtils.formatTime;\nimport static com.rom", "reference_code": "\nimport java.util.Date;\n", "case_type": "block"}
{"generated_code": "  public void writeFullStructuredField(OutputStream os, AFPParserConfiguration config) throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    for (IRepeatingGroup rg : repeatingGroups) {\n      rg.writeFullStructuredField(baos, config);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      baos.write(0);\n      ba", "reference_code": "  public void writeAFP(OutputStream os, AFPParserConfiguration config) throws IOException {\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    for (IRepeatingGroup rg : this.getRepeatingGroups()) {\n      rg.writeAFP(baos, config);\n", "case_type": "block"}
{"generated_code": "    protected void postProcessing( Operation op ) {\n        //post processing online logic\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last step of the transaction\n        //this is the last", "reference_code": "    protected void postProcessing( Operation op ) {\n        //post processing online logic\n", "case_type": "block"}
{"generated_code": "\n        if (infoExtraction.contains(\",\")) {\n            String[] infoExtractions = infoExtraction.split(\",\");\n            infoExtractionMsg = \"{'\";\n            for (int i = 0; i < infoExtractions.length; i++) {\n                if (i == infoExtractions.length - 1) {\n                    infoExtractionMsg = infoExtractionMsg + infoExtractions[i];\n                } else {\n                    infoExtractionMsg = infoExtractionMsg + infoExtractions[i]\n                            + \"','\";\n                }\n            }\n            infoExtractionMsg = (infoExtractionMsg.substring(0,\n                    infoExtractionMsg.length() - 2) + \"}\").trim();\n        } else if (infoExtraction.contains(\"'\")) {\n            String[] infoExtractions = infoExtraction.split(\"'\");\n            infoExtractionMsg = \"{'\";\n            for (int i = 0; i < infoExtractions.length; i++) {\n                if (i == infoExtractions.length - 1) {\n                    infoExtractionMsg = infoExtractionMsg +", "reference_code": "        // TODO Auto-generated method stub\n        if (infoExtraction != null && infoExtraction.length() > 0\n                && infoExtraction.contains(\",\")) {\n            String[] infoExtractions = infoExtraction.split(\",\");\n            infoExtractionMsg = \"{'\";\n            for (int i = 0; i < infoExtractions.length; i++) {\n", "case_type": "block"}
{"generated_code": "setText(\"%flink.ssql(type=single, template=<h1>Total: {0}</h1>, resumeFromLatestCheckpoint=true)\\n\" +\n              \"select count(1) from log;\");\n      note.run(p2.getId(), false);\n      assertEquals(Job.Status.FINISHED, p2.getStatus());\n    } finally {\n      if (note != null) {\n        note.delete();\n      }\n    }\n  }\n\n  private String readFile(String file) throws IOException {\n    return IOUtils.toString(Files.newInputStream(file), StandardCharsets.UTF_8);\n  }\n\n  private  public void testRunParagraph() throws Exception {\n      // run p1 for flink job\n      Paragraph p1 = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);\n      p1.setText(\"%flink.job(type=local, template=<h1>Total: {0}</h1>)\\n\" +\n              \"import org.apache.flink.api.java.io.", "reference_code": "      note.run(p0.getId(), true);\n      assertEquals(Job.Status.FINISHED, p0.getStatus());\n\n      // run p1 for creating flink table via scala\n      Paragraph p1 = note.addNewParagraph(AuthenticationInfo.ANONYMOUS);\n      p1.setText(\"%flink \" + getInitStreamScript(2000));\n", "case_type": "block"}
{"generated_code": "public class FieldConfig {\n\n    // The name of the field\n    // The name of the function\n    // The parameters of the function\n\n    // The name of the field\n    // The name of the function\n    // The parameters of the function\n\n    // The name of the field\n    // The name of the function\n    // The parameters of the function\n\n    // The name of the field\n    // The name of the function\n    // The parameters of the function\n\n    // The name of the field\n    // The name of the function\n    // The parameters of the function\n\n    // The name of the field\n    // The name of the function\n    // The parameters of the function\n\n    // The name of the field\n    // The name of the function\n    // The parameters of the function\n\n    // The name of the field\n    // The name of the function\n    // The parameters of the function\n\n    // The name of the field\n    // The name of the function\n    // The parameters of the function\n\n    // The name of the field\n    // The name of the function\n    // The parameters of the function\n", "reference_code": "public class FieldConfig {\n\n", "case_type": "block"}
{"generated_code": "     */\n    private void toggleFolding() {\n        if (editor.getProjectionViewer() instanceof ProjectionViewer) {\n            ProjectionViewer projectionViewer= (ProjectionViewer) editor.getProjectionViewer();\n            if (projectionViewer.isFoldingEnabled()) {\n                projectionViewer.setFoldingEnabled(false);\n            } else {\n                projectionViewer.setFoldingEnabled(true);\n                projectionViewer.setFoldingStyle(ProjectionViewer.FOLDING_STYLE_BLOCK);\n                projectionViewer.setFoldingStyle(ProjectionViewer.FOLDING_STYLE_INDENT);\n                projectionViewer.setFoldingStyle(ProjectionViewer.FOLDING_STYLE_SIMPLE);\n                projectionViewer.setFoldingStyle(ProjectionViewer.FOLDING_STYLE_SIMPLE_INDENT);\n                projectionViewer.setFoldingStyle(ProjectionViewer.FOLDING_STYLE_SIMPLE_BLOCK);\n                projection", "reference_code": "     */\n    private void toggleFolding() {\n        ProjectionViewer pv= editor.getCeylonSourceViewer();\n        if (pv.isProjectionMode() != editor.isFoldingEnabled()) {\n            if (pv.canDoOperation(ProjectionViewer.TOGGLE)) {\n                pv.doOperation(ProjectionViewer.TOGGLE);\n", "case_type": "block"}
{"generated_code": "package org.apache.commons.configuration2.filters;\n\nimport org.apache.commons.configuration2.filters.StackFilter;\nimport org.apache.commons.configuration2.filters.MapFilter;\nimport org.apache.commons.configuration2.filters.EnvironmentFilter;\nimport org.apache.commons.configuration2.filters.SystemFilter;\n\nimport java.util.Enumeration;\nimport java.util.Vector;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Iterator;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Iterator;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport java.util.Enumeration;\nimport java.util.Hashtable;\nimport java.util.Properties;\nimport java.util.Iterator;\nimport java.util.StringTokenizer;\nimport java.util.Vector;\nimport java", "reference_code": "package org.simpleframework.xml.filter;\n\n", "case_type": "block"}
{"generated_code": "    @Named\n    private ApplicationRole selectApplicationRole;\n    @Produces\n    @Named\n    private Set<ApplicationRole> applicationRoles;\n    @Produces\n    @Named\n    private ApplicationRole selectApplicationRoleForEdit;\n    @Produces\n    @Named\n    private ApplicationRole selectApplicationRoleForDelete;\n    @Produces\n    @Named\n    private ApplicationRole selectApplicationRoleForAdd;\n    @Produces\n    @Named\n    private ApplicationRole selectApplicationRoleForUpdate;\n    @Produces\n    @Named\n    private ApplicationRole selectApplicationRoleForView;\n    @Produces\n    @Named\n    private ApplicationRole selectApplicationRoleForSearch;\n    @Produces\n    @Named\n    private ApplicationRole selectApplicationRoleForList;\n    @Produces\n    @Named\n    private ApplicationRole selectApplicationRoleForCreate;\n    @Produces\n    @Named\n    private ApplicationRole selectApplicationRoleForUpdate;\n    @Produces\n    @Named\n    private ApplicationRole selectApplicationRoleForDelete;\n    @Produces\n    @Named\n    private ApplicationRole selectApplicationRoleForView;\n    @", "reference_code": "    @Named\n", "case_type": "block"}
{"generated_code": "import java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@SuppressWarnings(\"unused\")\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n", "reference_code": "import java.lang.annotation.*;\n\n", "case_type": "block"}
{"generated_code": " entity world. <b>{@code null} is not allowed</b>\n         */\n        @Override\n        public World getEntityWorld() {\n            return wrappedEntity.getEntityWorld();\n        }\n\n        /**\n         * Get the entity. <b>{@code null} is not allowed</b>\n         */\n        @Override\n        public Entity getEntity() {\n            return wrappedEntity;\n        }\n\n        /**\n         * Get the entity player. <b>{@code null} is not allowed</b>\n         */\n        @Override\n        public EntityPlayerMP getEntityPlayer() {\n            return null;\n        }\n\n        /**\n         * Get the entity villager. <b>{@code null} is not allowed</b>\n         */        @Override\n        public EntityVillager getEntityVillager() {\n            return null;\n        }\n\n        @Override\n        public String getCommandSenderName() {\n            return sender;\n        }\n\n        @Override\n        public MinecraftServer getMinecraftServer() {\n            return FMLCommonHandler", "reference_code": "        /**\n         * Returns the entity associated with the command sender. MAY BE NULL!\n         */\n", "case_type": "block"}
{"generated_code": "\n    @Override\n    protected int getSizeInBytes() {\n        // 4 bytes\n        // 10 characters\n        // 1 space\n        // 1 null\n        // 10 characters\n        // 1 space\n        // 1 null\n        // 10 characters\n        // 1 space\n        // 1 null\n        // 10 characters\n        // 1 space\n        // 1 null\n        // 10 characters\n        // 1 space\n        // 1 null\n        // 10 characters\n        // 1 space\n        // 1 null\n        // 10 characters\n        // 1 space\n        // 1 null\n        // 10 characters\n        // 1 space\n        // 1 null\n        // 10 characters\n        // 1 space\n        // 1 null\n        // 10 characters\n        // 1 space\n        // 1 null\n        // 10 characters\n        // 1 space\n        // 1 null\n        // 10 characters\n        // 1 space\n        // 1 null\n        // 10 characters\n", "reference_code": "\n    @Override\n    protected int setSizeInBytes() {\n", "case_type": "block"}
{"generated_code": "    protected final Long offset;\n    protected final Long limit;\n\n    public ListQuery(Long offset, Long limit, Order order) {\n        super();\n\n        if (offset == null) {\n            offset = 0L;\n        }\n\n        if (limit == null) {\n            limit = Long.MAX_VALUE;\n        }\n\n        if (order == null) {\n            order = Order.ASC;\n        }\n\n        if (limit < 0) {\n            throw new IllegalArgumentException(\"Limit must be >= 0\");\n        }\n\n        if (offset < 0) {\n            throw new IllegalArgumentException(\"Offset must be >= 0\");\n        }\n\n        if (offset > limit) {\n            throw new IllegalArgumentException(\"Offset must be <= limit\");\n        }\n\n        if (offset + limit > Long.MAX_VALUE) {\n            throw new IllegalArgumentException(\"Offset + limit must be <= Long.MAX_VALUE\");\n        }\n\n        if (limit > Long.MAX_VALUE) {\n            throw new IllegalArgumentException(\"Limit must be <= Long.MAX_VALUE\");\n        }\n\n        if (order.", "reference_code": "    protected final Long offset, limit; \n\n    public ListQuery(Order order, Long offset, Long limit) {\n", "case_type": "block"}
{"generated_code": "public class UserMessageActivity extends Activity {\n\n    private static final String GET_JSON_URL_INDEX = \"http://192.168.1.103:8080/loltime/userMessage.json\";\n\n    private List<SeekModel> mSeekModelGridViewList = new ArrayList<SeekModel>();\n    private List<UserMessageModel> mUserMessageModelList = new ArrayList<UserMessageModel>();\n\n    private static final String TAG = \"UserMessageActivity\";\n    private static final String JSON_STRING = \"jsonString\";\n    private static final String JSON_ARRAY = \"jsonArray\";\n    private static final String JSON_OBJECT = \"jsonObject\";\n    private static final String JSON_INT = \"jsonInt\";\n    private static final String JSON_BOOLEAN = \"jsonBoolean\";\n    private static final String JSON_FLOAT = \"jsonFloat\";\n    private static final String JSON_STRING_ARRAY = \"jsonStringArray\";\n    private static final String JSON_OBJECT_ARRAY = \"jsonObjectArray\";\n    private static final String JSON_INT_", "reference_code": "public class BaseActivity extends Activity {\n\n    public static final String GET_JSON_URL_INDEX = \"http://10.0.2.2/LoginDemo/index.php\";\n    protected  List<UserMessageModel> mUserMessageModelList = new ArrayList<UserMessageModel>();\n    protected  List<SeekModel> mSeekModelGridViewList = new ArrayList<SeekModel>();\n", "case_type": "block"}
{"generated_code": "        super(par1);\n        // TODO Auto-generated constructor stub\n\n    }\n    @Override\n    public WorldGenerator<?> func_150444_a(World world, Random random, int i, int j, int k) {\n        // TODO Auto-generated method stub\n        return this;\n    }\n    @Override\n    public boolean func_150443_a(World world, Random random, int i, int j, int k) {\n        // TODO Auto-generated method stub\n        return false;\n    }\n    @Override\n    public WorldGenerator<?> func_150442_a(World world, Random random, int i, int j, int k) {\n        // TODO Auto-generated method stub\n        return this;\n    }\n    @Override\n    public boolean func_150441_a(World world, Random random, int i, int j, int k) {\n        // TODO Auto-generated method stub\n        return false;\n    }\n    @Override\n    public WorldGenerator<?> func_150440_", "reference_code": "        super(par1);\n", "case_type": "block"}
{"generated_code": "        }\n            LOG.info(\"Starting \" + updaters.size() + \" sub threads\");\n            for (Runnable runnable : updaters) {\n                threadPool.submit(runnable);\n            }\n            while (!threadPool.awaitTermination(10, TimeUnit.SECONDS)) {\n                if (threadPool.isShutdown()) {\n                    if (threadPool.isTerminated()) {\n                        LOG.info(\"All tasks are done\");\n                        threadPool.shutdownNow();\n                    } else if (updateProgress) {\n                        int progress = 0;\n                        for (Future<?> future : futures) {\n                            if (future.isDone()) {\n                                progress++;\n                            }\n                        }\n                        updateTask.setTaskProgress(updaters.size(), progress, start, end);\n                    }\n                }\n            }\n            //Get errors (if any)\n            for (Future<?> future : futures) {\n                future.get();\n            }\n        } catch (InterruptedException ex) {\n            //No problem\n        } catch (ExecutionException ex", "reference_code": "            }\n            threadPool.shutdown();\n            while (!threadPool.awaitTermination(500, TimeUnit.MICROSECONDS)) {\n                if (updateTask != null) {\n                    if (updateTask.isCancelled()) {\n", "case_type": "block"}
{"generated_code": "\n    private final ClientRegistration clientRegistration = TestClientRegistrations.clientCredentials()\n            .withRegistrationId(\"test\").withClientAuthenticationMethod(\"client-secret\")\n            .withClientSecret(\"secret\").withScope(\"read\").withAuthorizedGrantTypes(\"refresh_token\")\n            .withAuthorizedRedirectUris(\"http://localhost:8080/login/oauth2/code/test\")\n            .withClientName(\"Test\").withClientSecret(\"secret\").withClientId(\"test\")\n            .withClientAuthenticationScheme(\"client-secret\").withAccessTokenUri(\"http://localhost:8080/oauth/token\")\n            .withUserAuthorizationUri(\"http://localhost:8080/oauth/authorize\").withTokenUri(\"http://localhost:8080/oauth/token\")\n            .withJwkSetUri(\"http://localhost:8080/oauth/token_keys\").withClientSecretEncryptionAlgorithm(\"test\")\n            .withClientAuthenticationMethod(\"test\").withClientAuthenticationKey(\"test\").withClientSecretEncryptionKey(\n                    \"test\").", "reference_code": "\n    private final ClientRegistration clientRegistration = TestClientRegistrations.clientRegistration()\n", "case_type": "block"}
{"generated_code": "        return _obj;\n    }\n\n    /**\n     * Get the AdministeredComponent element.\n     * \n     * This is the caCORE API Administered Component.\n     * \n     * This is null if an error occurred retrieving the record details through the caCORE API.\n     * \n     * This is null if the AdministeredComponent is not available in the caCORE API.\n     * \n     * This is null if the AdministeredComponent is not available in the caCORE API.\n     * \n     * This is null if the AdministeredComponent is not available in the caCORE API.\n     * \n     * This is null if the AdministeredComponent is not available in the caCORE API.\n     * \n     * This is null if the AdministeredComponent is not available in the caCORE API.\n     * \n     * This is null if the AdministeredComponent is not available in the caCORE API.\n     * \n     * This is null if the AdministeredComponent is not available in the caCORE API.\n     * \n    ", "reference_code": "        return _obj;\n    }\n\n    /**\n     * Get the AdministeredComponent element.\n", "case_type": "block"}
{"generated_code": "    @Bean\n    public ReloadableResourceBundleMessageSource messageSource() {\n        // Loads the messages from the i18n/messages.properties file\n        // and makes them available for the application to use\n        // in the application\n\n        // Reloads the messages file every 30 minutes\n        // to check for new messages\n\n        // Reloads the messages file every 30 minutes\n        // to check for new messages\n\n        // Reloads the messages file every 30 minutes\n        // to check for new messages\n\n        // Reloads the messages file every 30 minutes\n        // to check for new messages\n\n        // Reloads the messages file every 30 minutes\n        // to check for new messages\n\n        // Reloads the messages file every 30 minutes\n        // to check for new messages\n\n        // Reloads the messages file every 30 minutes\n        // to check for new messages\n\n        // Reloads the messages file every 30 minutes\n        // to check for new messages\n\n        // Reloads the messages file every 30 minutes\n        // to", "reference_code": "    @Bean\n    public ReloadableResourceBundleMessageSource messageSource(){\n", "case_type": "block"}
{"generated_code": "DelegatingViewResolverFactory factory,\n                InternalResourceViewResolver viewResolver) {\n            return factory.createViewResolver(viewResolver);\n        }\n\n    }\n\n    @Configuration\n    @ConditionalOnClass(ThymeleafViewResolver.class)\n    protected static class DeviceDelegatingThymeleafViewResolverConfiguration {\n\n        @Bean\n        @ConditionalOnBean(ThymeleafViewResolver.class)\n        public LiteDeviceDelegatingViewResolver deviceDelegatingThymeleafViewResolver(\n                DeviceDelegatingViewResolverFactory factory,\n                ThymeleafViewResolver viewResolver) {\n            return factory.createViewResolver(viewResolver);\n               return new LiteDeviceDelegatingViewResolver(viewResolver, factory);\n    }\n\n    }\n\n    @Configuration\n    @ConditionalOnClass(MustacheViewResolver.class)\n    protected static class DeviceDelegatingMustacheViewResolverConfiguration {\n\n        @Bean\n        @ConditionalOnBean(MustacheViewResolver.class)\n        public LiteDeviceDelegatingViewResolver deviceDelegatingMustacheViewResolver(", "reference_code": "        public LiteDeviceDelegatingViewResolver deviceDelegatingMustacheViewResolver(\n                DeviceDelegatingViewResolverFactory factory,\n                MustacheViewResolver viewResolver) {\n            return factory.createViewResolver(viewResolver);\n        }\n", "case_type": "block"}
{"generated_code": "               private final String name;\n        private final ConsumerReporter reporter;\n        private final KafkaStream<byte[], byte[]> stream;\n        private final ConsumerSchema.Consumer schema;\n        private final AtomicInteger active;\n        private final AtomicLong errors;\n\n        // this is the number of messages that have been consumed so far\n        // this is used to calculate the rate at which messages are being consumed\n        // and to calculate the number of messages that have been lost\n        // (i.e. messages that were not consumed because the consumer was paused)\n        // this is also used to calculate the number of messages that have been\n        // consumed and not processed\n        // this is also used to calculate the number of messages that have been\n        // lost and not processed\n        // this is also used to calculate the number of messages that have been\n        // consumed and not processed\n        // this is also used to calculate the number of messages that have been\n        // lost and not processed\n        // this is also used to calculate the number of messages that have been\n        // consumed and not processed\n        // this is also used to calculate the number of messages", "reference_code": "    private final String name;\n    private final ConsumerReporter reporter;\n    private final KafkaStream<byte[], byte[]> stream;\n    private final ConsumerSchema.Consumer schema;\n    private final AtomicInteger active;\n    private final AtomicLong errors;\n", "case_type": "block"}
{"generated_code": "interface Bar {\n  Bar3 foo;\n}\n\nclass Foo {\n  Bar b = new Bar() {\n    void m(Bar b) {\n      Bar3 r = b::foo;\n    }\n  };\n\n  void m() {\n    Bar1 v = b;\n    b::foo = v;\n  }\n\n  void n() {\n    Bar1 v = b;\n    b::foo = v;\n  }\n\n  void o() {\n    Bar1 v = b;\n    b::foo = v;\n  }\n\n  void p() {\n    Bar1 v = b;\n    b::foo = v;\n  }\n\n  void q() {\n    Bar1 v = b;\n    b::foo = v;\n  }\n\n  void r() {\n    Bar1 v = b;\n    b::foo = v;\n  }\n\n  void s() {\n    Bar1 v = b;\n    b::foo = v;\n  }\n\n  void t() {\n    Bar1 v = b;\n    b::foo = v;", "reference_code": "class Bar {\n  void f<caret>oo(int i, Bar1 b1) {\n  }\n", "case_type": "block"}
{"generated_code": ".sleep(10000);\n  }\n}\n\n    compactionConfig = new DataSourceCompactionConfig(\n        UPGRADE_DATASOURCE_NAME,\n        null,\n        null,\n        null,\n        newSkipOffset,\n        new UserCompactionTaskQueryTuningConfig(\n            null,\n            null,\n            null,\n            new MaxSizeSplitHintSpec(null, 1),\n            newPartitionsSpec,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n            null,\n", "reference_code": "            1,\n            null,\n            null,\n            null,\n            null,\n", "case_type": "block"}
{"generated_code": "        Class javaClass = parameterInfo.getType();\n\n        if (parameterInfo.getValue() == null) {\n            return \"null\";\n        }\n\n        if (parameterInfo.getValue() instanceof UUID) {\n            return \"'\" + parameterInfo.getValue() + \"'\";\n        }\n\n        if (parameterInfo.getValue() instanceof String && ((String) parameterInfo.getValue()).isEmpty()) {\n            return \"null\";\n        }\n\n        if (parameterInfo.getValue() instanceof Boolean && !((Boolean) parameterInfo.getValue())) {\n            return \"null\";\n        }\n\n        if (parameterInfo.getValue() instanceof Number && ((Number) parameterInfo.getValue()).doubleValue() == 0.0) {\n            return \"null\";\n        }\n\n        if (parameterInfo.getValue() instanceof EnumClass && ((EnumClass) parameterInfo.getValue()).getId() == null) {\n            return \"null\";\n        }\n\n        if (parameterInfo.getValue() instanceof EnumClass && ((EnumClass) parameterInfo.getValue()).getId() instanceof Number) {\n            return \"'\" + ((EnumClass) parameterInfo.getValue()).getId() +", "reference_code": "        Class javaClass = parameterInfo.getJavaClass();\n        if (javaClass == null) {\n            throw new UnsupportedOperationException();\n        }\n\n", "case_type": "block"}
{"generated_code": " {\n                recycle(info.getChild(i));\n            }\n        }\n    }\n\n    @Override\n    public void onInterrupt() {\n\n    }\n}\n\n    /**\n     * 释放节点\n     *\n     * @param info\n     * @return\n     * @SuppressLint(\"NewApi\")\n     * public void recycle(AccessibilityNodeInfo info) {\n     * if (info.isClickable()) {\n     * info.performAction(AccessibilityNodeInfo.ACTION_CLICK);\n     * }\n     * }\n     *\n     * @SuppressLint(\"NewApi\")\n     * public void recycle(AccessibilityNodeInfo info) {\n     * if (info.isClickable()) {\n     * info.performAction(AccessibilityNodeInfo.ACTION_CLICK);\n     * }\n     * }\n     *\n     * @SuppressLint(\"NewApi\")\n     * public void recycle(AccessibilityNodeInfo info) {\n     * if (info.isClickable()) {\n     * info.performAction(Access", "reference_code": "    /**\n     * 打印一个节点的结构\n     *\n     * @param info\n", "case_type": "block"}
{"generated_code": "                    }\n\n                    @Override\n                    public String[] getExcludedDirectories() {\n                        return i.getExcludedDirectories();\n                    }\n\n                    @Override\n                    public String[] getExcludedFiles() {\n                        return i.getExcludedFiles();\n                    }\n\n                    @Override\n                    public String[] getIncludedDirectories() {\n                        return i.getIncludedDirectories();\n                    }\n\n                    @Override\n                    public String[] getIncludedFiles() {\n                        return i.getIncludedFiles();\n                    }\n                })\n                .map(i -> new FilesProvider() {\n                    @Override\n                    public File getBasedir() {\n                        return i.getBasedir();\n                    }\n\n                    @Override\n                    public String[] getExcludedDirectories() {\n                        return i.getExcludedDirectories();\n                    }\n\n                    @Override\n                    public String[] getExcludedFiles() {\n                        return i.getExcludedFiles();\n                    }\n\n                    @Override\n                    public String[] getIncludedDirectories() {\n                        return i.getIncludedDirectories();\n                    }\n\n", "reference_code": "                    }\n", "case_type": "block"}
{"generated_code": "            in.readObject();\n        } else {\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();\n            in.readObject();", "reference_code": "\n            throw new Error(\"Wrote a test object whos readObject \" +\n                            \"method always throws an Error\");\n\n        } else {\n", "case_type": "block"}
{"generated_code": "     */\n    public String get(String str) {\n        String strjson = \"\";\n        str = str.replaceAll(\"\\\\[\", \"\");\n        str = str.replaceAll(\"\\\\]\", \"\");\n        str = str.replaceAll(\"\\\\,\", \"\");\n        str = str.replaceAll(\"\\\\'\", \"\");\n        str = str.replaceAll(\"\\\\n\", \"\");\n        str = str.replaceAll(\"\\\\r\", \"\");\n        str = str.replaceAll(\"\\\\t\", \"\");\n        str = str.replaceAll(\"\\\\\\\\\", \"\");\n        str = str.replaceAll(\"\\\\s\", \"\");\n        str = str.replaceAll(\"\\\\s\", \"\");\n        str = str.replaceAll(\"\\\\s\", \"\");\n        str = str.replaceAll(\"\\\\s\", \"\");\n        str = str.replaceAll(\"\\\\s\", \"\");\n        str = str.replaceAll(\"\\\\s\", \"\");\n        str = str.replaceAll(\"\\\\s\", \"\");\n        str = str.replaceAll(\"\\\\s\", \"\");\n        str = str.replaceAll(\"\\\\s\", \"", "reference_code": "     * @throws JSONException\n     */\n    public String get(String str) throws JSONException{\n\n        String strjson = \"\";\n\n", "case_type": "block"}
{"generated_code": "    public int getStatus()\n    {\n        return status;\n    }\n\n    public boolean isEmpty()\n    {\n        return lstData.isEmpty();\n    }\n\n    public boolean isNotEmpty()\n    {\n        return !lstData.isEmpty();\n    }\n\n    public void clear()\n    {\n        lstData.clear();\n    }\n\n    public boolean isValid()\n    {\n        return status == 0;\n    }\n\n    public boolean isInvalid()\n    {\n        return status != 0;\n    }\n\n    public boolean isValid(int status)\n    {\n        return this.status == status;\n    }\n\n    public boolean isInvalid(int status)\n    {\n        return this.status != status;\n    }\n\n    public boolean isValid(int status, int count)\n    {\n        return this.status == status && lstData.size() == count;\n    }\n\n    public boolean isInvalid(int status, int count)\n    {\n        return this.status != status || lstData.size() != count", "reference_code": "    public int getStatus()\n    {\n        return status;\n    }\n", "case_type": "block"}
{"generated_code": "        session.getTransaction().commit();\n        session.close();\n        return employee;\n    }\n\n    @Override\n    public Employee update(Employee employee)\n            throws DaoException, ElementNonExistException {\n        SessionFactory sf = HibernateUtil.getSessionFactory();\n        Session session = sf.openSession();\n        // Iniciamos el contecto de transacción.\n        session.beginTransaction();\n        // Creamos un nuevo elemento dentro de la base de datos.\n        session.update(employee);\n        // Finalizamos el contexto de transacción.\n        session.getTransaction().commit();\n        session.close();\n        return employee;\n    }\n\n    @Override\n    public void delete(Employee employee)\n            throws DaoException, ElementNonExistException {\n        SessionFactory sf = HibernateUtil.getSessionFactory();\n        Session session = sf.openSession();\n        // Iniciamos el contecto de transacción.\n        session.beginTransaction();\n        // Creamos un nuevo        // La función save nos retorna el", "reference_code": "     * datos.\n     * @throws DaoException\n     * @throws ElementNonExistException\n", "case_type": "block"}
{"generated_code": "import static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\nimport static org.mockito.Mockito.*;\n\n@SuppressWarnings(\"unchecked\")\n@SuppressWarnings(\"rawtypes\")\n@SuppressWarnings(\"deprecation\")\n@SuppressWarnings(\"serial\")\n@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n@SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n@SuppressWarnings(\"PMD.A", "reference_code": "import static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\n", "case_type": "block"}
{"generated_code": " Timeouts(final int readInterval, final int readTotalMultiplier,\n            final int readTotalConstant)\n        {\n            this(readInterval, readTotalMultiplier, readTotalConstant,\n                readTotalMultiplier, readTotalConstant);\n        }\n    }\n\n    private static final Timeouts DEFAULT_TIMEOUTS = new Timeouts(10, 1000, 1000);\n\n    static\n    {\n        loaded = loadLibrary(\"libserialport.so\");\n    }\n\n    SerialComAdapter(final String portName, final Timeouts timeouts)\n    {\n        super(portName);\n        this.timeouts = timeouts;\n    }\n\n    SerialComAdapter(final String portName)\n    {\n        this(portName, DEFAULT_TIMEOUTS);\n    }\n\n    @Override\n    protected boolean loadLibrary()\n    {\n        return loaded;\n    }\n\n    @Override\n    protected void open()\n    {\n        fd = open(portName, BAUDRATE, PARITY, DATABITS, STOPBITS, F", "reference_code": "    }\n\n    // will only set a supported parity, check result with getParity()\n    // return previous parity mode\n    final int setParity(final int parity)\n", "case_type": "block"}
{"generated_code": "import org.apache.storm.Config;\nimport org.apache.storm.LocalCluster;\nimport org.apache.storm.topology.TopologyBuilder;\nimport org.apache.storm.tuple.Fields;\nimport org.apache.storm.utils.Utils;\nimport org.apache.storm.utils.Utils.killTopology;\nimport org.apache.storm.utils.Utils.killTopology;\nimport org.apache.storm.utils.Utils.killTopology;\nimport org.apache.storm.utils.Utils.killTopology;\nimport org.apache.storm.utils.Utils.killTopology;\nimport org.apache.storm.utils.Utils.killTopology;\nimport org.apache.storm.utils.Utils.killTopology;\nimport org.apache.storm.utils.Utils.killTopology;\nimport org.apache.storm.utils.Utils.killTopology;\nimport org.apache.storm.utils.Utils.killTopology;\nimport org.apache.storm.utils.Utils.killTopology;\nimport org.apache.storm.utils.Utils.killTopology;\nimport org.", "reference_code": "import org.apache.storm.Config;\nimport org.apache.storm.LocalCluster;\n", "case_type": "block"}
{"generated_code": "    @Override\n    public List<Source> getSources() {\n        final String sourceNames = this.preferences.getString(PreferenceUserConfigs.KEY_SOURCE_NAMES, \"\");\n        final List<Source> sources = new ArrayList<>();\n\n        for (final String sourceName : sourceNames.split(\",\")) {\n            sources.add(new Source(sourceName));\n        }\n\n        return sources;\n    }\n\n    @Override\n    public void setSources(final List<Source> sources) {\n        final StringBuilder sourceNames = new StringBuilder();\n\n        for (final Source source : sources) {\n            sourceNames.append(source.getName()).append(\",\");\n        }\n\n        this.preferences\n            .edit()\n            .putString(PreferenceUserConfigs.KEY_SOURCE_NAMES, sourceNames.toString())\n            .commit();\n    }\n\n    @Nonnull\n    @NonNull\n    @Override\n    public List<Category> getCategories() {\n        final String categoryNames = this.preferences.getString(PreferenceUserConfigs.KEY", "reference_code": "\n    @Nonnull\n    @NonNull\n    @Override\n", "case_type": "block"}
{"generated_code": "import java.sql.Timestamp;\nimport java.util.Date;\n\nimport wint.lang.convert.AbstractConvert;\nimport wint.lang.convert.Convert;\nimport wint.lang.convert.converts.smart.SmartDateConvert;\nimport wint.lang.convert.converts.smart.SmartNumberConvert;\nimport wint.lang.convert.converts.smart.SmartStringConvert;\nimport wint.lang.convert.converts.smart.SmartTimestampConvert;\nimport wint.lang.convert.converts.smart.SmartUrlConvert;\nimport wint.lang.convert.converts.smart.SmartUUIDConvert;\nimport wint.lang.convert.converts.smart.SmartXmlConvert;\nimport wint.lang.convert.converts.smart.SmartXmlConvert.XmlType;\nimport wint.lang.convert.converts.smart.SmartXmlConvert.XmlType.XmlTypeEnum;\nimport wint.lang.convert.converts.smart.SmartXmlConvert.XmlType.XmlTypeEnum.", "reference_code": "import java.sql.Timestamp;\nimport java.util.Date;\n", "case_type": "block"}
{"generated_code": "      return false;\n    }\n\n    // add to queue\n    dependency.getInstance().setPopulating(true);\n\n    // add to queue\n    dependency.getInstance().setPopulating(true);\n\n    // add to queue\n    dependency.getInstance().setPopulating(true);\n\n    // add to queue\n    dependency.getInstance().setPopulating(true);\n\n    // add to queue\n    dependency.getInstance().setPopulating(true);\n\n    // add to queue\n    dependency.getInstance().setPopulating(true);\n\n    // add to queue\n    dependency.getInstance().setPopulating(true);\n\n    // add to queue\n    dependency.getInstance().setPopulating(true);\n\n    // add to queue\n    dependency.getInstance().setPopulating(true);\n\n    // add to queue\n    dependency.getInstance().setPopulating(true);\n\n    // add to queue\n    dependency.getInstance().setPopulating(true);\n\n    // add to queue\n    dependency.getInstance().setPopulating(true);\n\n    // add to queue\n    dependency.getInstance().setPopulating(true);\n\n", "reference_code": "      return false;\n    }\n\n", "case_type": "block"}
{"generated_code": "   * @return the update part, or null if the statement is incomplete.\n   */\n  @javax.annotation.Nullable\n  PsiStatement getUpdate();\n\n  /**\n   * Returns the statement header.\n   *\n   * @return the statement header, or null if the statement is incomplete.\n   */\n  @javax.annotation.Nullable\n  PsiStatementHeader getStatementHeader();\n\n  /**\n   * Returns the statement body.\n   *\n   * @return the statement body, or null if the statement is incomplete.\n   */\n  @javax.annotation.Nullable\n  PsiStatementBody getStatementBody();\n\n  /**\n   * Returns the statement header.\n   *\n   * @return the statement header, or null if the statement is incomplete.\n   */\n  @javax.annotation.Nullable\n  PsiStatementHeader getStatementHeader();\n\n  /**\n   * Returns the statement body.\n   *\n   * @return the statement body, or null if the statement is incomplete.\n   */\n  @javax.annotation.Nullable\n  PsiStatementBody getStatementBody();\n\n  /**", "reference_code": "   * @return the update part, or null if the statement is incomplete.\n   */\n  @javax.annotation.Nullable\n  PsiStatement getUpdate();\n\n  /**\n", "case_type": "block"}
{"generated_code": "   *\n   * @param interval The time interval on which the metrics should be aggregated.\n   *                  The time unit is seconds.\n   * @return the aggregated metrics\n   */\n  List<MetricIntervalValue> interval(int interval);\n\n  /**\n   * Returns the metrics summed up and aggregated on a time interval.\n   * The size of the interval is given via parameter.\n   *\n   * <p>\n   * This method is only available for the {@link Metrics#TOTAL_ACTIVITY_TIME} metric.\n   * </p>\n   *\n   * @deprecated Use {@link #interval(int)} instead.\n   *\n   * @see #interval(int)\n   *\n   * @deprecated Use {@link #interval(long)} instead.\n   *\n   * @see #interval(long)\n   *\n   * @see #interval()\n   *\n   * @deprecated Use {@link #interval(int)} instead.\n   *\n   * @see #interval(int)\n   *\n   * @see #interval(long)\n   *\n   *", "reference_code": "   * The time unit is seconds! The list size has a maximum of 200\n   * the maximum can be decreased with the MetricsQuery#limit method. Paging\n   * is enabled with the help of the offset.\n   *\n", "case_type": "block"}
{"generated_code": "import com.gemstone.gemfire.cache.client.Connection;\nimport com.gemstone.gemfire.cache.client.ExecutablePool;\nimport com.gemstone.gemfire.cache.client.Message;\nimport com.gemstone.gemfire.cache.client.MessageType;\nimport com.gemstone.gemfire.internal.cache.tier.ConnectionStats;\nimport com.gemstone.gemfire.internal.cache.tier.AbstractOp;\nimport com.gemstone.gemfire.internal.cache.tier.Connection;\nimport com.gemstone.gemfire.internal.cache.tier.ExecutablePool;\nimport com.gemstone.gemfire.internal.cache.tier.Message;\nimport com.gemstone.gemfire.internal.cache.tier.PrimaryAckOpImpl;\nimport com.gemstone.gemfire.internal.cache.tier.PrimaryAckOpImpl.MessageType;\nimport com.gemstone.gemfire.internal.cache.tier.Primary", "reference_code": "import com.gemstone.gemfire.internal.cache.tier.MessageType;\nimport com.gemstone.gemfire.internal.cache.tier.sockets.Message;\n", "case_type": "block"}
{"generated_code": " }\n\n    @Override\n    public void execute(CommandExecutionContext context) throws CommandExecutionException {\n        // TODO: Implement\n    }\n\n    @Override\n    public CommandDefinition getCommandDefinition() {\n               return new CommandDefinition(COMMAND_NAME[0], \"Generate the SQL to deploy the specified number of changes\",\n                CHANGELOG_FILE_ARG, URL_ARG, DEFAULT_SCHEMA_NAME_ARG, DEFAULT_CATALOG_NAME_ARG, USERNAME_ARG, PASSWORD_ARG, LABELS_ARG, CONTEXTS_ARG, COUNT_ARG, CHANGE_EXEC_LISTENER_CLASS_ARG, CHANGE_EXEC_LISTENER_PROPERTIES_FILE_ARG, DRIVER_ARG, DRIVER_PROPERTIES_FILE_ARG);\n    }\n\n    @Override\n    public String getCommandName() {\n        return COMMAND_NAME[0];\n    }\n\n}\n\nclass UpdateCountSqlCommandStepFactory implements CommandStepFactory {\n    public    @Override\n    public CommandStep createCommandStep(String[] args", "reference_code": "\n    @Override\n    protected String[] collectArguments(CommandScope commandScope) throws CommandExecutionException {\n        return collectArguments(commandScope, null, \"count\");\n", "case_type": "block"}
{"generated_code": "    }\n\n    public static <T, R> R foldl(Function2<? super R, ? super T, ? extends R> func,\n                                 R init, Collection<? extends T> inpCol) {\n        for (T obj : inpCol) {\n            init = func.apply(init, obj);\n        }\n        return init;\n    }\n\n    public static <T, R> R foldr(Function1<? super T, ? extends R> func,\n                                 R init, Collection<? extends T> inpCol) {\n        for (T obj : inpCol) {\n            init = func.apply(obj);\n        }\n        return init;\n    }\n\n    public static <T, R> R foldl(Function1<? super T, ? extends R> func,\n                                 R init, Collection<? extends T> inpCol) {\n        for (T obj : inpCol) {\n            init = func.apply(obj);\n        }\n        return init;\n    }\n\n    public static <T, R> R foldr(Function2<? super R", "reference_code": "    }\n\n    public static <T, R> R foldl(Function2<? super R, ? super T, ? extends R> func,\n", "case_type": "block"}
{"generated_code": "    }\n    /* **** End of Method for BeanFactoryAware interface *************/\n\n    public void setMessageServices(HashMap<String, MessageSource> messageServices) {\n    this.messageServices = messageServices;\n    }\n\n    public HashMap<String, MessageSource> getMessageServices() {\n    return messageServices;\n    }\n\n    public BeanFactory getBeanFactory() {\n    return beanFactory;\n    }\n\n    public void setBeanFactory(BeanFactory beanFactory) {\n    this.beanFactory = beanFactory;\n    }\n\n    public void setMessageServices(String key, MessageSource value) {\n    messageServices.put(key, value);\n    }\n\n    public MessageSource getMessageServices(String key) {\n    return messageServices.get(key);\n    }\n\n    public void removeMessageServices(String key) {\n    messageServices.remove(key);\n    }\n\n    public boolean containsMessageServices(String key) {\n    return messageServices.containsKey(key);\n    }\n\n    public int getMessageServicesSize() {\n    return messageServices", "reference_code": "    }\n", "case_type": "block"}
{"generated_code": "    /** Gets the minimum actual pixel value for the given channel. */\n    double getChannelDefault(int c);\n\n    /** Sets the default actual pixel value for the given channel. */\n    void setChannelDefault(int c, double defaultValue);\n\n    /** Gets the minimum actual pixel value for the given channel. */\n    double getChannelDefaultMinimum(int c);\n\n    /** Sets the minimum actual pixel value for the given channel. */\n    void setChannelDefaultMinimum(int c, double min);\n\n    /** Gets the minimum actual pixel value for the given channel. */\n    double getChannelDefaultMaximum(int c);\n\n    /** Sets the minimum actual pixel value for the given channel. */\n    void setChannelDefaultMaximum(int c, double max);\n\n    /** Gets the minimum actual pixel value for the given channel. */\n    double getChannelMinimumDefault(int c);\n\n    /** Sets the minimum actual pixel value for the given channel. */\n    void setChannelMinimumDefault(int c, double min);\n\n    /** Gets the minimum actual pixel value for the given channel. */\n    double getChannelMinimumDefaultMax", "reference_code": "    /** Sets the number of valid bits. */\n    void setValidBits(int bits);\n\n    /** Gets the minimum actual pixel value for the given channel. */\n", "case_type": "block"}
{"generated_code": "package com.facebook.buck.cxx;\n\nimport com.facebook.buck.cxx.CxxConstructorArg.CxxConstructorArg;\nimport com.facebook.buck.cxx.CxxConstructorArg.CxxConstructorArg.CxxConstructorArgBuilder;\nimport com.facebook.buck.cxx.CxxConstructorArg.CxxConstructorArg.CxxConstructorArgBuilder.CxxConstructorArgBuilderFactory;\nimport com.facebook.buck.cxx.CxxConstructorArg.CxxConstructorArg.CxxConstructorArgBuilder.CxxConstructorArgBuilderFactory.CxxConstructorArgBuilderFactoryFactory;\nimport com.facebook.buck.cxx.CxxConstructorArg.CxxConstructorArg.CxxConstructorArgBuilder.CxxConstructorArgBuilderFactory.CxxConstructorArgBuilderFactoryFactory.CxxConstructorArgBuilderFactoryFactoryFactory;\nimport com.facebook.buck.cxx.CxxConstructorArg.CxxConstructorArg.CxxConstructorArgBuilderFactory.CxxConstructorArgBuilderFactoryFactoryFactory.CxxConstructorArgBuilderFactoryFactoryFactoryFactory;\nimport com.facebook.buck.cxx.CxxConstructorArg", "reference_code": "package com.facebook.buck.cxx;\n\n", "case_type": "block"}
{"generated_code": "\npublic class SecurityUtil {\n\n    private SecurityUtil() {\n    }\n\n    /**\n     * Returns the currently logged in user.\n     *\n     * @return the currently logged in user\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n   ", "reference_code": "\npublic class SecurityContextUtil {\n\n", "case_type": "block"}
{"generated_code": "public enum QueueLogType {\n\n    INFO,\n    WARNING,\n    ERROR;\n\n    public String toString() {\n        return name();\n    }\n\n    public String toString(String format) {\n        return String.format(format, name());\n    }\n\n    public String toString(String format, Object... args) {\n        return String.format(format, args);\n    }\n\n    public String toString(String format, Object arg) {\n        return String.format(format, arg);\n    }\n\n    public String toString(String format, Object arg1, Object arg2) {\n        return String.format(format, arg1, arg2);\n    }\n\n    public String toString(String format, Object arg1, Object arg2, Object arg3) {\n        return String.format(format, arg1, arg2, arg3);\n    }\n\n    public String toString(String format, Object... args) {\n        return String.format(format, args);\n    }\n\n    public String toString(String format, Object arg1, Object arg2,", "reference_code": "public enum QueueLogType {\n\n    ABANDON, ADDMEMBER, COMPLETEAGENT, COMPLETECALLER, CONFIGRELOAD, CONNECT, DID, ENTERQUEUE, EXITWITHTIMEOUT, HEARTBEAT, HOTDESK, PAUSE, PAUSEALL, PAUSEREASON, QUEUESTART, REMOVEMEMBER, RINGNOANSWER, UNPAUSE, UNPAUSEALL;\n", "case_type": "block"}
{"generated_code": ".invoke(player);\n            for (Chunk chunk : list) {\n                ChunkLoc chunkLoc = new ChunkLoc(chunk.getX(), chunk.getZ());\n                MapChunk.invoke(MapChunk, entity, chunkLoc, view, true);\n                send.invoke(connection.get(entity), MapChunk);\n            }\n        }\n    }\n\n    public void sendChunk(final Chunk chunk) {\n        String world = chunk.getWorld().getName();\n        ArrayList<Chunk> list = UUIDHandler.getPlayers().get(world).getChunks();\n        if (list == null) {\n            return;\n        }\n        int cx = chunk.getX() >> 4;\n        int cz = chunk.getZ() >> 4;\n        for (Chunk chunk2 : list) {\n            ChunkLoc chunkLoc = new ChunkLoc(chunk2.getX(), chunk2.getZ());\n            MapChunk.invoke(MapChunk, chunk2, chunkLoc, PS.get().getViewDistance(), true);\n            send.invoke(connection", "reference_code": "                    catch (Exception e) {\n                        String worldname = chunk.getWorld().getName();\n", "case_type": "block"}
{"generated_code": "                urlConnection = (HttpURLConnection) url.openConnection();\n                urlConnection.setRequestMethod(data.requestMethod.raw);\n\n                // set header for GET request\n                if (data.requestMethod == HttpRequestMethod.GET) {\n                    urlConnection.setRequestProperty(\"Accept\", \"*/*\");\n                }\n\n                // set header for POST request\n                if (data.requestMethod == HttpRequestMethod.POST) {\n                    urlConnection.setRequestProperty(\"Accept\", \"*/*\");\n                }\n\n                // set header for request\n                if (data.requestHeader.raw != null)\n                    urlConnection.setRequestProperty(\"Accept\", \"*/*\");\n\n                // set header for request\n                if (data.requestHeader.raw != null)\n                    urlConnection.setRequestProperty(\"Accept\", \"*/*\");\n\n                // set header for request\n                if (data.requestHeader.raw != null)\n                    urlConnection.setRequestProperty(\"Accept\", \"*/*\");\n\n                // set header for request\n                if (data.requestHeader.raw != null)\n                    urlConnection.setRequest", "reference_code": "                urlConnection = (HttpURLConnection) url.openConnection();\n                urlConnection.setRequestMethod(data.requestMethod.name());\n\n                // set request header\n", "case_type": "block"}
{"generated_code": "import org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.UnsupportedOperationException;\n\nimport com.github.visgeek.utils.collections.Integer;\nimport com.github.visgeek.utils.collections.test.testcase.ienumerable.ienumerable.IEnumerableTest;\nimport com.github.visgeek.utils.collections.test.testcase.ienumerable.ienumerable.IEnumerableTest.Test;\nimport com.github.visgeek.utils.collections.test.testcase.ienumerable.ienumerable.IEnumerableTest.Test.Test;\nimport com.github.visgeek.utils.collections.test.testcase.ienumerable.ienumerable.IEnumerableTest.Test.Test;\nimport com.github.visgeek.utils.collections.test.testcase.ienumerable.ienumerable.IEnumerableTest.Test.Test;\nimport com.github.visgeek.utils.collections.test.testcase.ienumerable.ienumerable.IEnumerableTest.Test.Test;\nimport com.github.vis", "reference_code": "import org.junit.Assert;\nimport org.junit.Test;\n", "case_type": "block"}
{"generated_code": "    public double getY() {\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO: Check this\n        // TODO", "reference_code": "    public double getY() {\n", "case_type": "block"}
{"generated_code": "import android.view.ScaleGestureDetector;\nimport android.view.ScaleGestureDetector.SimpleOnScaleGestureListener;\nimport android.view.ScaleGestureDetector.SimpleOnScaleGestureListener.Callback;\nimport android.view.ScaleGestureDetector.SimpleOnScaleGestureListener.Callback.OnScaleGestureListener;\nimport android.view.ScaleGestureDetector.SimpleOnScaleGestureListener.ScaleType;\nimport android.view.ScaleGestureDetector.SimpleOnScaleGestureListener.ScaleType.FIT_XY;\nimport android.view.ScaleGestureDetector.SimpleOnScaleGestureListener.ScaleType.FIT_XY_FLIP_VERTICAL;\nimport android.view.ScaleGestureDetector.SimpleOnScaleGestureListener.ScaleType.MATRIX;\nimport android.view.ScaleGestureDetector.SimpleOnScaleGestureListener.ScaleType.TRANSLATION_MATRIX;\nimport android.view.ScaleGestureDetector.SimpleOnScaleGest", "reference_code": "import android.view.ScaleGestureDetector;\nimport android.view.MotionEvent;\n", "case_type": "block"}
{"generated_code": "\n    /**\n     * @see org.swingeasy.table.renderer.ETableCellRenderer#ETableCellRenderer()\n     */\n    public URITableCellRenderer() {\n        super();\n        setHorizontalAlignment(JTable.RIGHT);\n        setVerticalAlignment(JTable.CENTER);\n        setOpaque(true);\n        setFont(getFont().deriveFont(12f));\n        setForeground(getForeground());\n        setBackground(getBackground());\n        setBorder(getBorder());\n        setText(getText());\n        setToolTipText(getToolTipText());\n        setSelectedText(getSelectedText());\n        setDisabledText(getDisabledText());\n        setEmptyText(getEmptyText());\n        setNullText(getNullText());\n        setEmptyIcon(getEmptyIcon());\n        setNullIcon(getNullIcon());\n        setDisabledIcon(getDisabledIcon());\n        setFont(getFont());\n        setForeground(getForeground());\n        setBackground(getBackground());\n        setBorder(getBorder());\n       ", "reference_code": "    private static final long serialVersionUID = 5347735590867783815L;\n\n    public URITableCellRenderer() {\n        super();\n", "case_type": "block"}
{"generated_code": "    *\n    * @param node    the starting node\n    * @param env     the xpath environment\n    * @return the axis context\n    */\n   private Node getAxisContext(Node node, Env env)\n      throws XPathException {\n      Node axis = node;\n      for (; axis != null; axis = axis.getParentNode()) {\n         if (_parent.match(axis, env))\n            break;\n      }\n\n      return axis;\n   }\n\n   public String toString() {\n      return \"descendant::\" + _parent.toString();\n   }\n\n   public boolean equals(Object o) {\n      if (o instanceof FromDescendants) {\n         FromDescendants p = (FromDescendants) o;\n         return _parent.equals(p._parent);\n      }\n      return false;\n   }\n\n   public int hashCode() {\n      return _parent.hashCode();\n   }\n}\n\n//src/com/clevercloud/xpath/pattern/FromDescendantsAxis.java\npackage com.clevercloud.xpath.pattern;", "reference_code": "   private Node getAxisContext(Node node, ExprEnvironment env)\n", "case_type": "block"}
{"generated_code": "\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringJUnit4ClassRunner\n@WebAppConfiguration\n@ActiveProfiles(\"test\")\n@ContextConfiguration(classes = { AppConfig.class, WebAppConfig.class })\npublic abstract class IntegrationTestBase {\n\n    @Autowired\n    private WebApplicationContext wac;\n\n    protected MockMvc mvc;\n\n    @Before\n    public void setup() {\n        this.mvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n    }\n\n}\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringJUnit4ClassRunner\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringJUnit4ClassRunner\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringJUnit4ClassRunner\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringJUnit4ClassRunner\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringJUnit4ClassRunner\n", "reference_code": "import org.uda.preciosjustos.configuration.AppConfig;\nimport org.uda.preciosjustos.configuration.WebAppConfig;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n", "case_type": "block"}
{"generated_code": "\n    public void setLoggingSizeLimit(int loggingSizeLimit) {\n        this.loggingSizeLimit = loggingSizeLimit;\n        if (loggingFeature != null) {\n            getFeatures().remove(loggingFeature);\n            loggingFeature = null;\n        }\n        if (loggingSizeLimit > 0) {\n            loggingFeature = new LoggingFeature(loggingSizeLimit);\n        }\n    }\n\n    public void setLoggingFeatureEnabled(boolean loggingFeatureEnabled, int loggingSizeLimit) {\n        if (loggingFeature != null) {\n            getFeatures().remove(loggingFeature);\n            loggingFeature = null;\n        }\n        if (loggingFeatureEnabled) {\n            this.loggingSizeLimit = loggingSizeLimit;\n\n            // add this mothod for testing\n            getSchemaLocations().clear();\n            getSchemaLocations().add(\"classpath:org/apache/camel/component/cxf/spring/cxf-schema.xsd\");\n\n            // add this mothod for testing\n            getSchemaLocations().add(\"classpath:org/apache/camel/component/cxf/spring/c", "reference_code": "\n    public void setLoggingSizeLimit(int loggingSizeLimit) {\n        this.loggingSizeLimit = loggingSizeLimit;\n        if (loggingFeature != null) {\n            getFeatures().remove(loggingFeature);\n", "case_type": "block"}
{"generated_code": "plies the settings to the element.\n   */\n  @Override\n  public void apply( final Element element, final ElementStyleSheet styleSheet ) {\n    element.setAttribute( AttributeNames.STYLE_KEY, SparklineStyleKeys.PIE_SPARKLINE );\n    element.setAttribute( SparklineAttributeNames.FIELD_NAME, fieldname );\n    element.setAttribute( SparklineAttributeNames.HIGH_SLICE, highSlice );\n    element.setAttribute( SparklineAttributeNames.LOW_SLICE, lowSlice );\n    element.setAttribute( SparklineAttributeNames.MEDIUM_SLICE, mediumSlice );\n    element.setAttribute( SparklineAttributeNames.START_ANGLE, startAngle );\n    element.setAttribute( SparklineAttributeNames.COUNTER_CLOCKWISE, counterClockwise );\n    element.setAttribute( SparklineAttributeNames.HIGH_COLOR, highColor );\n    element.setAttribute( SparklineAttributeNames.LOW_COLOR, lowColor );\n    element.setAttribute( SparklineAttribute", "reference_code": "    if ( startAngle != null ) {\n      element.setAttribute( SparklineAttributeNames.NAMESPACE, SparklineAttributeNames.START_ANGLE, startAngle );\n    }\n    if ( lowSlice != null ) {\n", "case_type": "block"}
{"generated_code": "import io.tracee.Tracee;\nimport io.tracee.TraceeBackend;\nimport io.tracee.TraceeConstants;\nimport io.tracee.TraceeFilterConfiguration;\nimport io.tracee.TraceeFilterConfiguration.Profile;\nimport io.tracee.TraceeFilterConfiguration.TraceeFilterConfigurationBuilder;\nimport io.tracee.TraceeFilterConfiguration.TraceeFilterConfigurationBuilder.TraceeFilterConfigurationBuilderBuilder;\nimport io.tracee.TraceeFilterConfiguration.TraceeFilterConfigurationBuilder.TraceeFilterConfigurationBuilderBuilder.TraceeFilterConfigurationBuilderBuilderBuilder;\nimport io.tracee.TraceeFilterConfiguration.TraceeFilterConfigurationBuilder.TraceeFilterConfigurationBuilderBuilderBuilder.TraceeFilterConfigurationBuilderBuilderBuilderBuilder;\nimport io.tracee.TraceeFilterConfiguration.TraceeFilterConfigurationBuilder.TraceeFilterConfigurationBuilderBuilderBuilderBuilderBuilder;\nimport io.tracee.TraceeFilterConfiguration.TraceeFilterConfigurationBuilder.TraceeFilterConfigurationBuilderBuilderBuilderBuilderBuilderBuilder;\nimport io.tracee.TraceeFilterConfiguration.TraceeFilterConfigurationBuilder.TraceeFilterConfigurationBuilderBuilderBuilderBuilderBuilderBuilderBuilder;", "reference_code": "import io.tracee.Tracee;\n", "case_type": "block"}
{"generated_code": "        catch (PatternSyntaxException e)\n        {\n            this.regex = DEFAULT_REGEX;\n            this.pattern = Pattern.compile(regex);\n            addError(name, PROP_REGEX, properties.getProperty(PROP_REGEX));\n        }\n        catch (NumberFormatException e)\n        {\n            this.regex = DEFAULT_REGEX;\n            this.pattern = Pattern.compile(regex);\n            addError(name, PROP_REGEX, properties.getProperty(PROP_REGEX));\n        }\n        catch (NullPointerException e)\n        {\n            this.regex = DEFAULT_REGEX;\n            this.pattern = Pattern.compile(regex);\n            addError(name, PROP_REGEX, properties.getProperty(PROP_REGEX));\n        }\n        catch (IllegalArgumentException e)\n        {\n            this.regex = DEFAULT_REGEX;\n            this.pattern = Pattern.compile(regex);\n            addError(name, PROP_REGEX, properties.getProperty(PROP_REGEX));\n        }\n        catch (IllegalStateException e", "reference_code": "        catch (PatternSyntaxException e)\n", "case_type": "block"}
{"generated_code": "import org.hibernate.ogm.logging.LoggerFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.helpers.MethodHandles;\n\nimport org.slf4j.LoggerFactory;\n\nimport org.slf4j.Logger;\nimport org.slf4j.helpers.MethodHandles;\n\nimport org.slf4j.LoggerFactory;\n\nimport org.slf4j.Logger;\nimport org.slf4j.helpers.MethodHandles;\n\nimport org.slf4j.LoggerFactory;\n\nimport org.slf4j.Logger;\nimport org.slf4j.helpers.MethodHandles;\n\nimport org.slf4j.LoggerFactory;\n\nimport org.slf4j.Logger;\nimport org.slf4j.helpers.MethodHandles;\n\nimport org.slf4j.LoggerFactory;\n\nimport org.slf4j.Logger;\nimport org.slf4j.helpers.MethodHandles;\n\nimport org.slf4j.", "reference_code": "import org.hibernate.ogm.util.impl.Log;\nimport org.hibernate.ogm.util.impl.LoggerFactory;\nimport java.lang.invoke.MethodHandles;\n\n", "case_type": "block"}
{"generated_code": " null        private int _id;\n    private String project_id;\n    private long updated_at;\n    private String project_name;\n\n    @SuppressWarnings(\"unused\")\n    private static void closeCursor(Cursor cursor) {\n        if (cursor != null && !cursor.isClosed()) {\n            cursor.close();\n        }\n    }\n\n    private String version_name;\n    private String version_code;\n    private String version_desc;\n    private String version_url;\n    private String version_type;\n    private String version_date;\n    private String version_size;\n    private String version_md5;\n    private String version_sha1;\n    private String version_sha256;\n    private String version_sha512;\n    private String version_sha1_md5;\n    private String version_sha1_sha256;\n    private String version_sha1_sha512;\n    private String version_sha256_sha512;\n    private String version_sha1_sha256_sha512", "reference_code": "    private int _id;\n    private String project_id;\n    private long updated_at;\n    private String project_name;\n", "case_type": "block"}
{"generated_code": "add(newColumnDesc);\n                    tableParameters.put(newTableDesc, values.toArray(new String[values.size()]));\n                }\n            }\n        }\n    }\n\n    /**\n     * @return the metadata for tables in the result set\n     */\n    public abstract List<TapSelectItem> getTableList();\n\n    /**\n     * @return the metadata for columns in the result set\n     */\n    public abstract List<TapSelectItem>    {\n            List<TableDesc> tableDescs = schemaDesc.getTableDescs();\n            for (TableDesc tableDesc : tableDescs)\n            {\n                // Skip empty tables.\n                if (tableDesc.getTableName() == null || tableDesc.getTableName().isEmpty())\n                    continue;\n\n                // Check if the paramList contains the fully qualified table name.\n                List<String> values = ParameterUtil.findParameterValues(tableDesc.getTableName(), job.getParameterList());\n                if (values == null)\n                    continue;\n\n                // Create a new TableDesc and add with the values to the tableParameters", "reference_code": "            if (schemaDesc.getTableDescs() == null || schemaDesc.getTableDescs().isEmpty())\n                continue;\n\n            // For each schema get the list of tables.\n            for (TableDesc tableDesc : schemaDesc.getTableDescs())\n", "case_type": "block"}
{"generated_code": "    void onLowMemory();\n    void onTrimMemory(int level, FileDescriptor fd);\n    void onTrimMemory(int level, FileDescriptor fd, int size);\n    void onTrimMemory(int level, FileDescriptor fd, int size, int maxSize);\n\n    /*\n     * Methods to be called by the Launcher.\n     */\n    void onApplicationStart();\n    void onApplicationStop();\n    void onApplicationDestroy();\n    void onApplicationPause();\n    void onApplicationResume();\n    void onApplicationCreate();\n    void onApplicationDestroyed();\n    void onApplicationPaused();\n    void onApplicationResumed();\n    void onApplicationCreated();\n    void onApplicationStarted();\n    void onApplicationStopped();\n    void onApplicationFocusChanged(boolean hasFocus);\n    void onApplicationFocusChanged(boolean hasFocus, boolean wasFocused);\n    void onApplicationFocusChanged(boolean hasFocus, boolean wasFocused, boolean wasActive);\n    void onApplicationFocusChanged(boolean hasFocus, boolean wasFocused, boolean wasActive, boolean wasVisible);\n    void on", "reference_code": "\n    /*\n     * Extension points for providing custom behavior on certain user interactions.\n     */\n    void onLauncherProviderChange();\n", "case_type": "block"}
{"generated_code": "        }\n       \n    private XxlRegistryServiceRegistry serviceRegistry;\n\n    public ConsumerRegistryHelper(XxlRegistryServiceRegistry serviceRegistry) {\n        super();\n\n        // init\n        this.serviceRegistry = serviceRegistry;\n    }\n\n    public XxlRegistryServiceRegistry getServiceRegistry() {\n        return serviceRegistry;\n    }\n\n    public void setServiceRegistry(XxlRegistryServiceRegistry serviceRegistry) {\n\n        // init\n        this.serviceRegistry = serviceRegistry;\n    }\n\n    public void setServiceRegistry(XxlRegistryServiceRegistry serviceRegistry, String registryKey, String registryVal) {\n\n        // init\n        this.serviceRegistry = serviceRegistry;\n    }\n\n    public void setServiceRegistry(XxlRegistryServiceRegistry serviceRegistry, String registryKey, String registryValPrefix, String registryVal) {\n\n        // init\n        this.serviceRegistry = serviceRegistry;\n    }\n\n    public void setServiceRegistry(XxlRegistryServiceRegistry serviceRegistry, String registryKey, String registryValPrefix, String registryVal, String registryValPrefix2, String registryVal2) {", "reference_code": "    private XxlRegistryServiceRegistry serviceRegistry;\n    public ConsumerRegistryHelper(XxlRegistryServiceRegistry serviceRegistry) {\n", "case_type": "block"}
{"generated_code": "\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\nimport static org.assertj.core.api.Strings.strings;\nimport static org.assertj.core.api.Strings.stringsWithCaseInsensitiveComparisonStrategy;\nimport static org.assertj.core.api.Strings.stringsWithCustomComparisonStrategy;\nimport static org.assertj.core.api.Strings.stringsWithCustomComparisonStrategyAndIgnoreCase;\nimport static org.assertj.core.api.Strings.stringsWithCustomComparisonStrategyAndIgnoreCaseAndCaseInsensitive;\nimport static org.assertj.core.api.Strings.stringsWithCustomComparisonStrategyAndIgnoreCaseAndIgnoreCase;\nimport static org.assertj.core.api.Strings.stringsWithCustomComparisonStrategyAndIgnoreCaseAndIgnoreCaseAndCaseInsensitive;\nimport static org.assertj.core.api.Strings.stringsWithCustomComparisonStrategyAndIgnoreCaseAndIgnoreCaseAndCaseInsensitiveAndCaseInsensitive;\nimport static org.assertj.core.api.Strings.stringsWithCustomComparisonStrategyAndIgnoreCaseAndIgnoreCaseAndCaseIns", "reference_code": "\nimport static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n", "case_type": "block"}
{"generated_code": "        this.localNode = localNode;\n        this.host = host;\n        this.port = port;\n    }\n\n    @JsonIgnore\n    @Override\n    public String getId() {\n        return localNode;\n    }\n\n    @JsonIgnore\n    @Override\n    public String getHostName() {\n        return host;\n    }\n\n    @JsonIgnore\n    @Override\n    public String getFullyQualifiedHostName() {\n        return host;\n    }\n\n    @JsonIgnore\n    @Override\n    public String getFullyQualifiedDomainName() {\n        return host;\n    }\n\n    @JsonIgnore\n    @Override\n    public String getFullyQualifiedDnsName() {\n        return host;\n    }\n\n    @JsonIgnore\n    @Override\n    public String getFullyQualifiedNetAddress() {\n        return host;\n    }\n\n    @JsonIgnore\n    @Override\n    public String getFullyQualifiedUniqueAddress() {\n        return host;\n    }\n\n    @JsonIgnore\n    @Override\n   ", "reference_code": "        this.host = host;\n        this.port = port;\n        this.localNode = localNode;\n    }\n\n", "case_type": "block"}
{"generated_code": ".reteoo.PropagationContext#getEntryPoint()\n     */\n    public EntryPoint getEntryPoint() {\n        return this.entryPoint;\n    }\n\n    public int getActiveActivations() {\n        return this.activeActivations;\n    }\n\n    public int getDormantActivations() {\n        return this.dormantActivations;\n    }\n\n    public void setActiveActivations(final int activeActivations) {\n        this.activeActivations = activeActivations;\n    }\n\n    public void setDormantActivations(final int dormantActivations) {\n        this.dormantActivations = dormantActivations;\n    }\n\n    public void setEntryPoint(final EntryPoint entryPoint) {\n        this.entryPoint = entryPoint;\n    }\n\n    public void setFactHandleOrigin(final InternalFactHandle factHandle) {\n        this.factHandle = factHandle;\n    }\n\n    public void setLeftTupleOrigin(final LeftTuple leftTuple) {\n        this.leftTuple = leftTuple;\n    }\n\n   ", "reference_code": "    }\n\n    public int getDormantActivations() {\n        return this.dormantActivations;\n", "case_type": "block"}
{"generated_code": "public class RandomString {\n\n    public static final String DEFAULT_STRING = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n    public static final int DEFAULT_LENGTH = 10;\n\n    public static final String DEFAULT_STRING_RANDOM = get(DEFAULT_LENGTH);\n    public static final int DEFAULT_LENGTH_RANDOM = DEFAULT_LENGTH;\n\n    public static final String DEFAULT_STRING_RANDOM_SHORT = get(1);\n    public static final int DEFAULT_LENGTH_RANDOM_SHORT = DEFAULT_LENGTH - 1;\n\n    public static final String DEFAULT_STRING_RANDOM_LONG = get(DEFAULT_LENGTH + 1);\n    public static final int DEFAULT_LENGTH_RANDOM_LONG = DEFAULT_LENGTH + 1;\n\n    public static final String DEFAULT_STRING_RANDOM_LONGER = get(DEFAULT_LENGTH + 2);\n    public static final int DEFAULT_LENGTH_RAND", "reference_code": "public class RandomString {\n", "case_type": "block"}
{"generated_code": "public class MoodleRestModAssignException extends Exception {\n\n    private static final long serialVersionUID = 1L;\n\n    // Constructors\n\n    /**\n     * Default constructor\n     */\n\n    /**\n     * Constructor with message\n     * @param msg\n     */\n\n    // Methods\n\n    // Getters and setters\n\n    // Other methods\n\n    // Attributes\n\n    // Constants\n\n    // Inner classes\n\n    // Static initializers\n\n    // Instance variables\n\n    // Constructor\n\n    /**\n     * Default constructor\n     */\n\n    /**\n     * Constructor with message\n     * @param msg\n     */\n\n    // Static methods\n\n    // Inner classes\n\n    // Static initializers\n\n    // Instance variables\n\n    // Constructor\n\n    /**\n     * Default constructor\n     */\n\n    /**\n     * Constructor with message\n     * @param msg\n     */\n\n    // Static methods\n\n    // Inner classes\n\n    // Static initializers\n\n    // Instance variables\n\n   ", "reference_code": "public class MoodleRestModAssignException extends MoodleRestException {\n\n", "case_type": "block"}
{"generated_code": "    @Before\n    public void setUp() throws Exception {\n\n        // TODO Auto-generated method stub\n\n    }\n\n    public ConventionsDependentStrategyTest() {\n        super();\n    }\n\n    public void setUpTest() {\n\n        // TODO Auto-generated method stub\n\n    }\n\n    public void tearDownTest() {\n\n        // TODO Auto-generated method stub\n\n    }\n\n    public void testConventionsDependentStrategy() {\n\n        // TODO Auto-generated method stub\n\n    }\n\n    public void setUp() {\n\n        // TODO Auto-generated method stub\n\n    }\n\n    public void tearDown() {\n\n        // TODO Auto-generated method stub\n\n    }\n\n    public void setUpTest() {\n\n        // TODO Auto-generated method stub\n\n    }\n\n    public void tearDownTest() {\n\n        // TODO Auto-generated method stub\n\n    }\n\n    public void testConventionsDependentStrategy() {\n\n        // TODO Auto-generated method stub\n\n    }\n\n    public void setUp() {\n\n        // TODO", "reference_code": "    @Before\n    public void setUp() throws Exception {\n", "case_type": "block"}
{"generated_code": "import org.apache.commons.cli.Command;\nimport org.pescuma.buildhealth.cli.BaseBuildHealthCliCommand;\nimport org.pescuma.buildhealth.cli.commands.add.staticanalysis.inspectcode.InspectCodeExtractorCommand;\nimport org.pescuma.buildhealth.cli.commands.add.staticanalysis.inspectcode.InspectCodeExtractorCommand.InspectCodeExtractorType;\nimport org.pescuma.buildhealth.cli.commands.add.staticanalysis.inspectcode.InspectCodeExtractorCommand.InspectCodeExtractorType.INSPECTCODE;\nimport org.pescuma.buildhealth.cli.commands.add.staticanalysis.inspectcode.InspectCodeExtractorCommand.InspectCodeExtractorType.RESULTS;\nimport org.pescuma.buildhealth.cli.commands.add.staticanalysis.inspectcode.InspectCodeExtractorCommand.InspectCodeExtractorType.RESULTS_AND_INSPECTCODE;\nimport org.pescuma.buildhealth.cli.commands.add.static", "reference_code": "import io.airlift.airline.Command;\n", "case_type": "block"}
{"generated_code": "    public void printResult()\n    {\n        double precision = (double)correctTotalNum / (double)resultTotalNum;\n\n        if (Double.isNaN(precision)) precision = 0.0;\n\n        System.out.println(\"Precision:\"+precision);\n\n        //recall\n\n        precision = (double)correctTotalNum / (double)resultTotalNum;\n\n        if (Double.isNaN(precision)) precision = 0.0;\n\n        System.out.println(\"Recall:\"+precision);\n\n        //fscore\n\n        precision = (double)correctTotalNum / (double)resultTotalNum;\n\n        if (Double.isNaN(precision)) precision = 0.0;\n\n        recall = (double)correctTotalNum / (double)goldTotalNum;\n\n        if (Double.isNaN(precision)) precision = 0.0;\n\n        System.out.println(\"F score:\"+precision);\n\n        //fscore\n\n        precision = (double)correctTotalNum / (double)resultTotalNum;\n\n        if (Double.", "reference_code": "\n    public void PrintEvalResult()\n    {\n        double precision = (double)correctTotalNum / (double)resultTotalNum;\n", "case_type": "block"}
{"generated_code": "        log.pri1(LoggingInterface.INIT_END, THIS_COMPONENT);\n\n    }\n\n    @Override\n    public void init_start() {\n        driveTask.init_start();\n        log.pri1(LoggingInterface.INIT_START, THIS_COMPONENT);\n\n    }\n\n    @Override\n    public void init_stop() {\n        driveTask.init_stop();\n        log.pri1(LoggingInterface.INIT_STOP, THIS_COMPONENT);\n\n    }\n\n    @Override\n    public void init_pause() {\n        driveTask.init_pause();\n        log.pri1(LoggingInterface.INIT_PAUSE, THIS_COMPONENT);\n\n    }\n\n    @Override\n    public void init_resume() {\n        driveTask.init_resume();\n        log.pri1(LoggingInterface.INIT_RESUME, THIS_COMPONENT);\n\n    }\n\n    @Override\n    public void init_suspend() {\n        driveTask.init_suspend();\n       ", "reference_code": "        // Initialize the subsystem and associated task\n        drive.init();\n        driveTask.init();\n\n        log.pri1(LoggingInterface.INIT_END, THIS_COMPONENT);\n", "case_type": "block"}
{"generated_code": "        protected boolean access(@SuppressWarnings(\"unused\") TruffleObject receiver, @SuppressWarnings(\"unused\") Object identifier) {\n            return false;\n        }\n    }\n\n    @CanResolve\n    public abstract static class IsRContextKeyInfo extends Node {\n        protected boolean access(@SuppressWarnings(\"unused\") TruffleObject receiver, @SuppressWarnings(\"unused\") Object identifier) {\n            return false;\n        }\n    }\n\n    @CanResolve\n    public abstract static class IsRContextKeyInfoNode extends Node {\n        protected boolean access(@SuppressWarnings(\"unused\") TruffleObject receiver, @SuppressWarnings(\"unused\") Object identifier) {\n            return false;\n        }\n    }\n\n    @CanResolve\n    public abstract static class IsRContextKeyInfoNodeKey extends Node {\n        protected boolean access(@SuppressWarnings(\"unused\") TruffleObject receiver, @SuppressWarnings(\"unused\") Object identifier) {\n            return false;\n        }\n    }\n\n    @CanResolve", "reference_code": "\n        protected static boolean test(TruffleObject receiver) {\n            return receiver instanceof RContext;\n        }\n    }\n", "case_type": "block"}
{"generated_code": ".put(\"realms\", realmsTable);\n        }\n        return stanzaTable;\n    }\n\n    private static Hashtable<String, Object> convertRealmConfigs(\n            Hashtable<String, ?> configs) {\n        // convert SCDynamicStore realm structure to Java realm structure\n\n        // create a new Hashtable to hold the realmTable\n        // the key is the realm name, the value is the realmMap\n        // the realmMap contains the kdc and admin_server\n        // the kdc is a Vector<String>\n        // the admin_server is a Vector<String>\n        // the realmMap is a Hashtable<String, Vector<String>>\n\n        // create a new Hashtable to hold the realmTable\n        // the key is the realm name, the value is the realmMap\n        // the realmMap contains the kdc and admin_server\n        // the kdc is a Vector<String>\n        // the admin_server is a Vector<String>\n        // the realmMap is a Hashtable<String, Vector<String>>\n\n        // create a new Hasht", "reference_code": "     */\n    @SuppressWarnings(\"unchecked\")\n    private static Hashtable<String, Object>\n            convertRealmConfigs(Hashtable<String, ?> configs) {\n", "case_type": "block"}
{"generated_code": "        super.setParentInstance(parent);\n    }\n    public TreeNode getChild(int index)\n    {\n        return (IVContrast)super.getChildInstance(index);\n    }\n    public int getChildCount()\n    {\n        return super.getChildInstances().size();\n    }\n    public TreeNode getChild(String name)\n    {\n        return (IVContrast)super.getChildInstance(name);\n    }\n    public TreeNode getChild(Integer id)\n    {\n        return (IVContrast)super.getChildInstance(id);\n    }\n    public TreeNode getChild(ims.framework.IItem item)\n    {\n        return (IVContrast)super.getChildInstance(item);\n    }\n    public TreeNode getChild(ims.framework.IItemCollection itemCollection)\n    {\n        return (IVContrast)super.getChildInstance(itemCollection);\n    }\n    public TreeNode getChild(Object object)\n    {\n        return (IVContrast)super.getChildInstance(object);\n    }\n", "reference_code": "        super.setParentInstance(parent);\n", "case_type": "block"}
{"generated_code": "        return result;\n    }\n\n    @Override\n    String toString() {\n        return toSourceString();\n    }\n\n    @Override\n    String toString(String indent) {\n        return indent + toSourceString();\n    }\n\n    @Override\n    String toString(String indent, boolean newLine) {\n        return indent + toSourceString() + (newLine ? \"\\n\" : \"\");\n    }\n\n    @Override\n    String toString(String indent, boolean newLine, boolean newLine2) {\n        return indent + toSourceString() + (newLine2 ? \"\\n\" : \"\") + (newLine ? \"\\n\" : \"\");\n    }\n\n    @Override\n    String toString(String indent, boolean newLine, boolean newLine2, boolean newLine3) {\n        return indent + toSourceString() + (newLine3 ? \"\\n\" : \"\") + (newLine2 ? \"\\n\" : \"\") + (newLine ? \"\\n\" : \"\");\n    }\n\n    @Override\n    String toString(String indent,", "reference_code": "\n        return result;\n    }\n\n", "case_type": "block"}
{"generated_code": "public class BoletoItauSimples extends Boleto {\n\n  @Override\n  public Banco getBanco() {\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-generated method stub\n\n    // TODO Auto-", "reference_code": "class ContaBancariaFalso extends ContaBancaria {\n\n  @Override\n  public Banco getBanco() {\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Override\n    public String getElementName() {\n        return \"member\";\n    }\n\n    @Override\n    public String getElementType() {\n        return \"member\";\n    }\n\n    @Override\n    public String getElementTypeName() {\n        return \"member\";\n    }\n\n    @Override\n    public String getElementTypeNamespace() {\n        return \"http://www.cyclos.org/schema/members\";\n    }\n\n    @Override\n    public String getElementTypeNamespaceURI() {\n        return \"http://www.cyclos.org/schema/members\";\n    }\n\n    @Override\n    public String getElementTypePrefix() {\n        return \"member\";\n    }\n\n    @Override\n    public String getElementTypePrefixURI() {\n        return \"http://www.cyclos.org/schema/members\";\n    }\n\n    @Override\n    public String getElementTypeSchemaLocation() {\n        return \"http://www.cyclos.org/schema/members/1.0.0 http://www.cyclos.org/schema/members/1.", "reference_code": "    }\n", "case_type": "block"}
{"generated_code": "ATE_DEGREE;\n    }\n\n    public void draw(Canvas canvas){\n        canvas.drawArc(percentRectF, 0, unitDegree, true, paint);\n        canvas.drawArc(splitRectF, 0, unitDegree, true, selectPaint);\n        canvas.drawBitmap(bmp, 0, 0, null);\n    }\n\n    public void setUnitDegree(float unitDegree) {\n        this.unitDegree = unitDegree;\n    }\n\n    public void setPercent(float percent){\n        this.unitDegree = percent * unitDegree;\n    }\n\n    public void setSplit(int split){\n        SPLIT = split;\n    }\n\n    public        selectPaint.setColor(Color.parseColor(selectColor));\n        selectPaint.setStrokeWidth(stroke_w);\n        selectPaint.setStyle(Paint.Style.STROKE);\n    }\n\n    private void initPercent(String selectColor, String fadeColor) {\n        paint.", "reference_code": "        selectPaint.setColor(Color.parseColor(selectColor));\n        selectPaint.setStrokeWidth(smaller_stroke_w);\n        selectPaint.setStyle(Paint.Style.STROKE);\n\n", "case_type": "block"}
{"generated_code": "List<File> files) throws IOException\n    {\n        boolean bVal = true;\n        for ( int i = 0; i < files.size(); ++i )\n        {\n            File file = files.get(i);\n            bVal = delete(file);\n            if (bVal)\n            {\n                if (logger_.isDebugEnabled())\n                  logger_.debug(\"Deleted file \" + file.getName());\n                files.remove(i);\n            }\n        }\n    }\n\n    public static String formatSize(long size)\n    {\n        if (size >= tb_)\n            return df_.format(size/tb_) + \"TB\";\n        if (size >= gb_)\n            return df_.format(size/gb_) + \"GB\";\n        if (size >= mb_)\n            return df_.format(size/mb_) + \"MB\";\n        if (size >= kb_)\n            return df_.format(size/kb_) + \"KB\";\n        return size + \"B\";\n    }\n\n    public static String formatSize(long size, String unit)\n    {\n        if (", "reference_code": "        {\n            d = value / kb_;\n            String val = df_.format(d);\n            return val + \" KB\";\n        }\n        else\n", "case_type": "block"}
{"generated_code": "import org.ansj.splitWord.IndexAnalysis;\nimport org.ansj.splitWord.ToAnalysis;\nimport org.ansj.splitWord.analysis.IndexAnalysis;\nimport org.ansj.splitWord.analysis.ToAnalysis;\nimport org.ansj.splitWord.analysis.ToAnalysis2;\nimport org.ansj.splitWord.analysis.ToAnalysis3;\nimport org.ansj.splitWord.analysis.ToAnalysis4;\nimport org.ansj.splitWord.analysis.ToAnalysis5;\nimport org.ansj.splitWord.analysis.ToAnalysis6;\nimport org.ansj.splitWord.analysis.ToAnalysis7;\nimport org.ansj.splitWord.analysis.ToAnalysis8;\nimport org.ansj.splitWord.analysis.ToAnalysis9;\nimport org.ansj.splitWord.analysis.ToAnalysis10;\nimport org.ansj.splitWord.analysis.ToAnalysis11;\nimport org.ansj.splitWord.analysis.ToAnalysis12;\nimport org.ansj.splitWord.analysis.ToAnalysis13;\nimport org.ans", "reference_code": "import org.ansj.splitWord.IndexAnalysis;\n", "case_type": "block"}
{"generated_code": "    public void putOtherTextParam(String key, String value) {\n        if (this.udfParams == null) {\n            this.udfParams = new TaobaoHashMap();\n        }\n        this.udfParams.put(key, value);\n    }\n\n    public void putAllTextParams(Map<String, String> txtParams) {\n        this.udfParams.putAll(txtParams);\n    }\n\n    public Map<String, String> getAllTextParams() {\n        return this.udfParams;\n    }\n\n    public void putOtherTextParam(String key, Object value) {\n        if (this.udfParams == null) {\n            this.udfParams = new TaobaoHashMap();\n        }\n\n        if (value instanceof String) {\n            this.udfParams.put(key, value.toString());\n        }\n        else {\n            this.udfParams.put(key, value.toString());\n        }\n    }\n\n    public void putAllTextParams(Map<String, Object> txtParams) {\n        this.ud", "reference_code": "    public void putOtherTextParam(String key, String value) {\n        if(this.udfParams == null) {\n            this.udfParams = new TaobaoHashMap();\n        }\n", "case_type": "block"}
{"generated_code": "CLOSE);\n            fr        protected Client multi;\n    protected JTextArea toSend = new JTextArea();\n    public ServerTextArea() {\n        this(null);\n    }\n\n    public ServerTextArea(Client multi) {\n        this(multi);\n    }\n\n    public ServerTextArea(Client multi,String text) {\n        this(multi);\n        toSend.setText(text);\n    }\n\n    public ServerTextArea(Client multi,String text,int port,String host) {\n        this(multi,text);\n        send(text,port,host);\n    }\n\n    public ServerTextArea(Client multi,String text,int port,String host,String ip) {\n        this(multi,text,port,host);\n        send(text,port,host);\n    }\n\n    public ServerTextArea(Client multi,String text,int port,String host,String ip,String ip) {\n        this(multi,text    public ServerTextArea(Client multi,String text,int port,String host,String ip,String ip) {\n        this(multi,text,port", "reference_code": "    private JTextArea toSend = new JTextArea();\n\n    private Client multi=null;\n", "case_type": "block"}
{"generated_code": "        this.appId = appId;\n        this.name = name;\n        this.description = description;\n        this.photoId = photoId;\n    }\n\n    Application(String name, String description, int photoId) {\n        this.appId = -1;\n        this.name = name;\n        this.description = description;\n        this.photoId = photoId;\n    }\n\n    Application(int appId, String name, String description) {\n        this.appId = appId;\n        this.name = name;\n        this.description = description;\n        this.photoId = -1;\n    }\n\n    Application(String name, String description) {\n        this.appId = -1;\n        this.name = name;\n        this.description = description;\n        this.photoId = -1;\n    }\n\n    Application(int appId, String name, String description, int photoId, String description2) {\n        this.appId = appId;\n        this.name = name;\n        this.description = description;\n        this.photoId =", "reference_code": "        this.appId = appId;\n", "case_type": "block"}
{"generated_code": "   * @param xOffset - the x offset of the character in screen space.\n   * @param yOffset - the y offset of the character in screen space.\n   * @param sizeX - the width of the character's quad in screen space.\n   * @param sizeY - the height of the character's quad in screen space.\n   * @param xAdvance - how far in pixels the cursor should advance after adding this character.\n   */\n  protected Character(int id, double xTextureCoord, double yTextureCoord, double xTexSize,\n      double yTexSize, double xOffset, double yOffset, double sizeX, double sizeY) {\n    this(id, xTextureCoord, yTextureCoord, xTexSize, yTexSize, xOffset, yOffset, sizeX, sizeY, 0);\n  }\n\n  /**\n   * @param id - the ASCII value of the character.\n   * @param xTextureCoord - the x texture coordinate for the top left corner of the character in the\n   *        texture atlas.\n   * @param yTextureCoord -", "reference_code": "   * @param xOffset - the x distance from the curser to the left edge of the character's quad.\n   * @param yOffset - the y distance from the curser to the top edge of the character's quad.\n", "case_type": "block"}
{"generated_code": "import java.util.Map;\n\npublic class UrlMapConverter extends AbstractConverter<Map<String, URL>, Map<String, String>> {\n\n    private final UrlConverter urlConverter = new UrlConverter();\n\n    public UrlMapConverter() {\n        super(Map.class, Map.class);\n    }\n\n    public UrlMapConverter(UrlConverter urlConverter) {\n        super(Map.class, Map.class);\n        this.urlConverter = urlConverter;\n    }\n\n    public UrlConverter getUrlConverter() {\n        return urlConverter;\n    }\n\n    public void setUrlConverter(UrlConverter urlConverter) {\n        this.urlConverter = urlConverter;\n    }\n\n    public String toString() {\n        return \"UrlMapConverter [urlConverter=\" + urlConverter + \"]\";\n    }\n\n    public int hashCode() {\n        final int prime = 31;\n        int result = super.hashCode();\n        result = prime * result + ((urlConverter == null) ? 0 : urlConverter.hashCode());\n        return result;\n    }\n\n", "reference_code": "import java.util.Map;\n\npublic class URLMapConverter implements Converter<Map<String, URL>, Map<String, String>> {\n\n    private final URLConverter urlConverter = new URLConverter();\n", "case_type": "block"}
{"generated_code": "                Thread.sleep(100);\n            } catch (final InterruptedException e) {\n                // Ignore\n            }\n        }\n\n        // Check if any robot has not stopped yet\n        // (This is a bit of a hack, but it works)\n        // TODO: Find a better way to do this\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not thread-safe\n        // TODO: This is not", "reference_code": "                Thread.sleep(5);\n            } catch (final InterruptedException e) {\n                // Just ignore the interrupt and continue\n            }\n        }\n\n", "case_type": "block"}
{"generated_code": "    * @param command the command to map\n     * @return the string or null if no mapping found\n     * @see org.openhab.core.types.Command\n     * @see org.openhab.core.types.State\n     * @see org.openhab.core.library.types.OnOffType\n     * @see org.openhab.core.library.types.OpenClosedType\n     * @see org.openhab.core.library.types.UpDownType\n     * @see org.openhab.core.library.types.RewindFastforwardType\n     * @see org.openhab.core.library.types.StopMoveType\n     * @see org.openhab.core.library.types.PlayPauseType\n     * @see org.openhab.core.library.types.NextPreviousType\n     * @see org.openhab.core.library.types.IncreaseDecreaseType\n     * @see org.openhab.core.library.types.ColorItemConverter.ColorMode\n     * @see org.openhab.core.library.types.ColorItemConverter\n    ", "reference_code": "     * @param command the command to map\n     * @return a string or null if no mapping found\n", "case_type": "block"}
{"generated_code": "        itemCost.setText(item.getCost());\n        itemPrice.setText(item.getPrice());\n\n        photo.setOnClickListener(new PhotoClickListener(item));\n\n        photo.setScaleType(NetworkImageView.ScaleType.FIT_XY);\n        photo.setDefaultImageResId(R.drawable.ic_launcher);\n        photo.setErrorImageResId(R.drawable.ic_launcher);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.setTag(item);\n\n        photo.", "reference_code": "        itemPrice.setText(item.getPrice() + \" | \" + item.getQuantity() + \" шт.\");\n        itemCost.setText(String.valueOf((item.getPrice()==null?0.d:item.getPrice()) * Double.parseDouble(item.getQuantity()))); //FIXME: wow, such quantity, so string \n", "case_type": "block"}
{"generated_code": "public class ConsulCatalogProducerInvokeOnHeaderStrategy implements InvokeOnHeaderStrategy {\n\n    public Object invokeOnHeader(String key, Exchange exchange, AsyncCallback callback, Object obj) throws Exception {\n        if (!(obj instanceof org.apache.camel.component.consul.endpoint.ConsulCatalogProducer)) return null;\n\n        //noinspection unchecked\n\n        //noinspection rawtypes\n        if (key == null || key.length() == 0) return null;\n\n        //noinspection unchecked\n\n        //noinspection rawtypes\n        if (!(obj instanceof org.apache.camel.component.consul.endpoint.ConsulCatalogProducer)) return null;\n\n        //noinspection unchecked\n\n        //noinspection rawtypes\n        if (!(obj instanceof org.apache.camel.component.consul.endpoint.ConsulCatalogProducer)) return null;\n\n        //noinspection unchecked\n\n        //noinspection rawtypes\n        if (!(obj instanceof org.apache.camel.component.consul.endpoint.Consul", "reference_code": "public class ConsulCatalogProducerInvokeOnHeaderFactory implements InvokeOnHeaderStrategy {\n\n    @Override\n    public Object invoke(Object obj, String key, Exchange exchange, AsyncCallback callback) throws Exception {\n", "case_type": "block"}
{"generated_code": "   */\n  private void finish() throws IOException {\n    if (finished) {\n      return;\n    }\n    finished = true;\n    sum.finish();\n    sum.writeValue(barray, 0, true);\n    sum.writeValue(barray, 0, false);\n    out.write (barray, 0, sum.getChecksumSize());\n  }\n\n  /**\n   * Write bytes to the stream.\n   */\n  @Override\n  public void write(byte[] b) throws IOException {\n    sum.update(b, 0,b.length);\n    sum.finish();\n    sum.writeValue(barray, 0, true);\n    sum.writeValue(barray, 0, false);\n    out.write(b,0,b.length);\n  }\n\n  /**\n   * Write bytes to the stream.\n   */\n  @Override\n  public void write(byte[] b, int off, int len) throws IOException {\n    sum.update(b, off,len);\n    sum.finish();\n    sum.write", "reference_code": "   */\n  public void finish() throws IOException {\n    if (finished) {\n      return;\n    }\n    finished = true;\n", "case_type": "block"}
{"generated_code": "import org.springframework.transaction.annotation.EnableTransactionManagement;\n\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\n@SuppressWarnings( \"unused\" )\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n", "reference_code": "import org.springframework.transaction.annotation.EnableTransactionManagement;\n", "case_type": "block"}
{"generated_code": "Title.setText(team.getShortName());\n    }\n\n    @Override\n    public void onOffsetChanged(AppBarLayout appBarLayout, int offset) {\n        if (offset > mMaxScrollSize / 2) {\n            mIsLogoShown = false;\n        } else {\n            mIsLogoShown = true;\n        }\n        if (mIsLogoShown) {\n            mLogo.setVisibility(View.VISIBLE);\n                   }\n        }\n    }\n\n    private class TabsAdapter extends FragmentPagerAdapter {\n\n        public TabsAdapter(FragmentManager fm) {\n            super(fm);\n        }\n\n        @Override\n        public Fragment getItem(int position) {\n            switch (position) {\n                case 0:\n                    return new TeamFragment();\n                case 1:\n                    return new PlayersFragment();\n                case 2:\n                    return new FixturesFragment();\n                default:\n                    return null;\n            }\n        }\n\n        @Override\n        public int getCount() {\n            return ", "reference_code": "        }\n    }\n", "case_type": "block"}
{"generated_code": "        return m_protocolName;\n    }\n\n    public void setProtocolName(String protocolName, byte protocolVersion) {\n        this.m_protocolName = protocolName;\n        this.m_procotolVersion = protocolVersion;\n    }\n\n    public String getProtocolName() {\n        return m_protocolName;\n    }\n\n    public void setProtocolName(String protocolName) {\n        this.m_protocolName = protocolName;\n    }\n\n    public String getProtocolName(String protocolName, byte protocolVersion) {\n        return m_protocolName;\n    }\n\n    public void setProtocolName(String protocolName, byte protocolVersion, boolean cleanSession) {\n        this.m_protocolName = protocolName;\n        this.m_procotolVersion = protocolVersion;\n        this.m_cleanSession = cleanSession;\n    }\n\n    public String getProtocolName(String protocolName, byte protocolVersion, boolean cleanSession,\n            boolean willFlag, byte willQos, boolean willRetain) {\n        return m_protocolName;\n    }\n\n    public void setProtocolName", "reference_code": "\n    public String getProtocolName() {\n        return m_protocolName;\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Override\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        super.onViewCreated(view, savedInstanceState);\n        ButterKnife.inject(this, getActivity());\n    }\n\n    @Override\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        super.onViewCreated(view, savedInstanceState);\n        ButterKnife.inject(this, getActivity());\n    }\n\n    @Override\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        super.onViewCreated(view, savedInstanceState);\n        ButterKnife.inject(this, getActivity());\n    }\n\n    @Override\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n        // Inflate the layout for this fragment\n        super.onViewCreated(view, savedInstanceState);\n        ButterKnife.inject(this,", "reference_code": "    }\n\n    @Override\n    public void onViewCreated(View view, Bundle savedInstanceState) {\n", "case_type": "block"}
{"generated_code": "    final int numThreads = 10;\n    final MemMapThread[] threads = new MemMapThread[numThreads];\n    for (int i = 0; i < numThreads; i++) {\n        MemMapThread t = new MemMapThread();\n        threads[i] = t;\n\n        // Start the thread\n        Thread t = new Thread(t);\n        threads[i].setName(\"Thread \" + i);\n        t.setName(\"Thread \" + i);\n\n        // Start the thread\n        t.setPriority(Thread.MAX_PRIORITY);\n        t.setDaemon(true);\n\n        // Start the thread\n        t.setPriority(Thread.MAX_PRIORITY);\n        t.setDaemon(true);\n\n        // Start the thread\n        t.setPriority(Thread.MAX_PRIORITY);\n        t.setDaemon(true);\n\n        // Start the thread\n        t.setPriority(Thread.MAX_PRIORITY);\n        t.setDaemon(true);\n\n        // Start the thread\n        t.setPriority", "reference_code": "    WindowsIPC winIPC = new WindowsIPC();\n\n    for (int i = 0; i < 100; i++) {\n        Thread t = new Thread(new MemMapThread());\n", "case_type": "block"}
{"generated_code": "    }\n\n    @BeforeTest\n    public void beforeTest(APIConnectionManager apiConnectionManager) {\n        String api = String.format(\"http://%s:%s/api/v1/\",\n                apiConnectionManager.getHost(),\n                apiConnectionManager.getPort());\n        System.out.println(\"API: \" + api);\n        System.out.println(\"Port: \" +\n                apiConnectionManager.getPort());\n        System.out.println(\"Host: \" +\n                apiConnectionManager.getHost());\n        System.out.println(\"User: \" +\n                apiConnectionManager.getUser());\n        System.out.println(\"Password: \" +\n                apiConnectionManager.getPassword());\n        System.out.println(\"Studio: \" +\n                apiConnectionManager.getHost() +\n                \":\" +\n                apiConnectionManager.getPort());\n        System.out.println(\"API: \" +\n                api +\n                \"Port: \" +\n                apiConnectionManager.getPort());\n        System.out.println(\"Host: \" +\n                apiConnectionManager.getHost() +\n                \"", "reference_code": "        APIConnectionManager apiConnectionManager = new APIConnectionManager();\n        JsonTester api = new JsonTester(apiConnectionManager.getProtocol(), apiConnectionManager.getHost(),\n", "case_type": "block"}
{"generated_code": "            public Bitmap getBitmap(String url) {\n                return mCache.get(url);\n            }\n\n        });\n        mImageLoader.setImageDownloader(new ImageDownloader(context));\n        mImageLoader.setImageListener(new ImageLoader.ImageListener() {\n            @Override\n            public void onResponse(ImageLoader.ImageContainer response, boolean isImmediate) {\n                // TODO Auto-generated method stub\n\n            }\n\n            @Override\n            public void onErrorResponse(ImageLoader.ImageContainer response, boolean isImmediate) {\n                // TODO Auto-generated method stub\n\n            }\n\n        });\n        mImageLoader.get(context.getString(R.string.url_image_1), new ImageLoader.ImageListener() {\n\n            @Override\n            public void onResponse(ImageLoader.ImageContainer response, boolean isImmediate) {\n                // TODO Auto-generated method stub\n\n            }\n\n            @Override\n            public void onErrorResponse(ImageLoader.ImageContainer response, boolean isImmediate) {\n                // TODO Auto-generated method stub\n\n            }\n\n        });", "reference_code": "            public Bitmap getBitmap(String url) {\n                Bitmap bitmap = mCache.get(url);\n\n                return bitmap;\n            }\n", "case_type": "block"}
{"generated_code": "    @Override\n    protected void doHealthCheck(final Builder builder) throws Exception {\n        try {\n            final In greet = feign.greet(service);\n            builder.up().\n                    withDetail(\"greet\", greet.getGreeting()).\n                    withDetail(\"name\", greet.getName()).\n                    withDetail(\"age\", greet.getAge()).\n                    withDetail(\"location\", greet.getLocation()).\n                    withDetail(\"time\", greet.getTime()).\n                    withDetail(\"date\", greet.getDate()).\n                    withDetail(\"random\", greet.getRandom()).\n                    withDetail(\"random-int\", greet.getRandomInt()).\n                    withDetail(\"random-long\", greet.getRandomLong()).\n                    withDetail(\"random-float\", greet.getRandomFloat()).\n                    withDetail(\"random-double\", greet.getRandomDouble()).\n                    withDetail(\"random-boolean\", greet.getRandomBoolean()).\n                    withDetail(\"random-string\", greet.getRandomString()).\n                    withDetail(\"random-object\", greet.getRandomObject()).\n                    withDetail(\"random-array\", greet.getRandomArray()).\n                    withDetail(\"random-", "reference_code": "    @Override\n    protected void doHealthCheck(final Builder builder)\n            throws Exception {\n        try {\n            feign.greet(In.builder().name(service).build());\n            builder.up().\n", "case_type": "block"}
{"generated_code": ") {\n            * @param factory CursorFactory 工厂\n     * @param version int 数据库版本\n     */\n    public DBHelper(Context context, String name, CursorFactory factory) {\n        this(context, name, factory, DB_VERSION);\n    }\n\n    /**\n     * 构造函数，用来打开或者新建数据库\n     * @param context\n     * @param name 数据库名字\n     * @param factory CursorFactory 工厂\n     * @param version int 数据库版本\n     */\n    public DBHelper(Context context, String name, CursorFactory factory, int version) {\n        this(context, name, factory, version);\n    }\n\n    /**\n     * 构造函数，用来打开或者新建数据库\n     * @param context\n     * @param name 数据库名字\n     * @param factory CursorFactory 工厂\n     * @param version int 数据库版本\n     */\n    public DBHelper(Context context, String name, CursorFactory factory, int version) {\n        this(context, name, factory, version);", "reference_code": "     * @param factory CursorFactory\n", "case_type": "block"}
{"generated_code": "#set( $symbol_escape = '\\' )\n#set( $import_tag = '@import' )\n\nimport static playn.core.PlayN.*;\n\nimport ${package}.core.${JavaGameClassName};\n\n@import ${package}.core.${JavaGameClassName};\n\n@import playn.core.PlayN;\n@import playn.scene.SceneGame;\n\n@import playn.core.Image;\n@import playn.core.Platform;\n@import playn.scene.ImageLayer;\n\n@import ${package}.core.${JavaGameClassName};\n\n@import playn.core.PlayN;\n@import playn.scene.SceneGame;\n\n@import playn.core.Image;\n@import playn.core.Platform;\n@import playn.scene.ImageLayer;\n\n@import ${package}.core.${JavaGameClassName};\n\n@import playn.core.PlayN;\n@import playn.scene.SceneGame;\n\n@import playn.core.Image;", "reference_code": "#set( $symbol_escape = '\\' )\n", "case_type": "block"}
{"generated_code": "    downloadOptions.setWorkspaceDir(Tests.WORKSPACE_DIR);\n    downloadOptions.setDownloadOptions(new ManualOperationParams());\n    downloadOptions.setDownloadOptions(downloadOptions.getDownloadOptions());\n\n    DownloadRunner.main(new String[] { \"download\", \"landsat8\", \"--workspace-dir\", Tests.WORKSPACE_DIR });\n\n    assertTrue(\"landsat8 directory exists\", new File(Tests.WORKSPACE_DIR + \"/landsat8\").isDirectory());\n    assertTrue(\"landsat8-scenes directory exists\", new File(Tests.WORKSPACE_DIR + \"/landsat8-scenes\").isDirectory());\n    assertTrue(\"landsat8-images directory exists\", new File(Tests.WORKSPACE_DIR + \"/landsat8-images\").isDirectory());\n    assertTrue(\"landsat8-scenes-cached directory exists\", new File(Tests.WORKSPACE_DIR + \"/landsat8-scenes-cached\").isDirectory());\n    assertTrue(\"landsat8-images-cached directory exists\", new File(Tests.WORKSP", "reference_code": "    downloadOptions.setOverwriteIfExists(false);\n\n    new DownloadRunner(analyzeOptions, downloadOptions).runInternal(new ManualOperationParams());\n\n", "case_type": "block"}
{"generated_code": "\n    private final FrameTypeConversion typeConversion;\n    private final List<FrameSlot> slots;\n    private final Map<Object, FrameSlot> identifierToSlotMap;\n\n    // (db) to track the version of the frame descriptor.\n    // This is used to detect changes in the frame descriptor.\n    // The version is invalidated when the frame descriptor is modified.\n    // The version is also used to detect changes in the frame slots.\n    // The version is also used to detect changes in the frame descriptor.\n    // The version is also used to detect changes in the frame descriptor.\n    // The version is also used to detect changes in the frame descriptor.\n    // The version is also used to detect changes in the frame descriptor.\n    // The version is also used to detect changes in the frame descriptor.\n    // The version is also used to detect changes in the frame descriptor.\n    // The version is also used to detect changes in the frame descriptor.\n    // The version is also used to detect changes in the frame descriptor.\n    // The version is also used to detect changes in the frame descriptor.\n    // The version is also used to", "reference_code": "\n    private final FrameTypeConversion typeConversion;\n    private final ArrayList<FrameSlotImpl> slots;\n    private final HashMap<Object, FrameSlotImpl> identifierToSlotMap;\n", "case_type": "block"}
{"generated_code": "etCount.get(facet);\n            for (String label : facetLabelMap.keySet()) {\n                pq.add(new ElasticSearchFacet(label, facetLabelMap.get(label)));\n            }\n            facetResult.        org.elasticsearch.index.query.QueryBuilder;\nimport org.elasticsearch.index.query.QueryBuilders;\nimport org.elasticsearch.search.aggregations.AggregationBuilder;\nimport org.elasticsearch.search.aggregations.AggregationBuilders;\nimport org.elasticsearch.search.aggregations.bucket.terms.TermsAggregationBuilder;\nimport org.elasticsearch.search.aggregations.bucket.terms.TermsBuilder;\nimport org.elasticsearch.search.aggregations.bucket.terms.TermsQueryBuilder;\nimport org.elasticsearch.search.aggregations.bucket.terms.TermsType;\nimport org.elasticsearch.search.aggregations.bucket.terms.filter.TermsFilterBuilder;\nimport org.elasticsearch.search.aggregations.bucket.terms.script", "reference_code": "import org.elasticsearch.index.query.QueryBuilder;\nimport org.elasticsearch.index.query.QueryBuilders;\n", "case_type": "block"}
{"generated_code": ")    }\n\n    /** Returns a File (in a temporary folder) which has the contents of the given file from the src/test/resources directory. */\n    protected File createTestFile(String filename, String content) throws IOException {\n        File file = folder.newFile(filename);\n        Files.write(file.toPath(), content.getBytes(StandardCharsets.UTF_8));\n        return file;\n    }\n\n    /** Returns a File (in a temporary folder) which has the contents of the given file from the src/test/resources directory. */\n    protected File createTestFile(String filename, String content, String... extensions) {\n        Collections.addAll(Collections.singletonList(filename), extensions);\n        return createTestFile(filename, content);\n    }\n\n    /** Returns a File (in a temporary folder) which has the contents of the given file from the src/test/resources directory. */\n    protected File createTestFile(String filename, String content, String extension) {\n        return createTestFile(filename, content, new String[]{extension});\n    }\n\n    /** Returns a File (in a temporary", "reference_code": "    }\n\n    /** Returns a File (in a temporary folder) which has the given contents. */\n    protected File createTestFile(String filename, String content) throws IOException {\n", "case_type": "block"}
{"generated_code": "                e.setCancelled(true);\n                }\n            }\n        }\n\n        import org.bukkit.entity.PotionEffect;\nimport org.bukkit.entity.PotionEffectType;\nimport org.bukkit.inventory.ItemStack;\nimport org.bukkit.util.Vector;\n\nimport me.mrCookieSlime.Slimefun.Lists.RecipeType;\nimport me.mrCookieSlime.Slimefun.Objects.Category;\nimport me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\nimport me.mrCookieSlime.Slimefun.Objects.handlers.ItemInteractionHandler;\nimport me.mrCookieSlime.Slimefun.api.Slimefun;\nimport me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\nimport me.mrCookieSlime.Slimefun.utils.Utilities;\n\npublic class GrapplingHook extends SimpleSlimefunItem<ItemInteractionHandler> {\n\n    private long des", "reference_code": "import org.bukkit.inventory.ItemStack;\nimport org.bukkit.potion.PotionEffect;\nimport org.bukkit.potion.PotionEffectType;\nimport org.bukkit.util.Vector;\n\n", "case_type": "block"}
{"generated_code": "        assertNotNull(modelAndView);\n        assertNotNull(modelAndView.getViewName());\n        assertEquals(\"card\", modelAndView.getViewName());\n        assertNotNull(modelAndView.getModel());\n\n        Map<String, Object> modelMap = (Map<String, Object>) modelAndView.getModel().get(\"card\");\n        String cardValue = modelMap.get(\"cardNumber\").toString();\n        assertNotNull(cardValue);\n    }\n\n    @Test\n    public void testGetCard() {\n        CardController controller = new CardController();\n        controller.setCard(testCard);\n\n        assertEquals(\"1234 0112 3456 7890\", controller.getCard().getCardId());\n    }\n\n    @Test\n    public void testSetCard() throws IncorrectLimitException {\n        testCard.setBuyLimitDiary(500.00);\n        CardController controller        assertNotNull(modelAndView);\n        assertNotNull(modelAndView.getViewName());\n        assertEquals(\"card\", modelAndView.getViewName());\n        assert", "reference_code": "        assertEquals(\"hello\", modelAndView.getViewName());\n", "case_type": "block"}
{"generated_code": "        return s_manager;\n    }\n\n    private WebRoleContext() {\n    }\n\n    /**\n     * <p>init</p>\n     *\n     * @throws java.lang.Exception if any.\n     */\n    public static void init(WebRoleManagerImpl manager) throws Exception {\n        s_manager = manager;\n    }\n\n    /**\n     * <p>getWebRoleManager</p>\n     *\n     * @return a {@link org.opennms.netmgt.config.WebRoleManager} object.\n     */\n    public static WebRoleManager getWebRoleManager() {\n        return getManager();\n    }\n\n    /**\n     * <p>getWebUserManager</p>\n     *\n     * @return a {@link org.opennms.netmgt.config.WebUserManager} object.\n     */\n    public static WebUserManager getWebUserManager() {\n        return getManager();\n    }\n\n    /**\n     * <p>getWebGroupManager</p>\n     *\n     * @return a {@link org", "reference_code": "\n        return s_manager;\n    }\n\n", "case_type": "block"}
{"generated_code": "import junit.framework.TestSuite;\n\npublic class AppTest \n    extends TestCase\n{\n    /**\n     * Default constructor\n     */\n    public AppTest()\n    {\n    }\n\n    /**\n     * @param testName the name of the test case\n     * @param expected the expected value\n     * @param actual the actual value\n     */\n    public AppTest( String testName, String expected, String actual )\n    {\n        super( testName, expected, actual );\n    }\n\n    /**\n     * @param testName the name of the test case\n     * @param expected the expected value\n     * @param actual the actual value\n     */\n    public AppTest( String testName, String expected, int actual )\n    {\n        super( testName, expected, actual );\n    }\n\n    /**\n     * @param testName the name of the test case\n     * @param expected the expected value\n     * @param actual the actual value\n     */\n    public AppTest( String testName, String expected, double actual )\n    {\n        super( testName, expected, actual", "reference_code": "import junit.framework.TestSuite;\n\npublic class AppTest \n    extends TestCase\n{\n    /**\n", "case_type": "block"}
{"generated_code": "        public String toString() {\n            return value;\n        }\n\n        public static VotingStrategy fromString(String value) {\n            for (VotingStrategy strategy : values()) {\n                if (strategy.value.equals(value)) {\n                    return strategy;\n                }\n            }\n            throw new IllegalArgumentException(\"Unknown voting strategy: \" + value);\n        }\n\n        public static VotingStrategy[] values() {\n            return values(VotingStrategy.class);\n        }\n\n        public static VotingStrategy valueOf(String value) {\n            return valueOf(value, VotingStrategy.class);\n        }\n\n        public static <T extends Enum<T>> T[] values(Class<T> clazz) {\n            return values(clazz, null);\n        }\n\n        public static <T extends Enum<T>> T valueOf(String value, Class<T> clazz) {\n            return valueOf(value, clazz, null);\n        }\n\n        public static <T extends Enum<T>> T valueOf(String value, Class<T> clazz, T defaultValue)", "reference_code": "        public String toString() {\n            return value;\n", "case_type": "block"}
{"generated_code": "    private UTCDateTimeType() {\n        super(CoreConverter.STRING_TYPE, CoreConverter.DATE_TIME_TYPE);\n    }\n\n    @Override\n    public String asCassandraKey(final DateTime value) {\n        final ReadableInstant utcDateTime = new DateTime(value, DateTimeZone.UTC);\n        return utcDateTime.toString();\n    }\n\n    @Override\n    public String asCassandraColumn(final DateTime value) {\n        final ReadableInstant utcDateTime = new DateTime(value, DateTimeZone.UTC);\n        return utcDateTime.toString();\n    }\n\n    @Override\n    public String asCassandraPartitionKey(final DateTime value) {\n        final ReadableInstant utcDateTime = new DateTime(value, DateTimeZone.UTC);\n        return utcDateTime.toString();\n    }\n\n    @Override\n    public String asCassandraClusteringKey(final DateTime value) {\n        final ReadableInstant utcDateTime = new DateTime(value, DateTimeZone.UTC);\n        return utcDateTime.toString();\n    }\n\n    @Override\n", "reference_code": "    private UTCDateTimeType() {\n        super(DateTime.class, CoreConverter.TEXT);\n    }\n\n", "case_type": "block"}
{"generated_code": "2 + 8\n    //note that the [0]'th element is the number of fields in the key\n    if (lengthIndices[0] >= k.endFieldIdx) {\n      int position = 0;\n      for (int i = 1; i < k.endFieldIdx; i++) {\n        position += lengthIndices[i] + keyFieldSeparator.length; \n      }\n      if (position + k.endChar <= (end - start)) {\n        return start + position + k.endChar - 1; \n      }\n    }\n    return -1;\n  }\n  public int[] getLengthIndices(byte[]b, int start, int end) {\n    return getWordLengths(b, start, end);\n  }\n  public int getStartOffset(byte[]b, String key, int start, int end) {\n       return getStartOffset(b, key.getBytes(\"UTF-8\"), start, end, \n        getLengthIndices(b, start, end), k);\n  }\n  public int getEndOffset(byte[]b, String", "reference_code": "      }\n      if (position + k.endChar <= (end - start)) {\n        return start + position + k.endChar - 1;\n", "case_type": "block"}
{"generated_code": "                IgniteCache<Object, Object> cache = ignite.cache(cacheName);\n\n                cache.clear();\n\n                cache.setCacheMode(IgniteCache.CacheMode.PARTITIONED);\n\n                cache.setCacheMode(IgniteCache.CacheMode.PARTITIONED);\n\n                cache.setCacheMode(IgniteCache.CacheMode.PARTITIONED);\n\n                cache.setCacheMode(IgniteCache.CacheMode.PARTITIONED);\n\n                cache.setCacheMode(IgniteCache.CacheMode.PARTITIONED);\n\n                cache.setCacheMode(IgniteCache.CacheMode.PARTITIONED);\n\n                cache.setCacheMode(IgniteCache.CacheMode.PARTITIONED);\n\n                cache.setCacheMode(IgniteCache.CacheMode.PARTITIONED);\n\n                cache.setCacheMode(IgniteCache.CacheMode.PARTITIONED);\n\n                cache.setCacheMode(IgniteCache.CacheMode.PARTITIONED);\n\n                cache.setCacheMode(IgniteCache.CacheMode.PARTITIONED);\n\n                cache.setCacheMode(Ign", "reference_code": "                IgniteCache cache = ignite.cache(cacheName);\n\n                if (cache == null)\n                    throw new IllegalStateException(\"Failed to find cache for name: \" + cacheName);\n", "case_type": "block"}
{"generated_code": "import ch.elexis.core.model.IVerrechenbar;\n\npublic interface IBillableAdjuster {\n\n    /**\n     * Adjust the {@link IVerrechenbar} before it is attempted to be billed. The adjusted\n     * {@link IVerrechenbar}, possibly a different object than verrechenbar, is returned. If no\n     * adjustment is performed, the same object is returned.\n     * \n     * @param verrechenbar\n     * @return the adjusted {@link IVerrechenbar}\n     */\n    public IBillable adjust(IBillable billable, IEncounter encounter);\n\n    /**\n     * Adjust the {@link IVerrechenbar} before it is attempted to be billed. The adjusted\n     * {@link IVerrechenbar}, possibly a different object than verrechenbar, is returned. If no\n     * adjustment is performed, the same object is returned.\n     * \n     * @param verrechenbar\n     * @return the adjusted {@link IVerrechenbar}\n     */\n    public IBillable adjust(IB", "reference_code": "\npublic interface IBillableAdjuster {\n    /**\n", "case_type": "block"}
{"generated_code": "import android.annotation.SuppressLint;\n\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\nimport ca.cs.ualberta.localpost.model.CommentModel", "reference_code": "import android.annotation.SuppressLint;\nimport ca.cs.ualberta.localpost.model.CommentModel;\n\n", "case_type": "block"}
{"generated_code": "    public Term visit(ConstantTerm term, List<Term> children);\n    public Term visit(DivisionTerm term, List<Term> children);\n    public Term visit(ExponentiationTerm term, List<Term> children);\n    public Term visit(FactorTerm term, List<Term> children);\n    public Term visit(FunctionTerm term, List<Term> children);\n    public Term visit(IntegerTerm term, List<Term> children);\n    public Term visit(NegationTerm term, List<Term> children);\n    public Term visit(ParenthesisTerm term, List<Term> children);\n    public Term visit(PowerTerm term, List<Term> children);\n    public Term visit(QuotientTerm term, List<Term> children);\n    public Term visit(RationalTerm term, List<Term> children);\n    public Term visit(RealTerm term, List<Term> children);\n    public Term visit(RootTerm term, List<Term> children);\n    public Term visit(SquareRootTerm term, List<Term> children);\n    public Term visit(SumOfProductTerm term, List<Term> children);\n    public Term", "reference_code": "    public Term visit(Term term, List<Term> children);\n    public Term visit(ExponentTerm term, List<Term> children);\n    public Term visit(NumberTerm term, List<Term> children);\n", "case_type": "block"}
{"generated_code": "    private final String clusterCodeVersion;\n\n    @Getter\n    @NonNull\n    private final String clusterCodeVersionHash;\n\n    @Getter\n    @NonNull\n    private final String clusterCodeVersionHashType;\n\n    @Getter\n    @NonNull\n    private final String clusterCodeVersionHashTypeAlgorithm;\n\n    @Getter\n    @NonNull\n    private final String clusterCodeVersionHashTypeAlgorithmVersion;\n\n    @Getter\n    @NonNull\n    private final String clusterCodeVersionHashTypeAlgorithmVersionHash;\n\n    @Getter\n    @NonNull\n    private final String clusterCodeVersionHashTypeAlgorithmVersionHashType;\n\n    @Getter\n    @NonNull\n    private final String clusterCodeVersionHashTypeAlgorithmVersionHashTypeAlgorithm;\n\n    @Getter\n    @NonNull\n    private final String clusterCodeVersionHashTypeAlgorithmVersionHashTypeAlgorithmVersion;\n\n    @Getter\n    @NonNull\n    private final String clusterCodeVersionHashTypeAlgorithmVersionHashTypeAlgorithmVersionHash;\n\n    @Getter\n    @NonNull\n   ", "reference_code": "    private String mainVersion;\n\n", "case_type": "block"}
{"generated_code": "@XmlType(name = \"\", propOrder = {\n    \"request\"\n})\n@SuppressWarnings(\"all\")\n@javax.xml.bind.annotation.XmlSeeAlso({\n    TestResponse.class\n})\n@javax.xml.bind.annotation.XmlInclude({\n    TestRequest.class\n})\n@javax.xml.bind.annotation.XmlSchema(namespace = \"http://webservice.github.xxbeanxx.com/\", elementFormDefault = javax.xml.bind.annotation.XmlNsForm.QUALIFIED)\n@javax.xml.bind.annotation.XmlSchema(xmlns = {\n    \"http://webservice.github.xxbeanxx.com/\"\n})\n@javax.xml.bind.annotation.XmlSchema(elementFormDefault = javax.xml.bind.annotation.XmlNsForm.UNQUALIFIED)\n@javax.xml.bind.annotation.XmlSchema(namespace = \"\")\n@javax.xml.bind.annotation.XmlSchema(xmlns = {})\n@javax.xml.bind.annotation.XmlSchema(elementFormDefault", "reference_code": "@XmlType(name = \"\", propOrder = {\n    \"request\"\n})\n", "case_type": "block"}
{"generated_code": "package com.example.dagger2.qualifier;\n\nimport java.lang.annotation.Documented;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.Target;\n\nimport javax.inject.Qualifier;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.RetentionPolicy;\n\n@Qualifier\n@Target({ ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER })\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Debit {\n}\n\n@Qualifier\n@Target({ ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER })\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Credit {\n}\n\n@Qualifier\n@Target({ ElementType.METHOD, ElementType.FIELD, ElementType.PARAMETER })\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface Debit {\n}\n\n@Qualifier\n@Target({ ElementType.METHOD, ElementType.FIELD", "reference_code": "package org.jboss.as.quickstarts.payment.qualifiers;\n", "case_type": "block"}
{"generated_code": "), TOLERANCE);\n                assertEquals(expected.stdDevBound(ExtendedStats.Bounds.UPPER, stats.getSigma()),\n                    stats.getStdDeviationBound(ExtendedStats.Bounds.UPPER), TOLERANCE);\n            }\n        );\n    }\n    }\n\nimport org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedSimpleStatsAggregator;\nimport org.elasticsearch.search.aggregations.metrics.stats.extended.InternalExtendedStats;\nimport org.elasticsearch.search.aggregations.metrics.stats.extended.SimpleStatsAggregator;\nimport org.elasticsearch.search.aggregations.support.ByField;\nimport org.elasticsearch.search.aggregations.support.MappedFieldType;\nimport org.elasticsearch.search.aggregations.support.NumberFieldMapper;\nimport org.elasticsearch.search.aggregations.support.NumberFieldMapper.NumberType;\nimport org.elasticsearch.test.AggregatorTestCase;\nimport org.elasticsearch.test.TestSerialize;\nimport org", "reference_code": "import org.elasticsearch.common.CheckedConsumer;\nimport org.elasticsearch.index.mapper.MappedFieldType;\nimport org.elasticsearch.index.mapper.NumberFieldMapper;\nimport org.elasticsearch.search.aggregations.AggregatorTestCase;\n", "case_type": "block"}
{"generated_code": "        return response;\n    }\n\n    @Override\n    public boolean isSyncMessage() {\n        return true;\n    }\n\n    @Override\n    public boolean isFindByExample() {\n        return true;\n    }\n\n    @Override\n    public boolean isFindByExampleResponse() {\n        return true;\n    }\n\n    @Override\n    public boolean isFindByExampleRequest() {\n        return true;\n    }\n\n    @Override\n    public boolean isFindByExampleRequestResponse() {\n        return true;\n    }\n\n    @Override\n    public boolean isFindByExampleRequestRequest() {\n        return true;\n    }\n\n    @Override\n    public boolean isFindByExampleRequestRequestResponse() {\n        return true;\n    }\n\n    @Override\n    public boolean isFindByExampleRequestRequestRequest() {\n        return true;\n    }\n\n    @Override\n    public boolean isFindByExampleRequestRequestRequestResponse() {\n        return true;\n    }\n\n    @Override\n    public boolean isFindByExampleRequestRequestRequestRequest() {\n        return true;\n    }", "reference_code": "\n        return response;\n    }\n", "case_type": "block"}
{"generated_code": "            BigDecimal trueRangeMethod3 = currentLowPrice.subtract(previousClosePrice).abs();\n\n            // Using the three methods\n            // trueRange = max(trueRangeMethod1, trueRangeMethod2, trueRangeMethod3)\n            // trueRange = max(trueRangeMethod1, trueRangeMethod2)\n            // trueRange = max(trueRangeMethod1, trueRangeMethod3)\n            // trueRange = max(trueRangeMethod1, trueRangeMethod2, trueRangeMethod3)\n            // trueRange = max(trueRangeMethod1, trueRangeMethod2)\n            // trueRange = max(trueRangeMethod1, trueRangeMethod3)\n            // trueRange = max(trueRangeMethod1, trueRangeMethod2, trueRangeMethod3)\n            // trueRange = max(trueRangeMethod1, trueRangeMethod2)\n            // trueRange = max(trueRangeMethod1, trueRangeMethod3)\n            // trueRange = max(trueRangeMethod1, trueRangeMethod2, trueRangeMethod3)\n            // trueRange = max(trueRangeMethod1, trueRangeMethod2)\n            // trueRange = max", "reference_code": "            BigDecimal trueRangeMethod3 = currentLowPrice.subtract(previousClosePrice).abs();\n", "case_type": "block"}
{"generated_code": "        if(!super.isReadOnly())\n            return false;\n\n        // TODO: Add your conditions here.\n        return true;\n    }\n    public boolean isEditable()\n    {\n        if(!super.isEditable())\n            return false;\n\n        // TODO: Add your conditions here.\n        return true;\n    }\n    public boolean isDeletable()\n    {\n        if(!super.isDeletable())\n            return false;\n\n        // TODO: Add your conditions here.\n        return true;\n    }\n    public boolean isCloneable()\n    {\n        if(!super.isCloneable())\n            return false;\n\n        // TODO: Add your conditions here.\n        return true;\n    }\n    public boolean isLockable()\n    {\n        if(!super.isLockable())\n            return false;\n\n        // TODO: Add your conditions here.\n        return true;\n    }\n    public boolean isUnlockable()\n    {\n        if(!super.isUnlockable())\n            return false;\n\n        // TODO: Add your conditions here.", "reference_code": "        if(super.isReadOnly())\n            return true;\n", "case_type": "block"}
{"generated_code": "(), \"Directory\");\n      directoryTextBox_.setStylePrimaryName(styles.directoryTextBox());\n      directoryTextBox_.setText(ExportPlotUtils.getDefaultSaveDirectory());\n      grid.setWidget(1, 1, directoryTextBox_);\n\n      setWidget(grid);\n   }\n\n   private void setDirectory(FileSystemItem directory)\n   {\n      directoryTextBox_.setText(directory.getPath());\n   }\n\n   private FileSystemContext fileSystemContext_ = RStudioGinjector.getFileSystemContext();\n   private FileDialogs fileDialogs_ = RStudioGinjector.getFileDialogs();\n   private ListBox imageFormatListBox_;\n   private TextBox directoryTextBox_;\n   private SavePlotAsImageContext context_;\n   private ThemedButton directoryButton_;\n}\n\n      directoryButton_ = new ThemedButton(\"Choose Directory\");\n      directoryButton_.setStylePrimaryName(styles.directoryButton());\n      directoryButton_.setStyleSecondaryName(styles.directoryButtonSelected());\n      directoryButton_.setStyleDisabledName(styles.directoryButtonDisabled());\n      directory", "reference_code": "      grid.setWidget(0, 1, imageFormatListBox_);\n\n      ThemedButton directoryButton = new ThemedButton(\"Directory...\");\n      directoryButton.setStylePrimaryName(styles.directoryButton());\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Test\n    public void run() throws Throwable {\n        runTest(\"test\", 0);\n    }\n\n    @Test\n    public void run0_1() throws Throwable {\n        runTest(\"test\", 0);\n    }\n\n    @Test\n    public void run1_2() throws Throwable {\n        runTest(\"test\", 1);\n    }\n\n    @Test\n    public void run2_3() throws Throwable {\n        runTest(\"test\", -1);\n    }\n\n    @Test\n    public void run0_1_2() throws Throwable {\n        runTest(\"test\", 0);\n    }\n\n    @Test\n    public void run1_2_3() throws Throwable {\n        runTest(\"test\", 1);\n    }\n\n    @Test\n    public void run2_3_4() throws Throwable {\n        runTest(\"test\", -1);\n    }\n\n    @Test\n    public void run0_1_2_3() throws Throwable {\n        runTest", "reference_code": "    }\n\n", "case_type": "block"}
{"generated_code": "import org.jpc.emulator.execution.Executable;\nimport org.jpc.emulator.execution.Branch;\nimport org.jpc.emulator.processor.Processor;\nimport org.jpc.emulator.processor.Modrm;\nimport org.jpc.emulator.processor.PeekableInputStream;\n\nimport static org.jpc.emulator.processor.Processor.Branch.*;\nimport static org.jpc.emulator.processor.Processor.Branch.T1;\nimport static org.jpc.emulator.processor.Processor.Branch.T2;\nimport static org.jpc.emulator.processor.Processor.Branch.T3;\nimport static org.jpc.emulator.processor.Processor.Branch.T4;\nimport static org.jpc.emulator.processor.Processor.Branch.T5;\nimport static org.jpc.emulator.processor.Processor.Branch.T6;\nimport static org.jpc.emulator.processor.Processor.Branch.T7;\nimport static org.jpc.emulator.processor.Processor.", "reference_code": "import org.jpc.emulator.execution.*;\nimport org.jpc.emulator.execution.decoder.*;\nimport org.jpc.emulator.processor.*;\nimport org.jpc.emulator.processor.fpu64.*;\n", "case_type": "block"}
{"generated_code": "\n    // Action button\n    private final String actionButtonLocator = \"com.paypal.selion.pageobjectsdemoapp:id/action_button\";\n    private final String longPressButtonLocator = \"com.paypal.selion.pageobjectsdemoapp:id/long_press_button\";\n    // Seek bar\n    private final String seekBarLocator = \"com.paypal.selion.pageobjectsdemoapp:id/seekBar\";\n    // Text view\n    private final String textViewLocator = \"com.paypal.selion.pageobjectsdemoapp:id/seekBar_textview\";\n    private final String textViewLocator2 = \"com.paypal.selion.pageobjectsdemoapp:id/seekBar_textview2\";\n    private final String textViewLocator3 = \"com.paypal.selion.pageobjectsdemoapp:id/seekBar_textview3\";\n    private final String textViewLocator4 = \"com.paypal.selion.pageobjectsdemoapp:id/seekBar_textview4\";", "reference_code": "    private final String actionButtonLocator = \"com.paypal.selion.pageobjectsdemoapp:id/action_button\";\n    private final String seekBarLocator = \"com.paypal.selion.pageobjectsdemoapp:id/seekBar\";\n    private final String longPressButtonLocator = \"com.paypal.selion.pageobjectsdemoapp:id/long_press_button\";\n", "case_type": "block"}
{"generated_code": "\n        new DefaultPacketIn(deviceId, nullPacketOperation);\n    }\n\n    @Test\n    public void testEquals() {\n        new EqualsTester().addEqualityGroup(packetIn, sameAsPacketIn)\n                .addEqualityGroup(packetIn2, packetIn3)\n                .testEquals();\n    }\n\n    @Test\n    public void testHashCode() {\n        new EqualsTester().addEqualityGroup(packetIn, sameAsPacketIn)\n                .addEqualityGroup(packetIn2, packetIn3)\n                .testHashCode();\n    }\n\n    @Test\n       public void testGetDeviceId() {\n        assertEquals(deviceId, packetIn.getDeviceId());\n    }\n\n    @Test\n       public void testGetPacketOperation() {\n        assertEquals(packetOperation, packetIn.getPacketOperation());\n    }\n\n    @Test\n       public void testGetPacketOperation2() {\n        assertEquals(packetOperation2, packetIn2.getPacketOperation());\n    }\n\n   ", "reference_code": "                .testEquals();\n    }\n", "case_type": "block"}
{"generated_code": "    public Map<String, Integer> getMenu();\n\n    public Map<String, Integer> getOrder();\n\n    public Double getOrderTotal();\n\n    public void clearOrder();\n\n    public void addToOrder(String item, Integer qty);\n\n    public void removeFromOrder(String item, Integer qty);\n\n    public void removeFromOrder(String item);\n\n    public void clearOrder(String item);\n\n    public void clearOrder();\n\n    public void clearMenu();\n\n    public void addToMenu(String item, Integer qty);\n\n    public void removeFromMenu(String item, Integer qty);\n\n    public void removeFromMenu(String item);\n\n    public void clearMenu(String item);\n\n    public void clearMenu();\n\n    public void clear();\n\n    public boolean isEmpty();\n\n    public boolean isNotEmpty();\n\n    public boolean isEmptyOrder();\n\n    public boolean isNotEmptyOrder();\n\n    public boolean isEmptyMenu();\n\n    public boolean isNotEmptyMenu();\n\n    public boolean isEmptyMenuItem();\n\n    public boolean isNotEmptyMenu", "reference_code": "    public String getName();\n\n    public Map<String,MenuItemInterface> getMenu();\n\n", "case_type": "block"}
{"generated_code": "    {\n\n    /**\n     * The JTS or ESRI geometric object.\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    @Override\n    public final Object getGeometry() {\n        return geometry;\n    }\n\n    /**\n     * The JTS or ESRI geometric object.\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    @Override\n    public final Object getGeometry(MathTransform transform) {\n        return geometry;\n    }\n\n    /**\n     * The JTS or ESRI geometric object.\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    @Override\n    public final Object getGeometry(MathTransform transform, Precision precision) {\n        return geometry;\n    }\n\n    /**\n     * The JTS or ESRI geometric object.\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    @Override\n    public final Object getGeometry(MathTransform transform, Precision precision,     extends GeometryWrapper {\n\n    /**\n     * The J", "reference_code": "\npublic final class GeometryWrapper implements Geometry {\n    /**\n     * The JTS or ESRI geometric object.\n     */\n", "case_type": "block"}
{"generated_code": "import android.os.Handler;\nimport android.view.KeyEvent;\nimport android.view.Menu;\nimport android.view.MenuItem;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.WindowManager;\nimport android.widget.Toast;\nimport android.widget.TextView;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\nimport android.widget.RelativeLayout;\nimport android.widget.TextView", "reference_code": "import android.os.Handler;\n", "case_type": "block"}
{"generated_code": "coveryProfile.getLocalServiceKeys(PUBLISHED_SERVICE, \n                TEST_TIMEOUT, readerHandle);\n\n        printResults(results);\n        Assert.assertEquals(2, results.size());\n\n        ServiceDiscoveryProfile.publishLocalServiceKey(PUBLISHED_SERVICE, null, server1Handle.keyManager());\n        results = ServiceDiscoveryProfile.getLocalServiceKeys(PUBLISHED_SERVICE, \n                TEST_TIMEOUT, readerHandle);\n\n        printResults(results);\n        Assert.assertEquals(1, results.size());\n\n        ServiceDiscoveryProfile.publishLocalServiceKey(PUBLISHED_SERVICE, null, server2Handle.keyManager());\n        results = ServiceDiscoveryProfile.getLocalServiceKeys(PUBLISHED_SERVICE, \n                TEST_TIMEOUT, readerHandle);\n\n        printResults(results);\n        Assert.assertEquals(1, results.size());\n\n        ServiceDiscoveryProfile.publishLocalServiceKey(PUBLISHED_SERVICE, null, server3Handle.keyManager());\n        results = ServiceDiscovery", "reference_code": "\n        Log.info(Log.FAC_TEST, \"Completed testGetRepoKeys\");\n    }\n\n    @Test\n    public void testGetCcndKeys() throws Exception {\n", "case_type": "block"}
{"generated_code": "import org.apache.logging.log4j.Logger;\n\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Map.Entry;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.concurrent.ConcurrentSkipListSet;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.concurrent.CopyOnWriteArraySet;\nimport java.util.concurrent.ConcurrentSkipListSet;\nimport java.util.concurrent.CopyOnWriteArraySet;\nimport java.util.concurrent.ConcurrentSkipListSet;\nimport java.util.concurrent.CopyOnWriteArraySet;\nimport java.util.concurrent.CopyOnWriteArrayList;\nimport java.util.concurrent.CopyOnWriteArraySet;\nimport java.util.concurrent.ConcurrentSkipListSet;\nimport java.util.con", "reference_code": "import org.apache.logging.log4j.Logger;\n\nimport java.util.Date;\n", "case_type": "block"}
{"generated_code": "            else\n            {\n                fail(\"Failed to obtain \\\"scheduledelay\\\" property\");\n                return null;\n            }\n        }\n        else\n        {\n            fail(\"Failed to obtain \\\"scheduledelay\\\" property, no property file\");\n            return null;\n        }\n    }\n\n    public String getScheduleInterval()\n    {\n        if (_jsonWebServiceProperties != null)\n        {\n            String scheduleInterval = _jsonWebServiceProperties.getProperty(\"scheduleinterval\");\n\n            if (scheduleInterval != null)\n                return scheduleInterval;\n            else\n            {\n                fail(\"Failed to obtain \\\"scheduleinterval\\\" property\");\n                return null;\n            }\n        }\n        else\n        {\n            fail(\"Failed to obtain \\\"scheduleinterval\\\" property, no property file\");\n            return null;\n        }\n    }\n\n    public String getScheduleType()\n    {\n        if (_jsonWebServiceProperties != null)\n        {\n            String scheduleType = _jsonWebServiceProperties.getProperty(\"scheduletype\");\n\n            if (scheduleType !=", "reference_code": "            else\n            {\n                fail(\"Failed to obtain \\\"scheduledelay\\\" property\");\n                return null;\n            }\n", "case_type": "block"}
{"generated_code": "    public static final int FAIL_SEND = 44;\n\n    public static void sendAlarm(int code, String desc) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"send alarm: code=\" + code + \",desc=\" + desc);\n        }\n\n        // send alarm\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm server\n        // TODO: add alarm", "reference_code": "\n    public static void alarm(int code, String desc) {\n", "case_type": "block"}
{"generated_code": "import org.apache.commons.lang3.Validate;\n\nimport com.gs.obevo.api.appdata.DeployExecution.DeployExecutionStatus;\nimport com.gs.obevo.api.appdata.DeployExecutionAttribute.DeployExecutionAttribute;\n\nimport org.eclipse.collections.impl.factory.Lists;\nimport org.eclipse.collections.impl.factory.Lists.mutable;\nimport org.eclipse.collections.impl.factory.Lists.mutable.MutableList;\nimport org.eclipse.collections.impl.factory.Lists.mutable.MutableList.Builder;\nimport org.eclipse.collections.impl.factory.Lists.mutable.MutableList.Builder.Immutable;\nimport org.eclipse.collections.impl.factory.Lists.mutable.MutableList.Builder.Immutable.Builder;\nimport org.eclipse.collections.impl.factory.Lists.mutable.MutableList.Builder.Immutable.Builder.Immutable.Builder;\nimport org.eclipse.collections.impl.factory.Lists.mutable.MutableList.", "reference_code": "import org.apache.commons.lang3.Validate;\n", "case_type": "block"}
{"generated_code": "     */\n    public Sgn() {\n        super();\n    }\n\n    /**\n     * Returns the output of this function\n     * @param net the net value\n     * @return the output of this function\n     */ \n    public double getOutput(double net) {\n        return getOutput(net);\n    }\n\n    /**\n     * Returns the output of this function\n     * @param net the net value\n     * @return the output of this function\n     */ \n    public double getOutput(double net) {\n        return getOutput(net);\n    }\n\n    /**\n     * Returns the output of this function\n     * @param net the net value\n     * @return the output of this function\n     */ \n    public double getOutput(double net) {\n        return getOutput(net);\n    }\n\n    /**\n     * Returns the output of this function\n     * @param net the net value\n     * @return the output of this function\n     */ \n    public double getOutput(double net) {\n        return getOutput(net);\n    }\n\n    /**\n     * Returns", "reference_code": "     */\n", "case_type": "block"}
{"generated_code": "    @Test\n    public void testAreEqual() {\n        Assertions.assertTrue(ObjectUtils.areEqual(OBJECT, OBJECT));\n        Assertions.assertFalse(ObjectUtils.areEqual(OBJECT, null));\n        Assertions.assertFalse(ObjectUtils.areEqual(null, OBJECT));\n        Assertions.assertFalse(ObjectUtils.areEqual(null, null));\n        Assertions.assertFalse(ObjectUtils.areEqual(OBJECT, OBJECT, OBJECT));\n        Assertions.assertFalse(ObjectUtils.areEqual(OBJECT, OBJECT, null));\n        Assertions.assertFalse(ObjectUtils.areEqual(OBJECT, null, OBJECT));\n        Assertions.assertFalse(ObjectUtils.areEqual(null, OBJECT, OBJECT));\n        Assertions.assertFalse(ObjectUtils.areEqual(OBJECT, null, null));\n        Assertions.assertFalse(ObjectUtils.areEqual(null, OBJECT, null));\n        Assertions.assertFalse(ObjectUtils.areEqual(null, null, OBJECT));\n        Assertions.assert", "reference_code": "    @Test\n    @SuppressWarnings(\"ConstantConditions\")\n    public void testIsNotNull() {\n        Assertions.assertTrue(ObjectUtils.isNotNull(OBJECT));\n        Assertions.assertFalse(ObjectUtils.isNotNull(null));\n", "case_type": "block"}
{"generated_code": "    SMALL(16), MEDIUM(24), LARGE(32);\n\n    public static final IconSize DEFAULT = MEDIUM;\n\n    public static final IconSize[] VALUES = values();\n\n    public static final int SIZE_SMALL = SMALL.getSize();\n    public static final int SIZE_MEDIUM = MEDIUM.getSize();\n    public static final int SIZE_LARGE = LARGE.getSize();\n    public static final int SIZE_DEFAULT = DEFAULT.getSize();\n    public static final int SIZE_MAX = LARGE.getSize();\n\n    public static final int SIZE_MIN = SMALL.getSize();\n    public static final int SIZE_MAX_FULL = LARGE.getSize();\n    public static final int SIZE_MAX_HALF = MEDIUM.getSize();\n    public static final int SIZE_MAX_QUARTER = SMALL.getSize();\n    public static final int SIZE_MAX_EIGHTH = MEDIUM.getSize() / 2;\n    public static final int SIZE_MAX_SIXTE", "reference_code": "\n    SMALL(16), LARGE(24);\n", "case_type": "block"}
{"generated_code": "  }\n\n  // void R_CleanUp (SA_TYPE, int, int)\n\n  // void R_Init (void)\n\n  // void R_InitSite (void)\n\n  // void R_InitSys (void)\n\n  // void R_InitSiteSys (void)\n\n  // void R_InitSysSite (void)\n\n  // void R_InitSysSiteSys (void)\n\n  // void R_InitSysSiteSysSite (void)\n\n  // void R_InitSysSiteSysSiteSite (void)\n\n  // void R_InitSysSiteSysSiteSiteSite (void)\n\n  // void R_InitSysSiteSysSiteSiteSiteSite (void)\n\n  // void R_InitSysSiteSysSiteSiteSiteSiteSite (void)\n\n  // void R_InitSysSiteSysSiteSiteSiteSiteSiteSite (void)\n\n  // void R_InitSysSiteSysSiteSiteSiteSiteSiteSiteSite (void)\n\n  // void R_InitSysSiteSysSiteSiteSite", "reference_code": "  }\n", "case_type": "block"}
{"generated_code": "    double getDeterminant();\n\n    /**\n     * Returns a solver for the system Ax=b.\n     * @return a solver\n     */\n    RealMatrix getSolver();\n\n    /**\n     * Returns a solver for the system Ax=b.\n     * <p>The solver is a Cholesky decomposition of the matrix A.</p>\n     * @return a solver\n     */\n    RealMatrix getSolver(RealMatrix A);\n\n    /**\n     * Returns a solver for the system Ax=b.\n     * <p>The solver is a Cholesky decomposition of the matrix A.</p>\n     * @param A the matrix\n     * @param b the right hand side\n     * @return a solver\n     */\n    RealMatrix getSolver(RealMatrix A, RealVector b);\n\n    /**\n     * Returns a solver for the system Ax=b.\n     * <p>The solver is a Cholesky decomposition of the matrix A.</p>\n     * @param A the matrix\n     * @param", "reference_code": "    double getDeterminant();\n\n    /**\n     * Get a solver for finding the A &times; X = B solution in least square sense.\n", "case_type": "block"}
{"generated_code": "\n        Test xp = new Test();\n        try {\n            String bar = xp.doSomething(param);\n\n            // This is a test of the XPath expression parser\n            // It should throw an exception if the expression is not valid\n            // This is a test of the XPath expression parser\n            // It should throw an exception if the expression is not valid\n            // This is a test of the XPath expression parser\n            // It should throw an exception if the expression is not valid\n            // This is a test of the XPath expression parser\n            // It should throw an exception if the expression is not valid\n            // This is a test of the XPath expression parser\n            // It should throw an exception if the expression is not valid\n            // This is a test of the XPath expression parser\n            // It should throw an exception if the expression is not valid\n            // This is a test of the XPath expression parser\n            // It should throw an exception if the expression is not valid\n            // This is a test of the XPath expression parser\n            // It should throw an exception if the expression is not valid\n            // This is a test of the XPath expression parser", "reference_code": "\n        String bar = new Test().doSomething(param);\n\n        javax.xml.xpath.XPathFactory xpf = javax.xml.xpath.XPathFactory.newInstance();\n        javax.xml.xpath.XPath xp = xpf.newXPath();\n        try {\n", "case_type": "block"}
{"generated_code": "                resp.sendError(HttpServletResponse.SC_NOT_FOUND);\n            } else {\n                resp.setContentType(\"application/java\");\n\n                resp.setContentType(\"text/plain\");\n\n                resp.setContentLength(is.available());\n\n                resp.getOutputStream().write(is.readAllBytes());\n                resp.getOutputStream().flush();\n\n                resp.getOutputStream().close();\n\n                is.close();\n\n                is = cl.getResourceAsStream(resource.substring(1));\n\n                resp.setContentType(\"application/java\");\n\n                resp.setContentType(\"text/plain\");\n\n                resp.setContentLength(is.available());\n\n                resp.getOutputStream().write(is.readAllBytes());\n                resp.getOutputStream().flush();\n\n                resp.getOutputStream().close();\n\n                is.close();\n\n                is = cl.getResourceAsStream(resource.substring(1));\n\n                resp.setContentType(\"application/java\");\n\n                resp.setContentType(\"text/plain\");\n\n                resp.setContentLength(", "reference_code": "                resp.sendError(HttpServletResponse.SC_NOT_FOUND);\n            } else {\n                resp.setContentType(\"text/plain\");\n", "case_type": "block"}
{"generated_code": "\n    KeyValueSegments(final String name,\n                     final String metricsScope,\n                     final String metricsName,\n                     final String metricsDescription,\n                     final long retentionPeriod,\n                     final long segmentInterval) {\n        this(name, metricsScope, metricsName, metricsDescription, retentionPeriod, segmentInterval, null);\n    }\n\n    KeyValueSegments(final String name,\n                     final String metricsScope,\n                     final String metricsName,\n                     final String metricsDescription,\n                     final long retentionPeriod,\n                     final long segmentInterval,\n                     final String metricsTags) {\n        super(name, retentionPeriod, segmentInterval, metricsTags);\n        metricsRecorder = new RocksDBMetricsRecorder(metricsScope, name);\n    }\n\n    KeyValueSegments(final String name,\n                     final String metricsScope,\n                     final String metricsName,\n                     final String metricsDescription,\n                     final String metricsTags,\n                     final long retentionPeriod,\n                     final long segmentInterval) {\n        this(name, metricsScope, metricsName, metricsDescription, metricsTags, retentionPeriod, segmentInterval, null);\n    }", "reference_code": "\n    KeyValueSegments(final String name,\n                     final String metricsScope,\n", "case_type": "block"}
{"generated_code": "address), this);\n                _stub.setPortName(getCustomTargetingServiceInterfacePortWSDDServiceName());\n                return _stub;\n            }\n            else {\n                throw new javax.xml.rpc.ServiceException(\"Invalid service endpoint interface: \" + serviceEndpointInterface);\n            }\n        }\n        catch (org.apache.axis.AxisFault e) {\n            throw new javax.xml.rpc.ServiceException(e);\n        }\n    }\n\n    public com.google.api.ads.admanager.axis.v202105.CustomTargetingServiceInterface getCustomTargetingServiceInterfacePort(java.net.URL portAddress, java.lang.String portName) throws javax.xml.rpc.ServiceException {\n        try {\n            com.google.api.ads.admanager.axis.v202105.CustomTargetingServiceSoapBindingStub _stub = new com.google.api.ads.admanager.axis.v202105.CustomTargetingServiceSoapBindingStub(portAddress, this);\n            _st", "reference_code": "    * Set the endpoint address for the specified port name.\n    */\n    public void setEndpointAddress(javax.xml.namespace.QName portName, java.lang.String address) throws javax.xml.rpc.ServiceException {\n", "case_type": "block"}
{"generated_code": "        return -1;\n    }\n\n    /**\n     * Method from TestInterface1 interfaces. Does nothing.\n     */\n    public void test2(int i) {\n        System.out.println(\"test2\");\n    }\n\n    /**\n     * Method from TestInterface1 interfaces. Does nothing.\n     */\n    public void test3(int i) {\n        System.out.println(\"test3\");\n    }\n\n    /**\n     * Method from TestInterface1 interfaces. Does nothing.\n     */\n    public void test4(int i) {\n        System.out.println(\"test4\");\n    }\n\n    /**\n     * Method from TestInterface1 interfaces. Does nothing.\n     */\n    public void test5(int i) {\n        System.out.println(\"test5\");\n    }\n\n    /**\n     * Method from TestInterface1 interfaces. Does nothing.\n     */\n    public void test6(int i) {\n        System.out.println(\"test6\");\n    }\n\n    /**\n     * Method from TestInterface1 interfaces. Does nothing.\n     */\n    public", "reference_code": "        return -1;\n    }\n\n", "case_type": "block"}
{"generated_code": "\n      case REPOSITORY:\n        visitor.visitRepository(component);\n        break;\n      case QUALITYGATE:\n        visitor.visitQualityGate(component);\n        break;\n      case PROPERTY:\n        visitor.visitProperty(component);\n        break;\n      case RELEASE:\n        visitor.visitRelease(component);\n        break;\n      case SUBPROJECT:\n        visitor.visitSubProject(component);\n        break;\n      case SUBRELEASE:\n        visitor.visitSubRelease(component);\n        break;\n      case SUBVERSION:\n        visitor.visitSubVersion(component);\n        break;\n      case SUBVERSIONRANGE:\n        visitor.visitSubVersionRange(component);\n        break;\n      case SUBVERSIONREVISION:\n        visitor.visitSubVersionRevision(component);\n        break;\n      case SUBVERSIONREVISIONRANGE:\n        visitor.visitSubVersionRevisionRange(component);\n        break;\n      case SUBVERSIONREVISIONREVISION:", "reference_code": "  }\n", "case_type": "block"}
{"generated_code": "     *      the Option value\n     */\n    Option getOption();\n\n    Option getOption(boolean load);\n\n    Option getOption(boolean load, boolean loadChildren);\n\n    Option getOption(boolean load, boolean loadChildren, boolean loadChildrenChildren);\n\n    Option getOption(boolean load, boolean loadChildren, boolean loadChildrenChildren, boolean loadChildrenChildrenChildren);\n\n    Option getOption(boolean load, boolean loadChildren, boolean loadChildrenChildren, boolean loadChildrenChildrenChildren, boolean loadChildrenChildrenChildrenChildren);\n\n    Option getOption(boolean load, boolean loadChildren, boolean loadChildrenChildren, boolean loadChildrenChildrenChildren, boolean loadChildrenChildrenChildrenChildren, boolean loadChildrenChildrenChildrenChildrenChildren);\n\n    Option getOption(boolean load, boolean loadChildren, boolean loadChildrenChildren, boolean loadChildrenChildrenChildren, boolean loadChildrenChildrenChildrenChildren, boolean loadChildrenChildrenChildrenChildrenChildren, boolean loadChildrenChildrenChildrenChildrenChildrenChildren);\n\n    Option getOption(boolean load, boolean loadChildren, boolean loadChildrenChildren, boolean loadChildrenChildrenChildren, boolean loadChildrenChildrenChildrenChildren, boolean loadChildrenChildrenChildrenChildrenChildren, boolean loadChildrenChildrenChildrenChildrenChildrenChildren, boolean loadChildren", "reference_code": "     *      the option code\n     */\n    Option getOption();\n\n", "case_type": "block"}
{"generated_code": "import javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.UnsupportedAudioFileException;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileNotFoundException;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.nio.file", "reference_code": "import javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.UnsupportedAudioFileException;\nimport java.io.BufferedReader;\nimport java.io.IOException;\n", "case_type": "block"}
{"generated_code": "Ingredient(ingredientCostOptionsList);\n                    if (anyChange)\n                    {\n                        somethingChangedInCurrentLoopIteration = true;\n                    }\n                }\n            }\n        }\n    }\n\n    protected HashMap<IdDamagePair, ArrayList<RecipeStruct>> _calculateRecipesMap()\n    {\n        HashMap<IdDamagePair, ArrayList<RecipeStruct>> idDamagePairArrayListHashMap = new HashMap<IdDamagePair, ArrayList<RecipeStruct>>();\n        for (RecipeStruct recipeStruct : recipes)\n        {\n            for (RecipeItemStruct recipeItemStruct : recipeStruct.recipeItemStructs)\n            {\n                IdDamagePair idDamagePair = new IdDamagePair(recipeItemStruct.itemId, recipeItemStruct.damage);\n                if (!idDamagePairArrayListHashMap.containsKey(idDamagePair))\n                {\n                    idDamagePairArrayListHashMap.put(idDamagePair, new ArrayList<RecipeStruct>());\n                }\n                idDamage", "reference_code": "                System.out.println(itemStruct.name + \" (\" + itemStruct.itemId + \":\" + itemStruct.damageId + \")\");\n            }\n\n        }\n", "case_type": "block"}
{"generated_code": "  public RetriesExhaustedWithDetailsException(final String msg) {\n    super(msg);\n  }\n\n  public RetriesExhaustedWithDetailsException(final String msg, final RegionTooBusyException e) {\n    super(msg, e);\n  }\n\n  public RetriesExhaustedWithDetailsException(final String msg, final Exception e) {\n    super(msg, e);\n  }\n\n  public RetriesExhaustedWithDetailsException(final String msg, final Map.Entry<String, Throwable> e) {\n    super(msg, e);\n  }\n\n  public RetriesExhaustedWithDetailsException(final String msg, final Throwable e) {\n    super(msg, e);\n  }\n\n  public RetriesExhaustedWithDetailsException(final String msg, final RegionTooBusyException e,\n                                              final Map<String, Throwable> e2) {\n    super(msg, e, e2);\n  }\n\n  public RetriesExhaustedWithDetailsException(final String msg, final Throwable e,\n                                              final", "reference_code": "  public RetriesExhaustedWithDetailsException(final String msg) {\n    super(msg);\n", "case_type": "block"}
{"generated_code": "import javax.xml.bind.annotation.XmlType;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport org.outermedia.solrfusion.configuration.ConfiguredFactory;\n\nimport org.outermedia.solrfusion.response.ResponseParserIfc;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport org.outermedia.solrfusion.configuration.ConfiguredFactory;\n\nimport org.outermedia.solrfusion.response.ResponseParserIfc;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport org.outermedia.solrfusion.configuration.ConfiguredFactory;\n\nimport org.outermedia.solrfusion.response.ResponseParserIfc;\n\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\n\nimport org.outermedia.solrfusion.configuration.ConfiguredFactory;\n\nimport", "reference_code": "import javax.xml.bind.annotation.XmlType;\n\nimport lombok.Getter;\nimport lombok.Setter;\n", "case_type": "block"}
{"generated_code": "  /**\n   * 根据规则集，构建一个执行计划\n   *\n   * @param base\n   * @param context\n   */\n  Agenda buildAgenda(RuleBase base, Context context, boolean isFirstTime);\n\n  /**\n   * 根据规则集，构建一个执行计划\n   *\n   * @param base\n   * @param context\n   */\n  Agenda buildAgenda(RuleBase base, Context context, boolean isFirstTime, boolean isRebuild);\n\n  /**\n   * 根据规则集，构建一个执行计划\n   *\n   * @param base\n   * @param context\n   */\n  Agenda buildAgenda(RuleBase base, Context context, boolean isFirstTime, boolean isRebuild, boolean isRebuildAll);\n\n  /**\n   * 根据规则集，构建一个执行计划\n   *\n   * @param base\n   * @param context\n   */\n  Agenda buildAgenda(RuleBase base, Context context, boolean isFirstTime, boolean isRebuild, boolean isRebuildAll, boolean isRebuildAllAll);\n\n  /**\n   * ", "reference_code": "\n  /**\n", "case_type": "block"}
{"generated_code": "        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\n        List list = null;\n        Method m = null;\n        try {\n            m = daoClazz.getDeclaredMethod(\"getAll\", new Class[]{});\n        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n        }\n        try {\n            list = (List) m.invoke(null, new Object[]{});\n        } catch (IllegalAccessException e) {\n            e.printStackTrace();\n            fail(\"Failed to get list of \" + listName);\n        } catch (InvocationTargetException e) {\n            e.printStackTrace();\n            fail(\"Failed to get list of \" + listName);\n        }\n        assertNotNull(listName + \" list was null\", list);\n    }\n\n    public void testListOrder() {\n\n        Class daoClazz = null;\n        try {\n            daoClazz = Class.forName(dao);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }", "reference_code": "        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n", "case_type": "block"}
{"generated_code": "        logger.debug(i18n.getLocalizerText(\"organizermanager.start\"));\n        for (String str : configurationList.split(ORGANIZER_SEPARATOR)) {\n            List<String> listString = Configuration.getInstance().getList(str);\n            if (listString == null) {\n                listString = new ArrayList<String>();\n            }\n\n            listString.add(str);\n\n            logger.debug(i18n.getLocalizerText(\"organizermanager.process.list\") + str);\n\n            //TODO: check if organizer is already in list\n\n            //TODO: check if organizer is already in list\n\n            //TODO: check if organizer is already in list\n\n            //TODO: check if organizer is already in list\n\n            //TODO: check if organizer is already in list\n\n            //TODO: check if organizer is already in list\n\n            //TODO: check if organizer is already in list\n\n            //TODO: check if organizer is already in list\n\n            //TODO: check if organizer", "reference_code": "        logger.debug(i18n.getLocalizerText(\"init.organizermanager\"));\n        if (configurationList != null) {\n            logger.debug(i18n.getLocalizerText(\"organizermanager.read.list\") + configurationList);\n            String[] listString = configurationList.split(ORGANIZER_SEPARATOR);\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Bean\n    public ErrorLogger errorLogger() {\n        ErrorLogger errorLogger = new ErrorLogger();\n        errorLogger.mapRootCause(Level.ERROR, ConnectException.class);\n        errorLogger.mapRootCause(Level.ERROR, IllegalArgumentException.class);\n        errorLogger.mapRootCause(Level.ERROR, IllegalStateException.class);\n        errorLogger.mapRootCause(Level.ERROR, NullPointerException.class);\n        errorLogger.mapRootCause(Level.ERROR, IllegalAccessException.class);\n        errorLogger.mapRootCause(Level.ERROR, ClassCastException.class);\n        errorLogger.mapRootCause(Level.ERROR, ClassNotFoundException.class);\n        errorLogger.mapRootCause(Level.ERROR, UnsupportedOperationException.class);\n        errorLogger.mapRootCause(Level.ERROR, SecurityException.class);\n        errorLogger.mapRootCause(Level.ERROR, ArrayIndexOutOfBoundsException.class);\n        errorLogger.mapRootCause(Level.ERROR, IndexOutOfBoundsException.class);\n        errorLogger.map", "reference_code": "    }\n\n    @Bean\n    public ErrorLogger errorLogger() {\n        ErrorLogger errorLogger = new ErrorLogger();\n        errorLogger.mapRootCause(Level.ERROR, ConnectException.class);\n", "case_type": "block"}
{"generated_code": "    final int FLAG_NUMERIC = 2;\n    final int FLAG_PULLDOWN = 4;\n    double threshold;\n    public LogicOutputElm(int xa, int ya, int xb, int yb, int f) {\n        super(xa, ya, xb, yb, f);\n        flags = FLAG_TERNARY;\n        flags |= FLAG_PULLDOWN;\n        flags |= FLAG_NUMERIC;\n        //flags |= FLAG_CURRENT;\n        //flags |= FLAG_VOLTAGE;\n        //flags |= FLAG_CURRENT_REQUIRED;\n        //flags |= FLAG_VOLTAGE_REQUIRED;\n        //flags |= FLAG_CURRENT_REQUIRED_VOLTAGE_REQUIRED;\n        //flags |= FLAG_CURRENT_REQUIRED_VOLTAGE_REQUIRED_CURRENT;\n        //flags |= FLAG_CURRENT_REQUIRED_VOLTAGE_REQUIRED_CURRENT_REQUI", "reference_code": "    final int FLAG_NUMERIC = 2;\n    final int FLAG_PULLDOWN = 4;\n    double threshold;\n    String value;\n    public LogicOutputElm(int xx, int yy) {\n        super(xx, yy);\n", "case_type": "block"}
{"generated_code": "    public Apps() {\n\n        // TODO Auto-generated constructor stub\n\n        //apps = new HashMap<>();\n        //apps.put(\"com.flair.blurb\", \"com.flair.blurb\");\n        //apps.put(\"com.flair.blurb.test\", \"com.flair.blurb.test\");\n        //apps.put(\"com.flair.blurb.test2\", \"com.flair.blurb.test2\");\n        //apps.put(\"com.flair.blurb.test3\", \"com.flair.blurb.test3\");\n        //apps.put(\"com.flair.blurb.test4\", \"com.flair.blurb.test4\");\n        //apps.put(\"com.flair.blurb.test5\", \"com.flair.blurb.test5\");\n        //apps.put(\"com.flair.blurb.test6\", \"com.flair.blurb.test6\");\n        //apps.put(\"com.flair.blurb.test7\", \"com.flair.blurb.", "reference_code": "    public Apps() {\n", "case_type": "block"}
{"generated_code": "\n                --i;\n            }\n        }\n        return bVal;\n    }\n\n    public static String formatSize(long size)\n    {\n        if (size >= tb_)\n            return df_.format(size / tb_) + \" TB\";\n        else if (size >= gb_)\n            return df_.format(size / gb_) + \" GB\";\n        else if (size >= mb_)\n            return df_.format(size / mb_) + \" MB\";\n        else if (size >= kb_)\n            return df            }\n        return \"0\";\n    }\n\n    public static String formatSize(long size, String unit)\n    {\n        if (size >= tb_)\n            return df_.format(size / tb_) + \" \" + unit;\n        else if (size >= gb_)\n            return df_.format(size / gb_) + \" \" + unit;\n        else if (size >= mb_)\n            return df_.format(size / mb_) + \" \" + unit;\n        else if (size >= kb_)\n            return df_.format(size", "reference_code": "    /**\n     * Deletes all files and subdirectories under \"dir\".\n     * @param dir Directory to be deleted\n     * @return boolean Returns \"true\" if all deletions were successful.\n     *                 If a deletion fails, the method stops attempting to\n", "case_type": "block"}
{"generated_code": "Pixel / timeCompressionSeconds;\n            addNewEntity(new Float(fe.posx,fe.posy), vel);\n        }\n    }\n\n    public void render(Graphics2D g2d) {\n        updateTimeDelta();\n        renderFormingEntities(g2d);\n    }\n\n    public void render(Graphics2D g2d, RenderingHints hints) {\n               if(fe != null) {\n            Point pos = new Point(x,y);\n            fe.posx = pos.x;\n            fe.posy = pos.y;\n            fe.dragx = pos.x;\n            fe.dragy = pos.y;\n        }\n    }\n\n    public void cursorMoved(long cursorID, int x, int y) {\n        FormingEntity fe;\n        synchronized(formingEntities) {\n            fe = formingEntities.get(cursorID);\n        }\n        if(fe != null) {\n            Point pos = new Point(x,y);\n            fe.posx = pos.x;", "reference_code": "        }\n        if(fe != null) {            \n", "case_type": "block"}
{"generated_code": "().setSelection(range.getStartOffset(), range.getEndOffset());\n    }\n  }\n}\n\n    PsiDocumentManager.getInstance(project).commitAllDocuments();\n  }\n}\n\nimport com.intellij.openapi.editor.Editor;\nimport com.intellij.openapi.editor.actionSystem.DataContext;\nimport com.intellij.openapi.editor.actionSystem.EditorActionHandler;\nimport com.intellij.openapi.editor.actionSystem.PlatformDataKeys;\nimport com.intellij.openapi.fileEditor.Document;\nimport com.intellij.openapi.fileEditor.PsiDocumentManager;\nimport com.intellij.openapi.util.text.CharSequenceUtil;\nimport com.intellij.psi.PsiCompiledFile;\nimport com.intellij.psi.PsiElement;\nimport com.intellij.psi.PsiFile;\nimport com.intellij.psi.PsiWhiteSpace;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static com.intellij.codeInsight.editorActions.SelectWordUtil.processRanges;\n\npublic class Un", "reference_code": "import com.intellij.openapi.actionSystem.DataContext;\nimport com.intellij.openapi.actionSystem.PlatformDataKeys;\nimport com.intellij.openapi.editor.Document;\nimport com.intellij.openapi.editor.Editor;\n", "case_type": "block"}
{"generated_code": " -> {\n            GraphicalSubsystem.getWindowManager().addWindow(new AboutWindow());\n        });\n\n        exitButton.setOnButtonPress(() -> {\n            TaskManager.getTaskManager().stop();\n        });\n    }\n\n    @Override\n    public void render() {\n        super.render();\n    }\n\n    @Override\n    public void onMessage(WindowMessage message) {\n    }\n\n    @Override\n    public void onStateChange(StateMachine stateMachine) {\n    }\n\n    @Override\n       });\n\n        playMPButton.setOnButtonPress(() -> {\n            GraphicalSubsystem.getWindowManager().addWindow(new WorldWindow(w / 2 - 420 + x, y - 40, 840, 600));\n        });\n\n        playMPButton.setOnButtonPress(() -> {\n            GraphicalSubsystem.getWindowManager().addWindow(new WorldWindow(w / 2 - 420 + x, y - 40, 840, 600));\n        });\n", "reference_code": "        });\n\n        playMPButton.setOnButtonPress(() -> {\n            GraphicalSubsystem.getWindowManager().addWindow(new MultiplayerMenu(w / 2 - 250 + x, y - 100, 500, 400));\n        });\n", "case_type": "block"}
{"generated_code": "\n    // constructor\n    public JSONParser() {\n\n    }\n\n    /**\n     * function get json from url\n     * // by making HTTP POST or GET mehtod\n     */\n    @SuppressWarnings(\"unchecked\")\n\n    // function get json from url\n    // by making HTTP POST or GET mehtod\n\n    @SuppressWarnings(\"rawtypes\")\n\n    // function getting product details by making HTTP POST or GET mehtod\n\n    public JSONObject getJSONFromUrl(String url, String tag_string) {\n        // IMPORTANT: Adding new tags can lead to performance issues.\n        // So it is better to add tags only when necessary.\n        JSONParser jParser = new JSONParser();\n        // getting JSON string from URL\n        jObj = jParser.getJSONFromUrl(url);\n        return jObj;\n    }\n\n    /**\n     * function getting product details by making HTTP POST or GET mehtod\n     */\n    @SuppressWarnings(\"rawtypes\")\n\n    public JSONObject getJSONFromUrl(String url, String tag_string, String", "reference_code": "\n    // constructor\n    public JSONParser() {}\n\n", "case_type": "block"}
{"generated_code": "                }\n                ctx.close();\n                pw.close();\n            } catch (Exception e) {\n                e.printStackTrace(pw);\n            } finally {\n                pw.close();\n            }\n        } catch (ServletException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (IOException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        } catch (NamingException e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n    }\n\n    protected void performTask(HttpServletRequest request, HttpServletResponse response, DataSource ds){\n        try {\n            PrintWriter pw = response.getWriter();\n            try {\n                pw.println(\"Value bound and retrieved from jndi default context\");\n                pw.close();\n            } catch (IOException e) {\n                // TODO Auto-generated catch block\n                e.printStackTrace();\n            } catch (NamingException e) {\n                // TODO Auto-generated catch block\n                e.print", "reference_code": "                }\n", "case_type": "block"}
{"generated_code": "        com.android.volley.Response;\nimport com.android.volley.toolbox.HttpHeaderParser;\nimport com.android.volley.toolbox.NetworkRequest;\nimport com.android.volley.toolbox.Request;\nimport com.android.volley.toolbox.RequestFuture;\nimport com.android.volley.toolbox.VolleyLog;\nimport com.siu.android.volleyball.Priority;\nimport com.siu.android.volleyball.response.SingleResponseListener;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.InputStream;\n\npublic class BallImageRequest extends NetworkRequest<Bitmap> {\n    public BallImageRequest(String url, SingleResponseListener<Bitmap> listener, int maxWidth, int maxHeight,\n                            Response.ErrorListener errorListener) {\n        super(Method.GET, url        com.android.volley.toolbox.Volley;\nimport com.android.volley.Request;\nimport com.android.volley.RequestFuture;\nimport com.android.volley.toolbox.Volley;\nimport com.", "reference_code": "import com.android.volley.Response;\nimport com.android.volley.VolleyLog;\nimport com.android.volley.toolbox.HttpHeaderParser;\nimport com.siu.android.volleyball.BallResponse;\nimport com.siu.android.volleyball.request.NetworkRequest;\n", "case_type": "block"}
{"generated_code": "     */\n    /**\n     * Sample code: GetAddressByName.\n     *\n     * @param manager Entry point to EdgeOrderManager.\n     * @throws com.azure.core.exception.HttpResponseException Thrown when the operation returned an invalid status code.\n     * @throws com.azure.core.exception.HttpTransportException Thrown when the server returned an error response.\n     * @throws com.azure.core.exception.ResourceNotFoundException thrown when the resource doesn't exist.\n     * @throws IOException thrown when the request is rejected by server.\n     * @throws IllegalArgumentException thrown when the parameter is an empty string, null, or all whitespaces.\n     * @throws ErrorResponseException thrown when the server returns an unexpected response.\n     * @throws RequestFailedException thrown when the client received an error response on the bad request.\n     * @throws ResourceExistsException thrown when the resource already exists.\n     * @throws ResourceNotFoundException thrown when the resource doesn't exist.\n     * @throws ResourceProviderNotFoundException thrown when the resource doesn't exist.\n     * @throws ResourceProviderUnavailableException thrown when the resource doesn't", "reference_code": "     */\n    /**\n     * Sample code: GetAddressByName.\n", "case_type": "block"}
{"generated_code": "\n    public static class ParsedBucket extends ParsedRareTerms.ParsedBucket {\n        ParsedBucket(String key) {\n            super(key);\n        }\n\n        ParsedBucket() {\n            super();\n        }\n\n        @Override\n        public String getType() {\n            return StringRareTerms.NAME;\n        }\n\n        @Override\n        public String getKeyAsString() {\n            return key.utf8ToString();\n        }\n\n        @Override\n        public String getKeyAsNumber() {\n            return Double.toString(key.utf8ToString());\n        }\n    }\n\n    public static class ParsedBucketNumber extends ParsedRareTerms.ParsedBucketNumber {\n        ParsedBucketNumber(Number key) {\n            super(key);\n        }\n\n        ParsedBucketNumber() {\n            super();\n        }\n\n        @Override\n        public String getType() {\n            return StringRareTerms.NAME;\n        }\n\n        @Override\n        public String get", "reference_code": "\n    public static class ParsedBucket extends ParsedRareTerms.ParsedBucket {\n\n        private BytesRef key;\n\n", "case_type": "block"}
{"generated_code": "\n    public int getStatus() {\n        return status;\n    }\n\n    public void setStatus(String status) {\n        this.status = Integer.parseInt(status);\n    }\n\n    public int getStatus(String status) {\n        this.status = Integer.parseInt(status);\n\n        return status;\n    }\n\n    public int getStatus(Integer status) {\n\n        this.status = status;\n\n        return status;\n    }\n\n    public int getStatus(int status) {\n\n        this.status = status;\n\n        return status;\n    }\n\n    public int getStatus(String status,int status1) {\n\n        this.status = Integer.parseInt(status);\n\n        return status;\n    }\n\n    public int getStatus(Integer status,int status1) {\n\n        this.status = status;\n\n        return status;\n    }\n\n    public int getStatus(String status,Integer status1) {\n\n        this.status = Integer.parseInt(status);\n\n        return status;\n    }\n\n    public int get", "reference_code": "\n    public int getStatus() {\n", "case_type": "block"}
{"generated_code": "ideBase extends Base {\n        @Override\n        public boolean canHandleDataType(DataType dataType) {\n            return dataType.isNucleotide();\n        }\n    } // class NucleotideBase\n\n} // interface SubstitutionModel\n\n    @Override\n    public boolean canHandleDataType(DataType dataType) {\n        return false;\n    }\n\n    @Override\n    public boolean canReturnComplexDiagonalization() {\n        return false;\n    }\n\n    @Override\n    public double[] getRateMatrix(Node node) {\n        return null;\n    }\n\n    @Override\n    public EigenDecomposition getEigenDecomposition(Node node) {\n        return null;\n    }\n\n    @Override\n    public boolean canHandleDataType(DataType dataType) {\n        return false;\n    }\n\n    @Override\n    public boolean canReturnComplexDiagonalization() {\n        return false;\n    }\n\n    @Override\n    public double[]    @Override\n        public boolean canHandleDataType(DataType dataType) {\n            return false", "reference_code": "\n        @Override\n", "case_type": "block"}
{"generated_code": " rand, 16, 16).generate            super.decorate(world, rand, x, z);\n        }\n\n        new WorldGenCoffeePlant(world, rand, COFFEE_PLANT_AMOUNT).generate(x, 0, z);\n        new WorldGenTCUndergrowth(world, rand, UNDERGROWTH_AMOUNT).generate(x, 0, z);\n\n        //  System.out.println(\"Decorating!!!\");\n\n        //  System.out.println(\"Decorating!!!\");\n\n        //  System.out.println(\"Decorating!!!\");\n\n        //  System.out.println(\"Decorating!!!\");\n\n        //  System.out.println(\"Decorating!!!\");\n\n        //  System.out.println(\"Decorating!!!\");\n\n        //  System.out.println(\"Decorating!!!\");\n\n        //  System.out.println(\"Decorating!!!\");\n\n        //  System.out.println(\"Decorating!!!\");", "reference_code": "\n        if (DISABLEDECORATION) {\n            System.out.println(\"decoration disabled via BiomeGenTropics.DISABLEDECORATION, \" + this);\n            return;\n        }\n\n", "case_type": "block"}
{"generated_code": "    private Repository getLocalRepository() throws IOException {\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if the local path is a git repository\n        // TODO: check if", "reference_code": "    private Repository getLocalRepository() throws IOException {\n", "case_type": "block"}
{"generated_code": "      StepExecutionContext context, StepEvent stepEvent, String buildTargetName) {\n    LOG.verbose(\"%s for build rule <%s>\", stepEvent, buildTargetName);\n  }\n\n  /**\n   * Logs a {@link StepEvent} with the given command.\n   *\n   * @param context the {@link StepExecutionContext} containing information and console logging\n   *     utilities for the {@link Step}\n   * @param stepEvent the {@link StepEvent} to log\n   * @param buildTargetName the name of the build target\n   * @param command the command to log\n   */\n  @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n  // This is a very specific case of the PMD rule PMD001.\n  // We want to avoid duplicating literal strings.\n  // See https://pmd.github.io/pmd-6.25.0/pmd_rules_java.html#pmd001\n  // for more information.\n  @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n  // This", "reference_code": "      StepExecutionContext context, StepEvent stepEvent, String buildTargetName) {\n    logStepEvent(context, stepEvent, buildTargetName, ImmutableList.of());\n  }\n\n", "case_type": "block"}
{"generated_code": "import nth.sprite.vetsupport.basicsprites.ImageSprite;\nimport nth.sprite.vetsupport.basicsprites.Constants;\nimport java.awt.Canvas;\nimport java.awt.Image;\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport javax.imageio.ImageIO;\nimport javax.swing.ImageIcon;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTextField;\nimport javax.swing.border.EmptyBorder;\nimport javax.swing.border.LineBorder;\nimport javax.swing.border.TitledBorder;\nimport javax.swing.text.JTextComponent;\nimport javax.swing.text.JTextPane;\nimport javax.swing.text.StyledEditorKit;\nimport javax.swing.text.StyleConstants;\nimport javax.swing.text.StyleContext;\nimport javax.swing.text.StyledDocument;\nimport javax.swing.text.html.", "reference_code": "import nth.sprite.Canvas;\nimport nth.sprite.ImageSprite;\nimport nth.sprite.vetsupport.Constants;\n", "case_type": "block"}
{"generated_code": "    public FacultyMemberNotFoundException() {\n        super(\"Faculty Member\");\n    }\n\n    public FacultyMemberNotFoundException(String id) {\n        super(\"Faculty Member\", id);\n    }\n\n    public FacultyMemberNotFoundException(@Nullable String id, Throwable cause) {\n        super(\"Faculty Member\", id, cause);\n    }\n\n    public FacultyMemberNotFoundException(Throwable cause) {\n        super(\"Faculty Member\", cause);\n    }\n\n    public FacultyMemberNotFoundException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n        super(\"Faculty Member\", message, cause, enableSuppression, writableStackTrace);\n    }\n\n    public FacultyMemberNotFoundException(String message, Throwable cause) {\n        super(\"Faculty Member\", message, cause);\n    }\n\n    public FacultyMemberNotFoundException(String message) {\n        super(\"Faculty Member\", message);\n    }\n\n    public FacultyMemberNotFoundException() {\n\n    }\n\n    public FacultyMemberNotFoundException(String message, Throwable", "reference_code": "    public FacultyMemberNotFoundException() {\n", "case_type": "block"}
{"generated_code": "\n    public static String getTwoNodeClusterDefinitionsXml() {\n        return readString(\"config/two-node-cluster-definitions.xml\");\n    }\n\n    public static String getTwoNodeClusterDefinitionsXmlWithNoVersionStore() {\n        return readString(\"config/two-node-cluster-definitions-no-version-store.xml\");\n    }\n\n    public static String getTwoNodeClusterDefinitionsXmlWithNoVersionStoreAndCompressedStore() {\n        return readString(\"config/two-node-cluster-definitions-no-version-store-and-compressed-store.xml\");\n    }\n\n    public static String getTwoNodeClusterDefinitionsXmlWithNoVersionStoreAndCompressedStoreAndViewStore() {\n        return readString(\"config/two-node-cluster-definitions-no-version-store-and-compressed-store-and-view-store.xml\");\n    }\n\n    public static String getTwoNodeClusterDefinitionsXmlWithNoVersionStoreAndCompressedStoreAndViewStoreAndSingleStore() {\n        return readString(\"config/two-node-cluster-", "reference_code": "\n    public static String getStoreDefinitionsWithRetentionXml() {\n        return readString(\"config/store-with-retention.xml\");\n    }\n\n", "case_type": "block"}
{"generated_code": " CommonPackage.STRING_TO_OBJECT_MAP__VALUE, oldValue,\n                    value));\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    public EObject eRepresentation() {\n        return this;\n    }\n\n    /**\n         * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    public EMap.Entry<String, Object> eEntry() {\n        return this;\n    }\n\n    /**\n         * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n     * @generated\n     */\n    @Override\n    public String toString() {\n        return \"StringToObjectMapImpl [key=\" + key + \", value=\" + value + \"]\";\n    }\n\n    /**\n         * <!-- begin-user-doc --> <!-- end-user-doc -->\n     * \n", "reference_code": "        return getTypedKey();\n    }\n\n    /**\n     * <!-- begin-user-doc --> <!-- end-user-doc -->\n", "case_type": "block"}
{"generated_code": "> 8) & 0x00FF  public int encode(ByteBuffer dos) throws IOException {\n  dos.putLong(time_usec);\n  dos.putFloat(flow_comp_m_x);\n  dos.putFloat(flow_comp_m_y);\n  dos.putFloat(ground_distance);\n  dos.putShort((short)(flow_x&0x00FFFF));\n  dos.putShort((short)(flow_y&0x00FFFF));\n  dos.put((byte)(sensor_id&0x00FF));\n  dos.put((byte)(quality&0x00FF));\n  return 8+26;\n}\n\n}\n\n  public String toString() {\n  return \"msg_optical_flow: time_usec=\"+time_usec+\", flow_comp_m_x=\"+flow_comp_m_x+\", flow_comp_m_y=\"+flow_comp_m_y+\", ground_distance=\"+ground_distance+\", flow_x=\"+flow_x+\", flow", "reference_code": "  sensor_id = (int)dis.get()&0x00FF;\n  quality = (int)dis.get()&0x00FF;\n}\n\npublic byte[] encode() throws IOException {\n", "case_type": "block"}
{"generated_code": "    public boolean isMapToResources() {\n        return mapToResources;\n    }\n\n    public Map<String, AssetObject> getObjects() {\n        // TODO: should this be immutable?\n        // TODO: should this be a copy?\n        // TODO: should this be a view?\n        // TODO: should this be a map?\n        // TODO: should this be a set?\n        // TODO: should this be a list?\n        // TODO: should this be a queue?\n        // TODO: should this be a stack?\n        // TODO: should this be a tree?\n        // TODO: should this be a graph?\n        // TODO: should this be a graph?\n        // TODO: should this be a graph?\n        // TODO: should this be a graph?\n        // TODO: should this be a graph?\n        // TODO: should this be a graph?\n        // TODO: should this be a graph?\n        // TODO: should this be a graph?\n        // TODO: should this be a graph?\n        // TODO: should this be a graph?\n        // TODO: should this be a graph?\n", "reference_code": "    public Map<String, AssetObject> getObjects() {\n", "case_type": "block"}
{"generated_code": "            Method method = targetObject.getClass().getDeclaredMethod(methodName, argClasses);\n            // this makes private methods accessible\n            method.setAccessible(true);\n            result = method.invoke(targetObject, argObjects);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static Object invokeMethod(Object targetObject, String methodName, Class[] argClasses, Object[] argObjects, Class targetClass) {\n        Object result = null;\n        try {\n            Method method = targetClass.getDeclaredMethod(methodName, argClasses);\n            // this makes private methods accessible\n            method.setAccessible(true);\n            result = method.invoke(targetObject, argObjects);\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return result;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    public static Object invokeMethod(Object targetObject, String methodName, Class[] argClasses, Object[] argObjects,", "reference_code": "            Method method = targetObject.getClass().getDeclaredMethod(methodName, argClasses);\n            // this makes private methods accessible\n            method.setAccessible(true);\n            result = method.invoke(targetObject, argObjects);\n\n", "case_type": "block"}
{"generated_code": "    }\n\n    /** {@inheritDoc} */\n    @Override\n    public VType getData(int index) {\n        return null;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public Timestamp getTimestamp(int index) {\n        return null;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public int getSize() {\n        return 0;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public boolean isEmpty() {\n        return true;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public boolean isSingleValue() {\n        return true;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public VType getSingleValue() {\n        return null;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public Timestamp getSingleTimestamp() {\n        return null;\n    }\n\n    /** {@inheritDoc} */\n    @Override\n    public boolean isSingleTimestampOnly() {\n        return true;\n    }\n\n    /** {@inherit", "reference_code": "    }\n\n", "case_type": "block"}
{"generated_code": "        currentState.walk();\n    }\n\n    void run() {\n        currentState.run();\n    }\n\n    void jump() {\n        currentState.jump();\n    }\n\n    void getUp() {\n        currentState.getUp();\n    }\n\n    void getLeft() {\n        currentState.getLeft();\n    }\n\n    void getRight() {\n        currentState.getRight();\n    }\n\n    void getBack() {\n        currentState.getBack();\n    }\n\n    void getForward() {\n        currentState.getForward();\n    }\n\n    void getSit() {\n        currentState.getSit();\n    }\n\n    void getStand() {\n        currentState.getStand();\n    }\n\n    void getCrouch() {\n        currentState.getCrouch();\n    }\n\n    void getSneak() {\n        currentState.getSneak();\n    }\n\n    void getSprint() {\n        currentState.getSprint();\n    }\n\n    void getSprintS", "reference_code": "        currentState.walk();\n    }\n\n    void getUp() {\n        currentState.getUp();\n", "case_type": "block"}
{"generated_code": "    org.eclipse.gef.requests.CreateHandleRequest;\nimport org.eclipse.gef.requests.MoveHandleRequest;\nimport org.eclipse.gmf.tooling.runtime.edit.policies.NonResizableEditPolicyEx;\nimport org.eclipse.gmf.tooling.runtime.edit.policies.WrappingLabel;\n\nimport model.diagram.edit.figures.ModelTextFigure;\n\npublic class ModelTextNonResizableEditPolicy extends NonResizableEditPolicyEx {\n\n    /**\n    * @generated\n    */\n    protected void showPrimarySelection() {\n        showSelection();\n    }\n\n    /**\n    * @generated\n    */\n    protected void showSelection() {\n        showFocus();\n    }\n\n    /**    org.eclipse.gef.requests.ResizeHandleRequest;\nimport org.eclipse.gef.requests.RotateHandleRequest;\nimport org.eclipse.gmf.tooling.runtime.edit.policies.NonResizableEditPolicyEx;\nimport org.eclipse.gmf.tooling.runtime.edit.polic", "reference_code": "import org.eclipse.gmf.runtime.diagram.ui.editpolicies.NonResizableEditPolicyEx;\nimport org.eclipse.gmf.runtime.diagram.ui.tools.DragEditPartsTrackerEx;\nimport org.eclipse.gmf.runtime.draw2d.ui.figures.WrappingLabel;\n", "case_type": "block"}
{"generated_code": "import javax.xml.bind.annotation.XmlAccessorType;\nimport javax.xml.bind.annotation.XmlElement;\nimport javax.xml.bind.annotation.XmlSchemaType;\nimport javax.xml.bind.annotation.XmlType;\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"StatusExtension\", propOrder = {\n    \"status\"\n})\npublic class StatusExtension\n    extends AllExtension\n{\n    @XmlElement(required = true)\n    @XmlSchemaType(name = \"string\")\n    protected String status;\n\n    public String getStatus() {\n        return status;\n    }\n\n    public void setStatus(String value) {\n        this.status = value;\n    }\n\n}\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"StatusExtensionType\")\nclass StatusExtensionType\n    extends AllExtensionType\n{\n\n}\n\n@XmlAccessorType(XmlAccessType.FIELD)\n@XmlType(name = \"StatusExtension\", propOrder = {\n    \"status\"\n})\nclass StatusExtensionType", "reference_code": "import javax.xml.bind.annotation.XmlAccessorType;\n", "case_type": "block"}
{"generated_code": "\n  @Override\n  public CallReason build() {\n    return (CallReason) super.build();\n  }\n\n  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {\n    com.google.api.client.util.DataUtils.writeString(out, text);\n  }\n\n  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n    text = com.google.api.client.util.DataUtils.readString(in);\n  }\n\n  @Override\n  public String toString() {\n    return com.google.api.client.util.DataUtils.prettyPrint(this);\n  }\n\n  @Override\n  public boolean equals(Object obj) {\n    return com.google.api.client.util.DataUtils.equal(this, obj);\n  }\n\n  @Override\n  public int hashCode() {\n    return com.google.api.client.util.DataUtils.hashCode(this);\n  }\n\n  @Override\n  public CallReason clone() {\n    return", "reference_code": "\n  @Override\n  public CallReason clone() {\n    return (CallReason) super.clone();\n  }\n", "case_type": "block"}
{"generated_code": "    private static final Field XSSF_SHEET_FIELD = FieldUtils.getDeclaredField(SXSSFWorkbook.class, XSSF_SHEET_MEMBER_VARIABLE_NAME);\n\n    @Override\n    public void write(WriteWorkbookHolder writeWorkbookHolder) {\n        if (writeWorkbookHolder == null) {\n            log.debug(\"WriteWorkbookHolder is null.\");\n            return;\n        }\n        if (!writeWorkbookHolder.isAutoDimension()) {\n            log.debug(\"AutoDimension is false.\");\n            return;\n        }\n        if (!writeWorkbookHolder.isAutoDimension()) {\n            log.debug(\"AutoDimension is false.\");\n            return;\n        }\n        if (!writeWorkbookHolder.isAutoDimension()) {\n            log.debug(\"AutoDimension is false.\");\n            return;\n        }\n        if (!writeWorkbookHolder.isAutoDimension()) {\n            log.debug(\"AutoDimension is false.\");\n            return;\n        }\n        if (!writeWorkbookHolder.isAutoDimension()) {\n            log", "reference_code": "    private static final Field XSSF_SHEET_FIELD = FieldUtils.getField(SXSSFSheet.class, XSSF_SHEET_MEMBER_VARIABLE_NAME,\n        true);\n\n    @Override\n    public void afterWorkbookDispose(WriteWorkbookHolder writeWorkbookHolder) {\n        if (writeWorkbookHolder == null || writeWorkbookHolder.getWorkbook() == null) {\n", "case_type": "block"}
{"generated_code": "        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar_detail_tweet);\n        setSupportActionBar(toolbar);\n\n        // Set the toolbar title and icon\n        getSupportActionBar().setTitle(\"Tweet\");\n        getSupportActionBar().setSubtitle(tweet.getUser().getName());\n\n        // Set the toolbar logo\n        getSupportActionBar().setLogo(R.drawable.twitter_logo_trans);\n        getSupportActionBar().setDisplayUseLogoEnabled(true);\n\n        // Set the toolbar subtitle\n        getSupportActionBar().setSubtitle(tweet.getUser().getName());\n\n        // Set the toolbar title\n        getSupportActionBar().setTitle(\"Tweet\");\n\n        // Set the toolbar icon\n        getSupportActionBar().setIcon(R.drawable.twitter_logo_trans);\n\n        // Set the toolbar display options\n        getSupportActionBar().setDisplayShowTitleEnabled(false);\n        getSupportActionBar().setDisplayShowHomeEnabled(true);\n        getSupportActionBar().setLogo", "reference_code": "        // Find the toolbar view inside the activity layout\n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbarDetailTweet);\n        // Sets the Toolbar to act as the ActionBar for this Activity window.\n", "case_type": "block"}
{"generated_code": "            return;\n        }\n        closure.call();\n    }\n\n    public DefaultAction(String name) {\n        super(name);\n    }\n\n    public DefaultAction(String name, Closure closure) {\n        super(name);\n        this.closure = closure;\n    }\n\n    public DefaultAction(String name, Icon icon) {\n        super(name, icon);\n    }\n\n    public DefaultAction(String name, Icon icon, Closure closure) {\n        super(name, icon);\n        this.closure = closure;\n    }\n\n    public DefaultAction(String name, Icon icon, Closure closure, boolean selected) {\n        super(name, icon, selected);\n        this.closure = closure;\n    }\n\n    public DefaultAction(String name, Icon icon, Closure closure, boolean selected, boolean enabled) {\n        super(name, icon, selected, enabled);\n        this.closure = closure;\n    }\n\n    public DefaultAction(String name, Icon icon, Closure closure, boolean selected, boolean enabled, Object mnemonic", "reference_code": "            throw new NullPointerException(\"No closure has been configured for this Action\");\n        }\n        closure.call(event);\n    }\n", "case_type": "block"}
{"generated_code": "     */\n    protected abstract void feedOrders() throws Exception;\n\n    /**\n     * Notifies all registered <code>OrderConsumer</code>s of an order.\n     *\n     * @param action the action of the order.\n     * @param order  the order.\n     * @see #registerHandler(OrderConsumer)\n     * @see #notifyStart()\n     * @see #notifyFinish()\n     * @see #feedOrders()\n     * @see #notifyOrder(Action, Order)\n     * @see #handleEvent(Action, Order)\n     * @see #startProcessing(Log)\n     * @see #finishProcessing()\n     * @see #AbstractAppEnvironment(LogLevel)\n     * @see #log\n     * @see #logLevel\n     * @see #consumers\n     * @see #log\n     * @see #logLevel\n     * @see #consumers\n     * @see #log\n     * @see #logLevel\n     * @see #consumers\n     * @see #log\n     * @see #logLevel\n     * @see", "reference_code": "     */\n    protected abstract void feedOrders() throws Exception;\n\n    /**\n     * Invokes {@link katas.groovy.orderbook.v1.iface.OrderConsumer#handleEvent(katas.groovy.orderbook.v1.iface.Action, katas.groovy.orderbook.v1.iface.Order)} for every registered consumer with\n", "case_type": "block"}
{"generated_code": "        for (Container c : containers) {\n            sb.append(c.getId()).append(\" \");\n        }\n        sb.append(\"--wait-for-ready\");\n        sb.append(\" --wait-for-ready-timeout 30000\");\n        sb.append(\" --wait-for-ready-interval 1000\");\n        sb.append(\" --wait-for-ready-interval 1000\");\n        sb.append(\" --wait-for-ready-interval 1000\");\n        sb.append(\" --wait-for-ready-interval 1000\");\n        sb.append(\" --wait-for-ready-interval 1000\");\n        sb.append(\" --wait-for-ready-interval 1000\");\n        sb.append(\" --wait-for-ready-interval 1000\");\n        sb.append(\" --wait-for-ready-interval 1000\");\n        sb.append(\" --wait-for-ready-interval 1000\");\n        sb.append(\" --wait-for-ready-interval 10", "reference_code": "        for (Container c : containers) {\n            sb.append(c.getId()).append(\" \");\n        }\n", "case_type": "block"}
{"generated_code": "                   return podList;\n        } catch (Exception e) {\n            handleException(e);\n            return null;\n        }\n    }\n\n    @Override\n    public void handleExport(@Observes @Export Object object) {\n        ExportManager exportManager = BeanContext.getBean(ExportManager.class);\n        exportManager.export(this);\n    }\n\n    @Override\n    public void handleCancelled(@Observes @Cancelled Object object) {\n        super.handleCancelled(object);\n    }\n\n    public void handleCancelled(Cancelled cancelled) {\n        super.handleCancelled(cancelled);\n    }\n\n    public String viewPod() {\n        return viewPod(selectedRecordKey);\n    }\n\n    public String viewPod(Object recordKey) {\n        Pod pod = recordByKeyMap.get(recordKey);\n        return viewPod(pod);\n    }\n\n    public String viewPod(Pod pod) {        try {\n            Collection<Pod> podList = podDataManager.getPodList();\n            return podList;\n", "reference_code": "            if (podList != null)\n                return podList;\n            return recordList;\n", "case_type": "block"}
{"generated_code": "    @Before\n    public void setUp() {\n    }\n\n    @After\n    public void tearDown() {\n        System.out.println(\"wordCount() is tested\");\n        WordCount instance = new WordCount();\n        instance.wordCount(\"C:\\\\Users\\\\Max\\\\Documents\\\\input.txt\", \"C:\\\\Users\\\\Max\\\\Documents\\\\output.txt\");\n\n        String exppath = \"C:\\\\Users\\\\Max\\\\Documents\\\\expected.txt\";\n        BufferedReader a = new BufferedReader(new FileReader(exppath));\n        BufferedReader b = new BufferedReader(new FileReader(\"C:\\\\Users\\\\Max\\\\Documents\\\\output.txt\"));\n        String lineA;\n        String lineB;\n\n        while (((lineA = a.readLine()) != null) && ((lineB = b.readLine()) != null)) {\n            Assert.assertEquals(lineA, lineB);\n        }\n\n        a.close();\n        b.close();\n\n    }\n\n    /**\n     * Test of WordCount constructor, of class WordCount.\n     */\n    @Test", "reference_code": "    @Before\n    public void setUp() {\n    }\n\n    @After\n    public void tearDown() {\n", "case_type": "block"}
{"generated_code": "    }\n\n    public boolean hasProjection() {\n        return !projections.isEmpty();\n    }\n\n    public void setProjection(Projection projection, Format format) {\n        projections.clear();\n        projections.add(projection);\n        formats.clear();\n        formats.add(format);\n    }\n\n    public boolean hasProjection(Projection projection, Format format) {\n        return projections.contains(projection) && formats.contains(format);\n    }\n\n    public void setProjection(Projection projection, Format format, String metadataUuid) {\n        projections.clear();\n        projections.add(projection);\n        formats.clear();\n        formats.add(format);\n        this.metadataUuid = metadataUuid;\n    }\n\n    public boolean hasProjection(Projection projection, Format format, String metadataUuid) {\n        return projections.contains(projection) && formats.contains(format) && this.metadataUuid.equals(metadataUuid);\n    }\n\n    public void setProjection(Projection projection, String metadataUuid) {", "reference_code": "    }\n", "case_type": "block"}
{"generated_code": "                \"orderNo='\" + orderNo + '\\'' +\n                \", amount=\" + amount +\n                \", state='\" + state + '\\'' +\n                '}';\n    }\n\n    public String getOrderNo() {\n        return orderNo;\n    }\n\n    public void setOrderNo(String orderNo) {\n        this.orderNo = orderNo;\n    }\n\n    public int getAmount() {\n        return amount;\n    }\n\n    public void setAmount(int amount) {\n        this.amount = amount;\n    }\n\n    public String getState() {\n        return state;\n    }\n\n    public void setState(String state) {\n        this.state = state;\n    }\n\n    public String toString1() {\n        return \"DuiZhan{\" +\n                \"orderNo='\" + orderNo + '\\'' +\n                \", amount=\" + amount +\n                \", state='\" + state + '\\'' +\n                '}';\n    }\n\n    public String toString2() {\n        return \"DuiZhan{\" +\n                \"orderNo", "reference_code": "                \"orderNo='\" + orderNo + '\\'' +\n", "case_type": "block"}
{"generated_code": "  @Override\n  public String toString() {\n    final StringBuilder sb = new StringBuilder(\"ExecutionNode{\");\n    sb.append(\"nodeId=\").append(nodeId);\n    sb.append(\", parallelism=\").append(parallelism);\n    sb.append(\", executionTasks=\").append(executionTasks);\n    sb.append(\", inputsEdges=\").append(inputsEdges);\n    sb.append(\", outputEdges=\").append(outputEdges);\n    sb.append(\", nodeId=\").append(nodeId);\n    sb.append(\", parallelism=\").append(parallelism);\n    sb.append(\", executionTasks=\").append(executionTasks);\n    sb.append(\", inputsEdges=\").append(inputsEdges);\n    sb.append(\", outputEdges=\").append(outputEdges);\n    sb.append(\", nodeId=\").append(nodeId);\n    sb.append(\", parallelism=\").append(parallelism);\n    sb.append(\", executionTasks=\").append(executionTasks);\n    sb.append(\", inputsEdges=\").append", "reference_code": "  @Override\n  public String toString() {\n    final StringBuilder sb = new StringBuilder(\"ExecutionNode{\");\n    sb.append(\"nodeId=\").append(nodeId);\n    sb.append(\", parallelism=\").append(parallelism);\n", "case_type": "block"}
{"generated_code": "   *\n   * <pre>\n   * Precision-recall curve.\n   * </pre>\n   *\n   * <code>.google.cloud.datalabeling.v1beta1.PrCurve pr_curve = 1;</code>\n   *\n   * @return The prCurve.\n   */\n  com.google.cloud.datalabeling.v1beta1.PrCurve getPrCurve();\n  /**\n   *\n   *\n   * <pre>\n   * Precision-recall curve.\n   * </pre>\n   *\n   * <code>.google.cloud.datalabeling.v1beta1.PrCurve pr_curve = 1;</code>\n   *\n   * @return The bytes for prCurve.\n   */\n  com.google.protobuf.ByteString getPrCurveBytes();\n\n  /**\n   *\n   *\n   * <pre>\n   * Precision-recall curve.\n   * </pre>\n   *\n   * <code>.google.cloud.", "reference_code": "   *\n   * <pre>\n   * Precision-recall curve.\n", "case_type": "block"}
{"generated_code": "WorldInfo().isRaining() && worldObj.getWorldInfo().isThundering())\n            return        if (mop.isInWater() && mop.isInLava())\n            mop.fallDistance = 0.0F;\n        if (mop.isInWater() && !mop.isInLava())\n            mop.fallDistance = 0.1F;\n        if (!mop.isInWater() && mop.isInLava())\n            mop.fallDistance = 0.2F;\n        if (!mop.isInWater() && !mop.isInLava())\n            mop.fallDistance = 0.3F;\n        mop.fallDistance *= mop.fallSpeed;\n        mop.fallDistance *= mop.onGround ? 1.0F : 0.5F;\n        mop.fallDistance *= mop.onGround ? 1.0F : 0.5F;\n        mop.fallDistance *= mop.onGround ? 1.0F : 0.5F;\n", "reference_code": "        spawnHitParticles(\"bubble\", 18);\n        this.setDead();\n", "case_type": "block"}
{"generated_code": "        Map<String, Object> requestContext = ((BindingProvider) port).getRequestContext();\n        requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, params.getCachedStringValue(ParameterKey.SERVICE_ENDPOINT));\n        return port;\n    }\n\n    public void setPort(BridgeConnectorPortType vesselPort) {\n        this.vesselPort = vesselPort;\n        FluxMessageSenderBean.setPort(vesselPort);\n        LOG.info(\"Port set to: {}\", vesselPort);\n        LOG.info(\"Port set to: {}\", FluxMessageSenderBean.getPort());\n        LOG.info(\"Port set to: {}\", FluxMessageSenderBean.getPort());\n        LOG.info(\"Port set to: {}\", FluxMessageSenderBean.getPort());\n        LOG.info(\"Port set to: {}\", FluxMessageSenderBean.getPort());\n        LOG.info(\"Port set to: {}\", FluxMessageSenderBean.getPort());\n        LOG.info(\"Port set to: {}\", FluxMessageSenderBean.", "reference_code": "        BindingProvider bp = (BindingProvider) port;\n        Map<String, Object> context = bp.getRequestContext();\n        context.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, params.getCachedStringValue(ParameterKey.SERVICE_ENDPOINT));\n        return port;\n", "case_type": "block"}
{"generated_code": "            UThFractionationCorrectedIsotopicRatios.valueOf( checkString );\n            retVal = true;\n        } catch (NullPointerException e) {\n            retVal = false;\n        } catch (IllegalStateException e) {\n            retVal = false;\n        } catch (IllegalArgumentException e) {\n            retVal = false;\n        }\n\n        return retVal;\n    }\n\n    /**\n     * \n     * @param checkString\n     * @return\n     */\n    public static boolean contains ( String checkString, boolean ignoreCase ) {\n        boolean retVal = true;\n        try {\n            UThFractionationCorrectedIsotopicRatios.valueOf( checkString, ignoreCase );\n            retVal = true;\n        } catch (NullPointerException e) {\n            retVal = false;\n        } catch (IllegalStateException e) {\n            retVal = false;\n        } catch (IllegalArgumentException e) {\n            retVal = false;\n        }\n\n        return retVal;\n    }\n\n    /**\n     *", "reference_code": "            UThFractionationCorrectedIsotopicRatios.valueOf( checkString );\n", "case_type": "block"}
{"generated_code": "     * Instantiates a new Kohonen node.\n     */\n    public KohonenNode() {\n        weight = new double[0];\n    }\n\n    /**\n     * Instantiates a new Kohonen node.\n     *\n     * @param weight the weight\n     */\n    public KohonenNode(double[] weight) {\n        this.weight = weight.clone();\n    }\n\n    /**\n     * Gets weight.\n     *\n     * @return the weight\n     */\n    public double[] getWeight() {\n        return weight;\n    }\n\n    /**\n     * Sets weight.\n     *\n     * @param weight the weight\n     */\n    public void setWeight(double[] weight) {\n        this.weight = weight.clone();\n    }\n\n    /**\n     * Gets weight.\n     *\n     * @param index the index\n     * @return the weight\n     */\n    public double getWeight(int index) {\n        return weight[index];\n    }\n\n    /**\n     * Sets weight.\n     *\n     * @param", "reference_code": "     * Instantiates a new Kohonen node.\n     *\n     * @param weightInit the weight init\n     */\n    public KohonenNode(double[] weightInit) {\n        weight = weightInit.clone();\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Override\n    public String getDescription() {\n        return \"Busbar section tripping\";\n    }\n\n    @Override\n    public String getId() {\n        return \"busbar-section-\" + busbarSectionId;\n    }\n\n    @Override\n    public String getType() {\n        return \"busbar-section\";\n    }\n\n    @Override\n    public String getBusbarSectionId() {\n        return busbarSectionId;\n    }\n\n    @Override\n    public String toString() {\n        return getDescription();\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        BusbarSectionTripping that = (BusbarSectionTripping) o;\n        return Objects.equals(busbarSectionId, that.busbarSectionId);\n    }\n\n    @Override\n    public int hashCode() {\n        return Objects.hash(busbarSectionId);\n    }\n\n    @", "reference_code": "    }\n", "case_type": "block"}
{"generated_code": "    Feedback feedback = Feedback.fetch(\"FL1234567890abcdef01234567890abcdef\");\n    System.out.println(feedback.getSid());\n    System.out.println(feedback.getAccountSid());\n    System.out.println(feedback.getCallSid());\n    System.out.println(feedback.getUrl());\n    System.out.println(feedback.getStatus());\n    System.out.println(feedback.getComment());\n    System.out.println(feedback.getIssue());\n    System.out.println(feedback.getIssueSid());\n    System.out.println(feedback.getIssueType());\n    System.out.println(feedback.getIssueUrl());\n    System.out.println(feedback.getIssueDescription());\n    System.out.println(feedback.getIssueCategory());\n    System.out.println(feedback.getIssueSubcategory());\n    System.out.println(feedback.getIssueSubcategoryDescription", "reference_code": "    Feedback feedback = Feedback.fetcher(\"CA42ed11f93dc08b952027ffbc406d0868\").fetch();\n", "case_type": "block"}
{"generated_code": "import net.sf.jabref.logic.layout.LayoutFormatter;\n\nimport java.util.regex.Matcher;\n\nimport static net.sf.jabref.logic.util.StringUtil.isBlank;\n\n@SuppressWarnings(\"unused\")\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated", "reference_code": "import net.sf.jabref.logic.layout.LayoutFormatter;\n\n", "case_type": "block"}
{"generated_code": "import java.util.List;\nimport java.util.concurrent.Future;\n\nimport akka.actor.ActorRef;\nimport akka.actor.ActorSystem;\nimport akka.actor.Props;\nimport akka.japi.pf.DeciderBuilder;\nimport akka.routing.RoundRobinPool;\nimport akka.util.Timeout;\nimport scala.concurrent.Await;\nimport scala.concurrent.duration.Duration;\n\nimport akka.actor.ActorRef;\nimport akka.actor.ActorSystem;\nimport akka.actor.Props;\nimport akka.japi.pf.DeciderBuilder;\nimport akka.routing.RoundRobinPool;\nimport akka.util.Timeout;\nimport akka.actor.ActorRef;\nimport akka.actor.ActorSystem;\nimport akka.actor.Props;\nimport akka.japi.pf.DeciderBuilder;\nimport akka.routing.RoundRobinPool;\n", "reference_code": "import java.util.List;\n\nimport scala.concurrent.Await;\nimport scala.concurrent.Future;\nimport scala.concurrent.duration.Duration;\nimport akka.actor.ActorRef;\n", "case_type": "block"}
{"generated_code": " public void setDateFailure(java.lang.String p0);\n public void setDateProcessed(java.lang.String p0);\n public void setDateSent(java.lang.String p0);\n public void setDescription(java.lang.String p0);\n public void setRequestType(java.lang.String p0);\n public void setSpecialTime(java.lang.String p0);\n public void setStatus(java.lang.String p0);\n public void setUserId(int p0);\n public void setUserId(java.lang.Integer p0);\n public void setReportedViaTelephone(boolean reported);\n\n public void setDateFailure(java.lang.String p0);\n public void setDateProcessed(java.lang.String p0);\n public void setDateSent(java.lang.String p0);\n public void setDescription(java.lang.String p0);\n public void setRequestType(java.lang.String p0);\n public void setSpecialTime(java.lang.String p0);\n public void setStatus(java.lang.String p0);\n public void setUserId(int", "reference_code": " public void initializeAttributes();\n", "case_type": "block"}
{"generated_code": "_CLUSTER_NAME);\n    interpreter = new ElasticsearchInterpreter(props);\n  }\n\n  @AfterClass\n  public static void tearDown() throws IOException {\n    elsClient.admin().indices().delete(new DeleteIndexRequest(\"logs\")).get();\n    elsNode.close();\n  }\n\n  @Test\n  public void testInterpreter() throws Exception {\n    final InterpreterResult result = interpreter.execute(\"GET /zeppelin/\");\n    Assert.assertEquals(Code.SUCCESS, result.getCode());\n    Assert.assertEquals(200, result.getStatus());\n    Assert.assertTrue(result.getData().contains(\"<html>\"));\n    Assert.assertTrue(result.getData().contains(\"<title>Zeppelin</title>\"));\n\n    result = interpreter.execute(\"GET /zeppelin/\");\n    Assert.assertEquals(Code.SUCCESS, result.getCode());\n    Assert.assertEquals(200, result.getStatus());\n    Assert.assertTrue(result.getData().contains(\"<html", "reference_code": "            \" { \\\"terms\\\" : { \\\"field\\\" : \\\"status\\\" } } } }\", null);\n    assertEquals(Code.SUCCESS, res.code());\n  }\n\n", "case_type": "block"}
{"generated_code": ") {\n      result    return labDao.getLab(id);\n  }\n\n  @Override\n  public List<Lab> list(String search) throws IOException {\n    return labDao.searchLabs(search);\n  }\n\n  @Override\n  public List<Lab> list(String search, Long instituteId) throws IOException {\n    return labDao.searchLabs(search, instituteId);\n  }\n\n  @Override\n  public List<Lab> list(Long instituteId) throws IOException {\n    return labDao.getLabs(instituteId);\n  }\n\n  @Override\n  public List<Lab> list(Long instituteId, String search) throws IOException {\n    return labDao.searchLabs(search, instituteId);\n  }\n\n  @Override\n  public List<Lab> list(Long instituteId, String search, boolean archived) throws IOException {\n    return labDao.searchLabs(search, instituteId, archived);\n  }\n\n  @Override\n  public List<Lab> list(Long instituteId,", "reference_code": "    authorizationManager.throwIfUnauthenticated();\n    return labDao.getLab(id);\n  }\n\n", "case_type": "block"}
{"generated_code": "    }\n\n    public static void generate(World world, Coord pos, Cardinal dir, Door type, boolean open){\n        Coord cursor = pos.clone();\n        cursor.add(dir);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n        cursor.add(Cardinal.UP);\n       ", "reference_code": "    }\n\n    public static void generate(World world, Coord pos, Cardinal dir, Door type, boolean open){\n\n        Coord cursor = new Coord(pos);\n", "case_type": "block"}
{"generated_code": ", boolean isLeaf) {\n        HorizontalPanel panel = new HorizontalPanel();\n        panel.setSpacing(1);\n        panel.setWidth(\"100%\");\n\n        addItemToPanel(panel, new Image(resources.diskImage()), \"25px\");\n        addTextBoxToPanel(panel, new TextBoxLabel(), disks.get(0).getdisk_name(), \"\");\n        addTextBoxToPanel(panel, new TextBoxLabel(), String.valueOf(disks.size()), \"80px\");\n        addTextBoxToPanel(panel, new TextBoxLabel(), disks.get(0).getvmt_name(), \"160px\");\n        addValueLabelToPanel(panel, new DiskSizeLabel<Double>(), disks.get(0).getdisk_size(), \"110px\");\n        addValueLabelToPanel(panel, new DiskSizeLabel<Double>(), disks.get(0).getActualDiskSize(), \"110px\");\n        addValueLabelToPanel(panel, new FullDateTimeLabel(), disks.get(0).getdisk_creation_date(), \"1", "reference_code": "            addTextBoxToPanel(panel, new TextBoxLabel(), \"\", \"80px\");\n            addTextBoxToPanel(panel, new TextBoxLabel(), \"\", \"160px\");\n", "case_type": "block"}
{"generated_code": ";\n    }\n\n    @JsonAnyGetter\n    public Map<String, Object> getCustomFields() {\n        return customFields;\n    }\n\n    @JsonAnySetter\n    public void setCustomFields(final String name, final Object value) {\n        this.customFields.put(name, value);\n    }\n\n    public String getEventType() {        /**\n     * Custom fields are fields that you can add to your events to provide more information about the event.\n     *\n     * <br /><br />\n     *\n     * <strong>Note: The $ prefix is reserved for supported fields in the Events API.\n     * Custom field names may only contain alphanumeric characters and _.</strong>\n     *\n     * <br /><br />\n     *\n     * <strong>Custom fields are not required to be unique.</strong>\n     *\n     * <br /><br />\n     *\n     * <strong>Custom fields are not required to be indexed.</strong>\n     *\n     * <br /><br />\n     *\n    ", "reference_code": "     * <br /><br />\n     *\n     * It is important to name the field properly so that Sift Science can perform the relevant\n", "case_type": "block"}
{"generated_code": "import junit.framework.TestCase;\n\nimport org.fortiss.smg.websocket.impl.WebSocketImpl;\nimport org.fortiss.smg.websocket.impl.communication.SocketClient;\nimport org.fortiss.smg.websocket.impl.communication.SocketServer;\nimport org.fortiss.smg.websocket.impl.communication.SocketClient;\nimport org.fortiss.smg.websocket.impl.communication.SocketServer;\nimport org.fortiss.smg.websocket.impl.communication.SocketClient;\nimport org.fortiss.smg.websocket.impl.communication.SocketServer;\nimport org.fortiss.smg.websocket.impl.communication.SocketClient;\nimport org.fortiss.smg.websocket.impl.communication.SocketServer;\nimport org.fortiss.smg.websocket.impl.communication.SocketClient;\nimport org.fortiss.smg.websocket.impl.communication.SocketServer;\nimport org.fortiss.", "reference_code": "import junit.framework.TestCase;\n\nimport org.fortiss.smg.websocket.impl.WebSocketImpl;\n", "case_type": "block"}
{"generated_code": " headOperator : null,\n            inputGates,\n            inputDeserializers,\n            inputWatermarkGauges);\n\n        StreamMultipleInputProcessor<OUT> inputProcessor =\n            new StreamMultipleInputProcessor<>(selectionHandler, inputDeserializers, inputWatermarkGauges);\n        headOperator.setInputProcessor(inputProcessor);\n    }\n}\n        @Override\n        protected void createInputProcessor(\n                StreamConfig configuration, ClassLoader userClassLoader, TypeSerializer<?>[] inputDeserializers)\n                throws Exception {\n            checkState(inputDeserializers.length > 0);\n\n            InputGate[] inputGates = InputGateUtil.getInputGates(configuration, userClassLoader);\n            CheckpointedInputGate[] checkpointedInputGates = InputProcessorUtil.getCheckpointedInputGates(\n                configuration, userClassLoader);\n            createInputProcessor(inputGates, inputDeserializers, checkpointedInputGates);\n        }\n\n    @Override\n    protected void createInputProcessor(\n            StreamConfig configuration, ClassLoader userClassLoader, TypeSerializer<?", "reference_code": "    public void init() throws Exception {\n        StreamConfig configuration = getConfiguration();\n        ClassLoader userClassLoader = getUserCodeClassLoader();\n\n        TypeSerializer<?>[] inputDeserializers = configuration.getTypeSerializersIn(userClassLoader);\n", "case_type": "block"}
{"generated_code": "\n    @Override\n    public Object execute(ActionContext ctx, Object... sources) throws FrameworkException {\n\n        if (sources.length == 1) {\n\n            if (!(sources[0] instanceof GraphObject)) {\n                throw new FrameworkException(\"The first argument must be a GraphObject\");\n            }\n\n            GraphObject obj = (GraphObject)sources[0];\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.setCurrentNode(obj);\n\n            ctx.set", "reference_code": "\n    @Override\n    public Object apply(final ActionContext ctx, final GraphObject entity, final Object[] sources) throws FrameworkException {\n\n        if (sources != null && sources.length == 1) {\n\n", "case_type": "block"}
{"generated_code": "            } catch (IOException e) {\n\n                throw new JobException(e);\n            }\n\n        } else {\n\n            throw new JobException(\"Invalid arguments.\");\n\n        }\n    }\n\n    /**\n     * Write the given data to the stream.\n     *\n     * @param array A byte array of data.\n     */\n    public void write(byte[] array) {\n\n        if (array != null) {\n\n            write(array, 0, array.length);\n\n        } else {\n\n            throw new JobException(\"Invalid arguments.\");\n\n        }\n    }\n\n    /**\n     * Write the given data to the stream.\n     *\n     * @param b A byte of data.\n     */\n    public void write(byte b) {\n\n        if (getOutputStream() != null) {\n\n            try {\n\n                getOutputStream().write(b);\n                getOutputStream().flush();\n\n            } catch (IOException e) {\n\n                throw new JobException(e);\n            }\n\n        } else {\n\n            throw new JobException(\"Invalid arguments.\");\n", "reference_code": "            } catch (IOException ex) {\n            }\n", "case_type": "block"}
{"generated_code": "        this.r = r;\n    }\n\n    @Override\n    public String toString() {\n        return \"(\" + l + \", \" + r + \")\";\n    }\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and setters\n\n    //Getters and set", "reference_code": "        this.r = r;\n    }\n", "case_type": "block"}
{"generated_code": "        return requiredMessage;\n    }\n\n    public Object getValue() {\n        if (value == null && valueChoices != null && !valueChoices.isEmpty()) {\n            return valueChoices.get(0);\n        }\n\n        if (value == null) {\n            return \"\";\n        }\n\n        if (value instanceof String) {\n            return (String) value;\n        }\n\n        if (value instanceof Number) {\n            return (Number) value;\n        }\n\n        if (value instanceof Boolean) {\n            return (Boolean) value;\n        }\n\n        if (value instanceof List) {\n            return (List) value;\n        }\n\n        return value.toString();\n    }\n\n    public Object getValueOrDefault(Object defaultValue) {\n        if (value == null) {\n            return defaultValue;\n        }\n\n        if (value instanceof String) {\n            return (String) value;\n        }\n\n        if (value instanceof Number) {\n            return (Number) value;\n        }\n\n        if (value instanceof Boolean) {\n            return (Boolean", "reference_code": "        return requiredMessage;\n    }\n\n    public Object getValue() {\n", "case_type": "block"}
{"generated_code": "                            }\n                            if (line.equals(\"exit\")) {\n                                break;\n                            }\n                            if (line.equals(\"quit\")) {\n                                System.exit(0);\n                            }\n                            if (line.equals(\"reload\")) {\n                                System.gc();\n                                System.runFinalization();\n                                System.exit(0);\n                            }\n                            if (line.equals(\"restart\")) {\n                                System.exit(0);\n                            }\n                            if (line.equals(\"reload_all\")) {\n                                System.gc();\n                                System.runFinalization();\n                                System.gc();\n                                System.runFinalization();\n                                System.exit(0);\n                            }\n                            if (line.equals(\"restart_all\")) {\n                                System.gc();\n                                System.runFinalization();\n                                System.gc();\n                                System.runFinalization();\n                                System.exit(0);\n                            }\n                            if (line.equals(\"reload_all_and_restart\")) {\n                                System.gc();\n                                System.runFinalization();\n                                System.gc();\n", "reference_code": "\n                                // Scroll down\n                                d_console.setCaretPosition(d_console.getDocument().getLength());\n", "case_type": "block"}
{"generated_code": "            for (Section section : oldSections) {\n                if (!StringUtils.equals(section.getName(), KFS_SECTION_NAME)) {\n                    sections.add(section);\n                } else {\n                    break;\n                }\n            }\n            if (sections.isEmpty()) {\n                sections.add(new Section(KFS_SECTION_NAME));\n            } else {\n                for (int i = 0; i < sections.size(); i++) {\n                    if (!StringUtils.equals(sections.get(i).getName(), KFS_SECTION_NAME)) {\n                        sections.add(i, new Section(KFS_SECTION_NAME));\n                        break;\n                    }\n                }\n                if (sections.size() == oldSections.size()) {\n                    sections.add(new Section(KFS_SECTION_NAME));\n                } else {\n                    sections.remove(sections.size() - 1);\n                    sections.add(new Section(KFS_SECTION_NAME));\n                    sections.addAll(oldSections.subList(sections.size(), oldSections.size()));\n                   ", "reference_code": "            for (Section oldSection : oldSections) {\n                if (!StringUtils.equals(oldSection.getSectionTitle(), KFS_SECTION_NAME)) {\n                    sections.add(oldSection);\n", "case_type": "block"}
{"generated_code": "import android.animation.ObjectAnimator;\n\nimport com.flyco.animation.BaseAnimatorSet;\n\n@SuppressWarnings(\"deprecation\")\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n", "reference_code": "import com.nineoldandroids.animation.ObjectAnimator;\nimport com.flyco.animation.BaseAnimatorSet;\n\n", "case_type": "block"}
{"generated_code": "\n\n                           }\n            }\n            catch (Exception e)\n            {\n                ExampleUtil.showErrorMessage(e);\n            }\n        }\n    }\n\n    public static void main(String[] args)\n    {\n        new AppFrame();\n    }\n}\n\nclass ExampleUtil\n{\n    public static        SurfaceImageLayer imageLayer = new SurfaceImageLayer(new SurfaceImage(sourceFile));\n        imageLayer.setSector(sector);\n        imageLayer.setVisible(true);\n    }\n\n    public static File saveResourceToTempFile(String resourceName, String extension)\n    {\n        File file = new File(resourceName + extension);\n        ExampleUtil.class.getClassLoader().getResourceAsStream(resourceName + extension);\n        ExampleUtil.class.getClassLoader().getResourceAsStream(resourceName + extension);\n        ExampleUtil.class.getClassLoader().getResourceAsStream(resourceName + extension);\n        return        imageLayer.setVisible(true);\n    }\n\n    public static void importImagery()\n    {\n        // Import the imagery on", "reference_code": "import gov.nasa.worldwindx.examples.ApplicationTemplate;\nimport gov.nasa.worldwindx.examples.util.ExampleUtil;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.image.*;\n", "case_type": "block"}
{"generated_code": "import java.util.Calendar;\n\nimport android.support.v4.app.Fragment;\nimport android.view.View;\nimport android.widget.AdapterView;\nimport android.widget.AdapterView.OnItemClickListener;\nimport android.widget.ListView;\n\nimport com.example.android.golfscorekeeper.R;\nimport com.example.android.golfscorekeeper.adapter.ScheduleAdapter;\nimport com.example.android.golfscorekeeper.dataFormat.TimeDayPair;\nimport com.example.android.golfscorekeeper.fragments.ScheduleControlFragment;\nimport com.example.android.golfscorekeeper.util.TimeDayPairMap;\nimport com.example.android.golfscorekeeper.util.TimeDayPairMap.TimeDayPairMapType;\nimport com.example.android.golfscorekeeper.util.TimeDayPairMap.TimeDayPairMapType.TimeDayPairMapTypeEnum;\nimport com.example.android.golfscorekeeper.util.TimeDayPairMap.TimeDayPairMapType.TimeDayPairMapTypeEnum.TimeDayPairMapTypeEnum", "reference_code": "import java.util.Calendar;\n", "case_type": "block"}
{"generated_code": "package com.jinshuo.web.filter;\n\nimport com.jinshuo.util.UtilTool;\n\nimport play.Application;\nimport play.GlobalSettings;\nimport play.libs.Commons;\nimport play.libs.F.Callback;\nimport play.libs.F.Promise;\nimport play.mvc.EssentialFilter;\nimport play.mvc.GlobalSettings;\nimport play.mvc.Http.RequestHeader;\nimport play.mvc.Result;\nimport play.mvc.SimpleResult;\nimport play.mvc.filters.GzipFilter;\nimport play.mvc.filters.csrf.CSRFFilter;\nimport play.mvc.filters.csrf.CSRFToken;\nimport play.mvc.filters.csrf.CSRFTokenGenerator;\nimport play.mvc.filters.csrf.CSRFTokenGenerator.CSRFTokenGeneratorImpl;\nimport play.mvc.filters.csrf.CSRFTokenGenerator.CSRFTokenGeneratorImpl.CSRFTokenGeneratorImplImpl;\nimport play.mvc.fil", "reference_code": "import models.UtilTool;\n\nimport play.Application;\nimport play.GlobalSettings;\nimport play.api.mvc.EssentialFilter;\nimport play.filters.gzip.GzipFilter;\n", "case_type": "block"}
{"generated_code": "        super(args);\n        _fsCache = fsCache;\n    }\n\n    @Override\n    public nfs_opnum4 getOpnum() {\n        return nfs_opnum4.CLOSE;\n    }\n\n    @Override\n    public void process(CompoundContext context) throws ChimeraNFSException,\n            IOException {\n        process(context, new nfs_resop4());\n    }\n\n    @Override\n    public void process(CompoundContext context, nfs_resop4 result)\n            throws ChimeraNFSException, IOException {\n        process(context, result);\n    }\n\n    public void process(CompoundContext context, nfs_resop4 result)\n            throws ChimeraNFSException, IOException {\n        process(context, result);\n    }\n\n    public void process(CompoundContext context, nfs_resop4 result)\n            throws ChimeraNFSException, IOException {\n        process(context, result);\n    }\n\n    public void process(CompoundContext context, nfs_resop4 result)\n            throws Chim", "reference_code": "        super(args, nfs_opnum4.OP_CLOSE);\n        _fsCache = fsCache;\n    }\n\n", "case_type": "block"}
{"generated_code": ";\n        String[] urls = url.split(\",\");\n        for (String u : urls) {\n            conf.set(HConstants.ZOOKEEPER_QUORUM, u);\n        }\n        return conf;\n    }\n\n    public static String getHostName() throws UnknownHostException {\n        return InetAddress.getLocalHost().getHostName();\n    }\n\n    public static String getHostIp() throws UnknownHostException {\n        return InetAddress.getLocalHost().getHostAddress();\n    }\n\n    public static String getHostIp(String host)    }\n\n    public static String getHostName(String path) {\n        try {\n            FileSystem fs = FileSystem.get(getCurrentConfiguration());\n            return fs.getWorkingDirectory().toUri().getHost();\n        } catch (IOException e) {\n            throw new IllegalArgumentException(\"Cannot create FileSystem from current hadoop cluster conf\", e);\n        }\n    }\n\n    public static String getHostIp(String path) {\n        try {\n            FileSystem fs = FileSystem.get(get", "reference_code": "        }\n    }\n", "case_type": "block"}
{"generated_code": "    }\n\n    public void testSetSourceSets() {\n        final Set<String> value = new HashSet<String>();\n        lizardExtension.setSourceSets(value);\n        assertEquals(value, lizardExtension.getSourceSets());\n    }\n\n    public void testGetNumberOfThreads() {\n        assertEquals(Runtime.getRuntime().availableProcessors(), lizardExtension.getNumberOfThreads());\n        lizardExtension.setNumberOfThreads(1);\n        assertEquals(1, lizardExtension.getNumberOfThreads());\n        lizardExtension.setNumberOfThreads(0);\n        assertEquals(Runtime.getRuntime().availableProcessors(), lizardExtension.getNumberOfThreads());\n        lizardExtension.setNumberOfThreads(-1);\n        assertEquals(Runtime.getRuntime().availableProcessors(), lizardExtension.getNumberOfThreads());\n        lizardExtension.setNumberOfThreads(null);\n        assertEquals(Runtime.getRuntime().availableProcessors(), lizardExtension.getNumberOfThreads());\n        lizardExtension.setNumberOfThreads(\"\");\n        assertEquals(Runtime", "reference_code": "    }\n\n    public void testSetSourceSets() {\n        final Set<Object> value = new HashSet<Object>();\n        lizardExtension.setSourceSets(value);\n        assertEquals(value, lizardExtension.getSourceSets());\n", "case_type": "block"}
{"generated_code": "\n   */\n  private  public OvertypeTextArea() {\n    super();\n    addKeyListener(e -> {\n      // setCaretColor(Color.BLUE);\n      // setCaretColor(Color.GREEN);\n      // setCaretColor(Color.YELLOW);\n      // setCaretColor(Color.ORANGE);\n      // setCaretColor(Color.PINK);\n      // setCaretColor(Color.CYAN);\n      // setCaretColor(Color.MAGENTA);\n      // setCaretColor(Color.BLACK);\n      // setCaretColor(Color.DARK_GRAY);\n      // setCaretColor(Color.LIGHT_GRAY);\n      // setCaretColor(Color.WHITE);\n      // setCaretColor(Color.GRAY);\n      // setCaretColor(Color.RED);\n      // setCaretColor(Color.RED);\n      // setCaretColor(Color.RED);\n      // setCaretColor(Color.RED);\n      // setCaretColor(Color", "reference_code": "  @Override public void updateUI() {\n    super.updateUI();\n    EventQueue.invokeLater(() -> {\n", "case_type": "block"}
{"generated_code": " l.getFactory().Core().createTypeReference().setSimpleName(String.class.getName());\n        assertEquals(false,numericPROC.isNumber(type));\n\n    }\n\n    private static Object invokeExactMethod(Object o, String methodName, Object[] args) throws Exception {\n        return getAccessibleMethod(o.getClass(), methodName, true).invoke(o, args);\n    }\n\n}\n\n\n\n        // TEST BAD TYPE\n        CtTypeReference type =  l.getFactory().Core().createTypeReference().setSimpleName(String.class.getName());\n        assertEquals(false,numericPROC.isNumber(type));\n\n        // TEST BAD TYPE\n        type =  l.getFactory().Core().createTypeReference().setSimpleName(Boolean.class.getName());\n        assertEquals(false,numericPROC.isNumber(type));\n\n        // TEST BAD TYPE\n        type =  l.getFactory().Core().createTypeReference().setSimpleName(Character.class.getName());\n        assertEquals(false,numericPROC.isNumber(type));\n\n        //", "reference_code": "        // Fail On NOT declared variable\n        assertEquals(false,numericPROC.isToBeProcessed(candidate));\n\n        // TEST IsNumeric() on typeReference\n", "case_type": "block"}
{"generated_code": "ugin.getDefault().getImageRegistry();\n        imageDescriptors = new HashMap<String, ImageDescriptor>();\n           private static File getTempDir() {\n            File tempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n            File tempDir2 = new File(tempDir, \"wtp-webresources-images\");\n            tempDir2.mkdirs();\n            return tempDir2;\n        }\n\n    public static final String IMG_CSS_CLASS = \"css_class\";\n    public static final String IMG_CSS_CLASS_ID = \"css_class_id\";\n    public static final String IMG_CSS_ID = \"css_id\";\n    public static final String IMG_NEW_CSS = \"newcss\";\n    public static final String IMG_NEW_HTML = \"newhtml\";\n\n    public static final String IMG_CSS_CLASS = \"css_class\";\n    public static final String IMG_CSS_CLASS_ID = \"css_class_id\";\n\n    public static final String IMG_CSS_ID = \"", "reference_code": "    private static final String URL_OBJ = \"full/obj16/\";\n\n    // General Object Images\n    public static final String IMG_CSS_CLASSNAME = \"css_classname\";\n", "case_type": "block"}
{"generated_code": "                id,\n                interval,\n                \"hasNext\",\n                delegate::hasNext\n        );\n    }\n\n    @Override\n    public void close() {\n        delegate.close();\n    }\n\n    @Override\n    public void remove() {\n        delegate.remove();\n    }\n\n    @Override\n    public void reset() {\n        delegate.reset();\n    }\n\n    @Override\n    public void reset(Sample<V> sample) {\n        delegate.reset(sample);\n    }\n\n    @Override\n    public void reset(Sample<V> sample, boolean remove) {\n        delegate.reset(sample, remove);\n    }\n\n    @Override\n    public void reset(Sample<V> sample, boolean remove, boolean reset) {\n        delegate.reset(sample, remove, reset);\n    }\n\n    @Override\n    public void reset(Sample<V> sample, boolean remove, boolean reset, boolean close) {\n        delegate.reset(sample, remove, reset, close);\n    }\n\n    @Override\n    public void reset(Sample<V> sample, boolean remove, boolean reset", "reference_code": "                id,\n                interval,\n                \"hasNext\",\n                delegate::hasNext\n        );\n", "case_type": "block"}
{"generated_code": "\npublic class GirlFragment extends BaseFragment {\n\n    @Override\n    public int getLayoutId() {\n        return R.layout.fra_girl;\n    }\n\n    @Override\n    public void initView() {\n\n    }\n\n    @Override\n    public void initData() {\n\n    }\n\n    @Override\n    public void initListener() {\n\n    }\n\n    @Override\n    public void initOther() {\n\n    }\n\n    @Override\n    public void initTitle() {\n\n    }\n\n    @Override\n    public void initTitleBar() {\n\n    }\n\n    @Override\n    public void initTitleBarLeft() {\n\n    }\n\n    @Override\n    public void initTitleBarRight() {\n\n    }\n\n    @Override\n    public void initTitleBarCenter() {\n\n    }\n\n    @Override\n    public void initTitleBarTitle() {\n\n    }\n\n    @Override\n    public void initTitleBarSubTitle() {\n\n    }\n\n    @Override\n    public void initTitleBarBack() {\n\n    }\n", "reference_code": "\npublic class GankFragment extends BaseFragment {\n", "case_type": "block"}
{"generated_code": "        Exceptions.throwIf(call.method == SpaceMethod.POST,\n                \"POST method is forbidden in batch\");\n        Exceptions.throwIf(call.method == SpaceMethod.DELETE,\n                \"DELETE method is forbidden in batch\");\n        Exceptions.throwIf(call.method == SpaceMethod.PUT,\n                \"PUT method is forbidden in batch\");\n        Exceptions.throwIf(call.method == SpaceMethod.PATCH,\n                \"PATCH method is forbidden in batch\");\n        Exceptions.throwIf(call.method == SpaceMethod.GET,\n                \"GET method is forbidden in batch\");\n        Exceptions.throwIf(call.method == SpaceMethod.HEAD,\n                \"HEAD method is forbidden in batch\");\n        Exceptions.throwIf(call.method == SpaceMethod.OPTIONS,\n                \"OPTIONS method is forbidden in batch\");\n        Exceptions.throwIf(call.method == SpaceMethod.TRACE,\n                \"TRACE method is forbidden in batch\");\n        Exceptions.throwIf(call.method == SpaceMethod.CONNECT,\n                \"CONNECT", "reference_code": "        // in batches. Without this restriction, it is possible in certain conditions to\n        // create multiple credentials with the same username.\n        if (call.path.startsWith(\"/1/backend\"))\n            throw Exceptions.illegalArgument(//\n", "case_type": "block"}
{"generated_code": " bufferedTMsg,\n            LocalDestFile f) throws SCPException {        return (cmd.charAt(1) << 12) | (cmd.charAt(2) << 8) | (cmd.charAt(3) << 4) | cmd.charAt(4);\n    }\n\n    private void processFile(TransferListener listener, String fMsg, String bufferedTMsg,\n            LocalDestFile f) throws SCPException {        return (cmd.charAt(1) << 12) | (cmd.charAt(2) << 8) | (cmd.charAt(3) << 4) | cmd.charAt(4);\n    }\n\n    private void process(TransferListener listener, String tMsg, String bufferedTMsg,\n            LocalDestFile f) throws SCPException {        return (cmd.charAt(1) << 12) | (cmd.charAt(2) << 8) | (cmd.charAt(3) << 4) | cmd.charAt(4);\n    }\n\n    private void process(TransferListener listener, String tMsg, String bufferedTMsg,\n", "reference_code": "        return Integer.parseInt(cmd.substring(1), 8);\n    }\n\n    private boolean process(TransferListener listener, String bufferedTMsg, String msg, LocalDestFile f)\n            throws IOException {\n        if (msg.length() < 1)\n", "case_type": "block"}
{"generated_code": "\n            System.out.println(target);\n        }\n\n        in.close();\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World!\");\n\n        //System.out.println(\"Hello World", "reference_code": "\n            // You have to output a correct ship name to shoot (\"Buzz\", enemy1, enemy2, ...)\n            System.out.println(target);\n        }\n", "case_type": "block"}
{"generated_code": "        return result;\n    }\n\n    @Override\n    public String toString() {\n        return \"JPAAccountPolicy{\" + \"resources=\" + resources + '}';\n    }\n\n    @Override\n    public int hashCode() {\n        return resources.hashCode();\n    }\n\n    @Override\n    public boolean equals(final Object obj) {\n        return obj instanceof JPAAccountPolicy && resources.equals(((JPAAccountPolicy) obj).resources);\n    }\n\n    @Override\n    public void setResources(final Set<? extends ExternalResource> resources) {\n        this.resources.clear();\n        for (ExternalResource resource : resources) {\n            addResource(resource);\n        }\n    }\n\n    @Override\n    public void setResourceNames(final Set<String> resourceNames) {\n        setResources(resourceNames);\n    }\n\n    @Override\n    public void setResourceName(final String resourceName) {\n        setResourceNames(new HashSet<>(1));\n        getResourceNames().add(resourceName);\n    }\n\n    @Override", "reference_code": "\n        return result;\n    }\n", "case_type": "block"}
{"generated_code": "    @BeforeClass\n    public static void setUpBeforeClass() throws Exception {\n        MySqlTestInitializer.setUpBeforeClass();\n    }\n\n    @AfterClass\n    public static void tearDownAfterClass() throws Exception {\n        MySqlTestInitializer.tearDownAfterClass();\n    }\n\n    @BeforeClass\n    public static void setUpBeforeClass() throws Exception {\n        MySqlTestInitializer.setUpBeforeClass();\n    }\n\n    @AfterClass\n    public static void tearDownAfterClass() throws Exception {\n        MySqlTestInitializer.tearDownAfterClass();\n    }\n\n    @BeforeClass\n    public static void setUpBeforeClass() throws Exception {\n        MySqlTestInitializer.setUpBeforeClass();\n    }\n\n    @AfterClass\n    public static void tearDownAfterClass() throws Exception {\n        MySqlTestInitializer.tearDownAfterClass();\n    }\n\n    @BeforeClass\n    public static void setUpBeforeClass() throws Exception {\n        MySqlTestInitializer.setUpBeforeClass();\n    }\n\n    @AfterClass\n    public static", "reference_code": "    @BeforeClass\n    public static void setUpBeforeClass() throws Exception {\n", "case_type": "block"}
{"generated_code": "        leutnant2 = new Leutnant();\n        leutnant2.start();\n\n        Thread.sleep(10000l);\n        leutnant2.zweiteRunde(\"queue/aufgabe6Queue1\", \"queue/aufgabe6Queue2\");\n        leutnant2.analyse();\n\n        Thread.sleep(10000l);\n        leutnant2.zweiteRunde(\"queue/aufgabe6Queue1\", \"queue/aufgabe6Queue3\");\n        leutnant2.analyse();\n\n        Thread.sleep(10000l);\n        leutnant2.zweiteRunde(\"queue/aufgabe6Queue2\", \"queue/aufgabe6Queue1\");\n        leutnant2.analyse();\n\n        Thread.sleep(10000l);\n        leutnant2.zweiteRunde(\"queue/aufgabe6Queue2\", \"queue/aufgabe6Queue3\");\n        leutnant2.analyse();\n", "reference_code": "        leutnant2 = new Leutnant(1, \"Leutnant 2\");\n        leutnant2.ersteRunde(\"queue/aufgabe6Queue2\");\n", "case_type": "block"}
{"generated_code": "        } else {\n            // 如果path是文件名，则不加@dir\n            // 如果path是目录名，则加@dir\n            // 如果path是文件名和目录名，则加@dir\n            // 如果path是文件名和目录名，则不加@dir\n            // 如果path是文件名和目录名，则不加@dir\n            // 如果path是文件名和目录名，则不加@dir\n            // 如果path是文件名和目录名，则不加@dir\n            // 如果path是文件名和目录名，则不加@dir\n            // 如果path是文件名和目录名，则不加@dir\n            // 如果path是文件名和目录名，则不加@dir\n            // 如果path是文件名和目录名，则不加@dir\n            // 如果path是文件名和目录名，则不加@dir\n            // 如果path是文件名和目录名，则不加@dir\n            // 如果path是文件名和目录名，", "reference_code": "        } else {\n", "case_type": "block"}
{"generated_code": "      _healthReportCollector.report();\n    }\n  }\n\n  public ParticipantHealthReportTask() {\n    this(new ParticipantHealthReportCollectorImpl());\n  }\n\n  public ParticipantHealthReportTask(String name) {\n    this(new ParticipantHealthReportCollectorImpl(name));\n  }\n\n  public ParticipantHealthReportTask(String name, int reportLatency) {\n    this(new ParticipantHealthReportCollectorImpl(name, reportLatency));\n  }\n\n  public ParticipantHealthReportTask(ParticipantHealthReportCollectorImpl healthReportCollector,\n      int reportLatency) {\n    this(healthReportCollector);\n    _healthReportCollector.setReportLatency(reportLatency);\n  }\n\n  public ParticipantHealthReportTask(String name, int reportLatency, int reportInterval) {\n    this(name, reportLatency);\n    _healthReportCollector.setReportInterval(reportInterval);\n  }\n\n  public ParticipantHealthReportTask(ParticipantHealthReportCollectorImpl healthReportCollector,\n      int reportInterval) {\n   ", "reference_code": "      _healthReportCollector.transmitHealthReports();\n    }\n", "case_type": "block"}
{"generated_code": "    public Object execute(ComplexEvent event) {\n\n        if (leftExpressionExecutor == null || rightExpressionExecutor == null) {\n            return null;\n        }\n\n        if (!leftExpressionExecutor.getReturnType().equals(rightExpressionExecutor.getReturnType())) {\n            return null;\n        }\n\n        if (!leftExpressionExecutor.getReturnType().equals(Attribute.Type.LONG)) {\n            return null;\n        }\n\n        if (!rightExpressionExecutor.getReturnType().equals(Attribute.Type.LONG)) {\n            return null;\n        }\n\n        if (!leftExpressionExecutor.getReturnType().equals(rightExpressionExecutor.getReturnType())) {\n            return null;\n        }\n\n        if (leftExpressionExecutor.getReturnType() == null) {\n            return null;\n        }\n\n        if (rightExpressionExecutor.getReturnType() == null) {\n            return null;\n        }\n\n        if (leftExpressionExecutor.getReturnType() == null) {\n            return null;\n        }\n\n        if (rightExpressionExecutor.getReturnType() == null) {\n", "reference_code": "    @Override\n    public Object execute(ComplexEvent event) {\n", "case_type": "block"}
{"generated_code": "    }\n\n    public void setAccessTokenEndpoint(String accessTokenEndpoint) {\n        this.ACCESS_TOKEN_EP = accessTokenEndpoint;\n    }\n\n    @Override\n    public String getAccessTokenEndpoint() {\n        return this.ACCESS_TOKEN_EP;\n    }\n\n    @Override\n    public String getAuthorizationUrl(OAuthConfig config) {\n        return AUTHORIZE_URL;\n    }\n\n    @Override\n    public String getAuthorizationUrl(OAuthConfig config, String state) {\n        return AUTHORIZE_URL;\n    }\n\n    @Override\n    public String getAccessTokenEndpoint() {\n        return this.ACCESS_TOKEN_EP;\n    }\n\n    @Override\n    public String getAccessTokenEndpoint(OAuthConfig config, String code) {\n        return this.ACCESS_TOKEN_EP;\n    }\n\n    @Override\n    public String getAccessTokenEndpoint(OAuthConfig config, String code, String redirectUri) {\n        return this.ACCESS_TOKEN_EP;\n   ", "reference_code": "    }\n\n    public void setAccessTokenEP(String accessTokenEP) {\n        this.ACCESS_TOKEN_EP = accessTokenEP;\n    }\n\n", "case_type": "block"}
{"generated_code": "import javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Set;\nimport java.util.TreeSet;\n\nimport static javax.persistence.GenerationType.AUTO;\nimport static javax.persistence.GenerationType.SEQUENCE;\nimport static javax.persistence.GenerationType.TABLE;\nimport static javax.persistence.GenerationType.IDENTITY;\nimport static javax.persistence.GenerationType.AUTO;\nimport static javax.persistence.GenerationType.SEQUENCE;\nimport static javax.persistence.GenerationType.TABLE;\nimport static javax.persistence.GenerationType.IDENTITY;\nimport static javax.persistence.GenerationType.AUTO;\nimport static javax.persistence.GenerationType.SEQUENCE;\nimport static javax.persistence.GenerationType.TABLE;\nimport static javax.persistence.GenerationType.IDENTITY;\nimport static javax", "reference_code": "import javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport java.io.Serializable;\n", "case_type": "block"}
{"generated_code": "            for(Entry<String, JsonElement> entry : json.entrySet()) {\n                returnRow.setValue(column++, entry.getValue());\n            }\n\n            itr.add(new LocatedRow(returnRow));\n        }\n\n        return itr;\n    }\n\n}\n\n    for(int i = 0; i < numRcds; i++) {\n\n            //The definition of the row to be returned\n            ExecRow returnRow = execRow.getClone();\n\n            //Reset the column counter\n            int column = 1;\n\n            JsonObject json = dataArray.get(i).getAsJsonObject();\n\n            for(Entry<String, JsonElement> entry : json.entrySet()) {\n                returnRow.setValue(column++, entry.getValue());\n            }\n\n            itr.add(new LocatedRow(returnRow));\n        }\n\n        return itr;\n    }\n\n    /**\n     *\n     * Call Method for parsing the string into either a singleton List with a LocatedRow or\n     * an empty list.\n     *\n", "reference_code": "        List<LocatedRow> rows = new ArrayList<LocatedRow>();\n        //Loop through each of the entries in the array\n        for(int i=0; i<numRcds; i++) {\n", "case_type": "block"}
{"generated_code": "package me.ccrama.redditslide.Activities;\n\nimport android.app.Activity;\nimport android.app.Fragment;\nimport android.app.FragmentTransaction;\nimport android.content.Context;\nimport android.content.Intent;\nimport android.content.SharedPreferences;\nimport android.os.Bundle;\nimport android.view.View;\nimport me.ccrama.redditslide.Fragments.SettingsHandlingFragment;\n\npublic class SettingsHandling extends BaseActivityAnim {\n\n    private SettingsHandlingFragment fragment = new SettingsHandlingFragment(this);\n\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        applyColorTheme();\n        setContentView(R.layout.activity_settings_handling);\n        setupAppBar(R.id.toolbar, R.string.settings_link_handling, true, true);\n\n        ((ViewGroup) findViewById(R.id.settings_handling)).addView(\n                getLayoutInflater().inflate(R.layout.activity_settings_hand", "reference_code": "package me.ccrama.redditslide.Activities;\n\n", "case_type": "block"}
{"generated_code": "Sale) {\n        this.inSale = inSale;\n    }\n\n    public boolean isHasSKU() {\n        return hasSKU;\n    }\n\n    public void    public boolean isInSale() {\n\n        return inSale;\n    }\n\n    public void setInSale(boolean inSale) {\n        this.inSale = inSale;\n    }\n\n    public boolean isHasSKU() {\n        return hasSKU;\n    }\n\n    public void setHasSKU(boolean hasSKU) {\n        this.hasSKU = hasSKU;\n    }\n\n    public boolean isInSale() {\n\n        return inSale;\n    }\n\n    public void setInSale(boolean inSale) {\n        this.inSale = inSale;\n    }\n\n    public boolean isHasSKU() {\n        return hasSKU;\n    }\n\n    public void setHasSKU(boolean hasSKU) {\n        this.hasSKU = hasSKU;\n    }\n\n   ", "reference_code": "    public boolean isInSale() {\n", "case_type": "block"}
{"generated_code": "    };\n    private boolean receivedRdHup;\n    private boolean isEdgeTriggered;\n\n    EpollRecvByteAllocatorHandle(ExtendedHandle handle, ExtendedHandle delegate) {\n        super(handle, delegate);\n    }\n\n    EpollRecvByteAllocatorHandle(ExtendedHandle handle, ExtendedHandle delegate, ExtendedHandle delegate2) {\n        super(handle, delegate, delegate2);\n    }\n\n    EpollRecvByteAllocatorHandle(ExtendedHandle handle, ExtendedHandle delegate, ExtendedHandle delegate2, ExtendedHandle delegate3) {\n        super(handle, delegate, delegate2, delegate3);\n    }\n\n    EpollRecvByteAllocatorHandle(ExtendedHandle handle, ExtendedHandle delegate, ExtendedHandle delegate2, ExtendedHandle delegate3, ExtendedHandle delegate4) {\n        super(handle, delegate, delegate2, delegate3, delegate4);\n    }\n\n    EpollRecvByteAllocatorHandle(ExtendedHandle handle, ExtendedHandle delegate, ExtendedHandle delegate2, ExtendedHandle delegate3, ExtendedHandle delegate4, ExtendedHandle delegate", "reference_code": "    };\n    private boolean isEdgeTriggered;\n    private boolean receivedRdHup;\n", "case_type": "block"}
{"generated_code": " }\n\n    /**\n     * Eval query policy, return result count.\n     * \n     * @param privilegeId            privilegeId\n     * @param user                   who queries for data\n     * @param context                context\n     * @return     result count\n     */\n    public static int queryCount(int privilegeId, User user, Map context) {\n        if (context == null) {\n            context = new HashMap();\n        }\n        EntitleManager entitleManager = Factory.getEntitleManager(appName);\n        return entitleManager.queryCount(privilegeId, user, context);\n    }\n\n    public static Decision getDecision(int privilegeId, User user, Map context) {\n        UserRoleManager userRoleManager = Factory.getUserRoleManager(appName);\n        Privilege privilege = userRole        EntitleManager entitleManager = Factory.getEntitleManager(appName);\n        return entitleManager.getDecision(privilegeId, user, context);\n    }\n\n    public static Decision getDecision(int privilegeId, User user, Map context,\n           ", "reference_code": "            Object businessData, Map context) {\n", "case_type": "block"}
{"generated_code": "000, 0x00000000, 0x00000000);\n    }\n\n    public\npublic class JaceApplication extends Application {\n\n    private static JaceApplication singleton;\n    private static JaceApplication getInstance() {\n        return singleton;\n    }\n    private JaceApplication() {\n        singleton = this;\n    }\n    private static JaceApplication getInstance() {\n        return singleton;\n    }\n    private JaceApplication() {\n        singleton = this;\n    }\n    private static JaceApplication getInstance() {\n    private static JaceApplication getInstance() {\n        return singleton;\n    }\n    private JaceApplication() {\n        singleton = this;\n    }\n    private static JaceApplication getInstance() {\n        return singleton;\n    }\n    private JaceApplication() {\n        singleton = this;\n    }\n    private static JaceApplication getInstance    public class JaceUIController {\n\n    public JaceUIController() {\n    }\n\n    public void initialize() {", "reference_code": "public class JaceApplication extends Application {\n\n    static JaceApplication singleton;\n", "case_type": "block"}
{"generated_code": "AGE_ANIMATION(        } else if (env.getDialogId() == DialogAction.QUEST_ACCEPT_2.id()) {\n            QuestService.startQuest(env);\n            PacketSendUtility.sendPacket(player, new SM_DIALOG_WINDOW(0, 0));\n        } else if (env.getDialogId() == DialogAction.QUEST_ACCEPT_3.id()) {\n            QuestService.startQuest(env);\n            PacketSendUtility.sendPacket(player, new SM_DIALOG_WINDOW(0, 0));\n        } else if (env.getDialogId() == DialogAction.QUEST_ACCEPT_4.id()) {\n            QuestService.startQuest(env);\n            PacketSendUtility.sendPacket(player, new SM_DIALOG_WINDOW(0, 0));\n        } else if (env.getDialogId() == DialogAction.QUEST_ACCEPT_5.id()) {\n            QuestService.startQuest(env", "reference_code": "                return true;\n            } else if (env.getDialogId() == DialogAction.QUEST_REFUSE_1.id()) {\n                PacketSendUtility.sendPacket(player, new SM_DIALOG_WINDOW(0, 0));\n                return true;\n", "case_type": "block"}
{"generated_code": "  public void migrate_with_custom_dashboard() throws Exception {\n    db.prepareDbUnit(this.getClass(), \"migrate-with-custom-dashboard.xml\");\n    migration.execute();\n    db.assertDbUnit(this.getClass(), \"migrate-with-custom-dashboard-result.xml\", TABLE);\n  }\n\n  @Test\n  public void migrate_with_custom_dashboard_and_custom_dashboard_id() throws Exception {\n    db.prepareDbUnit(this.getClass(), \"migrate-with-custom-dashboard-and-custom-dashboard-id.xml\");\n    migration.execute();\n    db.assertDbUnit(this.getClass(), \"migrate-with-custom-dashboard-and-custom-dashboard-id-result.xml\", TABLE);\n  }\n\n  @Test\n  public void migrate_with_custom_dashboard_and_custom_dashboard_id_and_custom_dashboard_id() throws Exception {\n    db.prepareDbUnit(this.getClass(), \"migrate", "reference_code": "  public void not_migrate_already_migrated_data() throws Exception {\n    db.prepareDbUnit(this.getClass(), \"not_migrate_already_migrated_data.xml\");\n    migration.execute();\n    db.assertDbUnit(this.getClass(), \"not_migrate_already_migrated_data.xml\", TABLE);\n", "case_type": "block"}
{"generated_code": "    }\n\n    public void prepareForExecution() {\n        next = null;\n        function = null;\n    }\n\n    public void prepareForExecution(Function function) {\n        this.function = function;\n    }\n\n    public void prepareForExecution(Function function, CallableNode next) {\n        this.next = next;\n        this.function = function;\n    }\n\n    public void prepareForExecution(CallableNode next) {\n        this.next = next;\n    }\n\n    public void prepareForExecution(Function function, CallableNode next, CallableNode next2) {\n        this.next = next2;\n        this.function = function;\n    }\n\n    public void prepareForExecution(CallableNode next, CallableNode next2) {\n        this.next = next2;\n    }\n\n    public void prepareForExecution(CallableNode next, CallableNode next2, CallableNode next3) {\n        this.next = next3;\n    }\n\n    public void prepareForExecution(CallableNode next, CallableNode next2, CallableNode next3,", "reference_code": "    }\n", "case_type": "block"}
{"generated_code": "     * Format the value\n     * \n     * @param value\n     *            the value to be formatted\n     * \n     * @throws IllegalArgumentException\n     *             if the value is null\n     * \n     * @see java.text.NumberFormat\n     * \n     * @see java.text.DecimalFormat\n     * \n     * @see java.text.DateFormat\n     * \n     * @see java.text.SimpleDateFormat\n     * \n     * @see java.text.FieldPosition\n     * \n     * @see java.text.ParsePosition\n     * \n     * @see java.text.Format\n     * \n     * @see java.text.MessageFormat\n     * \n     * @see java.text.NumberFormat#format(double)\n     * \n     * @see java.text.DecimalFormat#format(double)\n     * \n     * @see java.text.DateFormat#format(java.util.Date)\n     * \n     * @see java.text.SimpleDateFormat#format(java.util.Date)\n", "reference_code": "     * Perform format of bound element\n     * \n     * @param value\n     *            value to be formatted\n", "case_type": "block"}
{"generated_code": "    @Test\n    public void testIndex() throws Exception {\n        mockMvc.perform(get(\"/\"))\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"index\"))\n                .andExpect(forwardedUrl(\"/WEB-INF/jsp/index.jsp\"));\n    }\n\n    @Test\n    public void testIndex2() throws Exception {\n        mockMvc.perform(get(\"/index\"))\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"index\"))\n                .andExpect(forwardedUrl(\"/WEB-INF/jsp/index.jsp\"));\n    }\n\n    @Test\n    public void testIndex3() throws Exception {\n        mockMvc.perform(get(\"/index.html\"))\n                .andExpect(status().isOk())\n                .andExpect(view().name(\"index\"))\n                .andExpect(forwardedUrl(\"/WEB-INF/jsp/index.jsp\"));\n    }\n\n    @Test\n    public void testIndex4", "reference_code": "    @Test\n    public void showHomePage_ShouldRenderHomePage() throws Exception {\n        mockMvc.perform(get(\"/\"))\n                .andExpect(status().isOk())\n", "case_type": "block"}
{"generated_code": "import javax.xml.bind.ValidationEventHandler;\nimport javax.xml.bind.ValidationException;\nimport javax.xml.bind.annotation.XmlTransient;\n\nimport net.loomchild.segment.util.SegmentException;\nimport net.loomchild.segment.util.SegmentException.SegmentExceptionType;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.xml.sax.SAXException;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport javax.xml.bind.ValidationEvent;\nimport javax.xml.bind.ValidationEventHandler;\nimport javax.xml.bind.ValidationException;\nimport javax.xml.bind.annotation.XmlTransient;\n\nimport net.loomchild.segment.util.SegmentException;\nimport net.loomchild.segment.util.SegmentException.SegmentExceptionType;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.xml.sax.SAX", "reference_code": "import javax.xml.bind.ValidationEventHandler;\n", "case_type": "block"}
{"generated_code": " sslContext = SslContext.newSslContext(\n                ResourcesUtil.getFile(getClass(), \"test.crt\"),\n                ResourcesUtil.getFile(getClass(), \"test.pem\"),\n                \"12345\");\n        SSLEngine sslEngine = sslContext.createSSLEngine();\n        assumeTrue(sslEngine.isHandshakeCompleted());\n        assertFalse(sslEngine.getSupportedCipherSuites().isEmpty());\n    }\n\n    private void newSslContext(File crtFile, File keyFile, String password) throws SSLException {\n        SSLContext sslContext = SslContext.newSslContext(crtFile, keyFile, password);\n        SSLEngine sslEngine = sslContext.createSSLEngine();\n        assumeTrue(sslEngine.isHandshakeCompleted());\n    }\n\n    @Test\n    public void testSslContextWithUnencryptedPrivateKeyEmptyPass2() throws SSLException {\n        final File keyFile = ResourcesUtil.getFile(getClass(), \"test2_unencrypted.pem", "reference_code": "    }\n", "case_type": "block"}
{"generated_code": "  public TProtocolFactory getFactory() {\n    // TODO(bckenny): This is a hack to make sure we don't have to change the\n    // Thrift code to support multiple protocols.\n    // TODO(bckenny): Remove this when we can support multiple protocols.\n    if (this == COMPACT) {\n      throw new UnsupportedOperationException(\"Compact protocol not supported\");\n    }\n\n    // TODO(bckenny): Remove this when we can support multiple protocols.\n    if (this == JSON) {\n      throw new UnsupportedOperationException(\"JSON protocol not supported\");\n    }\n\n    // TODO(bckenny): Remove this when we can support multiple protocols.\n    if (this == BINARY) {\n      throw new UnsupportedOperationException(\"Binary protocol not supported\");\n    }\n\n    // TODO(bckenny): Remove this when we can support multiple protocols.\n    if (this == COMPACT) {\n      throw new UnsupportedOperationException(\"Compact protocol not supported\");\n    }\n\n    // TODO(bckenny): Remove this when we can support multiple protocols.\n    if (this", "reference_code": "  public TProtocolFactory getFactory() {\n", "case_type": "block"}
{"generated_code": "        Scan scan = new Scan();\n        scan.setFilter(get.filterSet().iterator().next());\n        //only one family is supported\n        //TODO: support multiple families\n        //TODO: support multiple qualifiers\n        //TODO: support multiple versions\n        //TODO: support multiple timestamp\n        //TODO: support multiple rowkeys\n        //TODO: support multiple cf's\n        //TODO: support multiple qualifiers\n        //TODO: support multiple versions\n        //TODO: support multiple timestamp\n        //TODO: support multiple rowkeys\n        //TODO: support multiple cf's\n        //TODO: support multiple qualifiers\n        //TODO: support multiple versions\n        //TODO: support multiple timestamp\n        //TODO: support multiple rowkeys\n        //TODO: support multiple cf's\n        //TODO: support multiple qualifiers\n        //TODO: support multiple versions\n        //TODO: support multiple timestamp\n        //TODO: support multiple rowkeys\n        //TODO: support multiple cf's\n        //TODO: support multiple qualifiers\n        //TODO: support multiple versions\n", "reference_code": "        Scan scan = new Scan(get.getRow());\n", "case_type": "block"}
{"generated_code": "\nimport java.util.List;\n\npublic class ComboEnDocxConverterSpec2Test extends ComboDocxConverterSpecTest {\n\n    @NotNull\n    @Override\n    protected String getSpecResource() {\n        return SPEC_RESOURCE;\n    }\n\n    @NotNull\n    @Override\n    protected String getConverterResource() {\n        return CONVERTER_RESOURCE;\n    }\n\n    @NotNull\n    @Override\n    protected String getConverterName() {\n        return \"combo_en_docx_converter\";\n    }\n\n    @NotNull\n    @Override\n    protected String getConverterDescription() {\n        return \"combo_en_docx_converter_description\";\n    }\n\n    @NotNull\n    @Override\n    protected String getConverterExample() {\n        return \"combo_en_docx_converter_example\";\n    }\n\n    @NotNull\n    @Override\n    protected String getConverterExampleDescription() {\n        return \"combo_en_docx_converter_example_description\";\n    }\n\n    @NotNull\n    @Override", "reference_code": "\nimport java.util.List;\n\npublic class ComboEnDocxConverterSpec2Test extends ComboDocxConverterSpecTestBase {\n", "case_type": "block"}
{"generated_code": "    setNumberOfObjectives(2);\n\n    List<Double> lowerLimit = new ArrayList<>(getNumberOfVariables()) ;\n\n    List<Double> upperLimit = new ArrayList<>(getNumberOfVariables()) ;\n\n    lowerLimit.add(-1.0) ;\n    upperLimit.add(1.0) ;\n    for (int i = 1; i < getNumberOfVariables(); i++) {\n      lowerLimit.add(-1.0);\n      upperLimit.add(1.0);\n    }\n\n    setVariableBounds(lowerLimit, upperLimit);\n  }\n\n  public GLT5(int numberOfVariables, int numberOfObjectives) {\n    setNumberOfVariables(numberOfVariables);\n    setNumberOfObjectives(numberOfObjectives);\n\n    List<Double> lowerLimit = new ArrayList<>(getNumberOfVariables()) ;\n\n    List<Double> upperLimit = new ArrayList<>(getNumberOfVariables()) ;\n\n    lowerLimit.add(-1.0) ;\n    upperLimit.add(1.0) ;\n    for (", "reference_code": "    setNumberOfObjectives(3);\n    setName(\"GLT5\");\n\n    List<Double> lowerLimit = new ArrayList<>(getNumberOfVariables()) ;\n", "case_type": "block"}
{"generated_code": "            case ID_HELP_SECTION_INTRODUCTION_TITLE: return \"Einf�hrung\";\n            case ID_HELP_SECTION_INTRODUCTION_TEXT:\n                return \"Dies ist ein simples Musikinstrument.\";\n            case ID_HELP_SECTION_INTRODUCTION_TEXT_2:\n                return \"Dies ist ein simples Musikinstrument.\";\n            case ID_HELP_SECTION_INTRODUCTION_TEXT_3:\n                return \"Dies ist ein simples Musikinstrument.\";\n            case ID_HELP_SECTION_INTRODUCTION_TEXT_4:\n                return \"Dies ist ein simples Musikinstrument.\";\n            case ID_HELP_SECTION_INTRODUCTION_TEXT_5:\n                return \"Dies ist ein simples Musikinstrument.\";\n            case ID_HELP_SECTION_INTRODUCTION_TEXT_6:\n                return \"Dies ist ein simples Musikinstrument.\";\n            case", "reference_code": "            case ID_TIMBRES: return \"Klangfarben\";\n            case ID_HELP_SECTION_INTRODUCTION_TITLE: return \"\";\n            case ID_HELP_SECTION_INTRODUCTION_TEXT:\n", "case_type": "block"}
{"generated_code": "    public void consumeLine(String line) {\n        // check if the output contains the error string\n        if (StringUtils.isNotEmpty(errorStr)) {\n            // YES: set error flag\n            if (StringUtils.containsIgnoreCase(line.trim(), errorStr)) {\n                foundError = true;\n            }\n        }\n    } // consumeLine\n\n    public void consumeLine(String line, String errorString) {\n        // check if the output contains the error string\n        if (StringUtils.isNotEmpty(errorString)) {\n            // YES: set error flag\n            if (StringUtils.containsIgnoreCase(line.trim(), errorString)) {\n                foundError = true;\n            }\n        }\n    } // consumeLine\n\n    public void consumeLine(String line, String errorString, String errorStr) {\n        // check if the output contains the error string\n        if (StringUtils.isNotEmpty(errorStr)) {\n            // YES: set error flag\n            if (StringUtils.containsIgnoreCase(line.trim(), errorStr)) {\n                foundError = true;\n            }", "reference_code": "    public synchronized void consumeLine(final String line) {\n\n", "case_type": "block"}
{"generated_code": "    public final String host;\n\n    /**\n     * The method that was requested.\n     */\n\n    @SuppressWarnings(\"javadoc\")\n    @Deprecated\n    public final String opdsVersion;\n\n    @SuppressWarnings(\"javadoc\")\n    @Deprecated\n    public final String opdsNamespace;\n\n    @SuppressWarnings(\"javadoc\")\n    @Deprecated\n    public final String opdsPath;\n\n    @SuppressWarnings(\"javadoc\")\n    @Deprecated\n    public final String opdsQuery;\n\n    @SuppressWarnings(\"javadoc\")\n    @Deprecated\n    public final String opdsFragment;\n\n    @SuppressWarnings(\"javadoc\")\n    @Deprecated\n    public final String opdsFragmentPath;\n\n    @SuppressWarnings(\"javadoc\")\n    @Deprecated\n    public final String opdsFragmentQuery;\n\n    @SuppressWarnings(\"javadoc\")\n    @Deprecated\n    public final String opdsFragmentFragment;\n\n    @SuppressWarnings(\"javadoc\")\n   ", "reference_code": "    public final String host;\n", "case_type": "block"}
{"generated_code": "            public void trigger() {\n                showLevelText(\"you win!\");\n\n                spawnEnemy1(true);\n                spawnEnemy1(true);\n\n                spawnEnemy1(true);\n                spawnEnemy1(true);\n\n                spawnEnemy1(true);\n                spawnEnemy1(true);\n\n                spawnEnemy1(true);\n                spawnEnemy1(true);\n\n                spawnEnemy1(true);\n                spawnEnemy1(true);\n\n                spawnEnemy1(true);\n                spawnEnemy1(true);\n\n                spawnEnemy1(true);\n                spawnEnemy1(true);\n\n                spawnEnemy1(true);\n                spawnEnemy1(true);\n\n                spawnEnemy1(true);\n                spawnEnemy1(true);\n\n                spawnEnemy1(true);\n                spawnEnemy1(true);\n\n                spawnEnemy1(true);\n                spawnEnemy1(true);\n\n                spawnEnemy1(", "reference_code": "            public void trigger() {\n", "case_type": "block"}
{"generated_code": "    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password, String newPassword) {\n        this.password = newPassword;\n    }\n\n    public void setPassword(String password, String newPassword, String newPasswordConfirm) {\n        this.password = newPasswordConfirm;\n    }\n\n    public void setPassword(String password, String newPassword, String newPasswordConfirm, String newPasswordConfirm2) {\n        this.password = newPasswordConfirm2;\n    }\n\n    public void setPassword(String password, String newPassword, String newPasswordConfirm, String newPasswordConfirm2, String newPasswordConfirm3) {\n        this.password = newPasswordConfirm3;\n    }\n\n    public void setPassword(String password, String newPassword, String newPasswordConfirm, String newPasswordConfirm2, String newPasswordConfirm3, String newPasswordConfirm4) {\n        this.password = newPasswordConfirm4;\n    }\n\n    public void setPassword(String password, String newPassword, String newPasswordConfirm, String newPassword", "reference_code": "    public String getPassword() {\n        return password;\n    }\n", "case_type": "block"}
{"generated_code": "                }\n\n                if (context.getCurrentDepth() == targetDepth) {\n                    if (xmlEvent.isEndElement())\n                        return instanceTagNotificationAttribute;\n                    else\n                        throw new UnsupportedOperationException(\"Found an attribute, but not a tag\");\n                }\n            } else if (xmlEvent.isEndElement()) {\n                if (context.getCurrentDepth() < originalDepth) {\n                    if (context.isStartOfDocument())\n                        return instanceTagNotificationAttribute;\n                    else\n                        throw new UnsupportedOperationException(\"Found a tag that was not expected: \" + xmlEvent);\n                } else {\n                    if (context.isStartOfDocument())\n                        throw new UnsupportedOperationException(\"Found a tag but not expected: \" + xmlEvent);\n                }\n            }\n        }\n    }\n\n    private static InstanceTagNotificationAttributeStaxUnmarshaller instance;\n\n    public static InstanceTagNotificationAttributeStaxUnmarshaller getInstance() {\n        if (instance == null)\n            instance = new InstanceTagNotificationAttributeStaxUnmarshaller();\n        return instance;\n    }\n\n", "reference_code": "                }\n            } else if (xmlEvent.isEndElement()) {\n                if (context.getCurrentDepth() < originalDepth) {\n", "case_type": "block"}
{"generated_code": " wordToImage = new DeformedComposedWordToImage(postDef, backDef, textDef);\n\n        BackgroundGenerator backgroundGenerator = new UniColorBackgroundGenerator(new Color(255, 255, 255));\n\n        FontGenerator fontGenerator = new RandomFontGenerator(new Font(\"宋体\", Font.PLAIN, fontSize));\n\n        GimpyFactory gimpyFactory = new GimpyFactory(backgroundGenerator, wordToImage, fontGenerator);\n\n        addFactory(gimpyFactory);\n    }\n\n}\n\n//        RandomFontGenerator fontGenerator = new RandomFontGenerator(new Font(\"宋体\", Font.PLAIN, fontSize));\n        // 干扰线\n        // RandomFontGenerator fontGenerator = new RandomFontGenerator(new Font(\"宋体\", Font.PLAIN, fontSize));\n        // 干扰线\n        // RandomFontGenerator fontGenerator = new RandomFontGenerator(new Font(\"宋体\", Font.PLAIN, fontSize));\n        // 干扰线\n        // RandomFontGenerator fontGenerator = new RandomFontGenerator(new Font(\"宋体", "reference_code": "                        new Color[] { new Color(23, 170, 27), new Color(220, 34, 11), new Color(23, 67, 172) }),\n                textDecorators);\n        BackgroundGenerator background = new UniColorBackgroundGenerator(imageWidth, imageHeight, Color.white);\n        FontGenerator font = new RandomFontGenerator(fontSize, fontSize,\n                new Font[] { new Font(\"nyala\", Font.BOLD, fontSize), new Font(\"Bell MT\", Font.PLAIN, fontSize),\n                        new Font(\"Credit valley\", Font.BOLD, fontSize) });\n", "case_type": "block"}
{"generated_code": "    @Max(3)\n    @Default(\"0\")\n    @Info(\"The type of cat the ocelot is. 0 is wild ocelot, 1 is tuxuedo, 2 is tabby and 3 is siamese.\")\n    @Min(0)\n    @Max(3)\n    @Default(\"0\")\n    @Info(\"The type of cat the ocelot is. 0 is wild ocelot, 1 is tuxuedo, 2 is tabby and 3 is siamese.\")\n    @Min(0)\n    @Max(3)\n    @Default(\"0\")\n    @Info(\"The type of cat the ocelot is. 0 is wild ocelot, 1 is tuxuedo, 2 is tabby and 3 is siamese.\")\n    @Min(0)\n    @Max(3)\n    @Default(\"0\")\n    @Info(\"The type of cat the ocelot is. 0 is wild ocelot, 1 is tuxuedo, 2 is tabby and 3 is siamese.\")\n    @Min", "reference_code": "    @Max(3)\n", "case_type": "block"}
{"generated_code": "    @Ignore\n    @ScriptProperty({ \"connectLocation \\\"http://localhost:8001/amqp\\\"\", \"acceptLocation \\\"http://localhost:8001/amqp\\\"\" })\n    @Specification({ \"open/identity/request\", \"open/identity/response\" })\n    public void connectWithIdentityAndClose() throws Exception {\n        k3po.finish();\n    }\n\n    @Test\n    @Ignore\n    @ScriptProperty({ \"connectLocation \\\"http://localhost:8001/amqp\\\"\", \"acceptLocation \\\"http://localhost:8001/amqp\\\"\" })\n    @Specification({ \"open/identity/request\", \"open/identity/response\" })\n    public void connectWithIdentityAndCloseAndReconnect() throws Exception {\n        k3po.finish();\n    }\n\n    @Test\n    @Ignore\n    @ScriptProperty({ \"connectLocation \\\"http://localhost:8001/amqp\\\"\", \"acceptLocation \\\"http://localhost:8001/amqp\\\"\" })\n    @Specification({ \"open/identity/", "reference_code": "    @ScriptProperty({ \"connectLocation \\\"http://localhost:8001/amqp\\\"\", \"acceptLocation \\\"http://localhost:8001/amqp\\\"\" })\n    @Specification({ \"open/noidentity/request\",  \"open/noidentity/response\" })\n    public void connectWithNoIdentity() throws Exception {\n        k3po.finish();\n    }\n\n", "case_type": "block"}
{"generated_code": "    User recipient;\n\n    public Message() {\n    }\n\n    public Message(long id, String text, String createdAt, User sender, User recipient) {\n        this.id = id;\n        this.text = text;\n        this.createdAt = createdAt;\n        this.sender = sender;\n        this.recipient = recipient;\n    }\n\n    public Message(String text, String createdAt, User sender, User recipient) {\n        this.text = text;\n        this.createdAt = createdAt;\n        this.sender = sender;\n        this.recipient = recipient;\n    }\n\n    public Message(String text, String createdAt, User sender) {\n        this.text = text;\n        this.createdAt = createdAt;\n        this.sender = sender;\n    }\n\n    public Message(String text, String createdAt) {\n        this.text = text;\n        this.createdAt = createdAt;\n    }\n\n    public Message(String text) {\n        this.text = text;\n    }\n\n    public Message(long id", "reference_code": "    User recipient;\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Override\n    public String getType() {\n        return element.getMimeType();\n    }\n\n    @Override\n    public String getDescription() {\n        return element.getDescription();\n    }\n\n    @Override\n    public String getCacheName() {\n        return element.getCacheName();\n    }\n\n    @Override\n    public String getServerName() {\n        return element.getServerName();\n    }\n\n    @Override\n    public String getHostName() {\n        return element.getHostName();\n    }\n\n    @Override\n    public String getClientName() {\n        return element.getClientName();\n    }\n\n    @Override\n    public String getClientAddress() {\n        return element.getClientAddress();\n    }\n\n    @Override\n    public String getClientHostAddress() {\n        return element.getClientHostAddress();\n    }\n\n    @Override\n    public String getClientHostName() {\n        return element.getClientHostName();\n    }\n\n    @Override\n    public String getClientIPAddress() {\n        return", "reference_code": "    }\n\n    public void setElement(Element element) {\n        this.element=element;\n    }\n\n", "case_type": "block"}
{"generated_code": "    public void testValidate() {\n        CourseAttributes validCourse = generateValidCourseAttributesObject();\n\n        assertTrue(\"valid value\", validCourse.isValid());\n\n        validCourse.setName(\"\");\n        assertFalse(\"invalid value\", validCourse.isValid());\n\n        validCourse.setName(\"a\");\n        assertTrue(\"valid value\", validCourse.isValid());\n\n        validCourse.setName(\"a\" + StringHelper.generateStringOfLength(FieldValidator.COURSE_NAME_MAX_LENGTH));\n        assertTrue(\"valid value\", validCourse.isValid());\n\n        validCourse.setName(\"a\" + StringHelper.generateStringOfLength(FieldValidator.COURSE_NAME_MAX_LENGTH + 1));\n        assertFalse(\"invalid value\", validCourse.isValid());\n\n        validCourse.setName(\"a\" + StringHelper.generateStringOfLength(FieldValidator.COURSE_NAME_MAX_LENGTH + 1) + \"b\");\n        assertTrue(\"valid value\", validCourse.isValid());\n\n        validCourse", "reference_code": "    public void testValidate() throws Exception {\n\n        CourseAttributes validCourse = generateValidCourseAttributesObject();\n\n", "case_type": "block"}
{"generated_code": "Pause() {        import te.com.locksmith.adapters.ActionBarAdapter;\nimport te.com.locksmith.adapters.LeftNavAdapter;\nimport te.com.locksmith.enums.ActiveFragmentConservative;\nimport te.com.locksmith.events.ActivityResultEvent;\nimport te.com.locksmith.helpers.ActiveFragmentConservative;\nimport te.com.locksmith.helpers.OnBackPressedHelper;\nimport te.com.locksmith.tools.FragmentChanger;\n\nimport te.com.locksmith.helpers.ActivityResultBus;\nimport te.com.locksmith.helpers.BackStackHelper;\nimport te.com.locksmith.helpers.OnBackPressedHelper;\nimport te.com.locksmith.tools.FragmentChanger;\n\npublic class MainActivity extends AppCompatActivity {\n\n    private Drawer leftNavDrawer = null;\n    private boolean doubleBackToExitPressedOnce = false;\n    public View activityRootView;\n\n    @Override\n    protected void onCreate(Bundle savedInstance    import te.com.locks", "reference_code": "\nimport te.com.locksmith.adapters.ActionBarAdapter;\nimport te.com.locksmith.adapters.LeftNavAdapter;\nimport te.com.locksmith.constants.ActiveFragmentConservative;\nimport te.com.locksmith.dao.ActivityResultEvent;\n", "case_type": "block"}
{"generated_code": "    protected javax.xml.datatype.Duration value;\n\n    public Duration() {\n    }\n\n    public Duration(javax.xml.datatype.Duration value) {\n        this.value = value;\n    }\n\n    public Duration(Duration value) {\n        this.value = value.value;\n    }\n\n    public Duration(String value) {\n        this.value = javax.xml.datatype.DatatypeFactory.newInstance().newDuration(value);\n    }\n\n    public Duration(javax.xml.datatype.XMLGregorianCalendar value) {\n        this.value = javax.xml.datatype.DatatypeFactory.newInstance().newDuration(value);\n    }\n\n    public Duration(java.util.Date value) {\n        this.value = javax.xml.datatype.DatatypeFactory.newInstance().newDuration(value);\n    }\n\n    public Duration(java.util.Calendar value) {\n        this.value = javax.xml.datatype.DatatypeFactory.newInstance", "reference_code": "    protected javax.xml.datatype.Duration value;\n\n", "case_type": "block"}
{"generated_code": "\n    @Test\n    public void test() throws Exception {\n        File file = new File(TESTDATA_PATH + \"/form.json\");\n        String json = FileUtils.readFile(file);\n        Form form = JsonUtils.fromJson(json, Form.class);\n        assertNotNull(form);\n        assertFalse(form.validate(null).hasErrors());\n        assertTrue(form.validate(new HashMap<String, String[]>()).hasErrors());\n        assertTrue(form.validate(new HashMap<String, String[]>()).getErrors().size() > 0);\n        assertTrue(form.validate(new HashMap<String, String[]>()).getCommonErrors().size() > 0);\n        assertTrue(form.validate(new HashMap<String, String[]>()).getCommonErrors().size() > 0);\n        assertTrue(form.validate(new HashMap<String, String[]>()).getCommonErrors().size() > 0);\n        assertTrue(form.validate(new HashMap<String, String[]>()).getCommonErrors().size() > 0);\n        assertTrue(form.validate(new HashMap<", "reference_code": "    @Test \n    public void readSample() throws Exception {\n        String json = FileUtils.readFileAsString(new File(TESTDATA_PATH, \"sampleForm.json\"));\n        FormDefinition form = FormDefinition.fromJson(json);\n", "case_type": "block"}
{"generated_code": "Identity,\n                    otpUserRecord,\n                    jsonInput.token);\n            return RestResultBean.fromBoolean(verified).asJsonResponse();\n        } catch (ChaiUnavailableException e) {\n            return RestResultBean.fromError(e.getErrorInformation()).asJsonResponse();\n        } catch (ChaiOperationException e) {\n            return RestResultBean.fromError(e.getErrorInformation()).asJsonResponse();\n        } catch (PwmOperationalException e) {\n            return RestResultBean.fromError(e.getErrorInformation()).asJsonResponse();\n        }\n    }\n\n    @PUT\n    @Produces(MediaType.APPLICATION_JSON + \";charset=UTF-8\")\n    @Consumes(MediaType.APPLICATION_JSON)\n    public Response doSetOtpDataJson(final JsonPutOtpInput jsonInput) {\n        return doSetOtpDataJson(jsonInput);\n    }\n\n    @GET\n    @Produces(MediaType.TEXT_HTML)\n    public Response doHtmlRedirect(final @QueryParam(\"username\") String username) throws", "reference_code": "            return RestResultBean.fromError(e.getErrorInformation(),restRequestBean).asJsonResponse();\n        } catch (ChaiUnavailableException e) {\n            final String errorMsg = \"unexpected error reading json input: \" + e.getMessage();\n", "case_type": "block"}
{"generated_code": "                department.setTradePriority(Priority.AFTER_STANDARD);\n                department.setTradePriority(Priority.AFTER_SALES);\n                department.setTradePriority(Priority.AFTER_PURCHASES);\n                department.setTradePriority(Priority.AFTER_FINANCIAL);\n                department.setTradePriority(Priority.AFTER_AGENTS);\n                department.setTradePriority(Priority.AFTER_FIRM);\n                department.setTradePriority(Priority.AFTER_FIRM_AGENTS);\n                department.setTradePriority(Priority.AFTER_FIRM_FINANCIAL);\n                department.setTradePriority(Priority.AFTER_FIRM_PURCHASES);\n                department.setTradePriority(Priority.AFTER_FIRM_SALES);\n                department.setTradePriority(Priority.AFTER_FIRM_AGENTS_FINANCIAL);\n                department.setTradePriority(Priority.AFTER_FIRM_AGENTS_PURCHASES);\n                department", "reference_code": "                department.getModel().scheduleTomorrow(ActionOrder.DAWN,this);\n", "case_type": "block"}
{"generated_code": "    // Methods\n    // ===========================================================\n\n    public void animate(final float pDelta);\n\n    public void reset();\n\n    public void setMenuItems(final ArrayList<IMenuItem> pMenuItems);\n\n    public void setMenuItems(final ArrayList<IMenuItem> pMenuItems, final float pCameraWidth, final float pCameraHeight);\n\n    public void setMenuItems(final ArrayList<IMenuItem> pMenuItems, final float pCameraWidth, final float pCameraHeight, final boolean pAnimate);\n\n    public void setMenuItems(final ArrayList<IMenuItem> pMenuItems, final float pCameraWidth, final float pCameraHeight, final boolean pAnimate, final boolean pAnimateBackground);\n\n    public void setMenuItems(final ArrayList<IMenuItem> pMenuItems, final float pCameraWidth, final float pCameraHeight, final boolean pAnimate, final boolean pAnimateBackground, final boolean pAnimateBackgroundBackground);\n\n    public void setMenuItems(final ArrayList<IMenuItem> pMenuItems, final float pCameraWidth, final float", "reference_code": "    // Methods\n    // ===========================================================\n\n    public void prepareAnimations(final ArrayList<IMenuItem> pMenuItems, final float pCameraWidth, final float pCameraHeight);\n", "case_type": "block"}
{"generated_code": "        }\n\n    public interface IForeignCatHandler {\n        void execute(IProgressMonitor monitor, String fileName, Connection connection, ImportState importState) throws SQLException;\n        Date getPreviousImport();\n        String getName();\n    }\n\nimport com.bdaum.zoom.cat.model.asset.Asset;\nimport com.bdaum.zoom.cat.model.asset.AssetEnsemble;\nimport com.bdaum.zoom.cat.model.asset.AssetEnsemble.AssetEnsembleType;\nimport com.bdaum.zoom.cat.model.asset.AssetEnsemble.AssetEnsembleType;\nimport com.bdaum.zoom.cat.model.asset.AssetEnsemble.AssetEnsembleType;\nimport com.bdaum.zoom.cat.model.asset.AssetEnsemble.AssetEnsembleType;\nimport com.bdaum.zoom.cat.model.asset.AssetEn        }\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.", "reference_code": "package com.bdaum.zoom.cat.foreign.internal;\n\n", "case_type": "block"}
{"generated_code": "    String createToken(String subject);\n\n    /**\n     * Try to parse the token using the known keys and return the contained subject.\n     */\n    String evaluateToken(String token);\n\n    /**\n     * Try to parse the token using the known keys and return the contained subject.\n     */\n    String evaluateToken(String token, String key);\n\n    /**\n     * Try to parse the token using the known keys and return the contained subject.\n     */\n    String evaluateToken(String token, String key, String... keys);\n\n    /**\n     * Try to parse the token using the known keys and return the contained subject.\n     */\n    String evaluateToken(String token, String key, String... keys, String... keys2);\n\n    /**\n     * Try to parse the token using the known keys and return the contained subject.\n     */\n    String evaluateToken(String token, String key, String... keys, String... keys2, String... keys3);\n\n    /**\n     * Try to parse the token using the known keys and return the contained subject.\n     */\n    String evaluateToken(String token, String key, String...", "reference_code": "    String createToken(String subject);\n\n    /**\n", "case_type": "block"}
{"generated_code": "    return true;\n  }\n\n  // TODO: This is a bit of a hack, but it's the only way I could get the subtitle to show up.\n  // TODO: I'd like to be able to do this in the XML file, but I can't figure out how.\n  // TODO: I'm not sure if this is the right way to do this.\n  // TODO: I'm not sure if this is the right way to do this.\n  // TODO: I'm not sure if this is the right way to do this.\n  // TODO: I'm not sure if this is the right way to do this.\n  // TODO: I'm not sure if this is the right way to do this.\n  // TODO: I'm not sure if this is the right way to do this.\n  // TODO: I'm not sure if this is the right way to do this.\n  // TODO: I'm not sure if this is the right way to do this.\n  // TODO: I'm not sure if this is the right way to do this.\n  // TODO: I'm not", "reference_code": "    mode.setTitle(mapActivity.getString(R.string.title_edit_point));\n    mode.setSubtitle(mapActivity.getSelectedZone().getLabel());\n    return true;\n  }\n\n", "case_type": "block"}
{"generated_code": " analysis, {@code false}\n     *         otherwise.\n     */\n    private boolean confirmAbort() {\n        final FailureReport report = this.beagleController.getFailureReport();\n        return report.getFailureCount() == 0 && report.getWarningCount() == 0 &&\n                report.getErrorCount() == 0 && report.getFatalCount() == 0;\n    }\n\n    /**\n     * Adds a listener to be called when the analysis has finished.\n     *\n     * @param listener The listener to add.\n     */\n    public synchronized void addFinishListener(final Runnable listener) {\n        this.finishListeners.add(listener);\n    }\n\n    public synchronized boolean isAborted() {\n        return this.aborted;\n    }\n\n    public synchronized boolean isFinished() {\n        return this.finished;\n    }\n\n    public synchronized void removeFinishListener(final Runnable listener) {\n        this.finishListeners.remove(listener);\n    }\n\n    public synchronized void        this.progressWindow.setError", "reference_code": "            return result;\n        }\n    }\n", "case_type": "block"}
{"generated_code": "\nimport org.flowable.engine.RuntimeService;\nimport org.flowable.engine.impl.Job;\nimport org.flowable.engine.impl.bpmn.delegate.JavaDelegate;\nimport org.flowable.engine.impl.bpmn.delegate.JavaDelegateExecution;\nimport org.flowable.engine.impl.bpmn.delegate.JavaDelegateImpl;\nimport org.flowable.engine.impl.bpmn.delegate.JavaDelegateService;\nimport org.flowable.engine.impl.bpmn.delegate.JavaDelegateServiceImpl;\nimport org.flowable.engine.test.PluggableFlowableTestCase;\nimport org.junit.jupiter.api.Assertions.assertNotNull;\nimport org.junit.jupiter.api.Assertions.assertTrue;\nimport org.junit.jupiter.api.Deployment;\nimport org.junit.jupiter.api.TestInstance;\nimport org.junit.jupiter.api.TestInstance.Lifecycle;\nimport org.junit.jupiter.api.TestInstance.Lifec", "reference_code": "\nimport org.flowable.engine.delegate.DelegateExecution;\nimport org.flowable.engine.delegate.JavaDelegate;\nimport org.flowable.engine.impl.test.PluggableFlowableTestCase;\nimport org.flowable.engine.test.Deployment;\nimport org.flowable.job.api.Job;\n", "case_type": "block"}
{"generated_code": "\n    /**\n     * <p>constructs a new StreamTemplateSource</p>\n     *\n     * <p>the InputStream is not set, because it is only used to get the modificationTime</p>\n     *\n     * <p>the modificationTime is set to the currentTimeMillis</p>\n     *\n     * <p>the canonicalName is always null</p>\n     *\n     * <p>the lastModified is always 0</p>\n     *\n     * <p>the getInputStream always returns the set InputStream</p>\n     *\n     * <p>the getCanonicalName always returns null</p>\n     *\n     * <p>the getLastModified always returns 0</p>\n     *\n     * <p>the getLastModified always returns 0</p>\n     *\n     * <p>the getLastModified always returns 0</p>\n     *\n     * <p>the getLastModified always returns 0</p>\n     *\n     * <p>the get", "reference_code": "\n    /**\n     * <p>generates a new StreamDataSource with the given Stream</p>\n     *\n", "case_type": "block"}
{"generated_code": "import edu.softserve.zoo.web.config.WebConfig;\n\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Import;\n\n@Configuration\n@Import(WebConfig.class)\n@ComponentScan(\"edu.softserve.zoo.web.test.controller.endpoints.checking.checker\")\npublic class WebTestConfig {\n\n}\n\n@Configuration\n@Import(WebConfig.class)\n@ComponentScan(\"edu.softserve.zoo.web.test.controller.endpoints.checking.checker\")\npublic class WebTestConfig2 {\n\n}\n\n@Configuration\n@Import(WebConfig.class)\n@ComponentScan(\"edu.softserve.zoo.web.test.controller.endpoints.checking.checker\")\npublic class WebTestConfig3 {\n\n}\n\n@Configuration\n@Import(WebConfig.class)\n@ComponentScan(\"edu.softserve.zoo.web.test.controller.endpoints.checking.checker\")\npublic class WebTestConfig4 {\n", "reference_code": "import edu.softserve.zoo.config.WebConfig;\n", "case_type": "block"}
{"generated_code": "    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public SaleVO() {\n    }\n\n    public SaleVO(Long productId, Long userId, Integer quantity, BigDecimal amount) {\n        this.productId = productId;\n        this.userId = userId;\n        this.quantity = quantity;\n        this.amount = amount;\n    }\n\n    public SaleVO(Long productId, Long userId, Integer quantity) {\n        this.productId = productId;\n        this.userId = userId;\n        this.quantity = quantity;\n    }\n\n    public SaleVO(Long productId, Long userId) {\n        this.productId = productId;\n        this.userId = userId;\n    }\n\n    public SaleVO(Long productId) {\n        this.productId = productId;\n    }\n\n    public SaleVO(Long id, Long productId, Long userId, Integer quantity, BigDecimal amount) {\n        this.id = id;\n        this.productId = productId;", "reference_code": "    public void setId(Long id) {\n        this.id = id;\n", "case_type": "block"}
{"generated_code": "import net.rim.device.api.ui.component.TitleBar;\n\npublic class TitleBarScreen extends TitleBar {\n\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * The title bar for this screen\n     */\n    private final StandardTitleBar titleBar;\n\n    /**\n     * The title bar for this screen\n     */\n    public TitleBarScreen(final StandardTitleBar titleBar) {\n        this.titleBar = titleBar;\n    }\n\n    /**\n     * Returns the title bar for this screen\n     */\n    public StandardTitleBar getTitleBar() {\n        return titleBar;\n    }\n\n    // ------------------------------------------------------------\n    // Methods\n    // ------------------------------------------------------------\n\n    // ------------------------------------------------------------\n    // Inner and Anonymous Classes\n    // ------------------------------------------------------------\n\n    // ------------------------------------------------------------\n    // Getters and Setters\n    // ------------------------------------------------------------\n\n    // ------------------------------------------------------------\n    // Constructors\n    // ------------------------------------------------------------\n\n    // ------------------------------------------------------------\n    // Fields\n    // ------------------------------------------------------------\n\n    // ------------------------------------------------------------\n    // Inner", "reference_code": "import net.rim.device.api.ui.container.MainScreen;\n\npublic final class TitleBarScreen extends MainScreen {\n", "case_type": "block"}
{"generated_code": "        super(cause);\n    }\n\n    protected SerialNotFoundException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n        super(message, cause, enableSuppression, writableStackTrace);\n    }\n\n    @Override\n    public String getMessage() {\n        return \"Serial not found: \" + super.getMessage();\n    }\n\n    @Override\n    public String getLocalizedMessage() {\n        return getMessage();\n    }\n\n    @Override\n    public String toString() {\n        return getMessage();\n    }\n\n    @Override\n    public Throwable fillInStackTrace() {\n        return this;\n    }\n\n    @Override\n    public Throwable fillInStackTrace(Throwable cause) {\n        return this;\n    }\n\n    @Override\n    public Throwable initCause(Throwable cause) {\n        return this;\n    }\n\n    @Override\n    public Throwable getCause() {\n        return this;\n    }\n\n    @Override\n    public Throwable getRootCause() {\n", "reference_code": "        super(cause);\n    }\n", "case_type": "block"}
{"generated_code": "        return resource;\n    }\n\n    public void setResource(String resource) {\n        this.resource = Resource.valueOf(resource);\n    }\n\n    public void setResource(String resource, int requirement) {\n        this.resource = Resource.valueOf(resource);\n        this.requirement = requirement;\n    }\n\n    public void setResource(Resource resource, int requirement) {\n        this.resource = resource;\n        this.requirement = requirement;\n    }\n\n    public void setResource(String resource, ExecutionMode executionMode, int requirement) {\n        this.resource = Resource.valueOf(resource);\n        this.executionMode = executionMode;\n        this.requirement = requirement;\n    }\n\n    public void setResource(Resource resource, ExecutionMode executionMode, int requirement) {\n        this.resource = resource;\n        this.executionMode = executionMode;\n        this.requirement = requirement;\n    }\n\n    public void setResource(String resource, ExecutionMode executionMode) {\n        this.resource = Resource.valueOf(resource);\n        this.executionMode = execution", "reference_code": "        return resource;\n    }\n\n", "case_type": "block"}
{"generated_code": "    }\n\n    /**\n     * Writes the code for this constructor to the specified\n     * writer.\n     *\n     * @param writer        the writer to write to\n     */\n    public void write(PrintWriter writer) {\n        writer.print(\"    \");\n        writer.print(CodeStyle.getModifierString(this.modifiers));\n        writer.print(\" Function \");\n        writer.print(this.cls.getName());\n        writer.print(\"(\");\n        writer.print(this.args);\n        writer.print(\") As \");\n        writer.print(this.cls.getName());\n        writer.print(\"\\n\");\n        writer.print(\"    \");\n        writer.print(CodeStyle.getModifierString(this.modifiers));\n        writer.print(\" Sub \");\n        writer.print(this.cls.getName());\n        writer.print(\"(\");\n        writer.print(this.args);\n        writer.print(\")\\n\");\n        writer.print(\"    \");\n        writer.print(CodeStyle.getModifierString(this.modifiers));\n        writer.print(\" \" +", "reference_code": "        for (int i = 0; i < code.size(); i++) {\n            if (code.get(i).toString().length() > 0) {\n                res.append(codeIndentStr);\n                res.append(code.get(i).toString());\n", "case_type": "block"}
{"generated_code": "    NONE(0),\n\n    /**\n    * The Unlisted flag for a version means the extension version is not visible in the gallery.\n    */\n    UNLISTED(2),\n\n    /**\n    * The Published flag for a version means the extension version is visible in the gallery.\n    */\n    PUBLISHED(4),\n\n    /**\n    * The Deprecated flag for a version means the extension version is not supported and should not be used.\n    */\n    DEPRECATED(8),\n\n    /**\n    * The Prerelease flag for a version means the extension version is not yet released.\n    */\n    PRERELEASE(16),\n\n    /**\n    * The Private flag for a version means the extension version is not visible to the public.\n    */\n    PRIVATE(32),\n\n    /**\n    * The Beta flag for a version means the extension version is not yet released.\n    */\n    BETA(64),\n\n    /**\n    * The Alpha flag for a version means the extension version is not yet released.\n    */\n    ALPHA(12", "reference_code": "    NONE(0),\n", "case_type": "block"}
{"generated_code": "\n            result.put(key, value);\n        }\n        return result;\n    }\n\n    // ---------------\n\n    public <K, V> List<Map<K, V>> twoCellsAsList(String name) throws SQLException {\n        return twoCellsAsList(name, new HashMap<>());\n    }\n\n    public <K, V> List<Map<K, V>> twoCellsAsList(String name, Map<String, Object> params, INpsPlugin... plugins) throws SQLException {\n        return twoCellsAsList(xQueryMap.get(name), params, plugins);\n    }\n\n    public <K, V> List<Map<K, V>> twoCellsAsList(XQuery sql) throws SQLException {\n        return twoCellsAsList(sql, new HashMap<>());\n    }\n\n    public <K, V> List<Map<K, V>> twoCellsAsList(XQuery sql, Map<String, Object> params, INpsPlugin... plugins) throws SQLException {\n        NamedParameterStatement nps = createNPS(sql, params", "reference_code": "\n        ResultSet rs = nps.executeQuery();\n        int columnCount = rs.getMetaData().getColumnCount();\n\n        List<Object> result = new ArrayList<>();\n", "case_type": "block"}
{"generated_code": "\n    private E[] values;\n\n    public FixedListModel(E[] values) {\n        this.values = values;\n    }\n\n    public Object[] toArray() {\n        return values;\n    }\n\n    public E getElementAt(int index) {\n        return values[index];\n    }\n\n    public E getElementAt(String index) {\n        return values[Integer.parseInt(index)];\n    }\n\n    public E getElementAt(long index) {\n        return values[(int) index];\n    }\n\n    public E getElementAt(double index) {\n        return values[(int) index];\n    }\n\n    public E getElementAt(float index) {\n        return values[(int) index];\n    }\n\n    public E getElementAt(Number index) {\n        return values[(int) index];\n    }\n\n    public E getElementAt(Object index) {\n        return values[(int) index];\n    }\n\n    public E getElementAt(boolean index) {\n        return values[index ? 1 : 0];\n    }\n", "reference_code": "    E[] values;\n\n    public FixedListModel(E[] values) {\n        this.values = values;\n", "case_type": "block"}
{"generated_code": "package org.apache.hadoop.conf;\n\nimport java.net.MalformedURLException;\nimport java.net.Proxy;\nimport java.net.URLConnection;\nimport java.net.URLStreamHandler;\nimport java.net.URLStreamHandlerFactory;\nimport java.net.spi.DefaultURLStreamHandlerFactory;\nimport java.net.spi.URLStreamHandler;\nimport java.net.spi.URLStreamHandlerFactory;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.concurrent.ConcurrentMap.KeySetView;\nimport java.util.concurrent.ConcurrentMap.ValuesView;\nimport java.util.concurrent.ConcurrentNavigableMap;\nimport java.util.concurrent.ConcurrentSkipListMap;\nimport java.util.concurrent.ConcurrentSkipListSet;\nimport java.util.concurrent.ConcurrentNavigableSet;\nimport java.util.concurrent.ConcurrentMap.Node;\nimport java.util.concurrent.Con", "reference_code": "package eu.fbk.knowledgestore.client;\n\nimport java.net.MalformedURLException;\n", "case_type": "block"}
{"generated_code": " public boolean validateActivar() throws Exception {\n        // limpiamos la lista de errores\n        clearError();\n\n        // Validaciones de Negocio\n\n        return true;\n    }\n\n    /**\n     * Desactiva el TipoDeudaPlan. Previamente valida la desactivacion. \n     *\n     */\n    public void desactivar(){\n        if(!this.validateDesactivar()){\n            return;\n        }\n        this.setEstado(Estado.INACTIVO.getId());\n        GdeDAOFactory.getTipDecJurDAO().update(this);\n    }\n\n    public boolean validateDesactivar() throws Exception {\n        // limpiamos la lista de errores\n        clearError        return true;\n    }\n\n    //<#MetodosDeNegocio#>\n\n    //<#MetodosDeNegocio#>\n\n    //<#MetodosDeNegocio#>\n\n    //<#MetodosDeNegocio#>\n\n    //<#MetodosDeNegocio#>\n\n   ", "reference_code": "    public void desactivar(){\n        if(!this.validateDesactivar()){\n            return;\n        }\n        this.setEstado(Estado.INACTIVO.getId());\n        GdeDAOFactory.getTipDecJurDAO().update(this);\n", "case_type": "block"}
{"generated_code": "\n    public Bullet(final double initialX, final double initialY) {\n        texture = new Texture(Gdx.files.internal(TEXTURE_PATH));\n        canDestroy = false;\n\n        // TODO: make this more flexible\n        screenWidth = Gdx.graphics.getWidth();\n\n        // TODO: make this more flexible\n        x = initialX;\n        y = initialY;\n\n        vx = 0;\n        vy = 0;\n\n        // TODO: make this more flexible\n        updateBoundingBox();\n    }\n\n    public Bullet(final double initialX, final double initialY, final double vx, final double vy) {\n        texture = new Texture(Gdx.files.internal(TEXTURE_PATH));\n        canDestroy = false;\n\n        // TODO: make this more flexible\n        screenWidth = Gdx.graphics.getWidth();\n\n        // TODO: make this more flexible\n        x = initialX;\n        y = initialY;\n\n        this.vx = vx;\n        this.vy = vy;\n\n        // TODO:", "reference_code": "\n    public Bullet(final double initialX, final double initialY) {\n        canDestroy = false;\n        texture = new Texture(Gdx.files.internal(TEXTURE_PATH));\n", "case_type": "block"}
{"generated_code": "package com.roskart.dropwizard.jaxws.example.auth;\n\nimport com.roskart.dropwizard.jaxws.example.core.User;\nimport io.dropwizard.auth.Authenticator;\n\npublic class BasicAuthenticator implements Authenticator<String, User> {\n    @Override\n    public User authenticate(String credentials) {\n        return new User(credentials);\n    }\n}\n\nimport com.roskart.dropwizard.jaxws.example.core.User;\nimport io.dropwizard.auth.Authenticator;\n\npublic class BasicAuthenticator implements Authenticator<String, User> {\n    @Override\n    public User authenticate(String credentials) {\n        return new User(credentials);\n    }\n}\n\nimport com.roskart.dropwizard.jaxws.example.core.User;\nimport io.dropwizard.auth.Authenticator;\n\npublic class BasicAuthenticator implements Authenticator<String, User> {\n    @Override\n    public User authenticate(String credentials)", "reference_code": "package com.roskart.dropwizard.jaxws.example.auth;\n", "case_type": "block"}
{"generated_code": "    public BeanDataAdapterService(DefaultJasperReportsContext jasperReportsContext, BeanDataAdapter beanDataAdapter) \n    {\n        super(jasperReportsContext, beanDataAdapter);\n    }\n\n    public BeanDataAdapterService(DefaultJasperReportsContext jasperReportsContext) \n    {\n        super(jasperReportsContext);\n    }\n\n    public BeanDataAdapterService(JasperReportsContext jasperReportsContext) \n    {\n        super(jasperReportsContext);\n    }\n\n    public BeanDataAdapterService(BeanDataAdapter beanDataAdapter) \n    {\n        super(beanDataAdapter);\n    }\n\n    public BeanDataAdapterService() \n    {\n        super();\n    }\n\n    public BeanDataAdapterService(BeanDataAdapter beanDataAdapter, boolean useClassLoader) \n    {\n        super(beanDataAdapter, useClassLoader);\n    }\n\n    public BeanDataAdapterService(BeanDataAdapter beanDataAdapter, boolean useClassLoader, boolean useFieldDescription) \n    {\n        super(bean", "reference_code": "    public BeanDataAdapterService(BeanDataAdapter beanDataAdapter) \n    {\n        this(DefaultJasperReportsContext.getInstance(), beanDataAdapter);\n", "case_type": "block"}
{"generated_code": "            public boolean check(int size, Collection<?> collection){\n                return size == collection.size();\n            }\n        },\n        LESS(){\n\n            @Override\n            public boolean check(int size, Collection<?> collection){\n                return size < collection.size();\n            }\n        },\n        LESS_OR_EQUAL(){\n\n            @Override\n            public boolean check(int size, Collection<?> collection){\n                return size <= collection.size();\n            }\n        },\n        GREATER(){\n\n            @Override\n            public boolean check(int size, Collection<?> collection){\n                return size > collection.size();\n            }\n        },\n\n        /**\n         * @deprecated Use {@link #GREATER_OR_EQUAL} instead.\n         */\n        @Deprecated\n        @Override\n        public boolean check(int size, Collection<?> collection){\n            return size >= collection.size();\n        },\n\n        /**\n         * @deprecated Use {@link #LESS_OR_EQUAL} instead.\n         */\n        @Deprecated\n        @", "reference_code": "            public boolean check(int size, Collection<?> collection){\n                return size == collection.size();\n            }\n        },\n", "case_type": "block"}
{"generated_code": "    public String getEventTypeName() {\n        return eventTypeName;\n    }\n\n    public String toString() {\n        return \"InsertIntoDesc[\" + streamSelector + \", \" + eventTypeName + \", \" + columnNames + \"]\";\n    }\n\n    public boolean equals(Object obj) {\n        return (obj instanceof InsertIntoDesc) &&\n                ((InsertIntoDesc) obj).streamSelector.equals(streamSelector) &&\n                ((InsertIntoDesc) obj).eventTypeName.equals(eventTypeName);\n    }\n\n    public int hashCode() {\n        return toString().hashCode();\n    }\n\n    public Object clone() {\n        return new InsertIntoDesc(streamSelector, eventTypeName);\n    }\n\n    public void setColumnNames(List<String> columnNames) {\n        this.columnNames = columnNames;\n    }\n\n    public void setColumnNames(String... columnNames) {\n        for (String columnName : columnNames) {\n            add(columnName);\n        }\n    }\n\n    public void setColumnNames(String column", "reference_code": "    public String getEventTypeName()\n    {\n        return eventTypeName;\n    }\n", "case_type": "block"}
{"generated_code": "            test.doTest();\n        } catch (Exception t) {\n            System.err.println(\"Test failed: \" + t.getMessage());\n            t.printStackTrace();\n        } catch (Throwable t) {\n            System.err.println(\"Test failed: \" + t.getMessage());\n            t.printStackTrace();\n        } catch (Error t) {\n            System.err.println(\"Test failed: \" + t.getMessage());\n            t.printStackTrace();\n        } catch (RuntimeException t) {\n            System.err.println(\"Test failed: \" + t.getMessage());\n            t.printStackTrace();\n        } catch (Throwable t) {\n            System.err.println(\"Test failed: \" + t.getMessage());\n            t.printStackTrace();\n        } catch (Error t) {\n            System.err.println(\"Test failed: \" + t.getMessage());\n            t.printStackTrace();\n        } catch (RuntimeException t) {\n            System.err.println(\"Test failed: \" + t.getMessage());\n            t.printStackTrace();\n        } catch (Throwable t", "reference_code": "            test.doTest();\n        } catch (Throwable t) {\n", "case_type": "block"}
{"generated_code": "      node = node.getNextSibling();\n    }\n  }\n\n  public static void extendWidth( final RenderNode node, final long amount ) {\n    if ( amount < 0 ) {\n      throw new IllegalArgumentException( \"Cannot shrink elements.\" );\n    }\n    if ( node == null || amount == 0 ) {\n      return;\n    }\n\n    node.setCachedWidth( node.getCachedWidth() + amount );\n\n    RenderBox parent = node.getParent();\n    while ( parent != null ) {\n      parent.setCachedWidth( parent.getCachedWidth() + amount );\n      parent = parent.getParent();\n    }\n  }\n\n  public static void shrinkWidth( final RenderNode node, final long amount ) {\n    if ( amount < 0 ) {\n      throw new IllegalArgumentException( \"Cannot shrink elements.\" );\n    }\n    if ( node == null || amount == 0 ) {\n      return;\n    }\n\n    node.setCachedWidth( node.getCachedWidth() - amount );\n\n    RenderBox parent = node.getParent", "reference_code": "      node = node.getNext();\n", "case_type": "block"}
{"generated_code": "   * @return package or null if package not found.\n   *         Note: this method may return package from cache if it is found in local cache.\n   *         If you want to check if package is found in remote cache, use {@link #findPackage(String, boolean)}\n   *         instead.\n   *         If you want to check if package is found in local cache, use {@link #findPackage(String, boolean)}\n   *         instead.\n   *         If you want to check if package is found in both remote and local cache, use {@link #findPackage(String)}\n   *         instead.\n   *         If you want to check if package is found in remote cache, use {@link #findPackage(String)}\n   *         instead.\n   *         If you want to check if package is found in local cache, use {@link #findPackage(String)}\n   *         instead.\n   *         If you want to check if package is found in both remote and local cache, use {@link #findPackage(String)}\n   *         instead.\n   *         If you want to check if package is found in remote cache, use {@link #", "reference_code": "   *                   <strong>warning</strong>: non-cache access may be slow on remote interpreters.\n   *                   Use {@link #findPackage(String)}: this method uses cache on remote interpreters and skips\n", "case_type": "block"}
{"generated_code": "        Optional<Transaction> savedTransactionOptional = testSubject.findById(id);\n        assertThat(savedTransactionOptional).isPresent();\n\n        Optional<Transaction> savedTransactionOptional2 = testSubject.findById(id);\n        assertThat(savedTransactionOptional2).isPresent();\n\n        assertThat(savedTransactionOptional.get()).isEqualTo(savedTransactionOptional2.get());\n\n        Optional<Transaction> savedTransactionOptional3 = testSubject.findById(id);\n        assertThat(savedTransactionOptional3).isPresent();\n\n        assertThat(savedTransactionOptional.get()).isEqualTo(savedTransactionOptional3.get());\n\n        Optional<Transaction> savedTransactionOptional4 = testSubject.findById(id);\n        assertThat(savedTransactionOptional4).isPresent();\n\n        assertThat(savedTransactionOptional.get()).isEqualTo(savedTransactionOptional4.get());\n\n        Optional<Transaction> savedTransactionOptional5 = testSubject.findById(id);\n        assertThat(savedTransactionOptional5).isPresent();\n\n        assertThat(savedTransactionOptional.get()).isEqualTo(savedTransactionOptional5.get", "reference_code": "        Optional<Transaction> savedTransactionOptional = testSubject.findById(id);\n        assertThat(savedTransactionOptional).isPresent();\n", "case_type": "block"}
{"generated_code": "    }\n    @Override\n    public Class<Feature> getNodeClass ()\n    {\n        return Feature.class;\n    }\n    @Override\n    public Class<Game> getParentNodeClass ()\n    {\n        return Game.class;\n    }\n    @Override\n    public Class<?> getParentNodeValueClass ()\n    {\n        return Game.class;\n    }\n    @Override\n    public Class<?> getValueClass ()\n    {\n        return Feature.class;\n    }\n    @Override\n    public Class<?> getValueTypeClass ()\n    {\n        return Feature.class;\n    }\n    @Override\n    public Class<?> getValueType ()\n    {\n        return Feature.class;\n    }\n    @Override\n    public Class<?> getValueType (final boolean nullable)\n    {\n        return Feature.class;\n    }\n    @Override\n    public Class<?> getValueType (final boolean nullable, final boolean optional)\n    {\n        return Feature.class;\n    }\n    @Override\n    public Class<?> get", "reference_code": "    }\n    @Override\n    public Class<Feature> getModelClass ()\n", "case_type": "block"}
{"generated_code": "        assertTrue(\"StatVisualizer Functor\", StatVisualizer.testFunctors());\n    }\n\n    @Test\n    public void testJMeterTestCase() throws Exception {\n        assertTrue(\"JMeterTestCase Functor\", JMeterTestCase.testFunctors());\n    }\n\n    @Test\n    public void testJMeterTestCase2() throws Exception {\n        assertTrue(\"JMeterTestCase2 Functor\", JMeterTestCase2.testFunctors());\n    }\n\n    @Test\n    public void testJMeterTestCase3() throws Exception {\n        assertTrue(\"JMeterTestCase3 Functor\", JMeterTestCase3.testFunctors());\n    }\n\n    @Test\n    public void testJMeterTestCase4() throws Exception {\n        assertTrue(\"JMeterTestCase4 Functor\", JMeterTestCase4.testFunctors());\n    }\n\n    @Test\n    public void testJMeterTestCase5() throws Exception {\n        assertTrue(\"JMeterTestCase5 Functor\", JMeterTestCase5.testFunctors());\n    }\n\n    @Test\n    public void testJMeter", "reference_code": "        assertTrue(\"StatVisualizer Functor\", StatVisualizer.testFunctors());\n", "case_type": "block"}
{"generated_code": "        return new AnubisEngine(this);\n    }\n\n    @Override\n    public String getStatement(String text) {\n        return text;\n    }\n\n    @Override\n    public String getHelpTopic() {\n        return \"anubis.help\";\n    }\n\n    @Override\n    public String getIncludeFileExtension() {\n        return \"an\";\n    }\n\n    @Override\n    public String getJavadocURL() {\n        return \"http://anubis.sourceforge.net/\";\n    }\n\n    @Override\n    public String getMethodHandlesSupported() {\n        return \"true\";\n    }\n\n    @Override\n    public String getPrintStackTraceOption() {\n        return \"true\";\n    }\n\n    @Override\n    public String getProgramSupported() {\n        return \"true\";\n    }\n\n    @Override\n    public String getProgrammerReference() {\n        return \"http://anubis.sourceforge.net/\";\n    }\n\n    @Override\n    public String getReleaseInfo() {\n        return \"0.", "reference_code": "        return new AnubisEngine(this);\n    }\n", "case_type": "block"}
{"generated_code": "  private HDFSTextSerializer() {\n  }\n\n  private static Text makeText(Event e) {\n    Text textObject = new Text();\n    // Write the data to HDFS\n    // TODO: add timestamp\n    // TODO: add event type\n    // TODO: add event source\n    // TODO: add event source version\n    // TODO: add event source host\n    // TODO: add event source port\n    // TODO: add event source hostname\n    // TODO: add event source app\n    // TODO: add event source host ip\n    // TODO: add event source host mac\n    // TODO: add event source host os\n    // TODO: add event source host os version\n    // TODO: add event source host os arch\n    // TODO: add event source host os vendor\n    // TODO: add event source host os vendor version\n    // TODO: add event source host os vendor arch\n    // TODO: add event source host os vendor vendor version\n    // TODO: add event source host os vendor vendor vendor version\n    // TODO: add event source host os vendor vendor vendor vendor version\n    // TODO: add event source host os vendor vendor vendor vendor", "reference_code": "  private Text makeText(Event e) {\n    Text textObject = new Text();\n", "case_type": "block"}
{"generated_code": "\n    @Generated\n    @StructureField(order = 0, isGetter = true)\n    private long __peer;\n\n    @Generated\n    @StructureField(order = 0, isGetter = true)\n    private int __v;\n\n    @Generated\n    @StructureField(order = 0, isGetter = true)\n    private int __v_swapped;\n\n    @Generated\n    @StructureField(order = 0, isGetter = true)\n    private int __v_swapped_swapped;\n\n    @Generated\n    @StructureField(order = 0, isGetter = true)\n    private int __v_swapped_swapped_swapped;\n\n    @Generated\n    @StructureField(order = 0, isGetter = true)\n    private int __v_swapped_swapped_swapped_swapped;\n\n    @Generated\n    @StructureField(order = 0, isGetter = true)\n    private int __v_swapped_swapped_swapped_swapped_swapped;\n\n    @Generated\n    @", "reference_code": "\n    @Generated\n", "case_type": "block"}
{"generated_code": "     * @return\n     */\n    @RequestMapping(value = \"\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List<Valor> get() {\n\n        // TODO: implementar\n\n        // return Valor.getDefault();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor>();\n\n        // return new ArrayList<Valor", "reference_code": "     * @return List<Valores> valores\n     * @throws Exception\n     */\n    @RequestMapping(method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public List<Valor> getDataContext() {\n", "case_type": "block"}
{"generated_code": "     * Sends the notification to the receivers of the platform.\n     *\n     * The receivers are identified by the receiverIDs. The receiverIDs are the platform specific receiver tokens.\n     * The data is the data to be sent. The data is a JSON string.\n     * The data is sent to the receivers of the\n     * <code>visibleNotification</code>. The data is sent to the receivers of the\n     * <code>visibleNotification</code>. The data is sent to the receivers of the\n     * <code>visibleNotification</code>. The data is sent to the receivers of the\n     * <code>visibleNotification</code>. The data is sent to the receivers of the\n     * <code>visibleNotification</code>. The data is sent to the receivers of the\n     * <code>visibleNotification</code>. The data is sent to the receivers of the\n     * <code>visibleNotification</code>. The data is sent to the receivers of the\n     * <code>visibleNotification</code>. The data is sent to the receivers", "reference_code": "     * Implement this to do the actual sending which is specific to the used\n", "case_type": "block"}
{"generated_code": "    public long getDuration() {\n        return duration;\n    }\n\n    public void setDuration(long duration, long endTime) {\n        this.duration = endTime - startTime;\n        this.endTime = endTime;\n        valueChanged(\"duration\");\n        valueChanged(\"endTime\");\n        valueChanged(\"startTime\");\n        valueChanged(\"duration\");\n        valueChanged(\"endTime\");\n        valueChanged(\"startTime\");\n        valueChanged(\"duration\");\n        valueChanged(\"endTime\");\n        valueChanged(\"startTime\");\n        valueChanged(\"duration\");\n        valueChanged(\"endTime\");\n        valueChanged(\"startTime\");\n        valueChanged(\"duration\");\n        valueChanged(\"endTime\");\n        valueChanged(\"startTime\");\n        valueChanged(\"duration\");\n        valueChanged(\"endTime\");\n        valueChanged(\"startTime\");\n        valueChanged(\"duration\");\n        valueChanged(\"endTime\");\n        valueChanged(\"startTime\");\n        valueChanged(\"duration\");\n        valueChanged(\"endTime\");\n        valueChanged(\"startTime\");\n        valueChanged(\"duration\");\n        valueChanged(\"endTime\");\n        valueChanged", "reference_code": "    public long getDuration() {\n        return duration;\n", "case_type": "block"}
{"generated_code": "} from this physics world.\n     *\n     * @param gvrBody the {@link GVRRigidBody} to remove.\n     */\n    public void removeBody(GVRRigidBody gvrBody) {\n        if (!contains(gvrBody)) {\n            return;\n        }\n\n        mRigidBodies.remove(gvrBody.getNative());\n        NativePhysics3DWorld.removeRigidBody(getNative(), gvrBody.getNative());\n    }\n\n    @Override\n    public void onSceneObjectAdded(GVRSceneObject sceneObject) {\n        GVRComponent component = sceneObject.getComponent(GVRComponent.getComponentType());\n        if (component != null && component instanceof GVRRigidBody) {\n            addBody((GVRRigidBody) component);\n        }\n    }\n\n    @Override\n    public void onSceneObjectRemoved(GVRSceneObject sceneObject) {\n        GVRComponent component = sceneObject.getComponent(GVRComponent.getComponentType());\n        if (component != null && component", "reference_code": "\n    }\n", "case_type": "block"}
{"generated_code": "                .withLayoutBackground(layoutBackground)\n                .withMenuBackground(menuBackground)\n                .withMenuGravity(Gravity.BOTTOM)\n                .build();\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create menu\n\n        // Create", "reference_code": "                .withBackground(menuBackground)\n                .withMargins(50, 50, 50, 50)\n                .withLayoutBackground(layoutBackground)\n                .withCancelOnTouchOutside(true)\n                .build();\n\n", "case_type": "block"}
{"generated_code": "        g.getEdgeColorProperty().setPalette(new TrueColors24Map());\n\n        while (true)\n        {\n            g.getVertexColorProperty().setPalette(new TrueColors24Map());\n            g.getEdgeColorProperty().setPalette(new TrueColors24Map());\n\n            // change colors\n\n            // pick a random vertex\n\n            // pick a random edge\n\n            // change the color\n\n            // sleep for 500 ms\n\n            // repeat\n\n            // change colors\n\n            // pick a random vertex\n\n            // pick a random edge\n\n            // change the color\n\n            // sleep for 500 ms\n\n            // repeat\n\n            // change colors\n\n            // pick a random vertex\n\n            // pick a random edge\n\n            // change the color\n\n            // sleep for 500 ms\n\n            // repeat\n\n            // change colors\n\n            // pick a random vertex\n\n            // pick a random edge\n\n            // change the color\n\n            // sleep for 500 ms\n\n            // repeat\n\n            //", "reference_code": "        g.display();\n\n        for (int i = 0;; ++i)\n        {\n", "case_type": "block"}
{"generated_code": "            // initialize the admin page\n            add(new AdminPage());\n        }\n    }\n\n    private void cleanupSessionFactory() {\n        if (sf != null) {\n            sf.cleanup();\n        }\n    }\n\n    private JcrSessionFactory getJcrSessionFactory() {\n        return (JcrSessionFactory) getApplication().getComponentInstantiationListener().getComponent(JcrSessionFactory.class);\n    }\n\n    private WorkspaceManager getWorkspaceManager() {\n        return (WorkspaceManager) getApplication().getComponentInstantiationListener().getComponent(WorkspaceManager.class);\n    }\n\n    private BrixConfig getBrixConfig() {\n        return (BrixConfig) getApplication().getComponentInstantiationListener().getComponent(BrixConfig.class);\n    }\n\n    private void setImportUUIDBehavior(BrixConfig config) {\n        config.setImportUUIDBehavior(ImportUUIDBehavior.ALLOW);\n    }\n\n    private void setDefaultSessionBehavior(BrixConfig config) {\n        config.setDefaultSessionBehavior(SessionBe", "reference_code": "\n        // mount admin page\n        mountPage(\"/admin\", AdminPage.class);\n\n", "case_type": "block"}
{"generated_code": "    @Override\n    public String toString() {\n        return \"GeowaveRowId [insertionId=\" + Arrays.toString(insertionId) + \", dataId=\" + Arrays.toString(dataId)\n                + \", adapterId=\" + Arrays.toString(adapterId) + \", numberOfDuplicates=\" + numberOfDuplicates + \"]\";\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + Arrays.hashCode(adapterId);\n        result = prime * result + Arrays.hashCode(dataId);\n        result = prime * result + Arrays.hashCode(insertionId);\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        GeowaveRowId other = (GeowaveRowId", "reference_code": "    public boolean isDeduplicationEnabled() {\n        return numberOfDuplicates >= 0;\n    }\n\n", "case_type": "block"}
{"generated_code": "    public String getGoal()\n    {\n        return goal;\n    }\n\n    public String getGoal( String defaultValue )\n    {\n        return goal != null ? goal : defaultValue;\n    }\n\n    public void setGoal( String goal, String defaultValue )\n    {\n        this.goal = goal != null ? goal : defaultValue;\n    }\n\n    public void setGoal( String goal, String defaultValue, String defaultGoal )\n    {\n        this.goal = goal != null ? goal : defaultValue;\n        this.goal = this.goal != null ? this.goal : defaultGoal;\n    }\n\n    public void setGoal( String goal, String defaultValue, String defaultGoal, String defaultGoal2 )\n    {\n        this.goal = goal != null ? goal : defaultValue;\n        this.goal = this.goal != null ? this.goal : defaultGoal;\n        this.goal = this.goal != null ? this.goal : defaultGoal2;\n    }", "reference_code": "    public String getGoal()\n    {\n        return goal;\n    }\n", "case_type": "block"}
{"generated_code": "        return clusterings;\n    }\n\n    public abstract Attribute<?> capability();\n\n    public abstract String name();\n\n    public abstract String description();\n\n    public abstract String version();\n\n    public abstract String author();\n\n    public abstract String license();\n\n    public abstract String website();\n\n    public abstract String email();\n\n    public abstract String contact();\n\n    public abstract String copyright();\n\n    public abstract String license();\n\n    public abstract String[] options();\n\n    public abstract String[] optionsDescription();\n\n    public abstract String[] optionsDefault();\n\n    public abstract String[] optionsExample();\n\n    public abstract String[] optionsExampleDescription();\n\n    public abstract String[] optionsExampleDefault();\n\n    public abstract String[] optionsExampleExample();\n\n    public abstract String[] optionsExampleExampleDescription();\n\n    public abstract String[] optionsExampleExampleDefault();\n\n    public abstract String[] optionsExampleExampleExample();\n\n    public abstract String[] optionsExampleExampleExampleDescription();\n\n    public abstract String[] optionsExampleExampleExampleDefault();\n\n    public abstract String[] optionsExampleExampleExampleExample();\n\n    public abstract String[] optionsExample", "reference_code": "        return clusterings;\n    }\n", "case_type": "block"}
{"generated_code": "\n    private final static Logger logger = LoggerFactory.getLogger(RMEActivator.class);\n\n    /**\n     * The context of the bundle.\n     */\n\n    /**\n     * The context for the bundle.\n     */\n\n    /**\n     * The context for the bundle.\n     */\n\n    static final String BUNDLE_ID = \"org.openhab.binding.rme\";\n\n    /**\n     * The context for the bundle.\n     */\n\n    /**\n     * The context for the bundle.\n     */\n\n    /**\n     * The context for the bundle.\n     */\n\n    /**\n     * The context for the bundle.\n     */\n\n    /**\n     * The context for the bundle.\n     */\n\n    /**\n     * The context for the bundle.\n     */\n\n    /**\n     * The context for the bundle.\n     */\n\n    /**\n     * The context for the bundle.\n     */\n\n    /**\n     * The context for the bundle.\n     */\n\n    /**\n     * The context for the bundle.\n     */\n\n", "reference_code": "\n    private static Logger logger = LoggerFactory.getLogger(RMEActivator.class);\n\n", "case_type": "block"}
{"generated_code": "        this.clientRequestId = clientRequestId;\n\n        if (clientRequestId != null && clientRequestId.length() > 150) {\n            throw new IllegalArgumentException(\"clientRequestId was longer than 150 characters.\");\n        }\n\n        this.clientRequestId = clientRequestId;\n\n        if (clientRequestId != null && clientRequestId.length() < 1) {\n            throw new IllegalArgumentException(\"clientRequestId was less than 1 characters.\");\n        }\n\n        this.clientRequestId = clientRequestId;\n\n        if (clientRequestId != null && clientRequestId.length() > 150) {\n            throw new IllegalArgumentException(\"clientRequestId was longer than 150 characters.\");\n        }\n\n        this.clientRequestId = clientRequestId;\n\n        if (clientRequestId != null && clientRequestId.length() < 1) {\n            throw new IllegalArgumentException(\"clientRequestId was less than 1 characters.\");\n        }\n\n        this.clientRequestId = clientRequestId;\n\n        if (clientRequestId != null && clientRequestId.length", "reference_code": "        this.clientRequestId = clientRequestId;\n", "case_type": "block"}
{"generated_code": "bar.setVisibility(VISIBLE);\n        }\n               import android.view.View;\n\nimport android.view.animation.Animation;\nimport android.view.animation.ScaleAnimation;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\n\nimport connect.ui.activity.R;\n\npublic class VideoButtonView extends LinearLayout {\n\n    private final ImageView outCircularImg;\n    private final ImageView inCircularImg;\n    private final CricleProgressbar progressbar;\n    private OnTouchStatusListence onTouchStatusListence;\n    private boolean isLong = false;\n    private long downTime;\n    private final long LONG_TOUCH_TIME = 300;\n    private boolean vidioIng = false;\n\n    public VideoButton    import android.view.View;\n\nimport android.view.animation.Animation;\nimport android.view.animation.ScaleAnimation;\nimport android.widget.ImageView;\nimport android.widget.LinearLayout;\n\nimport connect.ui.activity.R;\n\npublic class VideoButtonView", "reference_code": "import android.view.View;\nimport android.view.animation.Animation;\nimport android.view.animation.ScaleAnimation;\nimport android.widget.ImageView;\n", "case_type": "block"}
{"generated_code": "                                        NumericUtils.doubleToPrefixCoded(Double.parseDouble(part1)),\n                                        NumericUtils.doubleToPrefixCoded(Double.parseDouble(part2)),\n                                        inclusive);\n                        return query;\n                    } catch (NumberFormatException e) {\n                        throw new IllegalArgumentException(\"Cannot parse query (\" + e.getMessage() + \").\", e);\n                       }\n    }\n\n    public String getField() {\n        return field;\n    }\n\n    public void setField(String field) {\n        this.field = field;\n    }\n\n    public Analyzer getAnalyzer() {\n        return analyzer;\n    }\n\n    public void setAnalyzer(Analyzer analyzer) {\n        this.analyzer = analyzer;\n    }\n\n    public boolean isDoubleValue() {\n        return doubleValue;\n    }\n\n    public void setDoubleValue(boolean doubleValue) {\n        this.doubleValue = doubleValue;\n    }\n\n    public String getModifiedText(String text) {\n        return text;\n    }\n\n}\n\n//src/main/", "reference_code": "    public void setAnalyzer(Analyzer analyzer) {\n        this.analyzer = analyzer;\n    }\n", "case_type": "block"}
{"generated_code": "import org.iotivity.base.OcException;\nimport org.iotivity.base.OcPlatform;\nimport org.iotivity.base.OcRepresentation;\nimport org.iotivity.base.OcResource;\nimport org.iotivity.base.OcResourceHandle;\nimport org.iotivity.base.OcRepresentation;\nimport org.iotivity.base.OcResource;\nimport org.iotivity.base.OcResourceHandle;\nimport org.iotivity.base.OcRepresentation;\nimport org.iotivity.base.OcResource;\nimport org.iotivity.base.OcResourceHandle;\nimport org.iotivity.base.OcRepresentation;\nimport org.iotivity.base.OcResource;\nimport org.iotivity.base.OcResourceHandle;\nimport org.iotivity.base.OcRepresentation;\nimport org.iotivity.base.OcResource;\nimport org.iotivity.base.OcResourceHandle;\nimport org.iotivity.base.OcRepresentation;\nimport org.iotivity", "reference_code": "import org.iotivity.base.OcException;\nimport org.iotivity.base.OcPlatform;\nimport org.iotivity.base.OcRepresentation;\n", "case_type": "block"}
{"generated_code": "import java.util.LinkedList;\nimport java.util.List;\n\nimport com.alibaba.nacos.naming.consistency.ephemeral.distro.DistroKey;\n\nimport lombok.Getter;\nimport lombok.Setter;\n\nimport org.apache.commons.lang3.StringUtils;\n\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLongArray;\nimport java.util.concurrent.atomic.AtomicReferenceArray;\nimport java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\nimport java.util.concurrent.atomic.AtomicStampedReference;\nimport java.util.concurrent.atomic.AtomicMarkableReference;\nimport java.util.concurrent.atomic.AtomicIntegerArray;\nimport java.util.concurrent.atomic.AtomicLongFieldUpdater;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\nimport java.", "reference_code": "import com.alibaba.nacos.core.distributed.distro.entity.DistroKey;\n\nimport java.util.LinkedList;\nimport java.util.List;\n", "case_type": "block"}
{"generated_code": "\n            }\n          else {\n\n                System.out.println(\"No esta ordenado\");\n\n            }\n\n          }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "reference_code": "\n            }\n            else{ System.out.println(\"No esta ordenado\");\n\n        }\n\n", "case_type": "block"}
{"generated_code": "        reader.setSchema(reader.getSchema());\n        decoder = new DummyDecoder(byteArrayInputStream);\n        inMessage = getInputResult(decoder);\n        inMessage.setAttribute(AXIOMUtil.createQName(\"xmlns:xsi\"), AXIOMUtil.createOMElement(\"http://www.w3.org/2001/XMLSchema-instance\"));\n        inMessage.setAttribute(AXIOMUtil.createQName(\"xsi:schemaLocation\"), AXIOMUtil.createOMElement(\"http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema.xsd\"));\n        inMessage.setAttribute(AXIOMUtil.createQName(\"xsi:noNamespaceSchemaLocation\"), AXIOMUtil.createOMElement(\"http://www.w3.org/2001/XMLSchema-instance http://www.w3.org/2001/XMLSchema.xsd\"));\n        inMessage.setAttribute(AXIOMUtil.createQName(\"xmlns\"), AX", "reference_code": "        reader.setSchema(mappingResourceLoader.getInputSchema());\n        decoder = new DummyDecoder(byteArrayInputStream);\n        reader.read(reuse, decoder);\n", "case_type": "block"}
{"generated_code": "    }\n\n    /* (non-Javadoc)\n     * @see com.ibm.gaiandb.udpdriver.common.protocol.Message#clean()\n     */\n    public void clean()\n\n    {\n        queryID = null;\n        sequenceNumber = -1;\n    }\n\n    /* (non-Javadoc)\n     * @see com.ibm.gaiandb.udpdriver.common.protocol.Message#clean()\n     */\n    public void clean( boolean cleanBinaryData )\n\n    {\n        super.clean( cleanBinaryData );\n    }\n\n    /* (non-Javadoc)\n     * @see com.ibm.gaiandb.udpdriver.common.protocol.Message#clean()\n     */\n    public void clean()\n\n    {\n        clean( true );\n    }\n\n    /* (non-Javadoc)\n     * @see com.ibm.gaiandb.udpdriver.common.protocol.Message#clean()\n     */\n    public void clean( boolean cleanBinaryData, boolean cleanData )", "reference_code": "    }\n\n    /* (non-Javadoc)\n     * @see com.ibm.gaiandb.udpdriver.common.protocol.Message#clean()\n     */\n    public void clean()\n", "case_type": "block"}
{"generated_code": "    extends AdminDisabled_Event\n{\n    public AdminDisabled() {\n    }\n\n    public AdminDisabled(AdminDisabled value) {\n        super(value);\n    }\n\n    public AdminDisabled(AdminDisabled value, AdminDisabled__FieldChange change) {\n        super(value, change);\n    }\n\n    public AdminDisabled(AdminDisabled value, AdminDisabled__FieldChange change, Object newValue) {\n        super(value, change, newValue);\n    }\n\n    public AdminDisabled(AdminDisabled value, AdminDisabled__FieldChange change, Object newValue, String fieldName) {\n        super(value, change, newValue, fieldName);\n    }\n\n    public AdminDisabled(AdminDisabled value, AdminDisabled__FieldChange change, Object newValue, String fieldName, String field) {\n        super(value, change, newValue, fieldName, field);\n    }\n\n    public AdminDisabled(AdminDisabled value, AdminDisabled__FieldChange change, Object newValue, String fieldName", "reference_code": "    extends HostConfigFault\n{\n", "case_type": "block"}
{"generated_code": "\n    @Override\n    public EnumSet<TickType> getTickTypes() {\n        return EnumSet.of(TickType.CLIENT, TickType.RENDER);\n    }\n\n    @Override\n    public boolean isTickable() {\n        return true;\n    }\n\n    @Override\n    public int getTickInterval() {\n        return 20;\n    }\n\n    @Override\n    public boolean shouldReceiveTick() {\n        return true;\n    }\n\n    @Override\n    public boolean shouldTick(EnumSet<TickType> type) {\n        return type.contains(TickType.CLIENT);\n    }\n\n    @Override\n    public void handleTick(EnumSet<TickType> type, Object... tickData) {\n    }\n\n    @Override\n    public void handleClientTick(EnumSet<TickType> type, Object... tickData) {\n    }\n\n    @Override\n    public void handleRenderTick(EnumSet<TickType> type, Object... tickData) {\n    }\n", "reference_code": "\n    @Override\n    public EnumSet<TickType> ticks() {\n        return EnumSet.of(TickType.RENDER, TickType.CLIENT);\n    }\n", "case_type": "block"}
{"generated_code": "        QuickAction mQuickAction = new QuickAction(this);\n\n        mQuickAction.addActionItem(addItem);\n        mQuickAction.addActionItem(acceptItem);\n\n        //add the upload action item\n        mQuickAction.addActionItem(uploadItem);\n\n        //add the upload action item\n        mQuickAction.addActionItem(uploadItem);\n        mQuickAction.addActionItem(uploadItem);\n        mQuickAction.addActionItem(uploadItem);\n        mQuickAction.addActionItem(uploadItem);\n        mQuickAction.addActionItem(uploadItem);\n        mQuickAction.addActionItem(uploadItem);\n        mQuickAction.addActionItem(uploadItem);\n        mQuickAction.addActionItem(uploadItem);\n        mQuickAction.addActionItem(uploadItem);\n        mQuickAction.addActionItem(uploadItem);\n        mQuickAction.addActionItem(uploadItem);\n        mQuickAction.addActionItem(uploadItem);\n        mQuickAction.addActionItem(uploadItem);\n        mQuickAction.addActionItem(uploadItem);\n        m", "reference_code": "        final QuickAction mQuickAction  = new QuickAction(this);\n\n        mQuickAction.addActionItem(addItem);\n        mQuickAction.addActionItem(acceptItem);\n", "case_type": "block"}
{"generated_code": "            this.right = right;\n        }\n    }\n\n    // 1 0 2 1 3 4 2 3 1\n    // 1 0 2 1 3 4 2 3 1\n    // 1 0 2 1 3 4 2 3 1\n    // 1 0 2 1 3 4 2 3 1\n    // 1 0 2 1 3 4 2 3 1\n    // 1 0 2 1 3 4 2 3 1\n    // 1 0 2 1 3 4 2 3 1\n    // 1 0 2 1 3 4 2 3 1\n    // 1 0 2 1 3 4 2 3 1\n    // 1 0 2 1 3 4 2 3 1\n    // 1 0 2 1 3 4 2 3 1\n    // 1 0 2 1", "reference_code": "            this.right = right;\n        }\n    }\n", "case_type": "block"}
{"generated_code": "\n       import org.testng.annotations.DataProvider;\nimport org.testng.annotations.Test;\n\npublic class ClusterEntityTest {\n\n    /**\n     * Test context.\n     */\n    @SuppressWarnings(\"unused\")\n    @org.testng.annotations.Test\n    @org.testng.annotations.Test(groups = \"integration\")\n    @org.testng.annotations.Test(groups = \"integration\", dependsOnGroups = \"integration\")\n    @org.testng.annotations.Test(groups = \"integration\", dependsOnGroups = \"integration\")\n    @org.testng.annotations.Test(groups = \"integration\", dependsOnGroups = \"integration\")\n    @org.testng.annotations.Test(groups = \"integration\", dependsOnGroups = \"integr    import org.apache.falcon.client.ClientResponse;\n\npublic class ClusterEntityTest {\n\n    /**\n     * Test context.\n     */\n    @SuppressWarnings(\"unused\")\n    @org.testng.an", "reference_code": "import org.testng.annotations.DataProvider;\nimport org.testng.annotations.Test;\n\nimport com.sun.jersey.api.client.ClientResponse;\n\npublic class ClusterEntityValidationIT {\n", "case_type": "block"}
{"generated_code": "package com.github.jhipster.driver.DriverApplication;\n\nimport com.github.jhipster.driver.DriverApplication;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@SpringApplicationConfiguration(classes = DriverApplication.class)\n@ActiveProfiles(\"test\")\npublic class AbstractTest {\n\n    @Before\n    public void setUp() throws Exception {\n    }\n\n    @Test\n    public void testSomething() {\n    }\n}\n\nimport com.github.jhipster.driver.DriverApplication;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.test.context", "reference_code": "package br.com.nineninetaxis.driver;\n\n", "case_type": "block"}
{"generated_code": "    public static final int OnMeleeHit = 4;\n    public static final int OnMeleeHitBy = 5;\n    public static final int OnMeleeHitByCreature = 6;\n    public static final int OnMeleeHitByCreatureBy = 7;\n    public static final int OnMeleeHitByCreatureByCreature = 8;\n    public static final int OnMeleeHitByCreatureByCreatureBy = 9;\n    public static final int OnMeleeHitByCreatureByCreatureByCreature = 10;\n    public static final int OnMeleeHitByCreatureByCreatureByCreatureBy = 11;\n    public static final int OnMeleeHitByCreatureByCreatureByCreatureByCreature = 12;\n    public static final int OnMeleeHitByCreatureByCreatureByCreatureByCreatureBy = 13;\n    public static final int OnMeleeHitByCreatureByCreatureByCreatureByCreatureByCreature = 14;\n    public static final int OnMeleeHitByCreatureByCreatureBy", "reference_code": "    public static final int OnDamaged = 4;\n", "case_type": "block"}
{"generated_code": "import com.google.common.io.Resources;\nimport com.temenos.interaction.rimdsl.DomainModel;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.List;\nimport", "reference_code": "import com.google.common.io.Resources;\nimport com.temenos.interaction.rimdsl.RIMDslInjectorProvider;\nimport com.temenos.interaction.rimdsl.rim.DomainModel;\n", "case_type": "block"}
{"generated_code": " {\n        return isDisabled(UserUtils.getUserProperty(user));\n    }\n\n    public static boolean isDisabled(final User user,\n            final KeyboardShortcutsUserProperty property) {\n               return JobUtils.getAllJobsAsJsonArray().toString();\n    }\n\n    public static String getAllNodesAsJson(final StaplerRequest req) {\n        return NodeUtils.getAllNodesAsJsonArray(req).toString();\n    }\n\n    public static String getAllPermalinksAsJson(final StaplerRequest req) {\n        return PermalinkUtils.getAllPermalinksAsJsonArray(req).toString();\n    }\n\n    public static String getAllViewJobNamesAsJson(final StaplerRequest req) {\n        return ViewUtils.getAllViewJobNamesAsJsonArray(req).toString();\n    }\n\n    public static String getAllViewsAsJson(final StaplerRequest req) {\n        return ViewUtils.getAllViewsAsJsonArray(req).toString();\n    }\n\n    public static String getBaseJobUrl(final StaplerRequest req) {", "reference_code": "        return JobUtils.getAllJobsAsJsonArray().toString();\n    }\n\n", "case_type": "block"}
{"generated_code": "    }\n\n    public int getNum(){\n        return num;\n    }\n\n    //=========ACCESSORS AND MODIFIERS==================\n\n    public void setNum(int n){\n        num = n;\n    }\n\n    public void setSubscript(int s){\n        subscript = s;\n    }\n\n    public int getSubscript(){\n        return subscript;\n    }\n\n    public void setCoefficient(int c){\n        coefficient = c;\n    }\n\n    public int getCoefficient(){\n        return coefficient;\n    }\n\n    //=========ACCESSORS AND MODIFIERS==================\n\n    public void setName(String n, String comp, int coeff, int sub, int nu){\n        name = n;\n        compound = comp;\n        coefficient = coeff;\n        subscript = sub;\n        num = nu;\n    }\n\n    public void setName(String n, String comp, int nu){\n        name = n;\n        compound = comp;\n        num = nu;\n    }\n\n    public void setName(String", "reference_code": "    }\n", "case_type": "block"}
{"generated_code": "\n    private MailAccount getMailAccount() {\n        MailAccount mailAccount = new MailAccount();\n        mailAccount.setHost(App.getConfig().getMailHost());\n        mailAccount.setPort(App.getConfig().getMailPort());\n        mailAccount.setUserName(App.getConfig().getMailUserName());\n        mailAccount.setPassword(App.getConfig().getMailPassword());\n        mailAccount.setSslEnable(App.getConfig().getMailSslEnable());\n        return mailAccount;\n    }\n\n}\n\nclass SendResult {\n    private boolean success;\n    private String info;\n}\n\nclass MailConfig {\n\n    private\n    /**\n     * 发送推送结果\n     *\n     * @param tos\n     * @return\n     */\n    public SendResult sendPushResultMail(List<String> tos, String title, String content, File[] files) {\n        SendResult sendResult = new SendResult();\n\n        try {\n            MailUtil.send(mailAccount, tos, title, content, true, files);\n            sendResult.set", "reference_code": "        return sendResult;\n    }\n\n    /**\n", "case_type": "block"}
{"generated_code": "NamespaceAware(true);\n    DocumentBuilder builder = builderFactory.newDocumentBuilder();\n    Document transformed = builder.parse(file.getContents());\n    assertEquals(0, transformed.getDocumentElement().getChildNodes().getLength());\n  }\n\n  @Test\n  public void testRun_addApplicationElement() throws IOException, ParserConfigurationException,\n      SAXException, CoreException {\n    file.create(ValidationTestUtils.stringToInputStream(APPLICATION_XML), IFile.FORCE, null);\n    IMarker marker = Mockito.mock(IMarker.class);\n    Mockito.when(marker.getResource()).thenReturn(file);\n\n    XsltQuickFix fix = new XsltQuickFix(\"/xslt/addApplication.xsl\",\n        Messages.getString(\"add.application.element\"));\n    fix.run(marker);\n\n    DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n    builderFactory.setNamespaceAware(true);\n    DocumentBuilder builder = builderFactory.newDocumentBuilder();\n    Document transformed = builder.parse(file.getContents());\n", "reference_code": "    assertNotNull(XsltQuickFix.getCurrentDocument(file));\n\n    // https://github.com/GoogleCloudPlatform/google-cloud-eclipse/issues/1527\n    editor.doSave(new NullProgressMonitor());\n  }\n", "case_type": "block"}
{"generated_code": "public class GameObject {\n    private GVector3f pos;\n    private GVector3f rot;\n\n    private GVector3f vel;\n    private GVector3f acc;\n\n    private GVector3f scale;\n\n    private GVector3f rotVel;\n    private GVector3f rotAcc;\n\n    private GVector3f rotScale;\n\n    private GVector3f rotVelScale;\n\n    private GVector3f rotAccScale;\n\n    private GVector3f rotScaleVel;\n\n    private GVector3f rotScaleAcc;\n\n    private GVector3f rotScaleVelAcc;\n\n    private GVector3f rotScaleVelAccScale;\n\n    private GVector3f rotScaleVelAccScaleVel;\n\n    private GVector3f rotScaleVelAccScaleVelAcc;\n\n    private GVector3f rotScaleVelAccScaleVelAccScale;\n\n    private GVector3f rotScaleVelAccScaleVelAccScaleVel;\n\n    private GVector3f rotScaleVelAccScaleVelAcc", "reference_code": "import glib.util.vector.GVector3f;\n\npublic abstract class GameObject {\n    private GVector3f pos;\n    private GVector3f rot;\n", "case_type": "block"}
{"generated_code": "());\n    }\n\n    public static TracingAwareExecutorService getExecutor(Stage stage)\n    {\n        return stages.get(stage);\n    }\n\n    public static void shutdown()\n    {\n        for (Stage stage : stages.keySet())\n        {\n            TracingAwareExecutorService executor = stages.get(stage);\n            if (executor != null)\n            {\n                executor.shutdown();\n            }\n        }\n    }\n\n    public static void shutdownNow()\n    {\n        for (Stage stage : stages.keySet())\n        {\n            TracingAwareExecutorService executor = stages.get(stage);\n            if (executor != null)\n            {\n                executor.shutdownNow();\n            }\n        }\n    }\n\n    public static void setTraceState(TraceState state)\n    {\n        for (Stage stage : stages.keySet())\n        {\n            TracingAwareExecutorService executor = stages.get(stage);\n            if (executor != null)\n            {\n                executor.set", "reference_code": "        {\n            super(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, threadFactory, handler);\n        }\n", "case_type": "block"}
{"generated_code": "        write = w;\n    }\n\n    public void setImage(BufferedImage i){\n        ima = i;\n    }\n\n    public void setText(String s){\n        super.setText(s);\n    }\n\n    public    }\n\n    //Listeners\n\n    //Methods\n\n    public void init(){\n        setText(\"\");\n        setFocusable(true);\n        setOpaque(false);\n        setVisible(true);\n\n        //Listeners\n\n        //Keyboard\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n        //Mouse\n\n", "reference_code": "        ima = new BufferedImage(xSize, ySize, BufferedImage.TYPE_INT_ARGB);\n\n", "case_type": "block"}
{"generated_code": "890ab     * <p>\n     * A unique identifier for the CMK.\n     * </p>\n     * <p>\n     * Use the CMK's unique identifier or its Amazon Resource Name (ARN). For\n     * example:\n     * </p>\n     * <ul>\n     * <li>\n     * <p>\n     * Unique ID: 1234abcd-12ab-34cd-56ef-1234567890ab\n     * </p>\n     * </li>\n     * <li>\n     * <p>\n     * ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-\n     * 56ef-1234567890ab\n     * </p>\n     * </li>\n     * </ul>\n     */\n    public String getKeyId() {\n        return this.keyId", "reference_code": "     * <p>\n     * A unique identifier for the CMK.\n     * </p>\n     * <p>\n", "case_type": "block"}
{"generated_code": "\n        nestedMap.put(\"key1\", \"value1\");\n        list.add(nestedMap);\n        list.add(\"value2\");\n        JsonView view = new JsonView();\n\n        String json = view.renderJson(list);\n        JSONAssert.assertEquals(\"{\\\"key1\\\":\\\"value1\\\",\\\"value2\\\"}\", json, true);\n    }\n\n    @Test\n           Map<String, Object> map = new LinkedHashMap<>();\n        map.put(\"key1\", \"value1\");\n        map.put(\"key2\", \"value2\");\n        JsonView view = new JsonView();\n\n        String json = view.renderJson(map);\n        JSONAssert.assertEquals(\"{\\\"key1\\\":\\\"value1\\\",\\\"key2\\\":\\\"value2\\\"}\", json, true);\n    }\n\n    @Test\n    public void testShouldRenderResolvableViewableStatus() throws Exception {\n        ResolvableViewableStatus status = new ResolvableViewableStatus(WAITING, \"some message\");\n        JsonView view = new JsonView();\n\n        String json", "reference_code": "        JsonView view = new JsonView(requestContext);\n\n        mockContext.checking(new Expectations() {\n", "case_type": "block"}
{"generated_code": "way);\n            em.flush();\n            return paymentGateway;\n        }\n    }\n\n    public void deletePaymentGateway(AbstractPaymentGateway paymentGateway) {\n        em.remove(paymentGateway);\n    }\n\n    protected FetchPlan handleSpecificFetchMode(Criteria criteria, Object... params) {\n        FetchPlan fetchPlan = null;\n        if(params.length > 0){\n            fetchPlan = (FetchPlan) params[0];\n        }\n        if(fetchPlan != null){\n            if(fetchPlan instanceof FetchPlanGraphCommon){\n                ((FetchPlanGraphCommon) fetchPlan).setHibernateCriteria(criteria);\n            }\n        }\n        return fetchPlan;\n    }\n\n    protected String handleCodeValue(String code) {\n        return code.toUpperCase();\n    }\n\n    protected Criteria createDefaultCriteria(Class<?> clazz) {\n        Criteria criteria = em.createCriteria(clazz);\n        return criteria;\n    }\n\n}\n\n//src", "reference_code": "\n    public void deletePaymentGateway(AbstractPaymentGateway paymentGateway) {\n        em.remove(paymentGateway);\n    }\n\n    @Override\n", "case_type": "block"}
{"generated_code": "    public int getCount() {\n        return count;\n    }\n    public void addCount() {\n        this.count++;\n    }\n    public void removeCount() {\n        this.count--;\n        if (this.count < 0) {\n            this.count = 0;\n        }\n    }\n    public void clearCount() {\n        this.count = 0;\n    }\n    public void setMembers(Set<String> members) {\n        this.members = members;\n        this.count = this.members.size();\n    }\n    public void addMember(String member) {\n        this.members.add(member);\n        this.count++;\n    }\n    public void removeMember(String member) {\n        this.members.remove(member);\n        this.count--;\n        if (this.count < 0) {\n            this.count = 0;\n        }\n    }\n    public void clearMembers() {\n        this.members.clear();\n        this.count = 0;\n    }\n    public MediaItem getItem() {\n        return item;\n   ", "reference_code": "    public void addMember(String member) {\n        this.members.add(member);\n        this.count = this.members.size();\n    }\n    public int getCount() {\n        return count;\n", "case_type": "block"}
{"generated_code": "public class Menu {\n    /**\n     * Shows menu.\n     *\n     * @param nodes Node[]\n     */\n    public void showMenu(Node[] nodes) {\n        for (Node node : nodes) {\n            node.printNode();\n        }\n    }\n\n    /**\n     * Shows menu.\n     *\n     * @param nodes Node[]\n     */\n    public void showMenu(Node[] nodes) {\n        for (Node node : nodes) {\n            node.printNode();\n        }\n    }\n\n    /**\n     * Shows menu.\n     *\n     * @param nodes Node[]\n     */\n    public void showMenu(Node[] nodes) {\n        for (Node node : nodes) {\n            node.printNode();\n        }\n    }\n\n    /**\n     * Shows menu.\n     *\n     * @param nodes Node[]\n     */\n    public void showMenu(Node[] nodes) {\n        for (Node node : nodes) {\n            node.printNode();\n        }\n    }\n\n    /**\n     * Shows menu.\n    ", "reference_code": "public class Menu {\n\n    /**\n", "case_type": "block"}
{"generated_code": "        if (token == VALUE_NULL) {\n            return null;\n        }\n\n        if (token == FIELD_NAME || token == START_OBJECT) {\n            if (context.testExpression(\"compatibleDevices\", targetDepth)) {\n                context.nextToken();\n            }\n            if (context.testExpression(\"incompatibleDevices\", targetDepth)) {\n                context.nextToken();\n            }\n\n            if (token == null || token == END_ARRAY || token == END_OBJECT) {\n                if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement)) {\n                    if (context.getCurrentDepth() <= originalDepth)\n                        break;\n                }\n            }\n            token = context.nextToken();\n            if (token == null)\n                break;\n        }\n\n        if (token == null || token == END_ARRAY || token == END_OBJECT) {\n            if (context.getLastParsedParentElement() == null || context.getLastParsedParentElement().equals(currentParentElement", "reference_code": "        if (token == VALUE_NULL) {\n", "case_type": "block"}
{"generated_code": "import com.specmate.emfrest.internal.auth.MetricsDynamicFeature;\nimport com.specmate.emfrest.internal.rest.JsonEObjectWriter;\nimport com.specmate.emfrest.internal.rest.JsonListWriter;\nimport com.specmate.emfrest.internal.rest.JsonObjectWriter;\nimport com.specmate.emfrest.internal.rest.JsonWriter;\nimport com.specmate.emfrest.internal.rest.JsonWriterFactory;\nimport com.specmate.emfrest.internal.rest.ObjectWriter;\nimport com.specmate.emfrest.internal.rest.ObjectWriterFactory;\nimport com.specmate.emfrest.internal.rest.ObjectWriterFactoryImpl;\nimport com.specmate.emfrest.internal.rest.ObjectWriterImpl;\nimport com.specmate.emfrest.internal.rest.ObjectWriterImplFactory;\nimport com.specmate.emfrest.internal.rest.ObjectWriterImplFactoryImpl;\nimport com.specmate.emfrest.internal.rest.ObjectWriterImplFactoryImpl.ObjectWriterImplFactoryImpl", "reference_code": "import com.specmate.emfrest.internal.metrics.MetricsDynamicFeature;\nimport com.specmate.emfrest.internal.rest.JsonEObjectWriter;\nimport com.specmate.emfrest.internal.rest.JsonListWriter;\n", "case_type": "block"}
{"generated_code": "            labels = new ArrayList<Label>();\n        }\n        return this.labels;\n    }\n\n    public void setLabels(List<Label> labels) {\n        this.labels = labels;\n    }\n\n    public boolean equals(Object o) {\n        if (o == this) {\n            return true;\n        }\n        if (!(o instanceof LabelServiceInterfacecreateLabels)) {\n            return false;\n        }\n        LabelServiceInterfacecreateLabels rhs = ((LabelServiceInterfacecreateLabels) o);\n        return true;\n    }\n\n    public int hashCode() {\n        return 0;\n    }\n\n    public String toString() {\n        return \"LabelServiceInterfacecreateLabels[\" + \"labels\" + \"]\";\n\n    }\n\n    public LabelServiceInterfacecreateLabels withLabels(List<Label> labels) {\n        this.labels = labels;\n        return this;\n    }\n\n    public LabelServiceInterfacecreateLabels withLabels(Label... labels) {\n        if (this.labels == null) {\n            this.labels = new ArrayList<Label", "reference_code": "            labels = new ArrayList<Label>();\n        }\n        return this.labels;\n", "case_type": "block"}
{"generated_code": "     */\n    private static final boolean VERBOSE = false;\n\n    private static final int MAX_LOG_TAG_LENGTH = 23;\n\n    private LogConfig() {\n    }\n\n    public static boolean isVerbose(String logTag) {\n\n        return VERBOSE || Log.isLoggable(logTag, Log.VERBOSE);\n    }\n\n    public static boolean isVerbose(Class<?> clazz) {\n\n        return isVerbose(getLogTag(clazz));\n    }\n\n    public static boolean isVerbose(Object obj) {\n\n        return isVerbose(obj.getClass());\n    }\n\n    public static boolean isVerbose(Throwable t) {\n\n        return isVerbose(t.getClass());\n    }\n\n    public static boolean isVerbose(Throwable t, String logTag) {\n\n        return isVerbose(logTag);\n    }\n\n    public static boolean isVerbose(String logTag, Throwable t) {\n\n        return isVerbose(logTag);\n    }\n\n    public", "reference_code": "     */\n    public static final boolean VERBOSE = true;\n\n    private static final int MAX_LOG_TAG_LENGTH = 23;\n\n", "case_type": "block"}
{"generated_code": "        }\n    }\n\n    public void writeObjectList(Collection<? extends Serializable> collection, ClassMapper classMapper, boolean specificClass) throws IOException {\n        writeObjectList(collection, classMapper);\n        writeBoolean(specificClass);\n    }\n\n    public void writeObjectList(Collection<? extends Serializable> collection) throws IOException {\n        writeObjectList(collection, serializer.getClassMapper(), false);\n    }\n\n    public void writeObjectList(Collection<? extends Serializable> collection, ClassMapper classMapper) throws IOException {\n        writeObjectList(collection, classMapper, false);\n    }\n\n    public void writeObjectList(Collection<? extends Serializable> collection, boolean specificClass) throws IOException {\n        writeObjectList(collection, serializer.getClassMapper(), specificClass);\n    }\n\n    public void writeObjectList(Collection<? extends Serializable> collection, ClassMapper classMapper) throws IOException {\n        writeObjectList(collection, classMapper, false);\n    }\n\n    public void writeObjectList(Collection<? extends Serializable> collection, boolean specificClass) throws IOException {\n        write", "reference_code": "        }\n", "case_type": "block"}
{"generated_code": "    private final ByteBuffer mBuf;\n\n    public Decoder(byte[] buf, int offset, int len) {\n        this(ByteBuffer.wrap(buf, offset, len));\n    }\n\n    public Decoder(byte[] buf, int offset) {\n        this(buf, offset, buf.length - offset);\n    }\n\n    public Decoder(byte[] buf, int len) {\n        this(buf, 0, len);\n    }\n\n    public Decoder(byte[] buf) {\n        this(buf, 0, buf.length);\n    }\n\n    public Decoder(byte[] buf, int offset, int len, int pos) {\n        this(buf, offset, len, pos, buf.length - pos);\n    }\n\n    public Decoder(byte[] buf, int offset, int len, int pos) {\n        this(buf, offset, len, pos, buf.length - pos);\n    }\n\n    public Decoder(byte[] buf, int offset, int len, int pos, int end) {\n        this(ByteBuffer.wrap(buf, offset, len,", "reference_code": "    private final ByteBuffer mBuf;\n", "case_type": "block"}
{"generated_code": "import com.example.drock.n_corder.system.ISystemFactory;\nimport com.example.drock.n_corder.system.SystemFactoryBroker;\nimport com.example.drock.n_corder.system.UnitSystemTable;\nimport com.example.drock.n_corder.system.UnitTypeInfo;\nimport com.example.drock.n_corder.system.UnitSystemInfo;\nimport com.example.drock.n_corder.units.converters.UnitConverter;\nimport com.example.drock.n_corder.units.formatters.IUnitFormatter;\nimport com.example.drock.n_corder.units.formatters.UnitFormatter;\nimport com.example.drock.n_corder.units.formatters.UnitFormatterFactory;\nimport com.example.drock.n_corder.units.formatters.UnitFormatterFactory.UnitFormatterType;\nimport com.example.drock.n_corder.units.formatters.UnitFormatterFactory.UnitFormatter", "reference_code": "import com.example.drock.n_corder.ISystemFactory;\nimport com.example.drock.n_corder.SystemFactoryBroker;\n\nimport java.util.HashMap;\nimport java.util.Map;\n", "case_type": "block"}
{"generated_code": "import com.meterware.httpunit.WebRequest;\nimport com.meterware.httpunit.WebResponse;\n\n@RunWith(com.ibm.ws.security.oauth_oidc.fat.commonTest.OAuth20TestRunner.class)\n@com.ibm.ws.security.oauth_oidc.fat.commonTest.OAuth20TestRunner.OAuth20Test(testName = \"OAuth20WebClient04\")\n\n@com.ibm.ws.security.oauth_oidc.fat.commonTest.OAuth20TestRunner.OAuth20Test(testName = \"OAuth20WebClient04\")\n@com.ibm.ws.security.oauth_oidc.fat.commonTest.OAuth20TestRunner.OAuth20Test(testName = \"OAuth20WebClient04\")\n@com.ibm.ws.security.oauth_oidc.fat.commonTest.OAuth20TestRunner.OAuth20Test(testName = \"OAuth20WebClient04\")\n@com", "reference_code": "import com.meterware.httpunit.WebRequest;\nimport com.meterware.httpunit.WebResponse;\n\nimport componenttest.custom.junit.runner.FATRunner;\n\n@RunWith(FATRunner.class)\n", "case_type": "block"}
{"generated_code": "\n    private void getPath(TreeNode node, String path, List<String> list) {\n        if (path.length() > 0) {\n            path += \"->\";\n        }\n        path += node.val;\n\n        if (list.size() > 0) {\n            path += \",\";\n        }\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n        // leaf node\n\n", "reference_code": "\n    public void getPath(TreeNode node, String path, List<String> list) {\n", "case_type": "block"}
{"generated_code": "    public Message(String message, Exception e){\n        this.message=message;\n        exception = e;\n    }\n    public Message(String message){\n        this.message=message;\n    }\n    public Message(String message, Exception e, boolean print){\n        this.message=message;\n        exception = e;\n        if(print) print();\n    }\n    public Message(String message, Exception e, boolean print, boolean printException){\n        this.message=message;\n        exception = e;\n        if(print) print();\n        if(printException) print();\n    }\n    public Message(String message, Exception e, boolean print, boolean printException, boolean printException2){\n        this.message=message;\n        exception = e;\n        if(print) print();\n        if(printException) print();\n        if(printException2) print();\n    }\n    public Message(String message, Exception e, boolean print, boolean printException, boolean printException2, boolean printException3){\n        this.message=message;\n        exception = e;\n        if(print) print();\n       ", "reference_code": "    public Message(String message){this.message=message;}\n    public Message(String message, Exception e){\n", "case_type": "block"}
{"generated_code": "        KeyPair kp = kpg.generateKeyPair();\n        PrivateKey privKey = kp.getPrivate();\n        kpg.initialize(1024);\n        kp = kpg.generateKeyPair();\n        privKey = kp.getPrivate();\n        kpg.initialize(2048);\n        kp = kpg.generateKeyPair();\n        privKey = kp.getPrivate();\n        kpg.initialize(4096);\n        kp = kpg.generateKeyPair();\n        privKey = kp.getPrivate();\n        kpg.initialize(8192);\n        kp = kpg.generateKeyPair();\n        privKey = kp.getPrivate();\n\n        // Test the signature and verification of the public key\n        kpg.initialize(512);\n        kp = kpg.generateKeyPair();\n        privKey = kp.getPrivate();\n        kpg.initialize(1024);\n        kp = kpg.generateKeyPair();\n        privKey = kp.getPrivate();\n       ", "reference_code": "        KeyPair kp = kpg.generateKeyPair();\n        PrivateKey privKey = kp.getPrivate();\n", "case_type": "block"}
{"generated_code": "    {\n        By element = PropertiesHandler.getCompleteElement(type, key);\n        boolean enabled = true;\n\n        WebDriverWait w = new WebDriverWait(driver, seconds);\n        log.info(\"Waiting for the element: \"+element + \" to be enabled\");\n        w.until(ExpectedConditions.elementToBeClickable(element));\n    }\n\n    /** Wait for an element to be enabled for a specific period of time */\n    @Then(\"^I wait (\\\\d+) seconds for element having (.+) \\\"(.*?)\\\" to be enabled as (\\\\d+)$\")\n    public void waitForEnable(int seconds, String type, String key, int enabled) throws Exception\n    {\n        By element = PropertiesHandler.getCompleteElement(type, key);\n        boolean enabled = Integer.parseInt(String.valueOf(enabled));\n\n        WebDriverWait w = new WebDriverWait(driver, seconds);\n        log.info(\"Waiting for the element: \"+element + \" to be enabled\");\n        w.until(ExpectedConditions.elementToBeClickable(element));\n    }", "reference_code": "    {\n        By element = PropertiesHandler.getCompleteElement(type, key);\n        boolean enabled = driver.findElement(element).isEnabled();\n", "case_type": "block"}
{"generated_code": "        int count = 0;\n        float sum = 0f;\n        for(Mushroom mushroom : kNearest.keySet()){\n            if (mushroom.getClassLabel() == Class_Label.Edible)\n                sum += kNearest.get(mushroom);\n            count++;\n        }\n        return sum / count;\n\n    }\n\n    private void removeWorst(Map<Mushroom, Float> mushrooms, float longest) {\n        for(Mushroom mushroom : mushrooms.keySet()){\n            if (mushrooms.get(mushroom) == longest){\n                mushrooms.remove(mushroom);\n                return;\n            }\n        }\n\n        throw new IllegalStateException(\"Should not be here\");\n\n    }\n\n    private Mushroom removeWorst(Map<Mushroom, Float> mushrooms, float longest, int index) {\n        for(Mushroom mushroom : mushrooms.keySet()){\n            if (mushrooms.get(mushroom) == longest){\n                mushrooms.remove(", "reference_code": "        float edible = 0f;\n        for(Mushroom mushroom : kNearest.keySet()){\n            edible += mushroom.m_Class == Class_Label.edible ? 1 : 0;\n        }\n        return edible / kNearest.size();\n", "case_type": "block"}
{"generated_code": "import android.content.Context;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.OnAttachStateChangeListener;\nimport android.view.View;\nimport android.widget.FrameLayout;\n\nimport com.test.conductor.conductortest.R;\n\nimport org.androidannotations.annotations.EViewGroup;\n\n@EViewGroup(R.layout.view_test_attach)\n@SuppressWarnings(\"unused\")\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n", "reference_code": "import android.content.Context;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.View;\nimport android.widget.FrameLayout;\n", "case_type": "block"}
{"generated_code": " .build();\n    }\n}\n\nclass HibernatePersonDao extends HibernateRemovableDao<Person>\n{\n    public HibernatePersonDao()\n    {\n        super(Person.class);\n    }\n}\n\nclass HibernatePersonDao2 extends HibernateRemovableDao<Person>\n{\n    public HibernatePersonDao2()\n       {\n        return ImmutableMap.<String, Object>builder()\n            .put(\"id\", seed)\n            .put(\"name\", \"foobar\" + seed)\n            .put(\"username\", \"foobar\" + seed)\n            .put(\"createdOn\", new Date())\n            .build();\n    }\n}\n\nclass HibernatePersonDao3 extends HibernateRemovableDao<Person>\n{\n    public HibernatePersonDao3()\n    {\n        super(Person.class);\n    }\n}\n\nclass HibernatePersonDao4 extends HibernateRemovableDao<Person>\n{\n    public HibernatePersonDao4()", "reference_code": "    {\n        return create(Person.class, ImmutableMap.<String,Object>builder()\n", "case_type": "block"}
{"generated_code": "    private void assertResultExchange(Exchange exchange) {\n        ObjectListing listing = exchange.getIn().getBody(ObjectListing.class);\n        assertEquals(1, listing.getObjectSummaries().size());\n    }\n\n    @Override\n    protected String getXmlFile() {\n        return \"org/apache/camel/component/aws/s3/S3ComponentSpringTest-context.xml\";\n    }\n\n    @Override\n    protected boolean useMandatoryProperties() {\n        return true;\n    }\n\n    @Override\n    protected boolean useMockEndpoint() {\n        return true;\n    }\n\n    @Override\n    protected boolean useEmbeddedJetty() {\n        return true;\n    }\n\n    @Override\n    protected boolean useEmbeddedJettyUnsecure() {\n        return true;\n    }\n\n    @Override\n    protected boolean useEmbeddedJettySecure() {\n        return true;\n    }\n\n    @Override\n    protected boolean useEmbeddedJettyUnsecureSecure() {\n        return", "reference_code": "    private void assertResultExchange(Exchange resultExchange) {\n        ObjectListing list = resultExchange.getIn().getBody(ObjectListing.class);\n        assertEquals(1, list.getObjectSummaries().size());\n        assertEquals(\"Myfile\", list.getObjectSummaries().get(0).getKey());\n        assertEquals(\"test\", list.getObjectSummaries().get(0).getBucketName());\n    }\n", "case_type": "block"}
{"generated_code": "<MockFlowFile> result = runner.getFlowFilesForRelationship(ExecuteScript.REL_SUCCESS);\n        assertEquals(1, result.size());\n        assertEquals(TEST_CSV_DATA, new String(result.get(0).getContent(), StandardCharsets.UTF_8));\n    }\n\n    @Test\n    public void testCreateNewFlowFileWithScriptFileAndCustomScriptFile() throws Exception {\n        runner.setValidateExpressionUsage(false);\n        runner.setProperty(scriptingComponent.getScriptingComponentHelper().SCRIPT_ENGINE, \"Clojure\");\n        runner.setProperty(ScriptingComponentUtils.SCRIPT_FILE, TEST_RESOURCE_LOCATION + \"clojure/test_onTrigger_newFlowFile.clj\");\n        runner.setProperty(ScriptingComponentUtils.MODULES, TEST_RESOURCE_LOCATION + \"clojure\");\n        runner.setProperty(ScriptingComponentUtils.CUSTOM_SCRIPT_FILE, TEST_RESOURCE_LOCATION + \"clojure/test_onTrigger_newFlowFile", "reference_code": "    /**\n     * Tests a script file that uses dynamic properties defined on the processor.\n     *\n     * @throws Exception Any error encountered while testing\n     */\n    @Test\n", "case_type": "block"}
{"generated_code": "import com.boydti.fawe.jnbt.anvil.MCAFilter;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.nio.file.attribute.BasicFileAttributes;\n\npublic class DeleteOldFilter implements MCAFilter {\n\n    private final long time;\n\n    public static MCAFilterCounter get() {\n        return MCAFilterCounter.get(DeleteOldFilter.class);\n    }\n\n    public static MCAFilterCounter get(long time) {\n        return new DeleteOldFilter(time).get();\n    }\n\n    public static MCAFilterCounter get(Path path) {\n        return get(path, Paths.get(\".\"));\n    }\n\n    public static MCAFilterCounter get(Path path, Path root) {\n        return get(path, root, 0);\n    }\n\n    public static MCAFilterCounter get(Path path, Path root, long time) {\n        return new DeleteOldFilter(time).get(path, root);\n    }\n\n    public DeleteOldFilter() {\n", "reference_code": "import java.nio.file.Path;\nimport java.nio.file.attribute.BasicFileAttributes;\n\npublic class DeleteOldFilter extends MCAFilterCounter {\n    private final long time;\n", "case_type": "block"}
{"generated_code": "    @Override\n    protected void onCancelled() {\n        Application.getBus().post(new SyncEvent(SyncEvent.State.Done));\n    }\n\n    @Override\n    protected void onFinish() {\n        super.onFinish();\n\n        if (jGitWrapper != null)\n            jGitWrapper.close();\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n\n        if (jGitWrapper != null)\n            jGitWrapper.close();\n\n        jGitWrapper = null;\n    }\n\n    @Override\n    protected void onStop() {\n        super.onStop();\n\n        if (jGitWrapper != null)\n            jGitWrapper.close();\n\n        jGitWrapper = null;\n    }\n\n    @Override\n    protected void onDestroy(boolean isFinishing) {\n        super.onDestroy(isFinishing);\n\n        if (jGitWrapper != null)\n            jGitWrapper.close();\n\n        jGitWrapper", "reference_code": "    @Override\n    protected void onCleanup() {\n", "case_type": "block"}
{"generated_code": "    public TextFormats textformat;\n\n    /**\n     * (type: TextCaseFlag)\n     */\n    @SuppressWarnings(\"unused\")\n    @Deprecated\n    @Deprecated(forRemoval = true, since = \"1.1\")\n    @Deprecated(since = \"1.1\", forRemoval = true)\n    @Deprecated(since = \"1.1\", replaceWith = \"textcase\")\n    @Deprecated(since = \"1.1\", since = \"1.1\")\n    @Deprecated(since = \"1.1\", since = \"1.1\", forRemoval = true)\n    @Deprecated(since = \"1.1\", since = \"1.1\", forRemoval = true)\n    @Deprecated(since = \"1.1\", since = \"1.1\", forRemoval = true)\n    @Deprecated(since = \"1.1\", since = \"1.1\", forRemoval = true)\n    @Deprecated(since = \"1.1\", since = \"1.1\", forRemoval = true)\n    @Deprecated(", "reference_code": "    public TextFormats textformat;\n\n", "case_type": "block"}
{"generated_code": "     * @param tableId\n     *            the table id\n     */\n    @SuppressWarnings(\"unused\")\n    public RequestUserIdsFromTableMessage(Class<?> targetClass,\n            String tableId) {\n        super(targetClass);\n        this.setRecipient(tableId);\n    }\n\n    /**\n     * Instantiates a new request user ids from table message.\n     *\n     * @param targetClass\n     *            the target class\n     * @param tableId\n     *            the table id\n     */\n    @SuppressWarnings(\"unused\")\n    public RequestUserIdsFromTableMessage(Class<?> targetClass,\n            String tableId, String userId) {\n        super(targetClass);\n        this.setRecipient(tableId, userId);\n    }\n\n    /**\n     * Instantiates a new request user ids from table message.\n     *\n     * @param targetClass\n     *            the target class\n     * @param tableId\n     *            the table id\n     */\n    @SuppressWarnings(\"", "reference_code": "     * @param tableId\n     *            the table id\n     */\n", "case_type": "block"}
{"generated_code": "import com.google.common.collect.ImmutableMap;\nimport org.fenixedu.bennu.core.extensions.AbstractExtension;\nimport org.fenixedu.bennu.core.extensions.Filter;\n\nimport java.util.Collections;\nimport java.util.Map;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Map;\n\nimport java.util.Collections;\nimport java.util", "reference_code": "import com.google.common.collect.ImmutableMap;\nimport com.mitchellbosecke.pebble.extension.AbstractExtension;\nimport com.mitchellbosecke.pebble.extension.Filter;\n\nimport java.util.Collections;\n", "case_type": "block"}
{"generated_code": "    public void setTitlePaneTitle(String title) {\n        titlePaneTitle = title;\n        super.setTitlePaneTitle(title);\n    }\n\n    protected void setMessage(Message message) {\n        super.setMessage(message);\n    }\n\n    protected void setDescription(Message message) {\n        super.setDescription(message);\n    }\n\n    protected void setMessage(String message) {        this.dialogPage = dialogPage;\n    }\n\n    public TitledPageApplicationDialog(DialogPage dialogPage, Form form) {\n        super(dialogPage.getTitle(), form);\n        setDialogPage(dialogPage);\n    }\n\n    public TitledPageApplicationDialog(DialogPage dialogPage, Form form, CloseAction closeAction) {\n        super(dialogPage.getTitle(), form, closeAction);\n        setDialogPage(dialogPage);\n    }\n\n    public TitledPageApplicationDialog(DialogPage dialogPage, Form form, Window parent) {\n        super(dialogPage.getTitle(), form, parent);\n        setDialogPage(dialogPage);\n    }\n\n    public TitledPageApplication", "reference_code": "\n    public TitledPageApplicationDialog(Form form, Window parent) {\n        this(new FormBackedDialogPage(form), parent);\n", "case_type": "block"}
{"generated_code": "> responseHandler);\n\n    /**\n         * @param edm service Edm\n     * @param resourcePath resource path to create\n     * @param data data to create\n     * @param responseHandler {@link org.apache.olingo.odata2.api.batch.Olingo2BatchResponse} callback handler\n     */\n    <T> void batch(Edm edm, String resourcePath, List<Object> data, Olingo2ResponseHandler<T> responseHandler);\n\n    /**\n     * Creates a new OData resource.\n     * @param edm service Edm\n     * @param resourcePath resource path to create\n     * @param data data to create\n     * @param responseHandler {@link org.apache.olingo.odata2.api.ep.entry.ODataEntry} callback handler\n     */\n    <T> void create(Edm edm, String resourcePath, Object data, Olingo2ResponseHandler<T> responseHandler);\n\n    /**\n     * Creates a new OData resource.\n     * @param edm service Edm\n     * @param resourcePath resource path to create", "reference_code": "     * @param data request data\n", "case_type": "block"}
{"generated_code": "import javax.xml.transform.stream.StreamResult;\nimport java.io.InputStream;\nimport java.io.StringWriter;\nimport java.security.cert.X509Certificate;\n\npublic class SamlUtils {\n\n    /** The Constant LOGGER. */\n    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals\")\n    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals.BadLiteral\")\n    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals.BadLiteral\")\n    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals.BadLiteral\")\n    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals.BadLiteral\")\n    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals.BadLiteral\")\n    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals.BadLiteral\")\n    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals.BadLiteral\")\n    @SuppressWarnings(\"PMD.AvoidDuplicateLiterals.BadLiteral", "reference_code": "import javax.xml.transform.stream.StreamResult;\nimport java.io.InputStream;\nimport java.io.StringWriter;\nimport java.security.cert.X509Certificate;\n\npublic final class SamlUtils {\n", "case_type": "block"}
{"generated_code": "  public static void main(String args[]) \n  {\n   vtkNamedColors colors = new vtkNamedColors();\n   //Actor Color\n\n   //Renderer Actor Color\n\n   //Renderer Background Color\n\n   //Actor Color\n   //Renderer Actor Color\n   //Renderer Background Color\n\n   //Actor Color\n   //Renderer Actor Color\n   //Renderer Background Color\n\n   //Actor Color\n   //Renderer Actor Color\n   //Renderer Background Color\n\n   //Actor Color\n   //Renderer Actor Color\n   //Renderer Background Color\n\n   //Actor Color\n   //Renderer Actor Color\n   //Renderer Background Color\n\n   //Actor Color\n   //Renderer Actor Color\n   //Renderer Background Color\n\n   //Actor Color\n   //Renderer Actor Color\n   //Renderer Background Color\n\n   //Actor Color\n   //Renderer Actor Color\n   //Renderer Background Color\n\n   //Actor Color\n   //Renderer Actor Color\n   //Renderer Background Color\n\n   //Actor Color\n   //Renderer Actor Color\n", "reference_code": "  public static void main(String args[]) \n  {\n   vtkNamedColors colors = new vtkNamedColors();\n   //For Actor Color\n", "case_type": "block"}
{"generated_code": "            replies = replie;\n        }\n    }\n\n    public static void Stop() {\n        for (TimingThread Thread : Threads) {\n            Thread.interrupt();\n        }\n    }\n\n    public static void Wait() {\n        for (TimingThread Thread : Threads) {\n            try {\n                Thread.join();\n            } catch (InterruptedException ex) {\n                GuildLoad.log.error(\"[GuildLoad] 等待加载家族信息出错.\" + ex);\n            }\n        }\n    }\n\n    public static void Wait(long Time) {\n        for (TimingThread Thread : Threads) {\n            try {\n                Thread.join(Time);\n            } catch (InterruptedException ex) {\n                GuildLoad.log.error(\"[GuildLoad] 等待加载家族信息出错.\" + ex);\n            }\n        }\n    }\n\n    public static void Wait(long Time, Object ToNotify) {\n        for (TimingThread Thread : Threads) {\n            try {\n                Thread.join(Time);\n            }", "reference_code": "            replies = replie;\n        }\n    }\n\n", "case_type": "block"}
{"generated_code": "String>            @TargetAttributeType(\n                name = \"Name\",\n                type = String.class),\n            @TargetAttributeType(\n                name = \"Value\",\n                type = byte[].class),\n            @TargetAttributeType(\n                name = \"Description\",\n                type = String.class),\n            @TargetAttributeType(\n                name = \"ResyncMode\",\n                type = ResyncMode.class),\n            @TargetAttributeType(\n                name = \"ResyncMode\",\n                type = ResyncMode.class),\n            @TargetAttributeType(\n                name = \"ResyncMode\",\n                type = ResyncMode.class),\n            @TargetAttributeType(\n                name = \"ResyncMode\",\n                type = ResyncMode.class),\n            @TargetAttributeType(\n                name = \"ResyncMode\",\n                type = ResyncMode.class),\n            @TargetAttributeType(\n                name = \"ResyncMode\",\n                type = ResyncMode.class),\n            @TargetAttributeType(\n                name = \"ResyncMode\",\n                type = ResyncMode.class),\n            @TargetAttributeType", "reference_code": "        @TargetElementType(type = DbgModelTargetRegisterImpl.class) },\n    elementResync = ResyncMode.ONCE, //\n    attributes = {\n        @TargetAttributeType(\n            name = TargetRegisterBank.DESCRIPTIONS_ATTRIBUTE_NAME,\n", "case_type": "block"}
{"generated_code": "        long hours = minutes / 60;\n        minutes = minutes - hours * 60;\n\n        if (neg) {\n            showNeg = true;\n            hours++;\n            if (hours == 10) {\n                hours = 0;\n            }\n            if (hours == 100) {\n                hours = 0;\n            }\n            if (hours == 1000) {\n                hours = 0;\n            }\n            if (hours == 10000) {\n                hours = 0;\n            }\n            if (hours == 100000) {\n                hours = 0;\n            }\n            if (hours == 1000000) {\n                hours = 0;\n            }\n            if (hours == 10000000) {\n                hours = 0;\n            }\n            if (hours == 100000000) {\n                hours = 0;\n            }\n            if (hours == 1000000000) {\n                hours = 0;\n            }\n            if (hours == 1", "reference_code": "        long hours = minutes / 60;\n        minutes = minutes - hours * 60;\n        if (hours > 999) {\n            hours = 0;\n", "case_type": "block"}
{"generated_code": "    }\n\n    /**\n     * Number of values emitted by the script.\n     *\n     * @return number of values emitted by the script\n     * @see #values()\n     * @see #emit(long)\n     * @see #runForDoc(int)\n     * @see #runForDoc(int, LongConsumer)\n     * @see #setDocument(int)\n     * @see #execute()\n     * @see #setFieldValue(String, Object)\n     * @see #setFieldValue(String, Object, int)\n     * @see #setFieldValue(String, Object, int, int)\n     * @see #setFieldValue(String, Object, int, int, int)\n     * @see #setFieldValue(String, Object, int, int, int, int)\n     * @see #setFieldValue(String, Object, int, int, int, int, int)\n     * @see #setFieldValue(String, Object, int, int, int, int, int, int)\n     * @see #setFieldValue(String, Object, int, int,", "reference_code": "    }\n\n    /**\n     * The number of results produced the last time {@link #runForDoc(int)} was called.\n", "case_type": "block"}
{"generated_code": "    }\n\n    public static void main(String[] a) {\n        String date = \"2014-12-22T17:55:25.107Z\";\n        String pattern = \"yyyy-MM-dd'T'HH:mm:ss\";\n\n        SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n        try {\n            Date d = sdf.parse(date);\n        } catch (java.text.ParseException pe1) {\n            LOG.severe(pe1.toString());\n        }\n\n    }\n\n    public static void main(String[] a) {\n        String date = \"2014-12-22T17:55:25.107Z\";\n        String pattern = \"yyyy-MM-dd'T'HH:mm:ss\";\n\n        SimpleDate        LOG.info(date);\n    }\n\n    public static void main(String[] a) {\n        String date = \"2014-12-22T17:55:25.107Z", "reference_code": "        System.out.println(\"done\");\n\n    }\n", "case_type": "block"}
{"generated_code": "\n                        assertNull(values);\n                    } else {\n                        assertTrue(values.getPercentiles().size() == expected.size());\n                        for (int j = 0; j < values.getPercentiles().size(); j++) {\n                            assertEquals(expected.getValue(j), values.getPercentiles().get(j), 0.0001);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private DoubleHistogram reduce(int bucket, int window, int shift, DoubleHistogram[] states) {\n        DoubleHistogram histogram = new DoubleHistogram(window);\n        for (int i = bucket; i < bucket + shift; i++) {\n            histogram.recordValue(states[i].getPercentile(window / 2));\n        }\n        return histogram;\n    }\n\n    private static class MovingPercentilesHdrAggregator extends MovingPercentilesAbstractAggregator {\n        @Override\n        protected InternalHDRPercentiles createAggregation(String field, int window, int shift) {\n            return new InternalHDRPercent", "reference_code": "                        assertEquals(expected.getTotalCount(), agg.getTotalCount());\n                        assertEquals(expected.getMaxValue(), agg.getMaxValue(), 0d);\n", "case_type": "block"}
{"generated_code": "    throw new NoSuchElementException();\n  }\n\n  @Override public void remove() {\n    throw new UnsupportedOperationException();\n  }\n\n  @Override public String toString() {\n    return \"EmptyIterator\";\n  }\n\n  @Override public int hashCode() {\n    return 0;\n  }\n\n  @Override public boolean equals(Object obj) {\n    return obj == this;\n  }\n\n  @Override public int compareTo(ReadOnlyIterator<E> o) {\n    return 0;\n  }\n\n  @Override public boolean isEmpty() {\n    return true;\n  }\n\n  @Override public boolean isReadOnly() {\n    return true;\n  }\n\n  @Override public boolean isSynchronized() {\n    return false;\n  }\n\n  @Override public boolean isUnmodifiable() {\n    return true;\n  }\n\n  @Override public boolean isFrozen() {\n    return false;\n  }\n\n  @Override public boolean isCached() {\n    return false;\n  }\n\n  @Override public boolean isC", "reference_code": "    throw new NoSuchElementException();\n  }\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Test\n    public void clientShouldNotBeNull2() {\n        assertNotNull(client);\n    }\n\n    @Test\n    public void clientShouldNotBeNull3() {\n        assertNotNull(client);\n    }\n\n    @Test\n    public void clientShouldNotBeNull4() {\n        assertNotNull(client);\n    }\n\n    @Test\n    public void clientShouldNotBeNull5() {\n        assertNotNull(client);\n    }\n\n    @Test\n    public void clientShouldNotBeNull6() {\n        assertNotNull(client);\n    }\n\n    @Test\n    public void clientShouldNotBeNull7() {\n        assertNotNull(client);\n    }\n\n    @Test\n    public void clientShouldNotBeNull8() {\n        assertNotNull(client);\n    }\n\n    @Test\n    public void clientShouldNotBeNull9() {\n        assertNotNull(client);\n    }\n\n    @Test\n    public void clientShouldNotBeNull10() {\n        assertNotNull(client);\n    }\n\n    @Test\n    public void client", "reference_code": "    }\n", "case_type": "block"}
{"generated_code": "\n    public List<Organizer> getOrganizerList() {\n        return organizerList;\n    }\n\n    public void setOrganizerList(List<Organizer> organizerList) {\n        this.organizerList = organizerList;\n    }\n\n    public Logger getLogger() {\n        return logger;\n    }\n\n    public void setLogger(Logger logger) {\n        this.logger = logger;\n    }\n\n    public Configuration getConfiguration() {\n        return null;\n    }\n\n    public void setConfiguration(Configuration configuration) {\n\n    }\n\n    public void setConfiguration(String configuration) {\n\n    }\n\n    public void setConfiguration(String configuration, String value) {\n\n    }\n\n    public void setConfiguration(String configuration, String value, String value2) {\n\n    }\n\n    public void setConfiguration(String configuration, String value, String value2, String value3) {\n\n    }\n\n    public void setConfiguration(String configuration, String value, String value2, String value3, String value4) {\n\n    }\n\n    public void setConfiguration", "reference_code": "\n    public List<Organizer> getOrganizerList() {\n        return organizerList;\n", "case_type": "block"}
{"generated_code": "        }\n    }\n}\n\n    private class MouseHandler extends MouseAdapter {\n\n        @Override\n        public void mouseMoved(MouseEvent e) {\n            if (e.\n            cells = new ArrayList<>();\n            MouseHandler mouseHandler = new MouseHandler() {\n                @Override\n                public void mouseMoved(MouseEvent e) {\n                    super.mouseMoved(e);\n\n                    if (selectedCell != null) {\n                        selectedCell = null;\n                        repaint();\n                    }\n\n                }\n\n                @Override\n                public void mouseDragged(MouseEvent e) {\n                    super.mouseDragged(e);\n\n                }\n\n                @Override\n                public void mousePressed(MouseEvent e) {\n                    super.mousePressed(e);\n\n                }\n            };\n            addMouseListener(mouseHandler);\n            MouseHandler mouseHandler = new MouseHandler() {\n                @Override\n                public void mouseMoved(MouseEvent e) {\n                    super.mouseMoved(e);\n\n                }\n\n                @Override\n                public void mouseDragged(MouseEvent e)", "reference_code": "            cells = new ArrayList<>(columnCount * rowCount);\n            MouseAdapter mouseHandler;\n            mouseHandler = new MouseAdapter() {\n                @Override\n                public void mouseMoved(MouseEvent e) {\n", "case_type": "block"}
{"generated_code": "12        return Maps.newHashMap(MockError.class, errors);\n    }\n\n    private static List<MockError> buildMockErrors(int nbErrors) {\n        List<MockError> errors = new ArrayList<>();\n        for (int i = 0; i < nbErrors; i++) {\n            errors.add(new MockError());\n        }\n        return errors;\n    }\n\n    private static class MockError {\n        public void printStackTrace(PrintWriter writer) {\n            writer.println(\"mock stack trace \" + (i + 1));\n        }\n    }\n}\n\nclass NoHostAvailableExceptionTest {\n    @Test(groups = \"unit\")\n    public void should_build_default_message        List<MockError> errors = buildMockErrors(3);\n        NoHostAvailableException e = new NoHostAvailableException(errors);\n        assertThat(e.getMessage()).isEqualTo(\"All host(s) tried for query failed\");\n    }\n\n    @Test(groups = \"unit\")\n    public void should_build_formatted_message_without_stack_traces()", "reference_code": "import java.net.InetSocketAddress;\nimport java.util.Map;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n", "case_type": "block"}
{"generated_code": "        // set shutdown pin to PULL_DOWN\n        pin.setShutdownOptions(PinPullResistance.PULL_DOWN);\n\n        // print the state\n        System.out.println(\"--> GPIO state: \" + pin.getState());\n\n        // wait 10 seconds\n        Thread.sleep(10000);\n\n        // turn off\n        pin.low();\n\n        // print the state\n        System.out.println(\"--> GPIO state: \" + pin.getState());\n\n        // wait 10 seconds\n        Thread.sleep(10000);\n\n        // turn on\n        pin.high();\n\n        // print the state\n        System.out.println(\"--> GPIO state: \" + pin.getState());\n\n        // wait 10 seconds\n        Thread.sleep(10000);\n\n        // turn off\n        pin.low();\n\n        // print the state\n        System.out.println(\"--> GPIO state: \" + pin.getState());\n\n        // wait 10 seconds\n        Thread.sleep(10", "reference_code": "        // configure the pin shutdown behavior; these settings will be \n        // automatically applied to the pin when the application is terminated\n        pin.setShutdownOptions(true, PinState.LOW, PinPullResistance.OFF);\n", "case_type": "block"}
{"generated_code": "        return 0;\n    }\n\n    @Override\n    public Double get(T target) throws Exception {\n        if (target == null) {\n            return null;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        final Getter<? super T, Number> delegate = (Getter<? super T, Number>) this.delegate;\n\n        @SuppressWarnings(\"unchecked\")\n        final Number value = delegate.get(target);\n        if (value != null) {\n            return value.doubleValue();\n        }\n        return 0;\n    }\n\n    @Override\n    public Object get(Object target) throws Exception {\n        if (target == null) {\n            return null;\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        final Getter<? super T, Number> delegate = (Getter<? super T, Number>) this.delegate;\n\n        @SuppressWarnings(\"unchecked\")\n        final Number value = delegate.get(target);\n        if (value != null) {\n           ", "reference_code": "        return 0;\n    }\n\n    @Override\n    public Double get(T target) throws Exception {\n", "case_type": "block"}
{"generated_code": "        var map1 = new HashMap<Node, Reference>();\n        map1.put(key1, ref1);\n\n        assertTrue(bind(Dict.of(map0), Dict.of(map1)));\n\n        System.out.println(ref0);\n        System.out.println(ref1);\n\n        System.out.println(key0);\n        System.out.println(key1);\n\n        System.out.println(map0);\n        System.out.println(map1);\n\n        map1.put(key0, ref0);\n\n        System.out.println(ref0);\n        System.out.println(ref1);\n\n        System.out.println(key0);\n        System.out.println(key1);\n\n        System.out.println(map0);\n        System.out.println(map1);\n\n        map0.put(key1, ref1);\n\n        System.out.println(ref0);\n        System.out.println(ref1);\n\n        System.out.println(key0);\n        System.", "reference_code": "\n        var map1 = new HashMap<Node, Reference>();\n        map1.put(key1, ref1);\n\n        assertTrue(bind(Dict.of(map0), Dict.of(map1)));\n", "case_type": "block"}
{"generated_code": "        stringBuilder.append(\"</html>\\n\");\n        stringBuilder.append(\"<style>\\n\");\n        stringBuilder.append(\"body {\\n\");\n        stringBuilder.append(\"    background-color: #dddddd;\\n\");\n        stringBuilder.append(\"}\\n\");\n        stringBuilder.append(\"</style>\\n\");\n        stringBuilder.append(\"<script>\\n\");\n        stringBuilder.append(\"</script>\\n\");\n        stringBuilder.append(\"</html>\\n\");\n        stringBuilder.append(\"<style>\\n\");\n        stringBuilder.append(\"</style>\\n\");\n        stringBuilder.append(\"<script>\\n\");\n        stringBuilder.append(\"</script>\\n\");\n        stringBuilder.append(\"</html>\\n\");\n        stringBuilder.append(\"<style>\\n\");\n        stringBuilder.append(\"</style>\\n\");\n        stringBuilder.append(\"<script>\\n\");\n        stringBuilder.append(\"</script>\\n\");\n        stringBuilder.append(\"</html>\\n", "reference_code": "        stringBuilder.append(\"</html>\");\n", "case_type": "block"}
{"generated_code": "import java.net.URL;\n\npublic interface URLChecker {\n\n    /**\n     * Determines if an URL can be processed without {@link URL#openConnection()}\n     * or {@link URL#openStream()}\n     *\n     * @param checkUrl URL to check\n     * @return\n     */\n    boolean canProcessWithoutConnection(URL checkUrl);\n\n    /**\n     * Determines if an URL can be processed without {@link URL#openConnection()}\n     * or {@link URL#openStream()}\n     *\n     * @param checkUrl URL to check\n     * @param processUrlNow If URL can be processed without a connection, true will process the URL\n     * @return\n     */\n    boolean canProcessWithoutConnection(URL checkUrl, boolean processUrlNow, boolean processUrlNow2);\n\n    /**\n     * Determines if an URL can be processed without {@link URL#openConnection()}\n     * or {@link URL#openStream()}\n     *\n     * @param checkUrl URL to check\n     * @param processUrlNow If URL can be processed without a connection, true will process the", "reference_code": "import java.net.URL;\n\npublic interface AzURLStreamHandlerSkipConnection {\n", "case_type": "block"}
{"generated_code": "                // open site (i, j) if valid, and draw resulting system\n                if (perc.isOpen(i, j)) {\n                    perc.open(i, j);\n                    PercolationVisualizer.draw(perc, n);\n                    StdDraw.show();\n                    StdDraw.pause(20);\n                    break;\n                }\n\n                // clear screen and draw n-by-n percolation system\n                StdDraw.clear();\n                PercolationVisualizer.draw(perc, n);\n                StdDraw.show();\n                StdDraw.pause(20);\n\n            } else {\n\n                // clear screen and draw n-by-n percolation system\n                StdDraw.clear();\n                if (perc.percolates()) {\n                    PercolationVisualizer.drawPercolated(perc, n);\n                    StdDraw.show();\n                    break;\n                } else {\n                    PercolationVisualizer.draw(perc, n);\n                    StdDraw.show();\n                    StdDraw.pause(20);", "reference_code": "                // open site (i, j) provided it's in bounds\n                if (i >= 1 && i <= n && j >= 1 && j <= n) {\n                    if (!perc.isOpen(i, j)) {\n                        StdOut.println(i + \" \" + j);\n                    }\n                    perc.open(i, j);\n", "case_type": "block"}
{"generated_code": "package alien4cloud.rest.controller.paas;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport javax.annotation.PostConstruct;\nimport javax.annotation.PreDestroy;\nimport javax.annotation.Resource;\n\nimport org.apache.commons.collections4.MapUtils;\nimport org.apache.commons.lang3.ArrayUtils;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.access.prepost.PreAuthorize;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport alien4cloud.exception.NotFoundException;\nimport alien4cloud.paas.IPaaSProviderFactory;\nimport alien4cloud.paas.PaaSProviderFactoriesService;\nimport alien4cloud.plugin.model.PluginComponentDescriptor;\nimport alien4cloud.plugin.model.PluginDescriptor;\nimport alien4cloud.plugin.PluginManager;\nimport alien4", "reference_code": "package alien4cloud.rest.paasprovider;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\n", "case_type": "block"}
{"generated_code": "import org.hx.rainbow.common.util.DateUtil;\n\nimport org.mycat.web.dao.ShowDao;\nimport org.mycat.web.dao.ShowDaoImpl;\nimport org.mycat.web.dao.ShowDaoMysql;\nimport org.mycat.web.dao.ShowDaoOracle;\nimport org.mycat.web.dao.ShowDaoSqlserver;\nimport org.mycat.web.dao.ShowDaoSqlserver2005;\nimport org.mycat.web.dao.ShowDaoSqlserver2008;\nimport org.mycat.web.dao.ShowDaoSqlserver2008R2;\nimport org.mycat.web.dao.ShowDaoSqlserver2012;\nimport org.mycat.web.dao.ShowDaoSqlserver2012R2;\nimport org.mycat.web.dao.ShowDaoSqlserver2014;\nimport org.mycat.web.dao.ShowDao", "reference_code": "import org.hx.rainbow.common.util.DateUtil;\n", "case_type": "block"}
{"generated_code": "import com.jmb.springfactory.model.dto.WorkGroupDto;\nimport com.jmb.springfactory.model.factory.group.GroupSamples.ID_GROUP_TEST_1;\nimport com.jmb.springfactory.model.factory.group.GroupSamples.NAME_GROUP_TEST_1;\nimport com.jmb.springfactory.model.factory.group.GroupSamples.START_HOUR_GROUP_TEST_1;\nimport com.jmb.springfactory.model.factory.group.GroupSamples.FINISH_HOUR_GROUP_TEST_1;\nimport com.jmb.springfactory.model.factory.group.GroupSamples.ID_GROUP_TEST_2;\nimport com.jmb.springfactory.model.factory.group.GroupSamples.NAME_GROUP_TEST_2;\nimport com.jmb.springfactory.model.factory.group.GroupSamples.START_HOUR_GROUP_TEST_2;\nimport com.jmb.springfactory.model.factory.group.GroupSamples.FINISH_HOUR_GROUP_TEST", "reference_code": "import com.jmb.springfactory.model.dto.WorkGroupDto;\n", "case_type": "block"}
{"generated_code": "            @Override public Boolean variable(Symbol s) { return true; }\n        }\n\n        public static class False extends ExprPredicate {\n\n            @Override public Boolean abstraction(Symbol sym, Expr arg) { return false; }\n            @Override public Boolean application(Expr fun, Expr arg) { return false; }\n            @Override public Boolean variable(Symbol s) { return false; }\n        }\n\n        public static class NotFalse extends ExprPredicate {\n\n            @Override public Boolean abstraction(Symbol sym, Expr arg) { return true; }\n            @Override public Boolean application(Expr fun, Expr arg) { return true; }\n            @Override public Boolean variable(Symbol s) { return true; }\n        }\n\n        public static class NotTrue extends ExprPredicate {\n\n            @Override public Boolean abstraction(Symbol sym, Expr arg) { return false; }\n            @Override public Boolean application(Expr fun, Expr arg) { return false; }\n            @Override public Boolean variable(Symbol s) { return false; }\n        }\n\n        public static class NotAbstraction extends ExprPred", "reference_code": "            @Override public Boolean variable(Symbol s) { return true; }\n        }\n\n        public static class False extends ExprPredicate {\n", "case_type": "block"}
{"generated_code": "\nimport akka.actor.Actor;\nimport akka.actor.ActorRef;\nimport akka.actor.ActorSystem;\nimport akka.actor.Props;\nimport akka.actor.Actor;\nimport akka.actor.ActorRef;\nimport akka.actor.ActorSystem;\nimport akka.actor.Props;\nimport akka.actor.Actor;\nimport akka.actor.ActorRef;\nimport akka.actor.ActorSystem;\nimport akka.actor.Props;\nimport akka.actor.Actor;\nimport akka.actor.ActorRef;\nimport akka.actor.ActorSystem;\nimport akka.actor.Props;\nimport akka.actor.Actor;\nimport akka.actor.ActorRef;\nimport akka.actor.ActorSystem;\nimport akka.actor.Props;\nimport akka.actor.Actor;\nimport akka.actor.ActorRef;\nimport akka.actor.", "reference_code": "\nimport com.cmwp.dramad.framework.OurActor;\n\nimport java.util.*;\n\n", "case_type": "block"}
{"generated_code": "        {\n            constantTagMask |= (1 << constantTags[index]);\n        }\n\n        if (constantTagMask == 0)\n        {\n            throw new IllegalArgumentException(\"No constant tags specified.\");\n        }\n\n        if ((constantTagMask & ~0xFFFF) != 0)\n        {\n            throw new IllegalArgumentException(\"Invalid constant tag mask.\");\n        }\n\n        if (constantTagMask < 0)\n        {\n            throw new IllegalArgumentException(\"Negative constant tag mask.\");\n        }\n\n        if (constantTagMask > 0xFFFF)\n        {\n            throw new IllegalArgumentException(\"Too many constant tags specified.\");\n        }\n\n        if (constantVisitor == null)\n        {\n            throw new IllegalArgumentException(\"Constant visitor is null.\");\n        }\n\n        if (constantVisitor instanceof ConstantTagFilter)\n        {\n            throw new IllegalArgumentException(\"Constant visitor is a ConstantTagFilter.\");\n        }\n\n        if (constantVisitor instanceof ConstantVisitor)\n        {\n            throw new IllegalArgumentException(\"Constant visitor is a ConstantVisitor.\");\n        }\n\n        if (constantVisitor instanceof ConstantVisitor", "reference_code": "        {\n            constantTagMask |= 1 << constantTags[index];\n", "case_type": "block"}
{"generated_code": "    {\n        init();\n    }\n\n    public ColGroup() {\n        this(null, null);\n    }\n\n    public ColGroup(final AbstractAttribute... attributes) {\n        this(null, attributes);\n    }\n\n    public ColGroup(final AbstractHtml base) {\n        this(base, null);\n    }\n\n    public ColGroup(final AbstractHtml base, final AbstractAttribute attribute) {\n        this(base, new AbstractAttribute[] { attribute });\n    }\n\n    public ColGroup(final AbstractHtml base, final AbstractAttribute... attributes) {\n        super(PRE_INDEXED_TAG_NAME, base, attributes);\n    }\n\n    public ColGroup(final AbstractAttribute attribute) {\n        this(null, attribute);\n    }\n\n    public ColGroup(final AbstractAttribute... attributes) {\n        this(null, attributes);\n    }\n\n    public ColGroup(final AbstractHtml base, final AbstractAttribute attribute) {\n        this(base, new AbstractAttribute[] { attribute });\n    }\n\n    public ColGroup(final AbstractHtml base, final AbstractAttribute... attributes) {\n        super(", "reference_code": "\n    {\n\n        init();\n    }\n", "case_type": "block"}
{"generated_code": "        String currentParentElement = context.getCurrentParentElement();\n        int targetDepth = originalDepth + 1;\n\n        if (context.isStartOfDocument())\n            targetDepth += 2;\n\n        if (context.getCurrentToken() == null)\n            context.nextToken();\n\n        if (context.getCurrentToken() == VALUE_NULL) {\n            return deleteConnectionResult;\n        }\n\n        // Parse Root element\n        if (context.getCurrentToken() == FIELD_NAME && \"DeleteConnectionResult\" == context.getCurrentName()) {\n            context.nextToken();\n        }\n\n        // Parse Member\n        if (context.getCurrentToken() == START_OBJECT) {\n            targetDepth += 2;\n        }\n\n        // Parse Member\n        if (context.getCurrentToken() == START_OBJECT) {\n            targetDepth += 2;\n        }\n\n        // Parse Member\n        if (context.getCurrentToken() == START_OBJECT) {\n            targetDepth += 2;\n        }\n\n        // Parse Member\n        if (context.getCurrent", "reference_code": "        String currentParentElement = context.getCurrentParentElement();\n        int targetDepth = originalDepth + 1;\n\n", "case_type": "block"}
{"generated_code": "            return this.returnTarget == that.returnTarget;\n        }\n        if (this.returnTarget.equals(that.returnTarget)) {\n            return true;\n        }\n        if (this.returnTarget.getInstruction() == that.returnTarget.getInstruction()) {\n            return true;\n        }\n        if (this.returnTarget.getInstruction().getLineNumber() == that.returnTarget.getInstruction().getLineNumber()) {\n            return true;\n        }\n        if (this.returnTarget.getInstruction().getLineNumber() == that.returnTarget.getInstruction().getLineNumber()) {\n            return true;\n        }\n        if (this.returnTarget.getInstruction().getLineNumber() == that.returnTarget.getInstruction().getLineNumber()) {\n            return true;\n        }\n        if (this.returnTarget.getInstruction().getLineNumber() == that.returnTarget.getInstruction().getLineNumber()) {\n            return true;\n        }\n        if (this.returnTarget.getInstruction().getLineNumber() == that.returnTarget.get", "reference_code": "            return that.returnTarget == this.returnTarget;\n", "case_type": "block"}
{"generated_code": "            return \"0x00\";\n\n        final int maxLength = Math.min(length, bytes.length - start);\n\n        // hex values are uppercase\n        // 0x100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "reference_code": "            return \"\";\n\n        final int maxLength = Math.min(length, bytes.length - start);\n", "case_type": "block"}
{"generated_code": "\nimport org.esa.beam.framework.datamodel.AppContext;\nimport org.esa.beam.framework.datamodel.RangeDopplerGeocodingOpUI;\n\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.ItemEvent;\nimport java.awt.event.ItemListener;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.esa.nest.gpf.GpfConstants.ELLIPSOID_CORRECTION_RD_OP_NAME;\nimport static org.esa.nest.gpf.GpfConstants.ELLIPSOID_CORRECTION_RD_OP_DESCRIPTION;\nimport static org.esa.nest.gpf.GpfConstants.ELLIPSOID_CORRECTION_RD_OP_ICON;\nimport static org.esa.nest.gpf.GpfConstants.ELLIPSOID_CORRECTION_RD_OP_GROUP", "reference_code": "\nimport org.esa.beam.framework.ui.AppContext;\n", "case_type": "block"}
{"generated_code": "    init();\n    setTitle(VcsBundle.message(\"changes.cache.settings.title\"));\n    setOKButtonText(VcsBundle.message(\"changes.cache.settings.button.apply\"));\n    setCancelButtonText(VcsBundle.message(\"changes.cache.settings.button.cancel\"));\n    myPanel = new CacheSettingsPanel();\n    myPanel.setPreferredSize(getPreferredSize());\n  }\n\n  public void initPanel(Project project) {\n    setTitle(VcsBundle.message(\"changes.cache.settings.title\"));\n    setOKButtonText(VcsBundle.message(\"changes.cache.settings.button.apply\"));\n    setCancelButtonText(VcsBundle.message(\"changes.cache.settings.button.cancel\"));\n    myPanel.setProject(project);\n    myPanel.setPreferredSize(getPreferredSize());\n  }\n\n  public void reset() {\n    myPanel.reset();\n  }\n\n  public void init(Project project) {\n    setTitle(VcsBundle.message(\"changes.cache.settings.title\"));\n    setOKButtonText(", "reference_code": "    setTitle(VcsBundle.message(\"cache.settings.dialog.title\"));\n    myPanel = new CacheSettingsPanel();\n", "case_type": "block"}
{"generated_code": "package com.github.dreamhead.moco.util;\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport static java.util.regex.Pattern.quote;\n\npublic class PatternCollection {\n    public static final Pattern\n        HTML_TO_PLAIN = Pattern.compile(\"(?s)<[^>]*>(\\\\s*<[^>]*>)*\"),\n        MULTIPLE_LINES = Pattern.compile(\"\\\"(?m)^[ \\\\t]*\\\\r?\\\\n\\\"\"),\n        UNNECESSARY_NEWLINE_END = Pattern.compile(\"(\\\\r?\\\\n)+$\"),\n        UNNECESSARY_NEWLINE_START = Pattern.compile(\"^(\\\\r?\\\\n)+\");\n\n    public static Pattern compileForHTMLTag(String tag) {\n        tag = quote(tag);\n        return Pattern.compile(\"<\\\\/?\" + tag + \"[^>]*>\");\n    }\n\n    public static Pattern compileForHTMLContents(String tag) {", "reference_code": "package br.com.brjdevs.miyuki.lib;\n", "case_type": "block"}
{"generated_code": "    private PathPre(String value) {\n        this.value = value;\n    }\n\n    public void setValue(String value) {\n        this.value = value;\n    }\n\n    public void setValue(String value, String defaultValue) {\n        this.value = value == null ? defaultValue : value;\n    }\n\n    public void setValue(String value, String defaultValue, String defaultValue2) {\n        this.value = value == null ? defaultValue : value == null ? defaultValue2 : value;\n    }\n\n    public void setValue(String value, String defaultValue, String defaultValue2, String defaultValue3) {\n        this.value = value == null ? defaultValue : value == null ? defaultValue2 : value == null ? defaultValue3 : value;\n    }\n\n    public void setValue(String value, String defaultValue, String defaultValue2, String defaultValue3, String defaultValue4) {\n        this.value = value == null ? defaultValue : value == null ? defaultValue2 : value == null ? defaultValue3 : value == null ? defaultValue4 : value;\n   ", "reference_code": "    PathPre(String value) {\n        this.value = value;\n    }\n", "case_type": "block"}
{"generated_code": "        // Remove child\n        if (this._level0_ == child) {\n            setLevel0(null);\n            return;\n        }\n\n        throw new RuntimeException(\"Not a child.\");\n    }\n\n    void addChild(@SuppressWarnings(\"unused\") Node child) {\n        // Add child\n        if (this._level0_ == null) {\n            setLevel0((PLevel0) child);\n            return;\n        }\n\n        throw new RuntimeException(\"Already has child.\");\n    }\n\n    Node getChild(@SuppressWarnings(\"unused\") int i) {\n        // Get child\n        if (this._level0_ != null) {\n            return this._level0_;\n        }\n\n        throw new RuntimeException(\"No child.\");\n    }\n\n    void insertChild(@SuppressWarnings(\"unused\") int i, @SuppressWarnings(\"unused\") Node node) {\n        // Insert child\n        if (this._level0_ == null) {\n            setLevel0((PLevel0) node);\n            return;\n        }\n", "reference_code": "        // Remove child\n        if (this._level0_ == child) {\n            this._level0_ = null;\n            return;\n        }\n", "case_type": "block"}
{"generated_code": " image is 500x500, so we scale it down to 100x100.\n        final double scaleXY(int i, int w) { return (i * zoom) / (double) w; }\n\n        // Create the NN.\n        NeuralNetConfiguration conf = new NeuralNetConfiguration.Builder()\n                .updater(Updater.STOCHASTIC_GRADIENT_DESCENT)\n                .iterations(10000)\n                .list()\n                .layer(0, new DenseLayer.Builder().nIn(2).nOut(10).activation(Activation.IDENTITY).build())\n                .layer(1, new DenseLayer.Builder().nIn(10).nOut(10).activation(Activation.IDENTITY).build())\n                .layer(2, new OutputLayer.Builder(LossFunctions.LossFunction.NEGATIVE_LOGLIKELIHOOD).nIn(10).nOut(2).activation(Activation.IDENTITY).build())\n                .build();", "reference_code": "        final int h = (int) originalImage.getHeight();\n        composition = new WritableImage(w, h); //Right image.\n\n        ds = generateDataSet(originalImage);\n        nn = createNN();\n\n", "case_type": "block"}
{"generated_code": "    public void handleClientSide(EntityPlayer player) {\n    }\n\n    @Override\n    public void handleServerSide(EntityPlayer player) {\n    }\n\n    @Override\n    public void handleClientSide(EntityPlayer player) {\n    }\n\n    @Override\n    public void handleServerSide(EntityPlayer player, boolean isSyncing) {\n    }\n\n    @Override\n    public void handleClientSide(EntityPlayer player, boolean isSyncing) {\n    }\n\n    @Override\n    public void handleServerSide(EntityPlayer player, boolean isSyncing, boolean isSyncingParty) {\n    }\n\n    @Override\n    public void handleClientSide(EntityPlayer player, boolean isSyncing, boolean isSyncingParty) {\n    }\n\n    @Override\n    public void handleClientSide(EntityPlayer player, boolean isSyncing, boolean isSyncingParty, boolean isSyncingPartyMembers) {\n    }\n\n    @Override\n    public void handleServerSide(EntityPlayer player, boolean isSyncing, boolean isSyncingParty, boolean isSyncingPartyMembers) {\n   ", "reference_code": "    public void handleClientSide(EntityPlayer var1) {}\n", "case_type": "block"}
{"generated_code": "                        | android.text.format.DateUtils.FORMAT_SHOW_YEAR\n                        | android.text.format.DateUtils.FORMAT_NO_MOMENT);\n    }\n\n    public static String formatDate(Context context, Date date) {\n        return android.text.format.DateUtils.formatDateTime(context, date.getTime(),\n                android.text.format.DateUtils.FORMAT_SHOW_DATE\n                        | android.text.format.DateUtils.FORMAT_SHOW_YEAR\n                        | android.text.format.DateUtils.FORMAT_NO_MOMENT\n                        | android.text.format.DateUtils.FORMAT_NO_TIME\n                        | android.text.format.DateUtils.FORMAT_NO_MOMENT\n                        | android.text.format.DateUtils.FORMAT_NO_TIME\n                        | android.text.format.DateUtils.FORMAT_NO_MOMENT\n                        | android.text.format.DateUtils.FORMAT_NO_MOMENT\n                        | android.text.format.DateUtils.FORMAT_NO_MOMENT\n                        | android.text.format.Date", "reference_code": "                        | android.text.format.DateUtils.FORMAT_NO_NOON\n                        | android.text.format.DateUtils.FORMAT_NO_MIDNIGHT\n", "case_type": "block"}
{"generated_code": "package com.graphql.java.tutorial.schema;\n\nimport com.graphql.java.tutorial.StaticData;\nimport com.graphql.java.tutorial.model.Talk;\nimport com.graphql.java.tutorial.model.Viewer;\nimport com.graphql.java.tutorial.schema.annotation.GraphQLField;\nimport com.graphql.java.tutorial.schema.annotation.GraphQLIn;\nimport com.graphql.java.tutorial.schema.annotation.GraphQLObject;\n\nimport java.util.List;\n\n@GraphQLObject(\"Query\")\n@GraphQLObject(\"Mutation\")\n@GraphQLObject(\"Subscription\")\n@GraphQLObject(\"Talk\")\n@GraphQLObject(\"Viewer\")\n@GraphQLObject(\"User\")\n@GraphQLObject(\"Comment\")\n@GraphQLObject(\"Like\")\n@GraphQLObject(\"Subscription\")\n@GraphQLObject(\"Subscription\")\n@GraphQLObject(\"Subscription\")\n@GraphQLObject(\"Subscription\")\n@GraphQLObject(\"Subscription\")\n@Graph", "reference_code": "package jfall.graphql.demo.schema.objecttype;\n\nimport com.oembedler.moon.graphql.engine.stereotype.*;\nimport jfall.graphql.demo.schema.StaticData;\n", "case_type": "block"}
{"generated_code": "     * @return the id value\n     */\n    public String id() {\n        if (this.id == null) {\n            return null;\n        }\n\n        return this.id.value();\n    }\n\n    /**\n     * Set the id value.\n     *\n     * @param id the id value to set\n     * @return the ArmIdWrapper object itself.\n     */\n    public ArmIdWrapper withId(String id) {\n        if (id == null) {\n            this.id = null;\n        } else {\n            this.id = new IdWrapper(id);\n        }\n\n        return this;\n    }\n\n    /**\n     * Get the id.\n     *\n     * @return the id value\n     */\n    public IdWrapper id() {\n        if (this.id == null) {\n            return null;\n        }\n\n        return this.id.value();\n    }\n\n    /**\n     * Get the id.\n     *\n     * @return the id value\n     */\n    public IdWrapper idValue() {\n        if (this.id ==", "reference_code": "     * @return the id value\n     */\n    public String id() {\n", "case_type": "block"}
{"generated_code": "\n  private File _tempZipFile;\n\n  /**\n   * @param tempZipFile the file to use as the temporary zip file\n   * @throws IOException\n   */\n  @SuppressWarnings(\"unused\")\n  private TmpMojoReaderBackend() throws IOException {\n    this(null);\n  }\n\n  /**\n   * @param tempZipFile the file to use as the temporary zip file\n   * @throws IOException\n   */\n  @SuppressWarnings(\"unused\")\n  private TmpMojoReaderBackend(String tempZipFile) throws IOException {\n    this(new File(tempZipFile));\n  }\n\n  /**\n   * @param tempZipFile the file to use as the temporary zip file\n   * @throws IOException\n   */\n  @SuppressWarnings(\"unused\")\n  private TmpMojoReaderBackend(File tempZipFile) throws IOException {\n    this(tempZipFile, null);\n  }\n\n  /**\n   * @param tempZipFile the file to use as the temporary zip file\n   *", "reference_code": "\n  File _tempZipFile;\n\n", "case_type": "block"}
{"generated_code": "    public String encode(Command command) {\n        switch (command.getType()) {\n            case Command.TYPE_RESET_DEVICE:\n                return formatCommand(command, \"$WP+RESET=%s\", Command.KEY_DEVICE_PASSWORD);\n            case Command.TYPE_RESET_DEVICE_FACTORY:\n                return formatCommand(command, \"$WP+RESET=%s\", Command.KEY_DEVICE_PASSWORD);\n            case Command.TYPE_RESET_DEVICE_FACTORY_AND_REBOOT:\n                return formatCommand(command, \"$WP+RESET=%s\", Command.KEY_DEVICE_PASSWORD);\n            case Command.TYPE_RESET_DEVICE_FACTORY_AND_RESET:\n                return formatCommand(command, \"$WP+RESET=%s\", Command.KEY_DEVICE_PASSWORD);\n            case Command.TYPE_RESET_DEVICE_FACTORY_AND_RESET_AND_REBOOT:\n                return formatCommand(command, \"$WP+RESET=%s", "reference_code": "    protected Object encodeCommand(Command command) {\n\n        initDevicePassword(command, \"0000\");\n\n        switch (command.getType()) {\n", "case_type": "block"}
{"generated_code": " asm.position            // If the polling page address is not reachable from the code cache,\n            // then we can't use the code cache to poll for the safepoint page.\n            // This is because the code cache is not guaranteed to be co-located with the immutable code.\n            // We can't use the code cache to poll for the safepoint page if the polling page address is not reachable\n            // from the code cache.\n            // This is because the code cache is not guaranteed to be co-located with the immutable code.\n            // We can't use the code cache to poll for the safepoint page if the polling page address is not reachable\n            // from the code cache.\n            // This is because the code cache is not guaranteed to be co-located with the immutable code.\n            // We can't use the code cache to poll for the safepoint page if the polling page address is not reachable\n            // from the code cache.\n            // This is because the code cache is not guaranteed to be co-located with the immutable code.\n            // We can't", "reference_code": "    private static boolean isPollingPageFar(HotSpotVMConfig config) {\n", "case_type": "block"}
{"generated_code": "ER,TuxGuitar.instance                    return AUTO_UNLOCK;\n        }\n        return 0;\n    }\n\n    protected void closeModules(){\n        TuxGuitar.instance().getPianoEditor().dispose();\n        TuxGuitar.instance().getMatrixEditor().dispose();\n        TuxGuitar.instance().getFretBoardEditor().dispose();\n    }\n\n    @Override\n    public String getName() {\n        return NAME;\n    }\n\n    @Override\n    public MarkerList getMarkerList() {\n        return MarkerList.DISPOSE;\n    }\n\n    @Override\n    public boolean isEnabled() {\n               }\n\n    public static final String NAME = \"Dispose\";\n\n    /**\n     * Constructor\n     */\n    @Action(name = NAME, autoLock = true, autoUnlock = true)\n    public static class DisposeAction extends Action {\n\n        /**\n         * Constructor\n         */\n        public DisposeAction() {\n            super(NAME, AUTO_LOCK);\n        }\n   ", "reference_code": "\npublic class DisposeAction extends Action {\n    public static final String NAME = \"action.system.dispose\";\n\n", "case_type": "block"}
{"generated_code": "            }\n        });\n    }\n\n    private void shutdown() {\n        if (server != null) {\n            server.shutdown();\n        }\n    }\n\n    // Alternative to the above method\n    // private void shutdown() {\n    //     if (server != null) {\n    //         server.shutdownNow();\n    //     }\n    // }\n\n    // Alternative to the above method\n    // private void shutdown() {\n    //     if (server != null) {\n    //         server.awaitTermination();\n    //     }\n    // }\n\n    // Alternative to the above method\n    // private void shutdown() {\n    //     if (server != null) {\n    //         server.stop();\n    //     }\n    // }\n\n    // Alternative to the above method\n    // private void shutdown() {\n    //     if (server != null) {\n    //         server.awaitTermination();\n    //         server.shutdown();\n    //     }\n    // }\n\n    // Alternative to the above method\n   ", "reference_code": "            }\n        });\n    }\n\n", "case_type": "block"}
{"generated_code": "\n  @Override\n  public List<String> eslintArgs() {\n    return Collections.singletonList(\"'no-redeclare'\");\n  }\n\n  @Override\n  public Config getDefaultConfig() {\n    return new Config();\n  }\n\n  @Override\n  public String getDescription() {\n    return \"Checks for redeclared symbols\";\n  }\n\n  @Override\n  public String getKey() {\n    return \"redeclared-symbols\";\n  }\n\n  @Override\n  public String getName() {\n    return \"Redeclared Symbols\";\n  }\n\n  @Override\n  public String getSeverity() {\n    return \"WARNING\";\n  }\n\n  @Override\n  public String getTitle() {\n    return \"Redeclared Symbols\";\n  }\n\n  @Override\n  public String getType() {\n    return \"code-style\";\n  }\n\n  @Override\n  public String getValue() {\n    return \"redeclared-symbols\";\n  }\n\n  @Override\n  public", "reference_code": "\n  @Override\n  public List<Object> configurations() {\n    return Collections.singletonList(new Config());\n", "case_type": "block"}
{"generated_code": "\n    public static Date stringToDate(String data) throws ParseException {\n        return (new SimpleDateFormat(\"dd/MM/yyyy\").parse(data));\n    }\n\n    public static Date stringToDate(String data, String formato) throws ParseException {\n        return (new SimpleDateFormat(formato).parse(data));\n    }\n\n    public static Date stringToDate(String data, String formato, String formatoHora) throws ParseException {\n        return (new SimpleDateFormat(formatoHora).parse(data));\n    }\n\n    public static Date stringToDate(String data, String formatoHora) throws ParseException {\n        return (new SimpleDateFormat(formatoHora).parse(data));\n    }\n\n    public static Date stringToDate(String data, String formato) throws ParseException {\n        return (new SimpleDateFormat(formato).parse(data));\n    }\n\n    public static Date stringToDate(String data) throws ParseException {\n        return (new SimpleDateFormat(\"dd/MM/yyyy\").parse(data));\n   ", "reference_code": "\n    public static Date stringToDate(String data) throws ParseException {\n        return (new SimpleDateFormat(\"dd/MM/yyyy\").parse(data));\n    }\n\n", "case_type": "block"}
{"generated_code": "DatabaseCluster<Z, D> cluster, D database)\n    {\n        Has        * {@inheritDoc}\n     * @see net.sf.hajdbc.management.MBeanRegistrar#unregister(net.sf.hajdbc.DatabaseCluster)\n     */\n    @Override\n    public void unregister(DatabaseCluster<Z, D> cluster, D database)\n    {\n        this.unregister(this.createAttributes(cluster, database));\n    }\n\n    /**\n     * {@inheritDoc}\n     * @see net.sf.hajdbc.management.MBeanRegistrar#unregister(net.sf.hajdbc.DatabaseCluster, net.sf.hajdbc.Database)\n     */\n    @Override\n    public void unregister(DatabaseCluster<Z, D> cluster, D database, String domain)\n    {\n        this.unregister(this.createAttributes(cluster, database), domain);\n    }\n\n    private void unregister(Hashtable<String, String> attributes, String domain)\n    {\n        this.unregister(attributes, domain);\n    }\n\n", "reference_code": "     * {@inheritDoc}\n     * @see net.sf.hajdbc.management.MBeanRegistrar#unregister(net.sf.hajdbc.DatabaseCluster)\n     */\n    @Override\n", "case_type": "block"}
{"generated_code": "package com.googlecode.lanterna.terminal;\n\nimport java.io.Closeable;\n\n@FunctionalInterface\n@Deprecated\n@SuppressWarnings(\"unused\")\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n", "reference_code": "package org.jboss.forge.addon.shell.spi;\n\nimport java.io.Closeable;\n", "case_type": "block"}
{"generated_code": "     * Finds a user based on the secret key provided.\n     * @param secretKey\n     * @return\n     * @throws com.cloud.exception.CloudRuntimeException\n     * @throws com.cloud.exception.CloudServiceException\n     * @throws com.cloud.exception.CloudSecurityException\n     * @throws com.cloud.exception.CloudDaoException\n     * @throws com.cloud.exception.CloudAuthorizationException\n     * @throws com.cloud.exception.CloudAuthorizationException\n     * @throws com.cloud.exception.CloudAuthorizationException\n     * @throws com.cloud.exception.CloudAuthorizationException\n     * @throws com.cloud.exception.CloudAuthorizationException\n     * @throws com.cloud.exception.CloudAuthorizationException\n     * @throws com.cloud.exception.CloudAuthorizationException\n     * @throws com.cloud.exception.CloudAuthorizationException\n     * @throws com.cloud.exception.CloudAuthorizationException\n     * @throws com.cloud.exception.CloudAuthorizationException\n     * @throws com.cloud.exception.CloudAuthorizationException\n     * @throws com.cloud.", "reference_code": "     * Finds a user based on the secret key provided.\n     * @param secretKey\n     * @return\n", "case_type": "block"}
{"generated_code": "            Boolean value = operand.evaluate(nameToValueMap);\n\n            if (value == null) {\n                return null;\n            }\n            else if (!value.booleanValue()) {\n                return Boolean.FALSE;\n            }\n        }\n        return Boolean.TRUE;\n    }\n\n    @Override\n    public Boolean evaluate() {\n        for (IInMemoryBooleanOperand operand : operands) {\n            Boolean value = operand.evaluate();\n\n            if (value == null) {\n                return null;\n            }\n            else if (!value.booleanValue()) {\n                return Boolean.FALSE;\n            }\n        }\n        return Boolean.TRUE;\n    }\n\n    @Override\n    public Boolean evaluate(Object name) {\n        for (IInMemoryBooleanOperand operand : operands) {\n            Boolean value = operand.evaluate(name);\n\n            if (value == null) {\n                return null;\n            }\n            else if (!value.booleanValue()) {\n                return Boolean.FALSE;\n            }\n        }\n        return Boolean.TRUE;\n    }", "reference_code": "            Boolean value = operand.evaluate(nameToValueMap);\n", "case_type": "block"}
{"generated_code": "public class EntityBreedListener implements Listener\n{\n\n    // -----------------------------------------------\n    // EVENT HANDLERS\n    // -----------------------------------------------\n\n    /**\n     * Called when an entity is breeding.\n     */\n    // @formatter:off\n    // @formatter:on\n\n    /**\n     * Called when an entity is breeding.\n     */\n    @EventHandler\n    public void onEntityBreedEvent(EntityBreedEvent ev)\n    {\n\n    }\n\n    /**\n     * Called when an entity is breeding.\n     */\n    @EventHandler\n    public void onEntityBreedEvent(EntityBreedEvent ev)\n    {\n\n    }\n\n    /**\n     * Called when an entity is breeding.\n     */\n    @EventHandler\n    public void onEntityBreedEvent(EntityBreedEvent ev)\n    {\n\n    }\n\n    /**\n     * Called when an entity is breeding.\n     */\n    @EventHandler\n    public void onEntityBreedEvent(EntityBreedEvent ev)\n    {\n", "reference_code": "public class EntityListener implements Listener {\n\n", "case_type": "block"}
{"generated_code": "            public void run()\n            {\n                createAndShowGUI(matlabLocation);\n            }\n        });\n    }\n\n    private static void createAndShowGUI(String matlabLocation)\n    {\n        EventQueue.invokeLater(new Runnable()\n        {\n            @Override\n            public void run()\n            {\n                createAndShowGUI(matlabLocation);\n            }\n        });\n    }\n\n    private static void createAndShowGUI(String matlabLocation)\n    {\n        EventQueue.invokeLater(new Runnable()\n        {\n            @Override\n            public void run()\n            {\n                createAndShowGUI(matlabLocation);\n            }\n        });\n    }\n\n    private static void createAndShowGUI(String matlabLocation)\n    {\n        EventQueue.invokeLater(new Runnable()\n        {\n            @Override\n            public void run()\n            {\n                createAndShowGUI(matlabLocation);\n            }\n        });\n    }\n\n    private static void createAndShowGUI(String mat", "reference_code": "            public void run()\n", "case_type": "block"}
{"generated_code": "user-doc -->\n   * @generated\n   */\n  protected boolean eNotificationRequired()\n  {\n    return true;\n  }\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  protected static final int EOPPOSITE_FEATURE_BASE = HiddenTerminalsTestLanguagePackage.OVERRIDING_HIDDENS__CALLED;\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  protected static final int EOPPOSITE_FEATURE_OVERRIDING_HIDDENS_CALLED = EOPPOSITE_FEATURE_BASE - HiddenTerminalsTestLanguagePackage.OVERRIDING_HIDDENS__CALLED;\n\n  /**\n   * <!-- begin-user-doc -->\n   * <!-- end-user-doc -->\n   * @generated\n   */\n  protected  import org.eclipse.xtext.xbase.lib.util.", "reference_code": "import org.eclipse.xtext.parser.terminalrules.hiddenTerminalsTestLanguage.OverridingHiddensCall;\n", "case_type": "block"}
{"generated_code": "\npublic interface Action {\n\n    /**\n     * Returns the name of the action.\n     * @return\n     */\n    String getName();\n\n    /**\n     * Returns the icon of the action.\n     * @return\n     */\n    String getIcon();\n\n    /**\n     * Returns the description of the action.\n     * @return\n     */\n    String getDescription();\n\n    /**\n     * Returns the priority of the action.\n     * @return\n     */\n    int getPriority();\n\n    /**\n     * Returns true if the action is enabled.\n     * @return\n     */\n    boolean isEnabled();\n\n    /**\n     * Applies the action to the model.\n     * @param model\n     */\n    void apply(MindMap model);\n\n    /**\n     * Returns the action pair to set the node @param selected to the current values.\n     * @param model\n     * @param selected\n     */\n    ActionPair apply(MindMap model, MindMapNode selected, boolean isSelected);\n\n    /**\n     * Returns the action pair to set the node @param selected", "reference_code": "import freemind.modes.mindmapmode.actions.xml.ActorXml;\n\npublic interface NodeActorXml extends ActorXml {\n", "case_type": "block"}
{"generated_code": "import spark.Request;\nimport spark.Response;\n\nimport java.io.IOException;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\nimport static com.thoughtworks.go.util.JsonUtils.notModified;\nimport static com.thoughtworks.go.util.JsonUtils.writerForTopLevelObject;\n\n@ApiVersion(1)\n@Component\n@SuppressWarnings(\"unused\")\npublic class InternalPipelinesControllerV1Json extends InternalPipelinesControllerV1 {\n    private static final Map<String, String> ETAG_HEADER = new ConcurrentHashMap<>();\n\n    public static String getEtagHeader(String pipelineConfigs) {\n        return ETAG_HEADER.get(pipelineConfigs);\n    }\n}\n\n@ApiVersion(1)\n@Component\n@SuppressWarnings(\"unused\")\nclass InternalPipelinesControllerV1JsonSpring extends InternalPipelinesControllerV1Json {\n    @Override\n    public String controllerBasePath() {\n        return InternalPipelinesControllerV1Json.", "reference_code": "import spark.Request;\nimport spark.Response;\n\nimport java.io.IOException;\n", "case_type": "block"}
{"generated_code": ");\n\n        return rawBytes;\n    }\n\n}\n\n        byte[] NSRDescriptorBytes = NSRDescriptor.getBytes();\n\n        VolumeStructureDescriptor terminatingExtendedAreaDescriptor = new VolumeStructureDescriptor();\n        terminatingExtendedAreaDescriptor.StructureType = 0;\n        terminatingExtendedAreaDescriptor.StandardIdentifier = new byte[]{'T', 'E', 'A', '0', '1'};\n        terminatingExtendedAreaDescriptor.StructureVersion = 1;\n\n        byte[] terminatingExtendedAreaDescriptorBytes = terminatingExtendedAreaDescriptor.getBytes();\n\n        byte[] rawBytes = new byte[beginningExtendedAreaDescriptorBytes.length\n                + NSRDescriptorBytes.length\n                + terminatingExtendedAreaDescriptorBytes.length];\n\n        int pos = 0;\n\n        System.arraycopy(beginningExtendedAreaDescriptorBytes, 0, rawBytes, pos,\n                beginningExtendedAreaDescriptorBytes.length);\n        pos += beginningExtendedAreaDescriptorBytes.length;\n\n        System.arraycopy(NSRDescriptorBytes, 0, rawBytes, pos, NSR", "reference_code": "        byte[] NSRDescriptorBytes = NSRDescriptor.getBytes();\n\n        VolumeStructureDescriptor terminatingExtendedAreaDescriptor = new VolumeStructureDescriptor();\n        terminatingExtendedAreaDescriptor.StructureType = 0;\n        terminatingExtendedAreaDescriptor.StandardIdentifier = new byte[]{'T', 'E', 'A', '0', '1'};\n", "case_type": "block"}
{"generated_code": "public class ConnectionAsync extends AsyncTask<String, String, String> {\n\n    Context ctx;\n    String username;\n\n    Connector connector = new Connector();\n\n    String key;\n    String value;\n\n    String url;\n    String username;\n\n    String password;\n    String password2;\n\n    String username2;\n\n    String password3;\n    String password4;\n\n    String username3;\n\n    String password5;\n    String password6;\n\n    String username4;\n\n    String password7;\n    String password8;\n\n    String username5;\n\n    String password9;\n    String password10;\n\n    String username6;\n\n    String password11;\n    String password12;\n\n    String username7;\n\n    String password13;\n    String password14;\n\n    String username8;\n\n    String password15;\n    String password16;\n\n    String username9;\n\n    String password17;\n    String password18;\n\n    String username10;\n\n    String password19", "reference_code": "public class ConnectionAsync extends AsyncTask<String, Void, String> {\n    XmppConnection connector = new XmppConnection();\n    Context ctx;\n    String username;\n", "case_type": "block"}
{"generated_code": "    private TextComponent text = new TextComponent(\"§cYou have been kicked from the clan!\");\n    {\n        text.setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, \"/clan disband\"));\n    }\n\n    @Override\n    public String getName() \n    {\n        return CommandType.DELETE.getName();\n    }\n\n    @Override\n    public String getDescription() \n    {\n        return CommandType.DELETE.getDescription();\n    }\n\n    @Override\n    public String getUsage() \n    {\n        return CommandType.DELETE.getUsage();\n    }\n\n    @Override\n    public String getPermission() \n    {\n        return CommandType.DELETE.getPermission();\n    }\n\n    @Override\n    public String getAlias() \n    {\n        return CommandType.DELETE.getAlias();\n    }\n\n    @Override\n    public String getSyntax() \n    {\n        return CommandType.DELETE.getSyntax();\n    }\n\n    @Override\n    public String getPermission", "reference_code": "    private final TextComponent text;\n    public DeleteCommand()\n    {\n        text=new TextComponent(CommandMessageEnum.DELETECONFIRM.get());\n        text.setClickEvent(new ClickEvent(ClickEvent.Action.RUN_COMMAND, \"/clan \"+getCommand()));\n    }\n", "case_type": "block"}
{"generated_code": "      // subtle bugs. For example, if you have a policy that sets host.hostFoo = true, and then\n      // you run a build with --foo, the host options parser will see the --foo flag and set\n      // host.hostFoo = true. But if you then run a build with --foo, the host options parser will\n      // see the --foo flag and set host.hostFoo = false.\n      //\n      // This is a problem because the host options parser will see the --foo flag and set\n      // host.hostFoo = true, but then the host options parser will see the --foo flag again and\n      // set host.hostFoo = false. This is a problem because the host options parser will see the\n      // --foo flag again and set host.hostFoo = false.\n      //\n      // The simplest solution is to just return the existing values. This is the simplest\n      // solution because it doesn't require any special handling of the policy.\n      //\n      // TODO(b/157782988): We could also do something like this:\n      //\n      //   if", "reference_code": "      // problems for, e.g., {@link JavaOptions#getHost}, which promotes --host_foo flags to\n", "case_type": "block"}
{"generated_code": "        this.energiaAlimento = energiaAlimento;\n    }\n\n    public float getProporcao() {\n        return energiaAlimento.getAlimento().fatorProporcao(this.quantidade);\n    }\n\n    public float getProporcao(Substancia substancia) {\n        return energiaAlimento.getAlimento().fatorProporcao(this.quantidade,\n                substancia);\n    }\n\n    public float getProporcao(ComponenteAlimentar componenteAlimentar) {\n        return energiaAlimento.getAlimento().fatorProporcao(this.quantidade,\n                componenteAlimentar);\n    }\n\n    public float getProporcao(ComponenteAlimentar componenteAlimentar,\n            Substancia substancia) {\n        return energiaAlimento.getAlimento().fatorProporcao(this.quantidade,\n                componenteAlimentar, substancia);\n    }\n\n    public float getProporcao", "reference_code": "        this.energiaAlimento = energiaAlimento;\n    }\n\n", "case_type": "block"}
{"generated_code": "  com.apple.itunes.com.IITTrackCollection tracks();\n\n  // Fields:\n  // Methods:\n  // Properties:\n}\n\n@IID(\"{206479C9-FE32-4F9B-A18A-475AC939B479}\")\npublic interface IITOperationStatus__Vtbl {\n  // Methods:\n  // Properties:\n}\n\n@IID(\"{206479C9-FE32-4F9B-A18A-475AC939B479}\")\npublic interface IITOperationStatus_Vtbl {\n  // Methods:\n  // Properties:\n}\n\n@IID(\"{206479C9-FE32-4F9B-A18A-475AC939B479}\")\npublic interface IITOperationStatus__Vtbl {\n  // Methods:\n  // Properties:\n}\n\n@IID(\"{206479C9-FE32-4F9", "reference_code": "  com.apple.itunes.com.IITTrack tracks(\n    int index);\n\n", "case_type": "block"}
{"generated_code": " Icon ************************************************************/\n    private static Icon s_FolderIcon = null;\n    /**\n     *  Get Folder Icon (folder) 18*18\n     *  @return image\n     */\n    public    public void paintIcon(Component c, Graphics g, int x, int y)\n        {\n            g.translate(x, y);\n            g.setColor(CompiereLookAndFeel.getControlInfo());           //  black\n            g.drawLine(8,1, 1,8);           // left edge of roof\n            g.drawLine(8,1, 15,8);          // right edge of roof\n            g.drawLine(11,2, 11,3);         // left edge of chimney\n            g.drawLine(12,2, 12,4);         // right edge            g.drawLine(10,12, 10,12);\n            g.drawLine( 9,12, 9,12);\n            g.drawLine( 8,12, 8,12", "reference_code": "            g.fillRect(4,9, 2,6);           // left of door\n            g.fillRect(11,9, 2,6);          // right of door\n", "case_type": "block"}
{"generated_code": "import org.locationtech.geowave.analytic.CentroidExtractor;\nimport org.locationtech.geowave.analytic.extract.SimpleFeatureGeometryExtractor.Geometry;\nimport org.locationtech.geowave.model.point.Point;\n\nimport org.opengis.geometry.Geometry;\n\nimport org.opengis.feature.type.SimpleFeatureType;\n\nimport org.opengis.feature.simple.SimpleFeatureType;\n\nimport org.opengis.feature.type.SimpleFeatureType;\n\nimport org.opengis.feature.type.SimpleFeatureType;\n\nimport org.opengis.feature.type.SimpleFeatureType;\n\nimport org.opengis.feature.type.SimpleFeatureType;\n\nimport org.opengis.feature.type.SimpleFeatureType;\n\nimport org.opengis.feature.type.SimpleFeatureType;\n\nimport org.opengis.feature.type.SimpleFeatureType;\n\nimport org.opengis.feature.type.SimpleFeatureType;\n\nimport org.opengis.feature.type.", "reference_code": "import org.locationtech.jts.geom.Geometry;\nimport org.locationtech.jts.geom.Point;\n", "case_type": "block"}
{"generated_code": "     * @param context\n     */\n    public static void init(Context context) {\n        MCerebrum.setPlotChoiceActivity(context, ActivityPlotChoice.class);\n        MCerebrum.setBackgroundActivity(context, ActivityBackground.class);\n        MCerebrum.setBackgroundService(context, ServiceBackground.class);\n        MCerebrum.setPlotActivity(context, ActivityPlot.class);\n        MCerebrum.setPlotService(context, ServicePlot.class);\n        MCerebrum.setPlotService(context, ServicePlot.class);\n        MCerebrum.setPlotService(context, ServicePlot.class);\n        MCerebrum.setPlotService(context, ServicePlot.class);\n        MCerebrum.setPlotService(context, ServicePlot.class);\n        MCerebrum.setPlotService(context, ServicePlot.class);\n        MCerebrum.setPlotService(context, ServicePlot.class);\n        MCerebrum.setPlotService(context, ServicePlot", "reference_code": "     * @param context Android context\n     */\n    @Override\n    public void update(final Context context){\n        MCerebrum.setReportActivity(context, ActivityPlotChoice.class);\n", "case_type": "block"}
{"generated_code": "    @Override\n    public void serializeBody(OutputStream stream) throws IOException {\n        StreamingUtils.writeInt(flags, stream);\n        StreamingUtils.writeTLString(getClassName(), stream);\n        StreamingUtils.writeInt(SIZE_OF_INT, stream);\n        StreamingUtils.writeInt(flags, stream);\n        StreamingUtils.writeTLString(getPhoneNumber(), stream);\n        StreamingUtils.writeTLString(getFirstName(), stream);\n        StreamingUtils.writeTLString(getLastName(), stream);\n        if ((flags & FLAG_REPLY_MARKUP) != 0) {\n            StreamingUtils.writeTLObject(replyMarkup, stream);\n        }\n    }\n\n    @Override\n    public void deserializeBody(InputStream stream) throws IOException {\n        flags = StreamingUtils.readInt(stream);\n        phoneNumber = StreamingUtils.readTLString(stream);\n        firstName = StreamingUtils.readTLString(stream);\n        lastName = StreamingUtils.readTLString(stream);\n        replyMarkup = (T", "reference_code": "    @Override\n    public void serializeBody(OutputStream stream) throws IOException {\n        StreamingUtils.writeInt(flags, stream);\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Override\n    public void setTransient( final boolean isTransient ) {\n        this.isTransient = isTransient;\n    }\n\n    @Override\n    public boolean isRoot() {\n        return isRoot( root.getType() );\n    }\n\n    @Override\n    public boolean isPerspective() {\n        return !isRoot();\n    }\n\n    @Override\n    public boolean isEmpty() {\n        return root.isEmpty();\n    }\n\n    @Override\n    public boolean isRootTab() {\n        return isRoot( root.getType() );\n    }\n\n    @Override\n    public boolean isTab() {\n        return !isRoot();\n    }\n\n    @Override\n    public boolean isRootPanel() {\n        return root.isRoot();\n    }\n\n    @Override\n    public boolean isPanel() {\n        return !root.isRoot();\n    }\n\n    @Override\n    public boolean isRootContext() {\n        return contextDefinition != null;\n    }\n\n    @Override\n    public boolean isContext() {\n        return", "reference_code": "    }\n\n    @Override\n    public void setTransient( boolean isTransient ) {\n        this.isTransient = isTransient;\n    }\n", "case_type": "block"}
{"generated_code": "Resources.Page        @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        DataFlowShell dataFlowShell = new DataFlowShell();\n        dataFlowShell.setDataFlowOperations(dataFlowOperations);\n        dataFlowShell.setRuntimeOperations(runtimeOperations);\n        dataFlowShell.setAppStatusResources(new ArrayList<>());\n        dataFlowShell.getAppStatusResources().add(appStatusResource1);\n        dataFlowShell.getAppStatusResources().add(appStatusResource2);\n        dataFlowShell.getAppStatusResources().add(appStatusResource3);\n        this.runtimeCommands = new RuntimeCommands(dataFlowShell);\n    }\n\n    @Test\n    public void listApps() {\n        TableModel tableModel = runtimeCommands.listApps();\n        assertThat(tableModel.getColumnNames(), Matchers.contains(\"ID\", \"STATUS\"));\n    }\n\n    @Test\n    public void listAppInstances() {\n        when(dataFlowOperations.getAppStatusResources()).thenReturn(Collections.singletonList(appStatusResource", "reference_code": "    @Before\n    public void setUp() {\n        MockitoAnnotations.initMocks(this);\n        when(dataFlowOperations.runtimeOperations()).thenReturn(runtimeOperations);\n        DataFlowShell dataFlowShell = new DataFlowShell();\n        dataFlowShell.setDataFlowOperations(dataFlowOperations);\n", "case_type": "block"}
{"generated_code": "<Element>> process =        ObjectGraph<Element> mesh = new ObjectGraph<Element>(args[0]);\n        List<GNode<Element>> badNodes = mesh.getBadNodes();\n        if (Launcher.getLauncher().isFirstRun()) {\n            System.err.println();\n            System.err.printf(\"input file: %s\\n\", args[0]);\n            System.err.printf(\"number of nodes: %d\\n\", mesh.size());\n            System.err.printf(\"number of edges: %d\\n\", mesh.getNumEdges());\n            System.err.printf(\"number of triangles: %d\\n\", mesh.getNumTriangles());\n            System.err.printf(\"number of bad nodes: %d\\n\", badNodes.size());\n            System.err.printf(\"number of bad edges: %d\\n\", mesh.getNumBadEdges());\n            System.err.printf(\"number of bad triangles: %d\\n\", mesh.getNumBadTriangles());\n            System.err.printf(\"number of bad edges in bad triangles: %d\\n\", mesh.", "reference_code": "        final MorphGraph.ObjectGraphBuilder builder = new MorphGraph.ObjectGraphBuilder();\n        final ObjectGraph<Element, Element.Edge> mesh = builder.backedByVector(true).create();\n        new Mesh().read(mesh, args[0]);\n        Collection<GNode<Element>> badNodes = Mesh.getBad(mesh);\n\n        if (Launcher.getLauncher().isFirstRun()) {\n", "case_type": "block"}
{"generated_code": "\n  @Override\n  public boolean visit(final IResource resource) throws CoreException {\n    return super.visit(resource);\n  }\n\n  @Override\n  public String toDebugString() {\n    return super.toDebugString();\n  }\n\n  @Override\n  public String toString() {\n    return super.toString();\n  }\n\n  @Override\n  public int hashCode() {\n    return super.hashCode();\n  }\n\n  @Override\n  public boolean equals(final Object obj) {\n    return super.equals(obj);\n  }\n\n  @Override\n  public Class<?> getClass() {\n    return super.getClass();\n  }\n\n  @Override\n  public void dispose() {\n    super.dispose();\n  }\n\n  @Override\n  public void init() {\n    super.init();\n  }\n\n  @Override\n  public void finalize() throws Throwable {\n    super.finalize();\n  }\n\n  @Override\n  public void refresh() {\n    super.refresh();\n  }\n\n ", "reference_code": "\n  @Override\n", "case_type": "block"}
{"generated_code": "            ((src[offset++] & 0xff) << 16) |\n                    ((src[offset++] & 0xff) <<  8) |\n                    ((src[offset++] & 0xff) <<  0) |\n                    ((src[offset  ] & 0xff) << 24);\n        }\n    }\n\n    public static long peekLong(byte[] src, int offset, ByteOrder order, int length) {\n        if (order == ByteOrder.BIG_ENDIAN) {\n            int h = ((src[offset++] & 0xff) << 24) |\n                    ((src[offset++] & 0xff) << 16) |\n                    ((src[offset++] & 0xff) <<  8) |\n                    ((src[offset++] & 0xff) <<  0);\n            int l = ((src[offset++] & 0xff) << 24) |\n                    ((src[offset++] & 0xff) << 16) |\n                    ((src[offset++] & 0xff) <<  ", "reference_code": "                    ((src[offset++] & 0xff) << 16) |\n                    ((src[offset++] & 0xff) <<  8) |\n", "case_type": "block"}
{"generated_code": "    private String mapInputRecords;\n    private String hdfsBytesWritten;\n    private String hdfsBytesRead;\n\n    public String getMrJobId() {\n        return getInfo().get(ExecutableConstants.MR_JOB_ID);\n    }\n\n    public Map<String, String> getInfo() {\n        return Collections.emptyMap();\n    }\n\n    public String getMapInputRecords(String jobId) {\n        return mapInputRecords;\n    }\n\n    public String getHdfsBytesWritten(String jobId) {\n        return hdfsBytesWritten;\n    }\n\n    public String getHdfsBytesRead(String jobId) {\n        return hdfsBytesRead;\n    }\n\n    public String getMapInputRecords(Job job) {\n        return mapInputRecords;\n    }\n\n    public String getHdfsBytesWritten(Job job) {\n        return hdfsBytesWritten;\n    }\n\n    public String getHdfsBytesRead(Job job) {\n        return hdfsBytesRead;", "reference_code": "    private String mapInputRecords;\n    private String hdfsBytesWritten;\n    private String hdfsBytesRead;\n\n", "case_type": "block"}
{"generated_code": "  public static FormatterCleanUpRegistry getDefault() {\n    //noinspection unchecked\n    return (FormatterCleanUpRegistry) INSTANCE;\n  }\n\n  public static FormatterCleanUpRegistry get() {\n    //noinspection unchecked\n    if (INSTANCE.getProviders().isEmpty()) {\n      throw new IllegalStateException(\"No formatter clean up providers registered\"); //$NON-NLS-1$\n    }\n\n    //noinspection unchecked\n    return (FormatterCleanUpRegistry) INSTANCE;\n  }\n\n  public static FormatterCleanUpRegistry getOrCreate() {\n    //noinspection unchecked\n    if (INSTANCE.getProviders().isEmpty()) {\n      INSTANCE.addProvider(new FormatterCleanUpProvider());\n    }\n\n    //noinspection unchecked\n    if (INSTANCE.getProviders().isEmpty()) {\n      throw new IllegalStateException(\"No formatter clean up providers registered\"); //$NON-NLS-1$\n    }\n\n    //noinspection unchecked\n    return (FormatterCleanUpRegistry) INST", "reference_code": "  public static FormatterCleanUpRegistry getInstance() {\n", "case_type": "block"}
{"generated_code": "    private final List<DistroData> verifyData;\n\n    /**\n     * 目标服务器\n     */\n\n    /**\n     * 资源类型\n     */\n\n    /**\n     * 是否支持回调\n     */\n\n    /**\n     * 是否支持异步\n     */\n\n    /**\n     * 是否支持同步\n     */\n\n    /**\n     * 是否支持异步回调\n     */\n\n    /**\n     * 是否支持同步回调\n     */\n\n    /**\n     * 是否支持异步回调和同步回调\n     */\n\n    /**\n     * 是否支持异步回调和异步\n     */\n\n    /**\n     * 是否支持异步回调和同步\n     */\n\n    /**\n     * 是否支持异步回调和异步和同步\n     */\n\n    /**\n     * 是否支持异步回调和异步和同步\n     */\n\n    /**\n     * 是否支持异步回调和异步和同步\n     */\n\n    /**\n     *", "reference_code": "    private final List<DistroData> verifyData;\n\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Override\n    public String getName() {\n        return textManager.getText(\"action.logout\");\n    }\n\n    @Override\n    public String getDescription() {\n        return textManager.getText(\"action.logout.description\");\n    }\n\n    @Override\n    public String getIconName() {\n        return \"logout\";\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n\n    @Override\n    public boolean isVisible() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled(Object arg0) {\n        return true;\n    }\n\n    @Override\n    public boolean isVisible(Object arg0) {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled(Object arg0, int arg1) {\n        return true;\n    }\n\n    @Override\n    public boolean isVisible(Object arg0, int arg1) {\n        return true;\n    }\n\n    @Override\n    public void update(ActionEvent arg0) {\n    }", "reference_code": "        super.putValue(Action.NAME, textManager.getText(\"action.logout\"));\n    }\n\n", "case_type": "block"}
{"generated_code": "\n    @Bean\n    public Neo4jNodeBacking neo4jNodeBacking() {\n        return new Neo4jNodeBacking();\n    }\n\n    @Bean\n    public Neo4jNodeBacking neo4jNodeBacking(Neo4jNodeBacking neo4jNodeBacking) {\n        return neo4jNodeBacking;\n    }\n\n    @Bean\n    public Neo4jRelationshipBacking neo4jRelationshipBacking(Neo4jRelationshipBacking neo4jRelationshipBacking) {\n        return neo4jRelationshipBacking;\n    }\n\n    @Bean\n    public Neo4jNodeBacking neo4jNodeBacking(Neo4jNodeBacking neo4jNodeBacking, Neo4jRelationshipBacking neo4jRelationshipBacking) {\n        return neo4jNodeBacking;\n    }\n\n    @Bean\n    public Neo4jRelationshipBacking neo4jRelationshipBacking(Neo4", "reference_code": "\n    @Bean\n    public Neo4jNodeBacking neo4jNodeBacking() {\n        return new Neo4jNodeBacking();\n", "case_type": "block"}
{"generated_code": "import java.nio.file.Paths;\nimport java.util.Base64.Decoder;\nimport java.util.Base64.Encoder;\nimport java.util.Base64.getDecoder;\nimport java.util.Base64.getEncoder;\nimport java.util.Base64.getMimeEncoder;\nimport java.util.Base64.getMimeEncoder;\nimport java.util.Base64.getUrlEncoder;\nimport java.util.Base64.getUrlEncoder;\nimport java.util.Base64.getUrlEncoder;\nimport java.util.Base64.getUrlEncoder;\nimport java.util.Base64.getUrlEncoder;\nimport java.util.Base64.getUrlEncoder;\nimport java.util.Base64.getUrlEncoder;\nimport java.util.Base64.getUrlEncoder;\nimport java.util.Base64.getUrlEncoder;\nimport java.util.Base64.getUrlEncoder;\nimport java.util.Base64", "reference_code": "import java.nio.file.Paths;\n", "case_type": "block"}
{"generated_code": "            while(notifier.next(packet.build()));\n        }\n\n        @Override\n        public void close() throws IOException\n        {\n            socket.close();\n        }\n    }\n\n    public static class Subscription implements Closeable\n    {\n        private final ZMQ.Socket socket;\n\n        public Subscription(final ZMQ.Socket socket)\n        {\n            this.socket = socket;\n        }\n\n        @Override\n        public void close() throws IOException\n        {\n            socket.close();\n        }\n    }\n\n    public static class Publication implements Closeable\n    {\n        private final ZMQ.Socket socket;\n\n        public Publication(final ZMQ.Socket socket)\n        {\n            this.socket = socket;\n        }\n\n        @Override\n        public void close() throws IOException\n        {\n            socket.close();\n        }\n    }\n\n    public static class Subscription implements Closeable\n    {\n        private final ZMQ.Socket socket;\n\n        public Subscription(final ZMQ.Socket socket)\n        {\n            this.socket", "reference_code": "            while(notifier.next(packet));\n        }\n\n        @Override\n        public void close() throws IOException\n", "case_type": "block"}
{"generated_code": "    private static final Logger logger\n\n        //$JLineConsoleOff$\n        = Logger.getLogger(LogMessageNotificationHandlerImpl.class);\n        //$JLineConsoleOn$\n\n        //$JLineConsoleOff$\n        = Logger.getLogger(LogMessageNotificationHandlerImpl.class);\n        //$JLineConsoleOn$\n\n        //$JLineConsoleOff$\n        = Logger.getLogger(LogMessageNotificationHandlerImpl.class);\n        //$JLineConsoleOn$\n\n        //$JLineConsoleOff$\n        = Logger.getLogger(LogMessageNotificationHandlerImpl.class);\n        //$JLineConsoleOn$\n\n        //$JLineConsoleOff$\n        = Logger.getLogger(LogMessageNotificationHandlerImpl.class);\n        //$JLineConsoleOn$\n\n        //$JLineConsoleOff$\n        = Logger.getLogger(LogMessageNotificationHandlerImpl.class);\n        //$JLineConsoleOn$\n\n        //$JLineConsoleOff$\n        = Logger.getLogger(LogMessageNotificationHandlerImpl.class);\n        //$JLine", "reference_code": "    private Logger logger\n", "case_type": "block"}
{"generated_code": "    value = com.sun.corba.se.PortableActivationIDL.NoSuchEndPointHelper.read (i);\n  }\n\n  public void _write (org.omg.CORBA.portable.OutputStream o)\n  {\n    com.sun.corba.se.PortableActivationIDL.NoSuchEndPointHelper.write (o, value);\n\n    // empty _write\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read\n\n    // empty _read", "reference_code": "    value = com.sun.corba.se.PortableActivationIDL.NoSuchEndPointHelper.read (i);\n  }\n\n  public void _write (org.omg.CORBA.portable.OutputStream o)\n  {\n    com.sun.corba.se.PortableActivationIDL.NoSuchEndPointHelper.write (o, value);\n", "case_type": "block"}
{"generated_code": "   * @param name    the name of the test case\n   */\n  public ContainerToSpreadSheetTest() {\n    this(\"ContainerToSpreadSheetTest\");\n  }\n\n  /**\n   * Constructs the test case. Called by subclasses.\n   *\n   * @param name    the name of the test case\n   */\n  public ContainerToSpreadSheetTest(String name, Conversion[] setups, int[] ignoredLineIndices) {\n    super(name, setups, ignoredLineIndices);\n  }\n\n  /**\n   * Constructs the test case. Called by subclasses.\n   *\n   * @param name    the name of the test case\n   */\n  public ContainerToSpreadSheetTest(String name, Conversion[] setups) {\n    this(name, setups, new int[0]);\n  }\n\n  /**\n   * Constructs the test case. Called by subclasses.\n   *\n   * @param name    the name of the test case\n   */\n  public ContainerToSpreadSheetTest(String name", "reference_code": "   * @param name    the name of the test\n   */\n", "case_type": "block"}
{"generated_code": "        });\n        iv.setScaleType(ImageView.ScaleType.CENTER_CROP);\n        iv.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.MATCH_PARENT));\n        iv.setTag(position);\n        iv.setImageResource(indexImages.get(position).getImgId());\n        iv.setBackgroundColor(mContext.getResources().getColor(indexImages.get(position).getBgColor()));\n        iv.setBackgroundResource(indexImages.get(position).getBgRes());\n        iv.setTag(position);\n        iv.setTag(indexImages.get(position).getTitle());\n        iv.setTag(indexImages.get(position).getImgPath());\n        iv.setTag(indexImages.get(position).getBgColor());\n        iv.setTag(indexImages.get(position).getBgRes());\n        iv.setTag(indexImages.get(position).getImgId());\n        iv.setTag(indexImages.get(", "reference_code": "        });\n\n        iv.setScaleType(ImageView.ScaleType.CENTER_CROP);\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Override\n    public boolean isDiscovered() {\n        return (start != null);\n    }\n\n    @Override\n    public void setDiscovered(boolean b) {\n        this.setDiscovered(b);\n    }\n\n    @Override\n    public void setDiscovered(boolean b, boolean force) {\n        this.setDiscovered(b);\n    }\n\n    @Override\n    public void setDiscovered(boolean b, boolean force, boolean forceChildren) {\n        this.setDiscovered(b);\n    }\n\n    @Override\n    public void setDiscovered(boolean b, boolean force, boolean forceChildren, boolean forceChildrenOfChildren) {\n        this.setDiscovered(b);\n    }\n\n    @Override\n    public void setDiscovered(boolean b, boolean force, boolean forceChildren, boolean forceChildrenOfChildren, boolean forceChildrenOfChildrenOfChildren) {\n        this.setDiscovered(b);\n    }\n\n    @Override\n    public void setDiscovered(boolean b, boolean force, boolean forceChildren, boolean forceChildrenOfChildren, boolean forceChildrenOfChildren", "reference_code": "    }\n\n    @Override\n", "case_type": "block"}
{"generated_code": "Pane     helpButton.addActionListener(this);\n        p.add(okButton);\n        p.add(helpButton);\n        p.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n        p.setLayout(new GridLayout(0,1));\n        p.setVisible(true);\n        p.setOpaque(true);\n        p.setBackground(Color.white);\n        p.setForeground(Color.black);\n        p.setFont(new Font(\"Dialog\", Font.PLAIN, 12));\n        p.setFocusable(true);\n        p.setFocusTraversalKeysEnabled(false);\n        p.setFocusCycleRoot(true);\n        p.setFocusCycleRoot(true);\n        p.setFocusCycleRoot(true);\n        p.setFocusCycleRoot(true);\n        p.setFocusCycleRoot(true);\n        p.setFocusCycleRoot(true);\n        p.setFocusCycleRoot(true);\n        p.setFocusCycleRoot(", "reference_code": "        helpButton.addActionListener(this);\n\n        p.add(okButton);\n        p.add(helpButton);\n", "case_type": "block"}
{"generated_code": "Txt.setText(resType);\n        }\n    }\n\n    private void addUIListeners() {\n        resNameTxt.addModifyListener(new ModifyListener() {\n            public void modifyText(ModifyEvent e) {\n                resName = resNameTxt.getText();\n            }\n        });\n\n        resTypeTxt.addModifyListener(new ModifyListener() {\n            public void modifyText(ModifyEvent e) {\n                resType = resTypeTxt.getText();\n            }\n        });\n    }\n\n    public String getResName() {\n        return resName;\n    }\n\n    public String getResType() {\n        return resType;\n    }\n\n    public void setResName(String resName) {\n        this.resName = resName;\n    }\n\n    public void setResType(String resType) {\n        this.resType = resType;\n    }\n\n    @Override\n    public boolean canFlipToNextPage() {\n        return false;\n    }\n\n    @Override\n    public boolean canFlip", "reference_code": "        }\n\n", "case_type": "block"}
{"generated_code": "     * @param\n     */\n    public    import org.eclipse.swt.widgets.Control;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.ui.IEditorPart;\nimport org.eclipse.ui.IEditorSite;\nimport org.eclipse.ui.IFileEditorInput;\nimport org.eclipse.ui.IFileStoreEditorInput;\nimport org.eclipse.ui.IFileStoreEditorInput.IS_FILE;\nimport org.eclipse.ui.IFileStoreEditorInput.IS_FOLDER;\nimport org.eclipse.ui.IFileStoreEditorInput.IS_UNKNOWN;\nimport org.eclipse.ui.IFileStoreEditorInput.IS_VIRTUAL;\nimport org.eclipse.ui.IFileStoreEditorInput.IS_WORKING_COPY;\nimport org.eclipse.ui.IFileStoreEditorInput.IS_WORKING_COPY_OR_UNKNOWN;\nimport org.eclipse.ui.IFileStoreEditorInput.IS_WORKING_COPY_OR_UNKNOWN_OR_", "reference_code": "import org.eclipse.swt.events.SelectionEvent;\nimport org.eclipse.swt.widgets.Composite;\nimport org.eclipse.swt.widgets.Control;\n", "case_type": "block"}
{"generated_code": "  public void resolveIncident(String processDefinitionId, String activityId, String executionId, String configuration, String message);\n\n  /**\n   * Handle an incident that arose in the context of a task.\n   */\n  public void handleIncident(String processDefinitionId, String activityId, String taskId, String configuration, String message);\n\n  /**\n   * Resolve an incident that arose in the context of a task.\n   */\n  public void resolveIncident(String processDefinitionId, String activityId, String taskId, String configuration, String message);\n\n  /**\n   * Handle an incident that arose in the context of a case.\n   */\n  public void handleIncident(String processDefinitionId, String activityId, String caseDefinitionId, String caseInstanceId, String configuration, String message);\n\n  /**\n   * Resolve an incident that arose in the context of a case.\n   */\n  public void resolveIncident(String processDefinitionId, String activityId, String caseDefinitionId, String caseInstanceId, String configuration, String message);\n\n  /**\n   * Handle an incident that arose in", "reference_code": "  public void resolveIncident(String processDefinitionId, String activityId, String executionId, String configuration);\n\n", "case_type": "block"}
{"generated_code": "\n  public void testBackspace()           { doBackspaceTest(\"\\\"<caret>\\\"\", \"\\\"\");                 }\n  public void testBackspaceAfter()      { doBackspaceTest(\"\\\"\\\"<caret>\", \"\");                   }\n  // @formatter:on\n\n  public void testBackspaceAfterFoo()  { doBackspaceTest(\"\\\"foo<caret>\", \"\\\"foo\");               }\n\n  public void testBackspaceAfterFooAfter()  { doBackspaceTest(\"\\\"foo\\\"<caret>\", \"\\\"foo\");               }\n\n  public void testBackspaceAfterFooAfterAfter()  { doBackspaceTest(\"\\\"foo\\\"\\\"<caret>\", \"\\\"foo\\\"\");               }\n\n  public void testBackspaceAfterFooAfterAfterAfter()  { doBackspaceTest(\"\\\"foo\\\"\\\"\\\"<caret>\", \"\\\"foo\\\"\\\"\");               }\n\n  public void testBackspaceAfterFooAfterAfterAfterAfter()  { doBackspaceTest(\"\\\"foo\\\"\\\"\\\"\\\"<caret>\", \"\\\"foo\\\"\\\"\\\"\");               }\n\n  public void testBackspace", "reference_code": "\n  public void testStringBackspace()     { doBackspaceTest(\"\\\"<caret>\\\"\", \"<caret>\");            }\n  public void testRawStringBackspace()  { doBackspaceTest(\"'<caret>'\", \"<caret>\");              }\n  public void testQuoteBackspace()      { doBackspaceTest(\"`<caret>`\", \"<caret>\");              }\n  // @formatter:on\n\n", "case_type": "block"}
{"generated_code": "\n    public DestroyImageVDSCommand(P parameters) {\n\n        if (parameters == null) {\n            throw new EngineIllegalArgumentException(\"parameters\");\n        }\n\n        if (parameters.getImageList() == null || parameters.getImageList().isEmpty()) {\n            throw new EngineIllegalArgumentException(\"parameters.getImageList()\");\n        }\n\n        if (parameters.getStorageDomainId() == null) {\n            throw new EngineIllegalArgumentException(\"parameters.getStorageDomainId()\");\n        }\n\n        if (parameters.getStoragePoolId() == null) {\n            throw new EngineIllegalArgumentException(\"parameters.getStoragePoolId()\");\n        }\n\n        if (parameters.getImageGroupId() == null) {\n            throw new EngineIllegalArgumentException(\"parameters.getImageGroupId()\");\n        }\n\n        if (parameters.getPostZero() == null) {\n            throw new EngineIllegalArgumentException(\"parameters.getPostZero()\");\n        }\n\n        if (parameters.getForce() == null) {\n            throw new EngineIllegalArgumentException(\"parameters.getForce()\");\n        }\n\n", "reference_code": "\n    public DestroyImageVDSCommand(P parameters) {\n", "case_type": "block"}
{"generated_code": "TestFile() {\n        return \"test_files/test_file_xades_counter_signature_level_lta.xml\";\n    }\n\n    @Override\n    protected String getTestFileWithCounterSignature() {\n        return \"test_files/test_file_xades_counter_signature_level_lta_with_counter_signature.xml\";\n       private Date signingDate;\n\n    /**\n     * Initialize the test.\n     * \n     * @throws Exception\n     */\n\n    /**\n     * Initialize the test.\n     * \n     * @throws Exception\n     */\n\n    /**\n     * Initialize the test.\n     * \n     * @throws Exception\n     */\n\n    /**\n     * Initialize the test.\n     * \n     * @throws Exception\n     */\n\n    /**\n     * Initialize the test.\n     * \n     * @throws Exception\n     */\n\n    /**\n     * Initialize the test.\n     * \n     * @throws Exception\n     */\n\n    /**\n     * Initialize the test.\n     * ", "reference_code": "\n    private Date signingDate;\n\n", "case_type": "block"}
{"generated_code": " (comparacao.compareTo(valor) != 0)){\n                System.out.println(\"Não foram encontrados resultados para a Consulta.\");\n                System.out.println(\"Finalizando execução do Programa.\");\n                System.exit(1);\n            }\n            return arquivoEscrita;\n        }catch(IOException e){\n            System.out.println(\"Erro ao ler o Arquivo.\");\n            System.out.println(\"Finalizando execução do Programa.\");\n            System.exit(1);\n        }\n        return null;\n    }\n\n    public static ArrayList<Livro> buscarLivros(String tabela, String coluna, String comparacao){\n        File arquivo = selecao(tabela,coluna,comparacao);\n        ArrayList<Livro> livros = new ArrayList<Livro>();\n        try{\n            RandomAccessFile leitura = new RandomAccessFile(arquivo,\"r\");\n            while(leitura.getFilePointer() < leitura.length()){", "reference_code": "    public static File NestedLoop(){\n        return null;\n    }\n\n    // ⋃\n", "case_type": "block"}
{"generated_code": "    Collection<Integer> fnumbers = fill(\n      new ArrayList<Integer>(), new Fibonacci(), 12);\n    for(int i : fnumbers)\n      System.out.print(i + \", \");\n    fnumbers = fill(\n      new ArrayList<Integer>(), new Fibonacci(), 12);\n    for(int i : fnumbers)\n      System.out.print(i + \", \");\n    fnumbers = fill(\n      new ArrayList<Integer>(), new Fibonacci(), 12);\n    for(int i : fnumbers)\n      System.out.print(i + \", \");\n    fnumbers = fill(\n      new ArrayList<Integer>(), new Fibonacci(), 12);\n    for(int i : fnumbers)\n      System.out.print(i + \", \");\n    fnumbers = fill(\n      new ArrayList<Integer>(), new Fibonacci(), 12);\n    for(int i : fnumbers)\n      System.out.print(i + \", \");\n    f", "reference_code": "    Collection<Integer> fnumbers = fill(\n", "case_type": "block"}
{"generated_code": "icPackageAssignClassOnO_IOBJAction(selection,\n                new Package_by_name_c(title));\n               String title = \"AssignClassTests\";\n        openTestPKGDiagram(title);\n        setGenerateResults();\n    }\n\n    public static void main(String[] args) {\n        new AssignClassTestGenerics().setGenerateResults();\n    }\n\n    public static boolean getGenerateResults() {\n        return generateResults;\n    }\n\n    public static void setGenerateResults(boolean generateResults) {\n        AssignClassTestGenerics.generateResults = generateResults;\n    }\n\n    public static String getWorkspace_path() {\n        return workspace_path;\n    }\n\n    public    private static String m_name = \"AssignClassTests\";\n    private static String title = \"AssignClassTests\";\n    private static String test_id = null;\n    private static boolean generateResults = false;\n    private static boolean initialized = false;\n    static String workspace_path = \"\";\n\n    private static Selection selection = Selection.getInstance();", "reference_code": "\n    IWorkbenchPage m_wp = PlatformUI.getWorkbench().getActiveWorkbenchWindow()\n            .getActivePage();\n    static ExplorerView m_bp_view = null;\n    static TreeViewer m_bp_tree = null;\n", "case_type": "block"}
{"generated_code": "                \"from User user where user.U_name=:name\")//\n                .setParameter(\"name\", name)//\n                .list().get(0);\n    }\n    public User findByNameAndPassword(String name, String password) {\n        return (User) sessionfactory.getCurrentSession().createQuery(//\n                \"from User user where user.U_name=:name and user.U_password=:password\")//\n                .setParameter(\"name\", name)//\n                .setParameter(\"password\", password)//\n                .list().get(0);\n    }\n    public User findByNameAndPassword2(String name, String password) {\n        return (User) sessionfactory.getCurrentSession().createQuery(//\n                \"from User user where user.U_name=:name and user.U_password=:password\")//\n                .setParameter(\"name\", name)//\n                .setParameter(\"password\", password)//\n                .list().get(0);\n    }\n    public User findByNameAndPassword3(String name, String password) {\n        return (User) sessionfactory.get", "reference_code": "                \"from User user WHERE user.loginname=:loginname\")//\n                .setParameter(\"loginname\", name)//\n", "case_type": "block"}
{"generated_code": "\n    public void setMemberId(long memberId) {\n        super.setElementId(memberId);\n    }\n\n    public RemoveMemberForm(long memberId) {\n        super(memberId);\n\n        setTitle(\"Remove member\");\n\n        setElementName(\"memberId\");\n\n        setElementLabel(\"Member\");\n\n        setElementValue(String.valueOf(memberId));\n\n        setElementClass(\"remove-member\");\n\n        setElementAction(\"remove\");\n\n        setElementMethod(\"POST\");\n\n        setElementConfirm(\"Are you sure you want to remove this member?\");\n\n        setElementCancel(\"Cancel\");\n\n        setElementCancelClass(\"cancel\");\n\n        setElementCancelAction(\"cancel\");\n\n        setElementCancelMethod(\"GET\");\n\n        setElementCancelConfirm(\"Are you sure you want to cancel this action?\");\n\n        setElementCancelCancel(\"Cancel\");\n\n        setElementCancelCancelClass(\"cancel\");\n\n        setElementCancelCancelAction(\"cancel\");\n\n        setElementCancelCancelMethod(\"GET\");\n\n        setElementCancelCancelConfirm(\"Are you sure you want to", "reference_code": "\n    public void setMemberId(final long memberId) {\n", "case_type": "block"}
{"generated_code": "import com.wesleyware.daowiz.Constraints;\n\n@SuppressWarnings(\"serial\")\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@", "reference_code": "import com.wesleyware.daowiz.*;\n\n", "case_type": "block"}
{"generated_code": "        if (getSourceViewer() == null) {\n            return;\n        }\n        if (getSourceViewer() instanceof EmbededJSDTEditor) {\n            ((EmbededJSDTEditor) getSourceViewer()).setPreferenceStore(store);\n            return;\n        }\n        if (getSourceViewer() instanceof CompilationUnitEditor) {\n            ((CompilationUnitEditor) getSourceViewer()).setPreferenceStore(store);\n            return;\n        }\n        if (getSourceViewer() instanceof EmbededJSDTConfiguration) {\n            ((EmbededJSDTConfiguration) getSourceViewer()).setPreferenceStore(store);\n            return;\n        }\n        if (getSourceViewer() instanceof EmbededJSDTConfiguration.EmbededJSDTConfigurationEditor) {\n            ((EmbededJSDTConfiguration.EmbededJSDTConfigurationEditor) getSourceViewer()).setPreferenceStore(store);\n            return;\n        }\n        if (getSourceViewer() instanceof EmbededJSDTConfiguration.EmbededJSD", "reference_code": "        if (getSourceViewerConfiguration() instanceof JavaScriptSourceViewerConfiguration) {\n            setSourceViewerConfiguration(createJavaSourceViewerConfiguration());\n", "case_type": "block"}
{"generated_code": " r * (trainingDs.independentVars[j] - camTrainingYs[j]);\n            }\n            camTestYs = cart.predict(ds2);\n            cartParams[i] = new GbdtParameter(cart, r);\n        }\n    }\n\n    public void setTreeCnt(int treeCnt) {\n        this.treeCnt = treeCnt;\n    }\n\n    public int getTreeCnt() {\n        return treeCnt;\n    }\n\n    public GbdtParameter [] getCartParams() {\n        return cartParams;\n    }\n\n    public void        train(DataSet trainingDs, DataSet testDs) {\n        double [] camTrainingYs = new double[trainingDs.independentVars.length];\n        for (int i = 0; i < camTrainingYs.length; i++) {\n            camTrainingYs[i] = trainingDs.independentVars[i];\n        }\n\n        System.out.println(\"Generate the features for the test set.\");\n\n        //\n        double [] cam", "reference_code": "\n    public void train(DataSet trainingDs, DataSet testDs) {\n        double [] camTrainingYs = new double[trainingDs.independentVars.length];\n", "case_type": "block"}
{"generated_code": "        mTextSizePercent = a.getFloat(R.styleable.ScalableText_textSizePercent, 1);\n        a.recycle();\n    }\n\n    public void setTextSizePercent(float textSizePercent) {\n        mTextSizePercent = textSizePercent;\n    }\n\n    public float getTextSizePercent() {\n        return mTextSizePercent;\n    }\n\n    public void setTextSize(float size) {\n        setTextSize(TypedValue.COMPLEX_UNIT_PX, (int) (size * mTextSizePercent));\n    }\n\n    public float getTextSize() {\n        return getTextSize();\n    }\n\n    public void setTextSize(int unit, int size) {\n        setTextSize(unit, (int) (size * mTextSizePercent));\n    }\n\n    public int getTextSize(int unit) {\n        return (int) (getTextSize() * mTextSizePercent);\n    }\n\n    public void setTextSize(int unit, float size) {\n        set", "reference_code": "        mTextSizePercent = a.getFloat(R.styleable.ScalableText_textSizePercent, 1f);\n        a.recycle();\n    }\n", "case_type": "block"}
{"generated_code": "            throw new RuntimeException(\"Buggy listener exception\");\n        }\n    }\n\n    @Override\n    public int getCount() {\n        return super.getCount() + 1;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n\n    @Override\n    public String getName() {\n        return \"Buggy Listener\";\n    }\n\n    @Override\n    public String getDescription() {\n        return \"Buggy Listener\";\n    }\n\n    @Override\n    public String getVersion() {\n        return \"1.0\";\n    }\n\n    @Override\n    public String getGroup() {\n        return \"Buggy Listener\";\n    }\n\n    @Override\n    public String getProvider() {\n        return \"Buggy Listener\";\n    }\n\n    @Override\n    public String getEventType() {\n        return \"Buggy Listener\";\n    }\n\n    @Override\n    public String getEventTypeVersion() {\n        return \"1.0\";\n    }\n\n    @Override\n    public String", "reference_code": "            throw new TestListenerException();\n        }\n    }\n\n    @Override\n", "case_type": "block"}
{"generated_code": "import com.axelor.apps.sale.service.ConfiguratorFormulaService;\nimport com.axelor.i18n.I18n;\nimport com.axelor.rpc.Action;\nimport com.axelor.rpc.IController;\nimport com.axelor.rpc.Response;\nimport com.axelor.rpc.View;\nimport com.axelor.rpc.View.Type;\nimport com.axelor.rpc.interceptor.Auth;\nimport com.axelor.rpc.interceptor.Auth.Role;\nimport com.axelor.rpc.interceptor.Auth.Type;\nimport com.axelor.rpc.interceptor.Auth.User;\nimport com.axelor.rpc.interceptor.Auth.User.Type;\nimport com.axelor.rpc.interceptor.Auth.User.Type.Type;\nimport com.axelor.rpc.interceptor.Auth.User.Type.Type;\nimport com.axelor.", "reference_code": "import com.axelor.apps.sale.service.configurator.ConfiguratorFormulaService;\nimport com.axelor.i18n.I18n;\n", "case_type": "block"}
{"generated_code": "        super(name);\n    }\n\n    public SubGraph(String name, String id) {\n        super(name, id);\n    }\n\n    public SubGraph(String name, String id, String rank) {\n        super(name, id, rank);\n    }\n\n    public SubGraph(String name, String id, String rank, String style) {\n        super(name, id, rank, style);\n    }\n\n    public SubGraph(String name, String id, String rank, String style, String fontname) {\n        super(name, id, rank, style, fontname);\n    }\n\n    public SubGraph(String name, String id, String rank, String style, String fontname, String fontsize) {\n        super(name, id, rank, style, fontname, fontsize);\n    }\n\n    public SubGraph(String name, String id, String rank, String style, String fontname, String fontsize, String fontcolor) {\n        super(name, id, rank, style, fontname, fontsize, fontcolor);\n    }\n\n    public SubGraph(String name, String", "reference_code": "        super(\"cluster_\" +name);\n    }\n", "case_type": "block"}
{"generated_code": "\n    /**\n     * It returns the most likely value for the confidence values\n     * (classifies binary pixels in Mat into a digit\n     * whose values can be one of the digit 1,2,...,9)\n     * @param confidenceValues confidence values corresponding to digits [1, 9]\n     * @return likelyValue the most {@linkplain LikelyValue likely value}\n     * between [1, 9] or else returns -1 as the likely value\n     * (if classification is not possible)\n     */\n    public abstract LikelyValue getLikelyValue(double[] confidenceValues);\n\n    /**\n     * It returns the most likely value for the confidence values\n     * (classifies binary pixels in Mat into a digit\n     * whose values can be one of the digit 1,2,...,9)\n     * @param confidenceValues confidence values corresponding to digits [1, 9]\n     * @return likelyValue the most {@linkplain LikelyValue likely value}\n     * between [1, 9] or else returns -1 as the likely value\n     * (if classification is not possible)\n     */\n   ", "reference_code": "\n    /**\n", "case_type": "block"}
{"generated_code": "   * Start of the time period to which `count` refers (excluded).\n   * </pre>\n   *\n   * <code>.google.protobuf.Timestamp start_time = 2;</code>\n   */\n  com.google.protobuf.TimestampOrBuilder getStartTimeOrBuilder();\n\n  /**\n   *\n   *\n   * <pre>\n   * Start of the time period to which `count` refers (excluded).\n   * </pre>\n   *\n   * <code>.google.protobuf.Timestamp start_time = 2;</code>\n   */\n  com.google.protobuf.Timestamp getStartTimeOrBuilder();\n  /**\n   *\n   *\n   * <pre>\n   * Start of the time period to which `count` refers (excluded).\n   * </pre>\n   *\n   * <code>.google.protobuf.Timestamp start_time = 2;</code>\n   */\n  com.google.protobuf.Timestamp getStartTime();\n  /**\n   *\n   *\n   * <pre>\n   * Start of the time", "reference_code": "   * Start of the time period to which `count` refers (included).\n   * </pre>\n   *\n", "case_type": "block"}
{"generated_code": "\n  public void testSuiteNameConventionTest2() {\n    addEnvironmentClass(\"package org.junit.runner;\\n\" +\n                        \"public @interface RunWith {Class<?> value();}\");\n    addEnvironmentClass(\"package org.junit.runners;\\n\" +\n                        \"public class Suite {}\");\n    addEnvironmentClass(\"package org.junit.runners;\\n\" +\n                        \"public class Parameterized extends Suite {}\");\n    addEnvironmentClass(\"package org.junit;\\n\" +\n                        \"public @interface Test{}\");\n    doTest();\n  }\n\n  public void testSuiteNameConventionTest3() {\n    addEnvironmentClass(\"package org.junit.runner;\\n\" +\n                        \"public @interface RunWith {Class<?> value();}\");\n    addEnvironmentClass(\"package org.junit.runners;\\n\" +\n                        \"public class Suite {}\");\n    addEnvironmentClass(\"package org.junit.runners;\\n\" +\n                        \"public class Parameterized extends Suite {}\");\n    addEnvironmentClass(\"package org.junit;\\n\" +\n                        \"public @interface Test{}", "reference_code": "\n  @Override\n  protected Class<? extends InspectionProfileEntry> getInspectionClass() {\n    return NewClassNamingConventionInspection.class;\n", "case_type": "block"}
{"generated_code": "import java.util.Map;\nimport java.util.Objects;\nimport java.util.function.Predicate;\n\npublic class MimetypeOtherTSLPointer implements Predicate<OtherTSLPointerType> {\n\n    /** The Constant serialVersionUID. */\n    private static final long serialVersionUID = 1L;\n\n    /** The Constant EXPECTED_TAG_NAME. */\n    private static final String EXPECTED_TAG_NAME = \"{http://uri.etsi.org/02231/v2/additionaltypes#}MimeType\";\n\n    /** The Constant EXPECTED_TAG_NAME. */\n    private static final String EXPECTED_TAG_NAME = \"{http://uri.etsi.org/02231/v2/additionaltypes#}MimeType\";\n\n    /** The Constant EXPECTED_TAG_NAME. */\n    private static final String EXPECTED_TAG_NAME = \"{http://uri.etsi.org/02231/v2/additionaltypes#}MimeType\";\n\n    /** The Constant EXPECTED_TAG_NAME. */\n   ", "reference_code": "import java.util.Map;\nimport java.util.Objects;\n\npublic class MimetypeOtherTSLPointer extends AbstractOtherTSLPointerPredicate {\n", "case_type": "block"}
{"generated_code": "    /**\n     * Get the roleId property: Compute role ID.\n     *\n     * @return the roleId value.\n     * @throws IllegalStateException if the instance was initialized with an invalid value.\n     * @see #withRoleId(String)\n     * @see #roleId()\n     * @see #withRoleId(String)\n     * @see #withRoleId(String)\n     * @see #roleId()\n     * @see #withRoleId(String)\n     * @see #withRoleId(String)\n     * @see #roleId()\n     * @see #withRoleId(String)\n     * @see #withRoleId(String)\n     * @see #roleId()\n     * @see #withRoleId(String)\n     * @see #withRoleId(String)\n     * @see #roleId()\n     * @see #withRoleId(String)\n     * @see #withRoleId(String)\n     * @see #roleId()\n     * @see #withRoleId(String)\n     * @see #withRoleId(String", "reference_code": "    /**\n     * Get the roleId property: Compute role ID.\n     *\n     * @return the roleId value.\n", "case_type": "block"}
{"generated_code": "import gb.saphoracle.calculator.Utility;\n\n@SuppressWarnings(\"rawtypes\")\n\n@SuppressWarnings(\"serial\")\n\n@SuppressWarnings(\"deprecation\")\n\n@SuppressWarnings(\"unchecked\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n\n@SuppressWarnings(\"unused\")\n", "reference_code": "import gb.saphoracle.calculator.utils.Utility;\n\n", "case_type": "block"}
{"generated_code": "        if (depth == 0)\n            p.print(typeSignature);\n        else if (depth == 1)\n            p.print(typeSignature + \"(\" + toParsableString(contextualType) + \")\");\n        else if (depth == 2)\n            p.print(typeSignature + \"(\" + toParsableString(contextualType) + \")\");\n        else if (depth == 3)\n            p.print(typeSignature + \"(\" + toParsableString(contextualType) + \")\");\n        else if (depth == 4)\n            p.print(typeSignature + \"(\" + toParsableString(contextualType) + \")\");\n        else if (depth == 5)\n            p.print(typeSignature + \"(\" + toParsableString(contextualType) + \")\");\n        else if (depth == 6)\n            p.print(typeSignature + \"(\" + toParsableString(contextualType) + \")\");\n        else if (depth == 7)\n            p.print(typeSignature + \"(\" + toParsableString(contextualType) + \")\");\n       ", "reference_code": "        String typeSignature = getType(generator.getDatabase()).getSignature(); \n        if (typeSignature.equals(TypeCharacter.Name))\n", "case_type": "block"}
{"generated_code": "        private final T state;\n\n        TestingRetrievableStateHandle(T state) {\n            this.state = state;\n        }\n\n        @Override\n        public String getHandle() {\n            return \"TestingRetrievableStateHandle\";\n        }\n\n        @Override\n        public String getStateType() {\n            return \"TestingRetrievableStateHandle\";\n        }\n\n        @Override\n        public String getStateId() {\n            return \"TestingRetrievableStateHandle\";\n        }\n\n        @Override\n        public String getStateIdAndHandle() {\n            return \"TestingRetrievableStateHandle\";\n        }\n\n        @Override\n        public String getStateIdAndHandleAndType() {\n            return \"TestingRetrievableStateHandle\";\n        }\n\n        @Override\n        public String getStateIdAndHandleAndTypeAndSize() {\n            return \"TestingRetrievableStateHandle\";\n        }\n\n        @Override\n        public String getStateIdAndHandleAndTypeAndSizeAndVersion() {\n            return \"TestingRetrievableStateHandle\";\n        }\n\n", "reference_code": "        private static final long serialVersionUID = 137053380713794300L;\n\n        private final T state;\n\n        private TestingRetrievableStateHandle(T state) {\n            this.state = state;\n", "case_type": "block"}
{"generated_code": "    public PullableImageView(Context context, AttributeSet attrs)\n    {\n        super(context, attrs);\n    }\n\n    @Override\n    public boolean canPullDown()\n    {\n        return true;\n    }\n\n    @Override\n    public boolean canPullUp()\n    {\n        return true;\n    }\n\n    @Override\n    public boolean canPullDown()\n    {\n        return true;\n    }\n\n    @Override\n    public boolean canPullUp()\n    {\n        return true;\n    }\n\n    @Override\n    public boolean canPullDown()\n    {\n        return true;\n    }\n\n    @Override\n    public boolean canPullUp()\n    {\n        return true;\n    }\n\n    @Override\n    public boolean canPullDown()\n    {\n        return true;\n    }\n\n    @Override\n    public boolean canPullUp()\n    {\n        return true;\n    }\n\n    @Override\n    public boolean canPullDown()\n    {\n        return true;\n   ", "reference_code": "    public PullableImageView(Context context, AttributeSet attrs)\n    {\n        super(context, attrs);\n    }\n\n", "case_type": "block"}
{"generated_code": "        if (user == null) {\n            throw new IllegalStateException(\"No user found for username: \" + username);\n        }\n\n        // Get the GitHub connection\n        Connection<GitHub> apiConn = usersConnRepo.findPrimaryConnection(GitHub.class);\n        if (apiConn == null) {\n            throw new IllegalStateException(\"No GitHub connection exists for the given user!\");\n        }\n\n        // Get the GitHub connection\n        Connection<GitHub> apiConn = usersConnRepo.findPrimaryConnection(GitHub.class);\n        if (apiConn == null) {\n            throw new IllegalStateException(\"No GitHub connection exists for the given user!\");\n        }\n\n        // Get the GitHub connection\n        Connection<GitHub> apiConn = usersConnRepo.findPrimaryConnection(GitHub.class);\n        if (apiConn == null) {\n            throw new IllegalStateException(\"No GitHub connection exists for the given user!\");\n        }\n\n        // Get the GitHub connection\n        Connection<GitHub>", "reference_code": "\n        // Get a GitHub connection for this user.\n        ConnectionRepository connRepo = this.usersConnRepo.createConnectionRepository(username);\n        Connection<GitHub> apiConn = connRepo.findPrimaryConnection(GitHub.class);\n", "case_type": "block"}
{"generated_code": "    }\n\n    public int getNumInstances() {\n        return numInstances;\n    }\n\n    public void setNumInstances(long numInstances) {\n        this.numInstances = (int) numInstances;\n    }\n\n    public void setNumInstances(String numInstances) {\n        this.numInstances = Integer.parseInt(numInstances);\n    }\n\n    public void setNumInstances(String numInstances, int defaultValue) {\n        this.numInstances = Integer.parseInt(numInstances);\n        if (this.numInstances == 0) {\n            this.numInstances = defaultValue;\n        }\n    }\n\n    public void setNumInstances(String numInstances, int defaultValue, int minValue) {\n        this.numInstances = Integer.parseInt(numInstances);\n        if (this.numInstances == 0) {\n            this.numInstances = defaultValue;\n        } else if (this.numInstances < minValue) {\n            this.numInstances = minValue;\n        }\n", "reference_code": "    }\n\n    public long getNumInstances() {\n        return numInstances;\n    }\n", "case_type": "block"}
{"generated_code": "csSource clone() {\n    return (GoogleCloudHealthcareV1beta1FhirGcsSource) super.clone();\n  }\n\n}\n\n    * `gs://my-bucket/my-directory*.ndjson` imports all files with\n   * `.ndjson` extensions in `my-directory/` and its sub-directories. For example, `gs://my-bucket/my-directory*.ndjson` imports all files with\n   * `.ndjson` extensions in `my-directory/` and its sub-directories. * `?` to match 1 character\n   * Files matching the wildcard are expected to contain content only, no metadata.\n   * @see <a href=\"https://cloud.google.com/healthcare-api/docs/how-to/import-export#import-from-cloud-storage\">Importing data from Cloud Storage</a>\n   * @see <a href=\"https://cloud.google.com/healthcare-api/docs/how-to/import-export#export-to-cloud-storage\">Exporting data to Cloud Storage</", "reference_code": "   * and with no other wildcards in the path. Can also be used with a file extension (such as\n   * .ndjson), which imports all files with the extension in the specified directory and its sub-\n   * directories. For example, `gs://my-bucket/my-directory*.ndjson` imports all files with\n", "case_type": "block"}
{"generated_code": "\npublic class DhtCacheConfigurationTest extends NearCacheConfigurationTest {\n    /** {@inheritDoc} */\n    @Override protected CacheConfiguration testCacheConfiguration(CacheConfiguration ccfg) {\n        ccfg.setNearConfiguration(new NearCacheConfiguration());\n\n        assertNotNull(ccfg.getNearConfiguration());\n\n        ccfg.setNearConfiguration(new NearCacheConfiguration());\n\n        assertNotNull(ccfg.getNearConfiguration());\n\n        ccfg.setNearConfiguration(new NearCacheConfiguration());\n\n        assertNotNull(ccfg.getNearConfiguration());\n\n        ccfg.setNearConfiguration(new NearCacheConfiguration());\n\n        assertNotNull(ccfg.getNearConfiguration());\n\n        ccfg.setNearConfiguration(new NearCacheConfiguration());\n\n        assertNotNull(ccfg.getNearConfiguration());\n\n        ccfg.setNearConfiguration(new NearCacheConfiguration());\n\n        assertNotNull(ccfg.getNearConfiguration());\n\n        ccfg.setNearConfiguration(new NearCacheConfiguration());\n\n        assertNotNull(ccfg.getNearConfiguration());\n\n        ccfg.setN", "reference_code": "\npublic class GridCachePartitionedNearDisabledLockSelfTest extends GridCachePartitionedLockSelfTest {\n    /** {@inheritDoc} */\n    @Override protected CacheConfiguration cacheConfiguration() {\n        CacheConfiguration ccfg = super.cacheConfiguration();\n", "case_type": "block"}
{"generated_code": "            return false;\n        }\n        if ( !file.exists() ) {\n            return true;\n        }\n        if ( !file.canWrite() ) {\n            logger.warnf( \"File not writable: %1\", file );\n            return false;\n        }\n        if ( !file.canRead() ) {\n            logger.warnf( \"File not readable: %1\", file );\n            return false;\n        }\n        if ( !file.isFile() ) {\n            logger.warnf( \"File is not a file: %1\", file );\n            return false;\n        }\n        if ( !file.canExecute() ) {\n            logger.warnf( \"File not executable: %1\", file );\n            return false;\n        }\n        if ( !file.canExecute() ) {\n            logger.warnf( \"File not executable: %1\", file );\n            return false;\n        }\n        if ( !file.canExecute() ) {\n            logger.warnf( \"File not executable: %1\", file );\n            return false;\n        }\n        if (", "reference_code": "            throw new IllegalArgumentException();\n", "case_type": "block"}
{"generated_code": "\n    protected void sendErrorResponse(HttpServletResponse response, CmsError ex) throws IOException {\n            ErrorResponse errorResponse = new ErrorResponse(ex);\n            response.getWriter().write(gson.toJson(errorResponse));\n            response.setStatus(ex.getErrorCode());\n            response.setContentType(\"application/json\");\n            response.setCharacterEncoding(\"UTF-8\");\n            response.setHeader(\"Cache-Control\", \"no-cache\");\n            response.setHeader(\"Pragma\", \"no-cache\");\n            response.setDateHeader(\"Expires\", 0);\n            response.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n            response.setHeader(\"Access-Control-Allow-Credentials\", \"true\");\n            response.setHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\n            response.setHeader(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization, X-Auth-Token\");\n            response.setHeader(\"Access-Control-Max-A", "reference_code": "\n    protected void sendError(HttpServletResponse response, int code, CmsError ex) throws IOException {\n            ErrorResponse error = new ErrorResponse(code, ex);\n            response.setStatus(error.getCode());\n            response.getWriter().write(gson.toJson(error));\n", "case_type": "block"}
{"generated_code": "  public void shouldNotFindLibraryForMacWithAnyArchAndDyLibMapping() throws IOException {\n    assertThat(loadLibrary(new SQLiteLibraryLoader(MAC_DYLIB), \"Mac OS X\", \"any architecture\"))\n        .isEqualTo(\"mac-x86_64/libsqlite4java.jnilib\");\n  }\n\n  private String loadLibrary(SQLiteLibraryLoader loader, String os, String arch) throws IOException {\n    return loader.loadLibrary(os, arch);\n  }\n}\n\nenum OS {WINDOWS, LINUX, MAC, MAC_DYLIB}\n\nenum ARCH {X86, X86_64, ANY}\n\n  @Test\n  public void shouldFindLibraryForLinuxx86() throws IOException {\n    assertThat(loadLibrary(new SQLiteLibraryLoader(LINUX), \"Some linux version\", \"x86\"))\n        .isEqualTo(\"linux-x86/libsqlite4java.so\");\n  }\n\n  @Test\n  public void shouldFindLibraryForLinuxAmd64() throws IOException {\n    assertThat(", "reference_code": "\n  @Test\n  public void shouldFindLibraryForLinuxi386() throws IOException {\n    assertThat(loadLibrary(new SQLiteLibraryLoader(LINUX), \"Some linux version\", \"i386\"))\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Test\n    @SuppressWarnings(\"deprecation\")\n    // This test is deprecated as it is not supported in the current version of the fat runtime\n    // and will be removed in a future version\n    @Deprecated\n    public void MPJwtGoodMP12ConfigAsEnvVars_decryptKeyLoc_RS256File_test_deprecated() throws Exception {\n        genericGoodTest(\"sign_RS256_enc_RS256\");\n    }\n\n    @Test\n    public void MPJwtGoodMP12ConfigAsEnvVars_decryptKeyLoc_RS256File_overriddenByServerXml_test() throws Exception {\n        genericGoodTest(\"sign_RS256_enc_RS256\", \"rs_server_AltConfigNotInApp_Good_DecryptKeyLoc.xml\", setEncryptMismatchKeyTypeExpectations(resourceServer, false));\n    }\n\n    @Test\n    public void MPJwtGoodMP12ConfigAsEnvVars_decryptKeyLoc_RS256File_overridden", "reference_code": "    }\n\n    @Test\n", "case_type": "block"}
{"generated_code": ", int pos        _envVarField.addActionListener(new EnvActionListener(_envVarField, true));\n        _envVarField.setText(\"HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\JavaSoft\\\\Java Runtime Environment\");\n    }\n\n    private class VarComboActionListener implements ActionListener {\n        public void actionPerformed(ActionEvent e) {\n            _jvmOptionsTextArea.setText(_jvmOptionsTextArea.getText()\n                    + \"\\n-Dlaunch4j.\" + ((String) _varCombo.getSelectedItem())\n                    .toLowerCase() + \"=\\\"%\" + ((String) _varCombo.getSelectedItem())\n                    .toLowerCase() + \"%\\\"\\n\");\n        }\n    }\n\n    private class EnvPropertyActionListener extends EnvActionListener {\n        public EnvPropertyActionListener(JTextField f) {\n            super(f, false);\n        }\n\n        protected void add(String var, int pos) {\n            _jvmOptionsTextArea.insert(\"-Dlaunch4j.\" + var.toLowerCase()\n                    +", "reference_code": "        _envOptionButton.addActionListener(new EnvOptionActionListener(_envVarField));\n    }\n\n    private class VarComboActionListener implements ActionListener {\n        public void actionPerformed(ActionEvent e) {\n            _optionButton.setEnabled(((String) _varCombo.getSelectedItem())\n", "case_type": "block"}
{"generated_code": "      // Load persisted options\n      byte[] confData = db.get(CONF_KEY);\n      Cache.PRocksPageStoreOptions pOptions = Cache.PRocksPageStoreOptions.newBuilder()\n          .mergeFrom(pageStoreOptions).build();\n      // Persist the options\n      // If the persisted options are inconsistent, close the rocksDB and throw an exception\n      // to indicate that the configuration is inconsistent\n      // This is to prevent the user from accidentally overwriting the configuration\n      // with a bad value\n      // TODO(zhengdong): Remove this check after we have a better way to handle the\n      // configuration\n      // TODO(zhengdong): Remove this check after we have a better way to handle the\n      // configuration\n      // TODO(zhengdong): Remove this check after we have a better way to handle the\n      // configuration\n      // TODO(zhengdong): Remove this check after we have a better way to handle the\n      // configuration\n      // TODO(zhengdong): Remove this check after we have a better way to handle the\n      // configuration\n      // TODO", "reference_code": "      byte[] confData = db.get(CONF_KEY);\n      Cache.PRocksPageStoreOptions pOptions = pageStoreOptions.toProto();\n", "case_type": "block"}
{"generated_code": "    }\n\n    public boolean isError() {\n\n        // If the error flag is set, the note is considered as an error\n        // and will be displayed in red\n        // If the error flag is not set, the note is considered as a normal\n        // note and will be displayed in black\n\n        // If the error flag is not set, the note is considered as a normal\n        // note and will be displayed in black\n\n        // If the error flag is set, the note is considered as an error\n        // and will be displayed in red\n\n        // If the error flag is not set, the note is considered as a normal\n        // note and will be displayed in black\n\n        // If the error flag is not set, the note is considered as a normal\n        // note and will be displayed in black\n\n        // If the error flag is not set, the note is considered as a normal\n        // note and will be displayed in black\n\n        // If the error flag is not set, the note is considered as a normal\n        // note and will be displayed in black\n\n        // If the error flag is not set, the note is considered as a", "reference_code": "    }\n\n    public boolean isError() {\n", "case_type": "block"}
{"generated_code": "    }\n\n    /**\n     * @param paramsMap the parameter map\n     *\n     * @return the limit SQL statement\n     */\n    public static String limit( final MapSqlParameterSource paramsMap )\n    {\n        return \" limit :\" + paramsMap.getNumber( MAX_LIMIT );\n    }\n\n    /**\n     * @param paramsMap the parameter map\n     *\n     * @deprecated use {@link #limit(MapSqlParameterSource)} instead\n     *\n     * @see #limit(MapSqlParameterSource)\n     *\n     * @deprecated use {@link #maxLimit(MapSqlParameterSource)} instead\n     *\n     * @see #maxLimit(MapSqlParameterSource)\n     *\n     * @param paramsMap the parameter map\n     *\n     * @deprecated use {@link #maxLimit(MapSqlParameterSource)} instead\n     *\n     * @see #maxLimit(MapSqlParameterSource)\n     *\n     * @param paramsMap the parameter map\n     *\n     * @deprecated use {@link #maxLimit(MapSqlParameterSource)} instead\n     *\n     * @see #maxLimit(", "reference_code": "    }\n\n    /**\n     * Adds a SQL limit statement if one is set in the given paramsMap.\n     *\n     * @param paramsMap\n", "case_type": "block"}
{"generated_code": "\n    }\n\n}\n\nclass UnixSocket {\n    private final String name;\n    private final long handle;\n           if (!Library.chmod(authSocket, execute ? 0777 : 0600)) {\n            throw new IOException(\"Unable to secure local socket\");\n        }\n    }\n\n    static void chmodOwner(String authSocket, boolean execute, long handle) throws IOException {\n        if (!Library.chmod(authSocket, execute ? 0777 : 0600)) {\n            throw new IOException(\"Unable to secure local socket\");\n        }\n    }\n\n    static void chmodOwner(String authSocket, boolean execute, long handle, long handle2) throws IOException {\n        if (!Library.chmod(authSocket, execute ? 0777 : 0600)) {\n            throw new IOException(\"Unable to secure local socket\");\n        }\n    }\n\n    static void chmodOwner(String authSocket, boolean execute, long handle, long handle2, long handle3) throws IOException {\n        if (!Library.chmod(authSocket, execute ? ", "reference_code": "        int perms = org.apache.tomcat.jni.File.APR_FPROT_UREAD\n                  | org.apache.tomcat.jni.File.APR_FPROT_UWRITE;\n        if (execute) {\n            perms |= org.apache.tomcat.jni.File.APR_FPROT_UEXECUTE;\n        }\n        if (org.apache.tomcat.jni.File.permsSet(authSocket, perms) != org.apache.tomcat.jni.Status.APR_SUCCESS) {\n", "case_type": "block"}
{"generated_code": "  @Override\n  public GrTypeDefinitionStub.Type getType() {\n    return GroovyElementTypes.CLASS_DEFINITION;\n  }\n\n  @NotNull\n  @Override\n  public String getText() {\n    return \"class\";\n  }\n\n  @Override\n  public String getName() {\n    return getText();\n  }\n\n  @Override\n  public String getQualifiedName() {\n    return getName();\n  }\n\n  @Override\n  public String getSimpleName() {\n    return getName();\n  }\n\n  @Override\n  public String getPackageName() {\n    return \"\";\n  }\n\n  @Override\n  public String getFullyQualifiedName() {\n    return getQualifiedName();\n  }\n\n  @Override\n  public String getFullyQualifiedPackageName() {\n    return getPackageName();\n  }\n\n  @Override\n  public String getSimpleFullyQualifiedName() {\n    return getFullyQualifiedName();\n  }\n\n  @Override\n  public String getSimpleF", "reference_code": "  public GrClassDefinitionImpl(final GrTypeDefinitionStub stub) {\n    super(stub, GroovyElementTypes.CLASS_DEFINITION);\n  }\n\n", "case_type": "block"}
{"generated_code": "        initializeUI(panel);\n        return panel;\n    }\n\n    private void initializeUI(final JComponent panel) {\n\n        final String[] sourceProducts = getSourceProducts();\n        polList.setEnabled(sourceProducts != null && sourceProducts.length > 0);\n        polList.setVisible(sourceProducts != null && sourceProducts.length > 0);\n        polList.setEditable(false);\n        polList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n        polList.setVisibleRowCount(10);\n        polList.setCellRenderer(new Sentinel1DeburstTOPSAROp.PolarisationRenderer());\n        polList.setCellEditor(new Sentinel1DeburstTOPSAROp.PolarisationEditor());\n        polList.setFocusable(false);\n        polList.setFocusTraversalKeysEnabled(false);\n        polList.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\n        polList.setFont(getFont());\n        polList.set", "reference_code": "        initParameters();\n        return new JScrollPane(panel);\n    }\n\n    @Override\n    public void initParameters() {\n", "case_type": "block"}
{"generated_code": "    /**\n     * Gets KenyaEMR information\n     * @return the data points\n     */\n    public static Map<String, Object> getKenyaemrInformation() {\n        Module build = ModuleFactory.getModule(EmrConstants.MODULE_ID);\n\n        if (build == null) {\n            return map();\n        }\n\n        Context.getService(EmrConstants.MODULE_ID).getVersion();\n\n        Context.getService(EmrConstants.MODULE_ID).getVersion();\n\n        Context.getService(EmrConstants.MODULE_ID).getVersion();\n\n        Context.getService(EmrConstants.MODULE_ID).getVersion();\n\n        Context.getService(EmrConstants.MODULE_ID).getVersion();\n\n        Context.getService(EmrConstants.MODULE_ID).getVersion();\n\n        Context.getService(EmrConstants.MODULE_ID).getVersion();\n\n        Context.getService(EmrConstants.MODULE_ID).getVersion();\n\n        Context.getService(EmrConstants.MODULE_ID).getVersion();\n\n        Context.getService", "reference_code": "    /**\n     * Gets KenyaEMR information\n     * @return the data points\n     */\n    public static Map<String, Object> getKenyaemrInformation() {\n        BuildProperties build = Context.getRegisteredComponents(BuildProperties.class).get(0);\n", "case_type": "block"}
{"generated_code": "           }\n\n    public ErrorRepresentation build() {\n        try {\n            this.resource = createResourceLink(this.resourceUri);\n        } catch (IllegalArgumentException | UriBuilderException e) {\n            throw new IllegalArgumentException(\"Unable to create resource link\", e);\n        }\n        return new ErrorRepresentation(this);\n    }\n\n    @ApiModelProperty(\n            access = \"public\",\n            name = \"msg\",\n            example = \"this error happened due to this situation\",\n            value = \"the contents of an error in the body as information til API consumer(s).\")\n    public void setMessage(String msg) {\n        this.msg = msg;\n    }\n\n    @ApiModelProperty(\n            access = \"public\",\n            name            this.msg = builder.msg;\n        }\n    }\n\n    /**\n     * @return the message\n     */\n\n    @ApiModelProperty(\n            access = \"public\",\n            name = \"msg\",\n            example = \"this error happened due to this situation\",\n            value = \"the contents of an error in the", "reference_code": "\n            this.resource = builder.resourceUri == null ? null : this.createResourceLink(builder.resourceUri);\n            this.msg = builder.msg;\n        }\n    }\n\n", "case_type": "block"}
{"generated_code": "        return value;\n    }\n\n    /**\n     * value 속성의 값을 설정합니다.\n     * \n     * @param value\n     *     allowed object is\n     *     {@link String }\n     *     \n     */\n    public void setvalue(String value) {\n        this.value = value;\n    }\n\n    public RunAsPrincipalName() {\n    }\n\n    public RunAsPrincipalName(String value) {\n        this.value = value;\n    }\n\n    public RunAsPrincipalName(String value, String value1) {\n        this.value = value;\n        this.value = value1;\n    }\n\n    public RunAsPrincipalName(String value, String value1, String value2) {\n        this.value = value;\n        this.value = value1;\n        this.value = value2;\n    }\n\n    public RunAsPrincipalName(String value, String value1, String value2, String value3) {\n", "reference_code": "        return value;\n", "case_type": "block"}
{"generated_code": "        sb.append(categories);\n        sb.append(\"}\");\n\n        return sb.toString();\n    }\n\n    @Override\n    public TipsOfTheDayCategories toModel() {\n        TipsOfTheDayCategoriesImpl tipsOfTheDayCategoriesImpl = new TipsOfTheDayCategoriesImpl();\n\n        tipsOfTheDayCategoriesImpl.setGroupId(groupId);\n        tipsOfTheDayCategoriesImpl.setCategories(categories);\n\n        return tipsOfTheDayCategoriesImpl;\n    }\n\n    @Override\n    public void resetOriginalValues() {\n        categories = null;\n    }\n\n    @Override\n    public boolean usesGetter() {\n        return false;\n    }\n\n    @Override\n    public Class<TipsOfTheDayCategories> getModelClass() {\n        return TipsOfTheDayCategories.class;\n    }\n\n    @Override\n    public long getGroupId() {\n        return groupId;\n    }\n\n    public void setGroupId(long groupId) {\n        this.groupId = groupId;\n    }\n\n    public", "reference_code": "        sb.append(categories);\n        sb.append(\"}\");\n\n        return sb.toString();\n    }\n", "case_type": "block"}
{"generated_code": "\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    public Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) {\n\n        // TODO: 2015/10/23 这里的getBeansWithAnnotation 方法的参数应该改成Class<?>\n        // 因为getBeansWithAnnotation 方法的参数是Annotation类型，而这里的参数是Class<?>类型\n        // 所以这里的getBeansWithAnnotation 方法的参数应该改成Class<? extends Annotation>类型\n\n        // 这里的getBeansWithAnnotation 方法的参数应该改成Class<?>类型\n        // 因为getBeansWithAnnotation 方法的参数是Annotation类型，而这里的参数是Class<?>类型\n        // 所以这里的getBeansWithAnnotation 方法的参数应该改成Class<? extends Annotation>类型\n\n        // 这里的getBeansWithAnnotation 方法的参数应该改成Class<?>类型\n        // 因为getBeansWithAnnotation 方法的参数是", "reference_code": "\n    public static ApplicationContext getApplicationContext() {\n        return applicationContext;\n    }\n\n    public Map<String, Object> getBeansWithAnnotation(Class<? extends Annotation> annotationType) throws BeansException {\n", "case_type": "block"}
{"generated_code": " itemSaleNew);\n        Assert.assertEquals(itemSaleNew, \"strong\");\n    }\n\n    @Test\n    public void checkItemColor() {\n        driver.get(adress);\n        WebElement element = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[@class='name']\"));\n        String itemColor = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[@class='color']\")).getAttribute(\"style\");\n        element.click();\n        String itemColorNew = driver.findElement(By.xpath(\"//div[@class='color']\")).getAttribute(\"style\");\n        Assert.assertEquals(itemColor, itemColorNew);\n    }\n\n    @Test\n    public void checkItemColorStyle() {\n        driver.get(adress);\n        Web        String itemColor = driver.findElement(By.xpath(\"//div[@id='box", "reference_code": "    @Test\n    public void checkItemSaleColor() {\n        driver.get(adress);\n        WebElement element = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[@class='name']\"));\n        String itemSale = driver.findElement(By.xpath(\"//div[@id='box-campaigns']/div/ul/li/a[1]/div[4]/strong\")).getCssValue(\"color\");\n", "case_type": "block"}
{"generated_code": " } else {\n      return null;\n    }\n  }\n\n  public List<Object> getKeys() {\n    final List<Object> keys = new ArrayList<>();\n    final Iterator<OrderedValue> it = this.timedSet.iterator();\n    while (it    this.approxMaxSize = approxMaxSize;\n  }\n\n  private static class RemovalEvent extends EventObject {\n    private static final long serialVersionUID = 1L;\n    private final Object value;\n\n    public RemovalEvent(final LRUCache in, final Object value) {\n      super(in);\n      this.value = value;\n    }\n  }\n\n  private static class RemovalDispatch extends EventDispatch2 {\n    private static final long serialVersionUID = 1L;\n  }\n\n  private static class OrderedValue implements Comparable<OrderedValue> {\n    private final Object key;\n    private Object value;\n    private int approximateSize;\n\n    public    this.removalEvent = new RemovalDispatch();\n  }\n\n  private void readResolve() throws java.io.", "reference_code": "    this.approxMaxSize = approxMaxSize;\n    this.removalEvent = new RemovalDispatch();\n  }\n\n  private void readObject(final java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {\n", "case_type": "block"}
{"generated_code": "    if (code == null)\n      return null;\n    throw new IllegalStateException(\"Cannot convert null V3SpecialArrangement to code\");\n  }\n\n  public Class<V3SpecialArrangement> getEnumClass() {\n    return V3SpecialArrangement.class;\n  }\n\n  public String getBasePath() {\n    return \"V3SpecialArrangement\";\n  }\n\n  public String getBasePackage() {\n    return \"org.hl7.fhir.instance.model.valuesets\";\n  }\n\n  public Class<?> getEnumClassForCode(String codeString) throws IllegalArgumentException {\n    return fromCode(codeString);\n  }\n\n  public String getCodeForEnum(V3SpecialArrangement code) throws IllegalArgumentException {\n    return toCode(code);\n  }\n\n  public String getCodeForEnum(V3SpecialArrangement code, String defaultValue) throws IllegalArgumentException {\n    return toCode(code);\n  }\n\n  public V3SpecialArrangement getEnumForCode(String codeString) throws", "reference_code": "    return \"?\";\n  }\n\n", "case_type": "block"}
{"generated_code": "\n    public UniqueIndex setReferenced(String refWebKey) {\n        checkArgument(isNotBlank(refWebKey), \"refWebKey\" + Constants.NOT_BLANK);\n        this.refWebKey = refWebKey;\n        return this;\n    }\n\n    public UniqueIndex setReferenced(String refWebKey, String refWebKey2) {\n        checkArgument(isNotBlank(refWebKey), \"refWebKey\" + Constants.NOT_BLANK);\n        this.refWebKey = refWebKey;\n        return this;\n    }\n\n    public UniqueIndex setReferenced(String refWebKey, String refWebKey2, String refWebKey3) {\n        checkArgument(isNotBlank(refWebKey), \"refWebKey\" + Constants.NOT_BLANK);\n        this.refWebKey = refWebKey;\n        return this;\n    }\n\n    public UniqueIndex setReferenced(String refWebKey, String refWebKey2, String refWebKey3, String refWebKey4) {\n       ", "reference_code": "\n    public UniqueIndex setRefWebKey(String refWebKey) throws IllegalArgumentException {\n", "case_type": "block"}
{"generated_code": "    @ControllerMethodInfo(name = \"index\", description = \"메인 화면\")\n    @SuppressWarnings(\"unchecked\")\n\n    // 로그인 여부에 따라 메인 화면 이동\n    @SuppressWarnings(\"rawtypes\")\n\n    @SuppressWarnings(\"unchecked\")\n\n    @SuppressWarnings(\"unchecked\")\n\n    @SuppressWarnings(\"unchecked\")\n\n    @SuppressWarnings(\"unchecked\")\n\n    @SuppressWarnings(\"unchecked\")\n\n    @SuppressWarnings(\"unchecked\")\n\n    @SuppressWarnings(\"unchecked\")\n\n    @SuppressWarnings(\"unchecked\")\n\n    @SuppressWarnings(\"unchecked\")\n\n    @SuppressWarnings(\"unchecked\")\n\n    @SuppressWarnings(\"unchecked\")\n\n    @SuppressWarnings(\"unchecked\")", "reference_code": "    private String myDir = \"/commute\";\n\n    @ControllerMethodInfo(controllerPage = \"index.do\", template = \"main\" )\n", "case_type": "block"}
{"generated_code": "        Context appContext = InstrumentationRegistry.getTargetContext();\n\n        assertEquals(\"ru.arsich.messenger\", appContext.getPackageName());\n\n        assertEquals(\"ru.arsich.messenger.MainActivity\", appContext.getPackageName() + \".MainActivity\");\n\n        assertEquals(\"ru.arsich.messenger.MainActivity\", appContext.getPackageName() + \".MainActivity\");\n\n        assertEquals(\"ru.arsich.messenger.MainActivity\", appContext.getPackageName() + \".MainActivity\");\n\n        assertEquals(\"ru.arsich.messenger.MainActivity\", appContext.getPackageName() + \".MainActivity\");\n\n        assertEquals(\"ru.arsich.messenger.MainActivity\", appContext.getPackageName() + \".MainActivity\");\n\n        assertEquals(\"ru.arsich.messenger.MainActivity\", appContext.getPackageName() + \".MainActivity\");\n\n        assertEquals(\"ru.arsich.messenger.MainActivity\", appContext.getPackageName() + \".MainActivity\");\n\n        assertEquals(\"ru.arsich.messenger.MainActivity\", app", "reference_code": "        Context appContext = InstrumentationRegistry.getTargetContext();\n\n        assertEquals(\"ru.arsich.messenger\", appContext.getPackageName());\n", "case_type": "block"}
{"generated_code": "        if (c.get(Calendar.YEAR) == cur.get(Calendar.YEAR) &&\n                c.get(Calendar.MONTH) == cur.get(Calendar.MONTH) &&\n                c.get(Calendar.DAY_OF_MONTH) == cur.get(Calendar.DAY_OF_MONTH)) {\n            return Multilanguage.onToday;\n        }\n\n        cur.add(Calendar.DAY_OF_MONTH, 1);\n        if (c.get(Calendar.YEAR) == cur.get(Calendar.YEAR) &&\n                c.get(Calendar.MONTH) == cur.get(Calendar.MONTH) &&\n                c.get(Calendar.DAY_OF_MONTH) == cur.get(Calendar.DAY_OF_MONTH)) {\n            return Multilanguage.onTomorrow;\n        }\n\n        return \"\" + c.get(Calendar.DAY_OF_WEEK);\n    }\n\n    public static String getDateRepresentation(long date) {\n\n        GregorianCalendar cur = new", "reference_code": "        if (c.get(Calendar.YEAR) == cur.get(Calendar.YEAR) &&\n                c.get(Calendar.MONTH) == cur.get(Calendar.MONTH) &&\n                c.get(Calendar.DAY_OF_MONTH) == cur.get(Calendar.DAY_OF_MONTH)) {\n", "case_type": "block"}
{"generated_code": "\nimport org.junit.Test;\n\nimport java.io.Serializable;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.TypeVariable;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport javax.annotation.Nullable;\n\nimport static org.assertj.core.api.Assertions.assertThat;\n\nimport com.rejasupotaro.android.kvs.internal.TypeUtils;\n\nimport java.lang.reflect.Array;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.FieldModifier;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.MethodHandles;\nimport java.lang.reflect.Modifier;\nimport java.lang.reflect.Parameter;\nimport java.lang.reflect.TypeVariable;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.HashSet;\nimport java.util", "reference_code": "\nimport org.junit.Test;\n\n", "case_type": "block"}
{"generated_code": "                c.handle(message);\n            } catch (IOException | MineCloudException e) {\n                e.printStackTrace();\n            }\n        });\n    }\n\n    public interface ChannelCallback {\n        void handle(Message message) throws IOException, MineCloudException;\n    }\n\n    public interface ChannelCallbackWithError {\n        void handle(Message message) throws IOException, MineCloudException;\n    }\n\n    public interface ChannelCallbackWithErrorAndMessage {\n        void handle(Message message) throws IOException, MineCloudException;\n    }\n\n    public interface ChannelCallbackWithMessage {\n        void handle(Message message) throws IOException, MineCloudException;\n    }\n\n    public interface ChannelCallbackWithMessageAndError {\n        void handle(Message message) throws IOException, MineCloudException;\n    }\n\n    public interface ChannelCallbackWithMessageAndErrorAndMessage {\n        void handle(Message message) throws IOException, MineCloudException;\n    }\n\n    public interface ChannelCallbackWithMessageAndErrorAndMessageAndMessage {\n        void handle(Message message) throws IOException, MineCloudException;\n    }\n\n   ", "reference_code": "                c.call(message);\n            } catch (Exception ex) {\n                new MineCloudException(ex).printStackTrace();\n            }\n        });\n    }\n", "case_type": "block"}
{"generated_code": "        builder.addHeader(X_AUTH_TOKEN, user.getToken());\n\n        // TODO: add pagination\n\n        // TODO: add sorting\n\n        // TODO: add filters\n\n        // TODO: add pagination\n\n        // TODO: add sorting\n\n        // TODO: add filters\n\n        // TODO: add pagination\n\n        // TODO: add sorting\n\n        // TODO: add filters\n\n        // TODO: add pagination\n\n        // TODO: add sorting\n\n        // TODO: add filters\n\n        // TODO: add pagination\n\n        // TODO: add sorting\n\n        // TODO: add filters\n\n        // TODO: add pagination\n\n        // TODO: add sorting\n\n        // TODO: add filters\n\n        // TODO: add pagination\n\n        // TODO: add sorting\n\n        // TODO: add filters\n\n        // TODO: add pagination\n\n        // TODO: add sorting\n\n        // TODO: add filters\n\n        // TODO: add pagination\n\n        // TODO: add sorting\n\n        // TODO: add filters\n\n", "reference_code": "        builder.addHeader(X_AUTH_TOKEN, user.getToken());\n\n", "case_type": "block"}
{"generated_code": "  public static void release(FacesDetectedEvent event) {\n    EVENTS_POOL.release(event);\n  }\n\n  @Override\n  public boolean isCoalesced() {\n    return true;\n  }\n\n  @Override\n  public boolean isBroadcast() {\n    return false;\n  }\n\n  @Override\n  public boolean isLocal() {\n    return true;\n  }\n\n  @Override\n  public boolean isRepeated() {\n    return false;\n  }\n\n  @Override\n  public boolean isSynchronous() {\n    return false;\n  }\n\n  @Override\n  public boolean isCancellable() {\n    return false;\n  }\n\n  @Override\n  public boolean isCancelable() {\n    return false;\n  }\n\n  @Override\n  public boolean isBroadcasted() {\n    return false;\n  }\n\n  @Override\n  public boolean isLocalBroadcasted() {\n    return false;\n  }\n\n  @Override\n  public boolean isRepeatedBroadcasted() {\n", "reference_code": "  /**\n   * note(@sjchmiela)\n   * Should events about detected faces coalesce, the best strategy will be\n   * to ensure that events with different faces count are always being transmitted.\n   */\n", "case_type": "block"}
{"generated_code": "    public SynchronizedTextDocumentWriter(Document doc) {\n        super(doc);\n    }\n\n    @Override\n    public void write(char[] cbuf, int off, int len) throws IOException {\n        if(len == 0) return;\n\n        // invokeLater is needed to avoid a deadlock\n        // when the document is being written by another thread\n        // while the current thread is waiting for the write to finish\n        // (e.g. when the document is being edited by another thread)\n        // see http://bugs.sun.com/view_bug.do?bug_id=4043652\n        // and http://bugs.sun.com/view_bug.do?bug_id=4043653\n        // for more information\n\n        // TODO: is this really necessary?\n        // if(isEventDispatchThread()) return;\n\n        // System.out.println(\"SynchronizedTextDocumentWriter.write: \" + new String(cbuf, off, len));\n\n        // invokeLater is needed to avoid a deadlock\n        // when the document", "reference_code": "    public SynchronizedTextDocumentWriter(Document document) {\n        super(document);\n    }\n\n    @Override public void write(char[] cbuf, int off, int len) throws IOException {\n", "case_type": "block"}
{"generated_code": "117,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-130,-131,-132,-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145,-146,-147,-148,-149,-150,-151,-152,-153,-154,-155,-156,-157,-158,-159,-160,-161,-162,-163,-164,-165,-166,-167,-168,-169,-170,-171,-172,-173,-174,-175,-176,-177,-178,-179,-180,-", "reference_code": "            \"AS DEFINED IN THE BAYESFUSION ACADEMIC \" +\n            \"SOFTWARE LICENSING AGREEMENT. \" +\n            \"Serial #: 4ovxzxnfrsl1jb5f4e2ffk6fh \" +\n            \"Issued for: Fabio Luiz Leite J\\u00fanior (fabioleite@gmail.com) \" +\n            \"Academic institution: TU Kaisrslautern \" +\n            \"Valid until: 2019-01-25 \" +\n", "case_type": "block"}
{"generated_code": "\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    public void restoreState(FacesContext context, StateManager.SerializedView state)\n    {\n        getWrapped().restoreState(context, state);\n    }\n\n    @Override\n    public UIViewRoot restoreView(FacesContext context, String viewId, String renderKitId, String stateKey)\n    {\n        return getWrapped().restoreView(context, viewId, renderKitId, stateKey);\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    public UIViewRoot restoreTreeStructure(FacesContext context, String viewId, String renderKitId, String stateKey)\n    {\n        return getWrapped().restoreTreeStructure(context, viewId, renderKitId, stateKey);\n    }\n\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    public void restoreComponentState(FacesContext context, UIViewRoot viewRoot, String renderKitId, String stateKey)\n    {\n        getWrapped().restoreComponentState(", "reference_code": "\n    @Override\n    public void writeState(FacesContext context, Object state) throws IOException\n    {\n        getWrapped().writeState(context, state);\n", "case_type": "block"}
{"generated_code": " false;\n      });\n      assertThat(can    when(user.getId()).thenReturn(userId);\n    return user;\n  }\n\n  private SimpleCache getRequestCache() {\n    return getRequestCacheService().getRequestCache();\n  }\n\n  private SimpleCache getSessionCache() {\n    return getRequestCacheService().getSessionCache();\n  }\n\n  private SimpleCache getUserCache() {\n    return getRequestCacheService().getUserCache();\n  }\n\n  private SimpleCache getUserSessionCache() {\n    return getRequestCacheService().getUserSessionCache();\n  }\n\n  private SimpleCache getUserSessionCache() {\n    return getRequestCacheService().getUserSessionCache();\n  }\n\n  private SimpleCache getUserSessionCache() {\n    return getRequestCacheService().getUserSessionCache();\n  }\n\n  private SimpleCache getUserSessionCache() {\n    return getRequestCacheService().getUserSessionCache();\n  }\n\n  private SimpleCache getUserSessionCache() {\n    return getRequestCacheService().getUserSessionCache();\n  }\n\n  private SimpleCache get", "reference_code": "    when(user.getId()).thenReturn(userId);\n    return user;\n", "case_type": "block"}
{"generated_code": "    protected String name;\n    @XmlAttribute(required = true)\n    protected String description;\n\n    /**\n     * Gets the value of the attributeValue property.\n     *\n     * <p>\n     * This accessor method returns a reference to the live list, not a snapshot.\n     * Therefore any modification you make to the returned list will be present\n     * inside the JAXB object. This is why there is not a <CODE>set</CODE> method\n     * for the attributeValue property.\n     * <p>\n     * <p>\n     * For example, to add a new item, do as follows:\n     * <p>\n     * <pre>\n     * getAttributeValue().add(newItem);\n     * </pre>\n     */\n    public List<AttributeValue> getAttributeValue() {\n        if (attributeValue == null) {\n            attributeValue = new ArrayList<AttributeValue>();\n        }\n        return this.attributeValue;\n    }\n\n    public void setAttributeValue(List<AttributeValue> attributeValue) {\n        this.attributeValue = attributeValue;\n   ", "reference_code": "    protected String name;\n    @XmlAttribute\n    protected String description;\n\n", "case_type": "block"}
{"generated_code": "ZoomManager.getInstance().isZooming()) {\n                fireHandlerChanged(new HandlerEvent(this, false, true));\n            } else {\n                fireHandlerChanged(new HandlerEvent(this, true, false));\n            }\n        }\n    }\n\n    @Override\n    public void handleEvent(ZoomListener.ZoomEvent event) {\n        if (this.tool == event.getTool()\n                && event.getType() == ZoomListener.ZoomEvent.TYPE.DEACTIVATED) {\n            fireHandlerChanged(new HandlerEvent(this, false, true));\n        }\n    }\n\n    @Override\n    public void handleEvent(HandlerEvent event) {\n        if (this.tool == event.getTool()\n                && event.getType() == HandlerEvent.TYPE.DEACTIVATED) {\n            fireHandlerChanged(new HandlerEvent(this, false, true));\n        }\n    }\n\n    @Override\n    public void handleEvent(HandlerEvent event) {\n        if (this.tool == event.getTool()\n                && event.getType() ==", "reference_code": "                }\n                setBaseEnabled(enabled);\n            } else {\n                setBaseEnabled(false);\n            }\n        } \n", "case_type": "block"}
{"generated_code": "import android.view.WindowManager;\nimport android.widget.TabHost;\n\npublic class BookmarksHistoryActivity extends TabActivity {\n\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    public void onPause() {\n        super.onPause();\n    }\n\n    @Override\n    public void onDestroy() {\n        super.onDestroy();\n    }\n\n    @Override\n    public void onLowMemory() {\n        super.onLowMemory();\n    }\n\n    @Override\n    public void onRestart() {\n        super.onRestart();\n    }\n\n    @Override\n    public void onStop() {\n        super.onStop();\n    }\n\n    @Override\n    public void onStart() {\n        super.onStart();\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    @Override\n    public void onRestoreInstanceState(Bundle savedInstanceState) {\n       ", "reference_code": "import android.view.WindowManager;\nimport android.widget.TabHost;\nimport android.widget.TabHost.OnTabChangeListener;\n\npublic class BookmarksHistoryActivity extends TabActivity {\n\n", "case_type": "block"}
{"generated_code": "    protected Thread getListenerThread() {\n        return listenerThread;\n    }\n\n    public List<InputPollListener> getListeners() {\n        return listeners;\n    }\n\n    public int getListenerCount() {\n        return listeners.size();\n    }\n\n    public boolean hasListeners() {\n        return !listeners.isEmpty();\n    }\n\n    public boolean hasListener(InputPollListener listener) {\n        return listeners.contains(listener);\n    }\n\n    public boolean hasListeners(InputPollListener... listeners) {\n        return this.listeners.containsAll(List.of(listeners));\n    }\n\n    public boolean hasListeners(List<InputPollListener> listeners) {\n        return this.listeners.containsAll(listeners);\n    }\n\n    public boolean hasListeners(InputPollListener listener, InputPollListener... listeners) {\n        return this.listeners.containsAll(List.of(listeners)) && this.listeners.contains(listener);\n    }\n\n    public boolean hasListeners(List<InputPollListener>", "reference_code": "    public boolean isRunning() {\n        return listenerThread.isAlive();\n", "case_type": "block"}
{"generated_code": "enges.BindChallenge annotation, Challenge value) {\n                        q.bind(annotation.value(), value.getId());\n                        q.bind(annotation.value(), value.getSender());\n                        q.bind(annotation.value(), value.getReceiver());\n                        q.bind(annotation.value(), value.getCreatedAt());\n                        q.bind(annotation.value(), value.getSenderScore());\n                        q.bind(annotation.value(), value.getReceiverScore());\n                        q.bind(annotation.value(), value.getStatus());\n                    }\n                };\n            }\n        }\n    }\n\n    public static class BindChallenge {\n        public static BindChallenge valueOf(String value) {\n            return new BindChallenge(value);\n        }\n        private final String value;\n        private BindChallenge(String value) {\n            this.value = value;\n        }\n    }\n}\n\n//src/main/java/com/example/restapi/Database/Friends.java\npackage com.example.restapi.Database;\n\nimport com.", "reference_code": "                        q.bind(SENDER, arg.getSender());\n                        q.bind(RECEIVER, arg.getReceiver());\n                        q.bind(CREATED_AT, arg.getCreatedAt());\n                        q.bind(SENDER_SCORE, arg.getSenderScore());\n                        q.bind(RECEIVER_SCORE, arg.getRecieverScore());\n", "case_type": "block"}
{"generated_code": "        this.verticalFrom = verticalFrom;\n    }\n\n    public void setVerticalTo(BigDecimal verticalTo) {\n        this.vertical = verticalTo;\n    }\n\n    public boolean isSetVerticalTo() {\n        return this.vertical != null;\n    }\n\n    public boolean isSetVertical() {\n        return this.vertical != null;\n    }\n\n    public boolean isSetVerticalFromAndTo() {\n        return this.verticalFrom != null && this.vertical != null;\n    }\n\n    public boolean isSetVerticalFromOrTo() {\n        return this.verticalFrom != null || this.vertical != null;\n    }\n\n    public boolean isSetVerticalFromOrToAnd() {\n        return this.verticalFrom != null || this.vertical != null;\n    }\n\n    public boolean isSetVerticalFromAndToOr() {\n        return this.verticalFrom != null && this.vertical != null;\n    }\n\n    public boolean isSetVerticalFromOrToAndOr() {\n        return this.verticalFrom !", "reference_code": "        this.verticalFrom = verticalFrom;\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public final void testSelect0() {\n        selectTopK(asList(11, 3, 2, 5, 19, 7, 23, 13, 17), 0);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public final void testSelectNegative() {\n        selectTopK(asList(11, 3, 2, 5, 19, 7, 23, 13, 17), -1);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public final void testSelectTooBig() {\n        selectTopK(asList(11, 3, 2, 5, 19, 7, 23, 13, 17), 10);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public final void testSelectTooBig2() {\n        selectTopK(asList(11, 3, 2", "reference_code": "    }\n", "case_type": "block"}
{"generated_code": "\n        }\n        HighlightControlFlowUtil.addHighlight(myClassOrLambda, InspectionGadgetsBundle.message(\"serializable.stores.non.serializable.problem.descriptor\", type.getPresentableText()));\n      }\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "reference_code": "      if (!SerializationUtils.isSerializable(aClass)) {\n        return;\n      }\n      lambda.accept(new LocalVariableReferenceFinder(lambda));\n    }\n", "case_type": "block"}
{"generated_code": "        if (other == null) {\n            return false;\n        }\n        if (getClass() != other.getClass()) {\n            return false;\n        }\n        Point3d otherPoint = (Point3d) other;\n        return Math.ceil(x) == Math.ceil(otherPoint.x)\n            && Math.ceil(y) == Math.ceil(otherPoint.y)\n            && Math.ceil(z) == Math.ceil(otherPoint.z);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        Point3d other = (Point3d) obj;\n        return Math.ceil(x) == Math.ceil(other.x)\n            && Math.ceil(y) == Math.ceil(other.y)\n            && Math.ceil(z) == Math.ceil(other.z);\n    }\n\n    public boolean isEqualTo(Point3", "reference_code": "\n    @Deprecated\n    public boolean ceilingEquals(Point3d otherPoint) {\n    return Math.ceil(x) == Math.ceil(otherPoint.x) &&\n            Math.ceil(y) == Math.ceil(otherPoint.y) &&\n", "case_type": "block"}
{"generated_code": "3);\n    b3.setName(\"b3\");\n    em.addBioAssay(b1);\n    em.addBioAssay(b2);\n    em.addBioAssay(b3);\n    return em;\n  }\n\n  public void testSimple() throws IOException {\n\n    ExpressionMatrix em = makeExpressionMatrix();\n    SimpleExpressionMatrixWriter writer = new SimpleExpressionMatrixWriter();\n    writer.setTranslator(new DummyTranslator());\n    writer.write(em, new FileOutputStream(\"test.txt\"));\n    SimpleExpressionMatrixReader reader = new SimpleExpressionMatrixReader();\n    reader.setTranslator(new DummyTranslator());\n    ExpressionMatrix em2 = reader.read(new FileInputStream(\"test.txt\"));\n    assertEquals(em, em2);\n  }\n\n  public void testSimpleWithTranslator() throws IOException {\n\n    ExpressionMatrix em = makeExpressionMatrix();\n    SimpleExpressionMatrixWriter writer = new SimpleExpressionMatrixWriter();\n    writer.setTranslator(new DummyTranslator());\n    writer.write(em,", "reference_code": "\n    String file1 = \"/files/PDR1gal_ctrred.txt\";\n    //String file1 = \"/files/PDR1_huge.txt\";\n\n", "case_type": "block"}
{"generated_code": "    @Override public String name() {\n        return CODEC_NAME;\n    }\n\n    @Override public String mediaType() {\n        return \"application/json\";\n    }\n\n    @Override public boolean canDecode(String s) {\n        return true;\n    }\n\n    @Override public boolean canEncode(String s) {\n        return true;\n    }\n\n    @Override public boolean canTransform(String s) {\n        return true;\n    }\n\n    @Override public boolean canDecode(byte[] bytes) {\n        return true;\n    }\n\n    @Override public boolean canEncode(byte[] bytes) {\n        return true;\n    }\n\n    @Override public boolean canTransform(byte[] bytes) {\n        return true;\n    }\n\n    @Override public boolean canDecode(Object o) {\n        return true;\n    }\n\n    @Override public boolean canEncode(Object o) {\n        return true;\n    }\n\n    @Override public boolean canTransform(Object o) {\n        return true;\n    }\n\n    @Override public boolean", "reference_code": "    @Override public String name() {\n        return CODEC_NAME;\n    }\n\n", "case_type": "block"}
{"generated_code": "    addExplicitExtension(XmlTemplateTreePatcher.INSTANCE, XMLLanguage.INSTANCE, new TemplateDataElementType());\n  }\n\n  @Override\n  protected String getBasePath() {\n    return MarkdownTestingUtil.TEST_DATA_PATH;\n  }\n\n  @Override\n  protected String getTestFilePath() {\n    return MarkdownTestingUtil.TEST_FILE_PATH;\n  }\n\n  @Override\n  protected String getTestFilePath(String fileName) {\n    return MarkdownTestingUtil.TEST_FILE_PATH + fileName;\n  }\n\n  @Override\n  protected String getTestFilePath(String fileName, String suffix) {\n    return MarkdownTestingUtil.TEST_FILE_PATH + fileName + suffix;\n  }\n\n  @Override\n  protected String getTestFilePath(String fileName, String suffix, String extension) {\n    return MarkdownTestingUtil.TEST_FILE_PATH + fileName + suffix + extension;\n  }\n\n  @Override\n  protected String getTestFilePath(String fileName, String suffix, String extension,", "reference_code": "\n    addExplicitExtension(TemplateDataElementType.TREE_PATCHER, XMLLanguage.INSTANCE, new XmlTemplateTreePatcher());\n  }\n", "case_type": "block"}
{"generated_code": "    }\n\n    /** Convert this to a primitive double. */\n    public double doubleValue() {\n        try {\n            // The following is a hack to deal with the fact that the\n            // String.valueOf() method returns a String with a leading\n            // space.\n            if (internalValue.charAt(0) == ' ')\n                internalValue = internalValue.substring(1);\n\n            // The following is a hack to deal with the fact that the\n            // String.valueOf() method returns a String with a trailing\n            // space.\n            if (internalValue.charAt(internalValue.length() - 1) == ' ')\n                internalValue = internalValue.substring(0, internalValue.length() - 1);\n\n            // The following is a hack to deal with the fact that the\n            // String.valueOf() method returns a String with a leading\n            // and trailing space.\n            if (internalValue.charAt(0) == ' ' && internalValue.charAt(internalValue.length() - 1) == ' ')\n                internalValue = internalValue.substring", "reference_code": "    }\n\n    /** Convert this to a primitive double. */\n    public double doubleValue() {\n        try {\n", "case_type": "block"}
{"generated_code": "\n             * to the page that is triggering the banner.\n             */\n    public AppBannerManager(Context context, Tab tab) {\n        if (TextUtils.isEmpty(tab.getUrl())) return;\n\n        // Convert icon size from dp to px.\n        // TODO(crbug.com/648336): Use the same value as in the native code.\n        // TODO(crbug.com/648336): Remove this once the native code uses the same value.\n        // TODO(crbug.com/648336): Remove this once the native code uses the same value.\n        // TODO(crbug.com/648336): Remove this once the native code uses the same value.\n        // TODO(crbug.com/648336): Remove this once the native code uses the same value.\n        // TODO(crbug.com/648336): Remove this once the native code uses the same value.\n        // TODO(crbug.com/648336): Remove this once the native code uses the same", "reference_code": "\n    /**\n     * Constructs an AppBannerManager for the given tab.\n     * @param tab Tab that the AppBannerManager will be attached to.\n     */\n    public AppBannerManager(Tab tab, Context context) {\n", "case_type": "block"}
{"generated_code": ".thenApply(integer -> 2 * integer);\n        assertFalse(futureAppliedFail.isDone());\n        futureAppliedFail.completeExceptionally(new RuntimeException(\"We require more vespene gas\"));\n        ExecutionException e = assertThrows(ExecutionException.class, futureAppliedFail::get);\n        assertEquals(RuntimeException.class, e.getCause().getClass());\n        assertEquals(\"We require more vespene gas\", e.getCause().getMessage());\n    }\n\n    private static class CompleterThread<T> extends Thread {\n        private final KafkaFuture<T> future;\n        private final T value;\n        private Exception testException;\n\n        public CompleterThread(KafkaFuture<T> future, T value) {\n            this.future = future;\n            this.value = value;\n        }\n\n        @Override\n        public void run() {\n            try {\n                future.complete(value);\n            } catch (Exception e) {\n                testException = e;\n            }\n        }\n    }\n\n    @Test\n    public void testThenApplyList()", "reference_code": "                }\n                future.complete(value);\n", "case_type": "block"}
{"generated_code": "    public Long getId();\n\n    public void setId(Long id);\n\n    public String getAddress();\n\n    public void setAddress(String address);\n\n    public String getAddressNumber();\n\n    public void setAddressNumber(String addressNumber);\n\n    public String getAddressComplement();\n\n    public void setAddressComplement(String addressComplement);\n\n    public String getAddressDistrict();\n\n    public void setAddressDistrict(String addressDistrict);\n\n    public String getAddressCity();\n\n    public void setAddressCity(String addressCity);\n\n    public String getAddressState();\n\n    public void setAddressState(String addressState);\n\n    public String getAddressCountry();\n\n    public void setAddressCountry(String addressCountry);\n\n    public String getAddressZipCode();\n\n    public void setAddressZipCode(String addressZipCode);\n\n    public String getAddressType();\n\n    public void setAddressType(String addressType);\n\n    public String getAddressReference();\n\n    public void setAddressReference(String addressReference);\n\n    public String getAddressReferenceNumber();", "reference_code": "    public Integer getId();\n\n    public void setId(Integer id);  \n", "case_type": "block"}
{"generated_code": "  private static void raw(GatecoinAccountServiceRaw accountService) throws IOException {\n\n    GatecoinWithdrawResult gatecoinDepositAddressResult = accountService.withdrawFunds(Currency.BTC, BigDecimal.valueOf(0.1), \"AddresssName\");\n\n    // Print the response\n    System.out.println(\"GatecoinDepositAddess: \" + gatecoinDepositAddressResult.getResponse());\n\n    // Print the response status\n    // This is a generic response, so the status is always present\n    // See the GatecoinExchangeDemo for a more specific example\n    // of a response with a status\n\n    // This is a generic response, so the status is always present\n    // See the GatecoinExchangeDemo for a more specific example\n    // of a response with a status\n\n    // Print the response status\n    // This is a generic response, so the status is always present\n    // See the GatecoinExchangeDemo for a more specific example\n    // of a response with a status\n\n    // This is a generic response, so the status is always present\n", "reference_code": "  private static void raw(GatecoinAccountServiceRaw accountService) throws IOException {\n\n    // Get the account information\n    GatecoinWithdrawResult gatecoinDepositAddressResult = accountService.withdrawGatecoinFunds(\"BTC\", BigDecimal.valueOf(0.1), \"BATMAN\");\n", "case_type": "block"}
{"generated_code": "  private java.lang.String sectionType;\n\n  /**\n   * Required. The ID of the customer for whom the device is being claimed.\n   * @return value or {@code null} for none\n   */\n  public java.lang.Long getCustomerId() {\n    return customerId;\n  }\n\n  /**\n   * Required. The ID of the customer for whom the device is being claimed.\n   * @param customerId customerId or {@code null} for none\n   */\n  public ClaimDeviceRequest setCustomerId(java.lang.Long customerId) {\n    this.customerId = customerId;\n    return this;\n  }\n\n  public ClaimDeviceRequest setDeviceIdentifier(DeviceIdentifier deviceIdentifier) {\n    this.deviceIdentifier = deviceIdentifier;\n    return this;\n  }\n\n  public ClaimDeviceRequest setDeviceMetadata(DeviceMetadata deviceMetadata) {\n    this.deviceMetadata = deviceMetadata;\n    return this;\n  }\n\n  public ClaimDeviceRequest setSectionType(java.lang.String sectionType) {\n    this.sectionType = sectionType;\n   ", "reference_code": "  private java.lang.String sectionType;\n\n", "case_type": "block"}
{"generated_code": "InboundEndpointOnErrorSequenceContainer\"); //$NON-NLS-1$\n    }\n\n    /**\n         * This returns the image for the adapted class.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    @Override\n    public Object getImage(Object object, Object child) {\n        return getImage(object);\n    }\n\n    /**\n     * This returns the image for the adapted class.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    @Override\n    public Object getImage(Object object, Object child, ViewerNotification notification) {\n        return getImage(object, child);\n    }\n\n    /**\n     * This returns the image for the adapted class.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n    @Override\n    public Object getImage(Object object, Object child, Notification notification) {\n        return", "reference_code": "     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @generated\n     */\n", "case_type": "block"}
{"generated_code": "    }\n\n    public void setMotivo(final String motivo) {\n        this.motivo = motivo;\n    }\n\n    public void setEventoRetorno(final NFEventoRetorno eventoRetorno) {\n        this.eventoRetorno.add(eventoRetorno);\n    }\n\n    public void setEventoRetorno(final NFEventoRetorno... eventoRetorno) {\n        for (final NFEventoRetorno evento : eventoRetorno) {\n            this.eventoRetorno.add(evento);\n        }\n    }\n\n    public void setEventoRetorno(final List<NFEventoRetorno> eventoRetorno) {\n        this.eventoRetorno = eventoRetorno;\n    }\n\n    public void setEventoRetorno(final NFEventoRetorno eventoRetorno, final NFEventoRetorno... eventoRetorno) {\n        this.eventoRetorno.add(eventoRetorno", "reference_code": "    }\n\n    public void setMotivo(final String motivo) {\n        this.motivo = motivo;\n    }\n", "case_type": "block"}
{"generated_code": "        }\n    }\n\n    @Override\n    protected void setValue(String name, String value) {\n        try {\n            if (Storage.isLocalStorageSupported()) {\n                Storage.getLocalStorageIfSupported().put(name, value);\n            }\n\n            // TODO: remove this when we can use the new StorageMap\n            stateMap.put(name, value);\n            //stateMap.put(name, value, Storage.getLocalStorageIfSupported());\n        } catch(Exception e) {\n            LOGGER.log(Level.WARNING, \"setValue() failed\", e);\n        }\n    }\n\n    @Override\n    protected void setValue(String name, String value, boolean async) {\n        try {\n            if (Storage.isLocalStorageSupported()) {\n                Storage.getLocalStorageIfSupported().put(name, value);\n            }\n\n            // TODO: remove this when we can use the new StorageMap\n            stateMap.put(name, value);\n            //stateMap.put(name, value, Storage.getLocalStorageIfSupported());\n        } catch(Exception", "reference_code": "        }\n    }\n\n    @Override\n    protected void setValue(String name, String value) {\n        try {\n", "case_type": "block"}
{"generated_code": "\n    @Override\n    public void performAbility(Player player) {\n        player.damage(this.getUnit(), 1);\n\n        //Scrap an opponent's unit costing 5 Industry or less\n        player.getOpponent().getPlayer().getHand().add(player.getOpponent().getUnit());\n        player.getOpponent().getPlayer().getHand().remove(player.getOpponent().getUnit());\n        player.getOpponent().getPlayer().getHand().remove(player.getOpponent().getUnit());\n        player.getOpponent().getPlayer().getHand().remove(player.getOpponent().getUnit());\n        player.getOpponent().getPlayer().getHand().remove(player.getOpponent().getUnit());\n        player.getOpponent().getPlayer().getHand().remove(player.getOpponent().getUnit());\n        player.getOpponent().getPlayer().getHand().remove(player.getOpponent().getUnit());\n        player.getOpponent().getPlayer().getHand().remove(player.getOpponent().getUnit());\n        player.getOpponent", "reference_code": "\n    @Override\n    public void useAbility(Player player) {\n        player.cardDamaged(unit);\n        player.addGameLog(player.getPlayerName() + \" gets to scrap an opponent's unit costing 5 Industry or less due to damaging \" + unit.getName() + \" with Death From Above ability\");\n", "case_type": "block"}
{"generated_code": "_        c.set(Calendar.DAY_OF_MONTH, day);\n        return Multilanguage.on + \" \" + c.get(Calendar.DAY_OF_MONTH) + \" \" + getMonthName(c.get(Calendar.MONTH));\n    }\n\n    public static String getMonthName(int month) {\n        return new DateFormatSymbols().getMonths()[month];\n    }\n\n    public static String getDateRepresentation(String date) {\n        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.US);\n        return df.format(new Date(date));\n    }\n\n    public static String getDateRepresentation(Date date) {\n        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.US);\n        return df.format(date);\n    }\n\n    public static String getDateRepresentation(long date) {\n        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\", Locale.US);\n        return df.format(new Date(date));", "reference_code": "        c.set(Calendar.DAY_OF_MONTH, day);\n\n        return getDateRepresentation(c.getTimeInMillis());\n    }\n\n    public static String getDateForSearch(long date) {\n", "case_type": "block"}
{"generated_code": "        }\n        result = true;\n        dispose();\n    }\n\n    public void apply() {\n        logger.info(\"\");\n        ok();\n    }\n\n    public void help() {\n        logger.info(\"\");\n        GGraphicsFactory.getInstance().showHelpDialog(this, action.getHelpId());\n    }\n\n    public void okCancel() {\n        logger.info(\"\");\n        cancel();\n    }\n\n    public void applyCancel() {\n        logger.info(\"\");\n        cancel();\n    }\n\n    public void applyOk() {\n        logger.info(\"\");\n        ok();\n    }\n\n    public void okCancelOk() {\n        logger.info(\"\");\n        ok();\n    }\n\n    public void applyOkCancel() {\n        logger.info(\"\");\n        cancel();\n    }\n\n    public void applyOkCancelOk() {\n        logger.info(\"\");\n        ok();\n    }\n\n    public void applyOkCancelCancel() {\n        logger.info(\"\");\n        cancel();\n    }\n\n    public void applyOkCancelCancelCancel() {\n", "reference_code": "        }\n        option = OK_OPTION;\n        result = true;\n        dispose();\n    }\n", "case_type": "block"}
{"generated_code": "        this.myStack = myStack;\n    }\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务方法\n\n    // 业务", "reference_code": "        this.myStack = myStack;\n    }\n\n", "case_type": "block"}
{"generated_code": "();\n        return -1;\n    }\n\n    public void setLineNumber(int lineNumber) {\n        if (lr != null)\n            lr.        } catch (IOException e) {\n            logger.log(Level.WARNING, \"could not open file \" + file, e);\n        }\n        try {\n            fr = new FileReader(file);\n            lr = new LineNumberReader(fr);\n        } catch (Exception e) {\n            logger.log(Level.WARNING, \"could not open file \" + file, e);\n        }\n    }\n\n    public IntelligentFileReader(URL url) {\n        try {\n            URLConnection connection = url.openConnection();\n            if (connection.getContentEncoding() != null) {\n                encoding = connection.getContentEncoding();\n            }\n            if (connection.getContentType().toLowerCase().endsWith(\"gzip\")) {\n                try {\n                    is = new GZIPInputStream(connection.getInputStream());\n                    lr = new LineNumberReader(new InputStreamReader(is, encoding));\n                } catch (Exception e", "reference_code": "                    is = new FileInputStream(file);\n                    lr = new LineNumberReader(new InputStreamReader(is, encoding));\n", "case_type": "block"}
{"generated_code": "Detach() {\n        Log.d(TAG, \"//////// onDetach:\");\n        super.onDetach();\n        mListener = null;\n    }\n\n    public void setTeam(String team) {\n        mTeam = team;\n    }\n    public void setKind(Kind kind) {\n        mKind = kind;\n    }\n\n    public interface OnPostListFragmentInteractionListener {\n        void onPostListFragmentInteraction(Post post);\n    }\n}\n\n    @Override\n    public void onDestroy() {\n        Log.d(TAG, \"//////// onDestroy:\");\n        super.onDestroy();\n    }\n\n    public void setDivider(PostListDivider divider) {\n        mDivider = divider;\n    }\n\n    public void setDivider(int divider) {\n        mDivider = new PostListDivider(getActivity(), divider);\n    }\n\n    public void setDivider(int divider, int color) {\n        mDiv        recyclerView.setAdapter(new PostListDivider(context, mDivider));\n        recyclerView", "reference_code": "            recyclerView.addItemDecoration(mDivider);\n", "case_type": "block"}
{"generated_code": "    }\n    LOG.info(String.format(\"API disconnect was arrived with sessionId = %s\", sessionId));\n  }\n\n  @EventListener\n  public void disconnect(SessionDisconnectEvent sde)\n  {\n    MessageHeaders msgHeaders = sde.getMessage().getHeaders();\n    String sessionId  = (String) msgHeaders.get(\"simpSessionId\");\n    if (sessionId != null) {\n      namedTasksSubscriptions.removeSession(sessionId);\n    }\n    LOG.info(String.format(\"API disconnect was arrived with sessionId = %s\", sessionId));\n  }\n\n  @EventListener\n  public void disconnect(SessionDisconnectEvent sde)\n  {\n    MessageHeaders msgHeaders = sde.getMessage().getHeaders();\n    String sessionId  = (String) msgHeaders.get(\"simpSessionId\");\n    if (sessionId != null) {\n      namedTasksSubscriptions.removeSession(sessionId);\n    }\n    LOG.info(String.format(\"API disconnect was arrived with sessionId = %s\", sessionId));\n  }\n\n  @EventListener\n  public void", "reference_code": "    }\n    LOG.info(String.format(\"API disconnect was arrived with sessionId = %s\",\n        sessionId));\n  }\n", "case_type": "block"}
{"generated_code": "     */\n    Object getOriginalResponse();\n\n    /**\n     * 获得最原始的请求对象，例如在servlet中可能需要HttpServletRequest.\n     * 注意：如果请求对象是原生的servletRequest，则返回的是原生的servletRequest，否则返回的是包装后的servletRequest。\n     * 例如：如果请求对象是org.apache.catalina.servlet4preview.http.HttpServletRequestWrapper，则返回的是org.apache.catalina.servlet4preview.http.HttpServletRequestWrapper。\n     * 如果请求对象是org.apache.catalina.servlet4preview.http.HttpServletRequest，则返回的是org.apache.catalina.servlet4preview.http.HttpServletRequest。\n     * 如果请求对象是org.apache.catalina.servlet4preview.http.HttpServletRequestWrapper，则返回的是org.apache.catalina.servlet4preview.http.HttpServletRequestWrapper。\n     * 如果请求对象是org.apache.catalina.servlet4pre", "reference_code": "     */\n    <T> T getOriginalResponse();\n\n    /**\n     * 获得最原始的请求对象，例如在servlet中可能需要HttpServletRequest.\n", "case_type": "block"}
{"generated_code": "import org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ModelAttribute;\n\nimport java.security.Principal;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\nimport java.util.stream.StreamSupport.StreamBuilder;\nimport java.util.stream.StreamSupport.StreamSubscriber;\nimport java.util.stream.StreamSupport.StreamSupportAdapter;\nimport java.util.stream.StreamSupport.StreamSubscription;\nimport java.util.stream.StreamSupport.StreamSupportAdapter;\nimport java.util.stream.StreamSupport.StreamSubscription;\nimport java.util.stream.StreamSupport.StreamSupportAdapter;\nimport java.util.stream.StreamSupport.StreamSubscriber;\nimport java.util.stream.StreamSupport.StreamSupportAdapter;\nimport java.util.stream.StreamSupport.StreamSubscription;\nimport java.util.stream.Stream", "reference_code": "import org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ModelAttribute;\n", "case_type": "block"}
{"generated_code": " onEnd(@Nullable Response response) {        protected final CommunicationStatus communicationStatus;\n\n    /**\n     * the listener\n     */\n    @Nullable\n    protected StatusUpdateListener listener;\n\n    /**\n     * the cookie store\n     */\n    @Nullable\n    protected CookieStore cookieStore;\n\n    /**\n     * the JSON deserializer\n     */\n    protected final Gson getGson() {\n        return gson;\n    }\n\n    /**\n         * the request\n     */\n    @Nullable\n    protected Request request;\n\n    /**\n     * the response\n     */\n    @Nullable\n    protected Response response;\n\n    /**\n     * the response\n     */\n    @Nullable\n    protected Response response;\n\n    /**\n     * the response\n     */\n    @Nullable\n    protected Response response;\n\n    /**\n     * the response\n     */\n    @Nullable\n    protected Response response;\n\n    /**\n     * the response\n     */\n    @Nullable\n    protected Response response;\n\n    /**\n     * the response\n     */\n    @Nullable\n    protected Response response", "reference_code": "    private final CommunicationStatus communicationStatus;\n\n    /**\n     * listener to provide updates to the WebInterface class\n     */\n    private @Nullable StatusUpdateListener listener;\n", "case_type": "block"}
{"generated_code": "        return vo;\n    }\n\n    public void deleteView(int id) {\n        doDelete(\"delete from mangoViews where id = ?\", new Object[] { id });\n    }\n\n    public void deleteView(String xid) {\n        doDelete(\"delete from mangoViews where xid = ?\", new Object[] { xid });\n    }\n\n    public void deleteView(String xid, int id) {\n        doDelete(\"delete from mangoViews where xid = ? and id = ?\", new Object[] { xid, id });\n    }\n\n    public void deleteView(String xid, int id, int userId) {\n        doDelete(\"delete from mangoViews where xid = ? and id = ? and userId = ?\", new Object[] { xid, id, userId });\n    }\n\n    public void deleteView(String xid, int id, int userId, boolean anonymousAccess) {\n        doDelete(\"delete from mangoViews where xid = ? and id = ? and userId = ? and anonymousAccess = ?\", new Object[] { xid,", "reference_code": "        return null;\n    }\n", "case_type": "block"}
{"generated_code": "        }\n        return new Point(xTop/bot, yTop/bot);\n\n        //return new Point(xTop/bot, yTop/bot);\n\n        //return new Point(xTop/bot, yTop/bot);\n\n        //return new Point(xTop/bot, yTop/bot);\n\n        //return new Point(xTop/bot, yTop/bot);\n\n        //return new Point(xTop/bot, yTop/bot);\n\n        //return new Point(xTop/bot, yTop/bot);\n\n        //return new Point(xTop/bot, yTop/bot);\n\n        //return new Point(xTop/bot, yTop/bot);\n\n        //return new Point(xTop/bot, yTop/bot);\n\n        //return new Point(xTop/bot, yTop/bot);\n\n        //return new Point(xTop/bot, yTop/bot);\n\n        //return new Point(xTop/bot, yTop/bot);\n\n        //return new Point(xTop/bot, yTop/bot);\n\n        //", "reference_code": "        }\n        return new Point(xTop/bot, yTop/bot);\n", "case_type": "block"}
{"generated_code": "WorldInfo().isRaining() && worldObj.getWorldInfo().isThundering())\n            return 1;\n        return 0;\n    }\n\n    @Override\n    boolean canHit(EntityLivingBase mop) {\n        return mop != shootingEntity;\n    }\n\n    @Override\n    boolean canHit(EntityLivingBase mop, int sideHit) {\n        return canHit(mop);\n    }\n    }\n\n    @Override\n    int getBurstDamage() {\n        return 1;\n    }\n\n    @Override\n    int getRicochetMax() {\n        return 1;\n    }\n\n    @Override\n    int getDamageOfShot(EntityLivingBase mop) {\n        return 0;\n    }\n\n    @Override\n    boolean canHit(EntityLivingBase mop) {\n        return mop != shooting        if (worldObj.canLightningStrikeAt((int) (mop.posX + 0.5F), (int) (mop.posY + 0.", "reference_code": "    }\n\n", "case_type": "block"}
{"generated_code": "\nimport com.google.k2crypto.BuilderException;\nimport com.google.k2crypto.DSAPrivateKeyVersion;\nimport com.google.k2crypto.KeyVersion;\nimport com.google.k2crypto.PublicKeyVersion;\nimport com.google.k2crypto.exceptions.BuilderException;\nimport com.google.k2crypto.exceptions.DecryptionException;\nimport com.google.k2crypto.exceptions.KeyVersionException;\nimport com.google.k2crypto.exceptions.SignatureException;\nimport com.google.k2crypto.exceptions.VerificationException;\nimport com.google.k2crypto.keys.DSAPrivateKey;\nimport com.google.k2crypto.keys.DSAPublicKey;\nimport com.google.k2crypto.keys.ECPrivateKey;\nimport com.google.k2crypto.keys.ECPublicKey;\nimport com.google.k2crypto.keys.RSAKeyPair;\nimport com.google.k2crypto.keys.RSAKeyPair.", "reference_code": "\nimport com.google.k2crypto.exceptions.BuilderException;\n", "case_type": "block"}
{"generated_code": "\n            ajouterFragment(new AccueilFragment());\n        }\n       @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState) {\n        if (savedInstanceState != null) {\n            this.savedInstanceState = savedInstanceState;\n        }\n\n        // TODO Auto-generated method stub\n\n        // return super.onCreateView(inflater, container, savedInstanceState,\n        // R.layout.modifier_jours_layout);\n\n        // return inflater.inflate(R.layout.modifier_jours_layout, container,\n        // false);\n\n        // return super.onCreateView(inflater, container, savedInstanceState,\n        // R.layout.modifier_jours_layout);\n\n        // return inflater.inflate(R.layout.modifier_jours_layout, container,\n        // false);\n\n        // return super.onCreateView(inflater, container, savedInstanceState,\n        // R.layout.modifier_jours_layout", "reference_code": "    @Override\n    public View onCreateView(LayoutInflater inflater, ViewGroup container,\n            Bundle savedInstanceState) {\n\n", "case_type": "block"}
{"generated_code": "    }\n\n    /** Create a stream with one element */\n    public RewriteRuleTokenStream(TreeAdaptor adaptor,\n                                  String elementDescription,\n                                  Token oneElement)\n    {\n        super(adaptor, elementDescription, oneElement);\n    }\n\n    /** Create a stream, but feed off an existing list */\n    public RewriteRuleTokenStream(TreeAdaptor adaptor,\n                                  String elementDescription,\n                                  List elements,\n                                  Token oneElement)\n    {\n        super(adaptor, elementDescription, elements, oneElement);\n    }\n\n    /** Create a stream with one element */\n    public RewriteRuleTokenStream(TreeAdaptor adaptor,\n                                  String elementDescription,\n                                  Token oneElement,\n                                  int start, int stop)\n    {\n        super(adaptor, elementDescription, oneElement, start, stop);\n    }\n\n    /** Create a stream, but feed off an existing list */\n    public RewriteRuleTokenStream(TreeAdaptor adaptor,\n                                  String elementDescription,\n                                  List elements,\n                                  Token oneElement,\n", "reference_code": "    }\n\n", "case_type": "block"}
{"generated_code": "     * @param name\n     *            Name of the document\n     * @param termFreq\n     *            Map of terms to frequency\n     * @throws IllegalArgumentException\n     *             If termFreq is null\n     * @throws IllegalArgumentException\n     *             If name is null\n     * @throws IllegalArgumentException\n     *             If name is empty\n     * @throws IllegalArgumentException\n     *             If termFreq is empty\n     * @throws IllegalArgumentException\n     *             If termFreq contains null\n     * @throws IllegalArgumentException\n     *             If termFreq contains duplicate keys\n     * @throws IllegalArgumentException\n     *             If termFreq contains negative frequency\n     * @throws IllegalArgumentException\n     *             If termFreq contains frequency greater than 1\n     * @throws IllegalArgumentException\n     *             If termFreq contains frequency less than 0\n     * @throws IllegalArgumentException\n     *             If termFreq contains frequency greater than 1\n     * @throws IllegalArgumentException\n     *             If termFreq contains frequency less than 0\n     * @throws IllegalArgumentException\n     *             If termFreq contains frequency greater than 1\n     * @", "reference_code": "     * @param name - the document name\n     * @param termFreq - the map of term frequencies\n", "case_type": "block"}
{"generated_code": "ename()  }\n\n  public void testExtractFromIfStatement() throws Exception {\n    doTest();\n  }\n\n  public void testExtractFromIfStatementInsideAnonymous() throws Exception {\n    doTest();\n  }\n\n  public void testConditionalExitWithoutCodeBlock() throws Exception {\n    doTest();\n  }\n\n  public void testReturnExitStatement() throws Exception {\n    doTest();\n  }\n\n  public void testFromStaticContext() throws Exception {\n    doTest();\n  }\n\n  public void testBatchUpdateCausedByFormatter() throws Exception {\n    doTest();\n  }\n\n  public void testFormattingInside() throws Exception {\n    doTest();\n   public void testExtractFromIfStatement() throws Exception {\n    doTest();\n  }\n\n  public void testExtractFromIfStatementInsideAnonymous() throws Exception {\n    doTest();\n  }\n\n  public void testConditionalExitWithoutCodeBlock() throws Exception {\n    doTest();\n  }\n\n  public void testReturnExitStatement() throws Exception {\n    doTest();", "reference_code": "  public void testExtractFromAnonymous() throws Exception {\n    doTest();\n  }\n", "case_type": "block"}
{"generated_code": "    }\n\n    /**\n     * Main method to run the tests.<p>\n     *\n     * @param args command line arguments\n     */\n    public static void main(String[] args) {\n\n        junit.textui.TestRunner.run(suite());\n    }\n\n    /**\n     * Returns the JUnit test suite for this package.<p>\n     *\n     * @return the JUnit test suite for this package\n     */\n    public static Test suite() {\n\n        return suite();\n    }\n\n    // $JUnit-BEGIN$\n\n    // $JUnit-END$\n\n    // $JUnit-BEGIN$\n\n    // $JUnit-END$\n\n    // $JUnit-BEGIN$\n\n    // $JUnit-END$\n\n    // $JUnit-BEGIN$\n\n    // $JUnit-END$\n\n    // $JUnit-BEGIN$\n\n    // $JUnit-END$\n\n    // $JUnit-BEGIN$\n\n    // $JUnit-END$\n\n    // $JUnit-BEGIN$\n\n    //", "reference_code": "    }\n\n", "case_type": "block"}
{"generated_code": "add(        String detailUrl = \"\";\n        switch (category)\n        {\n            case \"网球场\":\n                detailUrl.append(this.getString(R.string.volleyballUrl));\n                break;\n            case \"乒乓球馆\":\n                detailUrl.append(this.getString(R.string.pingpongUrl));\n                break;\n            case \"游泳馆\":\n                detailUrl.append(this.getString(R.string.swimmingUrl));\n                break;\n            case \"健身馆\":\n                detailUrl.append(this.getString(R.string.gymUrl));\n                break;\n            case \"台球厅\":\n                detailUrl.append(this.getString(R.string.billiardUrl));\n                break;\n        }\n        requestQueue = Volley.newRequestQueue(context);\n        sendRequest(detailUrl.toString(), requestQueue);\n\n        gymAdapter = new GymAdapter(GymListActivity.this, R.layout.sport_venue_lists_item, gymList);\n\n        ListView gym_list = (ListView)", "reference_code": "        StringBuilder detailUrl = new StringBuilder();\n        switch (category) {\n            case \"羽毛球场\":\n                detailUrl.append(this.getString(R.string.badmintonUrl));\n                break;\n            case \"乒乓球馆\":\n", "case_type": "block"}
{"generated_code": "\n  @Test\n  public void testContextLoads() {\n  }\n\n  @Test\n  public void testContextLoads2() {\n  }\n\n  @Test\n  public void testContextLoads3() {\n  }\n\n  @Test\n  public void testContextLoads4() {\n  }\n\n  @Test\n  public void testContextLoads5() {\n  }\n\n  @Test\n  public void testContextLoads6() {\n  }\n\n  @Test\n  public void testContextLoads7() {\n  }\n\n  @Test\n  public void testContextLoads8() {\n  }\n\n  @Test\n  public void testContextLoads9() {\n  }\n\n  @Test\n  public void testContextLoads10() {\n  }\n\n  @Test\n  public void testContextLoads11() {\n  }\n\n  @Test\n  public void testContextLoads12() {\n  }\n\n  @Test\n  public void testContextLoads13() {\n  }\n\n  @Test\n ", "reference_code": "\n  @Test\n", "case_type": "block"}
{"generated_code": "\n    @OneToMany(mappedBy = \"investigator\")\n    public List<StudyInvestigator>    private String streetAddress;\n    private String city;\n    private String stateCode;\n    private String postalCode;\n    private String countryCode;\n    private String telecomAddress;\n\n    @OneToMany(mappedBy = \"investigator\")\n    @Column(name = \"STUDY_INVESTIGATOR\")\n    @org.hibernate.annotations.Cascade(value = { org.hibernate.annotations.CascadeType.SAVE_UPDATE })\n    @org.hibernate.annotations.LazyCollection(org.hibernate.annotations.LazyCollectionOption.EXTRA)\n    @org.hibernate.annotations.LazyCollection(org.hibernate.annotations.LazyCollectionOption.SELECT)\n    @org.hibernate.annotations.LazyCollection(org.hibernate.annotations.LazyCollectionOption.IDENTITY_COLLECTION)\n    @org.hibernate.annotations.LazyCollection(org.hibernate.an", "reference_code": "    private String streetAddress;\n    private String city;\n    private String stateCode;\n    private String postalCode;\n    private String countryCode;\n    private String telecomAddress;\n", "case_type": "block"}
{"generated_code": " definition builder\n     * @param callback user given callback\n     */\n    public static void parseCustomAttributes(Element element, BeanDefinitionBuilder builder,\n            AttributeCallback callback) {\n        AttributeCallback[] callbacks = new AttributeCallback[] { callback };\n        parseCustomAttributes(element, builder, callbacks);\n    }\n\n    public static void parseCustomAttributes(Element element, BeanDefinitionBuilder builder,\n            TypedStringValue callback) {\n        parseCustomAttributes(element, builder, callback.getValue());\n    }\n\n    public static void parseCustomAttributes(Element element, BeanDefinitionBuilder builder,\n            Set<TypedStringValue> callbacks) {\n        AttributeCallback[] callbacksArray = new AttributeCallback[callbacks.size()];\n        callbacks.toArray(callbacksArray);\n        parseCustomAttributes(element, builder, callbacksArray);\n    }\n\n    public static void parseCustomAttributes(Element element, BeanDefinitionBuilder builder,\n            ManagedSet<TypedStringValue> callbacks) {\n        Set<TypedStringValue> callbacksArray = new ManagedSet<TypedStringValue", "reference_code": "            } else {\n                // add adapter definition for bean references (which can be classes)\n                interfaces.add(BeanDefinitionBuilder.genericBeanDefinition(ToStringClassAdapter.class)\n                        .addConstructorArgValue(clazz).getBeanDefinition());\n            }\n", "case_type": "block"}
{"generated_code": "\n    //    /**\n    //     * Sets the value of the '{@link org.dresdenocl.language.ocl.VariableDeclarationWithInitCS#getEqual <em>Equal</em>}' attribute.\n    //     * <!-- begin-user-doc -->\n    //     * <!-- end-user-doc -->\n    //     * @param value the new value of the '<em>Equal</em>' attribute.\n    //     * @see #getEqual()\n    //     * @generated\n    //     */\n    //    void setEqual(String value);\n\n    /**\n     * Sets the value of the '{@link org.dresdenocl.language.ocl.VariableDeclarationWithInitCS#getEqual <em>Equal</em>}' attribute.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @param value the new value of the '<em>Equal</em>' attribute.\n     * @see #getEqual()\n     * @generated\n     */\n    void setEqual(", "reference_code": "\n    /**\n     * Sets the value of the '{@link org.dresdenocl.language.ocl.VariableDeclarationWithInitCS#getEqual <em>Equal</em>}' attribute.\n     * <!-- begin-user-doc -->\n     * <!-- end-user-doc -->\n     * @param value the new value of the '<em>Equal</em>' attribute.\n", "case_type": "block"}
{"generated_code": ".get(nodeIndex).addNextWord(starter);\n        }\n    }\n\n    private int findWordNode(String word) {\n        ListIterator<ListNode> iter = wordList.listIterator();\n        while (iter.hasNext()) {\n            ListNode n = iter.next();\n            if (n.getWord().equals(word)) {\n                return iter.previousIndex();\n            }\n        }\n        return -1;\n    }\n\n}\n\nclass ListNode {\n    private String word;\n    private List<String> nextWords;\n\n    public ListNode(String word) {\n        this.word = word;\n        nextWords = new LinkedList<String>();\n    }\n\n    public void addNextWord(String nextWord) {\n        nextWords.add(nextWord);\n    }\n\n    public String getWord() {\n        return word;\n    }\n\n    public String getRandomNextWord(Random rnGenerator) {\n        int rand = rnGenerator.nextInt(nextWords.size());\n        return nextWords.get(rand", "reference_code": "    public String getWord()\n    {\n        return word;\n", "case_type": "block"}
{"generated_code": ");\n        attr.setValue(attrValue);\n        targetElement.setAttributeNode(attr);\n    }\n\n    private void validate(String xmlDoc, String xsdPath) throws SAXException {\n        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n        Schema schema = sf.newSchema(new File(xsdPath));\n        Validator validator = schema.newValidator();\n        Source source = new StreamSource(new StringReader(xmlDoc));\n                   return this.createXmlDoc(groupList);\n        }\n\n    private String createXmlDoc(ArrayList<Group> groupList) {\n        String xmlDoc = \"\";\n        String userId = UUID.randomUUID().toString();\n        System.out.println(userId);\n\n        // Create XML document\n        // Create XML document\n        // Create XML document\n        // Create XML document\n        // Create XML document\n        // Create XML document\n        // Create XML document\n        // Create XML document\n        // Create XML document\n        // Create XML document\n        // Create XML document", "reference_code": "    public String buildGroupXML(UUID userId, ArrayList<Group> subscription) {\n        String xmlDoc = \"\";\n", "case_type": "block"}
{"generated_code": "  public Manipulator(T obj) { this.obj = obj; }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n  //public void manipulate() { obj.f(); }\n", "reference_code": "  public Manipulator(T x) { obj = x; }\n", "case_type": "block"}
{"generated_code": "PageScrolled(0, 0, 0);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // TODO Auto-generated method stub\n        MenuInflater inflater = getMenuInflater();\n        inf        public void onPageSelected(int arg0) {\n            pageIndicator.setText(String.valueOf(arg0 + 1) + \"/\" + pics.length);\n            if (arg0 == pics.length - 1) {\n                adapter.setPics(ICoDir.getPics(getApplicationContext()));\n                mJazzy.setAdapter(adapter);\n            }\n            if (arg0 == 0) {\n                adapter.setPics(pics);\n                mJazzy.setAdapter(adapter);\n            }\n            if (TextUtils.isEmpty(url)) {\n                adapter.setPics(ICoDir.getPics(getApplicationContext()));\n                mJazzy.setAdapter(adapter);\n            }\n            if (!TextUtils.isEmpty(url)) {\n                adapter.setPics(p", "reference_code": "            public void onPageSelected(int pos) {\n                pageIndicator.setText((pos+1)+\"/\"+adapter.getCount());\n", "case_type": "block"}
{"generated_code": " }        this.localAddr = request.getLocalAddr();\n        this.localName = request.getLocalName();\n\n        // The port number is not available on all servers.\n        // We can't use request.getLocalPort() here.\n        // We can't use request.getServerPort() here either.\n        // We can't use request.getPort() either.\n        // We can't use request.getPortNumber() either.\n        // We can't use request.getPortNumber() either.\n        // We can't use request.getPortNumber() either.\n        // We can't use request.getPortNumber() either.\n        // We can't use request.getPortNumber() either.\n        // We can't use request.getPortNumber() either.\n        // We can't use request.getPortNumber() either.\n        // We can't use request.getPortNumber() either.\n        // We can't use request.getPortNumber() either.\n        // We can't use request.getPortNumber() either.\n        // We can't use", "reference_code": "        this.localAddr = request.getLocalAddr();\n        this.localName = request.getLocalName();\n", "case_type": "block"}
{"generated_code": "    public static void main(String args[]){\n          int size=5,i,j,k;\n          System.out.println(\"Enter the size of diamond\");\n          Scanner sc=new Scanner(System.in);\n          size=sc.nextInt();\n          System.out.println(\"Diamond of size \"+size);\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.out.println();\n          System.", "reference_code": "          public static void main(String[] args){\n          int size= 9;\n          int i,j,k;\n", "case_type": "block"}
{"generated_code": "\n    public void setAssociationPath(String associationPath) {\n        this.associationPath = associationPath;\n    }\n\n    public ExtendedCriterion() {\n        super();\n    }\n\n    public ExtendedCriterion(String name, String operation, Object value, String alias, String associationPath) {\n        super(name, operation, value);\n        this.alias = alias;\n        this.associationPath = associationPath;\n    }\n\n    public ExtendedCriterion(String name, String operation, Object value, String alias) {\n        super(name, operation, value);\n        this.alias = alias;\n    }\n\n    public ExtendedCriterion(String name, String operation, Object value) {\n        super(name, operation, value);\n    }\n\n    public ExtendedCriterion(String name, String operation, Object value, String associationPath) {\n        super(name, operation, value);\n        this.associationPath = associationPath;\n    }\n\n    public ExtendedCriterion(String name, String operation, Object value, String alias, String associationPath,", "reference_code": "\n    public void setAssociationPath(String associationPath) {\n        this.associationPath = associationPath;\n    }\n", "case_type": "block"}
{"generated_code": "     */\n    public double getPressure()\n    {\n        return fPressure;\n    }\n\n    public ExperimentParams getParams()\n    {\n        return fParams;\n    }\n\n    public void setParams(ExperimentParams params)\n    {\n        this.fParams = params;\n    }\n\n    public void setParams(double pressure, double temperature)\n    {\n        this.fPressure = pressure;\n        this.fTemperature = temperature;\n    }\n\n    public void setParams(double pressure, double temperature, ExperimentParams params)\n    {\n        this.fPressure = pressure;\n        this.fTemperature = temperature;\n        this.fParams = params;\n    }\n\n    public void setParams(ExperimentParams params, double pressure, double temperature)\n    {\n        this.fParams = params;\n        this.fPressure = pressure;\n        this.fTemperature = temperature;\n    }\n\n    public void setParams(ExperimentParams params, double pressure, double temperature, double time)\n    {\n        this.fParams = params;\n", "reference_code": "     */\n    public double getPressure()\n    {\n        return fPressure;\n    }\n", "case_type": "block"}
{"generated_code": "INNER_ABSOLUTE_X + INNER_WIDTH)),\n                               eq(INNER_ABSOLUTE_Y));\n    }\n\n    private void setupClipper(double outerWidth, double outerHeight, double outerAbsoluteX, double outerAbsoluteY,\n                              double innerWidth, double innerHeight, double innerAbsoluteX, double innerAbsoluteY) {\n        when(outer.getAbsolutePosition()).thenReturn(new Point2D(outerAbsoluteX, outerAbsoluteY));\n        when(inner.getAbsolutePosition()).thenReturn(new Point2D(innerAbsoluteX, innerAbsoluteY));\n        clipper = new InverseGridWidgetClipper(outer, inner);\n    }\n\n}\n\n@RunWith(LienzoMockitoTestRunner.class)\nclass InverseGridWidgetClipperTest {\n\n    private static final double OUTER_WIDTH = 100.0;\n\n    private static final double OUTER_HEIGHT = 100.0;\n\n    private static final double INNER_WIDTH = 200.0;\n\n    private", "reference_code": "@RunWith(LienzoMockitoTestRunner.class)\npublic class InverseGridWidgetClipperTest {\n\n    private static final double OUTER_WIDTH = 1000.0;\n\n    private static final double OUTER_HEIGHT = 500.0;\n", "case_type": "block"}
{"generated_code": "    }\n\n    private void setDefaultConfig() {\n        controller.getMain().getConfig().addDefault(\"intervalInMin\", 1);\n\n        //default messages\n\n        controller.getMain().getConfig().addDefault(\"intervalInMin\", 1);\n\n        controller.getMain().getConfig().addDefault(\"intervalInMin\", 1);\n\n        controller.getMain().getConfig().addDefault(\"intervalInMin\", 1);\n\n        controller.getMain().getConfig().addDefault(\"intervalInMin\", 1);\n\n        controller.getMain().getConfig().addDefault(\"intervalInMin\", 1);\n\n        controller.getMain().getConfig().addDefault(\"intervalInMin\", 1);\n\n        controller.getMain().getConfig().addDefault(\"intervalInMin\", 1);\n\n        controller.getMain().getConfig().addDefault(\"intervalInMin\", 1);\n\n        controller.getMain().getConfig().addDefault(\"intervalInMin\", 1);\n\n        controller.getMain().getConfig().addDefault(\"intervalInMin\", 1);\n\n        controller.getMain().", "reference_code": "    }\n\n    private void setDefaultConfig() {\n\n        controller.getMain().getConfig().addDefault(\"intervalInMin\", 60);\n", "case_type": "block"}
{"generated_code": "    if (obj == null)\n      throw new IllegalArgumentException(message);\n  }\n\n  public static void notBlank(String obj, String message)\n  {\n    if (StringUtil.isBlank(obj))\n      throw new IllegalArgumentException(message);\n  }\n\n  public static void notBlank(Object obj, String message)\n  {\n    if (obj == null)\n      throw new IllegalArgumentException(message);\n    if (obj instanceof String)\n      if (StringUtil.isBlank((String)obj))\n  ", "reference_code": "    if (obj == null)\n", "case_type": "block"}
{"generated_code": "    public MediaRouteSelector getSelector() {\n        ensureSelector();\n        return mSelector;\n    }\n\n    private void ensureSelector() {\n        // Lazily initialize the selector.\n        // This is necessary because the selector may be null if the bundle is null.\n        // This is also necessary because the selector may be null if the bundle is null.\n        // This is also necessary because the selector may be null if the bundle is null.\n        // This is also necessary because the selector may be null if the bundle is null.\n        // This is also necessary because the selector may be null if the bundle is null.\n        // This is also necessary because the selector may be null if the bundle is null.\n        // This is also necessary because the selector may be null if the bundle is null.\n        // This is also necessary because the selector may be null if the bundle is null.\n        // This is also necessary because the selector may be null if the bundle is null.\n        // This is also necessary because the selector may be null if the bundle is null.\n        // This is also necessary because the selector may be null if the bundle is null.\n        // This is also", "reference_code": "    public MediaRouteSelector getSelector() {\n        ensureSelector();\n        return mSelector;\n    }\n\n    private void ensureSelector() {\n", "case_type": "block"}
{"generated_code": "anchAutoBuild(BooleanJsonUnmarshaller.getInstance().unmarshall(context));\n                               int targetDepth = context.getCurrentDepth();\n                if (context.getCurrentToken() == null)\n                    context.nextToken();\n\n        int targetDepth--;\n\n        if (context.getCurrentToken() == null)\n            return null;\n\n        if (context.getCurrentToken() == FIELD_NAME) {\n            if (context.testExpression(\"appId\", targetDepth)) {\n                context.nextToken();\n                app.setAppId(context.getUnmarshaller(String.class).unmarshall(context));\n            }\n        }\n\n        return app;\n    }\n\n    private static int getDesiredAccess(JsonToken currentToken) {\n        if (current        int targetDepth = context.getCurrentDepth();\n        if (context.getCurrentToken() == null)\n            return null;\n\n        if (context.getCurrentToken() == FIELD_NAME) {\n            if (context.testExpression(\"appId\", targetDepth)) {\n                context.nextToken();\n                app", "reference_code": "        int originalDepth = context.getCurrentDepth();\n        String currentParentElement = context.getCurrentParentElement();\n        int targetDepth = originalDepth + 1;\n\n", "case_type": "block"}
{"generated_code": "    }\n\n    public final int isPurchased(final String item)\n    {\n        if (mService == null) return 0;\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the list\n\n        // TODO: Check if the item is in the", "reference_code": "    }\n\n    public final int getItemState(final String item)\n    {\n", "case_type": "block"}
{"generated_code": "     * @return\n     */\n    public Result<List<SysRole>> getRoleByUserId(Long userId, String roleType);\n\n    /**\n     * 通过用户主键查询用户的所属角色\n     * @param userId\n     * @return\n     */\n    public Result<List<SysRole>> getRoleByUserId(Long userId, String roleType, String roleName);\n\n    /**\n     * 通过用户主键查询用户的所属角色\n     * @param userId\n     * @return\n     */\n    public Result<List<SysRole>> getRoleByUserId(Long userId, String roleType, String roleName, String roleCode);\n\n    /**\n     * 通过用户主键查询用户的所属角色\n     * @param userId\n     * @return\n     */\n    public Result<List<SysRole>> getRoleByUserId(Long userId, String roleType, String roleName, String roleCode, String roleDesc);\n\n    /**\n     * 通过用户主键查询用户的所属角色\n     * @", "reference_code": "     * @return\n     */\n", "case_type": "block"}
{"generated_code": "\nimport com.slack.api.SlackApiResponse;\nimport com.slack.api.methods.SlackApiRequest;\nimport com.slack.api.methods.SlackApiRequestBuilder;\nimport com.slack.api.methods.SlackApiResponseParser;\nimport com.slack.api.methods.request.conversations.ConversationsMarkRequest;\nimport com.slack.api.methods.response.conversations.ConversationsMarkResponse;\nimport com.slack.api.methods.response.conversations.ConversationsRepliesResponse;\nimport com.slack.api.methods.response.conversations.ConversationsSearchResponse;\nimport com.slack.api.methods.response.conversations.ConversationsSetTopicResponse;\nimport com.slack.api.methods.response.conversations.ConversationsUnmarkResponse;\nimport com.slack.api.methods.response.conversations.ConversationsUnmarkResponse.ConversationsUnmarkResponseData;\nimport com.slack.api.methods.response.conversations.Con", "reference_code": "\nimport com.slack.api.methods.SlackApiResponse;\n", "case_type": "block"}
{"generated_code": "    public static final String NATS_SID = \"CamelNatsSid\";\n\n    @Override\n    public String getSpanName() {\n        return \"nats\";\n    }\n\n    @Override\n    public String getSpanType() {\n        return \"messaging\";\n    }\n\n    @Override\n    public String getSpanSubtype() {\n        return \"nats\";\n    }\n\n    @Override\n    public String getSpanKind() {\n        return \"producer\";\n    }\n\n    @Override\n    public String getSpanMessagingSystem() {\n        return \"nats\";\n    }\n\n    @Override\n    public String getSpanMessagingOperation() {\n        return \"send\";\n    }\n\n    @Override\n    public String getSpanMessagingDestination() {\n        return \"nats\";\n    }\n\n    @Override\n    public String getSpanMessagingProtocol() {\n        return \"nats\";\n    }\n\n    @Override\n    public String getSpanMessagingDestinationType() {\n        return \"topic\";\n    }\n\n", "reference_code": "    public static final String NATS_SID = \"CamelNatsSID\";\n\n", "case_type": "block"}
{"generated_code": "        this(new DefaultModuleComponentArtifactIdentifier(componentIdentifier, artifact), alternativeArtifact);\n    }\n\n    public DefaultModuleComponentArtifactMetadata(ModuleComponentArtifactIdentifier moduleComponentArtifactIdentifier) {\n        this(moduleComponentArtifactIdentifier, null);\n    }\n\n    public DefaultModuleComponentArtifactMetadata(ModuleComponentArtifactIdentifier moduleComponentArtifactIdentifier, IvyArtifactName artifact) {\n        this(moduleComponentArtifactIdentifier, artifact, null);\n    }\n\n    public DefaultModuleComponentArtifactMetadata(ModuleComponentArtifactIdentifier moduleComponentArtifactIdentifier, IvyArtifactName artifact, @Nullable ComponentArtifactMetadata alternativeArtifact) {\n        this(moduleComponentArtifactIdentifier, artifact, alternativeArtifact);\n    }\n\n    public DefaultModuleComponentArtifactMetadata(ModuleComponentArtifactIdentifier moduleComponentArtifactIdentifier) {\n        this(moduleComponentArtifactIdentifier, null);\n    }\n\n    public DefaultModuleComponentArtifactMetadata(ModuleComponentArtifactIdentifier moduleComponentArtifactIdentifier, IvyArtifactName artifact) {\n        this(moduleComponentArtifactIdentifier, artifact, null);\n    }\n\n    public", "reference_code": "        this(new DefaultModuleComponentArtifactIdentifier(componentIdentifier, artifact), alternativeArtifact);\n    }\n\n    public DefaultModuleComponentArtifactMetadata(ModuleComponentArtifactIdentifier moduleComponentArtifactIdentifier) {\n", "case_type": "block"}
{"generated_code": "     * @param nthLink number of the link to return.\n     * @return the nth link in this hypertext doc.\n     */\n    public abstract AccessibleHyperlink getLink(int nthLink);\n\n    /**\n     * Returns the index into an array of hyperlinks that\n     * is associated with this character index, or -1 if there\n     * is no hyperlink associated with this index.\n     *\n     * @param charIndex index within the text\n     * @return index into the set of hyperlinks for this hypertext doc.\n     */\n    public abstract int getLinkIndex(int charIndex);\n\n    /**\n     * Returns the index into an array of hyperlinks that\n     * is associated with this character index, or -1 if there\n     * is no hyperlink associated with this index.\n     *\n     * @param charIndex index within the text\n     * @return index into the set of hyperlinks for this hypertext doc.\n     */\n    public abstract int getLinkIndex(int charIndex);\n\n    /**\n     * Returns the index into an array of hyperlinks that\n     * is associated with", "reference_code": "     * @param linkIndex within the links of this Hypertext\n     * @return Link object encapsulating the nth link(s)\n     */\n    public abstract AccessibleHyperlink getLink(int linkIndex);\n", "case_type": "block"}
{"generated_code": "    }\n\n    /**\n     * @return the second\n     */\n    public Y getSecond(Y second) {\n        return second;\n    }\n\n    /**\n     * \n     * @param second\n     * @return\n     */\n    public boolean equals(Y second) {\n        return this.second.equals(second);\n    }\n\n    /**\n     * \n     * @param second\n     * @return\n     */\n    public boolean equals(Object second) {\n        return this.second.equals(second);\n    }\n\n    /**\n     * \n     * @param second\n     * @return\n     */\n    public boolean equals(Pair<X, Y> second) {\n        return this.second.equals(second.second);\n    }\n\n    /**\n     * \n     * @param second\n     * @return\n     */\n    public boolean equals(Pair<?, ?> second) {\n        return this.second.equals(second.second);\n    }\n\n    /**\n     * \n     * @param second\n     * @return\n     */\n   ", "reference_code": "    }\n\n    /**\n", "case_type": "block"}
{"generated_code": "(JComponent a)     */\n    public void installUI(JComponent a) {\n        for (int i = 0; i < uis.size(); i++) {\n            uis.elementAt(i).installUI(a);\n        }\n        if (a instanceof Accessible) {\n            ((Accessible)a).addAccessibleContext(a);\n        }\n        a.setAccessibleContext(a);\n        a.setAccessibleDescription(a);\n        a.setAccessibleName(a);\n        a.setAccessibleRole(a);\n        a.setAccessibleState(a);\n        a.setAccessibleValue(a);\n        a.setAccessibleContext(a);\n        a.setAccessibleDescription(a);\n        a.setAccessibleName(a);\n        a.setAccessibleRole(a);\n        a.setAccessibleState(a);\n        a.setAccessibleValue(a);\n        a.setAccessibleContext(a);\n        a.setAccessibleDescription(a);\n        a.setAccess        if (a instanceof Accessible) {\n           ", "reference_code": "     */\n    public void installUI(JComponent a) {\n        for (int i = 0; i < uis.size(); i++) {\n            uis.elementAt(i).installUI(a);\n        }\n", "case_type": "block"}
{"generated_code": "                .formLogin()\n                    .loginProcessingUrl(\"/auth/login\")\n                    .usernameParameter(\"username\")\n                    .passwordParameter(\"password\")\n                    .defaultSuccessUrl(\"/\")\n                    .failureUrl(\"/auth/login?error=true\")\n                    .and()\n                .rememberMe()\n                    .key(\"my-key\")\n                    .tokenValiditySeconds(24 * 60 * 60)\n                    .and()\n                .csrf()\n                    .disable()\n                .exceptionHandling()\n                    .accessDeniedPage(\"/auth/denied\")\n                    .and()\n                .anonymous()\n                    .and()\n                .httpBasic()\n                    .and()\n                .logout()\n                    .logoutUrl(\"/auth/logout\")\n                    .logoutSuccessUrl(\"/\")\n                    .invalidateHttpSession(true)\n                    .deleteCookies()\n                    .and()\n                .loginPage(\"/auth/login\")\n                    .loginProcessingUrl(\"/auth/login\")\n                    .usernameParameter(\"username\")\n                    .passwordParameter(\"password\")\n                    .defaultSuccessUrl(\"/\")\n", "reference_code": "                .formLogin()\n", "case_type": "block"}
{"generated_code": " both are available.\n       /** @deprecated Use {@link #DEFAULT_LOCATION_EXCLUSION_MS} instead. */\n    @Deprecated public static final long DEFAULT_LOCATION_EXCLUSION_MS = DEFAULT_TRACK_EXCLUSION_MS;\n    /**\n   * The default behavior.\n   *\n   * <p>{@link #getMinimumLoadableRetryCount(int)} will return {@link\n   * #DEFAULT_MIN_LOADABLE_RETRY_COUNT_PROGRESSIVE_LIVE} for {@code dataType} {@link\n   * C#DATA_TYPE_MEDIA_PROGRESSIVE_LIVE}. For other {@code dataType} values, it will return {@link\n   * #DEFAULT_MIN_LOADABLE_RETRY_COUNT}.\n   */\n  public static final int DEFAULT_BEHAVIOR_MIN_LOADABLE_RETRY_COUNT_PROGRESSIVE_LIVE =\n      DEFAULT_MIN_LOADABLE_RETRY_COUNT_PROGRESSIVE_LIVE;\n\n  /** @deprecated Use {@link #DEFAULT_BEHAVI", "reference_code": "  /** The default duration for which a location is excluded in milliseconds. */\n  public static final long DEFAULT_LOCATION_EXCLUSION_MS = 5 * 60_000;\n\n", "case_type": "block"}
{"generated_code": "\n    @Override\n    public void removeProperty(String name) {\n        request.removeAttribute(name);\n    }\n\n    @Override\n    public boolean isProperty(String name) {\n        return request.getAttribute(name) != null;\n    }\n\n    @Override\n    public void clearProperties() {\n        request.removeAttribute(request.getServletContext().getAttributeNames().nextElement());\n    }\n\n    @Override\n    public String toString() {\n        return request.getServletContext().getAttributeNames().nextElement();\n    }\n\n    @Override\n    public int hashCode() {\n        return request.getServletContext().getAttributeNames().nextElement().hashCode();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        return obj instanceof ServletPropertiesDelegate && ((ServletPropertiesDelegate) obj).request.equals(request);\n    }\n\n    @Override\n    public int compareTo(Object obj) {\n        return toString().compareTo(obj.toString());\n    }\n\n    @Override\n    public String getName() {\n        return toString();\n", "reference_code": "\n    @Override\n    public void removeProperty(String name) {\n        request.removeAttribute(name);\n    }\n", "case_type": "block"}
{"generated_code": "    {\n        return Math.max(Math.min(x - center, width), Math.min(x - center, -width)) / height;\n    }\n\n    public static double lerp(double a, double b, double t)\n    {\n        return a + (b - a) * t;\n    }\n\n    public static double lerp(double a, double b, double t, double min, double max)\n    {\n        return lerp(a, b, clamp(min, max, t));\n    }\n\n    public static double lerp(double a, double b, double t, double min, double max, double width)\n    {\n        return lerp(a, b, lerp(min, max, t), width);\n    }\n\n    public static double lerp(double a, double b, double t, double min, double max, double width, double height)\n    {\n        return lerp(a, b, lerp(min, max, t), width, height);\n    }\n\n    public static double lerp(double a", "reference_code": "    {\n        return height * Math.max(0, width - Math.abs(center - x));\n", "case_type": "block"}
{"generated_code": "    /**\n     * Generates a new key pair.\n     *\n     * @throws IllegalStateException if the generator is not initialized.\n     *\n     * @see #initialize(int, SecureRandom)\n     *\n     * @see #initialize(AlgorithmParameterSpec, SecureRandom)\n     *\n     * @see #generateKeyPair(String, SecureRandom)\n     *\n     * @see #generateKeyPair(String, SecureRandom, AlgorithmParameterSpec)\n     *\n     * @see #generateKeyPair(String, SecureRandom, AlgorithmParameterSpec, KeyPairGeneratorSpi.KeyPairGeneratorCallback)\n     *\n     * @see #generateKeyPair(String, SecureRandom, AlgorithmParameterSpec, KeyPairGeneratorSpi.KeyPairGeneratorCallback, KeyPairGeneratorSpi.KeyPairGeneratorCallback)\n     *\n     * @see #generateKeyPair(String, SecureRandom, KeyPairGeneratorSpi.KeyPairGeneratorCallback)\n     *\n     * @see #generateKeyPair(String, SecureRandom, KeyPairGeneratorSpi.KeyPairGeneratorCallback, KeyPairGeneratorSpi.", "reference_code": "    /**\n     * Generates a key pair. Unless an initialization method is called\n     * using a KeyPairGenerator interface, algorithm-specific defaults\n     * will be used. This will generate a new key pair every time it\n     * is called.\n     *\n", "case_type": "block"}
{"generated_code": "                + (animateTabXTo - startAnimationX) * interpol            int selectedTab = 0;\n  private int selectedTab = 0;\n  private int tabHeight = 0;\n  private int tabHeightOffset = 0;\n  private int tabMargin = 0;\n  private int tabPadding = 0;\n  private int tabSelectedBackgroundColor = 0;\n  private int tabSelectedTextColor = 0;\n  private int tabTextColor = 0;\n  private int tabWidthOffset = 0;\n  private int tabXOffset = 0;\n  private int tabSelectedBackgroundColorSelected = 0;\n  private int tabSelectedTextColorSelected = 0;\n  private int tabTextColorSelected = 0;\n  private int tabSelectedBackgroundColorUnselected = 0;\n  private int tabSelectedTextColorUnselected = 0;\n  private int tabTextColorUnselected = 0;\n  private int tabSelectedBackgroundColorSelectedSelected = 0;\n  private int tabSelectedTextColorSelectedSelected = 0;\n  private int tabTextColorSelectedSelected = 0;\n  private int tabSelectedBackgroundColorUnselectedSelected = 0;\n  private int tabSelectedText  private", "reference_code": "  private int selectedTab = 0;\n", "case_type": "block"}
{"generated_code": "\n    @Test(expected = IllegalArgumentException.class)\n    public void testInvalidZookeepers() {\n        Map<String, String> properties = new HashMap<>();\n        properties.put(AccumuloRyaSinkConfig.ZOOKEEPERS, \"zoo1,zoo2\");\n        properties.put(AccumuloRyaSinkConfig.CLUSTER_NAME, \"test\");\n        properties.put(AccumuloRyaSinkConfig.USERNAME, \"alice\");\n        properties.put(AccumuloRyaSinkConfig.PASSWORD, \"alice1234!\");\n        properties.put(RyaSinkConfig.RYA_INSTANCE_NAME, \"rya_\");\n        new AccumuloRyaSinkConfig(properties);\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void testInvalidZookeepers2() {\n        Map<String, String> properties = new HashMap<>();\n        properties.put(AccumuloRyaSinkConfig.ZOOKEEPERS, \"zoo1:", "reference_code": "\n    @Test\n    public void parses() {\n        final Map<String, String> properties = new HashMap<>();\n", "case_type": "block"}
{"generated_code": "];\n      tok = tok.next;\n    }\n    statement += \"\\\"\";\n    return statement + \" expected: \" + expected.toString();\n  }\n\n}\n\n  public String toString() {\n    if (currentToken == null) {\n      return super.toString();\n    } else {\n      return initialise(currentToken, expectedTokenSequences, tokenImage);\n    }\n  }\n\n  public String getMessage() {\n    return toString();\n  }\n\n  public String getLocalizedMessage() {\n    return toString();\n  }\n\n  public Throwable getCause() {\n    return null;\n  }\n\n  public  public ParseException(String message, Throwable cause) {\n    super(message, cause);\n  }\n\n  public ParseException(Throwable cause) {\n    super(cause);\n  }\n\n  public ParseException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n    super(message, cause, enableSuppression, writableStackTrace);\n  }\n\n  public", "reference_code": "      }\n      for (int j = 0; j < expectedTokenSequences[i].length; j++) {\n        expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');\n      }\n      if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {\n        expected.append(\"...\");\n", "case_type": "block"}
{"generated_code": "    public short revents;\n\n    /**\n     * Initializes \"pollfd\" structure with default values.\n     */\n    public pollfd() {\n        super();\n        this.fd = 0;\n        this.events = 0;\n        this.revents = 0;\n    }\n\n    /**\n     * Initializes \"pollfd\" structure with default values.\n     */\n    public pollfd(int fd) {\n        super();\n        this.fd = fd;\n        this.events = 0;\n        this.revents = 0;\n    }\n\n    /**\n     * Initializes \"pollfd\" structure with default values.\n     */\n    public pollfd(short events, short revents) {\n        super();\n        this.fd = 0;\n        this.events = events;\n        this.revents = revents;\n    }\n\n    /**\n     * Initializes \"pollfd\" structure with default values.\n     */\n    public pollfd(int fd, short events) {\n        super();\n        this.fd = fd;\n        this.events", "reference_code": "    public short revents;\n\n    /** Initializes \"pollfd\" structure with zeroes. */\n    public pollfd() {\n        super();\n        this.fd = 0;\n", "case_type": "block"}
{"generated_code": "\n            Throwable exception) {\n        timingContext.record(response.getStatus());\n        if (this.autoTimer != null) {\n            this.autoTimer.record(timingContext, request, response, exception);\n        }\n    }\n\n    private void record(TimingContext timingContext, HttpServletRequest request, HttpServletResponse response,\n            Throwable exception) {\n        timingContext.record(response.getStatus());\n        if (this.autoTimer != null) {\n            this.autoTimer.record(timingContext, request, response, exception);\n        }\n    }\n\n    private void record(TimingContext timingContext, HttpServletRequest request, HttpServletResponse response,\n            ServletException ex) {\n        timingContext.record(response.getStatus());\n        if (this.autoTimer != null) {\n            this.autoTimer.record(timingContext, request, response, ex);\n        }\n    }\n\n    private void record(TimingContext timingContext, HttpServletRequest request, HttpServletResponse response,\n            IOException ex) {\n        timingContext.record(", "reference_code": "    }\n\n    private Set<Timed> findTimedAnnotations(AnnotatedElement element) {\n        MergedAnnotations annotations = MergedAnnotations.from(element);\n", "case_type": "block"}
{"generated_code": "package com.google.inject.spi.guice;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport com.google.common.base.Supplier;\nimport com.google.inject.spi.InjectionListener;\nimport com.google.inject.spi.InjectionPoint;\nimport com.google.inject.spi.Name;\nimport com.google.inject.spi.TypeListener;\nimport com.google.inject.spi.TypeQualifier;\nimport com.google.inject.spi.TypeQualifiers;\nimport com.google.inject.spi.TypeScopes;\nimport com.google.inject.spi.TypeToNameMapper;\nimport com.google.inject.spi.Types;\nimport com.google.inject.spi.skinny.SkinnyInjector;\nimport com.google.inject.spi.skinny.SkinnyModule;\nimport com.google.inject.spi.skinny.SkinnyScope;\nimport com", "reference_code": "package com.hubspot.singularity.guice;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport io.dropwizard.setup.Environment;\n\n", "case_type": "block"}
{"generated_code": "SubscriptionEntity();\n          signalEventSubscriptionEntity3.setEventName(\"messageName2\");\n          signalEventSubscriptionEntity3.setActivityId(\"someActivity\");\n          signalEventSubscriptionEntity3.insert();\n\n          return null;\n        }\n      });\n\n    List<EventSubscriptionEntity> list = newEventSubscriptionQuery()\n      .activityId(\"someActivity\")\n      .list();\n    assertEquals(2, list.size());\n\n    cleanDb();\n\n  }\n\n  private EventSubscriptionQueryImpl newEventSubscriptionQuery() {\n    return new EventSubscriptionQueryImpl(processEngineConfiguration.getCommandExecutorTxRequired());\n  }\n\n  private void cleanDb() {\n    // TODO Auto-generated method stub\n\n  }\n\n  private void cleanDb() {\n    // TODO Auto-generated method stub\n\n  }\n\n  private void cleanDb() {\n    // TODO Auto-generated method stub\n\n  }\n\n  private void cleanDb() {\n    // TODO Auto-generated method stub\n\n  }\n\n  private void cleanDb() {\n    // TODO Auto-generated   ", "reference_code": "          messageEventSubscriptionEntity1.setEventName(\"messageName\");        \n          messageEventSubscriptionEntity1.setActivityId(\"someActivity\");          \n", "case_type": "block"}
{"generated_code": "ontrato().getCodigo()));\n            lstp.add(new Parametro(3, contrato_docente.getFechaingreso()));\n            lstp.add(new Parametro(4, contrato_docente.getFechasalida()));\n            lstp.add(new Parametro(5, contrato_docente.getCorreo_personal()));\n            lstp.add(new Parametro(6, contrato_docente.getTelefono()));\n            lstp.add(new Parametro(7, contrato            return false;\n        } catch (Exception e) {\n            throw new Exception(e.getMessage());\n        }\n    }\n\n    public static boolean eliminar(ContratoDocente contrato_docente) {\n        try {\n            String sql = \"DELETE FROM public.contrato_docente\\n\"\n                    + \"WHERE codigo = ?;\";\n            ArrayList<Parametro> lstp = new ArrayList<>();\n            lstp.add(new Parametro(1, contrato_doc", "reference_code": "            while (rs.next()) {\n", "case_type": "block"}
{"generated_code": "this);\n    }\n\n    /** Convenient call for {@link AbstractDao#deleteById(String...})    \n    public Experience(long GrowthRateId, long Level, long Experience, GrowthRates GrowthRates) {\n        this.GrowthRateId = GrowthRateId;\n        this.Level = Level;\n        this.Experience = Experience;\n        this.GrowthRates = GrowthRates;\n    }\n\n    public Experience(long GrowthRateId, long Level, long Experience, Long GrowthRates__resolvedKey) {\n        this.GrowthRateId = GrowthRateId;\n        this.Level = Level;\n        this.Experience = Experience;\n        this.GrowthRates__resolvedKey = GrowthRates__resolvedKey;\n    }\n\n    public Experience(long GrowthRateId, long Level, long Experience, Long GrowthRates__resolvedKey, GrowthRates GrowthRates) {\n        this.GrowthRateId = GrowthRateId;\n        this.Level = Level;\n        this.Experience = Experience", "reference_code": "    public Experience(long GrowthRateId) {\n        this.GrowthRateId = GrowthRateId;\n    }\n", "case_type": "block"}
{"generated_code": "import java.util.List;\n\nimport org.bukkit.ChatColor;\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.command.defaults.VanillaCommand;\nimport org.bukkit.entity.Player;\nimport org.bukkit.plugin.Plugin;\n\nimport org.bukkit.command.defaults.VanillaCommand;\nimport org.bukkit.entity.Player;\nimport org.bukkit.plugin.Plugin;\nimport org.bukkit.plugin.java.JavaPlugin;\n\nimport org.bukkit.command.Command;\nimport org.bukkit.command.CommandExecutor;\nimport org.bukkit.command.CommandSender;\nimport org.bukkit.command.defaults.VanillaCommand;\nimport org.bukkit.entity.Player;\nimport org.bukkit.plugin.Plugin;\nimport org.bukkit.plugin.java.JavaPlugin;\n\nimport org", "reference_code": "import java.util.List;\nimport org.bukkit.command.Command;\n", "case_type": "block"}
{"generated_code": "    }\n    }\n\n    /**\n    * @generated\n    */\n    protected void hideFocus(boolean refresh) {\n        if (getHostFigure() instanceof WrappingLabel) {\n            ((WrappingLabel) getHostFigure()).setFocus(false);\n        } else {\n            if (focusFeedbackFigure != null) {\n                removeFeedback(focusFeedbackFigure);\n                focusFeedbackFigure = null;\n            }\n            if (refresh) {\n                refreshFocusFeedback();\n            }\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected void hideSelection(boolean refresh) {\n        if (getHostFigure() instanceof WrappingLabel) {\n            ((WrappingLabel) getHostFigure()).setSelected(false);\n        } else {\n            if (selectionFeedbackFigure != null) {\n                removeFeedback(selectionFeedbackFigure);\n                selectionFeedbackFigure = null;\n            }\n            if (refresh) {\n                refreshSelectionFeedback();\n            }\n        }\n    }\n\n    /**\n    * @generated\n    */\n    protected", "reference_code": "        } else {\n            if (selectionFeedbackFigure != null) {\n                removeFeedback(selectionFeedbackFigure);\n                getHostFigure().removeFigureListener(getHostPositionListener());\n", "case_type": "block"}
{"generated_code": "        scrollPane.setBounds(10, 100, 215, 20);\n\n        JButton btnRemove = new JButton(\"Remove\");\n        btnRemove.setToolTipText(\"Remove this Tile Layer\");\n        btnRemove.setEnabled(false);\n        btnRemove.setBounds(189, 228, 51, 23);\n\n        JButton btnRemoveAll = new JButton(\"Remove All\");\n        btnRemoveAll.setToolTipText(\"Remove all Tile Layers\");\n        btnRemoveAll.setEnabled(false);\n        btnRemoveAll.setBounds(250, 228, 71, 23);\n\n        JButton btnRemoveSelected = new JButton(\"Remove Selected\");\n        btnRemoveSelected.setToolTipText(\"Remove the selected Tile Layers\");\n        btnRemoveSelected.setEnabled(false);\n        btnRemoveSelected.setBounds(189, 228, 51, 23);\n\n        JButton btnRemoveAllSelected = new JButton(\"Remove Selected\");\n        btnRemove", "reference_code": "        scrollPane.setBounds(107, 75, 214, 142);\n\n        JButton btnRemove = new JButton(\"Remove\");\n", "case_type": "block"}
{"generated_code": "     * @param accountNumber the account number of the account to be returned.\n     *\n     * @return The details of the requested account.\n     * @throws APIException if the user does not have read permissions.\n     * @throws APIException if the customer does not own the account.\n     * @throws APIException if the account number is invalid.\n     * @throws APIException if the account number is not found.\n     * @throws APIException if the account number is not a number.\n     * @throws APIException if the account number is not a string.\n     * @throws APIException if the account number is null.\n     * @throws APIException if the account number is empty.\n     * @throws APIException if the account number is not a valid account number.\n     * @throws APIException if the account number is not a valid account number.\n     * @throws APIException if the account number is not a valid account number.\n     * @throws APIException if the account number is not a valid account number.\n     * @throws APIException if the account number is not a valid account number.\n     * @throws APIException if the account number is not a", "reference_code": "     * @param accountNumber the accountNumber that we want to retrieve\n     * @return The Account details as JSON.\n", "case_type": "block"}
{"generated_code": "     */\n    private InputField sourceField;\n\n    //////////////////////////////////////////////////////////////\n    // Object methods\n    //////////////////////////////////////////////////////////////\n\n    //////////////////////////////////////////////////////////////\n    // Inner classes/interfaces\n    //////////////////////////////////////////////////////////////\n\n    //////////////////////////////////////////////////////////////\n    // Field methods\n    //////////////////////////////////////////////////////////////\n\n    //////////////////////////////////////////////////////////////\n    // Getter/Setter methods\n    //////////////////////////////////////////////////////////////\n\n    //////////////////////////////////////////////////////////////\n    // Constructors\n    //////////////////////////////////////////////////////////////\n\n    //////////////////////////////////////////////////////////////\n    // Helper methods\n    //////////////////////////////////////////////////////////////\n\n    //////////////////////////////////////////////////////////////\n    // Action methods\n    //////////////////////////////////////////////////////////////\n\n    //////////////////////////////////////////////////////////////\n    // Inner classes/interfaces\n    //////////////////////////////////////////////////////////////\n\n    //////////////////////////////////////////////////////////////\n    // Field constants\n    //////////////////////////////////////////////////////////////\n\n    //////////////////////////////////////////////////////////////\n    // State/instance variables\n    //////////////////////////////////////////////////////////////\n\n    //////////////////////////////////////////////////////////////\n    // Action methods\n    //////////////////////////////////////////////////////////////\n\n    //////////////////////////////////////////////////////////////\n    //", "reference_code": "     */\n    private InputField sourceField;\n\n", "case_type": "block"}
{"generated_code": "        this.name = name;\n    }\n\n    public String getToken() {\n        if (token == null) {\n            return \"\";\n        }\n\n        return token;\n    }\n\n    public String getToken(boolean force) {\n        if (token == null || force) {\n            return \"\";\n        }\n\n        // return the token if it's not null\n\n        // return the token if it's not null\n\n        // return the token if it's not null\n\n        // return the token if it's not null\n\n        // return the token if it's not null\n\n        // return the token if it's not null\n\n        // return the token if it's not null\n\n        // return the token if it's not null\n\n        // return the token if it's not null\n\n        // return the token if it's not null\n\n        // return the token if it's not null\n\n        // return the token if it's not null\n\n        // return the token if it's not null\n\n        // return the token if it's not null", "reference_code": "        this.name = name;\n    }\n\n    public String getToken() {\n", "case_type": "block"}
{"generated_code": " public    {\n    }\n    /**\n     * @param row\n     * @param col\n     * @param val\n     */\n    public Pixie(int row, int col, double val)\n    {\n        coord = new PixieCoord(row, col); \n        this.compVal = val;\n        for (int icolor = 0; icolor < NUMBER_OF_COLORS; ++icolor) colorVal[icolor] = 0.0;\n    }\n    /**\n     * @param row\n     * @param col\n     * @param val\n     */\n    public Pixie(int row, int col, double[] val)\n    {\n        coord = new PixieCoord(row, col); \n        this.compVal = val[COMP];\n        for (int icolor = 0; icolor < NUMBER_OF_COLORS; ++icolor        {\n    }\n    /**\n     * @param row\n     * @param col\n     * @param val\n     */\n    public Pixie(int row, int col,", "reference_code": "    {\n        coord = new PixieCoord(); \n        compVal = 0.0;\n        for (int icolor = 0; icolor < NUMBER_OF_COLORS; ++icolor) colorVal[icolor] = 0.0;\n    }\n    /**\n", "case_type": "block"}
{"generated_code": "\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface Chainable {\n    String flag() default \"\";\n    String value() default \"\";\n    Class<? extends ValueManipulator> manipulator() default ValueManipulator.class;\n}\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface ChainableStep {\n    String flag() default \"\";\n    String value() default \"\";\n    Class<? extends ValueManipulator> manipulator() default ValueManipulator.class;\n}\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface ChainableStepWithResult {\n    String flag() default \"\";\n    String value() default \"\";\n    Class<? extends ValueManipulator> manipulator() default ValueManipulator.class;\n}\n\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface ChainableStepWithResultAndReturn {\n    String flag() default \"\";\n    String", "reference_code": "\n@Retention(RetentionPolicy.RUNTIME)\n", "case_type": "block"}
{"generated_code": "    }\n\n    private void assertThatHaveEqualData(Book domain, UpdateBookCommand command) {\n        assertThat(domain.getId(), equalTo(command.getId()));\n        assertThat(domain.getVersion(), equalTo(command.getVersion()));\n        assertThat(domain.getTitle(), equalTo(command.getTitle()));\n        assertThat(domain.getBookFile(), is(nullValue()));\n    }\n\n    @Test\n    public void shouldAssemblyEmptyBookDomainObjectFromUpdateBookCommandObject() {\n        UpdateBookCommand command = anUpdateBookCommandWith(ID, VERSION, null);\n\n        Book domain = testee.toDomain(command);\n\n        assertThatHaveEqualData(domain, command);\n        assertThat(domain.getTitle(), is(nullValue()));\n        assertThat(domain.getBookFile(), is(nullValue()));\n    }\n\n    @Test\n    public void shouldAssemblyEmptyBookDomainObjectFromUpdateBookCommandObjectWithEmptyTitle() {\n        UpdateBookCommand command = anUpdateBookCommandWith(ID, VERSION, \"\");\n\n        Book domain = testee.toDomain(command);\n\n        assertThatHaveEqualData", "reference_code": "    }\n\n    private void assertThatHaveEqualData(Book domain, UpdateBookCommand command) {\n        assertThat(domain.getId(), equalTo(command.getId()));\n        assertThat(domain.getVersion(), equalTo(command.getVersion()));\n        assertThat(domain.getTitle(), equalTo(command.getTitle()));\n", "case_type": "block"}
{"generated_code": "  public SequenceFileAsJSONInputBatchFormat() {\n    super();\n  }\n\n  public SequenceFileAsJSONInputBatchFormat(Class<?> jobClass) {\n    super(jobClass);\n  }\n\n  public SequenceFileAsJSONInputBatchFormat(String jobName) {\n    super(jobName);\n  }\n\n  public SequenceFileAsJSONInputBatchFormat(String jobName, Class<?> jobClass) {\n    super(jobName, jobClass);\n  }\n\n  public SequenceFileAsJSONInputBatchFormat(String jobName, Class<?> jobClass,\n      Class<?> outputKeyClass, Class<?> outputValueClass) {\n    super(jobName, jobClass, outputKeyClass, outputValueClass);\n  }\n\n  public SequenceFileAsJSONInputBatchFormat(String jobName, Class<?> jobClass,\n      Class<?> outputKeyClass, Class<?> outputValueClass,\n      Class<?> outputRecordClass) {\n    super(jobName, jobClass, outputKeyClass, outputValueClass, outputRecordClass);\n", "reference_code": "  public SequenceFileAsJSONInputBatchFormat() {\n", "case_type": "block"}
{"generated_code": "    public static com.sun.org.omg.CORBA.AttributeMode from_any (org.omg.CORBA.Any a)\n    {\n        return read (a.create_input_stream ());\n    }\n\n    public static void insert (org.omg.CORBA.Any a, com.sun.org.omg.CORBA.AttributeMode that, boolean release)\n    {\n        insert (a, that);\n        if (release)\n            {\n                a.destroy ();\n            }\n    }\n\n    public static com.sun.org.omg.CORBA.AttributeMode from_any (org.omg.CORBA.Any a, boolean release)\n    {\n        return from_any (a);\n    }\n\n    public static void insert (org.omg.CORBA.Any a, com.sun.org.omg.CORBA.AttributeMode that)\n    {\n        insert (a, that, true);\n    }\n\n    public static com.sun.org.omg.CORBA.AttributeMode from_", "reference_code": "    public static com.sun.org.omg.CORBA.AttributeMode extract (org.omg.CORBA.Any a)\n    {\n        return read (a.create_input_stream ());\n    }\n", "case_type": "block"}
{"generated_code": " getNodeTypes(TableScan rel,\n      RelMetadataQuery   public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(Aggregate rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, Aggregate.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(Sort rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, Sort.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(SemiJoin rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, SemiJoin.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(Values rel,\n      RelMetadataQuery mq) {\n    return getNodeTypes(rel, Values.class, mq);\n  }\n\n  public Multimap<Class<? extends RelNode>, RelNode> getNode", "reference_code": "\n  public Multimap<Class<? extends RelNode>, RelNode> getNodeTypes(HepRelVertex rel,\n", "case_type": "block"}
{"generated_code": "public class LUSHR extends ArithmeticInstruction {\n\n    /**\n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n     * \n", "reference_code": "public class LUSHR extends ArithmeticInstruction {\n  /**\n", "case_type": "block"}
{"generated_code": "\n    private String mTitle;\n    private String mDescription;\n    private LatLng mLocation;\n    private float mTilt;\n    private float mBearing;\n\n    public Detail() {\n    }\n\n    public Detail(String title, String description, LatLng location) {\n        this(title, description, location, 0, 0);\n    }\n\n    public Detail(String title, String description, LatLng location, float tilt) {\n        this(title, description, location, tilt, 0);\n    }\n\n    public Detail(String title, String description, LatLng location, float tilt, float bearing, float zoom) {\n        this(title, description, location, tilt, bearing);\n    }\n\n    public Detail(String title, String description, LatLng location, float tilt, float bearing, float zoom, float pan) {\n        this(title, description, location, tilt, bearing, zoom);\n    }\n\n    public Detail(String title, String description, LatLng location, float tilt, float bearing, float zoom", "reference_code": "\n    private final String mTitle;\n    private final String mDescription;\n    private final LatLng mLocation;\n    private final float mTilt;\n    private final float mBearing;\n", "case_type": "block"}
{"generated_code": "  }\n\n  public MultipartFile getProfilePicture() {\n    return profilePicture;\n  }\n\n  public void setProfilePicture(String profilePicture) {\n    this.profilePicture = null;\n  }\n\n  public void setProfilePicture(byte[] profilePicture) {\n    this.profilePicture = new MultipartFile() {\n      @Override\n      public String getName() {\n        return null;\n      }\n\n      @Override\n           return profilePicture;\n  }\n\n  public void setProfilePicture(byte[] profilePicture, String originalFilename) {\n    this.profilePicture = new MultipartFile() {\n      @Override\n      public String getName() {\n        return originalFilename;\n      }\n\n      @Override\n      public String getOriginalFilename() {\n        return originalFilename;\n      }\n\n      @Override\n           return profilePicture;\n  }\n\n  public void setProfilePicture(byte[] profilePicture, String originalFilename, String contentType) {\n    this.profilePicture = new Mult", "reference_code": "  }\n\n  public MultipartFile getProfilePicture() {\n    return profilePicture;\n  }\n", "case_type": "block"}
{"generated_code": "    }\n\n    /**\n     * Checks if is attribute.\n     *\n     * @param objValue the obj value\n     *\n     * @see #ATTRIBUTE_START\n     * @see #ATTRIBUTE_END\n     *\n     * @param objValue the obj value\n     *\n     * @see #ATTRIBUTE_START\n     * @see #ATTRIBUTE_END\n     *\n     * @param objValue the obj value\n     *\n     * @see #ATTRIBUTE_START\n     * @see #ATTRIBUTE_END\n     *\n     * @param objValue the obj value\n     *\n     * @see #ATTRIBUTE_START\n     * @see #ATTRIBUTE_END\n     *\n     * @param objValue the obj value\n     *\n     * @see #ATTRIBUTE_START\n     * @see #ATTRIBUTE_END\n     *\n     * @param objValue the obj value\n     *\n     * @see #ATTRIBUTE_START\n     * @see #ATTRIBUTE_END\n     *\n     * @param objValue the obj value", "reference_code": "    }\n\n    /**\n     * Checks if string is actually an attribute.\n     *\n     * @param objValue the obj value\n", "case_type": "block"}
{"generated_code": "     * \n     */\n    public VersionMessageBodyReaderImpl() {\n        // nothing to do\n    }\n\n    // declare getters/setters\n\n    // declare static members\n\n    // declare instance members\n\n    // declare utility methods\n\n    // declare constants\n\n    // declare exceptions\n\n    // declare classes\n\n    // declare interfaces\n\n    // declare global variables\n\n    // declare nested classes\n\n    // declare classes\n\n    // declare interfaces\n\n    // declare global variables\n\n    // declare nested classes\n\n    // declare classes\n\n    // declare interfaces\n\n    // declare global variables\n\n    // declare nested classes\n\n    // declare classes\n\n    // declare interfaces\n\n    // declare global variables\n\n    // declare nested classes\n\n    // declare classes\n\n    // declare interfaces\n\n    // declare global variables\n\n    // declare nested classes\n\n    // declare classes\n\n    // declare interfaces\n\n    // declare global variables\n\n    // declare nested classes\n\n    // declare classes\n\n    // declare interfaces\n\n    // declare global variables\n\n    // declare nested classes\n\n    // declare classes", "reference_code": "     * Constructor for VersionMessageBodyReaderImpl\n     */\n    public VersionMessageBodyReaderImpl() {\n        super();\n    }\n\n", "case_type": "block"}
{"generated_code": "     * @throws PMException\n     */\n    public void preExecute(PMContext ctx) throws PMException;\n\n    /**This method is executed after the main method of the operation.\n     * @param ctx The context\n     * @throws PMException\n     */\n    public void postExecute(PMContext ctx) throws PMException;\n\n    /**This method is executed after the main method of the operation.\n     * @param ctx The context\n     * @throws PMException\n     */\n    public void postExecute(PMContext ctx) throws PMException;\n\n    /**This method is executed after the main method of the operation.\n     * @param ctx The context\n     * @throws PMException\n     */\n    public void postExecute(PMContext ctx) throws PMException;\n\n    /**This method is executed after the main method of the operation.\n     * @param ctx The context\n     * @throws PMException\n     */\n    public void postExecute(PMContext ctx) throws PMException;\n\n    /**This method is executed after the main method of the operation.\n     * @param ctx The context\n     * @throws PMException\n     */\n   ", "reference_code": "     * @throws PMException\n     */\n    public void preExecute(PMContext ctx) throws PMException;\n", "case_type": "block"}
{"generated_code": "        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Completable removeValue(@NonNull Object key) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Completable clear() {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Single<Boolean> isEmpty() {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Single<Boolean> containsKey(@NonNull Object key) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Single<Boolean> containsValue(@NonNull Object value) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Single<Boolean> isEmpty() {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Single<Boolean> containsKey(@NonNull Object key) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public Single<Boolean> containsValue(@NonNull Object value) {\n        throw new UnsupportedOperationException();\n    }\n", "reference_code": "        throw new UnsupportedOperationException();\n", "case_type": "block"}
{"generated_code": "\n    @EJB\n    @Override\n    public void setCommandService(CommandExecutor commandService ) {\n        super.setCommandService(commandService);\n    }\n\n    @Override\n    public void setCommandService(CommandExecutor commandService ) {\n        super.setCommandService(commandService);\n    }\n\n    @Override\n    public void setCommandService(CommandExecutor commandService ) {\n        super.setCommandService(commandService);\n    }\n\n    @Override\n    public void setCommandService(CommandExecutor commandService ) {\n        super.setCommandService(commandService);\n    }\n\n    @Override\n    public void setCommandService(CommandExecutor commandService ) {\n        super.setCommandService(commandService);\n    }\n\n    @Override\n    public void setCommandService(CommandExecutor commandService ) {\n        super.setCommandService(commandService);\n    }\n\n    @Override\n    public void setCommandService(CommandExecutor commandService ) {\n        super.setCommandService(commandService);\n    }\n\n    @Override\n    public void setCommandService(CommandExecutor commandService ) {\n", "reference_code": "\n    @EJB(beanInterface=TransactionalCommandServiceExecutorEJBImpl.class)\n    @Override\n", "case_type": "block"}
{"generated_code": "import com.google.gwt.core.client.js.JSObject;\nimport com.google.gwt.extension.shared.ExtensionStateListener;\n\n@SuppressWarnings(\"unused\")\n@javax.annotation.Generated(\"com.google.gwt.extension.shared.v1.generator.JavaSPIBindingGenerator\")\n@javax.enterprise.inject.InstanceType(\"ExtensionStateListenerJSProxy\")\n@javax.enterprise.inject.Stereotype\n@javax.inject.Named(\"ExtensionStateListenerJSProxy\")\n@javax.inject.Singleton\n@javax.inject.Named(\"ExtensionStateListenerJSProxy\")\n@javax.inject.Named(\"ExtensionStateListenerJSProxy\")\n@javax.inject.Named(\"ExtensionStateListenerJSProxy\")\n@javax.inject.Named(\"ExtensionStateListenerJSProxy\")\n@javax.inject.Named(\"ExtensionStateListenerJSProxy\")\n@javax.inject.Named(\"ExtensionStateListenerJSProxy\")\n@javax.inject.Named(\"ExtensionStateListenerJSProxy\")\n@javax.in", "reference_code": "import burp.IExtensionStateListener;\nimport netscape.javascript.JSObject;\n\n", "case_type": "block"}
{"generated_code": "\n        this._delete = _delete;\n    }\n\n    public Date getFechaActualizacion() {\n        return this.fechaActualizacion;\n    }\n\n    public void setFechaActualizacion(Date fechaActualizacion) {\n        this.fechaActualizacion = fechaActualizacion;\n    }\n\n    public void setFechaActualizacion(Date fechaActualizacion, String actualizado) {\n        this.fechaActualizacion = fechaActualizacion;\n        this.actualizado = actualizado;\n    }\n\n    public void setFechaActualizacion(Date fechaActualizacion, String actualizado, String creado) {\n        this.fechaActualizacion = fechaActualizacion;\n        this.actualizado = actualizado;\n        this.creado = creado;\n    }\n\n    public void setFechaActualizacion(Date fechaActualizacion, String actualizado, String creado, String estado) {\n        this.fechaActualizacion = fechaActualizacion;\n        this.actualizado        this.actualizado = actualizado;\n    }", "reference_code": "\n    public Date getFechaActualizacion() {\n        return this.fechaActualizacion;\n    }\n\n", "case_type": "block"}
{"generated_code": "package com.example.demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration;\nimport org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration.ManagementEnabled;\nimport org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration.UserDetailsServiceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration.WebSecurityAutoConfiguration;\nimport org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration.WebSecurityConfiguration;\nimport org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration.WebSecurityEnabler;\nimport org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration.WebSecurityEnabler.ManagementEnabled;\nimport org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration.WebSecurityEnabler.UserDetailsServiceAutoConfiguration;\nimport org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration.Web", "reference_code": "package serversidewebapp;\n\nimport javax.faces.application.Application;\n", "case_type": "block"}
{"generated_code": "     * @param a2m\n     * @param a2m2\n     * @param a2m3\n     * @param a2m4\n     * @param a2m5\n     * @param a2m6\n     * @param a2m7\n     * @param a2m8\n     * @param a2m9\n     * @param a2m10\n     * @param a2m11\n     * @param a2m12\n     * @param a2m13\n     * @param a2m14\n     * @param a2m15\n     * @param a2m16\n     * @param a2m17\n     * @param a2m18\n     * @param a2m19\n     * @param a2m20\n     * @param a2m21\n     * @param a2m22\n     * @param a2m23\n     * @param a2m24\n     * @param a2m25\n     * @param a2m26\n     * @param a2", "reference_code": "     * Normal constructor\n", "case_type": "block"}
{"generated_code": "LOGGER.isLoggable(Level.FINE)) {\n                LOGGER.log(Level.FINE, \"Excluding field '\" + ctField.getName() + \"' because no include matched.\");\n            }\n            return false;\n        }\n        return true;\n    }\n\n    public boolean includeField(CtField ctField, String fieldName) {\n        return            LOGGER.log(Level.FINE, \"Including method '\" + ctMethod.getLongName() + \"' because include method filter matched.\");\n                }\n                return true;\n            }\n        }\n        int includesCount = 0;\n        for (Filter filter : includes) {\n            includesCount++;\n            if (filter.matches(ctMethod)) {\n                if (LOGGER.isLoggable(Level.FINE)) {\n                    LOGGER.log(Level.FINE, \"Including method '\" + ctMethod.getLongName() + \"' because include method filter matched.\");\n                }\n                return true;\n            }\n        }\n        if (includesCount > 0) {\n            if (LOGGER.isLog", "reference_code": "                    LOGGER.log(Level.FINE, \"Including method '\" + ctMethod.getLongName() + \"' because include method filter matched.\");\n", "case_type": "block"}
{"generated_code": "    };\n\n    //~ Methods ----------------------------------------------------------------\n\n    /**\n     * Returns the operator as a string.\n     * @return the operator as a string.\n     */\n    public String getOperator() {\n        return (String) super.getSelectedItem();\n    }\n\n    /**\n     * Sets the operator.\n     * @param operator the operator.\n     */\n    public void setOperator(String operator) {\n        super.setSelectedItem(operator);\n    }\n\n    /**\n     * Returns the operator as a string.\n     * @return the operator as a string.\n     */\n    public String getOperatorAsString() {\n        return (String) super.getSelectedItem();\n    }\n\n    /**\n     * Sets the operator.\n     * @param operator the operator.\n     */\n    public void setOperatorAsString(String operator) {\n        super.setSelectedItem(operator);\n    }\n\n    /**\n     * Returns the operator as a string.\n     * @return the operator as a string.\n     */\n    public String getOperatorAsString(String operator) {\n        return (String)", "reference_code": "        };                                                                                                           // NOI18N\n", "case_type": "block"}
{"generated_code": "import android.os.Bundle;\nimport android.support.v7.app.ActionBar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.widget.TextView;\n\nimport com.michaelvescovo.android.itemreaper.R;\nimport com.michaelvescovo.android.itemreaper.settings.fragments.SettingsFragment;\nimport com.michaelvescovo.android.itemreaper.settings.fragments.SettingsFragment.OnFragmentInteractionListener;\nimport com.michaelvescovo.android.itemreaper.settings.fragments.SettingsFragment.OnFragmentInteractionListener;\nimport com.michaelvescovo.android.itemreaper.settings.fragments.SettingsFragment.OnFragmentInteractionListener;\nimport com.michaelvescovo.android.itemreaper.settings.fragments.SettingsFragment.OnFragmentInteractionListener;\nimport com.michaelvescovo.android.itemreaper.settings.fragments.SettingsFragment.OnFragmentInteractionListener;\nimport com.m", "reference_code": "import android.os.Bundle;\nimport android.support.v7.app.ActionBar;\nimport android.support.v7.app.AppCompatActivity;\nimport android.support.v7.widget.Toolbar;\nimport android.widget.TextView;\n", "case_type": "block"}
{"generated_code": " public void run() {\n                    keeprunning = false;\n                    t.interrupt();\n                }\n            });\n\n            while (keeprunning) {\n                state.addAll(nwss.getEvents());\n                logger.info(\"got \" + state.size() + \" events\");\n                if (state.size() > 0) {\n                    logger.info(\"sending \" + state.size() + \" emails\");\n                    for (CHPEvent e : state) {\n                        email.send(e);\n                    }\n                }\n                try {\n                    Thread.sleep(1000 * 60);\n                } catch (InterruptedException e) {\n                    logger.error(\"interrupted\", e);\n                }\n            }\n        } catch (Exception e) {\n            logger.error(\"can't start\", e);\n        }\n    }\n\n    public static class CompoundAlertListener implements AlertListener {\n        private List<AlertListener> listeners = new ArrayList<AlertListener>();\n\n        public void add(AlertListener al) {\n            listeners.add(al);\n        }\n", "reference_code": "    private static void doNwsDiff(Map<String,Feature> features, CompoundAlertListener alerters) {\n\n        // find the id's that are new\n", "case_type": "block"}
{"generated_code": "\n   void func_74733_b(DataInput p_152446_1_, NBTSizeTracker p_152446_2_) throws IOException {\n      p_152446_2_.func_152450_a(8L);\n      this.field_74756_a = p_152446_1_.readByte();\n   }\n\n   void func_74735_c(DataInput p_152446_1_, NBTSizeTracker p_152446_2_, NBTSizeTracker p_152446_3_) throws IOException {\n      p_152446_2_.func_152450_a(8L);\n      p_152446_2_.func_152450_a(8L);\n      p_152446_2_.func_152450_a(8L);\n      p_152446", "reference_code": "\n   void func_152446_a(DataInput p_152446_1_, int p_152446_2_, NBTSizeTracker p_152446_3_) throws IOException {\n", "case_type": "block"}
{"generated_code": "    public DataIterator<Entity> iterator() {\n        return new EntityPartIterator();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public DataContainer<Entity> get(DataContainer<Entity> container) {\n        return container.setData((Entity) context.get(productName));\n    }\n\n    @Override\n    public String toString() {\n        return \"EntityPartSource [productName=\" + productName + \", partName=\" + partName + \"]\";\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public boolean equals(Object obj) {\n        return (obj instanceof EntityPartSource) && ((EntityPartSource)obj).productName.equals(productName) && ((EntityPartSource)obj).partName.equals(partName);\n    }\n\n    @Override\n    public int hashCode() {\n        return productName.hashCode() ^ partName.hashCode();\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public Class<Entity> getDataType() {", "reference_code": "    public DataIterator<Entity> iterator() {\n        return new EntityPartIterator();\n    }\n\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Override\n    public String toString() {\n        return \"<!--\" + node.getNodeValue() + \"-->\";\n    }\n\n    @Override\n    public String toString(int indent) {\n        return \"<!--\" + node.getNodeValue() + \"-->\";\n    }\n\n    @Override\n    public String toString(int indent, String indentChar) {\n        return \"<!--\" + node.getNodeValue() + \"-->\";\n    }\n\n    @Override\n    public String toString(int indent, String indentChar, String newline) {\n        return \"<!--\" + node.getNodeValue() + \"-->\";\n    }\n\n    @Override\n    public String toString(int indent, String indentChar, String newline, String indentChar2) {\n        return \"<!--\" + node.getNodeValue() + \"-->\";\n    }\n\n    @Override\n    public String toString(int indent, String indentChar, String newline, String indentChar2, String indent", "reference_code": "    }\n", "case_type": "block"}
{"generated_code": "     */\n    public void setCollapseSnapshots(Boolean value) {\n        this.collapseSnapshots = value;\n        this.collapseSnapshots = (value != null)? value.booleanValue() : null;\n        this.collapseSnapshots = (value != null)? value.booleanValue() : null;\n        this.collapseSnapshots = (value != null)? value.booleanValue() : null;\n        this.collapseSnapshots = (value != null)? value.booleanValue() : null;\n        this.collapseSnapshots = (value != null)? value.booleanValue() : null;\n        this.collapseSnapshots = (value != null)? value.booleanValue() : null;\n        this.collapseSnapshots = (value != null)? value.booleanValue() : null;\n        this.collapseSnapshots = (value != null)? value.booleanValue() : null;\n        this.collapseSnapshots = (value != null)? value.booleanValue() : null;\n        this.collapseSnapshots = (value != null)? value.booleanValue() : null;\n        this.collapseSnapshots = (value", "reference_code": "     */\n    public void setCollapseSnapshots(Boolean value) {\n        this.collapseSnapshots = value;\n", "case_type": "block"}
{"generated_code": "ArgListKind\";\n  public InteractionBuilder setArgListKind(String kind) {\n    argNames = new ArrayList<Object>();\n    argConstraints = new ArrayList<IArgumentConstraint>();\n    return this;\n  }\n\n  public static final String SET_ARG_LIST_NAME = \"setArgListName\";\n  public InteractionBuilder setArgListName(String name) {\n    return this;\n   }\n\n  public static final String ADD_ARGUMENT = \"addArgument\";\n  public InteractionBuilder addArgument(Object arg) {\n    argNames.add(arg);\n    return this;\n  }\n\n  public static final String ADD_SPREAD_ARGUMENT = \"addSpreadArgument\";\n  public InteractionBuilder addSpreadArgument(Object arg) {\n    argNames.add(arg);\n    return this;\n  }\n\n  public static final String ADD_CLOSURE_ARGUMENT = \"addClosureArgument\";\n  public InteractionBuilder addClosureArgument(Clos  public static final String ADD_ARGUMENT_CONSTRAINT = \"addArgumentConstraint\";", "reference_code": "  }\n\n", "case_type": "block"}
{"generated_code": "            System.out.println(listaProdutos.get(i).getNome());\n        }\n\n        System.out.println(\"----------------------------\");\n        Collections.sort(listaProdutos);\n\n        for (Produto p : listaProdutos){\n            System.out.println(p.getNome());\n        }\n\n        System.out.println(\"----------------------------\");\n        Collections.sort(listaProdutos, new ProdutoComparator());\n\n        for (Produto p : listaProdutos){\n            System.out.println(p.getNome());\n        }\n\n        System.out.println(\"----------------------------\");\n        Collections.sort(listaProdutos, new ProdutoComparator2());\n\n        for (Produto p : listaProdutos){\n            System.out.println(p.getNome());\n        }\n\n        System.out.println(\"----------------------------\");\n        Collections.sort(listaProdutos, new ProdutoComparator3());\n\n        for (Prod", "reference_code": "            Produto pAux = listaProdutos.get(i);\n            //System.out.println(\"-----------\");\n            //System.out.println(\"ID :\" +pAux.getId());\n            //System.out.println(pAux.getNome());\n        }\n", "case_type": "block"}
{"generated_code": "import java.util.List;\n\npublic enum Text {\n\n    //@TODO Get text location from DB\n    //@TODO Change server location to ../applications/__internal/elite-fle-1.0-SNAPSHOT/\n    text0(\"Aider les handicapés dans le monde du travail\", new File(\"\").getAbsolutePath() + File.separator + \"texts\" + File.separator + \"texte_corefB100test.xml\", Level.delfB1),\n    //@TODO Get text location from DB\n    //@TODO Change server location to ../applications/__internal/elite-fle-1.0-SNAPSHOT/\n    text2(\"Les Thibault, tome 1, le cahier gris (fragment)\", new File(\"\").getAbsolutePath() + File.separator + \"texts\" + File.separator + \"texte_corefB104test.xml\", Level.delfB1),\n    //@TODO Get text location from DB\n    //@TODO Change server location", "reference_code": "import java.util.List;\n\npublic enum Text {\n", "case_type": "block"}
{"generated_code": "        hash = (hash << 5) - hash + (m_title == null ? 0 : m_title.hashCode());\n        return hash;\n    }\n\n    public PageContext setTitle(String title, String... params) {\n        return setTitle(String.format(title, params));\n    }\n\n    public PageContext setTitle(String title, Object... params) {\n        return setTitle(String.format(title, params));\n    }\n\n    public PageContext setTitle(String title, Object param) {\n        return setTitle(String.format(title, param));\n    }\n\n    public PageContext setTitle(String title, Object param1, Object param2) {\n        return setTitle(String.format(title, param1, param2));\n    }\n\n    public PageContext setTitle(String title, Object param1, Object param2, Object param3) {\n        return setTitle(String.format(title, param1, param2, param3));\n    }\n\n    public PageContext setTitle(String title, Object param1, Object param2, Object param3, Object param4)", "reference_code": "\n        hash = hash * 31 + (m_title == null ? 0 : m_title.hashCode());\n\n        return hash;\n    }\n", "case_type": "block"}
{"generated_code": "    public abstract void testGetShortValue();\n\n    public abstract void testGetIntValue();\n\n    public abstract void testGetLongValue();\n\n    public abstract void testGetAddressValue();\n\n    public abstract void testGetReferenceValue();\n\n    public abstract void testGetArrayValue();\n\n    public abstract void testGetClassValue();\n\n    public abstract void testGetEnumValue();\n\n    public abstract void testGetPrimitiveArrayValue();\n\n    public abstract void testGetObjectValue();\n\n    public abstract void testGetArrayValue();\n\n    public abstract void testGetPrimitiveArrayValue();\n\n    public abstract void testGetObjectValue();\n\n    public abstract void testGetEnumValue();\n\n    public abstract void testGetClassValue();\n\n    public abstract void testGetArrayValue();\n\n    public abstract void testGetPrimitiveArrayValue();\n\n    public abstract void testGetObjectValue();\n\n    public abstract void testGetBooleanValue();\n\n    public abstract void testGetByteValue();\n\n    public abstract void testGetCharValue();\n\n    public abstract void testGetShortValue();\n\n    public abstract void testGetIntValue", "reference_code": "    public abstract void testGetShortValue();\n\n    public abstract void testGetIntValue();\n\n    public abstract void testGetLongValue();\n", "case_type": "block"}
{"generated_code": "    @Test\n    public void crumbRequestFieldTest() {\n        // TODO: test crumbRequestField\n    }\n\n    /**\n     * Test the property 'crumbHeaderName'\n     */\n    @Test\n    public void crumbHeaderNameTest() {\n        // TODO: test crumbHeaderName\n    }\n\n    /**\n     * Test the property 'crumbHeaderValue'\n     */\n    @Test\n    public void crumbHeaderValueTest() {\n        // TODO: test crumbHeaderValue\n    }\n\n    /**\n     * Test the property 'crumbEnabled'\n     */\n    @Test\n    public void crumbEnabledTest() {\n        // TODO: test crumbEnabled\n    }\n\n    /**\n     * Test the property 'crumbGenerator'\n     */\n    @Test\n    public void crumbGeneratorTest() {\n        // TODO: test crumbGenerator\n    }\n\n    /**\n     * Test the property 'crumbGeneratorClass'\n     */\n    @Test\n    public void crumbGeneratorClassTest() {\n        // TODO: test crumbGeneratorClass\n    }", "reference_code": "    @Test\n    public void crumbRequestFieldTest() {\n        // TODO: test crumbRequestField\n    }\n", "case_type": "block"}
{"generated_code": "return Returns a reference to this object so that method calls can be chained together.\n     */\n\n    public PutRepositoryTriggersRequest withTriggers(java.util.Collection<RepositoryTrigger> triggers) {\n        setTriggers(triggers);\n        return this;\n    }\n\n    /**\n         * <p>\n     * The JSON block of configuration information for each trigger.\n     * </p>\n     * \n     * @param triggers\n     *        The JSON block of configuration information for each trigger.\n     * @return Returns a reference to this object so that method calls can be chained together.\n     */\n\n    public PutRepositoryTriggersRequest withTriggers(java.util.Collection<RepositoryTrigger> triggers) {\n        return withTriggers(triggers);\n    }\n\n    public PutRepositoryTriggersRequest withTriggers(java.util.Collection<RepositoryTrigger> triggers) {\n        return withTriggers(triggers);\n    }\n\n    public PutRepositoryTriggersRequest withTriggers(java.util.Collection<RepositoryTrigger", "reference_code": "        return this;\n    }\n", "case_type": "block"}
{"generated_code": "\n    public void setAuth(Auth auth) {\n        this.auth = auth;\n    }\n\n    @Override\n    public String toString() {\n        return \"KeystoneGetTokenPayload{\" +\n                \"auth=\" + auth +\n                '}';\n    }\n\n    public static class Auth {\n        String passwordCredentials;\n\n        public String getPasswordCredentials() {\n            return passwordCredentials;\n        }\n\n        public void setPasswordCredentials(String passwordCredentials) {\n            this.passwordCredentials = passwordCredentials;\n        }\n\n        @Override\n        public String toString() {\n            return \"Auth{\" +\n                    \"passwordCredentials='\" + passwordCredentials + '\\'' +\n                    '}';\n        }\n    }\n\n    public static class Auth2 {\n        String passwordCredentials;\n\n        public String getPasswordCredentials() {\n            return passwordCredentials;\n        }\n\n        public void setPasswordCredentials(String passwordCredentials) {\n            this.passwordCredentials = passwordCredentials;\n        }\n\n        @Override\n        public String", "reference_code": "\n    public void setAuth(Auth auth) {\n        this.auth = auth;\n", "case_type": "block"}
{"generated_code": "public class ConnectionManagerTest {\n\n    @Test\n    public void getConnection_conParametrosNoValidos_devuelveConexion() throws ClassNotFoundException {\n        assertNotNull(ConnectionManager.getConnection());\n    }\n\n    @Test\n    public void getConnection_conParametrosValidos_devuelveConexion() throws ClassNotFoundException {\n        assertNotNull(ConnectionManager.getConnection(\"url valida\",\" driver valido\"));\n    }\n\n    @Test\n    public void getConnection_conParametrosValidos_devuelveConexion2() throws ClassNotFoundException {\n        assertNotNull(ConnectionManager.getConnection(\"url valida\",\" driver valido\"));\n    }\n\n    @Test\n    public void getConnection_conParametrosValidos_devuelveConexion3() throws ClassNotFoundException {\n        assertNotNull(ConnectionManager.getConnection(\"url valida\",\" driver valido\"));\n    }\n\n    @Test\n    public void getConnection_conParametrosValidos_devuelveConexion4() throws ClassNotFoundException {\n        assertNotNull(ConnectionManager.getConnection(\"", "reference_code": "public class ConnectionManagerTest {    \n\n    @Test\n", "case_type": "block"}
{"generated_code": " = out        //\n    //--------------------------------------------------------------------------\n\n    //--------------------------------------------------------------------------\n    //\n    // Instance Variables\n    //\n    //--------------------------------------------------------------------------\n\n    //--------------------------------------------------------------------------\n    //\n    // Constructors\n    //\n    //--------------------------------------------------------------------------\n\n    //--------------------------------------------------------------------------\n    //\n    // Methods\n    //\n    //--------------------------------------------------------------------------\n\n    //--------------------------------------------------------------------------\n    //\n    // Inner Classes\n    //\n    //--------------------------------------------------------------------------\n\n    //--------------------------------------------------------------------------\n    //\n    // Classes\n    //\n    //--------------------------------------------------------------------------\n\n    //--------------------------------------------------------------------------\n    //\n    // Interface\n    //\n    //--------------------------------------------------------------------------\n\n    //--------------------------------------------------------------------------\n    //\n    // Enums\n    //\n    //--------------------------------------------------------------------------\n\n    //--------------------------------------------------------------------------\n    //\n    // Attributes\n    //\n    //--------------------------------------------------------------------------\n\n    //--------------------------------------------------------------------------\n    //\n    // Inner Classes\n    //\n    //--------------------------------------------------------------------------\n\n    //--------------------------------------------------------------------------\n    //\n    // Inner Interfaces\n    //\n    //--------------------------------------------------------------------------\n\n    //--------------------------------------------------------------------------\n    //\n    // Inner Classes\n    //\n    //--------------------------------------------------------------------------\n", "reference_code": "    //\n    // Variables\n    //\n    //--------------------------------------------------------------------------\n\n", "case_type": "block"}
{"generated_code": "());\n        viewHolder.time.setText(entity.getNo_one_fragment_entity_time());\n        return convertView;\n    }\n\n    class ViewHolder {\n        TextView gameName;\n        TextView LastestDiscuss;\n        TextView time;\n        ImageView gameAvatar;\n        TextView userName;\n        BadgeView badgeView;\n    }\n\n}\n\nclass No_One_Fragment_Entity {\n\n    private        if (entity.getNo_one_fragment_entity_img() == null) {\n            viewHolder.gameAvatar.setImageResource(R.drawable.ic_launcher);\n        } else {\n            viewHolder.gameAvatar.setImageBitmap(entity\n                    .getNo_one_fragment_entity_img());\n        }\n        if (entity.getNo_one_fragment_entity_user_name() == null) {\n            viewHolder.userName.setText(\"\");\n        } else {\n            viewHolder.userName.setText(entity\n                    .getNo_one_fragment_entity_user_name());\n        }\n", "reference_code": "        // Èç¹�Ö¸¶¨¸�ÐÂgameNameµÈÓÚÎÒÒªµÄgameNameµÄentity¾ÍÌí¼ÓÐ¡ºìµã\n        if (entity.getNo_one_fragment_entity_game_name().equals(gameNameTemp)) {\n            viewHolder.badgeView.setVisibility(View.VISIBLE);\n", "case_type": "block"}
{"generated_code": "    public RemoteControlService_Service(URL wsdlLocation, QName serviceName) {\n        super(wsdlLocation, serviceName);\n    }\n\n    public RemoteControlService_Service(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {\n        super(wsdlLocation, serviceName, features);\n    }\n\n    /**\n     * \n     * @return\n     *     returns RemoteControlService\n     */\n    @WebEndpoint(name = \"RemoteControlServicePort\")\n    public RemoteControlService getRemoteControlServicePort() {\n        return super.getPort(new QName(\"http://awtomation.opengi.com/\", \"RemoteControlServicePort\"), RemoteControlService.class);\n    }\n\n    /**\n     * \n     * @param features\n     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.\n     * @return\n     *     returns RemoteControlService\n     */\n    @WebEndpoint(name = \"Remote", "reference_code": "    public RemoteControlService_Service(URL wsdlLocation, QName serviceName) {\n", "case_type": "block"}
{"generated_code": "import org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.XMLReaderFactory;\n\nimport loci.common.xml.XMLUtils.XMLReaderFactoryImpl;\n\nimport org.xml.sax.ContentHandler;\nimport org.xml.sax.Locator;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\n\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\n\nimport org.xml.sax.InputSource;\nimport org.xml.sax.SAXException;\nimport org.xml.sax.XMLReader;\nimport org.xml.sax.helpers.DefaultHandler;\n\nimport org.xml.sax.InputSource;\nimport", "reference_code": "import org.xml.sax.InputSource;\n", "case_type": "block"}
{"generated_code": "import util.NumberAsString;\n\npublic class PollOptionsTableModel extends AbstractTableModel\n\n{\n    private static final long serialVersionUID = 1L;\n\n    public static final int COLUMN_NAME = 0;\n    public static final int COLUMN_VOTES = 1;\n    public static final int COLUMN_PERCENTAGE = 2;\n\n    private String[] columnNames = {\"Name\", \"Votes\", \"% of Total\"};\n    private Poll poll;\n\n    public PollOptionsTableModel(Poll poll)\n    {\n        this.poll = poll;\n    }\n\n    public PollOption getPollOption(int row)\n    {\n        return this.poll.getOptions().get(row);\n    }\n\n    @Override\n    public int getColumnCount() \n    {\n        return this.columnNames.length;\n    }\n\n    @Override\n    public String getColumnName(int index) \n    {\n        return this.columnNames[index];\n       }\n\n    @Override\n    public int getRowCount() \n", "reference_code": "import utils.NumberAsString;\n\n@SuppressWarnings(\"serial\")\npublic class PollOptionsTableModel extends AbstractTableModel\n", "case_type": "block"}
{"generated_code": "        SharedPreferencesManager.getInstance().setBoolean(getSharedPreferenceKey(),\n                getValue());\n    }\n\n    /**\n     * Sets the value of the field trial parameter to be returned by native.\n     *\n     * This is useful for testing.\n     *\n     * @param value the value to be returned\n     */\n    public void setValue(boolean value) {\n        CachedFeatureFlags.setOverrideTestValue(getSharedPreferenceKey(), String.valueOf(value));\n    }\n\n    /**\n     * Sets the value of the field trial parameter to be returned by native.\n     *\n     * This is useful for testing.\n     *\n     * This is not intended to be called by the user.\n     *\n     * This is not intended to be called by the user.\n     *\n     * This is not intended to be called by the user.\n     *\n     * This is not intended to be called by the user.\n     *\n     * This is not intended to be called by the user.\n     *\n     * This is not intended to be called by the user.\n     *\n     *", "reference_code": "        boolean value = ChromeFeatureList.getFieldTrialParamByFeatureAsBoolean(\n                getFeatureName(), getParameterName(), getDefaultValue());\n        SharedPreferencesManager.getInstance().writeBoolean(getSharedPreferenceKey(), value);\n    }\n\n    /**\n", "case_type": "block"}
{"generated_code": "    /**\n   * Return length in bytes.\n   */\n  public int getByteLength() {\n    return length;\n  }\n\n  private static byte[] getBytesFor(String string) {\n    return string.getBytes(StandardCharsets.UTF_8);\n  }\n\n  private static void checkLength(int length) {\n    if (length > MAX_LENGTH) {\n      throw new AvroRuntimeException(\"String too long: \" + length);\n    }\n  }\n\n  public String toString() {\n    return string;\n  }\n\n  public BinaryData toBinary() {\n    return BinaryData.toBinary(bytes);\n  }\n\n  public int compareTo(Utf8 other) {\n    return string.compareTo(other.string);\n  }\n\n  public int hashCode() {\n    return hash;\n  }\n\n  public boolean equals(Object o) {\n    return o    /**\n   * Return UTF-8 encoded bytes. Only valid through {@link #getByteLength()}.\n   */\n  public byte[] getBytesFor() {\n    return", "reference_code": "  /** Return length in bytes. */\n  public int getByteLength() {\n    return length;\n", "case_type": "block"}
{"generated_code": "\nimport org.apache.jackrabbit.JcrConstants.NodeType;\nimport org.apache.jackrabbit.api.JackrabbitSession;\nimport org.apache.jackrabbit.api.Session;\nimport org.apache.jackrabbit.api.security.user.User;\nimport org.apache.jackrabbit.api.security.user.UserManager;\nimport org.apache.jackrabbit.api.security.user.UserNotFoundException;\nimport org.apache.jackrabbit.api.security.user.UserService;\nimport org.apache.jackrabbit.api.security.user.UserServiceFactory;\nimport org.apache.jackrabbit.api.security.user.UserServiceFactoryImpl;\nimport org.apache.jackrabbit.api.security.user.UserServiceImpl;\nimport org.apache.jackrabbit.api.security.user.UserServiceImpl.UserServiceImplFactory;\nimport org.apache.jackrabbit.api.security.user.UserServiceImplFactoryImpl;\nimport org.apache.jackrabbit.api.security.user.UserServiceImplFactoryImpl.UserService", "reference_code": "\nimport javax.jcr.Session;\nimport javax.jcr.nodetype.NodeType;\n", "case_type": "block"}
{"generated_code": "String, Object> payload = new HashMap<>();\n        payload.put(\"accuracy\", point.getAccuracy());\n        payload        public Observable<SCSpatialFeature> query(SCQueryFilter filter) {\n        return Observable.empty();\n    }\n\n    @Override\n    public Observable<SCSpatialFeature> query(SCQueryFilter filter, SCKeyTuple keyTuple) {\n        return Observable.empty();\n    }\n\n    @Override\n    public Observable<SCSpatialFeature> query(SCQueryFilter filter, SCKeyTuple keyTuple, Action1<SCSpatialFeature> callback) {\n        return Observable.empty();\n    }\n\n    @Override\n    public Observable<SCSpatialFeature> query(SCQueryFilter filter, SCKeyTuple keyTuple, SCDataStoreLifeCycle callback) {\n        return Observable.empty();\n    }\n\n    @Override\n    public Observable<SCSpatialFeature> query(SCQueryFilter filter, SCKeyTuple keyTuple, SCDataStoreLifeCycle callback, SCStyle style) {", "reference_code": "    public Observable<SCSpatialFeature> query(final SCQueryFilter scFilter) {\n        return Observable.empty();\n    }\n\n    @Override\n", "case_type": "block"}
{"generated_code": "B    {\n        return localizedName;\n    }\n\n    @Override\n    public String localizedName()\n    {\n        return localizedName;\n    }\n\n    @Override\n    public String localizedDescription()\n    {\n        return localizedDescription;\n    }\n\n    private final static String localizedDescription  = CMLib.lang().L(\"You feel more in control.\");\n\n    @Override\n    public String localizedDescription(int langID)\n    {\n        return localizedDescription;\n    }\n\n    @Override\n    public String localizedDescription(int langID, int subID)\n    {\n        return localizedDescription;\n    }\n\n    @Override\n    public String localizedDescription(int langID, int subID, int subSubID)\n    {\n        return localizedDescription;\n    }\n\n    @Override\n    public String localizedDescription(int langID, int subID, int subSubID, int subSubSubID)\n    {\n        return localizedDescription;\n    }\n\n    @Override\n    public String localizedDescription(int langID, int subID, int subSubID, int subSubSubID, int", "reference_code": "    {\n        return localizedName;\n    }\n", "case_type": "block"}
{"generated_code": "import elki.math.VMath;\nimport elki.math.statistics.WelchTTest;\n\npublic class WelchTTestTest {\n  @Test\n  public void test() {\n    int size = 1000;\n    // Generate some random data\n    // This is a bit of a hack, but it's a good test\n    // of the Welch T-Test\n    // We're going to test it on a 3-dimensional array of 1000\n    // random values\n    // The first dimension is the sample, the second is the offset\n    // The third is the value\n    // We'll generate 3 samples, each with 1000 values\n    // and test the Welch T-Test on each of them\n    // We'll use the first sample as the reference\n    // and the other two as the test\n    // We'll use the first value as the reference\n    // and the other two as the test\n    // We'll use the first value as the reference\n    // and the other two as the test\n    // We'll use the first value", "reference_code": "import elki.math.linearalgebra.VMath;\n\npublic class WelchTTestTest {\n  @Test\n  public void basic() {\n    int size = 1000;\n", "case_type": "block"}
{"generated_code": "\n    /**\n     * unique name of the Group for the RuleResponsibility\n     *\n     * @return groupName\n     */\n    String getGroupName();\n\n    /**\n     * unique name of the Principal for the RuleResponsibility\n     *\n     * @return principalName\n     */\n    String getPrincipalName();\n\n    /**\n     * unique name of the Role for the RuleResponsibility\n     *\n     * @return roleName\n     */\n    String getRoleName();\n\n    /**\n     * unique name of the Role for the RuleResponsibility\n     *\n     * @return roleName\n     */\n    String getRoleName();\n\n    /**\n     * unique name of the Role for the RuleResponsibility\n     *\n     * @return roleName\n     */\n    String getRoleName();\n\n    /**\n     * unique name of the Role for the RuleResponsibility\n     *\n     * @return roleName\n     */\n    String getRoleName();\n\n    /**\n     * unique name of the Role for the RuleResponsibility\n     *\n    ", "reference_code": "\n    /**\n", "case_type": "block"}
{"generated_code": "        return createtime;\n    }\n\n    @Override\n    public String getMsgType() {\n        return \"kf_session_get\";\n    }\n\n    @Override\n    public String getEvent() {\n        return \"kf_session_get\";\n    }\n\n    @Override\n    public String getEventKey() {\n        return \"kf_session_get\";\n    }\n\n    @Override\n    public String getTs() {\n        return String.valueOf(createtime);\n    }\n\n    @Override\n    public String getTsType() {\n        return \"long\";\n    }\n\n    @Override\n    public String getAppId() {\n        return appId;\n    }\n\n    @Override\n    public void setAppId(String appId) {\n        this.appId = appId;\n    }\n\n    @Override\n    public void setTs(String ts) {\n        this.createtime = Long.parseLong(ts);\n    }\n\n    @Override\n    public void setTsType(String tsType) {\n        this.createtime", "reference_code": "        return createtime;\n    }\n", "case_type": "block"}
{"generated_code": "        Icons.endsIcon = registry.registerIcon(Reference.MOD_ID + \":launch_pad_io\");\n    }\n\n    @Override\n    public void setBlockIcons(IIcon icon, ForgeDirection side) {\n        super.setBlockIcons(icon, side);\n        setTexture(ForgeDirection.NORTH, Icons.endsIcon);\n        setTexture(ForgeDirection.SOUTH, Icons.endsIcon);\n        setTexture(ForgeDirection.EAST, Icons.endsIcon);\n        setTexture(ForgeDirection.WEST, Icons.endsIcon);\n        setTexture(ForgeDirection.UP, Icons.endsIcon);\n        setTexture(ForgeDirection.DOWN, Icons.endsIcon);\n    }\n\n    @Override\n    public void setBlockIcons(IIcon icon, ForgeDirection side, ForgeDirection side2) {\n        super.setBlockIcons(icon, side, side2);\n        setTexture(ForgeDirection.NORTH, Icons.endsIcon);\n        setTexture(ForgeDirection.SOUTH, Icons", "reference_code": "\n        Icons.endsIcon = registry.registerIcon(Reference.MOD_ID + \":launchPadIO_ends\");\n", "case_type": "block"}
{"generated_code": "     */\n    private boolean isClosed = false;\n\n    /** Record layer object from which input bytes are read. */\n    private static final int BUF_SIZE = 1024;\n\n    /** Buffer for reading input bytes. */\n    private byte[] buf = new byte[BUF_SIZE];\n\n    /** Record object for reading input bytes. */\n    private Record rec = new Record(buf);\n\n    /**\n     * Record object for reading input bytes.\n     */\n    private static final int BUF_SIZE = 1024;\n\n    /**\n     * Record object for reading input bytes.\n     */     private boolean isClosed = false;\n\n    /** Record object for reading input bytes. */\n    private static final int BUF_SIZE = 1024;\n\n    /** Buffer for reading input bytes. */\n    private byte[] buf = new byte[BUF_SIZE];\n\n    /** Record object for reading input bytes. */\n    private Record rec = new Record(buf);\n\n    /** Record object for reading input bytes. */\n    private static final int BUF_SIZE = 102", "reference_code": "    private boolean isClosed = false;\n\n    /** Underlying SSL record layer from which bytes are read. */\n", "case_type": "block"}
{"generated_code": "package com.yostajsc.style.designs.animations.viewanimator;\n\nimport android.animation.Animator;\nimport android.animation.AnimatorListenerAdapter;\nimport android.animation.AnimatorSet;\nimport android.animation.ObjectAnimator;\nimport android.animation.ValueAnimator;\nimport android.view.View;\nimport android.view.animation.AlphaAnimation;\nimport android.view.animation.Animation;\nimport android.view.animation.AnimationSet;\nimport android.view.animation.TranslateAnimation;\n\nimport com.nineoldandroids.animation.Animator;\nimport com.nineoldandroids.animation.AnimatorListenerAdapter;\nimport com.nineoldandroids.animation.AnimatorSet;\nimport com.nineoldandroids.animation.ObjectAnimator;\nimport com.nineoldandroids.animation.ValueAnimator;\n\nimport com.yostajsc.style.designs.animations.BaseViewAnimator;\n\nimport android.animation.Animator;\nimport android.animation.", "reference_code": "package com.yostajsc.style.designs.animations.fading_entrances;\n", "case_type": "block"}
{"generated_code": "        String action = intent.getAction();\n\n        Log.d(TAG, \"Received wakeup intent with action: \" + action);\n\n        // TODO: check for alarm on/off\n\n        // TODO: check for screen on/off\n\n        // TODO: check for screen wakeup\n\n        // TODO: check for alarm wakeup\n\n        // TODO: check for alarm on/off\n\n        // TODO: check for screen wakeup\n\n        // TODO: check for screen on/off\n\n        // TODO: check for alarm wakeup\n\n        // TODO: check for alarm on/off\n\n        // TODO: check for screen wakeup\n\n        // TODO: check for screen on/off\n\n        // TODO: check for alarm wakeup\n\n        // TODO: check for alarm on/off\n\n        // TODO: check for screen wakeup\n\n        // TODO: check for screen on/off\n\n        // TODO: check for alarm wakeup\n\n        // TODO: check for alarm on/off\n\n        // TODO: check for screen wakeup\n\n        // TODO: check for screen on/off\n\n        // TODO:", "reference_code": "        String action = intent.getAction();\n\n", "case_type": "block"}
{"generated_code": "{\n    String[] value();\n\n    String[] elementValue();\n\n    String[] elementType();\n\n    String[] elementTypeName();\n\n    String[] elementTypeNames();\n\n    String elementTypeName();\n\n    String elementTypeNames();\n\n    String elementTypeName();\n\n    String elementTypeNames();\n\n    String elementTypeName();\n\n    String elementTypeNames();\n\n    String elementTypeName();\n\n    String elementTypeNames();\n\n    String elementTypeName();\n\n    String elementTypeNames();\n\n    String elementTypeName();\n\n    String elementTypeNames();\n\n    String elementTypeName();\n\n    String elementTypeNames();\n\n    String elementTypeName();\n\n    String elementTypeNames();\n\n    String elementTypeName();\n\n    String elementTypeNames();\n\n    String elementTypeName();\n\n    String elementTypeNames();\n\n    String elementTypeName();\n\n    String elementTypeNames();\n\n    String elementTypeName();\n\n    String elementTypeNames();\n\n    String elementTypeName();\n\n    String elementTypeNames();\n\n    String elementTypeName", "reference_code": "{\n", "case_type": "block"}
{"generated_code": "\npublic class CrashCause implements Serializable {\n\n    private static final long serialVersionUID = 1L;\n\n    @com.google.gson.annotations.SerializedName(\"stack_trace\")\n    @com.google.gson.annotations.Expose\n    @com.google.gson.annotations.SerializedName(\"stackTrace\")\n    @com.google.gson.annotations.Expose(serialize = false, deserialize = false)\n    @com.google.gson.annotations.JsonAdapter(CrashCauseAdapter.class)\n    @com.google.gson.annotations.Expose(serialize = false, deserialize = false)\n    @com.google.gson.annotations.SerializedName(\"stack_trace\")\n    @com.google.gson.annotations.Expose(serialize = false, deserialize = false)\n    @com.google.gson.annotations.SerializedName(\"stackTrace\")\n    @com.google.gson.annotations.Expose(serialize = false, deserialize = false)\n", "reference_code": "\npublic class CrashCause implements Serializable {\n\n", "case_type": "block"}
{"generated_code": "    private List<Tuple> ourPendingTuples = new ArrayList();\n\n    //FIXME: ourOutTuples\n\n    //FIXME: ourPendingTuples\n\n    //FIXME: ourOutTuples\n\n    //FIXME: ourPendingTuples\n\n    //FIXME: ourOutTuples\n\n    //FIXME: ourPendingTuples\n\n    //FIXME: ourOutTuples\n\n    //FIXME: ourPendingTuples\n\n    //FIXME: ourOutTuples\n\n    //FIXME: ourPendingTuples\n\n    //FIXME: ourOutTuples\n\n    //FIXME: ourPendingTuples\n\n    //FIXME: ourOutTuples\n\n    //FIXME: ourPendingTuples\n\n    //FIXME: ourOutTuples\n\n    //FIXME: ourPendingTuples\n\n    //FIXME: ourOutTuples\n\n    //FIXME: ourPendingTuples\n\n    //FIXME: ourOutTuples\n\n", "reference_code": "    private List<Tuple> ourPendingTuples = new ArrayList();\n", "case_type": "block"}
{"generated_code": "        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.dimId = dimId;\n    }\n\n    public void setLocation(double x, double y, double z, int dimId) {\n        this.x = (int) x;\n        this.y = (int) y;\n        this.z = (int) z;\n        this.dimId = dimId;\n    }\n\n    public void setLocation(double x, double y, double z) {\n        this.x = (int) x;\n        this.y = (int) y;\n        this.z = (int) z;\n        this.dimId = 0;\n    }\n\n    public void setLocation(double x, double y, double z, double yaw, double pitch) {\n        this.x = (int) x;\n        this.y = (int) y;\n        this.z = (int) z;\n        this.dimId = 0;\n        this.yaw = yaw;\n        this.pitch = pitch;\n    }", "reference_code": "        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.dimId = dimId;\n", "case_type": "block"}
{"generated_code": "\n  public FieldUpdateChainDescriptor getDescriptor() {\n    return descriptor;\n  }\n\n  public void setDescriptor(FieldUpdateChainDescriptor descriptor) {\n    this.descriptor = descriptor;\n  }\n\n  public void setDescriptor(FieldUpdateChainDescriptor descriptor, List<NodeDetail> allTopics) {\n    this.allTopics = allTopics;\n    this.topics = descriptor.getTopics();\n    this.pubDetail = descriptor.getPublication();\n\n    this.kmeliaScc = descriptor.getKmeliaSessionController();\n\n    this.descriptor = descriptor;\n  }\n\n  public void setDescriptor(FieldUpdateChainDescriptor descriptor, String[] topics) {\n    this.topics = topics;\n    this.pubDetail = descriptor.getPublication();\n    this.kmeliaScc = descriptor.getKmeliaSessionController();\n\n    this.allTopics = descriptor.getAllTopics();\n\n    this.descriptor = descriptor;\n  }\n\n  public void setDescriptor(FieldUpdateChainDescriptor descriptor, String[] topics,\n      List<NodeDetail> all", "reference_code": "\n  public FieldUpdateChainDescriptor getDescriptor() {\n    return descriptor;\n  }\n\n  public void setDescriptor(FieldUpdateChainDescriptor descriptor) {\n", "case_type": "block"}
{"generated_code": "                token = inFile.next();\n\n                System.out.println(\"Token = \" + token);\n\n                System.out.println(\"Token length = \" + token.length());\n\n                System.out.println(\"Token's Characters = \");\n\n                //for (int i=0; i<token.length(); i++)\n                //{\n                //    subString = token.charAt(i);\n                //    System.out.println(subString);\n                //}\n\n                System.out.println();\n\n                System.out.println(\"Token's Characters' ASCII code = \");\n\n                //for (int i=0; i<token.length(); i++)\n                //{\n                //    subString = token.charAt(i);\n                //    System.out.println(subString);\n                //}\n\n                System.out.println();\n\n                System.out.println(\"Token's Characters' ASCII code = \");\n\n                //for (int i=0; i<token.length(); i++)\n                //{\n                //    subString =", "reference_code": "                token = inFile.next();\n", "case_type": "block"}
{"generated_code": "public class DepthPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.75f;\n\n    public void transformPage(View view, float position) {\n\n        view.setElevation(100 * position);\n\n        view.setTranslationX(view.getWidth() * -position);\n        view.setAlpha(0.7f + (1 - Math.abs(position)) * (1 - 0.7f));\n        view.setScaleX(0.85f + (1 - Math.abs(position)) * (0.85f - 1));\n        view.setScaleY(0.85f + (1 - Math.abs(position)) * (0.85f - 1));\n\n    }\n\n    public void transformPage(View view, float position) {\n        view.setTranslationX(view.getWidth() * -position);\n        view.setAlpha(0.7f + (1 - Math.abs(position)) * (1 - 0.7f));\n        view", "reference_code": "public class DepthPageTransformer implements ViewPager.PageTransformer {\n    private static final float MIN_SCALE = 0.75f;\n    public void transformPage(View view, float position) {\n", "case_type": "block"}
{"generated_code": ");\n                            int square = Integer.parseInt(content);\n                            board.doMovement(square, SquareStatus.FRIENDLY);\n                            owner.finishGame(sender);\n                        } catch (Exception ex) {\n                            AgentHelper.log(myAgent, \"invalid movement received from \" + message.getSender().getName());\n                        }\n            }\n        });\n    }\n}\n\n    @Override\n    protected void takeDown() {\n        super.takeDown();\n    }\n\n    @Override\n    protected void onNewMessage(ACLMessage message) {\n        throw new UnsupportedOperation        @Override\n            public void action() {\n                ACLMessage message = AgentHelper.receiveMessage(myAgent, ACLMessage.INFORM);\n                //we've got the movement's message that wants to be played\n                //AgentHelper.log(myAgent, \"new inform received from \" + message.getSender().getName());\n\n                //we've got the board's message that wants we to play\n                //AgentHelper.log(myAgent, \"new inform received from \" + message.getS", "reference_code": "            @Override\n            public void action() {\n                ACLMessage message = AgentHelper.receiveMessage(myAgent, ACLMessage.INFORM);\n", "case_type": "block"}
{"generated_code": " this really a LatLonDocValuesField?\");\n               }\n\n    public static class LatLonPointIndexFieldDataCache extends IndexFieldDataCache<LatLonPointIndexFieldData> {\n        public LatLonPointIndexFieldDataCache(CircuitBreakerService circuitBreakerService) {\n            super(LatLonPointIndexFieldData.class, circuitBreakerService);\n        }\n    }\n\n    @Override\n    public IndexFieldData.XFieldComparatorSource.Nested getNestedComparatorSource() {\n        return IndexFieldData.XFieldComparatorSource.Nested.LAT_LON;\n    }\n\n    @Override\n    public String toString() {\n        return \"LatLonPointIndexFieldData{fieldName=\" + fieldName + \", valuesSourceType=\" + valuesSourceType + \"}\";\n    }\n\n    }\n\nimport org.elasticsearch.search.sort.MultiValueMode;\nimport org.elasticsearch.search.sort.ValuesSourceType;\n\nimport org.elasticsearch.search.sort.XFieldComparatorSource;\n\nimport org", "reference_code": "import org.elasticsearch.search.MultiValueMode;\nimport org.elasticsearch.search.aggregations.support.ValuesSourceType;\n", "case_type": "block"}
{"generated_code": "     */\n    @XmlSchemaType(name = \"string\")\n    public void setAssociationType(String value) {\n        this.associationType = AssociationType.fromValue(value);\n    }\n\n    public void setAssociationType(AssociationType value) {\n        this.associationType = value;\n    }\n\n    public void setAssociationType(String value) {\n        this.associationType = AssociationType.fromValue(value);\n    }\n\n    public void setAssociationType(AssociationType value) {\n        this.associationType = value;\n    }\n\n    public void setAssociationType(String value) {\n        this.associationType = AssociationType.fromValue(value);\n    }\n\n    public void setAssociationType(String value) {\n        this.associationType = AssociationType.fromValue(value);\n    }\n\n    public void setAssociationType(String value) {\n        this.associationType = AssociationType.fromValue(value);\n    }\n\n    public void setAssociationType(String value) {\n        this.association", "reference_code": "     */\n", "case_type": "block"}
{"generated_code": "    annotations.add(AnnotationUtil.NLS_NULLABLE);\n    annotations.add(AnnotationUtil.NLS_NOT_NULL);\n\n    CodeStyleSettings settings = CodeStyleSettingsManager.getInstance(project).getSettings(JavaCodeStyleSettings.class);\n    annotations.addAll(ArrayUtil.filter(settings.getAnnotationTypes(), t -> t.startsWith(\"org.jetbrains.annotations\")));\n\n    return annotations.toArray(new String[annotations.size()]);\n  }\n\n  @Override\n  public boolean isAnnotation(String annotation) {\n    return true;\n  }\n\n  @Override\n  public boolean isAnnotation(String annotation, Project project) {\n    return true;\n  }\n\n  @Override\n  public boolean isAnnotation(String annotation, Project project, CodeStyleSettings settings) {\n    return true;\n  }\n\n  @Override\n  public boolean isAnnotation(String annotation, Project project, CodeStyleSettings settings, boolean isInline) {\n    return true;\n  }\n\n  @Override\n  public boolean isAnnotation(String annotation, Project project", "reference_code": "\n    CodeStyleSettings settings = CodeStyleSettingsManager.getSettings(project);\n    annotations.addAll(settings.getCustomSettings(JavaCodeStyleSettings.class).getRepeatAnnotations());\n\n    return ArrayUtil.toStringArray(annotations);\n", "case_type": "block"}
{"generated_code": "appings.put(ACTIVITY_CODE, activities);\n        mappings.put(APIConstants.TIME_CODE, years);\n\n        return getResponseModels(\"KostnMA\", mappings);\n    }\n\n    @Override\n    protected URLEndpoint getEndpoint() {\n        return URLEndpoint.PUBLIC_FINANCES_ANNUAL_ACCOUNTS_STATEMENT_ACCOUNTS_MUNICIPALITY;\n    }\n\n    @Override\n    protected String getActivityCode() {\n        return ACTIVITY_CODE;\n    }\n\n    @Override\n    protected String getActivityName() {\n        return \"Purchase of main activities\";\n    }\n\n    @Override\n       /**\n     * <p>Fetch all purchase of main activities data which match the input constraints.</p>\n     *\n     * <p>The input constraints are:</p>\n     * <ul>\n     * <li>regions</li>\n     * <li>activities</li>\n     * <li>years</li>", "reference_code": "    /**\n     * <p>Fetch all purchase of main activities data which match the input\n     * constraints.</p>\n", "case_type": "block"}
{"generated_code": "            adapter = new DualLineStringRecyclerAdapter(placeholder, decimal);\n            recyclerView.setAdapter(adapter);\n\n        }\n        sp = getActivity().getSharedPreferences(PrefHelper.PREF_NAME, 0);\n        if (sp.getBoolean(MILEAGE_DEC, false)) {\n            decimal = true;\n        } else {\n            decimal = false;\n            sp.edit().putBoolean(MILEAGE_DEC, decimal).apply();\n            adapter.decimal = decimal;\n            adapter.notifyDataSetChanged();\n            adapter.notifyItemRangeChanged(0, adapter.getItemCount());\n            adapter.notifyItemRangeChanged(1, adapter.getItemCount());\n            adapter.notifyItemRangeChanged(2, adapter.getItemCount());\n            adapter.notifyItemRangeChanged(3, adapter.getItemCount());\n            adapter.notifyItemRangeChanged(4, adapter.getItemCount());\n            adapter.notifyItemRangeChanged(5, adapter.getItemCount());\n            adapter.notifyItemRangeChanged(6, adapter.getItemCount());\n            adapter.notifyItemRange", "reference_code": "            adapter = new DualLineStringRecyclerAdapter(placeholder, false);\n            recyclerView.setAdapter(adapter);\n\n            sp = PrefHelper.getDefaultSharedPreferences(getActivity().getApplicationContext());\n            decimal = sp.getBoolean(MILEAGE_DEC, true);\n", "case_type": "block"}
{"generated_code": "    {\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian connection\n\n        // TODO: check if the parameter is a Mondrian", "reference_code": "    {\n", "case_type": "block"}
{"generated_code": "    public String getDisplayName() {\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noinspection ConstantConditions\n        //noins", "reference_code": "    public String getDisplayName() {\n", "case_type": "block"}
{"generated_code": "                if (parts.length == 2) {\n                    predicate = Predicates.parse(parts[0].trim(), classLoader);\n                    handler = HandlerWrapper.parse(parts[1].trim(), classLoader);\n                } else if (parts.length == 1) {\n                    predicate = Predicates.parse(parts[0].trim(), classLoader);\n                    handler = HandlerWrapper.parse(parts[0].trim(), classLoader);\n                } else if (parts.length == 0) {\n                    throw UndertowMessages.MESSAGES.invalidSyntax(line);\n                } else if (parts.length > 2) {\n                    throw UndertowMessages.MESSAGES.invalidSyntax(line);\n                } else if (parts[0].trim().length() > 0) {\n                    throw UndertowMessages.MESSAGES.invalidSyntax(line);\n                } else if (parts[1].trim().length() > 0) {\n                    throw UndertowMessages.MESSAGES.invalidSyntax(line);\n                } else if (parts[0].trim().length() > 0) {\n                    throw Undert", "reference_code": "                if (parts.length == 2) {\n                    predicate = PredicateParser.parse(parts[0], classLoader);\n                    handler = HandlerParser.parse(parts[1], classLoader);\n                } else if (parts.length == 1) {\n                    predicate = Predicates.truePredicate();\n                    handler = HandlerParser.parse(parts[0], classLoader);\n", "case_type": "block"}
{"generated_code": "        super.onCreate(savedInstanceState);\n        getFragmentManager().beginTransaction()\n                .replace(R.id.comment_detail_container, new CommentDetailFragment())\n                .commit();\n\n        // Set the title of the activity\n        // TODO: Make this more generic\n        // TODO: Make this more descriptive\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n        // TODO: Make this more specific\n       ", "reference_code": "\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.comment_activity_detail);\n\n", "case_type": "block"}
{"generated_code": "    {\n    }\n\n    public JPAEclipseLinkSessionCustomizer(String jndiName)\n    {\n    }\n\n    ///////////////////////////////////////////////////////////////////////\n    // SessionCustomizer methods\n    ///////////////////////////////////////////////////////////////////////\n\n    ///////////////////////////////////////////////////////////////////////\n    // Private methods\n    ///////////////////////////////////////////////////////////////////////\n\n    ///////////////////////////////////////////////////////////////////////\n    // Public methods\n    ///////////////////////////////////////////////////////////////////////\n\n    ///////////////////////////////////////////////////////////////////////\n    // Inner classes\n    ///////////////////////////////////////////////////////////////////////\n\n    ///////////////////////////////////////////////////////////////////////\n    // Constants\n    ///////////////////////////////////////////////////////////////////////\n\n    ///////////////////////////////////////////////////////////////////////\n    // Fields\n    ///////////////////////////////////////////////////////////////////////\n\n    ///////////////////////////////////////////////////////////////////////\n    // Getters and setters\n    ///////////////////////////////////////////////////////////////////////\n\n    ///////////////////////////////////////////////////////////////////////\n    // Constructors\n    ///////////////////////////////////////////////////////////////////////\n\n    ///////////////////////////////////////////////////////////////////////\n    // Methods\n    ///////////////////////////////////////////////////////////////////////\n\n    ///////////////////////////////////////////////////////////////////////\n    // Inner classes\n    ///////////////////////////////////////////////////////////////////////\n\n    ///////////////////////////////////////////////////////////////////////\n    // Test methods\n    ///////////////////////////////////////////////////////////////////////", "reference_code": "    {\n    }\n\n", "case_type": "block"}
{"generated_code": "\npublic class ImmutableSpongeGriefingData\n        extends AbstractImmutableBooleanData\n        implements GriefingData\n\n        , SpongeGriefingData\n\n        , ImmutableGriefingData\n\n        , ImmutableValue<Boolean>\n\n        , ImmutableValue<Boolean>.Getter\n\n        , ImmutableValue<Boolean>.Setter\n\n        , ImmutableValue<Boolean>.Remover\n\n        , ImmutableValue<Boolean>.Checker\n\n        , ImmutableValue<Boolean>.Factory\n\n        , ImmutableValue<Boolean>.Factory.Mutable\n\n        , ImmutableValue<Boolean>.Factory.Immutable\n\n        , ImmutableValue<Boolean>.Factory.Mutable.Mutable\n\n        , ImmutableValue<Boolean>.Factory.Immutable.Immutable\n\n        , ImmutableValue<Boolean>.Factory.Mutable.Immutable\n\n        , ImmutableValue<Boolean>.Factory.Mutable.Mutable.Immutable\n\n        , ImmutableValue<Boolean>.Factory.Immutable.Mutable\n\n        , ImmutableValue<Boolean>.", "reference_code": "\npublic class ImmutableSpongeGriefingData extends AbstractImmutableBooleanData<ImmutableGriefingData, GriefingData>\n", "case_type": "block"}
{"generated_code": "    }\n\n    public void setRecursos(List<Recurso> recursos) {\n        this.recursos = recursos;\n    }\n\n    public List<Topico> getTopicos() {\n        return topicos;\n    }\n\n    public void setTopicos(List<Topico> topicos) {\n        this.topicos = topicos;\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((id == null) ? 0 : id.hashCode());\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        Modulo other = (Modulo) obj;\n        if (id == null) {\n            if (other.id        return false;\n        if (getClass() != obj.getClass", "reference_code": "                return false;\n        } else if (!id.equals(other.id))\n            return false;\n", "case_type": "block"}
{"generated_code": "public class CustomPageCallback extends PageCallback\n{\n  private static final String s_path = \"pages\";\n\n  /**\n   * @param prefix\n   * @param lab\n   * @param assistant\n   */\n  @SuppressWarnings(\"unchecked\")\n  public CustomPageCallback(String prefix, Laboratory lab, LabAssistant assistant, String filename)\n  {\n    super(prefix, lab, assistant);\n    m_filename = filename;\n  }\n\n  /**\n   * @param prefix\n   * @param lab\n   * @param assistant\n   */\n  @SuppressWarnings(\"unchecked\")\n  public CustomPageCallback(String prefix, Laboratory lab, LabAssistant assistant, String filename, String title)\n  {\n    super(prefix, lab, assistant);\n    m_filename = filename;\n    m_title = title;\n  }\n\n  /**\n   * @param prefix\n   * @param lab\n   * @param assistant\n   */\n  @SuppressWarnings(\"unchecked\")\n  public CustomPageCallback(String prefix, Laboratory lab, LabAssistant assistant,", "reference_code": "public class CustomPageCallback extends TemplatePageCallback\n{\n", "case_type": "block"}
{"generated_code": "    public final StringBuilder delegate = new StringBuilder();\n\n    // The offsets are relative to the start of the string.\n    // This is used to track the offsets of the tokens.\n    // This is not the same as the offsets of the characters.\n    // The offsets of the characters are relative to the start of the string.\n    // This is used to track the offsets of the tokens.\n    // This is not the same as the offsets of the characters.\n    // The offsets of the characters are relative to the start of the string.\n    // This is used to track the offsets of the tokens.\n    // This is not the same as the offsets of the characters.\n    // The offsets of the characters are relative to the start of the string.\n    // This is used to track the offsets of the tokens.\n    // This is not the same as the offsets of the characters.\n    // The offsets of the characters are relative to the start of the string.\n    // This is used to track the offsets of the tokens.\n    // This is not the same as the offsets of the characters.\n   ", "reference_code": "    public final StringBuffer delegate = new StringBuffer();\n", "case_type": "block"}
{"generated_code": "    /**\n     * Method get.\n     * @param index - type int.\n     * @return - type E.\n     */\n    public E get(int index) {\n        Node<E> result = this.first;\n        for (int i = 0; i < index; i++) {\n            result = result.next;\n        }\n        return result.date;\n    }\n\n    /**\n     * Method get.\n     * @param index - type int.\n     * @return - type E.\n     */\n    public E getByIndex(int index) {\n        if (index >= this.size) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n\n        if (index < 0) {\n            throw new ArrayIndexOutOfBoundsException();\n        }\n\n        Node<E> result = this.first;\n        for (int i = 0; i < index; i++) {\n            result = result.next;\n        }\n        return result.date;\n    }\n\n    public E getByIndex(int index, int size) {\n        if (index >=", "reference_code": "    /**\n     * Метод получения элемента по индексу.\n     * @param index - number type int.\n     * @return - type E.\n     */\n    public E get(int index) {\n", "case_type": "block"}
{"generated_code": "import java.util.Collections;\n\nimport com.asakusafw.testdriver.model.DataModelDefinition;\nimport com.asakusafw.testdriver.model.DataModelReflection;\nimport com.asakusafw.testdriver.model.PropertyName;\nimport com.asakusafw.testdriver.model.PropertyType;\nimport com.asakusafw.testdriver.model.SimpleDataModelDefinition.Builder;\nimport com.asakusafw.testdriver.model.SimpleDataModelDefinition.PropertyType;\nimport com.asakusafw.testdriver.model.SimpleDataModelDefinition.ValueType;\nimport com.asakusafw.testdriver.model.SimpleDataModelDefinition.ValueType.Builder;\nimport com.asakusafw.testdriver.model.SimpleDataModelDefinition.ValueType.PropertyType;\nimport com.asakusafw.testdriver.model.SimpleDataModelDefinition.ValueType.PropertyType.Builder;\nimport com.asakusafw.testdriver.model.SimpleDataModelDefinition.ValueType.PropertyType.", "reference_code": "import java.util.Collections;\n", "case_type": "block"}
{"generated_code": "        {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        try\n        {\n            Object o = SimplTypesScope.deserialize(System.in, StringFormat.XML);\n            System.out.println(o);\n        }\n        catch (SIMPLTranslationException e)\n        {\n\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        try\n        {\n            SimplTypesScope.serialize(i, System.out, StringFormat.JSON);\n        }\n        catch (SIMPLTranslationException e)\n        {\n\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        try\n        {\n            Object o = SimplTypesScope.deserialize(System.in, StringFormat.JSON);\n            System.out.println(o);\n        }\n        catch (SIMPLTranslationException e)\n        {\n\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n        }\n\n        try\n        {\n           ", "reference_code": "        {\n", "case_type": "block"}
{"generated_code": " + ex.getMessage() + \")\");\n                }\n            }\n        }\n        out.close();\n    }\n\n}\n\n    @RequestMapping(\"/{assetsVersion}/{type}\")\n    public void serve(@PathVariable String assetsVersion, @PathVariable String type,\n            HttpServletRequest request, HttpServletResponse response) throws IOException {\n        merge(resources, assetsVersion, type, request, response);\n    }\n\n}\n\n    @RequestMapping(\"/{assetsVersion}\")\n    public void serve(@PathVariable String assetsVersion, HttpServletRequest request,\n            HttpServletResponse response) throws IOException {\n        merge(resources, assetsVersion, type, request, response);\n    }\n\n    private void merge(List<String> resources, String assetsVersion, String type,\n            HttpServletRequest request, HttpServletResponse response) throws IOException {\n                if (resource.startsWith(\"/static\")) {\n                    InputStream in = ResourceController.class.getResourceAsStream(\n                            resource.replace(\"/static/\" + assetsVersion, \"\"));\n                    if (in != null) {\n                        IOUtils.copy(in, out);\n                   ", "reference_code": "                    IOUtils.closeQuietly(is);\n                } else {\n                    InputStream in = request.getServletContext().getResourceAsStream(\n", "case_type": "block"}
{"generated_code": "HexString(dev.getDeviceType()), dev.getHost(), dev.getMac());\n            ThingUID thingUID = ThingUID.from(BROADLINKTHERMOSTAT_THING_TYPE, dev.getMac());\n            Optional<Thing> thing = getThing(thingUID);\n            if (thing.isPresent()) {\n                logger.debug(\"Thing {} already exists, skipping.\", thing.get().getUID());\n                continue;\n            }\n            Map<String, Object> thingProperties = new HashMap<>();\n            thingProperties.put(BROADLINKTHERMOSTAT_MAC_PROPERTY, dev.getMac());\n            thingProperties.put(BROADLINKTHERMOSTAT_HOST_PROPERTY, dev.getHost());\n            thingProperties.put(BROADLINKTHERMOSTAT_DEVICE_TYPE_PROPERTY, dev.getDeviceType());\n            thingProperties.put(BROADLINKTHERMOSTAT_DEVICE_DESCRIPTION_PROPERTY, dev.getDeviceDescription());\n            thingProperties.put(BROADLINKTHER", "reference_code": "        backgroundDiscoveryFuture = scheduler.scheduleWithFixedDelay(this::createScanner, 0, 60, TimeUnit.SECONDS);\n    }\n\n    @Override\n    protected void stopBackgroundDiscovery() {\n", "case_type": "block"}
{"generated_code": "   }\n\n   public String getName() {\n      return name_;\n   }\n\n   public DataProcessor getProcessor() {\n      return (DataProcessor) processorClass_.newInstance();\n   }\n\n   public String toString() {\n      return \"ProcessorEvent: \" + name_;\n   }\n\n   public String getDescription() {\n      return \"Processor: \" + name_;\n   }\n\n   public String getShortDescription() {\n      return \"Processor: \" + name_;\n   }\n\n   public String getLongDescription() {\n      return \"Processor: \" + name_;\n   }\n\n   public String getIcon() {\n      return \"icons/processor.png\";\n   }\n\n   public String getToolTip() {\n      return \"Processor: \" + name_;\n   }\n\n   public String getToolTipText() {\n      return \"Processor: \" + name_;\n   }\n\n   public String getToolTipIcon() {\n      return \"icons/processor.png\";\n   }\n\n   public String getToolTipText2() {\n      return \"Processor: \" + name_;\n   }\n\n", "reference_code": "   }\n\n   public String getName() {\n      return name_;\n", "case_type": "block"}
{"generated_code": "        for (final Talk talk : StaticData.getTalks()) {\n            // TODO: Use a proper equals method\n            // TODO: Use a proper hashCode method\n            // TODO: Use a proper equals method\n            // TODO: Use a proper hashCode method\n            // TODO: Use a proper equals method\n            // TODO: Use a proper hashCode method\n            // TODO: Use a proper equals method\n            // TODO: Use a proper hashCode method\n            // TODO: Use a proper equals method\n            // TODO: Use a proper hashCode method\n            // TODO: Use a proper equals method\n            // TODO: Use a proper hashCode method\n            // TODO: Use a proper equals method\n            // TODO: Use a proper hashCode method\n            // TODO: Use a proper equals method\n            // TODO: Use a proper hashCode method\n            // TODO: Use a proper equals method\n            // TODO: Use a proper hashCode method\n            // TODO: Use a proper equals method\n            // TODO: Use a proper hashCode method\n            // TODO: Use a proper equals method\n            // TODO: Use a proper hashCode method\n            // TODO: Use a proper", "reference_code": "        for (Talk talk : StaticData.talks) {\n", "case_type": "block"}
{"generated_code": "import org.auraframework.json.Json;\nimport org.auraframework.impl.root.BaseComponentDefImpl;\nimport org.auraframework.impl.root.BaseComponentDefImpl.Builder;\nimport org.auraframework.impl.system.BaseDefImpl;\nimport org.auraframework.impl.system.BaseDefImpl.Builder;\nimport org.auraframework.impl.system.DefDescriptorImpl;\nimport org.auraframework.impl.system.DefDescriptorImpl.Builder;\nimport org.auraframework.impl.system.BaseDefImpl.Builder;\nimport org.auraframework.impl.system.BaseDefImpl;\nimport org.auraframework.impl.system.BaseDefImpl.Builder;\nimport org.auraframework.impl.system.DefDescriptorImpl.Builder;\nimport org.auraframework.impl.system.BaseDefImpl;\nimport org.auraframework.impl.system.BaseDefImpl.Builder;\nimport org.auraframework.impl.system.DefDescriptorImpl;\nimport org.auraframework.impl.system.DefDescriptorImpl.Builder;\nimport org", "reference_code": "import org.auraframework.util.json.Json;\n", "case_type": "block"}
{"generated_code": "        }\n    }\n\n    @Override\n    public void lock() {\n        sync.acquireShared(1);\n    }\n\n    @Override\n    public void lock(long time, TimeUnit unit) throws InterruptedException {\n        sync.acquireSharedNanos(1,unit.toNanos(time));\n    }\n\n    @Override\n    public void unlock() {\n        sync.releaseShared(1);\n    }\n\n    @Override\n    public void lock() {\n        sync.acquireShared(1);\n    }\n\n    @Override\n    public void lock() {\n        sync.acquireShared(1);\n    }\n\n    @Override\n    public void lock() {\n        sync.acquireShared(1);\n    }\n\n    @Override\n    public void lock() {\n        sync.acquireShared(1);\n    }\n\n    @Override\n    public void lock() {\n        sync.acquireShared(1);\n    }\n\n    @Override\n    public void lock() {\n        sync.acquireShared(1);\n    }\n\n    @", "reference_code": "        }\n    }\n\n    @Override\n    public void lock() {\n", "case_type": "block"}
{"generated_code": "import stream.flarebot.flarebot.FlareBot;\n\n@SuppressWarnings(\"unused\")\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n", "reference_code": "import stream.flarebot.flarebot.FlareBot;\n\n", "case_type": "block"}
{"generated_code": "jectionGap == 0 ? -1 : (int) ( totalInjectionGap / 10L );\n       public final Map<Race, IntHolder> raceDistribution = new EnumMap<Race, IntHolder>( Race.class );\n\n    /** Game type distribution map (counts of different game types). */\n    public final Map<GameType, IntHolder> gameTypeDistribution = new EnumMap<GameType, IntHolder>( GameType.class );\n\n    /** Format distribution map (counts of different formats).         */\n    public final Map<Format, IntHolder> formatDistribution = new EnumMap<Format, IntHolder>( Format.class );\n\n    /**\n     * Returns the average number of injections per game.\n     * @return the average number of injections per game; or -1 if average number of injections per game is not available\n     */\n    public int getAvgInjectionsPerGame() {\n        return totalInjectionGapCount == 0 ? -1 : (int) ( totalInjectionGap / totalInjectionGapCount );\n    }\n\n    private static class", "reference_code": "    public final Map< Race    , IntHolder > raceDistributionMap     = new EnumMap< Race    , IntHolder >( Race    .class );\n    /** Game type distribution map (counts of different game types). */\n    public final Map< GameType, IntHolder > gameTypeDistributionMap = new EnumMap< GameType, IntHolder >( GameType.class );\n    /** Format distribution map (counts of different formats).       */\n    public final Map< Format  , IntHolder > formatDistributionMap   = new EnumMap< Format  , IntHolder >( Format  .class );\n", "case_type": "block"}
{"generated_code": " result.addTestSuite(TestWorkbookRecord.class);\n        result.addTestSuite(TestWorkbookRecordSizeCalculator.class);\n        result.addTestSuite(TestWorkbookRecordInputStream.class);\n        result.addTestSuite(TestWorkbookRecordOutputStream.class);\n        result.addTestSuite(TestWorkbookRecordOutputStream.class);\n        result.addTestSuite(TestWorkbookRecordOutputStream.class);\n        result.addTestSuite(TestWorkbookRecordOutputStream.class);\n        result.addTestSuite(TestWorkbookRecordOutputStream.class);\n        result.addTestSuite(        result.addTestSuite(TestBOFRecord.class);\n        result.addTestSuite(TestBoolErrRecord.class);\n        result.addTestSuite(TestCellRange.class);\n        result.addTestSuite(TestCellSubRecord.class);\n        result.addTestSuite(TestCommentRecord.class);\n        result.addTestSuite(TestCommentStructureSubRecord.class);\n        result.addTestSuite(TestCommentSubRecord.class);\n", "reference_code": "        result.addTestSuite(TestBoundSheetRecord.class);\n        result.addTestSuite(TestCellRange.class);\n        result.addTestSuite(TestCFHeaderRecord.class);\n", "case_type": "block"}
{"generated_code": "        public static final RendererGlobal rendererGlobal = new RendererGlobal();\n        public static final RendererBusCable rendererBusCable = new RendererBusCable();\n\n        // TODO: RendererScriptStorage\n        // public static final RendererScriptStorage rendererScriptStorage = new RendererScriptStorage();\n\n        // TODO: RendererScriptCard\n        // public static final RendererScriptCard rendererScriptCard = new RendererScriptCard();\n\n        // TODO: RendererScriptCard\n        // public static final RendererScriptCard rendererScriptCard = new RendererScriptCard();\n\n        // TODO: RendererScriptCard\n        // public static final RendererScriptCard rendererScriptCard = new RendererScriptCard();\n\n        // TODO: RendererScriptCard\n        // public static final RendererScriptCard rendererScriptCard = new RendererScriptCard();\n\n        // TODO: RendererScriptCard\n        // public static final RendererScriptCard rendererScriptCard = new RendererScriptCard();\n\n        // TODO: Renderer", "reference_code": "        public static final RendererGlobal rendererGlobal = new RendererGlobal();\n        public static final RendererBusCable rendererBusCable = new RendererBusCable();\n", "case_type": "block"}
{"generated_code": "_frame_alloc();\n        if (out        c.profile(avutil.AV_PROFILE_ANY);\n        c.level(1);\n\n        if (codec.id() == avcodec.AV_CODEC_ID_MPEG4) {\n            c.mb_decision(1);\n        } else {\n            c.mb_decision(2);\n        }\n\n        if (codec.id() == avcodec.AV_CODEC_ID_H264) {\n            avutil.av_opt_set(c.priv_data(), \"preset\", \"slow\", 0);\n        }\n\n        if ((oc.oformat().flags() & avformat.AVFMT_GLOBALHEADER) != 0) {\n            oc.oformat().flags(oc.oformat().flags() | avformat.AVFMT_GLOBALHEADER);\n        }\n\n        AVDictionary topt = new AVDictionary();\n\n        av_dict_copy(topt, opt, 0);\n\n        /* open the codec */\n        int ret = av", "reference_code": "\n        if (c.codec_id() == avcodec.AV_CODEC_ID_MPEG2VIDEO) {\n            c.max_b_frames(2);\n        }\n        if (c.codec_id() == avcodec.AV_CODEC_ID_MPEG1VIDEO) {\n", "case_type": "block"}
{"generated_code": "\n      final String name = function.getName();\n      if (name == null) return;\n\n      final TypeEvalContext myTypeEvalContext = getTypeEvalContext(function);\n      if (myTypeEvalContext == null) return;\n\n      myTypeEvalContext.setFunction(function);\n      myTypeEvalContext.setClass(cls);\n      myTypeEvalContext.setFunctionName(name);\n\n      myTypeEvalContext.setFunctionType(function.getReturnType());\n      myTypeEvalContext.setFunctionType(function.getType());\n      myTypeEvalContext.setFunctionType(function.getType());\n      myTypeEvalContext.setFunctionType(function.getType());\n      myTypeEvalContext.setFunctionType(function.getType());\n      myTypeEvalContext.setFunctionType(function.getType());\n      myTypeEvalContext.setFunctionType(function.getType());\n      myTypeEvalContext.setFunctionType(function.getType());\n      myTypeEvalContext.setFunctionType(function.getType());\n      myType", "reference_code": "      final String name = function.getName();\n", "case_type": "block"}
{"generated_code": "        return metadata;\n    }\n\n    @Override\n    public String getMessage() {\n        return \"Unsatisfied request: \" + metadata;\n    }\n\n    @Override\n    public String getLocalizedMessage() {\n        return getMessage();\n    }\n\n    @Override\n    public String toString() {\n        return getMessage();\n    }\n\n    @Override\n    public Throwable fillInStackTrace() {\n        return this;\n    }\n\n    @Override\n    public String getStackTraceString() {\n        return getMessage();\n    }\n\n    @Override\n    public String getLocalizedStackTraceString() {\n        return getStackTraceString();\n    }\n\n    @Override\n    public String getCauseMessage() {\n        return getMessage();\n    }\n\n    @Override\n    public String getCauseStackTraceString() {\n        return getStackTraceString();\n    }\n\n    @Override\n    public String getCauseLocalizedStackTraceString() {\n        return getLocalizedStackTraceString();\n    }\n\n    @Override\n    public String getCauseLocal", "reference_code": "        return this.metadata;\n", "case_type": "block"}
{"generated_code": "            getFeatures().remove(loggingFeature);\n        }\n\n        loggingFeature = null;\n\n        // add the logging feature\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be configurable\n        // TODO: this should be", "reference_code": "            getFeatures().remove(loggingFeature);\n            loggingFeature = null;\n        }\n", "case_type": "block"}
{"generated_code": "                .contains(TEXT_ZH));\n\n    }\n\n    @Test\n    @Ignore\n    @Disabled\n    @TODO(\"Needs to be fixed in the future\")\n    @SlowTest\n    @Ignore(\"Needs to be fixed in the future\")\n    @Disabled(\"Needs to be fixed in the future\")\n    @TODO(\"Needs to be fixed in the future\")\n    @SlowTest(\"Needs to be fixed in the future\")\n    @Ignore(\"Needs to be fixed in the future\")\n    @Disabled(\"Needs to be fixed in the future\")\n    @TODO(\"Needs to be fixed in the future\")\n    @SlowTest(\"Needs to be fixed in the future\")\n    @Ignore(\"Needs to be fixed in the future\")\n    @Disabled(\"Needs to be fixed in the future\")\n    @TODO(\"Needs to be fixed in the future\")\n    @SlowTest(\"Needs to be fixed in the future\")\n    @Ignore(\"Needs to be fixed in the future\")\n    @Disabled(\"Needs to be fixed in the future", "reference_code": "                .contains(TEXT_ZH));\n\n    }\n\n    @Test\n", "case_type": "block"}
{"generated_code": "\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @Inject\n\n    @In", "reference_code": "\n    @Inject\n", "case_type": "block"}
{"generated_code": "     */\n    public int compare(Object objRow1, Object objRow2)\n    {\n        Object objValue1 = m_objColumn.getColumnValue(objRow1);\n\n        if (objValue1 == null)\n        {\n            objValue1 = \"\";\n        }\n\n        if (objRow2 == null)\n        {\n            objRow2 = \"\";\n        }\n\n        objValue2 = m_objColumn.getColumnValue(objRow2);\n\n        if (objValue2 == null)\n        {\n            objValue2 = \"\";\n        }\n\n        // Compare the values\n        // objValue1.compareTo(objValue2);\n\n        // Get the values\n        Object objValue1 = m_objColumn.getColumnValue(objRow1);\n\n        if (objValue1 == null)\n        {\n            objValue1 = \"\";\n        }\n\n        // Get the values\n        objValue2 = m_objColumn.getColumnValue(objRow2);\n\n        if (objValue2 == null)\n        {\n            objValue2 = \"\";\n        }\n", "reference_code": "     */\n    public int compare(Object objRow1, Object objRow2)\n    {\n        Object objValue1 = m_objColumn.getColumnValue(objRow1);\n", "case_type": "block"}
{"generated_code": "    public TabPagerAdapter(List<BaseFragment> fragments) {\n        super(fragments.size());\n\n        // TODO Auto-generated constructor stub\n\n        super(fragments);\n\n        this.fragments = fragments;\n    }\n\n    public TabPagerAdapter(FragmentManager fm,List<BaseFragment> fragments, int behavior) {\n        super(fm, behavior);\n\n        // TODO Auto-generated constructor stub\n\n        super(fm, behavior);\n\n        this.fragments = fragments;\n    }\n\n    public TabPagerAdapter(FragmentManager fm,List<BaseFragment> fragments, boolean useCount) {\n        super(fm, useCount);\n\n        // TODO Auto-generated constructor stub\n\n        super(fm, useCount);\n\n        this.fragments = fragments;\n    }\n\n    public TabPagerAdapter(FragmentManager fm,List<BaseFragment> fragments, int theme) {\n        super(fm, theme);\n\n        // TODO Auto-generated constructor stub\n\n        super(fm, theme);\n\n        this.fragments = fragments;\n    }\n\n   ", "reference_code": "    public void SetDate(List<BaseFragment> fragments) {\n", "case_type": "block"}
{"generated_code": "    createMapping(server, kernel);\n    mappingsForAllKernels(server, kernel);\n  }\n\n  @Override\n  public void createMapping(Javalin app, KernelFunctionality kernel) {\n    createMapping(app, kernel);\n    mappingsForAllKernels(app, kernel);\n  }\n\n  @Override\n  public void createMapping(Javalin app, KernelFunctionality kernel, String path) {\n    app.post(path, handleBackground(new ContextJavalin(app)));\n  }\n\n  @Override\n  public void createMapping(Javalin app, KernelFunctionality kernel, String path, RESTAction restAction) {\n    app.post(path, handleBackground(restAction));\n  }\n\n  @Override\n  public void createMapping(Javalin app, KernelFunctionality kernel, String path, RESTAction restAction, String method) {\n    app.method(method, path, handleBackground(restAction));\n  }\n\n  @Override\n  public void createMapping(Javalin app, KernelFunctionality kernel, String path, RESTAction restAction, String method", "reference_code": "    mappingsForAllKernels(server, kernel);\n    createMapping(server, kernel);\n  }\n\n", "case_type": "block"}
{"generated_code": " defaultName;\n    }\n\n       protected String translateFromAlternate(String s) {\n        if (s == null)\n            return null;\n\n        s = s.replace('$', ChatColor.COLOR_CHAR);\n\n        if (s.contains(\"&\"))\n            s = s.replace(\"&\", ChatColor.COLOR_CHAR + \"&\");\n\n        s = s.replace(\"§\", ChatColor.COLOR_CHAR);\n\n        s = s.replace(\"§§\", ChatColor.COLOR_CHAR + \"§§\");\n\n        s = s.replace(\"§§§\", ChatColor.COLOR_CHAR + \"§§§\");\n\n        s = s.replace(\"§§§§\", ChatColor.COLOR_CHAR + \"§§§§\");\n\n        s = s.replace(\"§§§§§\", ChatColor.COLOR_CHAR + \"§§§§§\");\n\n        s = s.replace(\"§§§§§§\",", "reference_code": "\n    protected String translateFromAlternate(String s) {\n", "case_type": "block"}
{"generated_code": "    public void actionPerformed(ActionEvent e) {\n        // TODO Auto-generated method stub\n\n        // check if the user has already clicked on a url.\n        // if not, add a new tab.\n\n        // get the parent pane.\n\n        // check if the user has already clicked on a url.\n        // if not, add a new tab.\n\n        // get the parent pane.\n\n        // check if the user has already clicked on a url.\n        // if not, add a new tab.\n\n        // get the parent pane.\n\n        // check if the user has already clicked on a url.\n        // if not, add a new tab.\n\n        // get the parent pane.\n\n        // check if the user has already clicked on a url.\n        // if not, add a new tab.\n\n        // get the parent pane.\n\n        // check if the user has already clicked on a url.\n        // if not, add a new tab.\n\n        // get the parent pane.\n\n        // check if the user has already clicked on a url.\n        // if", "reference_code": "    public void actionPerformed(ActionEvent evt) {\n", "case_type": "block"}
{"generated_code": "\n    /**\n     * 销毁.\n     */\n    void destroy();\n\n    /**\n     * 销毁.\n     */\n    void destroy();\n\n    /**\n     * 销毁.\n     */\n    void destroy();\n\n    /**\n     * 销毁.\n     */\n    void destroy();\n\n    /**\n     * 销毁.\n     */\n    void destroy();\n\n    /**\n     * 销毁.\n     */\n    void destroy();\n\n    /**\n     * 销毁.\n     */\n    void destroy();\n\n    /**\n     * 销毁.\n     */\n    void destroy();\n\n    /**\n     * 销毁.\n     */\n    void destroy();\n\n    /**\n     * 销毁.\n     */\n    void destroy();\n\n    /**\n     * 销毁.\n     */\n    void destroy();\n\n    /**\n     * 销毁.\n     */\n    void destroy();\n\n    /**\n     * 销毁.\n     */\n    void destroy();\n\n    /**\n     * 销毁", "reference_code": "\n    /**\n     * 销毁队列.\n     * 注: 队列在最后不用的时候, 应该主动销毁它.\n     */\n", "case_type": "block"}
{"generated_code": ".getValue(), rememberMe.getValue())));\n                    } catch (MyCollabException e) {\n                        custom.addComponent(new Label(e.getMessage()), \"customErrorMsg\");\n                    }\n                }\n            });\n            custom.addComponent(loginBtn, \"loginBtn\");\n            setComponents(custom);\n        }\n    }\n\n    @Override\n    public void setError(UserError error) {\n        EventBusFactory.getDefault().post(new ShellEvent(error));\n    }\n\n    @Override\n    public void setServerInstance(ServerInstance serverInstance) {\n        AppContext.setServerInstance(serverInstance);\n           }\n            });\n\n            custom.addComponent(new Label(UIConstants.LOGIN_ERROR_MSG), \"customErrorMsg\");\n\n            passwordField.addShortcutListener(new ShortcutListener(\"Signin\", ShortcutAction.KeyCode.ENTER, null) {\n                private static final long serialVersionUID = 5094514575531426118L;\n\n                @Override\n                public void handleAction(", "reference_code": "                        } catch (Exception e) {\n                            throw new MyCollabException(e);\n                        }\n                    }\n", "case_type": "block"}
{"generated_code": "import java.io.IOException;\nimport java.io.InputStream;\nimport java.io.InputStreamReader;\nimport java.io.OutputStream;\nimport java.io.OutputStreamWriter;\nimport java.io.PrintWriter;\nimport java.io.Reader;\nimport java.io.StringWriter;\nimport java.io.Writer;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.io.Reader;\nimport java.io.StringWriter;\nimport java.io.Writer;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter;\nimport java.io.Reader;\nimport java.io.StringWriter;\nimport java.io.Writer;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.OutputStream;\nimport java.io.PrintWriter", "reference_code": "import java.io.IOException;\n", "case_type": "block"}
{"generated_code": "    public ParserException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n        super(message, cause, enableSuppression, writableStackTrace);\n    }\n\n    public ParserException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace,\n            boolean asyncSuppression) {\n        super(message, cause, enableSuppression, writableStackTrace, asyncSuppression);\n    }\n\n    public ParserException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace,\n            boolean asyncSuppression, boolean stackTrace) {\n        super(message, cause, enableSuppression, writableStackTrace, asyncSuppression, stackTrace);\n    }\n\n    public ParserException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace,\n            boolean asyncSuppression, boolean stackTrace, String xid) {\n        super(message, cause, enableSuppression, writableStackTrace, asyncSuppression, stackTrace, xid);\n    }\n\n    public ParserException(String message, Th", "reference_code": "    protected ParserException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n        super(message, cause, enableSuppression, writableStackTrace);\n", "case_type": "block"}
{"generated_code": "    }\n\n    public int getId() {\n        return itemId;\n    }\n\n    public UUID getUUID() {\n        return uuid;\n    }\n\n    public Player getOwner() {\n        return owner;\n    }\n\n    public int getSecondsUntilRespawn() {\n        return secondsUntilRespawn;\n    }\n\n    public long getSpawned() {\n        return spawned;\n    }\n\n    public ItemLoc getLoc() {\n        return loc;\n    }\n\n    public void setLoc(ItemLoc loc) {\n        this.loc = loc;\n    }\n\n    public void setLoc(int x, int y) {\n        this.loc = new ItemLoc(itemId, amount, x, y, 0);\n    }\n\n    public void setLoc(int x, int y, int respawnTime) {\n        this.loc = new ItemLoc(itemId, amount, x, y, respawnTime);\n    }\n\n    public void setLoc(int x, int y, int respawnTime, int id) {\n        this", "reference_code": "        return EntityHandler.getItemDef(itemId);\n    }\n\n    public int getId() {\n        return itemId;\n    }\n", "case_type": "block"}
{"generated_code": "import java.util.concurrent.Executors;\n\npublic class AsynchronousDriver implements HttpDriver {\n\n    public static final AsynchronousDriver DEFAULT = new AsynchronousDriver();\n\n    public static final AsynchronousDriver DEFAULT_THREADED = new AsynchronousDriver(Runtime.getRuntime().availableProcessors());\n\n    public static final AsynchronousDriver THREADED = new AsynchronousDriver(1);\n\n    public static final AsynchronousDriver THREADED_2 = new AsynchronousDriver(2);\n\n    public static final AsynchronousDriver THREADED_4 = new AsynchronousDriver(4);\n\n    public static final AsynchronousDriver THREADED_8 = new AsynchronousDriver(8);\n\n    public static final AsynchronousDriver THREADED_16 = new AsynchronousDriver(16);\n\n    public static final AsynchronousDriver THREADED_32 = new AsynchronousDriver(32);\n\n    public static final AsynchronousDriver THREADED_64 = new AsynchronousDriver(64);\n\n    public static final AsynchronousDriver THREADED_128 = new AsynchronousDriver(128);\n\n    public static", "reference_code": "import java.util.concurrent.Executors;\n\npublic class AsynchronousDriver extends DefaultDriver {\n", "case_type": "block"}
{"generated_code": "  @Override\n  protected SqlConnectOptions connectOptions() {\n    return new SqlConnectOptions().setHost(rule.getHost()).setPort(rule.getPort()).setDatabase(rule.getDbName());\n  }\n\n  @Override\n  protected String getDriverName() {\n    return \"pg\";\n  }\n\n  @Override\n  protected String getDriverVersion() {\n    return rule.getVersion();\n  }\n\n  @Override\n  protected String getDriverClassName() {\n    return \"org.postgresql.Driver\";\n  }\n\n  @Override\n  protected String getDriverClassPath() {\n    return rule.getDriverJarPath();\n  }\n\n  @Override\n  protected String getJdbcUrl() {\n    return \"jdbc:pgsql://\" + rule.getHost() + \":\" + rule.getPort() + \"/\" + rule.getDbName();\n  }\n\n  @Override\n  protected String getUsername() {\n    return rule.getUsername();\n  }\n\n  @Override\n  protected String getPassword() {\n    return rule.getPassword", "reference_code": "  @Override\n  protected SqlConnectOptions defaultOptions() {\n    return rule.options();\n", "case_type": "block"}
{"generated_code": "F) {\n      }\n    }\n\n    // Execute\n    switch(this.opcode & 0xF000) {\n      case 0x000      break;\n      case 0xE000:\n      case 0xF000:\n      case 0x      break;\n      case 0x1000:\n      case 0x2000:\n      case 0x3000:\n      case 0x4000:\n      case 0x5000:\n      case 0x6000:\n      case 0x7000:\n      case 0x8000:\n      case 0x9000:\n      case 0xA000:\n      case 0xB000:\n      case 0xC000:\n      case 0xD000:\n      case 0xE000:\n      case 0xF00      break;\n      case 0x1000:\n      case", "reference_code": "\n        break;\n", "case_type": "block"}
{"generated_code": "        ArrayList<ArrayList<Integer>> list = new ArrayList<ArrayList<Integer>>();\n        boolean[] visited = new boolean[array.length];\n        Arrays.fill(visited, false);\n        Arrays.sort(array);\n        System.out.println(Arrays.toString(array));\n        System.out.println(Arrays.toString(visited));\n        System.out.println(Arrays.toString(visited));\n        System.out.println(Arrays.toString(visited));\n        System.out.println(Arrays.toString(visited));\n        System.out.println(Arrays.toString(visited));\n        System.out.println(Arrays.toString(visited));\n        System.out.println(Arrays.toString(visited));\n        System.out.println(Arrays.toString(visited));\n        System.out.println(Arrays.toString(visited));\n        System.out.println(Arrays.toString(visited));\n        System.out.println(Arrays.toString(visited));\n        System.out.println(Arrays.toString(vis", "reference_code": "        ArrayList<ArrayList<Integer>> list = new ArrayList<>();\n        if (array == null || array.length == 0)\n            return list;\n        boolean[] visited = new boolean[array.length];\n        Arrays.fill(visited, false);\n", "case_type": "block"}
{"generated_code": "import java.util.List;\n\nimport com.amazonaws.services.s3.model.AnalyticsFilterPredicate;\n\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Dep", "reference_code": "import java.util.List;\n\n", "case_type": "block"}
{"generated_code": "            return false;\n         }\n         if(!isSmaller(x.right, val)) {\n            return false;\n         }\n         if(!isGreater(x.left, Math.max(x.val, val))) {\n            return false;\n         }\n         if(!isSmaller(x.left, val)) {\n            return false;\n         }\n         if(!isGreater(x.right, val)) {\n            return false;\n         }\n         if(!isGreater(x.left, Math.max(x.val, val))) {\n            return false;\n         }\n         if(!isSmaller(x.left, val)) {\n            return false;\n         }\n         if(!isGreater(x.right, val)) {\n            return false;\n         }\n         if(!isSmaller(x.right, Math.max(x.val, val))) {\n            return false;\n         }\n         if(!isGreater(x.left, Math.max(x.val, val))) {\n            return false;\n         }\n         if(!isSmaller(x.", "reference_code": "            return false;\n         }\n         if(!isSmaller(x.left, x.val)) {\n            return false;\n", "case_type": "block"}
{"generated_code": " setResult(Activity.RESULT_CANCELED);\n            else\n                setResult(Activity.RESULT_OK);\n        }\n        finish();\n    }\n\n    @Override\n    public void onDialogDone(int dialogId, ValidateResult result) {\n               if (fragment == null) {\n            fm.beginTransaction()\n                    .add(R.id.fragment_container, fragment)\n                    .commit();\n        }\n        return fragment;\n    }\n\n    @Override\n    public void onDialogDone(int dialogId, ValidateCode code) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void onDialogDone(int dialogId, TextView textView, String text) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void onDialogDone(int dialogId, TextView textView, int text) {\n        // TODO Auto-generated method        }\n        if (fragment == null) {\n            fm.beginTransaction()\n                    .add(R.id.fragment_container, fragment)\n                    .commit();\n", "reference_code": "            fm.beginTransaction()\n", "case_type": "block"}
{"generated_code": "i.        }\n\n        for (int i = 0; i < stolpci.size(); i++){\n            stolpci.set(i, stolpci.get(i).replace(\"'\", \"\"));\n        }\n\n        for (int i = 0; i < stolpci.size(); i++){\n            stolpci.set(i, stolpci.get(i).replace(\"'\", \"\"));\n        }\n\n        for (int i = 0; i < stolpci.size(); i++){\n            stolpci.set(i, stolpci.get(i).replace(\"'\", \"\"));\n        }\n\n        for (int i = 0; i < stolpci.size(); i++){\n            stolpci.set(i, stolpci.get(i).replace(\"'\", \"\"));\n        }\n\n        for (int i = 0; i < stolpci.size(); i++){\n            stolpci.set(i, stolpci.get(i).replace(\"'\", \"\"));\n        }\n\n        for (int i = 0; i <", "reference_code": "        }\n\n", "case_type": "block"}
{"generated_code": "                startActivity(i);\n                finish();\n            }\n        }, 3000);\n    }\n\n    @Override\n    public boolean onCreateOptionsMenu(Menu menu) {\n        // Inflate the menu; this adds items to the action bar if it is present.\n        getMenuInflater().inflate(R.menu.menu_splash, menu);\n        return true;\n    }\n\n    @Override\n    public boolean onOptionsItemSelected(MenuItem item) {\n        // Handle action bar item clicks here. The action bar will\n        // automatically handle clicks on the Home/Up button, so long\n        // as you specify a parent activity in AndroidManifest.xml.\n        int id = item.getItemId();\n\n        //noinspection SimplifiableIfStatement\n        if (id == R.id.action_settings) {\n            return true;\n        }\n\n        return super.onOptionsItemSelected(item);\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n    }\n\n    @Override\n    protected", "reference_code": "                startActivity(i);\n                finish();\n            }\n        },3000); // conta 4 seg\n    }\n", "case_type": "block"}
{"generated_code": "\npublic class TestProcessor extends AbstractProcessor {\n\n    public TestProcessor() {\n    }\n\n    @Override\n    public String getName() {\n        return \"TestProcessor\";\n    }\n\n    @Override\n    public String getDescription() {\n        return \"TestProcessor\";\n    }\n\n    @Override\n    public String getVersion() {\n        return \"1.0\";\n    }\n\n    @Override\n    public String getAuthor() {\n        return \"Tobias L�tke\";\n    }\n\n    @Override\n    public String getLicense() {\n        return \"Apache License, Version 2.0\";\n    }\n\n    @Override\n    public String getContact() {\n        return \"tobias.luetke@tblsoft.de\";\n    }\n\n    @Override\n    public String getUrl() {\n        return \"https://github.com/tblsoft/solr-pipeline\";\n    }\n\n    @Override\n    public String getEclipseLink() {\n        return \"http://www.eclipse.org/eclipselink/\";\n    }\n\n   ", "reference_code": "\npublic class TestProcessor extends AbstractProcessor {\n\n", "case_type": "block"}
{"generated_code": "  public static InvocationHandler defaultValueHandler() {\n    return (proxy, method, args) -> method.getDefaultValue();\n  }\n\n  /**\n   * @return handler always throws an exception\n   * @see java.lang.reflect.Method#invoke(Object, Object[])\n   * @see java.lang.reflect.InvocationTargetException\n   * @see java.lang.reflect.InvocationTargetException#getTargetException()\n   * @see java.lang.reflect.InvocationTargetException#getCause()\n   * @see java.lang.reflect.InvocationTargetException#getTargetException()\n   * @see java.lang.reflect.InvocationTargetException#getCause()\n   * @see java.lang.reflect.InvocationTargetException#getTargetException()\n   * @see java.lang.reflect.InvocationTargetException#getCause()\n   * @see java.lang.reflect.InvocationTargetException#getTargetException()\n   * @see java.lang.reflect.InvocationTargetException#getCause()\n   * @see java.lang.reflect.InvocationTargetException", "reference_code": "  public static InvocationHandler defaultValueHandler() {\n    return (proxy, method, args) -> method.getDefaultValue();\n  }\n\n  /**\n   * @return handler checked always throws UnsupportedOperationException\n", "case_type": "block"}
{"generated_code": "        // no error on the following line because there are an odd\n        // number of backslashes before the u, meaning it is not a\n        // unicode escape sequence.\n        // \\\\\\u000a xyzzy plugh;\n\n        // no error on the following line because there are an even\n        // number of backslashes before the u, meaning it is not a\n        // unicode escape sequence.\n        // \\\\\\\\\\u000a xyzzy plugh;\n\n        // no error on the following line because there are an odd\n        // number of backslashes before the u, meaning it is not a\n        // unicode escape sequence.\n        // \\\\\\\\\\\\\\u000a xyzzy plugh;\n\n        // no error on the following line because there are an even\n        // number of backslashes before the u, meaning it is not a\n        // unicode escape sequence.\n        // \\\\\\\\\\\\\\\\\\u000a xyzzy plugh;\n\n        // no error on the following line because there are an odd\n        // number of backslashes before", "reference_code": "        // \\u000a class plugh{}\n        plugh xyzzy;\n", "case_type": "block"}
{"generated_code": "\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private static boolean isSpecCompliantAscii(byte[] value) {\n    return Arrays.equals(value, Arrays.copyOfRange(value, 0, value.length - 1));\n  }\n\n  private TransportFrameUtil() {}\n\n  private static String pathToFullQualifiedMethodName(String path) {\n    if (path == null || path.isEmpty()) {\n      return null;\n    }\n    return path;\n  }\n\n  private static String pathToFullQualifiedMethodName(String path) {\n    if (path == null || path.isEmpty()) {\n      logger.warning(\"Path is null or empty\");\n      return null;\n    }\n    if (path.contains(\" \")) {\n      logger.warning(\"Path contains space\");\n      // TODO(louiscryan): This is a hack to avoid the HTTP/2 spec violation.\n      // TODO(louiscryan): Remove this hack when the HTTP/2 spec is fixed.\n      logger.warning(\"Path contains", "reference_code": "   */\n  @Nullable\n  public static String getFullMethodNameFromPath(String path) {\n    if (!path.startsWith(\"/\")) {\n", "case_type": "block"}
{"generated_code": "        public String sendHttpPostRequest(String url, String data) {\n        try {\n            HttpURLConnection http = initHttpConnection(url);\n            http.setRequestMethod(\"POST\");\n            http.setDoOutput(true);\n            http.getOutputStream().write(data.getBytes());\n            int responseCode = http.getResponseCode();\n            BufferedReader is = new BufferedReader(new InputStreamReader(http.getInputStream()));\n            String line;\n            StringBuilder sb = new StringBuilder();\n            while ((line = is.readLine()) != null) {\n                sb.append(line);\n            }\n            return sb.toString();\n        } catch (IOException e) {\n            Log.e(\"HttpEngine3\", \"sendHttpPostRequest: \" + e.getMessage());\n        }\n        return null;\n    }\n\n    private class MyX509TrustManager implements X509TrustManager {\n        public void checkClientTrusted(X509Certificate[] chain, String authType)\n                throws CertificateException {\n            if (chain == null) {\n                throw new Illegal", "reference_code": "\n    private static class MyX509TrustManager implements X509TrustManager {\n        public void checkClientTrusted(X509Certificate[] paramArrayOfX509Certificate, String paramString)\n                throws CertificateException {\n", "case_type": "block"}
{"generated_code": "        .setFilterInfo(dimColumnResolvedFilterInfo, segmentProperties, dimColumnExecuterInfo);\n  }\n\n  public DimColumnExecuterFilterInfo getDimColumnExecuterInfo() {\n    return dimColumnExecuterInfo;\n  }\n\n  public void setDimColumnExecuterInfo(DimColumnExecuterFilterInfo dimColumnExecuterInfo) {\n    this.dimColumnExecuterInfo = dimColumnExecuterInfo;\n  }\n\n  public void setDimColumnResolvedFilterInfo(DimColumnResolvedFilterInfo dimColumnResolvedFilterInfo) {\n    this.dimColumnExecuterInfo.setDimColumnResolvedFilterInfo(dimColumnResolvedFilterInfo);\n  }\n\n  public DimColumnResolvedFilterInfo getDimColumnResolvedFilterInfo() {\n    return dimColumnExecuterInfo.getDimColumnResolvedFilterInfo();\n  }\n\n  public void setSegmentProperties(SegmentProperties segmentProperties) {\n    this.dimColumnExecuterInfo.setSegmentProperties(segmentProperties);\n  }\n\n  public SegmentProperties getSegmentProperties() {\n    return this.dimColumnExecuterInfo.getSegmentProperties();", "reference_code": "        .prepareKeysFromSurrogates(dimColumnResolvedFilterInfo.getFilterValues(), segmentProperties,\n            dimColumnResolvedFilterInfo.getDimension(), dimColumnExecuterInfo);\n  }\n", "case_type": "block"}
{"generated_code": "    public static NamedAnalyzer getNamedAnalyzer(int precisionStep) {\n        NamedAnalyzer namedAnalyzer = builtIn.get(precisionStep);\n        if (namedAnalyzer == null) {\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO: this should be a named analyzer\n            // TODO:", "reference_code": "    public static NamedAnalyzer buildNamedAnalyzer(int precisionStep) {\n        NamedAnalyzer namedAnalyzer = builtIn.get(precisionStep);\n        if (namedAnalyzer == null) {\n", "case_type": "block"}
{"generated_code": "    @Inject\n    public InternalIndicesLifecycle(Settings settings) {\n    }\n\n    @Override\n    public String name() {\n        return \"indices_lifecycle\";\n    }\n\n    @Override\n    public void start() {\n    }\n\n    @Override\n    public void stop() {\n    }\n\n    @Override\n    public void close() {\n    }\n\n    @Override\n    public void onIndexCreated(Index index) {\n        for (Listener listener : listeners) {\n            listener.onIndexCreated(index);\n        }\n    }\n\n    @Override\n    public void onIndexClosed(Index index) {\n        for (Listener listener : listeners) {\n            listener.onIndexClosed(index);\n        }\n    }\n\n    @Override\n    public void onIndexShardCreated(IndexShard indexShard) {\n        for (Listener listener : listeners) {\n            listener.onIndexShardCreated(indexShard);\n        }\n    }\n\n    @Override\n    public void onIndexShardClosed(ShardId shard", "reference_code": "    @Inject\n    public InternalIndicesLifecycle(Settings settings) {\n        super(settings);\n    }\n\n", "case_type": "block"}
{"generated_code": "        for (int i = 0; i < data.length; i++) {\n            length += Math.max(0, data[i]);  // Data values can be invalid when computing statistics on actively running benchmarks\n        }\n\n        // The number of valid data values is the number of non-zero values\n        // in the array.\n        // This is the number of iterations that have been completed.\n        // This is the number of iterations that have been completed.\n        // This is the number of iterations that have been completed.\n        // This is the number of iterations that have been completed.\n        // This is the number of iterations that have been completed.\n        // This is the number of iterations that have been completed.\n        // This is the number of iterations that have been completed.\n        // This is the number of iterations that have been completed.\n        // This is the number of iterations that have been completed.\n        // This is the number of iterations that have been completed.\n        // This is the number of iterations that have been completed.\n        // This is the number of iterations that have been completed.\n        // This is the number of iterations that have been completed", "reference_code": "        for (int i = 0; i < data.length; i++) {\n            if (data[i] < 0) {  // Data values can be invalid when computing statistics on actively running benchmarks\n                continue;\n            }\n            length++;\n        }\n", "case_type": "block"}
{"generated_code": "    public void testSplitterStreaming() throws Exception {\n        getMockEndpoint(\"mock:a\").expectedBodiesReceived(\"A\", \"B\", \"D\", \"E\");\n        getMockEndpoint(\"mock:b\").expectedBodiesReceived(\"A\", \"B\", \"D\", \"E\");\n        getMockEndpoint(\"mock:result\").expectedMessageCount(0);\n\n        // we do not stop on exception and thus the splitted message which failed\n        // would be silently ignored so we can continue routing\n        // you can always use a custom aggregation strategy to deal with errors your-self\n        template.sendBody(\"direct:start\", \"A,B,D,E\");\n\n        assertMockEndpointsSatisfied();\n\n        // we do not stop on exception and thus the splitted message which failed\n        // would be silently ignored so we can continue routing\n        // you can always use a custom aggregation strategy to deal with errors your-self\n        template.sendBody(\"direct:start\", \"A,B,C,D,E\");\n\n        assertMockEndpointsSatisfied();\n\n        // we do not stop on exception", "reference_code": "    public void testSplitterStreamingNoError() throws Exception {\n        getMockEndpoint(\"mock:a\").expectedBodiesReceived(\"A\", \"B\", \"C\", \"D\", \"E\");\n        getMockEndpoint(\"mock:b\").expectedBodiesReceived(\"A\", \"B\", \"C\", \"D\", \"E\");\n        getMockEndpoint(\"mock:result\").expectedBodiesReceived(\"A,B,C,D,E\");\n\n", "case_type": "block"}
{"generated_code": "        int ancillaryDataDef = module.readUnsignedShort (_dstream);\n        if (ancillaryDataLength > 0) {\n            _dstream.skipBytes (ancillaryDataLength);\n        }\n\n        // add the properties\n        info.addProperty (new Property (\"MPEG\",\n                PropertyType.PROPERTY,\n                PropertyArity.LIST));\n\n        // add the properties\n        info.addProperty (new Property (\"SoundInformation\",\n                PropertyType.BITMASK,\n                PropertyArity.LIST));\n        info.addProperty (new Property (\"FrameSize\",\n                PropertyType.INTEGER,\n                PropertyArity.LIST));\n        info.addProperty (new Property (\"AncillaryDataLength\",\n                PropertyType.INTEGER,\n                PropertyArity.LIST));\n        info.addProperty (new Property (\"AncillaryDataDef\",\n                PropertyType.BITMASK,\n                PropertyArity.LIST));\n\n        // add the properties\n        info.addProperty (new Property (\"MPEG\",\n                PropertyType.PROPERTY,\n                Property", "reference_code": "        int ancillaryDataDef = module.readUnsignedShort (_dstream);\n        module.skipBytes (_dstream, 4, module);     // reserved\n\n", "case_type": "block"}
{"generated_code": " is not comparable with %s\", this, other));\n    }\n    return Arrays.compare(data, other.data);\n  }\n\n  @Override\n  public String toString() {\n    return \"Tuple{\" +\n      \"data=\" + Arrays.toString(data) +\n      '}';\n  }\n\n  @Override\n  public Object head() {\n    return data[0];\n  }\n\n  @Override  public int hashCode() {\n    return Arrays.hashCode(data);\n  }\n\n  public static void main(String[] args) {\n    Tuple t = new Tuple(1, 2, 3);\n    System.out.println(t);\n  }\n\n  public Object tail() {\n    return data[data.length - 1];\n  }\n\n    if (!(other instanceof Tuple)) {\n      throw new ClassCastException(String.format(\n        \"%s is not comparable with %s\", this, other));\n    }\n    if (data.length != other.data.length) {\n      throw new IllegalArgumentException(String", "reference_code": "    }\n    if (this.size() != other.size()) {\n", "case_type": "block"}
{"generated_code": "import static io.prestosql.plugin.hive.util.HadoopAuthenticationUtils.createUserGroupInformationForSubject;\nimport static java.util.Objects.requireNonNull;\n\n@Deprecated\n@DeprecatedUse(includeClass = KerberosHadoopAuthentication.class, since = \"0.1.0\")\n@DeprecatedSince(version = \"0.1.0\")\n@DeprecatedForRemoval(version = \"0.2.0\", reason = \"Use KerberosAuthentication instead\")\n@DeprecatedSince(version = \"0.2.0\")\n@DeprecatedForRemoval(version = \"0.3.0\", reason = \"Use KerberosAuthentication instead\")\n@DeprecatedSince(version = \"0.3.0\")\n@DeprecatedForRemoval(version = \"0.4.0\", reason = \"Use KerberosAuthentication instead\")\n@DeprecatedSince(version = \"0.4.0\")\n@DeprecatedForRemoval(version = \"0.5.0\", reason = \"Use KerberosAuthentication instead\")\n@DeprecatedSince(version = \"0", "reference_code": "import static java.util.Objects.requireNonNull;\nimport static org.apache.hadoop.security.UserGroupInformationShim.createUserGroupInformationForSubject;\n\n", "case_type": "block"}
{"generated_code": "\n  public ANXValue getVwap() {\n\n    return vwap;\n  }\n\n  public ANXValue getVol(String currencyPair) {\n\n    return vol;\n  }\n\n  public ANXValue getVol(String currencyPair, String type) {\n\n    return vol;\n  }\n\n  public ANXValue getVol(String currencyPair, String type, String interval) {\n\n    return vol;\n  }\n\n  public ANXValue getVol(String currencyPair, String type, String interval, String intervalType) {\n\n    return vol;\n  }\n\n  public ANXValue getVol(String currencyPair, String type, String interval, String intervalType, String intervalType2) {\n\n    return vol;\n  }\n\n  public ANXValue getVol(String currencyPair, String type, String interval, String intervalType, String intervalType2, String intervalType3) {\n\n    return vol;\n  }\n\n  public ANXValue getVol(String currencyPair, String type, String interval, String intervalType, String intervalType2, String intervalType3, String", "reference_code": "\n  public ANXValue getVwap() {\n\n    return vwap;\n  }\n", "case_type": "block"}
{"generated_code": "    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        // Set the content view to the layout defined in row.xml\n        // This is the layout that will be used to display the image\n        // and the text\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in row.xml\n        // The layout is defined in", "reference_code": "    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n", "case_type": "block"}
{"generated_code": "        return datum.kanji;\n    }\n\n    @Override\n    protected String getCorrectAnswerText(Kanji datum) {\n        return datum.translation;\n    }\n\n    @Override\n    protected String getTaskText(Kanji task) {\n        return task.kanji;\n    }\n\n    @Override\n    protected String getCorrectAnswerText(Kanji task) {\n        return task.translation;\n    }\n\n    @Override\n    protected String[] getVariantsText(Kanji datum) {\n        return new String[] {datum.translation};\n    }\n\n    @Override\n    protected String getTaskText(Kanji task) {\n        return task.kanji;\n    }\n\n    @Override\n    protected String getCorrectAnswerText(Kanji task) {\n        return task.translation;\n    }\n\n    @Override\n    protected String[] getVariantsText(Kanji datum) {\n        return new String[] {datum.translation};\n    }\n\n    @Override\n    protected String getTaskText(", "reference_code": "        return datum.kanji;\n    }\n\n", "case_type": "block"}
{"generated_code": ".vmEvent(),\n                advancedViewEnabled,\n                \"100px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.applicationColumn, constants.applicationEvent(),\n                advancedViewEnabled,\n                \"100px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.dateColumn, constants.dateEvent(),\n                advancedViewEnabled,\n                \"100px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.severityColumn, constants.severityEvent(),\n                advancedViewEnabled,\n                \"100px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.messageColumn, constants.messageEvent(),\n                advancedViewEnabled,\n                \"100px\"); //$NON-NLS-1$\n        getTable().ensureColumnPresent(AdvancedViewColumns.applicationModeColumn, constants.applicationModeEvent(),\n                advancedViewEnabled,\n                \"100px\"); //$NON", "reference_code": "    public static final TextColumnWithTooltip<AuditLog> storageColumn = new TextColumnWithTooltip<AuditLog>() {\n        @Override\n        public String getValue(AuditLog object) {\n            return object.getstorage_domain_name();\n        }\n", "case_type": "block"}
{"generated_code": "= null) {\n        mySecondaryActions.add(action);\n      }\n    }\n    else {\n      if (mySecondaryActions != null) {\n        mySecondaryActions.remove(action);\n      }\n    }\n  }\n\n  public void setDumbAware(boolean isDumbAware) {\n    myDumbAware = isDumbAware ? Boolean.TRUE : null;\n  }\n\n  public boolean isDumbAware() {\n    return myDumbAware != null && ReflectionUtil.isTrue(myDumbAware);\n  }\n\n  public void setSecondaryActions(Set<AnAction> secondaryActions) {\n    mySecondaryActions = secondaryActions;\n  }\n\n  public Set<AnAction> getSecondaryActions() {\n    return mySecondaryActions != null ? new HashSet<>(mySecondaryActions) : null;\n  }\n\n  public  public void setSecondaryActions(AnAction... secondaryActions) {\n    mySecondaryActions = ReflectionUtil.createSet(secondaryActions);\n  }\n\n ", "reference_code": "    return myDumbAware;\n  }\n\n  public boolean hideIfNoVisibleChildren() {\n    return false;\n  }\n", "case_type": "block"}
{"generated_code": "    if (statement == null) return false;\n    PsiExpression returnValue = statement.getReturnValue();\n    if (!isSimple(returnValue)) return false;\n    NullabilityAnnotationInfo info = NullabilityAnnotationInfo.getAnnotationInfo(method);\n    if (info == null) info = NullabilityAnnotationInfo.getAnnotationInfo(aClass);\n    if (info == null) info = NullabilityAnnotationInfo.getAnnotationInfo(aClass.getContainingFile());\n    if (info == null) info = NullabilityAnnotationInfo.getAnnotationInfo(aClass.getContainingProject());\n    if (info == null) info = NullabilityAnnotationInfo.getAnnotationInfo(aClass.getContainingFile().getProject());\n    if (info == null) info = NullabilityAnnotationInfo.getAnnotationInfo(aClass.getContainingProject().getProjectFile());\n    if (info == null) info = NullabilityAnnotationInfo.getAnnotationInfo(aClass.getContainingProject().getBaseDir());\n    if (info == null) info = NullabilityAnnotationInfo.getAnnotationInfo(aClass.getContainingProject().getBaseDir().get", "reference_code": "    if (statement == null) return false;\n    PsiExpression returnValue = PsiUtil.skipParenthesizedExprDown(statement.getReturnValue());\n    if (returnValue == null) return false;\n    if (returnValue instanceof PsiLiteralExpression) return false;\n    if (!isSimple(returnValue)) return false;\n    NullabilityAnnotationInfo info = NullableNotNullManager.getInstance(method.getProject()).findEffectiveNullabilityInfo(method);\n", "case_type": "block"}
{"generated_code": "    @Override\n    public Maybe<Class> loadClass(String className) {\n        try {\n            // TODO: should we check for a ClassLoader.getResource() here?\n            // TODO: should we check for a ClassLoader.loadClass() here?\n            // TODO: should we check for a ClassLoader.loadClass() here?\n            // TODO: should we check for a ClassLoader.loadClass() here?\n            // TODO: should we check for a ClassLoader.loadClass() here?\n            // TODO: should we check for a ClassLoader.loadClass() here?\n            // TODO: should we check for a ClassLoader.loadClass() here?\n            // TODO: should we check for a ClassLoader.loadClass() here?\n            // TODO: should we check for a ClassLoader.loadClass() here?\n            // TODO: should we check for a ClassLoader.loadClass() here?\n            // TODO: should we check for a ClassLoader.loadClass() here?\n            // TODO: should we check for a ClassLoader.loadClass() here?\n            // TODO: should we check for a ClassLoader.loadClass() here?\n", "reference_code": "    public Maybe<Class<?>> tryLoadClass(String className) {\n        try {\n", "case_type": "block"}
{"generated_code": "import org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.TemporaryFolder;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.RunWith;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.testng.annotations.Test;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.runners.Parameterized.Parameterized;\n\nimport org.junit.runners.Parameterized.Parameters;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.testng.annotations.Test;\n\nimport org.junit.runners.Parameterized.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\n\nimport org.junit.runners.Parameterized.Parameters;\n\nimport org.junit.runners.Parameterized.Parameters;\n\nimport org.junit.runners.Parameterized.Parameters;\n\nimport org.junit.runners.Parameterized.Parameters;", "reference_code": "import org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.TemporaryFolder;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.slf4j.Logger;\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Override\n    public void delete(String uuid) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void delete(UUID uuid) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void delete(Book book) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void delete(String uuid, Book book) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void delete(UUID uuid, Book book) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void delete(Book book, String uuid) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void delete(UUID uuid, Book book, String uuid2) {\n        // TODO Auto-generated method stub\n\n    }\n\n    @Override\n    public void delete(Book book, UUID uuid) {\n        // TODO Auto-generated method stub\n\n    }\n\n   ", "reference_code": "    }\n\n    @Override\n    public void remove(String uuid) {\n", "case_type": "block"}
{"generated_code": "    void setSaveEnabled(boolean enabled);\n    void setBackEnabled(boolean enabled);\n    void setSaveAndBackEnabled(boolean enabled);\n    void setSaveAndCancelEnabled(boolean enabled);\n    void setCancelAndBackEnabled(boolean enabled);\n    void setSaveAndBackAndCancelEnabled(boolean enabled);\n\n    void setSaveEnabled(boolean enabled, boolean saveAndBackEnabled);\n    void setBackEnabled(boolean enabled, boolean saveAndBackEnabled);\n    void setSaveAndBackEnabled(boolean enabled, boolean saveAndBackAndCancelEnabled);\n    void setSaveAndCancelEnabled(boolean enabled, boolean saveAndBackAndCancelEnabled);\n    void setCancelAndBackEnabled(boolean enabled, boolean saveAndBackAndCancelEnabled);\n    void setSaveAndBackAndCancelEnabled(boolean enabled, boolean saveAndBackAndCancelEnabled);\n\n    void setSaveEnabled(boolean enabled, boolean saveAndBackEnabled, boolean saveAndBackAndCancelEnabled);\n    void setBackEnabled(boolean enabled, boolean saveAndBackEnabled, boolean saveAndBackAndCancelEnabled);\n    void setSaveAndBackEnabled(boolean enabled, boolean saveAndBackEnabled, boolean saveAndBackAnd", "reference_code": "    void setBackEnabled(boolean enabled);\n\n", "case_type": "block"}
{"generated_code": "import com.ess.tudarmstadt.de.mwidgetexample.utils.Barcode;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.json.JSONArray;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.json.JSONArray;\nimport org.json.JSONException;\nimport org.json.JSONObject;\nimport org.json.JSONArray;\nimport org.json.JSON", "reference_code": "\nimport org.json.JSONException;\n", "case_type": "block"}
{"generated_code": "    public ClickUtil(long delay) {\n        this.delay = delay;\n        this.lastTime = System.currentTimeMillis();\n\n    }\n\n    public long getDelay() {\n        return delay;\n    }\n\n    public void setDelay(long delay) {\n        this.delay = delay;\n        this.lastTime = System.currentTimeMillis();\n\n    }\n\n    public long getLastTime() {\n        return lastTime;\n    }\n\n    public void setLastTime(long lastTime) {\n        this.lastTime = lastTime;\n\n    }\n\n    public ClickUtil() {\n        this.delay = 500;\n        this.lastTime = System.currentTimeMillis();\n\n    }\n\n    public ClickUtil(long delay, long lastTime) {\n        this.delay = delay;\n        this.lastTime = lastTime;\n\n    }\n\n    public void setDelay(int delay) {\n        this.delay = delay;\n        this.lastTime = System.currentTimeMillis();\n\n    }\n\n    public long getTime()", "reference_code": "    public ClickUtil(long delay) {\n        this.delay = delay;\n", "case_type": "block"}
{"generated_code": "\npublic enum TeamEventAttendeeStatus implements I18nEnum\n{\n  ABSENT(\"absent\"), ACCEPTED(\"accepted\"), DECLINED(\"declined\"), DEFERRED(\"deferred\"),\n  IN_CANCELLATION(\"in_cancellation\"), IN_REVIEW(\"in_review\"), IN_REVIEW_AND_ACCEPTED(\"in_review_and_accepted\"),\n  IN_REVIEW_AND_DECLINED(\"in_review_and_declined\"), IN_REVIEW_AND_DEFERRED(\"in_review_and_deferred\"),\n  IN_REVIEW_AND_TENTATIVE(\"in_review_and_tentative\"), IN_REVIEW_AND_TENTATIVE_AND_ACCEPTED(\"in_review_and_tentative_and_accepted\"),\n  IN_REVIEW_AND_TENTATIVE_AND_DECLINED(\"in_review_and_tentative_and_declined\"), IN_REVIEW_AND_TENTATIVE_AND_DEFERRED(\"in_", "reference_code": "\npublic enum TeamEventAttendeeStatus implements I18nEnum\n{\n  ACCEPTED(\"accepted\"), COMPLETED(\"completed\"), DECLINED(\"declined\"), DELEGATED(\"delegated\"), //\n", "case_type": "block"}
{"generated_code": "        netService.addNetworkEventListener(new INetworkEventListener() {\n            @Override\n            public void onEvent(NetworkEvent event) {\n                System.out.println(\"Network event: \" + event.getEventType());\n            }\n        });\n        // a listener is added to capture client authentication events\n        netService.addNetworkEventListener(new INetworkEventListener() {\n            @Override\n            public void onEvent(NetworkEvent event) {\n                System.out.println(\"Network event: \" + event.getEventType());\n            }\n        });\n        // a listener is added to capture client authentication events\n        netService.addNetworkEventListener(new INetworkEventListener() {\n            @Override\n            public void onEvent(NetworkEvent event) {\n                System.out.println(\"Network event: \" + event.getEventType());\n            }\n        });\n        // a listener is added to capture client authentication events\n        netService.addNetworkEventListener(new INetworkEventListener() {\n            @Override\n            public void onEvent(NetworkEvent event) {\n                System.out.println(\"Network event: \" + event.getEventType", "reference_code": "        // events\n        netService.addNetworkEventListener(new INetworkEventListener() {\n\n            @Override\n", "case_type": "block"}
{"generated_code": "public class CallException extends Exception {\n    private static final long serialVersionUID = 1L;\n\n    public static final CallException INVALID_RESPONSE = new CallException(\"Invalid response from Last.fm\");\n    public static final CallException INVALID_RESPONSE_CODE = new CallException(\"Invalid response code from Last.fm\");\n    public static final CallException INVALID_RESPONSE_MESSAGE = new CallException(\"Invalid response message from Last.fm\");\n    public static final CallException INVALID_RESPONSE_PARAMETER = new CallException(\"Invalid response parameter from Last.fm\");\n    public static final CallException INVALID_RESPONSE_METHOD = new CallException(\"Invalid response method from Last.fm\");\n    public static final CallException INVALID_RESPONSE_FORMAT = new CallException(\"Invalid response format from Last.fm\");\n    public static final CallException INVALID_RESPONSE_FORMAT_PARAMETER = new CallException(\"Invalid response format parameter from Last.fm\");\n    public static final CallException INVALID_RESPONSE_FORMAT_METHOD = new CallException(\"Invalid response format", "reference_code": "public class CallException extends RuntimeException {\n", "case_type": "block"}
{"generated_code": "     */\n\nimport static org.junit.Assert.*;\n\npublic class MaximumOccuringCharacterInStringTest\n\npublic class MaximumOccuringCharacterInString\n\npublic class MaximumOccuringCharacterInStringTest\n\npublic class MaximumOccuringCharacterInString\n\npublic class MaximumOccuringCharacterInStringTest\n\npublic class MaximumOccuringCharacterInString\n\npublic class MaximumOccuringCharacterInStringTest\n\npublic class MaximumOccuringCharacterInString\n\npublic class MaximumOccuringCharacterInStringTest\n\npublic class MaximumOccuringCharacterInString\n\npublic class MaximumOccuringCharacterInStringTest\n\npublic class MaximumOccuringCharacterInString\n\npublic class MaximumOccuringCharacterInStringTest\n\npublic class MaximumOccuringCharacterInString\n\npublic class MaximumOccuringCharacterInStringTest\n\npublic class MaximumOccuringCharacterInString\n\npublic class MaximumOccuringCharacterInStringTest\n\npublic class MaximumOccuringCharacterInString\n\npublic class MaximumOccuringCharacterInStringTest\n\npublic class MaximumOccuringCharacterInString\n\npublic class MaximumOccuringCharacterInStringTest\n\n", "reference_code": "import java.io.*;\nimport java.util.*;\n\npublic class find_maximum_occurring_char_in_string\n", "case_type": "block"}
{"generated_code": "    }\n\n    public boolean send(Cause cause) {\n        return send(Lists.newArrayList(this.sender), cause);\n    }\n\n    public boolean send(Collection<CommandSource> members, Cause cause) {\n        members.add(this.sender);\n        members.addAll(Sponge.getServer().getPlayers());\n        members.addAll(Sponge.getServer().getViewers());\n        members.addAll(Sponge.getServer().getConsole().getPlayers());\n        members.addAll(Sponge.getServer().getPlayers().stream().filter(x -> x.getPermissions().hasPermission(Nucleus.PERMISSION_PREFIX + \"sendmessage\")).toList());\n        members.addAll(Sponge.getServer().getPlayers().stream().filter(x -> x.getPermissions().hasPermission(Nucleus.PERMISSION_PREFIX + \"sendmessage.others\")).toList());\n        members.addAll(Sponge.getServer().getPlayers().stream().filter(x -> x", "reference_code": "    }\n\n    public boolean send(Cause cause) {\n        List<CommandSource> members = Lists.newArrayList(Sponge.getServer().getConsole());\n", "case_type": "block"}
{"generated_code": "Single(rowCount);\n      }\n    }, filter);\n  }\n\n  private ColumnIndexFilter(ColumnIndexStore columnIndexStore, Set<ColumnPath> columns, long rowCount) {\n    this.columnIndexStore = columnIndexStore;\n    this.columns = columns;\n    this.rowCount = rowCount;\n  }\n\n  @Override\n  public RowRanges visit(And and) {\n    return RowRanges.createAnd(this.columnIndexStore, this.columns, this.rowCount, and.getLeft(),\n        and.getRight());\n  }\n\n  @Override\n  public RowRanges visit(Or or) {\n    return RowRanges.createOr(this.columnIndexStore, this.columns, this.rowCount, or.getLeft(), or.getRight());\n  }\n\n  @Override\n  public RowRanges visit(Not not) {\n    return RowRanges.createNot(this.columnIndexStore, this.columns, this.rowCount, not.getChild());\n  }\n\n  @Override\n  public RowRanges visit(Column column) {\n", "reference_code": "    }\n    return allRows;\n", "case_type": "block"}
{"generated_code": "     * @param nonce\n     *            the <tt>Nonce</tt> to insert.\n     */\n    @SuppressWarnings(\"unchecked\")\n    @Deprecated\n    public synchronized void add(final Nonce nonce, final boolean value) {\n        backingQueue.put(nonce, Boolean.valueOf(value));\n    }\n\n    /**\n     * Inserts the specified <tt>Nonce</tt> into this queue.\n     * \n     * @param nonce\n     *            the <tt>Nonce</tt> to insert.\n     */\n    @Deprecated\n    public synchronized void add(final Nonce nonce) {\n        backingQueue.put(nonce, Boolean.TRUE);\n    }\n\n    /**\n     * Inserts the specified <tt>Nonce</tt> into this queue.\n     * \n     * @param nonce\n     *            the <tt>Nonce</tt> to insert.\n     */\n    @Deprecated\n    public synchronized void add(final Nonce nonce, final boolean value) {\n        backing", "reference_code": "     * @param nonce\n     *            the nonce to add.\n     */\n", "case_type": "block"}
{"generated_code": "import freemind.modes.MindMap;\nimport freemind.modes.MindMapEdge;\nimport freemind.modes.MindMapNodeAdapter;\nimport freemind.modes.MindMapNodeAdapter.EdgeAdapter;\nimport freemind.modes.MindMapNodeAdapter.EdgeStyleFormatAction;\nimport freemind.modes.MindMapNodeAdapter.NodeActorXml;\nimport freemind.modes.MindMapNodeAdapter.NodeGeneralAction;\nimport freemind.modes.MindMapNodeAdapter.Tools;\nimport freemind.modes.MindMapNodeAdapter.XmlAction;\nimport freemind.modes.MindMapNodeAdapter.XmlAction.EdgeStyleFormatAction;\nimport freemind.modes.MindMapNodeAdapter.XmlAction.NodeGeneralAction;\nimport freemind.modes.MindMapNodeAdapter.XmlAction.XmlAction;\nimport freemind.modes.mindmapmode.MindMap;\nimport freemind.modes.mindmapmode.MindMapEdge;\nimport", "reference_code": "import freemind.controller.actions.generated.instance.EdgeStyleFormatAction;\nimport freemind.controller.actions.generated.instance.XmlAction;\nimport freemind.main.Tools;\nimport freemind.modes.EdgeAdapter;\nimport freemind.modes.MindMap;\nimport freemind.modes.MindMapEdge;\n", "case_type": "block"}
{"generated_code": "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport javax.persistence.TypedQuery;\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Root;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport static org.springframework.data.jpa.domain.AbstractPersistable_.id;\n\nimport java.util.List;\nimport java.util.Map;\nimport java.util.Set;\n\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport javax.persistence.TypedQuery;\nimport javax.persistence.criteria.CriteriaBuilder;\nimport javax.persistence.criteria.CriteriaQuery;\nimport javax.persistence.criteria.Root;\nimport javax.persistence.criteria.Predicate;\nimport javax.persistence.criteria.Path;\nimport javax.persistence.criteria.Order;\nimport javax.", "reference_code": "import javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n", "case_type": "block"}
{"generated_code": "        assertNotNull(cl);\n        assertEquals(new ServiceFullName(\"a\", \"b\", \"1\"), cl.getFullName());\n        assertEquals(new Integer(102), cl.getVersion());\n        //Find runtimes\n        cl = persistence.loadCluster(cl.getFullName());\n        assertNotNull(cl);\n        assertEquals(new ServiceFullName(\"a\", \"b\", \"1\"), cl.getFullName());\n        assertEquals(new Integer(102), cl.getVersion());\n        assertEquals(2, cl.getRuntimes().size());\n        cl = persistence.loadCluster(new ServiceFullName(\"a\", \"b\", \"2\"));\n        assertNotNull(cl);\n        assertEquals(new ServiceFullName(\"a\", \"b\", \"2\"), cl.getFullName());\n        assertEquals(new Integer(101), cl.getVersion());\n        assertEquals(1, cl.getRuntimes().size());\n        cl = persistence.loadCluster(new ServiceFullName(\"a\", \"b\", \"1\"));\n        assertNotNull(cl);\n        assertEquals(new ServiceFullName(\"a\", \"b", "reference_code": "        assertNotNull(cl);\n", "case_type": "block"}
{"generated_code": "\n        if (credentials instanceof Credentials.UserPasswordCredentials) {\n\n            session = getSession((Credentials.UserPasswordCredentials)credentials);\n\n        } else if (credentials instanceof Credentials.ApiKeyCredentials) {\n\n            session = getSession((Credentials.ApiKeyCredentials)credentials);\n\n        } else if (credentials instanceof Credentials.UserPasswordCredentials && credentials instanceof Credentials.ApiKeyCredentials) {\n\n            session = getSession((Credentials.UserPasswordCredentials)credentials);\n\n        } else if (credentials instanceof Credentials.UserPasswordCredentials && credentials instanceof Credentials.UserPasswordCredentials) {\n\n            session = getSession((Credentials.UserPasswordCredentials)credentials);\n\n        } else if (credentials instanceof Credentials.UserPasswordCredentials && credentials instanceof Credentials.ApiKeyCredentials) {\n\n            session = getSession((Credentials.UserPasswordCredentials)credentials);\n\n        } else if (credentials instanceof Credentials.ApiKeyCredentials && credentials instanceof Credentials.UserPasswordCredentials) {", "reference_code": "        if (credentials instanceof Credentials.UserPasswordCredentials) {\n\n            session = getSession((Credentials.UserPasswordCredentials)credentials);\n", "case_type": "block"}
{"generated_code": "import org.jdom2.input.SAXBuilder;\nimport org.jdom2.output.Format;\nimport org.jdom2.output.XMLOutputter;\n\npublic class Test {\n\n    /**\n     * @param args\n     * @throws Exception \n     */\n    //@SuppressWarnings(\"unchecked\")\n    //@SuppressWarnings(\"rawtypes\")\n    //@SuppressWarnings(\"unused\")\n    //@SuppressWarnings(\"unused\")\n    //@SuppressWarnings(\"unused\")\n    //@SuppressWarnings(\"unused\")\n    //@SuppressWarnings(\"unused\")\n    //@SuppressWarnings(\"unused\")\n    //@SuppressWarnings(\"unused\")\n    //@SuppressWarnings(\"unused\")\n    //@SuppressWarnings(\"unused\")\n    //@SuppressWarnings(\"unused\")\n    //@SuppressWarnings(\"unused\")\n    //@SuppressWarnings(\"unused\")\n    //@Suppress", "reference_code": "import org.jdom2.input.SAXBuilder;\nimport org.jdom2.output.Format;\nimport org.jdom2.output.XMLOutputter;\n\npublic class XMLReplicator {\n", "case_type": "block"}
{"generated_code": "\n    @Override\n    public boolean isMutable() {\n        return false;\n    }\n\n    @Override\n    public Serializable clone(Object value) throws HibernateException {\n        return (Serializable)value;\n    }\n\n    @Override\n    public int hashCode(Serializable cached, Object owner) throws HibernateException {\n        return cached.hashCode();\n    }\n\n    @Override\n    public boolean equals(Serializable x, Serializable y) throws HibernateException {\n        return x.equals(y);\n    }\n\n    @Override\n    public Serializable assemble(int cached, Object owner) throws HibernateException {\n        return (Serializable)cached;\n    }\n\n    @Override\n    public Serializable replace(Serializable original, Object target, Object owner) throws HibernateException {\n        return original;\n    }\n\n    @Override\n    public int hashCode(Serializable cached) throws HibernateException {\n        return cached.hashCode();\n    }\n\n    @Override\n    public boolean equals(Serializable x, Serializable y) throws Hib", "reference_code": "\n    @Override\n    public boolean isMutable() {\n        return false;\n", "case_type": "block"}
{"generated_code": "Page.gotoEditMessage(1);\n        compareMessages(editAnnouncementComponent.getTitle(), title1);\n        editAnnouncementComponent.clickCancelButton();\n\n        driver().navigate().refresh();\n        controlPage.gotoEditMessage(2);\n        compareMessages(editAnnouncementComponent.getTitle(), title2);\n        editAnnouncementComponent.clickCancelButton();\n    }\n\n    private void compareMessages(String title, String expectedTitle) {\n        assertEquals(title, expectedTitle, \"Unexpected announcement content.\");\n    }\n\n    private boolean checkDatesSortedDescending(List<Date> announcementDates) {\n        for (int i = 0; i < announcementDates.size() - 1; i++) {\n            if (announcementDates.get(i).before(announcementDates.get(i + 1))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean checkDatesSortedAscending(List<Date> announcementDates) {\n        for (int i = 0; i < announcement", "reference_code": "     * @return if the list is sorted ascending\n     */\n    private boolean checkDatesSortedDescending(List<Date> dates) {\n        boolean isSorted = true;\n", "case_type": "block"}
{"generated_code": "            throw new IllegalStateException(e);\n        }\n\n    }\n\n    /** Returns a signature instance which computes a hash of its content, before signing with the given private key. */\n    public static Signature createSigner(PrivateKey key, String algorithm) {\n        return createSigner(key, SignatureAlgorithm.valueOf(algorithm));\n\n    }\n\n    /** Returns a signature instance which computes a hash of its content, before signing with the given private key. */\n    public static Signature createSigner(PrivateKey key, SignatureAlgorithm algorithm) {\n        return createSigner(key, algorithm.getAlgorithmName());\n\n    }\n\n    /** Returns a signature instance which computes a hash of its content, before signing with the given private key. */\n    public static Signature createSigner(PrivateKey key, String algorithmName) {\n        return createSigner(key, SignatureAlgorithm.valueOf(algorithmName));\n\n    }\n\n    /** Returns a signature instance which computes a hash of its content, before signing with the given private key. */\n    public static Signature createSigner(Private", "reference_code": "            throw new IllegalStateException(e);\n        }\n", "case_type": "block"}
{"generated_code": "    private InputInterface input;\n    private InMemoryOutput output;\n\n    /**\n     * Default constructor.\n     */\n    public ApplicationTester() {\n        this(new Application());\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param application An Application instance to test\n     */\n    public ApplicationTester(Application application) {\n        this(application, new ArrayInput());\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param application An Application instance to test\n     * @param input       An InputInterface instance to test\n     */\n    public ApplicationTester(Application application, InputInterface input) {\n        this.application = application;\n        this.input = input;\n    }\n\n    /**\n     * Constructor.\n     *\n     * @param application An Application instance to test\n     * @param input       An InputInterface instance to test\n     * @param output      An OutputInterface instance to test\n     */\n    public ApplicationTester(Application application, InputInterface input, InMemoryOutput output) {\n        this.application = application;\n        this.input", "reference_code": "    private InputInterface input;\n    private InMemoryOutput output;\n\n    /**\n", "case_type": "block"}
{"generated_code": " void updateUI() {\n    if (isVisible()) {\n      getUI().setRoot(root);\n      getUI().setRecursive(recursive);\n      getUI().setFilter(myFilter);\n      getUI().setTagFilter(myTagFilter);\n    }\n  }\n\n  private void setTitle() {\n    toolWindow.setTitle(IfsUtil.getProjectName(project));\n  }\n\n  public void dispose() {\n    Disposer.dispose(toolWindow);\n  }\n\n  public void setImageZoomModel(ImageZoomModel imageZoomModel) {\n    getUI().setImageZoomModel(imageZoomModel);\n  }\n\n  public  }\n\n  public void setFilter(ImageEditorActions.Filter filter) {\n    getUI().setFilter(filter);\n  }\n\n  public void setTagFilter(ImageEditorActions.TagFilter filter) {\n    getUI().setTagFilter(filter);\n  }\n\n  public void setImageZoomModel(ImageZoomModel imageZoomModel) {\n    getUI().setImage", "reference_code": "    }\n    return VirtualFile.EMPTY_ARRAY;\n  }\n", "case_type": "block"}
{"generated_code": "     * @param imageBitmap Loaded image\n     * @param view        View for image. Can be <b>null</b>.\n     */\n    void onLoadingComplete(String imageUri, View view, Bitmap imageBitmap);\n\n    /**\n     * Is called when image loading task was cancelled because of memory constraints\n     *\n     * @param imageUri Loading image URI\n     * @param view     View for image. Can be <b>null</b>.\n     */\n    void onLoadingCancelled(String imageUri, View view);\n\n    /**\n     * Is called when image loading task was cancelled because of memory constraints\n     *\n     * @param imageUri Loading image URI\n     * @param view     View for image. Can be <b>null</b>.\n     */\n    void onLoadingCancelled(String imageUri, View view);\n\n    /**\n     * Is called when image loading task was cancelled because of memory constraints\n     *\n     * @param imageUri Loading image URI\n     * @param view     View for image. Can be <b>null", "reference_code": "     * @param view        View for image. Can be <b>null</b>.\n     * @param loadedImage Bitmap of loaded and decoded image\n     */\n    void onLoadingComplete(String imageUri, View view, Bitmap loadedImage);\n\n    /**\n", "case_type": "block"}
{"generated_code": "SslContext = SSLContext.getDefault();\n        assumeTrue(jdkSslContext.getSupportedCipherSuites().length > 0);\n    }\n\n    private void newSslContext(File crtFile, File keyFile, String password) throws SSLException {\n        SSLContext sslContext = SslContext.newSslContext(crtFile, keyFile, password);\n        assertNotNull(sslContext);\n        SSLEngine sslEngine = sslContext.createSSLEngine();\n        assert        assertThrows(IOException.class, new Executable() {\n\n            @Override\n            public void execute() throws Throwable {\n                newSslContext(crtFile, keyFile, null);\n            }\n        });\n    }\n\n    @Test\n    public void testSslContextWithUnencryptedPrivateKeyEmptyPassEmpty() throws SSLException {\n        final File keyFile = ResourcesUtil.getFile(getClass(), \"test_unencrypted.pem\");\n        final File crtFile = ResourcesUtil.getFile(getClass(), \"test.crt\");\n\n        assertThrows", "reference_code": "        assertThrows(SSLException.class, new Executable() {\n", "case_type": "block"}
{"generated_code": "import gov.nasa.worldwindx.applications.sar.SARTrack;\nimport gov.nasa.worldwindx.applications.sar.SARPosition;\nimport gov.nasa.worldwindx.applications.sar.PositionTable;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport java.util.*;\nimport java.io.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\nimport java.util.logging.*;\nimport java.util.prefs.*;\nimport javax.swing.table.*;\nimport javax.swing.undo.*;\nimport javax.swing.undo.CannotRedoException;\nimport javax.swing.undo.CannotUndoException;\nimport javax.swing.undo.UndoableEdit;\nimport javax.swing.undo.UndoableEditListener;\nimport javax.swing.undo.UndoManager;\nimport javax.swing.undo.UndoableEditEvent;\nimport javax.swing.undo.UndoableEditEvent.Reason;\nimport javax.swing.undo.UndoableEditEvent", "reference_code": "import gov.nasa.worldwindx.applications.sar.*;\n", "case_type": "block"}
{"generated_code": "import seava.j4e.api.service.IPersistableLogService;\nimport seava.j4e.api.service.IJob;\nimport seava.j4e.business.service.IJobLogService;\nimport seava.j4e.business.service.IPersistableLogService;\nimport seava.j4e.business.service.IJobLogService;\nimport seava.j4e.business.service.IJobService;\nimport seava.j4e.business.service.IPersistableLogService;\nimport seava.j4e.business.service.IJobService;\nimport seava.j4e.business.service.IPersistableLogService;\nimport seava.j4e.business.service.IJobService;\nimport seava.j4e.business.service.IPersistableLogService;\nimport seava.j4e.business.service.IJobService;\nimport seava.j4e.business.service.IPersistableLogService;\nimport seava.j4e.business.service.IJobService;", "reference_code": "import seava.j4e.api.service.IPersistableLogService;\nimport seava.j4e.api.service.job.IJob;\n", "case_type": "block"}
{"generated_code": "    private final AgentInfoService agentInfoService;\n    private final ApplicationService applicationService;\n\n    @RequestMapping(value = \"/getApplicationHostInfo\")\n    public String getApplicationHostInfo() {\n        return \"getApplicationHostInfo\";\n    }\n\n    @RequestMapping(value = \"/getApplicationHostInfo\")\n    public String getApplicationHostInfo(String applicationName) {\n        return \"getApplicationHostInfo\";\n    }\n\n    @RequestMapping(value = \"/getApplicationHostInfo\")\n    public String getApplicationHostInfo(String applicationName, int durationDays) {\n        return \"getApplicationHostInfo\";\n    }\n\n    @RequestMapping(value = \"/getApplicationHostInfo\")\n    public String getApplicationHostInfo(String applicationName, int durationDays, int offset, int limit) {\n        return \"getApplicationHostInfo\";\n    }\n\n    @RequestMapping(value = \"/getApplicationHostInfo\")\n    public String getApplicationHostInfo(String applicationName, int durationDays, int offset, int limit, String sort) {\n        return \"getApplicationHostInfo\";\n    }\n\n    @RequestMapping", "reference_code": "    private final AgentInfoService agentInfoService;\n\n    private final ApplicationService applicationService;\n", "case_type": "block"}
{"generated_code": "public class ToastUtil {\n    public static void showPageEnd() {\n\n        // TODO: 2017/1/10 显示页码\n\n        // 提示\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示页码\n\n        // 显示", "reference_code": "public class ToastFactory {\n    public static void showPageEnd() {\n", "case_type": "block"}
{"generated_code": "    {\n        this.x=x;\n        this.y=y;\n        this.rot=rot;\n        this.scrble=scrble;\n        shift_x=0;\n        shift_y=0;\n        scrble.setLocation(x,y);\n        scrble.setRotation(rot);\n        scrble.setRealX(x);\n        scrble.setRealY(y);\n        scrble.setVelocity(0,0);\n        scrble.setAcceleration(0,0);\n        scrble.setAngularVelocity(0);\n        scrble.setAngularAcceleration(0);\n        scrble.setMomentOfInertia(0);\n        scrble.setMomentOfInertiaX(0);\n        scrble.setMomentOfInertiaY(0);\n        scrble.setMomentOfInertiaX(0);\n        scrble.setMomentOfInertiaY(0);\n        scrble.setMomentOfInertiaX(0);\n        scrble.setMoment", "reference_code": "    {\n        this.x=x;\n        this.y=y;\n        this.rot=rot;\n", "case_type": "block"}
{"generated_code": " e            NodeSourcePolicy stub;\n\n        // activating the policy\n        Logger.getLogger(NodeSourcePolicy.class).info(\"Activating policy \" + policy.getClass().getSimpleName());\n\n        // creating a stub to the policy\n        Logger.getLogger(NodeSourcePolicy.class).info(\"Creating stub for policy \" + policy.getClass().getSimpleName());\n\n        // activating the policy\n        Logger.getLogger(NodeSourcePolicy.class).info(\"Activating stub for policy \" + policy.getClass().getSimpleName());\n\n        // creating a stub to the policy\n        Logger.getLogger(NodeSourcePolicy.class).info(\"Creating stub for policy \" + policy.getClass().getSimpleName());\n\n        // activating the policy\n        Logger.getLogger(NodeSourcePolicy.class).info(\"Activating stub for policy \" + policy.getClass().getSimpleName());\n\n        // creating a stub to the policy\n        Logger.getLogger(NodeSourcePolicy.class).info(\"Creating stub for policy \" + policy.getClass().getSimpleName());\n\n        // activ", "reference_code": "        // turning policy into an active object\n        NodeSourcePolicy stub;\n", "case_type": "block"}
{"generated_code": "@RunWith(GwtMockitoTestRunner.class)\npublic class UberfireSimpleTableTest {\n\n    @Mock\n    private ColumnPicker columnPickerMock;\n\n    @Mock\n    private ColumnPicker columnPickerMock2;\n\n    @Mock\n    private ColumnPicker columnPickerMock3;\n\n    @Mock\n    private ColumnPicker columnPickerMock4;\n\n    @Mock\n    private ColumnPicker columnPickerMock5;\n\n    @Mock\n    private ColumnPicker columnPickerMock6;\n\n    @Mock\n    private ColumnPicker columnPickerMock7;\n\n    @Mock\n    private ColumnPicker columnPickerMock8;\n\n    @Mock\n    private ColumnPicker columnPickerMock9;\n\n    @Mock\n    private ColumnPicker columnPickerMock10;\n\n    @Mock\n    private ColumnPicker columnPickerMock11;\n\n    @Mock\n    private ColumnPicker columnPickerMock12;\n\n    @Mock\n    private ColumnPicker columnPickerMock13;\n\n    @Mock\n    private Column", "reference_code": "@RunWith(GwtMockitoTestRunner.class)\npublic class UberfireSimpleTableTest {\n\n    @Mock\n    protected UberfireColumnPicker columnPickerMock;\n\n", "case_type": "block"}
{"generated_code": "            Intent intent = new Intent();\n            intent.putExtra(FILE, selectFile);\n            setResult(RESULT_OK, intent);\n            finish();\n        } else {\n            ToastUtils.showToast(this, \"非法文件\");\n            finish();\n        }\n    }\n\n    @Override\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        if (keyCode == KeyEvent.KEYCODE_BACK) {\n            onBackPressed();\n            return true;\n        } else {\n            return super.onKeyDown(keyCode, event);\n        }\n    }\n\n    @Override\n    protected void onDestroy() {\n        if (mCurrentDirectory != null) {\n            mCurrentDirectory = null;\n            mAdapter.setCurrentList(roots);\n        } else {\n            super.onDestroy();\n            finish();\n            overridePendingTransition(0, 0);\n            finishAffinity();\n            System.exit(0);\n            android.os.Process.killProcess(android.os.Process.myPid());\n            System.", "reference_code": "            Intent intent = new Intent();\n            intent.putExtra(FILE, selectFile.getPath());\n            setResult(0, intent);\n            finish();\n", "case_type": "block"}
{"generated_code": "Lookup\n     */    public void setVisibility(View itemView, int visibility, int... ids) {\n        for (int id : ids) {\n            itemView.findViewById(id).setVisibility(visibility);\n        }\n    }\n\n    public int getAdapterPosition(ViewHolder holder) {\n        if (holder instanceof BaseViewHolder) {\n            return ((BaseViewHolder) holder).getAdapterPosition();\n        }\n\n        // 如果不是BaseViewHolder，则直接返回\n        // 因为BaseViewHolder中没有getAdapterPosition方法\n        // 所以这里直接返回holder.getAdapterPosition()\n        // 如果以后有需要，可以考虑在BaseViewHolder中增加getAdapterPosition方法\n        // 这样就可以在BaseViewHolder中调用\n        // 也可以在BaseViewHolder中增加一个getAdapterPosition方法\n        // 这样就可以在BaseViewHolder中调用\n        // 也可以在BaseViewHolder中增加一个getAdapterPosition方法\n        // 这样就可以在BaseView        itemView.setVisibility(visibility);\n    }\n\n    public int getAdapterPosition(", "reference_code": "        itemView.setVisibility(visibility);\n    }\n\n    public final int getPosition(@NonNull final ViewHolder holder) {\n", "case_type": "block"}
{"generated_code": "import lombok.Getter;\nimport javafx.beans.property.BooleanProperty;\nimport javafx.beans.property.ObjectProperty;\nimport javafx.beans.property.SimpleBooleanProperty;\nimport javafx.beans.property.SimpleObjectProperty;\nimport javafx.beans.property.SimpleStringProperty;\nimport javafx.beans.property.StringProperty;\nimport javafx.beans.value.ObservableValue;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TextField;\nimport javafx.scene.layout.HBox;\nimport javafx.scene.layout.VBox;\nimport javafx.scene.text.Text;\nimport javafx.util.StringConverter;\nimport javafx.util.converter.NumberStringConverter;\nimport javafx.util.converter.NumberStringConverter.NumberPattern;\nimport javafx.util.converter.NumberStringConverter.NumberPattern.DECIMAL;\nimport javafx.util.converter.NumberStringConverter.NumberPattern.HEXADECIMAL;\nimport javafx.util.converter", "reference_code": "import javafx.beans.property.BooleanProperty;\nimport javafx.beans.property.ObjectProperty;\nimport javafx.beans.property.SimpleBooleanProperty;\nimport javafx.beans.property.SimpleObjectProperty;\n\nimport lombok.Getter;\n", "case_type": "block"}
{"generated_code": "import static org.checkerframework.checker.formatter.qual.ConversionCategory.INT;\nimport static org.checkerframework.checker.formatter.qual.ConversionCategory.LONG;\nimport static org.checkerframework.checker.formatter.qual.ConversionCategory.SHORT;\nimport static org.checkerframework.checker.formatter.qual.ConversionCategory.STRING;\nimport static org.checkerframework.checker.formatter.qual.ConversionCategory.VOID;\nimport static org.checkerframework.checker.formatter.qual.ConversionCategory.WIDE;\nimport static org.checkerframework.checker.formatter.qual.ConversionCategory.XCHAR;\nimport static org.checkerframework.checker.formatter.qual.ConversionCategory.XLONG;\nimport static org.checkerframework.checker.formatter.qual.ConversionCategory.XSHORT;\nimport static org.checkerframework.checker.formatter.qual.ConversionCategory.XSTRING;\nimport static org.checkerframework.checker.formatter.qual.", "reference_code": "import static org.checkerframework.checker.formatter.qual.ConversionCategory.INT;\n", "case_type": "block"}
{"generated_code": "import app.chien.annotations.Bean;\nimport app.chien.annotations.Inject;\nimport app.chien.annotations.Value;\nimport app.chien.annotations.Value.Type;\nimport app.chien.annotations.Value.Type.ValueType;\nimport app.chien.annotations.Value.ValueType;\nimport app.chien.annotations.Value.ValueType.ValueType;\nimport app.chien.annotations.Value.ValueType.ValueType;\nimport app.chien.annotations.Value.ValueType.ValueType;\nimport app.chien.annotations.Value.ValueType.ValueType;\nimport app.chien.annotations.Value.ValueType.ValueType;\nimport app.chien.annotations.Value.ValueType.ValueType;\nimport app.chien.annotations.Value.ValueType.ValueType;\nimport app.chien.annotations.Value.ValueType.ValueType;\nimport app.chien.annotations.Value.ValueType.ValueType;\nimport app.chien.annotations.Value.", "reference_code": "import com.sun.istack.internal.NotNull;\n\nimport lombok.Data;\n", "case_type": "block"}
{"generated_code": "import org.apache.hadoop.mapreduce.Reducer;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\nimport org.apache.hadoop.util.GenericOptionsParser;\nimport org.apache.hadoop.mapreduce.lib.input.TextInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;\nimport org.apache.hadoop.mapreduce.lib.input.TextInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\nimport org.apache.hadoop.mapreduce.lib.input.TextInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;\nimport org.apache.hadoop.mapreduce.lib.input.TextInputFormat;\nimport org.apache.hadoop", "reference_code": "import org.apache.hadoop.mapreduce.Reducer;\nimport org.apache.hadoop.mapreduce.lib.input.FileInputFormat;\nimport org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;\n", "case_type": "block"}
{"generated_code": "            addFileType(\"wma\", FileType.Music);\n            addFileType(\"amr\", FileType.Music);\n            addFileType(\"aac\", FileType.Music);\n            addFileType(\"aiff\", FileType.Music);\n            addFileType(\"flac\", FileType.Music);\n            addFileType(\"m4a\", FileType.Music);\n            addFileType(\"m4p\", FileType.Music);\n            addFileType(\"mp3\", FileType.Music);\n            addFileType(\"ogg\", FileType.Music);\n            addFileType(\"oga\", FileType.Music);\n            addFileType(\"mka\", FileType.Music);\n            addFileType(\"wav\", FileType.Music);\n            addFileType(\"wma\", FileType.Music);\n            addFileType(\"amr\", FileType.Music);\n            addFileType(\"aac\", FileType.Music);\n            addFileType(\"aiff\", FileType.Music);\n            addFileType(\"flac\", FileType.Music);\n            addFileType(\"m4a\", FileType.Music);\n            addFile", "reference_code": "            addFileType(\"m4a\", FileType.Music);\n            addFileType(\"amr\", FileType.Music);\n            addFileType(\"awb\", FileType.Music);\n            addFileType(\"wma\", FileType.Music);\n", "case_type": "block"}
{"generated_code": "     * Gets the value of the return property.\n     * \n     * @return\n     *     possible object is\n     *     {@link EntryResponse }\n     *     \n     * @see EntryResponse\n     *     \n     * @xml.XmlElement(name = \"return\", required = true)\n     * @xml.XmlElement(name = \"return\", required = true)\n     * @xml.XmlElement(name = \"return\", required = true)\n     * @xml.XmlElement(name = \"return\", required = true)\n     * @xml.XmlElement(name = \"return\", required = true)\n     * @xml.XmlElement(name = \"return\", required = true)\n     * @xml.XmlElement(name = \"return\", required = true)\n     * @xml.XmlElement(name = \"return\", required = true)\n     * @xml.XmlElement(name = \"return\", required = true)\n     * @xml.XmlElement(name = \"return\", required = true)\n     * @xml.XmlElement(name = \"return\", required = true)\n     * @xml.XmlElement", "reference_code": "     * Gets the value of the return property.\n     * \n     * @return\n     *     possible object is\n     *     {@link EntryResponse }\n", "case_type": "block"}
{"generated_code": ");  // DO NOT modify this class. It was\n                                                             // generated from LeafRegionEntry.cpp\n  @Override\n  public long getKeyMostSigBits() {\n    return keyMostSig  private volatile long lastModified;\n  private DiskRecoveryStore recoveryStore;\n  private DiskStoreImpl diskStore;\n  private EvictionController evictionController;\n  private volatile boolean isDirty;\n  private volatile boolean isDirtyOnDisk;\n  private volatile boolean isDirtyOnDiskAndRecoveryStore;\n  private volatile boolean isDirtyOnDiskAndDiskStore;\n  private volatile boolean isDirtyOnDiskAndDiskStoreAndRecoveryStore;\n  private volatile boolean isDirtyOnDiskAndDiskStoreAndRecoveryStoreAndEvictionController;\n  private volatile boolean isDirtyOnDiskAndDiskStoreAndRecoveryStoreAndEvictionControllerAndDiskStore;\n  private volatile boolean isDirtyOnDiskAndDiskStoreAndRecoveryStoreAndEvictionControllerAndDiskStoreAndDiskStore;\n  private volatile boolean isDirtyOnDiskAndDiskStoreAndRecoveryStoreAndEvictionControllerAndDiskStoreAndDiskStoreAndDiskStore", "reference_code": "  @SuppressWarnings(\"unused\")\n", "case_type": "block"}
{"generated_code": " Instances that have been created before this UTC TS\",\n            value = \"\")\n    public static final String PROP_OLDER_THAN = \"workflow.olderThan\";\n\n    @Activate\n    protected void activate() {\n        log.info(\"Activating WorkflowInstanceRemoverScheduler\");\n        statuses.addAll(Arrays.asList(PropertiesUtil.toStringArray(PROP_WORKFLOW_STATUSES, DEFAULT_WORKFLOW_STATUSES)));\n        models.addAll(Arrays.asList(PropertiesUtil.toStringArray(PROP_WORKFLOW_MODELS, DEFAULT_WORKFLOW_MODELS)));\n        payloads.addAll(Arrays.asList(PropertiesUtil.toStringArray(PROP_WORKFLOW_PAYLOADS, DEFAULT_WORKFLOW_PAYLOADS)));\n        olderThan = PropertiesUtil.toCalendar(PROP_OLDER_THAN);\n    }\n\n    @Deactivate\n    protected void deactivate() {\n        log.info(\"Deactivating WorkflowInstanceRemoverScheduler\");\n    }\n\n", "reference_code": "        final String[] payloadsArray =\n                PropertiesUtil.toStringArray(config.get(PROP_WORKFLOW_PAYLOADS), DEFAULT_WORKFLOW_PAYLOADS);\n", "case_type": "block"}
{"generated_code": "        .setTitle(\"提示\")\n\n        /* 设置弹出窗口的图标 */\n\n        .setIcon(R.drawable.ic_launcher)\n\n        /* 设置弹出窗口的信息 */\n\n        .setMessage(\"确定退出结束游戏？？？\")\n        .setPositiveButton(\"确定\",\n                new DialogInterface.OnClickListener() {\n                    // 关闭\n                    public void onClick(\n                            DialogInterface dialoginterface, int i) {\n                        android.os.Process\n                                .killProcess(android.os.Process\n                                        .myPid());\n\n                        // SoundManager.Instance.stopBackgroundSound();\n                    }\n                })\n        .setNegativeButton(\"取消\",\n                new DialogInterface.OnClickListener() {\n                    /* 设置跳出窗口的返回事件 */\n                    public void onClick(\n                            DialogInterface dialoginterface, int i) {\n                        // 不进行操作\n                    }\n                }).show();\n\n    }\n\n    public void onBackPressed() {\n        new AlertDialog.Builder(this)\n", "reference_code": "        .setTitle(\"退出提示\")\n\n        /* 设置弹出窗口的图式 */\n\n", "case_type": "block"}
{"generated_code": "\nimport org.jackhuang.hmcl.VersionList;\n\npublic abstract class AbstractDownloader implements Downloader {\n\n    public abstract String getId();\n\n    public abstract String getName();\n\n    public abstract String getVersion();\n\n    public abstract String getDownloadUrl();\n\n    public abstract String getDownloadUrl(String version);\n\n    public abstract String getDownloadUrl(String version, String fileName);\n\n    public abstract String getDownloadUrl(String version, String fileName, String sha1);\n\n    public abstract String getDownloadUrl(String version, String fileName, String sha1, String sha256);\n\n    public abstract String getDownloadUrl(String version, String fileName, String sha1, String sha256, String sha512);\n\n    public abstract String getDownloadUrl(String version, String fileName, String sha1, String sha256, String sha512, String sha1024);\n\n    public abstract String getDownloadUrl(String version, String fileName, String sha1, String sha256, String sha512, String sha1024, String", "reference_code": "\npublic abstract class AbstractDependencyManager implements DependencyManager {\n", "case_type": "block"}
{"generated_code": "import java.util.ArrayList;\n\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertNull;\nimport static org.junit.Assert.assertSame;\nimport static org.junit.Assert.assertNotEquals;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert", "reference_code": "import java.util.ArrayList;\n\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n", "case_type": "block"}
{"generated_code": "\n    public abstract void cSync();\n    public abstract void dSync();\n\n    public abstract void cAsync();\n    public abstract void dAsync();\n\n    public abstract void eAsync();\n\n    public abstract void cAsync(String msg);\n    public abstract void dAsync(String msg);\n\n    public abstract void eAsync(String msg);\n\n    public abstract void cSync(String msg);\n    public abstract void dSync(String msg);\n\n    public abstract void eSync(String msg);\n\n    public abstract void cSync();\n    public abstract void dSync();\n\n    public abstract void eSync();\n\n    public abstract void cSync(String msg);\n    public abstract void dSync(String msg);\n\n    public abstract void eSync(String msg);\n\n    public abstract void cSync();\n    public abstract void dSync();\n\n    public abstract void eSync();\n\n    public abstract void cSync(String msg);\n    public abstract void dSync(String msg);\n\n    public abstract void eSync(String msg);\n\n    public abstract void cSync();\n    public abstract void dSync();\n\n    public abstract", "reference_code": "\n    public abstract void cSync();\n    public abstract void dSync();\n", "case_type": "block"}
{"generated_code": "import net.jforum.entities.UserSession;\nimport net.jforum.controllers.ForumController;\n\nimport br.com.caelum.vraptor.Result;\nimport br.com.caelum.vraptor.interceptor.simple.SimpleInterceptor;\nimport br.com.caelum.vraptor.view.Results;\nimport br.com.caelum.vraptor.view.json.Json;\nimport br.com.caelum.vraptor.view.json.JsonView;\nimport br.com.caelum.vraptor.view.json.JsonView.Include;\nimport br.com.caelum.vraptor.view.json.JsonView.Include.Type;\nimport br.com.caelum.vraptor.view.json.JsonView.Include.Type.Collection;\nimport br.com.caelum.vraptor.view.json.JsonView.Include.Type.Map;\nimport br.com.caelum.vraptor.view.json.JsonView.", "reference_code": "import net.jforum.entities.UserSession;\nimport br.com.caelum.vraptor.Result;\n", "case_type": "block"}
{"generated_code": "\n    @GET\n    @Path(\"{id : \\\\d+}\")\n    User getUser(@PathParam(\"id\") @Min(1L) Long id);\n\n    @GET\n    @Path(\"{id : \\\\d+}\")\n    User getUser(@PathParam(\"id\") @Min(1L) Long id, @QueryParam(\"name\") String name);\n\n    @GET\n    @Path(\"{id : \\\\d+}\")\n    User getUser(@PathParam(\"id\") @Min(1L) Long id, @QueryParam(\"name\") String name, @QueryParam(\"age\") Integer age);\n\n    @GET\n    @Path(\"{id : \\\\d+}\")\n    User getUser(@PathParam(\"id\") @Min(1L) Long id, @QueryParam(\"name\") String name, @QueryParam(\"age\") Integer age, @QueryParam(\"sex\") String sex);\n\n    @GET\n    @Path(\"{id : \\\\d+}\")\n    User getUser(@PathParam(\"id\") @Min(1L) Long id, @QueryParam(\"name\") String name, @QueryParam(\"", "reference_code": "\n    @GET\n", "case_type": "block"}
{"generated_code": "import org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\nimport org.opengroup.osdu.core.common.model.http.DpsHeaders;\n\nimport org.opengroup.osdu.core.common.provider.interfaces.ITenantFactory;\nimport org.opengroup.osdu.core.common.model.tenant.TenantInfo;\nimport org.opengroup.osdu.core.common.provider.interfaces.ITenantFactory;\nimport org.opengroup.osdu.core.common.model.tenant.TenantInfo;\nimport org.opengroup.osdu.core.common.provider.interfaces.ITenantFactory;\nimport org.opengroup.osdu.core.common.model.tenant.TenantInfo;\nimport org.opengroup.osdu.core.common.provider.interfaces.ITenantFactory;\nimport org.opengroup.osdu.core.common.model.tenant.TenantInfo;\nimport org.opengroup.osdu.core", "reference_code": "import org.springframework.context.annotation.Primary;\nimport org.springframework.stereotype.Component;\nimport org.opengroup.osdu.core.common.model.http.DpsHeaders;\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Override\n    public int get(long index) {\n        if (index >= size) {\n            throw new ArrayIndexOutOfBoundsException(index);\n        }\n\n        // we don't need to check for null here, since we've already checked for it above\n        // and we're not going to be resizing this array\n        // (we're just going to resize it to a smaller size)\n        // so we can just use the page index directly\n        // (we're not going to be resizing this array, so we can just use the page index directly)\n        // and we can just use the index in the page directly\n        // (we're not going to be resizing this array, so we can just use the page index directly)\n        // and we can just use the index in the page directly\n        // (we're not going to be resizing this array, so we can just use the page index directly)\n        // and we can just use the index in the page directly\n        // (we're not going to be resizing this array, so we can just use the page index directly)", "reference_code": "    }\n\n    @Override\n    public int get(long index) {\n", "case_type": "block"}
{"generated_code": "            }\n        }\n    }\n\n    private Map<String, SiteProvider> getProviders(PrintStream err) {\n        return getProviders(err, SiteProvider.class);\n    }\n\n    private Map<String, SiteProvider> getProviders(PrintStream err, Class<? extends SiteProvider> providerClass) {\n        return getProviders(err, providerClass, SiteProvider.class);\n    }\n\n    private Map<String, SiteProvider> getProviders(PrintStream err, Class<? extends SiteProvider> providerClass, Class<? extends SiteProvider> defaultProviderClass) {\n        return getProviders(err, providerClass, defaultProviderClass, SiteProvider.class);\n    }\n\n    private Map<String, SiteProvider> getProviders(PrintStream err, Class<? extends SiteProvider> providerClass, Class<? extends SiteProvider> defaultProviderClass, Class<? extends SiteProvider> defaultProviderClass2) {\n        return getProviders(err, providerClass, defaultProviderClass, defaultProviderClass2, SiteProvider.class);\n    }\n\n    private Map<String, SiteProvider> getProviders", "reference_code": "            }\n        }\n    }\n", "case_type": "block"}
{"generated_code": "    public SourceDirSetSupplier(SourceDirectorySet sourceDirectorySet)\n    {\n        sourceDirectorySet.accept(new FileVisitor<File>() {\n            @Override\n            public FileVisitResult preVisitDirectory(File file, BasicFileAttributes fileAttributes)\n            {\n                return FileVisitResult.CONTINUE;\n            }\n\n            @Override\n            public FileVisitResult postVisitDirectory(File file, IOException e)\n            {\n                return FileVisitResult.CONTINUE;\n            }\n\n            @Override\n            public FileVisitResult visitFileFailed(File file, IOException e)\n            {\n                return FileVisitResult.CONTINUE;\n            }\n\n            @Override\n            public FileVisitResult visitFile(File file, BasicFileAttributes fileAttributes)\n            {\n                return FileVisitResult.CONTINUE;\n            }\n        }, new File(sourceDirectorySet.getDir().getAsFile().getAbsolutePath()));\n    }\n\n    public void gatherRoots(SourceDirectorySet sourceDirectorySet)\n    {\n        sourceDirectorySet.accept(new FileVisitor<File>() {\n            @Override", "reference_code": "    public SourceDirSetSupplier(SourceDirectorySet set)\n    {\n        set.visit(new FileVisitor() {\n            @Override public void visitDir(FileVisitDetails fileVisitDetails) { }\n\n            @Override\n", "case_type": "block"}
{"generated_code": "     * This is why there is not a <CODE>set</CODE> method for the users property.\n     * \n     * <p>\n     * For example, to add a new item, do as follows:\n     * <pre>\n     *    getUsers().add(newItem);\n     * </pre>\n     * \n     * \n     * <p>\n     * Objects of the following type(s) are allowed in the list\n     * {@link User }\n     * \n     * \n     */\n    public List<User> getUsers() {\n        if (users == null) {\n            users = new ArrayList<User>();\n        }\n        return users;\n    }\n\n    /**\n     * This is a sample only for your convenience. Please follow\n     * the steps in <a href=\"https://developers.google.com/adwords/api/docs/guides/reports/reporting\" target=\"_blank\">Getting Started with the Reporting API</a>\n     * to create your own reports.\n     * \n     * <p>", "reference_code": "     * This is why there is not a <CODE>set</CODE> method for the users property.\n     * \n     * <p>\n", "case_type": "block"}
{"generated_code": "    public void handle(Action action, StatefulKnowledgeSession ksession) throws Exception {\n        if (action instanceof AddFeatureAction){\n            AddFeatureAction a = (AddFeatureAction)action;\n\n            if (a.getFeatureName() == null){\n                throw new IllegalStateException(\"Feature name can't be null\");\n            }\n\n            if (a.getFeatureVersion() == null){\n                throw new IllegalStateException(\"Feature version can't be null\");\n            }\n\n            if (a.getFeatureVersion().equals(\"default\")){\n                throw new IllegalStateException(\"Feature version can't be 'default'\");\n            }\n\n            if (a.getFeatureVersion().equals(\"\")){\n                throw new IllegalStateException(\"Feature version can't be empty string\");\n            }\n\n            if (a.getFeatureVersion().equals(\" \")){\n                throw new IllegalStateException(\"Feature version can't be space\");\n            }\n\n            if (a.getFeatureVersion().equals(\"\\t\")){\n                throw new IllegalStateException(\"Feature version can't be tab\");\n            }\n\n            if (a", "reference_code": "    public void process(Action action, StatefulKnowledgeSession ksession)\n            throws Exception {\n        if (action instanceof AddFeatureAction){\n            AddFeatureAction a = (AddFeatureAction) action;\n", "case_type": "block"}
{"generated_code": "    public void testXPointerValidation() throws Exception {\n        SignedDocumentValidator validator = new SignedDocumentValidator(new CommonCertificateVerifier());\n        Reports reports = validator.validate(new FileDocument(\"src/test/resources/xpointer/xpointer.xml\"));\n        // validator.validate(new FileDocument(\"src/test/resources/xpointer/xpointer.xml\"), reports);\n\n        // validator.validate(new FileDocument(\"src/test/resources/xpointer/xpointer.xml\"), reports);\n        // validator.validate(new FileDocument(\"src/test/resources/xpointer/xpointer.xml\"), reports);\n        // validator.validate(new FileDocument(\"src/test/resources/xpointer/xpointer.xml\"), reports);\n        // validator.validate(new FileDocument(\"src/test/resources/xpointer/xpointer.xml\"), reports);\n        // validator.validate(new FileDocument(\"src/test/resources/xpointer/xpointer.xml\"), reports);\n        // validator.validate(new FileDocument(\"src/test/resources/xpointer/xpointer.xml", "reference_code": "    public void test() {\n        SignedDocumentValidator sdv = SignedDocumentValidator.fromDocument(new FileDocument(\"src/test/resources/validation/10963_signed.xml\"));\n        sdv.setCertificateVerifier(new CommonCertificateVerifier());\n        Reports reports = sdv.validateDocument();\n", "case_type": "block"}
{"generated_code": "\n            inverseJoin    this.distributionEmail = distributionEmail;\n    }\n\n    /**\n     * Gets the activities\n     *\n     * Gets the activities\n     *\n     * @return list of the activities for the actor\n     */\n    @OneToMany(mappedBy = \"actor\", fetch = FetchType.LAZY)\n    public List<ActivityModel> getActivities() {\n        return activities;\n    }\n\n    /**\n     * Sets the activities\n     *\n     * @param activities - list of the activities for the actor\n     */\n    public void setActivities(List<ActivityModel> activities) {\n        this.activities = activities;\n    }\n\n    /**\n     * Gets the activities\n     *\n     * Gets the activities\n     *\n     * @return list of the activities for the actor\n     */\n    @OneToMany(mappedBy = \"actor\", fetch = FetchType.LAZY)\n    public List<ActivityModel> getActivities() {\n        return activities;\n    }\n\n    /**\n     * Sets the activities\n     *\n     * @param", "reference_code": "        this.distributionEmail = distributionEmail;\n    }\n\n    /**\n     * Gets the activities\n", "case_type": "block"}
{"generated_code": "    public void setScrollToFinishActivity(boolean finish) {\n        getSwipeBackLayout().setScrollToFinishActivity(finish);\n    }\n\n    @Override\n    public void scrollToFinishActivity() {\n        if (getSwipeBackLayout() != null)\n            getSwipeBackLayout().scrollToFinishActivity();\n    }\n\n    @Override\n    public void finish() {\n        super.finish();\n        mHelper.onPostCreate();\n    }\n\n    @Override\n    public void finishWithoutAnimation() {\n        super.finish();\n        mHelper.onPostCreate();\n    }\n\n    @Override\n    public void finishWithAnimation() {\n        super.finish();\n        mHelper.onPostCreate();\n    }\n\n    @Override\n    public void finishWithoutAnimation(boolean finish) {\n        super.finish();\n        mHelper.onPostCreate();\n    }\n\n    @Override\n    public void finishWithAnimation(boolean finish) {\n        super.finish();\n        mHelper.onPostCreate();\n    }\n\n    @Override", "reference_code": "    public void scrollToFinishActivity() {\n", "case_type": "block"}
{"generated_code": "  IncidentQuery configuration(String configuration);\n\n  /** Only select incidents which contain the tenant id. **/\n  IncidentQuery tenantId(String tenantId);\n\n  /** Order by id (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderById();\n\n  /** Order by incidentTimestamp (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByIncidentTimestamp();\n\n  /** Order by incidentMessage (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByIncidentMessage();\n\n  /** Order by incidentId (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByIncidentId();\n\n  /** Order by incidentType (needs to be followed by {@link #asc()} or {@link #desc()}). */\n  IncidentQuery orderByIncidentType();\n\n  /** Order by executionId (needs to be followed by {@link #asc()", "reference_code": "  IncidentQuery configuration(String configuration);\n\n  /** Only select incidents that belong to one of the given tenant ids. */\n  IncidentQuery tenantIdIn(String... tenantIds);\n", "case_type": "block"}
{"generated_code": "import java.util.List;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport com.fruit.web.mapper.weixin.shop.WeixinShopGoodsMapper;\nimport com.fruit.web.service.weixin.shop.WeixinShopGoodsService;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport com.fruit.web.service.weixin.shop.WeixinShopCategoryService;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport com.fruit.web.mapper.weixin.shop.WeixinShopCategoryMapper;\nimport com.fruit.web.service.weixin.shop.WeixinShopCategory", "reference_code": "import java.util.List;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.annotation.Autowired;\n", "case_type": "block"}
{"generated_code": "\n@Service\npublic class HideMoveInfoServiceImpl implements IHideMoveInfoService {\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入HideMoveInfoMapper\n\n    // 注入H", "reference_code": "@Service\npublic class HideMoveInfoService implements IHideMoveInfoService {\n\n", "case_type": "block"}
{"generated_code": "        reader.moveUp();\n\n        reader.moveDown();\n        col.setFootnoteSpec(reader.getValue());\n        reader.moveUp();\n\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n        reader.moveUp();\n        reader.skip();\n", "reference_code": "        reader.moveUp();\n\n        reader.moveDown();\n        col.setFootnoteSpec(reader.getValue());\n        reader.moveUp();\n", "case_type": "block"}
{"generated_code": "    private NotificationType(String message) {\n        this.message = message;\n    }\n\n    public String toString() {\n        return message;\n    }\n\n    public String toString(Object... args) {\n        return String.format(message, args);\n    }\n\n    public String toString(String format, Object... args) {\n        return String.format(format, args);\n    }\n\n    public String toString(String format, Object arg) {\n        return String.format(format, arg);\n    }\n\n    public String toString(String format, Object arg1, Object arg2) {\n        return String.format(format, arg1, arg2);\n    }\n\n    public String toString(String format, Object arg1, Object arg2, Object arg3) {\n        return String.format(format, arg1, arg2, arg3);\n    }\n\n    public String toString(String format, Object arg1, Object arg2, Object arg3, Object arg4) {\n        return String.format(format, arg1, arg2, arg3, arg4);", "reference_code": "    NotificationType(String message) {\n        this.message = message;\n    }\n", "case_type": "block"}
{"generated_code": "        Parcel outParcel = Parcel.obtain();\n        outParcel.unmarshall(data, 0, data.length);\n        outParcel.setDataPosition(0);\n        outParcel.writeBundle(inDoc.getBundle());\n        outParcel.recycle();\n\n        // Compare results\n        GenericDocument outDoc = new GenericDocument(outParcel.readBundle());\n        assertThat(inDoc).isEqualTo(outDoc);\n        assertThat(outDoc.getPropertyString(\"propString\")).isEqualTo(\"Hello\");\n        assertThat(outDoc.getPropertyBytesArray(\"propBytes\")).isEqualTo(new byte[][]{{1, 2}});\n        assertThat(outDoc.getPropertyDocument(\"propDocument\").getPropertyString(\"propString\"))\n                .isEqualTo(\"Goodbye\");\n        assertThat(outDoc.getPropertyDocument(\"propDocument\").getPropertyBytesArray(\"propBytes\"))\n                .isEqualTo(new byte[][]{{3, 4}});\n    }\n\n    @Test\n    public void testWriteToParcel() {\n        GenericDocument in", "reference_code": "        Parcel outParcel = Parcel.obtain();\n        outParcel.unmarshall(data, 0, data.length);\n", "case_type": "block"}
{"generated_code": "  @NotNull\n  private String serverConnection = \"http://localhost:8080\";\n\n  public String getServerConnection(String serverConnection) {\n    return serverConnection;\n  }\n\n  public void setServerConnection(String serverConnection) {\n    this.serverConnection = serverConnection;\n  }\n\n  public String getServerConnection() {\n    return serverConnection;\n  }\n\n  public void setServerConnection(String serverConnection) {\n    this.serverConnection = serverConnection;\n  }\n\n  public String getServerConnection() {\n    return serverConnection;\n  }\n\n  public void setServerConnection(String serverConnection) {\n    this.serverConnection = serverConnection;\n  }\n\n  public String getServerConnection() {\n    return serverConnection;\n  }\n\n  public void setServerConnection(String serverConnection) {\n    this.serverConnection = serverConnection;\n  }\n\n  public String getServerConnection() {\n    return serverConnection;\n  }\n\n  public void setServerConnection(String serverConnection) {\n    this.serverConnection = serverConnection;\n  }\n\n", "reference_code": "  @NotNull\n  private String serverConnection;\n\n", "case_type": "block"}
{"generated_code": "    public RelationRu(String ru, String en, Relation relation) {\n        super(ru, en, relation);\n        // TODO Auto-generated constructor stub\n\n    }\n\n    public RelationRu(String ru, Relation relation) {\n        super(ru, relation);\n        // TODO Auto-generated constructor stub\n\n    }\n\n    public RelationRu(String ru) {\n        super(ru);\n        // TODO Auto-generated constructor stub\n\n    }\n\n    public RelationRu() {\n        super();\n        // TODO Auto-generated constructor stub\n\n    }\n\n    public RelationRu(String ru, String en) {\n        super(ru, en);\n        // TODO Auto-generated constructor stub\n\n    }\n\n    public RelationRu(Relation relation) {\n        super(relation);\n        // TODO Auto-generated constructor stub\n\n    }\n\n    public RelationRu(String ru, String en, Relation relation, String comment) {\n        super(ru, en, relation, comment);\n        // TODO Auto-generated constructor stub\n\n    }", "reference_code": "    private RelationRu(String _name, String _short_name, Relation _rel) {\n        super(_name, _short_name, _rel);\n", "case_type": "block"}
{"generated_code": "{\n    private static final long serialVersionUID = 1L;\n\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n    // TODO: implement this class\n", "reference_code": "{\n", "case_type": "block"}
{"generated_code": "import java.io.Serializable;\n\nimport com.wdeanmedical.ehr.entity.base.BaseEntity;\nimport com.wdeanmedical.ehr.entity.base.BaseEntity;\nimport com.wdeanmedical.ehr.entity.base.BaseEntity;\nimport com.wdeanmedical.ehr.entity.base.BaseEntity;\nimport com.wdeanmedical.ehr.entity.base.BaseEntity;\nimport com.wdeanmedical.ehr.entity.base.BaseEntity;\nimport com.wdeanmedical.ehr.entity.base.BaseEntity;\nimport com.wdeanmedical.ehr.entity.base.BaseEntity;\nimport com.wdeanmedical.ehr.entity.base.BaseEntity;\nimport com.wdeanmedical.ehr.entity.base.BaseEntity;\nimport com.wdeanmedical.ehr.entity.base.BaseEntity;\nimport com.wdeanmedical.ehr.entity.base.BaseEntity;\nimport com.wdean", "reference_code": "import java.io.Serializable;\n", "case_type": "block"}
{"generated_code": "            { \"0\", new BigDecimal(\"0\") },\n            { \"0.0\", new BigDecimal(\"0.0\") },\n            { \"0.00\", new BigDecimal(\"0.00\") },\n            { \"0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "reference_code": "            { \"1\", BigDecimal.ONE },\n            { \"27.73692\", new BigDecimal(\"27.73692\") },\n", "case_type": "block"}
{"generated_code": "\n        public void addCommand(String name) {\n            if(names == null) {\n                names = new ArrayList<String>();\n            } else {\n                names.add(0, name);\n                return;\n            }\n            if(names.size() == 1) {\n                names.add(name);\n                return;\n            }\n            for(int i = 1; i < names.size(); ++i) {\n                names.set(i, names.get(i - 1) + \",\" + name);\n                return;\n            }\n            if(names.size() == 1) {\n                names.add(name);\n                return;\n            }\n            for(int i = 1; i < names.size(); ++i) {\n                names.set(i, names.get(i - 1) + \",\" + name);\n                return;\n            }\n            if(names.size() == 1) {\n                names.add(name);\n                return;\n            }\n            for(int i = 1; i < names.size(); ++i) {\n                names.set(", "reference_code": "\n        public void addCommand(String name) {\n            if(names.size() == 1) {\n                names = new ArrayList<String>(names);\n", "case_type": "block"}
{"generated_code": "ProfileMembersResult withNextToken(String nextToken) {\n        setNextToken(nextToken);\n        return this;\n    }\n\n    /**\n     * Returns a string representation of this object. This is useful for testing and debugging. Sensitive data will be\n     * redacted from this string using a placeholder value.\n     *\n     * @     * @return Returns a string representation of this object. This is useful for testing and debugging. Sensitive\n     *     *         data will be redacted from this string using a placeholder value.\n     */\n    @Override\n    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"{\");\n        if (getMembers() != null)\n            sb.append(\"Members: \" + getMembers() + \",\");\n        if (getNextToken() != null)\n            sb.append(\"NextToken: \" + getNextToken() + \",\");\n        sb.append(\"}\");\n        return sb.toString();\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)        return false", "reference_code": "            return true;\n", "case_type": "block"}
{"generated_code": "     * \n     * @see [API Reference](http://docs.aws.amazon.com/goto/WebAPI/waf-2015-08-24/GetXssMatchSetRequest)\n     */\n    @SerializedName(\"XssMatchSetId\")\n    private String xssMatchSetId;\n\n    private static final long serialVersionUID = 1L;\n\n    /**\n         * Returns a string representation of this object; useful for testing and debugging.\n     *\n     * @return A string representation of this object.\n     *\n     * @see java.lang.Object#toString()\n     */\n    @     * \n     * @see [API Reference](http://docs.aws.amazon.com/goto/WebAPI/waf-2015-08-24/GetXssMatchSetRequest)\n     */\n    private static final long serialVersionUID = 1L;\n\n    /**\n         * Returns a string representation of this object; useful for testing and debugging.\n     *\n     *     * \n     * @see [API Reference](http://docs", "reference_code": "import java.io.Serializable;\n", "case_type": "block"}
{"generated_code": "import java.io.IOException;\nimport java.util.Map;\n\npublic class SetupConfigurationResolver extends AbstractResolver {\n\n    /**\n     * The standard representation of the configuration.\n     */\n    @SuppressWarnings(\"unused\")\n    @Deprecated\n    @Deprecated(since = \"1.0.0\", forRemoval = true)\n    @Deprecated(since = \"1.0.0\", forRemoval = true)\n    @Deprecated(since = \"1.0.0\", forRemoval = true)\n    @Deprecated(since = \"1.0.0\", forRemoval = true)\n    @Deprecated(since = \"1.0.0\", forRemoval = true)\n    @Deprecated(since = \"1.0.0\", forRemoval = true)\n    @Deprecated(since = \"1.0.0\", forRemoval = true)\n    @Deprecated(since = \"1.0.0\", forRemoval = true)\n    @Deprecated(since = \"1.0.0\", forRemoval = true)\n    @Deprecated(", "reference_code": "import java.io.IOException;\nimport java.util.Map;\n\npublic class UuidSetupConfigurationResolver extends BaseOpenmrsResolver {\n\n", "case_type": "block"}
{"generated_code": "        return super.getFirstStatistic();\n    }\n\n    public void setArea(double area) {\n        super.setFirstStatistic(area);\n    }\n\n    public double getPerimeter() {\n        return super.getFirstDimension() + super.getSecondDimension() + Math.sqrt((super.getFirstDimension() * super.getFirstDimension()) + (super.getSecondDimension() * super.getSecondDimension()));\n    }\n\n    public void setPerimeter(double perimeter) {\n        super.setFirstStatistic(perimeter);\n    }\n\n    public String toString() {\n        return \"Triangle: base = \" + super.getFirstDimension() + \" height = \" + super.getSecondDimension();\n    }\n\n    public boolean equals(Object obj) {\n        return super.equals(obj);\n    }\n\n    public int compareTo(Object obj) {\n        return super.compareTo(obj);\n    }\n\n    public double getFirstDimension() {\n        return super.getFirstDimension();\n    }\n\n    public double get", "reference_code": "        return super.getFirstDimension();\n    }\n", "case_type": "block"}
{"generated_code": ".translate(\"gui.message.fuel.name\") + \": \" +        {\n        this.mc.textureManager.bindTexture(GuiBuggy.sealerTexture[this.type]);\n        GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);\n        this.drawTexturedModalRect(this.xSize, this.ySize, 0, 0, this.width, this.height);\n        this.drawTexturedModalRect(this.xSize + 1, this.ySize + 1, 18, 0, 16, 16);\n        this.drawTexturedModalRect(this.xSize + 18, this.ySize + 1, 36, 0, 16, 16);\n        this.drawTexturedModalRect(this.xSize + 36, this.ySize + 1, 54, 0, 16, 16);\n        this.drawTexturedModalRect(this.xSize + 54, this.ySize + ", "reference_code": "    {\n", "case_type": "block"}
{"generated_code": "(new ClassResolver(bundle));\n            }\n\n            return Ognl.evaluateExpressionGet(expressionTree, ctxt, evaluationRoot);\n        } catch (OgnlException e) {\n            throw new TemplateProcessingException(\"Error evaluating OGNL expression: \" + expression, e,\n                    processingContext.getTemplateSource());\n        }\n    }\n\n    @Override\n    public String getExpressionPrefix() {\n        return OGNL_CACHE_PREFIX;\n    }\n\n    @Override\n    public int getPriority() {\n        return 1000;\n    }\n\n    @Override\n    public boolean isCacheable() {\n        return true;\n    }\n\n    @Override\n    public boolean isCacheable(final String expression) {\n        return true;\n    }\n\n    @Override    @Override\n    public final Object evaluate(final Configuration configuration,\n                                 final IProcessingContext processingContext, final String expression,\n                                 final StandardExpressionExecutionContext expContext) {\n        return evaluate(configuration, processingContext, expression, expContext, false);\n    }\n\n    @Override\n   ", "reference_code": "\n    @Override\n    public String toString() {\n        return \"OGNL extended by Wisdom\";\n    }\n\n", "case_type": "block"}
{"generated_code": "        if (!super.isSame(obj)) {\n            return false;\n        }\n\n        if (!(obj instanceof FillArrayNode)) {\n            return false;\n        }\n\n        if (!elemType.equals(((FillArrayNode) obj).elemType)) {\n            return false;\n        }\n\n        if (data == null) {\n            return ((FillArrayNode) obj).data == null;\n        }\n\n        return data.equals(((FillArrayNode) obj).data);\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n\n        if (!(obj instanceof FillArrayNode)) {\n            return false;\n        }\n\n        if (!elemType.equals(((FillArrayNode) obj).elemType)) {\n            return false;\n        }\n\n        if (data == null) {\n            return ((FillArrayNode) obj).data == null;\n        }\n\n        if (!data.equals(((", "reference_code": "        if (!(obj instanceof FillArrayNode) || !super.isSame(obj)) {\n            return false;\n        }\n", "case_type": "block"}
{"generated_code": "{\n    private final Block block;\n\n    public BlockMatcher()\n    {\n        this.block = null;\n    }\n\n    public BlockMatcher(Block blockType)\n    {\n        this.block = blockType;\n    }\n\n    public Block getBlock()\n    {\n        return this.block;\n    }\n\n    public BlockMatcher copy()\n    {\n        return new BlockMatcher(this.block);\n    }\n\n    public BlockMatcher copy(Block blockType)\n    {\n        return new BlockMatcher(blockType);\n    }\n\n    public BlockMatcher copy(Block blockType, boolean copyMetadata)\n    {\n        return new BlockMatcher(blockType);\n    }\n\n    public BlockMatcher copy(Block blockType, boolean copyMetadata, boolean copyNBT)\n    {\n        return new BlockMatcher(blockType);\n    }\n\n    public BlockMatcher copy(Block blockType, boolean copyMetadata, boolean copyNBT, boolean copyTile)\n    {\n        return new BlockMatcher(blockType);\n    }\n\n    public Block", "reference_code": "{\n    private final Block block;\n", "case_type": "block"}
{"generated_code": "    }\n\n    @Override\n    public HttpDriver driver() {\n        return this;\n    }\n\n    @Override\n    public HttpDriver driver(int threads) {\n        return new AsynchronousDriver(threads);\n    }\n\n    @Override\n    public HttpRequest url(String url) {\n        return url(new URL(url));\n    }\n\n    @Override\n    public HttpRequest url(String url, int threads) {\n        return driver(threads).url(url);\n    }\n\n    @Override\n    public HttpRequest url(String url, String user, String password) {\n        return url(url, user, password, null);\n    }\n\n    @Override\n    public HttpRequest url(String url, String user, String password, String proxy) {\n        return url(url, user, password, proxy, null);\n    }\n\n    @Override\n    public HttpRequest url(String url, String user, String password, String proxy, String proxyAuth) {\n        return url(url, user, password, proxy, proxyAuth, null);\n    }\n\n    @Override\n    public Http", "reference_code": "    }\n\n", "case_type": "block"}
{"generated_code": "      return \"DownloadStarted\";\n    }\n  }\n\n  public static class Finished extends DownloadEvent {\n\n    private Finished(EventKey eventKey, URI uri) {\n      super(eventKey, uri);\n    }\n\n    @Override\n    public String getEventName() {\n      return \"DownloadFinished\";\n    }\n\n    /** @deprecated use {@link #Finished(Started)} */\n    @Deprecated\n    @SuppressWarnings(\"deprecation\")\n    public Finished(String uri) {\n      this(EventKey.unique(), URI.create(uri));\n    }\n\n    /** @deprecated use {@link #Finished(Started)} */\n    @Deprecated\n    @SuppressWarnings(\"deprecation\")\n    public Finished(URI uri) {\n      this(EventKey.unique(), uri);\n    }\n\n    /** @deprecated use {@link #Finished(Started)} */\n    @Deprecated\n    @SuppressWarnings(\"deprecation\")\n    public Finished(String uri, int port) {\n      this(EventKey.unique", "reference_code": "      return \"DownloadStarted\";\n    }\n  }\n\n  public static class Finished extends DownloadEvent {\n", "case_type": "block"}
{"generated_code": ")));\n    }\n\n    public void    \"CPE_NAME=\\\"cpe:/o:oracle:linux:6:10:server\\\"\",\n            \"BUG_REPORT_URL=\\\"https://bugzilla.oracle.com/\\\"\",\n            \"HOME_URL\" + \"=\\\"https://linux.oracle.com/\\\"\",\n            \"ANSI_COLOR\" + \"=\\\"0;31\\\"\",\n            \"BUG_REPORT_URL\" + \"=\\\"https://bugzilla.oracle.com/\\\"\",\n            \"CPE_NAME\" + \"=\\\"cpe:/o:oracle:linux:6:10:server\\\"\",\n            \"HOME_URL\" + \"=\\\"https://linux.oracle.com/\\\"\",\n            \"ANSI_COLOR\" + \"=\\\"0;31\\\"\",\n            \"BUG_REPORT_URL\" + \"=\\\"https://bugzilla.oracle.com/\\\"\",\n            \"NAME\" + \"=\\\"oracle linux server\\\"\",\n            \"VERSION\" + \"=\\\"6.10\\\"\",\n            \"VERSION_ID\" + \"=\\\"6.1", "reference_code": "            \"ANSI_COLOR=\\\"0;31\\\"\",\n            \"CPE_NAME=\\\"cpe:/o:oracle:linux:6:10:server\\\"\",\n            \"HOME_URL\" + \"=\\\"https://linux.oracle.com/\\\"\",\n            \"BUG_REPORT_URL=\\\"https://bugzilla.oracle.com/\\\"\",\n", "case_type": "block"}
{"generated_code": "    if (unsafeWasDetected)\n      return OUnsafeBinaryConverter.INSTANCE;\n\n    if (OGlobalConfiguration.getBoolean(\"orientdb.binary.converter.unsafe\", false))\n      return OUnsafeBinaryConverter.INSTANCE;\n\n    // Default\n\n    if (OGlobalConfiguration.getBoolean(\"orientdb.binary.converter.unsafe.fallback\", false))\n      return OUnsafeBinaryConverter.INSTANCE;\n\n    // Fallback\n\n    if (OGlobalConfiguration.getBoolean(\"orientdb.binary.converter.unsafe.fallback.fallback\", false))\n      return OUnsafeBinaryConverter.INSTANCE;\n\n    // Fallback fallback\n\n    if (OGlobalConfiguration.getBoolean(\"orientdb.binary.converter.unsafe.fallback.fallback.fallback\", false))\n      return OUnsafeBinaryConverter.INSTANCE;\n\n    // Fallback fallback fallback\n\n    if (OGlobalConfiguration.getBoolean(\"orientdb.binary.converter.unsafe.fallback.fallback.fallback.fallback\", false))\n      return", "reference_code": "    boolean useUnsafe = OGlobalConfiguration.MEMORY_USE_UNSAFE.getValueAsBoolean();\n\n    if (useUnsafe && unsafeWasDetected)\n      return OUnsafeBinaryConverter.INSTANCE;\n\n", "case_type": "block"}
{"generated_code": "\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T get(Class<T> type) {\n        return (T) field;\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T get(Class<T> type, Object... args) {\n        return (T) field;\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T get(Class<T> type, Object arg1, Object arg2) {\n        return (T) field;\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T get(Class<T> type, Object arg1, Object arg2, Object arg3) {\n        return (T) field;\n    }\n\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public <T> T get(Class<T> type, Object arg1, Object arg2, Object arg3, Object arg4) {\n        return (T) field;", "reference_code": "\n    @Override\n", "case_type": "block"}
{"generated_code": "        return format.format( args );\n    }\n\n    public static String message( String bundleName, Class<?> type, String key, Object... args ) {\n        return message( Locale.getDefault(), bundleName, type, key, args );\n    }\n\n    public static String message( String bundleName, String key, Object... args ) {\n        return message( Locale.getDefault(), bundleName, Messages.class, key, args );\n    }\n\n    public static String message( Class<?> type, String key, Object... args ) {\n        return message( Locale.getDefault(), type.getName(), key, args );\n    }\n\n    public static String message( String key, Object... args ) {\n        return message( Locale.getDefault(), Messages.class, key, args );\n    }\n\n    public static String message( Class<?> type, String key ) {\n        return message( Locale.getDefault(), type.getName(), key );\n    }\n\n    public static String message( String key ) {\n        return message( Locale.getDefault(), Messages.class, key", "reference_code": "        format.setLocale( locale );\n        return format.format( args );\n    }\n", "case_type": "block"}
{"generated_code": "                DataEvent.FACTORY,\n                new DaemonThreadFactory(\"transformer\"),\n                new DaemonThreadFactory(\"collator\"));\n\n        TransformingHandler handler1 = new TransformingHandler(0);\n        TransformingHandler handler2 = new TransformingHandler(1);\n        TransformingHandler handler3 = new TransformingHandler(2);\n\n        // Collate the results.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.\n\n        // Create a collator.", "reference_code": "                DataEvent.FACTORY, 1024, DaemonThreadFactory.INSTANCE);\n\n        TransformingHandler handler1 = new TransformingHandler(0);\n        TransformingHandler handler2 = new TransformingHandler(1);\n        TransformingHandler handler3 = new TransformingHandler(2);\n", "case_type": "block"}
{"generated_code": " new LoadBalancingRuleImpl(inner, manager()));\n            }\n           @Override\n    public String name() {\n        return this.inner().name();\n    }\n\n    @Override\n    public String provisioningState() {\n        return this.inner().provisioningState();\n    }\n\n    @Override\n    public LoadBalancerSku sku() {\n        return this.inner().sku();\n    }\n\n    @Override\n    public List<OutboundRule> outboundRules() {\n        List<OutboundRule> lst = new ArrayList<OutboundRule>();\n        if (this.inner().outboundRules() != null) {\n            for (OutboundRuleInner inner : this.inner().outboundRules()) {\n                lst.add( new OutboundRuleImpl(inner, manager()));\n            }\n        }\n        return lst;\n    }\n\n    @Override\n    public List<Probe> probes() {\n        List<Probe> lst = new ArrayList<Probe>();\n        if (this.inner().probes() != null) {", "reference_code": "    @Override\n    public List<InboundNatPool> inboundNatPools() {\n        return this.inner().inboundNatPools();\n    }\n\n", "case_type": "block"}
{"generated_code": " NIOSequentialFileFactory(journal      }\n\n      consumer.close();\n      session.close();\n      connection.close();\n\n      // wait for the journal to be cleaned up\n      Wait.waitFor(() -> fileFactory.listFiles(\"amq\").size() == 0);\n\n      // wait for the journal to be cleaned up\n      Wait.waitFor(() -> fileFactory.listFiles(\"amq\").size() == 0);\n\n      // wait for the journal to be cleaned up\n      Wait.waitFor(() -> fileFactory.listFiles(\"amq\").size() == 0);\n\n      // wait for the journal to be cleaned up\n      Wait.waitFor(() -> fileFactory.listFiles(\"amq\").size() == 0);\n\n      // wait for the journal to be cleaned up\n      Wait.waitFor(() -> fileFactory.listFiles(\"amq\").size() == 0);\n\n      // wait for the journal to be cleaned up\n      Wait.waitFor(() -> fileFactory.listFiles(\"amq\").size() == 0);\n\n      // wait for the journal to be cleaned up\n      Wait.", "reference_code": "         }\n         session.rollback();\n", "case_type": "block"}
{"generated_code": "    public static ConfirmStatus fromString(String s) {\n        if (s == null) return null;\n        s = s.trim();\n        if (s.length() == 0) return null;\n\n        if (s.length() != 1) return null;\n\n        char c = s.charAt(0);\n        if (c < '1' || c > '5') return null;\n\n        s = Character.toString(c);\n\n        if (s.length() != 1) return null;\n\n        c = s.charAt(0);\n        if (c < '1' || c > '5') return null;\n\n        s = Character.toString(c);\n\n        if (s.length() != 1) return null;\n\n        c = s.charAt(0);\n        if (c < '1' || c > '5') return null;\n\n        s = Character.toString(c);\n\n        if (s.length() != 1) return null;\n\n        c = s.charAt(0);\n        if (c < '1' ||", "reference_code": "    public static ConfirmStatus parse(String s) {\n", "case_type": "block"}
{"generated_code": "            }\n            textView.setCompoundDrawables(drawables[0], drawables[1], drawables[2], drawables[3]);\n        } else if (view instanceof ViewGroup) {\n            int childCount = ((ViewGroup) view).getChildCount();\n            for (int i = 0; i < childCount; i++) {\n                View subView = ((ViewGroup) view).getChildAt(i);\n                applyTo(subView);\n            }\n        } else {\n            if (view.getParent() instanceof ViewGroup) {\n                ViewGroup parent = (ViewGroup) view.getParent();\n                parent.removeView(view);\n                parent.addView(view, 0);\n            }\n            if (view instanceof ViewGroup) {\n                int childCount = ((ViewGroup) view).getChildCount();\n                for (int i = 0; i < childCount; i++) {\n                    View subView = ((ViewGroup) view).getChildAt(i);\n                    applyTo(subView);\n                }\n            } else {\n                applyTo(view);\n            }\n           ", "reference_code": "            }\n\n            textView.setCompoundDrawablesWithIntrinsicBounds(\n                    drawables[0], drawables[1], drawables[2], drawables[3]);\n        } else if (view instanceof ViewGroup) {\n            for (int i = 0; i < ((ViewGroup) view).getChildCount(); i++) {\n", "case_type": "block"}
{"generated_code": "     *\n     * @return provided presets\n     */\n    public Map<String, Object> getPresets();\n\n    /**\n     * Returns the supported types which can be received by the given ScriptExtensionProvider\n     *\n     * @return provided types\n     */\n    public Collection<String> getSupportedTypes();\n\n    /**\n     * Returns the supported types which can be received by the given ScriptExtensionProvider\n     *\n     * @return provided types\n     */\n    public Collection<String> getSupportedTypes(String scriptIdentifier);\n\n    /**\n     * Returns the supported types which can be received by the given ScriptExtensionProvider\n     *\n     * @return provided types\n     */\n    public Collection<String> getSupportedTypes(String scriptIdentifier, String preset);\n\n    /**\n     * Returns the supported types which can be received by the given ScriptExtensionProvider\n     *\n     * @return provided types\n     */\n    public Collection<String> getSupportedTypes(String scriptIdentifier, String preset, String context);\n\n    /**\n     * Returns the supported types which can be received by the given ScriptExtensionProvider\n    ", "reference_code": "     *\n     * @return provided presets\n     */\n    public Collection<String> getPresets();\n", "case_type": "block"}
{"generated_code": "     */\n    public Mrcodeorder getMrcodeorderByOrderNum(String orderNum) throws Exception;\n\n    public List<Grouppurchasevoucher> getGrouppurchasevoucherByMrcodeorder(Mrcodeorder mrcodeorder);\n\n    public List<Customer> getCustomerByMrcodeorder(Mrcodeorder mrcodeorder);\n\n    public List<Customer> getCustomerByMrcodeorderAndGrouppurchasevoucher(Mrcodeorder mrcodeorder, Grouppurchasevoucher grouppurchasevoucher);\n\n    public List<Customer> getCustomerByMrcodeorderAndGrouppurchasevoucherAndCustomer(Mrcodeorder mrcodeorder, Grouppurchasevoucher grouppurchasevoucher, Customer customer);\n\n    public List<Customer> getCustomerByMrcodeorderAndGrouppurchasevoucherAndCustomerAndMrcodeorder(Mrcodeorder mrcodeorder, Grouppurchasevoucher grouppurchasevoucher, Customer customer, Mrcodeorder mrcodeorder2);\n\n    public List<Customer> getCustomerByMrcodeorderAndGrouppurchasevoucherAndCustomerAndMr", "reference_code": "     */\n    public Mrcodeorder getWithContactorsByOrderNum(String orderNum) throws Exception;\n", "case_type": "block"}
{"generated_code": "Fingering();\n      }\n    public String getDescription() {\n    return \"A chord step.\";\n  }\n  public Object getScoreObject() { return chord; }\n\n  /** Represents a tie sign in the braille chord.\n   */\n  public static class ChordTieSign extends BrailleList {\n    Ch    public static final Comparator<RhythmicElement> DEFAULT_COMPARATOR =\n      new Comparator<RhythmicElement>() {\n        public int compare(final RhythmicElement o1, final RhythmicElement o2) {\n          return ((Note)o1).compareTo(((Note)o2));\n        }\n      };\n\n  private static final long serialVersionUID = 1L;\n\n  /** Represents a chord in the braille score.\n   */\n  public static class BrailleChord extends BrailleList implements Slur {\n    private static final long serialVersionUID = 1L;\n\n  /** Represents a chord in the braille score.\n   */\n  public static class BrailleChord extends BrailleList implements Slur {", "reference_code": "import freedots.music.VoiceChord;\nimport freedots.musicxml.Note;\n\npublic class BrailleChord extends BrailleList {\n", "case_type": "block"}
{"generated_code": "@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic final class ShardingOrder {\n\n    /**\n     * Sharding order.\n     */\n    public static final int ORDER = 0;\n\n    /**\n     * Sharding order.\n     */\n    public static final int ORDER_1 = 1;\n\n    /**\n     * Sharding order.\n     */\n    public static final int ORDER_2 = 2;\n\n    /**\n     * Sharding order.\n     */\n    public static final int ORDER_3 = 3;\n\n    /**\n     * Sharding order.\n     */\n    public static final int ORDER_4 = 4;\n\n    /**\n     * Sharding order.\n     */\n    public static final int ORDER_5 = 5;\n\n    /**\n     * Sharding order.\n     */\n    public static final int ORDER_6 = 6;\n\n    /**\n     * Sharding order.\n     */\n    public static final int ORDER_7 = 7;\n\n    /**\n     * Sharding order.\n     */\n    public static final int ORDER_8 = 8;\n\n", "reference_code": "@NoArgsConstructor(access = AccessLevel.PRIVATE)\npublic final class ShardingOrder {\n", "case_type": "block"}
{"generated_code": "\n  public boolean isUpvar() {\n    Expect.state(mScope != Scope.UNRESOLVED, \"Unresolved name.\");\n\n    if (mScope == Scope.GLOBAL) {\n      return false;\n    }\n\n    if (mScope == Scope.LOCAL) {\n      return false;\n    }\n\n    if (mScope == Scope.UPVAR) {\n      return true;\n    }\n\n    Expect.unreachable();\n    return false;\n  }\n\n  public boolean isUpvarGlobal() {\n    Expect.state(mScope != Scope.UNRESOLVED, \"Unresolved name.\");\n\n    if (mScope == Scope.GLOBAL) {\n      return true;\n    }\n\n    if (mScope == Scope.LOCAL) {\n      return false;\n    }\n\n    if (mScope == Scope.UPVAR) {\n      return false;\n    }\n\n    Expect.unreachable();\n    return false;\n  }\n\n  public boolean isUpvarUpvar", "reference_code": "\n  public boolean isUpvar() {\n    Expect.state(mScope != Scope.UNRESOLVED, \"Unresolved name.\");\n\n", "case_type": "block"}
{"generated_code": "orst    private String lastloginip;\n\n    private String lastlogintime;\n\n    private Integer teacherorstu;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void    private String lastloginip;\n\n    private String lastlogintime;\n\n    private Integer teacherorstu;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;    private String lastloginip;\n\n    private String lastlogintime;\n\n    private Integer teacherorstu;\n\n    public Integer getId() {\n        return id;\n    }\n\n    public void setId(Integer id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;", "reference_code": "\n    private String lastloginip;\n\n", "case_type": "block"}
{"generated_code": "                                              InputStream in, String encoding,\n                                              NodeFilter[] filters) {\n    filters = new NodeFilter[] {\n        // from toc - ad panel\n        HtmlNodeFilters.tagWithAttributeRegex(\"div\", \"class\", \"adPanel\"),\n        // from toc - ad panel has link to other issue \n        // http://www.magonlinelibrary.com/toc/bjom/21/10\n        HtmlNodeFilters.tagWithAttributeRegex(\"div\", \"class\", \"adPanel\"),\n        // from toc - ad panel has link to other issue \n        // http://www.magonlinelibrary.com/toc/bjom/21/10\n        HtmlNodeFilters.tagWithAttributeRegex(\"div\", \"class\", \"adPanel\"),\n        // from toc - ad panel has link to other issue \n        // http://www.magonlinelibrary.com/toc/bjom/21/10\n        HtmlNodeFilters.tagWithAttributeRegex(\"div\", \"class\", \"adPanel\"),\n       ", "reference_code": "      InputStream in, String encoding) {\n\n    NodeFilter[] filters = new NodeFilter[] {\n", "case_type": "block"}
{"generated_code": " contain strings\n     * @since 1.4\n     */\n    public SuffixFileFilter(List<String> suffixes, IOCase caseSensitivity) {\n        this(suffixes.toArray(new String[suffixes.size()]), caseSensitivity);\n    }\n\n    @Override\n    public boolean accept(File file) {\n        return caseSensitivity.checkMatch(file.getName(), suffixes);\n    }\n\n    @Override\n    public String toString() {        this.suffixes = new String[suffixes.size()];\n        suffixes.toArray(this.suffixes);\n        this.caseSensitivity = IOCase.SENSITIVE;\n    }\n\n    /**\n     * Constructs a new Suffix file filter for a list of suffixes\n     * specifying case-sensitivity.\n     * \n     * @param suffixes  the suffixes to allow, must not be null\n     * @param caseSensitivity  how to handle case sensitivity, null means case-sensitive\n     * @throws IllegalArgumentException if the suffix list is", "reference_code": "     * @throws IllegalArgumentException if the suffix list is null\n     * @throws ClassCastException if the list does not contain Strings\n     */\n", "case_type": "block"}
{"generated_code": "    protected final Long offset;\n    protected final Long limit;\n\n    public ListQuery(Long offset, Long limit, Order order) {\n        this.offset = offset;\n        this.limit = limit;\n        this.order = order;\n    }\n\n    public ListQuery(Long offset, Long limit, Order order, String... columns) {\n        super(columns);\n        this.offset = offset;\n        this.limit = limit;\n        this.order = order;\n    }\n\n    public ListQuery(Long offset, Long limit, Order order, String... columns, String... joins) {\n        super(columns, joins);\n        this.offset = offset;\n        this.limit = limit;\n        this.order = order;\n    }\n\n    public ListQuery(Long offset, Long limit, Order order, String... columns, String... joins, String... where) {\n        super(columns, joins, where);\n        this.offset = offset;\n        this.limit = limit;\n        this.order = order;\n    }\n\n    public ListQuery(Long offset, Long limit, Order order, String... columns", "reference_code": "    protected final Long offset, limit; \n\n    public ListQuery(Order order, Long offset, Long limit) {\n        this.offset = offset;\n", "case_type": "block"}
{"generated_code": "\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\n\nimport javax.swing.text.html.parser.TagElement;\n\n@SuppressWarnings(\"unused\")\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Dep", "reference_code": "\nimport java.util.InputMismatchException;\nimport java.util.Scanner;\n\n", "case_type": "block"}
{"generated_code": "\n    // private Hashtable<String, String> body;\n    // private String type;\n\n    public OrmMethod(String name) {\n        this.annotList = new ArrayList<String>();\n        this.parameterList = new ArrayList<String>();\n        this.exceptionList = new ArrayList<String>();\n        // this.body = new Hashtable<String, String>();\n        this.ormOprList = new ArrayList<OrmOpr>();\n        this.name = name;\n    }\n\n    /**\n     * \n     */\n    private static final long serialVersionUID = 1L;\n\n    /**\n     * \n     */\n\n    /**\n     * \n     */\n\n    /**\n     * \n     */\n\n    /**\n     * \n     */\n\n    /**\n     * \n     */\n\n    /**\n     * \n     */\n\n    /**\n     * \n     */\n\n    /**\n     * \n     */\n\n    /**\n     * \n     */\n\n    /**\n     * \n     */\n\n   ", "reference_code": "\n    // Use Hashtable object to hold the parts of method.\n    // private Hashtable<String, String> body;\n\n", "case_type": "block"}
{"generated_code": "        return session.isInvalidated();\n    }\n\n    public Session getSession(boolean create)\n    {\n        // If the session is invalidated, then create a new one.\n\n        // TAP5-1489 - Re-storage of session attributes at end of request should be configurable\n        if (session == null)\n        {\n            session = sessionFactory.getSession(create);\n        }\n\n        return session;\n    }\n\n    public Session getSession()\n    {\n        // If the session is invalidated, then create a new one.\n\n        // TAP5-1489 - Re-storage of session attributes at end of request should be configurable\n        if (session == null)\n        {\n            session = sessionFactory.getSession(true);\n        }\n\n        return session;\n    }\n\n    public Session getSession(boolean create, boolean createIfNotExists)\n    {\n        // If the session is invalidated, then create a new one.\n\n        // TAP5-1489 - Re-storage of session attributes at end of request should be configurable\n", "reference_code": "        return session != null && session.isInvalidated();\n    }\n\n    public Session getSession(boolean create)\n    {\n", "case_type": "block"}
{"generated_code": "        ap.addText(new ObjectDoesRender());\n        System.out.println(ap.render());\n        // end::example[]\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.out.println(ap.render());\n\n        System.", "reference_code": "        ap.addText(new ObjectDoesRender());\n        System.out.println(ap.render());\n        // end::example[]\n", "case_type": "block"}
{"generated_code": "        {\n            component.setBackground(Color.yellow);\n            setToolTip(row, column, model, component);\n            return component;\n        }\n        if (isSelected)\n        {\n            component.setBackground(Color.lightGray);\n            setToolTip(row, column, model, component);\n            return component;\n        }\n        if (hasFocus)\n        {\n            component.setBackground(Color.lightGray);\n            setToolTip(row, column, model, component);\n            return component;\n        }\n        if (model.isCellEdited(row, column))\n        {\n            component.setBackground(Color.yellow);\n            setToolTip(row, column, model, component);\n            return component;\n        }\n        if (model.isCellAdded(row, column))\n        {\n            component.setBackground(Color.lightGray);\n            setToolTip(row, column, model, component);\n            return component;\n        }\n        if (model.isCellRemoved(row, column))\n        {\n            component.setBackground(Color.light", "reference_code": "        {\n            component.setBackground(Color.YELLOW);\n            component.setFont(component.getFont().deriveFont(Font.BOLD));\n        } else {\n            component.setBackground(null);\n", "case_type": "block"}
{"generated_code": "import io.mifos.core.test.validation.ValidationTestCase;\nimport org.apache.commons.lang3.RandomStringUtils;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\n\nimport java.math.BigDecimal;\nimport java.util.Collection;\n\n@RunWith(Parameterized.class)\npublic class CaseTestSuite {\n\n  public CaseTestSuite(ValidationTestCase<Case> testCase) {\n    super(testCase);\n  }\n\n}\n\n@RunWith(Parameterized.class)\nclass CaseTest extends ValidationTest<Case> {\n\n  public CaseTest(ValidationTestCase<Case> testCase) {\n    super(testCase);\n  }\n\n  @Override\n  protected Case createValidTestSubject() {\n    return Fixture.getTestCase(\"blah\");\n  }\n\n  @Parameterized.Parameters\n  public static Collection testCases() {\n    return new CaseTestSuite(new ValidationTestCase<Case>(\"validCase\")\n            .adjustment(x -> {})\n            .valid", "reference_code": "import io.mifos.core.test.domain.ValidationTestCase;\nimport org.apache.commons.lang.RandomStringUtils;\nimport org.junit.runners.Parameterized;\n", "case_type": "block"}
{"generated_code": "\n@Component\npublic class SpringApplicationContext implements ApplicationContextAware {\n\n    private static ApplicationContext applicationContext;\n\n    public SpringApplicationContext(ApplicationContext ctx) {\n        applicationContext = ctx;\n    }\n\n    public SpringApplicationContext(String[] args) {\n    }\n\n    public SpringApplicationContext(String[] args, Class<?>[] classes) {\n    }\n\n    public SpringApplicationContext(String[] args, Class<?>[] classes, Object[] objects) {\n    }\n\n    public SpringApplicationContext(String[] args, Class<?>[] classes, Object[] objects, String[] strings) {\n    }\n\n    public SpringApplicationContext(String[] args, Class<?>[] classes, Object[] objects, String[] strings,\n            Map<String, Object> map) {\n    }\n\n    public SpringApplicationContext(String[] args, Class<?>[] classes, Object[] objects, String[] strings,\n            Map<String, Object> map, Object object) {\n    }\n\n    public SpringApplicationContext(String[] args, Class<?>[] classes, Object[] objects, String[] strings", "reference_code": "\n@Component\npublic class SpringApplicationContext implements ApplicationContextAware {\n\n    private static ApplicationContext applicationContext;\n", "case_type": "block"}
{"generated_code": "        NodeCreateRequest request = new NodeCreateRequest();\n        request.setName(RandomStringUtils.randomAlphabetic(5));\n        request.setDescription(RandomStringUtils.randomAlphabetic(5));\n        request.setTitle(RandomStringUtils.randomAlphabetic(5));\n        request.setType(\"page\");\n        request.setLanguage(\"en\");\n        request.setParentNodeUuid(parent.getUuid());\n        request.getFields().put(\"slug\", new StringFieldImpl().setString(RandomStringUtils.randomAlphabetic(5)));\n        client().createNode(node.getUuid(), PROJECT_NAME, request, new VersioningParametersImpl().setBranch(branch)).blockingAwait();\n        publishNodeInBranch(node, branch);\n    }\n\n    private void createContentInBranch(NodeResponse node, NodeResponse parent, String branch) {\n        NodeCreateRequest request = new NodeCreateRequest();\n        request.setName(RandomStringUtils.randomAlphabetic(5));\n        request.setDescription(RandomStringUtils.randomAlphabetic", "reference_code": "        NodeCreateRequest request = new NodeCreateRequest();\n", "case_type": "block"}
{"generated_code": "public class AttributeValueListMarshaller {\n\n    private static final MarshallingInfo<List> INTEGERVALUES_BINDING = MarshallingInfo.builder(MarshallingType.LIST).marshallLocation(MarshallLocation.PAYLOAD)\n            .marshallLocationName(\"integerValues\").build();\n    private static final MarshallingInfo<List> STRINGVALUES_BINDING = MarshallingInfo.builder(MarshallingType.LIST).marshallLocation(MarshallLocation.PAYLOAD)\n            .marshallLocationName(\"stringValues\").build();\n\n    private static final MarshallingInfo<List> INTEGERVALUES_BINDING = MarshallingInfo.builder(MarshallingType.LIST).marshallLocation(MarshallLocation.PAYLOAD)\n            .marshallLocationName(\"integerValues\").build();\n    private static final MarshallingInfo<List> STRINGVALUES_BINDING = MarshallingInfo.builder(MarshallingType.LIST).marshallLocation(MarshallLocation.PAYLOAD)\n            .marshallLocationName(\"stringValues\").build();\n\n    private static final MarshallingInfo<", "reference_code": "public class AttributeValueListMarshaller {\n\n    private static final MarshallingInfo<List> INTEGERVALUES_BINDING = MarshallingInfo.builder(MarshallingType.LIST).marshallLocation(MarshallLocation.PAYLOAD)\n", "case_type": "block"}
{"generated_code": "\n                SLM_HISTORY_DATA_STREAM, item), exception);\n        }\n    }\n}\n\nclass SnapshotHistoryItem {\n    private final        if (slmHistoryEnabled == false) {\n            logger.trace(\"skipping snapshot history item [{}] as SLM history is disabled\", item);\n            return;\n        }\n        if (item.getDataStream() == null) {\n            logger.trace(\"skipping snapshot history item [{}] as data stream is null\", item);\n            return;\n        }\n        if (item.getDataStream().equals(SLM_HISTORY_DATA_STREAM) == false) {\n            logger.trace(\"skipping snapshot history item [{}] as data stream [{}] is not the expected value [{}]\",\n                item, item.getDataStream(), SLM_HISTORY_DATA_STREAM);\n            return;\n        }\n        if (item.getTemplateName() == null) {\n            logger.trace(\"skipping snapshot history item [{}] as template name is null\", item);\n            return;\n        }\n       ", "reference_code": "        if (slmHistoryEnabled == false) {\n            logger.trace(\"not recording snapshot history item because [{}] is [false]: [{}]\",\n                SLM_HISTORY_INDEX_ENABLED_SETTING.getKey(), item);\n", "case_type": "block"}
{"generated_code": "    extends\n    // @@protoc_insertion_point(interface_extends:google.cloud.dialogflow.v2.EntityTypeBatch)\n    com.google.protobuf.MessageOrBuilder {\n\n  /**\n   *\n   *\n   * <pre>\n   * A collection of entity types.\n   * </pre>\n   *\n   * <code>repeated .google.cloud.dialogflow.v2.EntityType entity_types = 1;</code>\n   */\n  java.util.List<com.google.cloud.dialogflow.v2.EntityType> getEntityTypes();\n  /**\n   *\n   *\n   * <pre>\n   * A collection of entity types.\n   * </pre>\n   *\n   * <code>repeated .google.cloud.dialogflow.v2.EntityType entity_types = 1;</code>\n   */\n  com.google.cloud.dialogflow.v2.EntityType getEntityTypes(int index);\n  /**\n   *\n   *\n   * <pre>\n   * A collection of", "reference_code": "    extends\n    // @@protoc_insertion_point(interface_extends:google.cloud.dialogflow.v2.EntityTypeBatch)\n    com.google.protobuf.MessageOrBuilder {\n\n  /**\n", "case_type": "block"}
{"generated_code": ".asyncClose(this, ctx);\n                   }\n    }\n\n    @Override\n    public void addCallback(LedgerHandle lh, byte[] entry, int offset, int size, int crc) {\n        LOG.info(\"Adding entry to ledger\");\n        sync.counter++;\n        sync.notify();\n    }\n\n    @Override\n    public void readCallback(LedgerHandle lh, byte[] entry, int offset, int size, int crc) {\n    }\n\n    @Override\n    public void createCallback(LedgerHandle lh) {\n    }\n\n    @Override\n    public void closeCallback(LedgerHandle lh) {\n    }\n\n    @Override\n    public void openCallback(LedgerHandle lh) {\n    }\n\n    @Before\n    public void setUp() throws Exception {\n        rng = new Random();\n        entries = new ArrayList<byte[]>();\n        entriesSize = new ArrayList<Integer>();\n        sync = new SyncObj();\n        syncObjs = new HashSet<Object>();\n    }\n\n", "reference_code": "    }\n", "case_type": "block"}
{"generated_code": "    this.end = end;\n  }\n\n  public DateRange(String start, String end) {\n    this.start = Integer.parseInt(start);\n    this.end = Integer.parseInt(end);\n  }\n\n  public DateRange(String start, String end, String format) {\n    this.start = Integer.parseInt(start);\n    this.end = Integer.parseInt(end);\n  }\n\n  public DateRange(Integer start, String end, String format) {\n    this.start = start;\n    this.end = Integer.parseInt(end);\n  }\n\n  public DateRange(String start, Integer end, String format) {\n    this.start = Integer.parseInt(start);\n    this.end = end;\n  }\n\n  public DateRange(Integer start, Integer end, String format) {\n    this.start = start;\n    this.end = end;\n  }\n\n  public DateRange(String start, String end, String format, boolean isStart) {\n    this.start = Integer.parseInt(start);\n    this.end", "reference_code": "    this.end = end;\n", "case_type": "block"}
{"generated_code": "        for (int song : songs) {\n            if (song < 0 || song > 1000000000) {\n                System.out.println(\"Invalid input\");\n\n                // return 0;\n            }\n\n            if (song % 60 == 0) {\n                System.out.println(\"Invalid input\");\n\n                // return 0;\n            }\n\n            if (song % 60 == 30) {\n                System.out.println(\"Invalid input\");\n\n                // return 0;\n            }\n\n            if (song % 60 == 0 && song % 30 == 0) {\n                System.out.println(\"Invalid input\");\n\n                // return 0;\n            }\n\n            if (song % 60 == 0 && song % 30 != 0) {\n                System.out.println(\"Invalid input\");\n\n                // return 0;\n            }\n\n            if (song % 30 == 0 && song % 60 != 0) {\n                System.out.println(\"Invalid input\");\n", "reference_code": "        for (int i = 0; i < songs.size(); i++) {\n            int song = songs.get(i);\n            if (song < 1 || song > 1000) {\n", "case_type": "block"}
{"generated_code": "    public User getUser();\n\n    public void setUser(User user);\n\n    public User getUser();\n\n    public void setUser(User user);\n\n    public User getUser();\n\n    public void setUser(User user);\n\n    public User getUser();\n\n    public void setUser(User user);\n\n    public User getUser();\n\n    public void setUser(User user);\n\n    public User getUser();\n\n    public void setUser(User user);\n\n    public User getUser();\n\n    public void setUser(User user);\n\n    public User getUser();\n\n    public void setUser(User user);\n\n    public User getUser();\n\n    public void setUser(User user);\n\n    public User getUser();\n\n    public void setUser(User user);\n\n    public User getUser();\n\n    public void setUser(User user);\n\n    public User getUser();\n\n    public void setUser(User user);\n\n    public User getUser();\n\n    public void setUser(User user);\n\n    public User getUser();\n\n   ", "reference_code": "    public User getUser();\n", "case_type": "block"}
{"generated_code": "   * Sets the collection period.\n   *\n   * @param collectionPeriod the new collection period\n   */\n  public void setCollectionPeriod(String collectionPeriod) {\n    this.collectionPeriod = Long.parseLong(collectionPeriod);\n  }\n\n  /**\n   * Sets the collection period.\n   *\n   * @param collectionPeriod the new collection period\n   */\n  public void setCollectionPeriod(String collectionPeriod, int period) {\n    this.collectionPeriod = Long.parseLong(collectionPeriod) * period;\n  }\n\n  /**\n   * Sets the collection period.\n   *\n   * @param collectionPeriod the new collection period\n   */\n  public void setCollectionPeriod(String collectionPeriod, int period, int periodUnit) {\n    this.collectionPeriod = Long.parseLong(collectionPeriod) * periodUnit;\n  }\n\n  /**\n   * Sets the collection period.\n   *\n   * @param collectionPeriod the new collection period\n   */\n  public void setCollectionPeriod(String collectionPeriod, int period, int periodUnit, int periodUnitFactor) {\n    this.collectionPeriod = Long.", "reference_code": "   * Sets the collection period.\n   *\n", "case_type": "block"}
{"generated_code": " {\n            delete(file);\n        }\n    }\n\n    public static void delete(File file) throws IOException\n    {\n        if (file.isDirectory())\n        {\n            delete(file.listFiles());\n            file.delete();\n        }\n        else\n        {\n            file.delete();\n        }\n    }\n\n    public static void delete(String[] files) throws IOException\n    {\n        for ( String file : files )\n        {\n            delete(file);\n        }\n    }\n\n    public static void delete(String file) throws IOException\n    {\n        File f = new File(file);\n        delete(f);\n    }\n\n    public static String getFileSize(File file)\n    {\n        return df_.format(file.length() / tb_);\n    }\n\n    public static String getFileSize(String file) throws IOException\n    {\n        File f = new File(file);\n        return getFileSize(f);\n    }\n\n    public static String getFileSize(File file, boolean useKb)\n    {\n        if (useKb)", "reference_code": "     * @param path the path\n     * @return total space used.\n", "case_type": "block"}
{"generated_code": "  }\n\n  public BitSet applyFilter(RawBlockletColumnChunks rawBlockletColumnChunks)\n      throws FilterUnsupportedException, IOException {\n    // TODO Auto-generated method stub\n    // return all true\n    // TODO: need to check if we need to use this\n    // return new BitSet(rawBlockletColumnChunks.getDataBlock().getPageRowCount(0));\n\n    // return all true\n    // TODO: need to check if we need to use this\n    // return new BitSet(rawBlockletColumnChunks.getDataBlock().getPageRowCount(0));\n\n    // return all true\n    // TODO: need to check if we need to use this\n    // return new BitSet(rawBlockletColumnChunks.getDataBlock().getPageRowCount(0));\n\n    // return all true\n    // TODO: need to check if we need to use this\n    // return new BitSet(rawBlockletColumnChunks.getDataBlock().getPageRowCount(0));\n\n    // return all true\n    // TODO: need to check if we need to use this\n    // return new", "reference_code": "  }\n\n  @Override\n  public BitSet prunePages(RawBlockletColumnChunks rawBlockletColumnChunks)\n      throws FilterUnsupportedException, IOException {\n", "case_type": "block"}
{"generated_code": "    CLASSPATH(\"classpath:\");\n\n    private String value;\n\n    public void setValue(String value) {\n        this.value = value;\n    }\n\n    public void setValue(int value) {\n        this.value = String.valueOf(value);\n    }\n\n    public void setValue(double value) {\n        this.value = String.valueOf(value);\n    }\n\n    public void setValue(boolean value) {\n        this.value = String.valueOf(value);\n    }\n\n    public void setValue(Object value) {\n        this.value = String.valueOf(value);\n    }\n\n    public void setValue(Enum<?> value) {\n        this.value = String.valueOf(value);\n    }\n\n    public void setValue(Enum<?>[] value) {\n        this.value = String.valueOf(value);\n    }\n\n    public void setValue(Enum<?>[] value, int index) {\n        this.value = String.valueOf(value[index]);\n    }\n\n    public void set", "reference_code": "    CLASSPATH(\"classpath:\"),\n    PROJECT(\"project:\");\n    private String value;\n", "case_type": "block"}
{"generated_code": "  public void should_fail_if_offset_is_null() {\n    // THEN\n    // WHEN\n    AssertionError error = expectAssertionError(() -> assertThat(now()).isCloseToUtcNow(null));\n    // THEN\n    assertThat(error).hasMessage(actualIsNull());\n  }\n\n  @Test\n  public void should_fail_if_offset_is_null_and_actual_is_not() {\n    // THEN\n    // WHEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    // THEN\n    //", "reference_code": "  public void should_fail_if_offset_parameter_is_null() {\n", "case_type": "block"}
{"generated_code": "                new CheckNameAvailabilityParameters()\n                    .withName(\"contoso\")\n                    .withType(ConfigurationResourceType.MICROSOFT_APP_CONFIGURATION_CONFIGURATION_STORES),\n                Context.NONE);\n    }\n\n    /*\n     * x-ms-original-file: specification/appconfiguration/resource-manager/Microsoft.AppConfiguration/preview/2021-10-01-preview/examples/RegionalCheckNameAvailable_WithTags.json\n     */\n    /**\n     * Sample code: ConfigurationStores_CheckNameAvailable_WithTags.\n     *\n     * @param manager Entry point to AppConfigurationManager.\n     */\n    public static void configurationStoresCheckNameAvailableWithTags(\n        com.azure.resourcemanager.appconfiguration.AppConfigurationManager manager) {\n        manager\n            .operations()\n            .regionalCheckNameAvailabilityWithResponse(\n                \"westus\",\n                new CheckNameAvailabilityParameters()\n                    .withName(\"contoso\")\n                    .withTags(new java.util.Map<String, String>())\n", "reference_code": "                new CheckNameAvailabilityParameters()\n                    .withName(\"contoso\")\n", "case_type": "block"}
{"generated_code": "inheritDoc} */\n    @Override public void sendOrdered(@Nullable Object topic, Collection<?> msgs, long timeout) {\n        A.ensure(!F.isEmpty(msgs), \"msgs cannot be null or empty\");\n\n        guard    }\n        catch (IgniteCheckedException e) {\n            throw U.convertException(e);\n        }\n        finally {\n            unguard();\n        }\n    }\n\n    /** {@inheritDoc} */\n    @Override public void sendOrdered(@Nullable Object topic, Collection<?> msgs, long timeout, IgniteBiPredicate<? super Object, ? super Object> filter) {\n        A.ensure(!F.isEmpty(msgs), \"msgs cannot be null or empty\");\n\n        guard();\n\n        try {\n            Collection<ClusterNode> snapshot = prj.nodes();\n\n            if (snapshot.isEmpty())\n                throw U.emptyTopologyException();\n\n            for (Object msg : msgs) {\n                A.notNull(msg, \"msg\");\n\n                ctx.io().sendUserMessage(snapshot, msg, topic, false", "reference_code": "            ctx.io().sendUserMessage(snapshot, msg, topic, true, timeout, false);\n", "case_type": "block"}
{"generated_code": "            tabs();\n\n            if (node2.getFirstChild() == null) {\n                System.out.print(node2.getText());\n            }\n            else if (node2.getFirstChild().getFirstChild() == null) {\n                System.out.print(node2.getText() + \" \" + node2.getFirstChild().getText());\n            }\n            else if (node2.getFirstChild().getFirstChild().getFirstChild() == null) {\n                System.out.print(node2.getText() + \" \" + node2.getFirstChild().getText() + \" \" + node2.getFirstChild().getFirstChild().getText());\n            }\n            else if (node2.getFirstChild().getFirstChild().getFirstChild().getFirstChild() == null) {\n                System.out.print(node2.getText() + \" \" + node2.getFirstChild().getText() + \" \" + node2.getFirstChild().getFirstChild().getText() + \" \" + node2.getFirstChild().getFirstChild().getFirstChild().getText());\n            }\n            else {\n                System", "reference_code": "            if (!flatten || node2 == node) {\n                tabs();\n            }\n            if (node2.getText() == null) {\n                System.out.print(\"nil\");\n            }\n", "case_type": "block"}
{"generated_code": "            throw new ClassCastException(activity.toString() + \" must implement OnTimeSetListener\");\n        }\n    }\n\n    @Override\n    public void onDetach() {\n        super.onDetach();\n        mActivity = null;\n        mListener = null;\n    }\n\n    @Override\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n\n    /**\n     * Use this factory method to create a new instance of\n     * this fragment using the provided parameters.\n     *\n     * @return A new instance of fragment TimePickerFragment.\n     */\n    public static TimePickerFragment newInstance(Long defaultTime) {\n        TimePickerFragment fragment = new TimePickerFragment();\n        Bundle args = new Bundle();\n        args.putLong(DEFAULT_TIME, defaultTime);\n        fragment.setArguments(args);\n        return fragment;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public void onResume() {\n        super.onResume();\n    }\n", "reference_code": "            throw new ClassCastException(activity.toString()\n                    + \" must implement OnTimeSetListener\");\n        }\n    }\n\n", "case_type": "block"}
{"generated_code": "public @interface Loggable {\n    // methode qui indique un besoin de log automatique\n    boolean value() default true;\n    // methode qui indique un besoin de log automatique\n    String value2() default \"default\";\n    // methode qui indique un besoin de log automatique\n    String value3() default \"default\";\n    // methode qui indique un besoin de log automatique\n    String value4() default \"default\";\n    // methode qui indique un besoin de log automatique\n    String value5() default \"default\";\n    // methode qui indique un besoin de log automatique\n    String value6() default \"default\";\n    // methode qui indique un besoin de log automatique\n    String value7() default \"default\";\n    // methode qui indique un besoin de log automatique\n    String value8() default \"default\";\n    // methode qui indique un besoin de log automatique\n    String value9() default \"default\";\n    // methode qui indique un besoin de log automatique\n", "reference_code": "public @interface Loggable {\n", "case_type": "block"}
{"generated_code": "      case ID_MODE:\n        return doSetMode(message.getEnum(0, OperatingMode.class));\n      default:\n        break;\n      }\n      return null;\n    }\n\n    @Override\n    default IMessage networkExec(int id, @Nonnull GuiPacket message, @Nonnull IMessage response) {\n      switch (id) {\n      case ID_MODE:\n        response.set(0, doSetMode(message.getEnum(0, OperatingMode.class)));\n        return response;\n      default:\n        break;\n      }\n      return null;\n    }\n\n    @Override\n    default IMessage networkExec(int id, @Nonnull GuiPacket message) {\n      switch (id) {\n      case ID_MODE:\n        return doSetMode(message.getEnum(0, OperatingMode.class));\n      default:\n        break;\n      }\n      return null;\n    }\n\n    @Override\n    default IMessage networkExec(int id, @Nonnull GuiPacket message, @Nonnull IMessage response) {\n      switch", "reference_code": "      case ID_MODE:\n", "case_type": "block"}
{"generated_code": ".fail(\"No Region Servers found\");\n      return;\n    }\n\n    BasicCmdArgs cmdArgs = new BasicCmdArgs(roleIds, \"HBase Region Server\", \"HBase Region Server\");\n    String[] args = new String[1];\n    args[0] = \"decommission\";\n    cmdArgs.setArgs(args);\n    this.serviceHandler.decommission(cmdArgs);\n  }\n\n  public void setServiceHandler(ServiceHandlerRegistry registry)\n  {\n    this.serviceHandler = (HbaseServiceHandler)registry.getServiceHandler(HbaseServiceHandler.SERVICE_NAME);\n  }\n\n  public void validate(SvcCmdArgs arg) throws CommandException\n  {\n    if (arg.getArgs().size() != 0) {\n      throw new CommandException(I18n.t(\"message.command.service.hbase.hbaseWrappedDecommission.invalidArgs\"));\n    }\n  }\n\n  @JsonAutoDetect(fieldVisibility = Visibility.ANY)\n  public static class HbaseWrappedDecommissionCommandJson\n  {", "reference_code": "      }\n      parent.setInternalStateToJson(state);\n    } else if (!balancerCmd.isActive())\n    {\n      if (!balancerCmd.isSuccess()) {\n", "case_type": "block"}
{"generated_code": "     *\n     * @return the type of the parameter\n     */\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n    @Deprecated\n", "reference_code": "     *\n     * @return parameter type (default is PATH)\n     */\n", "case_type": "block"}
{"generated_code": "stacle) mObjects.get(i));\n        }\n    }\n}\n\nclass Scaling {\n    public int gameHeight;\n    public int gameWidth;\n}\n\nclass Obstacle extends BaseObject {\n    public        mScaling.gameHeight\n                        ), \"Obstacle\" + mObstacleCounter);\n                        mObstacleCounter++;\n\n                        add(obstacle2);\n                    } else if (rand1 == 1) {\n                        Obstacle obstacle2 = new Obstacle(new RectF(\n                                600,\n                                mScaling.gameHeight + 200,\n                                800,\n                                mScaling.gameHeight\n                        ), \"Obstacle\" + mObstacleCounter);\n                        mObstacleCounter++;\n\n                        add(obstacle2);\n                    } else if (rand1 == 3) {\n                        Obstacle obstacle2 = new Obstacle(new RectF(\n                                400,\n                                mScaling.gameHeight + 200,\n                                600,\n                                mScaling.gameHeight", "reference_code": "                                mScaling.gameHeight\n                        ), \"Obstacle\" + mObstacleCounter);\n", "case_type": "block"}
{"generated_code": "            // application, but it's the only way to ensure that we don't lock controls\n            // which are not affected by the change.\n        }\n        catch ( Exception e )\n        {\n            // ignore\n        }\n    }\n\n    /* ------------------------------------------------------------------ */\n    public void handleRowSetChanged( XRowSetEvent aEvent )\n    {\n        updateLocks();\n    }\n\n    /* ------------------------------------------------------------------ */\n    public void handleRowSetInserted( XRowSetEvent aEvent )\n    {\n        updateLocks();\n    }\n\n    /* ------------------------------------------------------------------ */\n    public void handleRowSetDeleted( XRowSetEvent aEvent )\n    {\n        updateLocks();\n    }\n\n    /* ------------------------------------------------------------------ */\n    public void handleRowSetUpdated( XRowSetEvent aEvent )\n    {\n        updateLocks();\n    }\n\n    /* ------------------------------------------------------------------ */\n    public void setLockingEnabled( boolean bLockingEnabled )\n    {\n        m_bLockingEnabled = bLockingEnabled;\n    }\n\n    /* ------------------------------------------------------------------ */\n    public boolean isLockingEnabled( )\n", "reference_code": "       ================================================================== */\n\n    /* ------------------------------------------------------------------ */\n    // XResetListener overridables\n    /* ------------------------------------------------------------------ */\n    public void cursorMoved( EventObject aEvent ) throws com.sun.star.uno.RuntimeException\n", "case_type": "block"}
{"generated_code": " acl = aclProvider.appendACL(clientApiObject, user);\n                                clientApiObject.setACL(acl);\n                            }\n                        }\n                    }\n                       this.aclProvider = aclProvider;\n\n        if (workspaceRepository == null) {\n            throw new VisalloException(\"WorkspaceRepository is not set\");\n        }\n\n        if (configuration == null) {\n            throw new VisalloException(\"Configuration is not set\");\n        }\n\n        if (aclProvider == null) {\n            throw new VisalloException(\"ACLProvider is not set\");\n        }\n\n        if (workspaceRepository == null) {\n            throw new VisalloException(\"WorkspaceRepository is not set\");\n        }\n\n        if (configuration == null) {\n            throw new VisalloException(\"Configuration is not set\");\n        }\n\n        if (aclProvider == null) {\n            throw new VisalloException(\"ACLProvider is not set\");\n        }\n\n        if (workspaceRepository == null) {\n            throw new VisalloException(\"WorkspaceRepository is not", "reference_code": "        this.aclProvider = aclProvider;\n", "case_type": "block"}
{"generated_code": "public class LdapMonitorTests extends AbstractLdapTests {\n\n    private static final String LDAP_URL = \"ldap://localhost:1383\";\n\n    private static final String LDAP_USER = \"uid=admin,ou=system\";\n\n    private static final String LDAP_PASSWORD = \"admin\";\n\n    private static final String LDAP_BASE_DN = \"ou=system\";\n\n    private static final String LDAP_USER_DN = \"uid=admin,ou=system\";\n\n    private static final String LDAP_USER_PASSWORD = \"admin\";\n\n    private static final String LDAP_USER_FILTER = \"(uid=admin)\";\n\n    private static final String LDAP_USER_FILTER_WITH_DN = \"(uid=admin,ou=system)\";\n\n    private static final String LDAP_USER_FILTER_WITH_DN_AND_PASSWORD = \"(uid=admin,ou=system,password=admin)\";\n\n    private static final String LDAP_USER_FIL", "reference_code": "public class PooledConnectionFactoryMonitorTests extends AbstractLdapTests {\n", "case_type": "block"}
{"generated_code": ".getInstance();\n        PcepAppConfig config = configRegistry.getConfig(appId, PcepAppConfig.class);\n\n        log.info(\"pcep peer configuration received through rest\");\n        if (config        private final PcepAppConfig appConfig = configRegistry.getConfig(appId, PcepAppConfig.class);\n\n    @Activate\n    public PcepCfgProvider() {\n        super(new ProviderId(\"pcep\", PROVIDER_ID));\n    }\n\n    private class InternalConfigListener implements NetworkConfigListener {\n        @Override\n        public void event(NetworkConfigEvent event) {\n            createConfiguration();\n        }\n    }\n\n    public PcepCfgProvider(ApplicationId appId) {\n        super(appId);\n    }\n\n    public PcepCfgProvider(ApplicationId appId, String name) {\n        super(appId, name);\n    }\n\n    public PcepCfgProvider(ApplicationId appId, String name, String description) {\n        super(appId, name, description);\n    }\n\n    public PcepCfgProvider(ApplicationId app", "reference_code": "    private ApplicationId appId;\n\n    /**\n     * Creates a Bgp config provider.\n     */\n    public PcepCfgProvider() {\n", "case_type": "block"}
{"generated_code": " getProject() {\n    return myProject;\n  }\n\n  @NotNull\n  public static XDebuggerTree getInstance(@NotNull AnActionEvent e) {\n    return (XDebuggerTree)e.getData(XDEBUGGER_TREE_KEY);\n  }\n\n  @Override\n  public void setSelectedNode(@Nullable TreeNode node, boolean value) {\n    super.setSelectedNode(node, value);\n    for (XDebuggerTreeListener listener : myListeners) {\n      listener.selectedNodeChanged(node, value);\n    }\n  }\n\n  @Override\n  public void setSelectedPath(@Nullable TreeNode[] path, boolean value) {\n    super.setSelectedPath(path, value);\n    for (XDebuggerTreeListener listener : myListeners) {\n      listener.selectedPathChanged(path, value);\n    }\n  }\n\n  @Override\n  public void setSelectedValue(@Nullable Object value, boolean valueSelected) {\n    super.setSelectedValue(value, valueSelected);\n    for (XDebuggerTreeListener listener : myListeners) {\n      listener.selectedValue", "reference_code": "    }\n  }\n\n", "case_type": "block"}
{"generated_code": "import java.awt.Color;\nimport java.util.Observable;\nimport java.util.Observer;\n\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTextField;\nimport javax.swing.text.JTextComponent;\n\nimport org.apache.log4j.Logger;\n\nimport evaluation.simulator.gui.service.DescriptionService;\n\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.awt.GridBagLayout;\nimport java.awt.GridLayout;\nimport java.util.Observable;\nimport java.util.Observer;\n\nimport javax.swing.JButton;\nimport javax.swing.JLabel;\nimport javax.swing.JPanel;\nimport javax.swing.JScrollPane;\nimport javax.swing.JTabbedPane;\nimport javax.swing.JTextField;\nimport javax.swing.text.JTextComponent;\n\nimport java.awt.Color;\nimport java.awt.Dimension;\nimport java.awt.Grid", "reference_code": "import java.awt.Color;\nimport java.util.Observable;\nimport java.util.Observer;\n\n", "case_type": "block"}
{"generated_code": "\n    private final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n\n    public TradeToJsonMarshaller() {\n    }\n\n    public TradeToJsonMarshaller(Gson gson) {\n        this.gson = gson;\n    }\n\n    public Gson getGson() {\n        return gson;\n    }\n\n    public void setGson(Gson gson) {\n        this.gson = gson;\n    }\n\n    public String apply(Trade trade) {\n        return gson.toJson(trade);\n    }\n\n    public String apply(Trade trade, Gson gson) {\n        return gson.toJson(trade);\n    }\n\n    public String apply(Trade trade, String gson) {\n        return gson.toJson(trade);\n    }\n\n    public String apply(Trade trade, Gson gson, String gson2) {\n        return gson.toJson(trade);\n    }\n\n    public String apply(Trade trade, Gson g", "reference_code": "    private Gson gson = new GsonBuilder().create();\n", "case_type": "block"}
{"generated_code": "default)\n                .error(R.drawable.sync_avatar_default)\n                .into(profileAvatarTarget);\n    }\n}\n\n    @Override\n    protected void onClick() {\n        super.onClick();\n        Telemetry.sendEvent(mContext, TelemetryContract.Event.SYNC_PREFERENCE_CLICKED, Method.CLICK);\n        launchFxASetup();\n    }\n}\n\n    @Override\n    protected void onPrepareSyncAdapter() {\n        super.onPrepareSyncAdapter();\n        AppConstants.getFxAccountManager(mContext).addSyncAdapterListener(this);\n    }\n\n    @Override\n    protected void onFinishSyncAdapter() {\n        super.onFinishSyncAdapter();\n        AppConstants.getFxAccountManager(mContext).removeSyncAdapterListener(this);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super        Telemetry.sendEvent(mContext, TelemetryContract.Event.SYNC_PREFERENCE_CLICKED, Method.CLICK", "reference_code": "    }\n", "case_type": "block"}
{"generated_code": ":    org.jfrog.hudson.maven3.ArtifactoryMaven3NativeConfigurator.ArtifactoryMaven3NativeConfiguratorBuilder;\n\nimport org.jfrog.hudson.util.ResolverOverrider;\nimport org.jfrog.hudson.util.converters.DeployerResolverOverriderConverter;\nimport org.kohsuke.stapler.DataBoundConstructor;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.util.Map;\n\npublic class ArtifactoryMaven3NativeConfiguratorBuilder extends DeployerResolverOverriderConverter {\n\n    public ArtifactoryMaven3NativeConfiguratorBuilder(ServerDetails details, ServerDetails resolverDetails, CredentialsConfig resolverCredentialsConfig) {\n        super(details, resolverDetails, resolverCredentialsConfig);\n    }\n\nimport hudson.model.Action;\nimport hudson.model.Environment;\nimport hudson.", "reference_code": "import org.kohsuke.stapler.DataBoundConstructor;\nimport org.kohsuke.stapler.bind.JavaScriptMethod;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\n", "case_type": "block"}
{"generated_code": "    }\n\n    public void sendMessage(View view) {\n        // TODO Auto-generated method stub\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create an Intent to start the second activity\n\n        // Create", "reference_code": "\n    }\n\n    public void connectToGui(View view){\n", "case_type": "block"}
{"generated_code": "java.lang.NullPointerException' might be ignored in a 'catch' block*/catch/**/(Exception ex) {\\n\" +\n                    \"      if (ex instanceof java.lang.NullPointerException) {\\n\" +\n                    \"      }\\n\" +\n                    \"    }\\n\" +\n                    \"  \");\n  }\n\n  public void testVMExceptionIgnored3() {\n    doStatementTest(\"\\n\" +\n                    \"    try {\\n\" +\n                    \"      System.out.println(\\\"hello\\\");\\n\" +\n                    \"    }\\n\" +\n                    \"    /*Unexpected VM exception like 'java.lang.NullPointerException' might be ignored in a 'catch' block*/catch/**/(Exception ex) {\\n\" +\n                    \"      if (ex instanceof java.lang.NullPointerException) {\\n\" +\n                    \"      }\\n\" +\n                    \"    }\\n\" +\n                    \"  \");\n  }\n\n  public void testVMExceptionIgnored4() {\n    doStatementTest(\"\\n\" +\n                    \"    try {\\n\" +\n                    \"      System.out.println(\\\"hello", "reference_code": "                    \"      if(ex instanceof ClassCastException) {\\n\" +\n                    \"        // report invalid cast\\n\" +\n                    \"        ex.printStackTrace();\\n\" +\n", "case_type": "block"}
{"generated_code": "            final MinidumpUploadJob minidumpUploadJob, boolean expectReschedule) {\n        final AtomicBoolean wasRescheduled = new AtomicBoolean();\n        final CountDownLatch uploadsFinishedLatch = new CountDownLatch(1);\n        uploadAllMinidumpsOnUiThread(\n                minidumpUploadJob, new MinidumpUploadJob.UploadsFinishedCallback() {\n                    @Override\n                    public void uploadsFinished(boolean reschedule) {\n                        wasRescheduled.set(reschedule);\n                        uploadsFinishedLatch.countDown();\n                    }\n                });\n        uploadAllMinidumpsOnUiThread(\n                minidumpUploadJob, new MinidumpUploadJob.UploadsFinishedCallback() {\n                    @Override\n                    public void uploadsFinished(boolean reschedule) {\n                        wasRescheduled.set(reschedule);\n                        uploadsFinishedLatch.countDown();\n                    }\n                });\n        uploadAllMinidumpsOnUiThread(\n                minidumpUploadJob, new MinidumpUploadJob", "reference_code": "            MinidumpUploadJob minidumpUploadJob, final boolean expectReschedule) {\n        final CountDownLatch uploadsFinishedLatch = new CountDownLatch(1);\n        AtomicBoolean wasRescheduled = new AtomicBoolean();\n        uploadAllMinidumpsOnUiThread(\n", "case_type": "block"}
{"generated_code": "\n                } catch (IllegalAccessException ex) {\n                    LoggerFactory.getLogger(ModifiersPreprocessor.class).error(\"Could not access field {}\", field, ex);\n                }\n            }\n        }\n    }\n    //</editor-fold>\n\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Preprocessor Methods\">\n    @Override\n    public void preprocess(Object object) {\n        // TODO: Implement this method\n    }\n    //</editor-fold>\n\n    //<editor-fold defaultstate=\"collapsed\" desc=\"Preprocessor Cache\">\n    /**\n     * Returns the preprocessor for the specified annotation.\n     *\n         */\n    @SuppressWarnings(\"unchecked\")\n    protected void fillCache(Class objectClass, Map<Class<? extends Annotation>, IModifier> processors) {\n        synchronized (cache) {\n            if (cache.containsKey(objectClass)) {\n                return;\n            }\n        }\n\n        // if the class is not in the cache yet, fill it\n        //", "reference_code": "     */\n    private synchronized static void fillCache(Class objectClass, Map<Class<? extends Annotation>, IModifier> processors) {\n", "case_type": "block"}
{"generated_code": "{\n    av(View view)\n    {\n    }\n\n    av(View view, int i)\n    {\n    }\n\n    av(View view, int i, int i2)\n    {\n    }\n\n    av(View view, int i, int i2, int i3)\n    {\n    }\n\n    av(View view, int i, int i2, int i3, int i4)\n    {\n    }\n\n    av(View view, int i, int i2, int i3, int i4, int i5)\n    {\n    }\n\n    av(View view, int i, int i2, int i3, int i4, int i5, int i6)\n    {\n    }\n\n    av(View view, int i, int i2, int i3, int i4, int i5, int i6, int i7)\n    {\n    }\n\n    av(View view, int i, int i2, int i3, int i4, int i5, int i6, int i7, int i8)", "reference_code": "    implements au\n{\n\n", "case_type": "block"}
{"generated_code": "     * @return true if this is a flowerpot\n     */\n    @Deprecated\n    @ApiResult\n    @ApiSince(1.16)\n    @ApiRemoved(reason = \"This is not a flowerpot anymore\")\n    @ApiNote(value = \"This is not a flowerpot anymore\", author = \"FlowerPot\")\n    @ApiNote(value = \"This is not a flowerpot anymore\", author = \"FlowerPot\", date = \"2017-05-01\")\n    @ApiNote(value = \"This is not a flowerpot anymore\", author = \"FlowerPot\", date = \"2017-05-01\", since = \"1.16\")\n    @ApiNote(value = \"This is not a flowerpot anymore\", author = \"FlowerPot\", date = \"2017-05-01\", since = \"1.16\", removed = \"2017-05-01\")\n    @ApiNote(value = \"This is not a flowerpot anymore\", author = \"FlowerPot\", date = \"201", "reference_code": "     * @return Whether this is a flowerpot\n     */\n", "case_type": "block"}
{"generated_code": "import java.nio.ByteOrder;\n\npublic class DirectByteBufferFactory implements ByteBufferFactory {\n\n    public static final ByteBufferFactory INSTANCE = new DirectByteBufferFactory();\n\n    private DirectByteBufferFactory() {\n    }\n\n    public static DirectByteBufferFactory getInstance() {\n        return INSTANCE;\n    }\n\n    @Override\n    public ByteBuffer getBuffer() {\n        return getBuffer(DEFAULT_BYTE_ORDER);\n    }\n\n    @Override\n    public ByteBuffer getBuffer(ByteOrder endianness) {\n        return getBuffer(endianness, DEFAULT_CAPACITY);\n    }\n\n    @Override\n    public ByteBuffer getBuffer(int capacity) {\n        return getBuffer(DEFAULT_BYTE_ORDER, capacity);\n    }\n\n    @Override\n    public ByteBuffer getBuffer(ByteOrder endianness, int capacity) {\n        return ByteBuffer.allocateDirect(capacity).order(endianness);\n    }\n\n    @Override\n    public ByteBuffer getBuffer() {\n        return getBuffer(DEFAULT_BYTE_ORDER);\n    }", "reference_code": "import java.nio.ByteOrder;\n\npublic class DirectByteBufferFactory implements ByteBufferFactory {\n", "case_type": "block"}
{"generated_code": " loadGlue(Glue glue, List<URI> gluePaths) {\n                glue.addStepDefinition(new StubStepDefinition(\"pattern1\"));\n                for (HookDefinition hook : hooks) {\n                    glue.addHook(hook);\n                }\n            }\n\n            @Override\n            public TestRunner getTestRunner() {\n                return new TestRunner() {\n                    @Override\n                    public void runPickle(Pickle pickle) {\n                        for (HookDefinition hook : hooks) {\n                            hook\n            for (HookDefinition hook : hooks) {\n                glue.addHook(hook);\n            }\n        }\n\n        TestRunner runner = new TestRunner(bus, runtimeOptions) {\n            @Override\n            public void runPickle(Pickle pickle) {\n                for (HookDefinition hook : hooks) {\n                    hook.execute(pickle);\n                    hook.getLocation();\n                    hook.getTagExpression();\n                    hook.getOrder();\n                    hook.getType();\n                    hook.getSource();\n                    hook.getLine();\n                    hook.getStepDefinition();", "reference_code": "                for (HookDefinition hook : hooks) {\n                    glue.addBeforeHook(hook);\n", "case_type": "block"}
{"generated_code": "        final int rx = worldToCanvas(x, scale);\n        final int ry = worldToCanvas(y, scale);\n        g.setColor(color);\n        g.fillRect(rx, ry, width * scale, height * scale);\n    }\n\n    /**\n     * Draw the <code>RPEntity</code> in specified color.\n     * @param g Graphics context\n     * @param scale Scaling factor\n     * @param color Drawing color\n     */\n    void draw(final Graphics g, final int scale, final int x, final int y, final int width, final int height, final Color color) {\n        final int rx = worldToCanvas(x, scale);\n        final int ry = worldToCanvas(y, scale);\n        g.setColor(color);\n        g.fillRect(rx, ry, width * scale, height * scale);\n    }\n\n    /**\n     * Draw the <code>RPEntity</code> in specified color.\n     * @param g Graphics context\n     * @param scale Scaling factor\n", "reference_code": "        final int rx = worldToCanvas(x, scale);\n", "case_type": "block"}
{"generated_code": "(    import com.google.common.hash.Hashing;\nimport com.google.devtools.build.lib.vfs.DigestHashFunction;\nimport com.google.devtools.build.lib.vfs.DigestHashFunction.DigestHashFunction;\nimport com.google.devtools.build.lib.vfs.DigestHashFunction.DigestHashFunctionNotRegisteredException;\nimport com.google.devtools.build.lib.vfs.DigestHashFunction.DigestHashFunctionNotSetException;\nimport com.google.devtools.build.lib.vfs.DigestHashFunction.DigestFunctionConverter;\nimport java.lang.reflect.Field;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.JUnit4;\n\n@RunWith(JUnit4.class)\npublic class DigestHashFunctionLateRegistrationTest {\n  private final DigestFunctionConverter converter = new DigestFunctionConverter();\n\n  @Before\n  public void resetStaticDefault() throws IllegalAccessException, No", "reference_code": "import static org.junit.Assert.assertThrows;\n\nimport com.google.common.hash.Hashing;\n", "case_type": "block"}
{"generated_code": "\n@Command(name = \"resharper-inspect-code\", description = \"Extracts code from Resharper Inspect Code\")\n@SuppressWarnings(\"checkstyle:VisibilityModifier\")\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n", "reference_code": "\n@Command(name = \"resharper-inspectcode\", description = \"Add code duplication information from ReSharper InspectCode output file\")\n", "case_type": "block"}
{"generated_code": "import com.amazonaws.services.ssooidc.model.*;\n\nimport com.amazonaws.protocol.*;\nimport com.amazonaws.annotation.SdkInternalApi;\n\n@Generated(\"com.amazonaws:aws-java-sdk-code-generator\")\n@SdkInternalApi\npublic class StartDeviceAuthorizationRequestMarshaller {\n\n    private static final StartDeviceAuthorizationRequestMarshaller instance = new StartDeviceAuthorizationRequestMarshaller();\n\n    public static StartDeviceAuthorizationRequestMarshaller getInstance() {\n        return instance;\n    }\n\n    /**\n     * Marshall the given parameter object.\n     */\n    public void marshall(StartDeviceAuthorizationRequest startDeviceAuthorizationRequest, com.amazonaws.protocol.Marshaller<?> marshaller) {\n\n        if (startDeviceAuthorizationRequest == null) {\n            throw new SdkClientException(\"Invalid argument passed to marshall(...)\");\n        }\n\n    }\n\n    private StartDeviceAuthorizationRequestMarshaller() {}\n\n    public static class StartDeviceAuthorizationRequestMarshaller {\n\n        public static void marshall", "reference_code": "import com.amazonaws.services.ssooidc.model.*;\nimport com.amazonaws.transform.Marshaller;\n\nimport com.amazonaws.protocol.*;\nimport com.amazonaws.protocol.Protocol;\nimport com.amazonaws.annotation.SdkInternalApi;\n", "case_type": "block"}
{"generated_code": "                break;\n            }\n\n            // KARAF-421, use getStrings() instead strings field.\n            if (matches.size() == 1) {\n                break;\n            }\n\n            matches = getStrings().headSet(buffer);\n        }\n\n        for (String match : matches) {\n            // KARAF-421, use getStrings() instead strings field.\n            if (matches.size() == 1) {\n                break;\n            }\n\n            matches = getStrings().tailSet(buffer);\n\n            // KARAF-421, use getStrings() instead strings field.\n            if (matches.size() == 1) {\n                break;\n            }\n\n            // KARAF-421, use getStrings() instead strings field.\n            if (matches.size() == 1) {\n                break;\n            }\n\n            // KARAF-421, use getStrings() instead strings field.\n            if (matches.size() == 1) {\n                break;\n            }\n\n            //", "reference_code": "                break;\n            }\n\n", "case_type": "block"}
{"generated_code": "    assertEquals(fn2.apply(1, 2), \"1=2[1=2]\");\n  }\n\n  public void test_andThen_identity() {\n    ObjLongFunction<Integer, String> fn1 = (a, b) -> a + \"=\" + b;\n    assertEquals(fn1.andThen(Function.identity()).apply(1, 2), \"1=2\");\n  }\n\n  public void test_andThen_identity_null() {\n    ObjLongFunction<Integer, String> fn1 = (a, b) -> a + \"=\" + b;\n    assertEquals(fn1.andThen(Function.identity()).apply(null, 2), \"=2\");\n  }\n\n  public void test_andThen_identity_null_2() {\n    ObjLongFunction<Integer, String> fn1 = (a, b) -> a + \"=\" + b;\n    assertEquals(fn1.andThen(Function.identity()).apply(1, null), \"1=\");\n  }\n\n  public void test_andThen_identity_null_", "reference_code": "    assertEquals(fn1.apply(2, 3L), \"2=3\");\n    assertEquals(fn2.apply(2, 3L), \"[2=3]\");\n  }\n", "case_type": "block"}
{"generated_code": "\n    public void close() throws IOException {\n\n        if (input != null)\n            input.close();\n    }\n\n    public void close(boolean closeInput) throws IOException {\n\n        if (closeInput)\n            input.close();\n    }\n\n    public void close(boolean closeInput, boolean closeReader) throws IOException {\n\n        if (closeInput)\n            input.close();\n\n        if (closeReader)\n            input.close();\n    }\n\n    public void close(boolean closeInput, boolean closeReader, boolean closeWriter) throws IOException {\n\n        if (closeInput)\n            input.close();\n\n        if (closeReader)\n            input.close();\n\n        if (closeWriter)\n            input.close();\n    }\n\n    public void close(boolean closeInput, boolean closeReader, boolean closeWriter, boolean closeStream) throws IOException {\n\n        if (closeInput)\n            input.close();\n\n        if (closeReader)\n            input.close();\n\n        if (closeWriter)\n            input.close();\n\n        if (closeStream)\n            input.close", "reference_code": "\n    public void close() throws IOException {\n", "case_type": "block"}
{"generated_code": "import org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.junit4.SpringRunner;\n\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.context.ActiveProfiles;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework.test.context.junit4.SpringRunner;\nimport org.springframework", "reference_code": "import org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.boot.test.context.SpringBootTest;\n", "case_type": "block"}
{"generated_code": "public class JMXRemoteUrlConnectionFactorySupplierTest {\n\n    private JMXRemoteUrlConnectionFactorySupplier supplier;\n\n    @Before\n    @SuppressWarnings(\"unchecked\")\n    @SuppressWarnings(\"rawtypes\")\n    @Test\n    // @Test.Ignore\n    // @Test.Ignore(\"TODO: This test is not working\")\n    // @Test.Ignore(\"TODO: This test is not working\")\n    // @Test.Ignore(\"TODO: This test is not working\")\n    // @Test.Ignore(\"TODO: This test is not working\")\n    // @Test.Ignore(\"TODO: This test is not working\")\n    // @Test.Ignore(\"TODO: This test is not working\")\n    // @Test.Ignore(\"TODO: This test is not working\")\n    // @Test.Ignore(\"TODO: This test is not working\")\n    // @Test.Ignore(\"TODO: This test is not working\")\n    // @Test.Ignore(\"TODO: This test is not working\")\n    // @Test.Ignore(\"TODO: This test is not working\")\n", "reference_code": "public class JMXRemoteUrlConnectionFactorySupplierTest {\n\n    private JMXRemoteUrlConnectionFactorySupplier supplier;\n\n    @Before\n", "case_type": "block"}
{"generated_code": "        return new MyViewHolder(itemView);\n    }\n\n    public void add(Comentario comentario, int position) {\n        mCommentList.add(position, comentario);\n        notifyItemInserted(position);\n    }\n\n    public void remove(Comentario comentario) {\n        int position = mCommentList.indexOf(comentario);\n        mCommentList.remove(position);\n        notifyItemRemoved(position);\n    }\n\n    public void clear() {\n        int size = mCommentList.size();\n        mCommentList.clear();\n        notifyItemRangeRemoved(0, size);\n    }\n\n    public Comentario getItem(int position) {\n        return mCommentList.get(position);\n    }\n\n    public List<Comentario> getCommentList() {\n        return mCommentList;\n    }\n\n    public void setCommentList(List<Comentario> mCommentList) {\n        this.mCommentList = mCommentList;\n    }\n\n    public void setContext(Context context) {\n        this.context = context;", "reference_code": "        return new MyViewHolder(itemView);\n    }\n", "case_type": "block"}
{"generated_code": "package org.jivesoftware.smackx.pubsub.provider;\n\nimport org.jivesoftware.smack.PacketExtension;\nimport org.jivesoftware.smack.provider.PacketExtensionProvider;\nimport org.jivesoftware.smack.provider.ProviderManager;\nimport org.jivesoftware.smack.util.PacketExtensionParser;\nimport org.jivesoftware.smack.util.PacketExtensionParser.PacketExtensionProvider;\nimport org.jivesoftware.smack.util.PacketExtensionParser.PacketExtensionProvider;\nimport org.jivesoftware.smack.util.PacketExtensionParser.PacketExtensionProvider;\nimport org.jivesoftware.smack.util.PacketExtensionParser.PacketExtensionProvider;\nimport org.jivesoftware.smack.util.PacketExtensionParser.PacketExtensionProvider;\nimport org.jivesoftware.smack.util.PacketExtensionParser.PacketExtensionProvider;\nimport org.jivesoftware.smack.util.PacketExtensionParser.PacketExtensionProvider", "reference_code": "package org.jivesoftware.smackx.pubsub.provider;\n\nimport org.jivesoftware.smack.packet.PacketExtension;\nimport org.jivesoftware.smack.provider.PacketExtensionProvider;\nimport org.jivesoftware.smack.provider.ProviderManager;\n", "case_type": "block"}
{"generated_code": "     * Instantiates a new http response.\n     *\n     * @param httpCode the http code\n     * @param msg the msg\n     * @param headers the headers\n     */\n    HttpResponse(int httpCode, String msg, Map<String, String> headers) {\n        httpStatus = httpCode;\n        httpReason = msg;\n        this.headers.putAll(headers);\n        contents = null;\n    }\n\n    /**\n     * Instantiates a new http response.\n     *\n     * @param httpCode the http code\n     * @param msg the msg\n     * @param headers the headers\n     * @param contents the contents\n     */\n    HttpResponse(int httpCode, String msg, Map<String, String> headers, byte @Nullable [] contents) {\n        httpStatus = httpCode;\n        httpReason = msg;\n        this.headers.putAll(headers);\n        this.contents = contents;\n    }\n\n    /**\n     * Instantiates a new http response.\n     *\n     * @param httpCode the http code\n     * @param msg the msg\n     *", "reference_code": "     * Instantiates a new http response.\n", "case_type": "block"}
{"generated_code": "                thenReturn(analysisConfig);\n        when(analysisEntityFactory.copyAnalysisConfigWithSourcecode(any(AnalysisConfig.class))).\n                thenReturn(analysisConfig);\n        when(analysisEntityFactory.createAnalysisConfig(any(AnalysisConfig.class), any(PeerReviewHome.class))).\n                thenReturn(analysisConfig);\n        when(cliOption.getDexterServerConfig()).thenReturn(new DexterServerConfig(\"test\", \"test\", \"test\"));\n        when(cliOption.getDexterServerConfig().getDexterServer()).thenReturn(\"test\");\n        when(cliOption.getDexterServerConfig().getDexterServerPort()).thenReturn(8080);\n        when(cliOption.getDexterServerConfig().getDexterServerHost()).thenReturn(\"test\");\n        when(cliOption.getDexterServerConfig().getDexterServerProtocol()).thenReturn(\"http\");\n        when(cliOption.getDexterServerConfig().getDexterServerPath()).thenReturn(\"/\");\n        when(cliOption.getDexterServerConfig().getDexter", "reference_code": "            thenReturn(analysisConfig);\n", "case_type": "block"}
{"generated_code": "     * Sets the locally unique UID value for this principal. If the principal is not authenticated\n     * prior to this method being called, the UID will be set to null. If the principal is already\n     * authenticated, the UID will be set to the current UID. If the principal is not authenticated\n     * prior to this method being called, the UID will be set to null. If the principal is already\n     * authenticated, the UID will be set to the current UID. If the principal is not authenticated\n     * prior to this method being called, the UID will be set to null. If the principal is already\n     * authenticated, the UID will be set to the current UID. If the principal is not authenticated\n     * prior to this method being called, the UID will be set to null. If the principal is already\n     * authenticated, the UID will be set to the current UID. If the principal is not authenticated\n     * prior to this method being called, the UID will be set to null. If the principal is already\n     * authenticated, the UID will be set to the current U", "reference_code": "     * Sets the locally unique username in preparation for authentication. Note that\n", "case_type": "block"}
{"generated_code": "import com.lightcrafts.model.Rendering;\nimport com.lightcrafts.model.impl.OperationTypeImpl;\n\nimport java.text.DecimalFormat;\n\n@SuppressWarnings(\"serial\")\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@Deprecated\n@", "reference_code": "\nimport java.text.DecimalFormat;\n\n", "case_type": "block"}
{"generated_code": " OptimizerUtils.ALLOW_SIZE_EXPRESSION_EVALUATION = oldFlagEval;\n            OptimizerUtils.ALLOW_CONSTANT_FOLDING = oldFlagFold;\n            OptimizerUtils.ALLOW_RAND_JOB_RECOMPILE = oldFlagRand1;\n            OptimizerUtils.ALLOW_BRANCH_REMOVAL            String fullDMLScriptName;\n            String[] programArgs;\n\n            //set up test\n            String SCRIPT_DIR = \"../../../scripts/\";\n\n            //set up test\n            String TEST_DIR = \"functions/recompile/\";\n            String TEST_CLASS_DIR = TEST_DIR + \n                RandSizeExpressionEvalTest.class.getSimpleName() + \"/\";\n\n            //set up test\n            String TEST_NAME = \"rand_size_expr_eval\";\n\n            //set up test\n            String fullDMLScriptName;\n            String[] programArgs;\n\n            //set up test\n            String SCRIPT_DIR = \"../../../scripts/\";\n\n            //set up test\n", "reference_code": "            TestConfiguration config = getTestConfiguration(testName);\n            config.addVariable(\"rows\", rows);\n            config.addVariable(\"cols\", cols);\n            loadTestConfiguration(config);\n\n", "case_type": "block"}
{"generated_code": "  public List<NotificationQueueDto> findOldest(int count) {\n    if (count <= 0) {\n      return Collections.emptyList();\n    }\n\n    // We don't need to lock the whole table, just the first N rows\n    // to avoid blocking the whole table.\n    // We also don't need to lock the whole table, just the first N rows\n    // to avoid blocking the whole table.\n    // We also don't need to lock the whole table, just the first N rows\n    // to avoid blocking the whole table.\n    // We also don't need to lock the whole table, just the first N rows\n    // to avoid blocking the whole table.\n    // We also don't need to lock the whole table, just the first N rows\n    // to avoid blocking the whole table.\n    // We also don't need to lock the whole table, just the first N rows\n    // to avoid blocking the whole table.\n    // We also don't need to lock the whole table, just the first N rows\n    // to avoid blocking the whole table.\n    // We also don't", "reference_code": "  public List<NotificationQueueDto> selectOldest(int count) {\n    if (count < 1) {\n      return Collections.emptyList();\n    }\n", "case_type": "block"}
{"generated_code": "    /**\n     * Called when a new period is started.\n     *\n     * @param totalValue the total value of the events in this period\n     * @param eventCount how many events occurred\n     * @param totalEventTime how long the events were running for\n     */\n    void start(double totalValue, long eventCount, double totalEventTime);\n\n    /**\n     * Called when a new event is added.\n     *\n     * @param totalValue the total value of the events in this period\n     * and the total value of the events in the previous period.\n     *\n     * @param eventCount how many events occurred\n     * @param totalEventTime how long the events were running for\n     * @param period how long this period is\n     */\n    void add(double totalValue, long eventCount, double totalEventTime, long period);\n\n    /**\n     * Called when a new event is added.\n     *\n     * @param totalValue the total value of the events in this period\n     * and the total value of the events in the previous period.\n     *\n     * @param eventCount how many", "reference_code": "    /**\n     * @param totalValue sum of all event values in the most recent period\n", "case_type": "block"}
{"generated_code": "    return (encoding != null);\n\n  }\n\n  public boolean isEncodingSet() {\n\n    return encodingSet();\n\n  }\n\n  public String getEncoding() {\n\n    return getCharacterEncodingScheme();\n\n  }\n\n  public String getEncodingOrDefault() {\n\n    return getEncoding();\n\n  }\n\n  public String getCharacterEncodingSchemeOrDefault() {\n\n    return getEncoding();\n\n  }\n\n  public String getCharacterEncodingSchemeOrDefault(String defaultEncoding) {\n\n    return getCharacterEncodingSchemeOrDefault();\n\n  }\n\n  public String getCharacterEncodingSchemeOrDefault(String defaultEncoding, String defaultVersion) {\n\n    return getCharacterEncodingSchemeOrDefault(defaultEncoding);\n\n  }\n\n  public String getCharacterEncodingSchemeOrDefault(String defaultEncoding, String defaultVersion,\n      Boolean defaultStandalone) {\n\n    return getCharacterEncodingSchemeOrDefault(defaultEncoding, defaultVersion);\n\n  }\n\n  public String getCharacterEncodingSchemeOrDefault(String defaultEncoding, String defaultVersion,\n      Boolean defaultStandalone", "reference_code": "    return encoding != null;\n", "case_type": "block"}
{"generated_code": "import com.espertech.esper.support.bean.SupportBeanFactory;\nimport com.espertech.esper.support.bean.SupportEventBeanFactory;\nimport com.espertech.esper.client.EventAdapterService;\nimport com.espertech.esper.client.EventBean;\nimport com.espertech.esper.client.KeyedFastPropertyGetter;\nimport com.espertech.esper.client.PropertyGetter;\nimport com.espertech.esper.client.PropertySetter;\nimport com.espertech.esper.client.TypeFactory;\nimport com.espertech.esper.client.TypeFactory.Type;\nimport com.espertech.esper.client.TypeFactory.TypeClass;\nimport com.espertech.esper.client.TypeFactory.TypeClass.TypeClassEnum;\nimport com.espertech.esper.client.TypeFactory.TypeClassEnum.TypeClassEnumEnum;\nimport com.espertech.esper.client.TypeFactory.TypeEnum.TypeEnum;\nimport com.espertech.esper.client.TypeFactory.TypeEnumEnum.TypeEnumEnum;\nimport com.espertech.esper.client.Type", "reference_code": "import com.espertech.esper.support.event.SupportEventBeanFactory;\nimport com.espertech.esper.support.event.SupportEventAdapterService;\nimport com.espertech.esper.client.EventBean;\n", "case_type": "block"}
{"generated_code": "                change.parentObjectId = AbbreviatedObjectId.fromObjectId(idBuf);\n                calculateAndSetChangeKind(change, repo);\n\n                // TODO: check if change is in working tree\n\n                // TODO: check if change is in index\n\n                // TODO: check if change is in working tree and index\n\n                // TODO: check if change is in working tree and index and both are not in cache\n\n                // TODO: check if change is in working tree and index and both are in cache\n\n                // TODO: check if change is in working tree and index and both are in cache and not in cache\n\n                // TODO: check if change is in working tree and index and both are in cache and not in cache\n\n                // TODO: check if change is in working tree and index and both are in cache and not in cache\n\n                // TODO: check if change is in working tree and index and both are in cache and not in cache\n\n                // TODO: check if change is in working tree and index and both are in cache and not in cache\n\n                // TODO: check if change is in working tree and index and both are in cache and not in", "reference_code": "                change.remoteObjectId = AbbreviatedObjectId.fromObjectId(idBuf);\n                calculateAndSetChangeKind(RIGHT, change);\n\n", "case_type": "block"}
{"generated_code": "\npublic class PictureSelection implements ISelection {\n\n    private final List<Picture> selection;\n\n    public PictureSelection() {\n        // TODO Auto-generated constructor stub\n\n        // empty selection\n\n        // TODO: check if this is really needed\n        // this is needed because the selection is not initialized\n        // in the constructor of the class\n        // this is not needed because the selection is not initialized\n        // in the constructor of the class\n        // this is not needed because the selection is not initialized\n        // in the constructor of the class\n        // this is not needed because the selection is not initialized\n        // in the constructor of the class\n        // this is not needed because the selection is not initialized\n        // in the constructor of the class\n        // this is not needed because the selection is not initialized\n        // in the constructor of the class\n        // this is not needed because the selection is not initialized\n        // in the constructor of the class\n        // this is not needed because the selection is not initialized\n        // in the constructor of the class\n        // this is not needed because the selection is not initialized\n        // in the constructor of the class", "reference_code": "\npublic class PictureSelection implements Selection<Picture> {\n    private List<Picture> selection;\n\n    public PictureSelection() {\n", "case_type": "block"}
{"generated_code": "p>\n     * If the event's type is not {@link SseEventType.DATA}, this method\n     * will return null.\n     * </p>\n     * @return the payload of the event\n     * @throws IOException if an error occurs while reading the event\n     */\n    //    public SsePayload getPayload() throws IOException {\n    //        if (_payload == null) {\n    //            return null;\n    //        }\n\n    //        if (_eventType != SseEventType.DATA) {\n    //            String s = \"readData() can only be used to read events \" +\n    //                       \"of type SseEventType.DATA\";\n    //            throw new SseException(s);            \n    //        }\n\n    //        return _payload;\n    //    }\n\n    //    public String getName() {\n    //        return _eventName;\n    //    }\n\n    //    public SseEventType getType() {\n    //        return _eventType;\n    //    }\n\n    //    public SseEventType next()", "reference_code": "        synchronized (this) {        \n            if (_payload != null) {\n                // If we are here, then it means that readData() was invoked \n                // after next(). So, the _payload is already setup and we just\n                // have to return the data.\n", "case_type": "block"}
{"generated_code": "    Model myModel;\n    Scale scale;\n    Translate translate;\n    //boolean pickable;\n    //boolean transformable;\n    //boolean detachable;\n    //boolean allowChildrenWrite;\n    //boolean allowTransformWrite;\n    //boolean allowDetach;\n    //boolean allowPickReporting;\n    //boolean allowPick;\n    //boolean allowChildren;\n    //boolean allowTransform;\n    //boolean allowDetach;\n    //boolean allowPickReporting;\n    //boolean allowPick;\n    //boolean allowChildren;\n    //boolean allowTransform;\n    //boolean allowDetach;\n    //boolean allowPickReporting;\n    //boolean allowPick;\n    //boolean allowChildren;\n    //boolean allowTransform;\n    //boolean allowDetach;\n    //boolean allowPickReporting;\n    //boolean allowPick;\n    //boolean allowChildren;\n    //boolean allowTransform;\n    //boolean allowDetach;\n    //boolean allowPickReporting;\n    //boolean allowPick;\n    //boolean allowChildren;\n    //boolean allowTransform;\n", "reference_code": "    Model myModel;\n    Scale scale;\n    Translate translate;\n", "case_type": "block"}
{"generated_code": "\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public String getSupportedType() {\n        return \"ContentSource\";\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isSupported(Object value) {\n        return value instanceof ContentSource;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isSupported(Class value) {\n        return ContentSource.class.isAssignableFrom(value);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isSupported(String value) {\n        return \"ContentSource\".equals(value);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isSupported(Class[] value) {\n        return ContentSource.class.isAssignableFrom(value[0]);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    public boolean isSupported(Object[] value) {\n       ", "reference_code": "\n    /**\n     * {@inheritDoc}\n     */\n", "case_type": "block"}
{"generated_code": "channel users.\n     * \n     * @return     * @return true if the nicks are identical (case insensitive).\n     */\n    public boolean equals(Object o) {\n        if (o == null) {\n            return false;\n        }\n\n        if (o instanceof User) {\n            User other = (User) o;\n            return other._lowerNick.equals(_lowerNick);\n        }\n        return false;\n    }\n\n    /**\n     * Returns true if the nick represented by this User object is the same\n     * as the nick of the User object given as an argument.\n     * A case insensitive comparison is made.\n     * \n     * @return true if the nicks are identical (case insensitive).\n     */\n    public boolean equals(Object o) {\n        if (o == null) {\n            return false;\n        }\n\n        if (o instanceof User) {\n            User other = (User) o;\n            return other._lowerNick.equals(_lowerNick);\n        }\n        return false;\n    }\n\n    /**\n     * Returns true", "reference_code": "     * @return true if o is a User object with a matching lowercase nick.\n     */\n    public boolean equals(Object o) {\n", "case_type": "block"}
{"generated_code": "    int LBRACE = 18;\n    int RBRACE = 19;\n    int COMMA = 20;\n    int EQUAL = 21;\n    int EQUAL_ASSIGN = 22;\n    int PLUS_ASSIGN = 23;\n    int MINUS_ASSIGN = 24;\n    int MULT_ASSIGN = 25;\n    int DIV_ASSIGN = 26;\n    int MOD_ASSIGN = 27;\n    int AND_ASSIGN = 28;\n    int OR_ASSIGN = 29;\n    int XOR_ASSIGN = 30;\n    int SHL_ASSIGN = 31;\n    int SHR_ASSIGN = 32;\n    int AND_NOT_ASSIGN = 33;\n    int OR_NOT_ASSIGN = 34;\n    int XOR_NOT_ASSIGN = 35;\n    int SHL_NOT_ASSIGN = 36;\n    int SHR_NOT_ASSIGN = 37;\n    int NOT_ASSIGN = 38;\n    int LT_ASSIGN", "reference_code": "    int LITERAL_elseif = 18;\n    int COMMA = 19;\n    int ID = 20;\n", "case_type": "block"}
{"generated_code": "    public static Proxy proxy;\n\n    @Instance(Main.MODID)\n    public static Main instance;\n\n    /**\n    * This is the first method called when the mod is enabled.\n    * This is where you register your items, blocks, entities, etc.\n    * This is also where you register your recipes.\n    * This is where you register your handlers.\n    * This is where you register your mod events.\n    * This is where you register your configs.\n    * This is where you register your client side events.\n    * This is where you register your server side events.\n    * This is where you register your client side events.\n    * This is where you register your server side events.\n    * This is where you register your client side events.\n    * This is where you register your server side events.\n    * This is where you register your client side events.\n    * This is where you register your server side events.\n    * This is where you register your client side events.\n    * This is where you register your server side events.\n    * This is where you register your client side events.\n    * This", "reference_code": "    public static CommonProxy proxy;\n\n    @Instance\n    public static Main instance = new Main();\n\n    /**\n", "case_type": "block"}
{"generated_code": "    @Override\n    public DateTime parse(String value) {\n        return DateTimeFormat.forPattern(\"yyyyMMdd\").parseDateTime(value);\n    }\n\n    @Override\n    public String format(DateTime value) {\n        return DateTimeFormat.forPattern(\"yyyyMMdd\").print(value);\n    }\n\n    @Override\n    public String getDescription() {\n        return \"Date de la recherche\";\n    }\n\n    @Override\n    public String getExample() {\n        return \"-date 20150101\";\n    }\n\n    @Override\n    public String getDefaultValue() {\n        return \"20150101\";\n    }\n\n    @Override\n    public String getHelp() {\n        return \"Date de la recherche\";\n    }\n\n    @Override\n    public String getShortHelp() {\n        return \"Date de la recherche\";\n    }\n\n    @Override\n    public String getLongHelp() {\n        return \"Date de la recherche\";\n    }\n\n    @Override\n    public String getTag() {\n", "reference_code": "    @Override\n    protected void setValueFromArg(String arg) {\n            setValue(DateTime.parse(arg, DateTimeFormat.forPattern(\"yyyyMMdd\")));\n", "case_type": "block"}
{"generated_code": "    LazySequenceI {\n\n    DASServerI server;\n    DASDsn dsn;\n\n    /**\n     * The segment to use for this sequence\n    **/\n\n    //\n    //The segment to use for this sequence\n    //\n\n    private DASServerI server;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn dsn;\n    private DASDsn", "reference_code": "    LazySequenceI \n{\n    DASServerI server;\n    DASDsn dsn;\n", "case_type": "block"}
{"generated_code": "    /**\n     * @return\n     * @throws RemoteException\n     */\n    String getCodiceProdottoString() throws RemoteException;\n\n    /**\n     * @return\n     * @throws RemoteException\n     */\n    String getDescrizioneProdotto() throws RemoteException;\n\n    /**\n     * @return\n     * @throws RemoteException\n     */\n    String getNomeProdottoString() throws RemoteException;\n\n    /**\n     * @return\n     * @throws RemoteException\n     */\n    String getDescrizioneProdottoString() throws RemoteException;\n\n    /**\n     * @return\n     * @throws RemoteException\n     */\n    String getNomeProdottoString() throws RemoteException;\n\n    /**\n     * @return\n     * @throws RemoteException\n     */\n    String getDescrizioneProdottoString() throws RemoteException;\n\n    /**\n     * @return\n     * @throws RemoteException\n     */\n    String getNomeProdottoString() throws RemoteException;\n\n    /**\n     * @return\n     * @throws RemoteException\n    ", "reference_code": "    /**\n     * @return\n     * @throws RemoteException\n     */\n    int getQuantitaDiSoglia() throws RemoteException;\n", "case_type": "block"}
{"generated_code": "        checkArgument(!Strings.isNullOrEmpty(lb.name()), ERR_NULL_LOAD_BALANCER_NAME);\n        checkArgument(!kubevirtLoadBalancerStore.isInUse(lb), lb.name() + ERR_IN_USE);\n\n        kubevirtLoadBalancerStore.createLoadBalancer(lb);\n        log.info(String.format(MSG_LOAD_BALANCER, lb.name(), MSG_CREATED));\n    }\n\n    @Override\n    public void updateLoadBalancer(KubevirtLoadBalancer lb) {\n        checkNotNull(lb, ERR_NULL_LOAD_BALANCER);\n        checkArgument(!Strings.isNullOrEmpty(lb.name()), ERR_NULL_LOAD_BALANCER_NAME);\n        checkArgument(!kubevirtLoadBalancerStore.isInUse(lb), lb.name() + ERR_IN_USE);\n\n        kubevirtLoadBalancerStore.updateLoadBalancer(lb);\n        log.info(String.format(MSG_LOAD", "reference_code": "        kubevirtLoadBalancerStore.updateLoadBalancer(lb);\n", "case_type": "block"}
{"generated_code": "\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.http.HttpSessionBindingEvent;\nimport javax.servlet.http.HttpSessionBindingListener;\nimport javax.servlet.http.HttpSessionEvent;\nimport javax.servlet.http.HttpSessionListener;\nimport javax.servlet.http.HttpSessionBindingEvent;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.http.HttpSessionBindingEvent;\nimport javax.servlet.http.HttpSessionListener;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\nimport javax.servlet.http.HttpSessionBindingEvent", "reference_code": "\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\n", "case_type": "block"}
{"generated_code": "currentUser)).thenReturn(true);\n        when(entityHashingService.md5ForEntity(cruiseConfig.server().security().adminsConfig())).thenReturn(md5);\n\n        AdminsConfigUpdateCommand command = new AdminsConfigUpdateCommand(goConfigService, adminsConfig, currentUser, result, entityHashingService, \"stale_md5\");\n\n        assertTrue(command.canContinue(cruiseConfig));\n    }\n\n    @Test\n    public void shouldUpdateThePreprocessedCruiseConfigAdminsConfig_with_new_admin_user() {\n        AdminsConfig adminsConfig = new AdminsConfig(new AdminUser(new CaseInsensitiveString(\"user\")));\n\n        AdminsConfigUpdateCommand command = new AdminsConfigUpdateCommand(goConfigService, adminsConfig, currentUser, result, entityHashingService, null);\n\n        command.update(cruiseConfig);\n\n        assertThat(cruiseConfig.server().security().adminsConfig(), is(adminsConfig));\n    }\n\n    @Test\n    public void", "reference_code": "\n        assertFalse(command.isValid(cruiseConfig));\n        TestCase.assertTrue(adminsConfigRequest.hasErrors());\n", "case_type": "block"}
{"generated_code": "\npublic class AndCondition extends CompareCondition {\n\n    public AndCondition(CompareCondition c) {\n        super(c);\n    }\n\n    public AndCondition(CompareCondition c, CompareCondition c2) {\n        super(c, c2);\n    }\n\n    public AndCondition(CompareCondition c, CompareCondition c2, CompareCondition c3) {\n        super(c, c2, c3);\n    }\n\n    public AndCondition(CompareCondition c, CompareCondition c2, CompareCondition c3, CompareCondition c4) {\n        super(c, c2, c3, c4);\n    }\n\n    public AndCondition(CompareCondition c, CompareCondition c2, CompareCondition c3, CompareCondition c4, CompareCondition c5) {\n        super(c, c2, c3, c4, c5);\n    }\n\n    public AndCondition(CompareCondition c, CompareCondition c2, CompareCondition c3, CompareCondition c4, CompareCondition c5, CompareCondition c6) {\n        super(c, c2, c3, c4, c5, c6);\n    }\n", "reference_code": "\npublic class AndCondition extends CompareCondition {\n", "case_type": "block"}
{"generated_code": "\n     */\n\n    private class MultiplyInPlaceParallelRunnable\n        implements ParallelRun    {\n        public void run()\n        {\n            float value = dest.getFloat();\n            float srcValue = src.getFloat();\n            dest.setFloat(modMultiply(value, srcValue));\n\n            dest.next();\n            src.next();\n            this.length--;\n        }\n\n        private DataStorage sourceAndDestination,\n                            source;\n        private long offset,\n                     length;\n    }\n\n    private class SquareInPlaceParallelRunnable\n        implements ParallelRun    implements Runnable\n    {\n        public void run()\n        {\n            float value = dest.getFloat();\n            dest.setFloat(modMultiply(value, value));\n\n            dest.next();\n            this.length--;\n        }\n\n        private DataStorage sourceAndDestination;\n        private long offset,\n                     length;\n    }\n\n    public MultiplyInPlaceRunnable createMultiplyInPlaceParallelRunnable(DataStorage sourceAndDest", "reference_code": "                dest.setFloat(modMultiply(dest.getFloat(), src.getFloat()));\n\n                dest.next();\n                src.next();\n                this.length--;\n            }\n", "case_type": "block"}
{"generated_code": "import org.apache.hadoop.security.token.TokenInfo;\nimport org.apache.hadoop.security.token.TokenSelector;\nimport org.apache.hadoop.security.token.TokenIdentifier;\nimport org.apache.hadoop.security.token.KerberosInfo;\nimport org.apache.hadoop.yarn.am.AMRMTokenSelector;\nimport org.apache.hadoop.yarn.am.ApplicationMasterProtocolPB;\nimport org.apache.hadoop.yarn.am.ApplicationMasterProtocolPB.AMRMTokenSelector;\nimport org.apache.hadoop.yarn.am.ApplicationMasterProtocolPB.ApplicationMasterProtocol;\nimport org.apache.hadoop.yarn.am.ApplicationMasterProtocolPB.ApplicationMasterProtocol.AMRMTokenSelector;\nimport org.apache.hadoop.yarn.am.ApplicationMasterProtocolPB.ApplicationMasterProtocol.AMRMTokenSelector.AMRMTokenSelectorType;\nimport org.apache.hadoop.yarn.am.ApplicationMasterProtocolPB.ApplicationMasterProtocol.AMRMTokenSelector.AMRMTokenSelectorType.AMRMTokenSelectorType.", "reference_code": "import org.apache.hadoop.security.KerberosInfo;\nimport org.apache.hadoop.security.SecurityInfo;\nimport org.apache.hadoop.security.token.TokenIdentifier;\nimport org.apache.hadoop.security.token.TokenInfo;\nimport org.apache.hadoop.security.token.TokenSelector;\n", "case_type": "block"}
{"generated_code": "());\n        assertPList(Helper.createPointList(0, 0.1, 8, 1, 9, 1, 1, 0.1, 10, 1, 11, 1, 2, 0.1), path.getWayList());\n        assertPList(Helper.createPointList(0, 0.1, 8, 1, 9, 1, 1, 0.1, 10, 1, 11, 1, 2, 0.1), path.getWayList(false));\n        assertPList(Helper.createPointList(0, 0.1, 8, 1, 9, 1, 1, 0.1, 10, 1, 11, 1, 2, 0.1), path.getWayList(true));\n        assertPList(Helper.createPointList(0, 0.1, 8, 1, 9, 1, 1, 0.1, 10, 1, ", "reference_code": "        path.setEdgeEntry(e1);\n        path.extract();\n        // 2-1-0\n", "case_type": "block"}
{"generated_code": "import android.os.Build;\nimport android.os.Bundle;\nimport android.preference.Preference;\nimport android.preference.PreferenceActivity;\nimport android.support.v4.app.NavUtils;\nimport android.view.MenuItem;\n\nimport com.gpshub.R;\nimport com.gpshub.service.ServiceManager;\nimport com.gpshub.ui.ThemeUtils;\nimport com.gpshub.utils.ContextHack;\n\nimport java.util.Map;\n\nimport android.app.ActionBar;\nimport android.content.SharedPreferences;\nimport android.content.SharedPreferences.OnSharedPreferenceChangeListener;\nimport android.os.Bundle;\nimport android.preference.Preference;\nimport android.preference.PreferenceActivity;\nimport android.support.v4.app.NavUtils;\nimport android.view.MenuItem;\nimport android.view.Menu;\nimport android.view.MenuInflater;\nimport android.view.MenuItem;\nimport android.view.View;\nimport android.view.ViewGroup", "reference_code": "import android.os.Build;\nimport android.os.Bundle;\nimport android.preference.Preference;\nimport android.preference.PreferenceActivity;\nimport android.support.v4.app.NavUtils;\nimport android.view.MenuItem;\n", "case_type": "block"}